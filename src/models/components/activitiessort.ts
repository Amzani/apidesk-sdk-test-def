/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specify the field by which to sort the activities, such as 'date' or 'type'. This determines the order in which the activities are returned.
 */
export const ActivitiesSortBy = {
  CreatedAt: "created_at",
  UpdatedAt: "updated_at",
} as const;
/**
 * Specify the field by which to sort the activities, such as 'date' or 'type'. This determines the order in which the activities are returned.
 */
export type ActivitiesSortBy = ClosedEnum<typeof ActivitiesSortBy>;

/**
 * Specifies the order in which the results should be sorted. Use 'asc' for ascending order or 'desc' for descending order. This parameter helps in organizing the retrieved activities based on a specified field.
 */
export const ActivitiesSortDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Specifies the order in which the results should be sorted. Use 'asc' for ascending order or 'desc' for descending order. This parameter helps in organizing the retrieved activities based on a specified field.
 */
export type ActivitiesSortDirection = ClosedEnum<
  typeof ActivitiesSortDirection
>;

export type ActivitiesSort = {
  /**
   * Specify the field by which to sort the activities, such as 'date' or 'type'. This determines the order in which the activities are returned.
   */
  by?: ActivitiesSortBy | undefined;
  /**
   * Specifies the order in which the results should be sorted. Use 'asc' for ascending order or 'desc' for descending order. This parameter helps in organizing the retrieved activities based on a specified field.
   */
  direction?: ActivitiesSortDirection | undefined;
};

/** @internal */
export const ActivitiesSortBy$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesSortBy
> = z.nativeEnum(ActivitiesSortBy);

/** @internal */
export const ActivitiesSortBy$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesSortBy
> = ActivitiesSortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesSortBy$ {
  /** @deprecated use `ActivitiesSortBy$inboundSchema` instead. */
  export const inboundSchema = ActivitiesSortBy$inboundSchema;
  /** @deprecated use `ActivitiesSortBy$outboundSchema` instead. */
  export const outboundSchema = ActivitiesSortBy$outboundSchema;
}

/** @internal */
export const ActivitiesSortDirection$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesSortDirection
> = z.nativeEnum(ActivitiesSortDirection);

/** @internal */
export const ActivitiesSortDirection$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesSortDirection
> = ActivitiesSortDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesSortDirection$ {
  /** @deprecated use `ActivitiesSortDirection$inboundSchema` instead. */
  export const inboundSchema = ActivitiesSortDirection$inboundSchema;
  /** @deprecated use `ActivitiesSortDirection$outboundSchema` instead. */
  export const outboundSchema = ActivitiesSortDirection$outboundSchema;
}

/** @internal */
export const ActivitiesSort$inboundSchema: z.ZodType<
  ActivitiesSort,
  z.ZodTypeDef,
  unknown
> = z.object({
  by: ActivitiesSortBy$inboundSchema.optional(),
  direction: ActivitiesSortDirection$inboundSchema.default("asc"),
});

/** @internal */
export type ActivitiesSort$Outbound = {
  by?: string | undefined;
  direction: string;
};

/** @internal */
export const ActivitiesSort$outboundSchema: z.ZodType<
  ActivitiesSort$Outbound,
  z.ZodTypeDef,
  ActivitiesSort
> = z.object({
  by: ActivitiesSortBy$outboundSchema.optional(),
  direction: ActivitiesSortDirection$outboundSchema.default("asc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesSort$ {
  /** @deprecated use `ActivitiesSort$inboundSchema` instead. */
  export const inboundSchema = ActivitiesSort$inboundSchema;
  /** @deprecated use `ActivitiesSort$outboundSchema` instead. */
  export const outboundSchema = ActivitiesSort$outboundSchema;
  /** @deprecated use `ActivitiesSort$Outbound` instead. */
  export type Outbound = ActivitiesSort$Outbound;
}

export function activitiesSortToJSON(activitiesSort: ActivitiesSort): string {
  return JSON.stringify(ActivitiesSort$outboundSchema.parse(activitiesSort));
}

export function activitiesSortFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesSort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesSort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesSort' from JSON`,
  );
}
