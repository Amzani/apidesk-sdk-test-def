/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The currency code associated with the company's financial transactions, following the ISO 4217 standard. This string indicates the currency used for billing and accounting purposes, helping to standardize financial data across the CRM. It is optional and may not be specified for all companies.
 */
export const ListCompaniesResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * The currency code associated with the company's financial transactions, following the ISO 4217 standard. This string indicates the currency used for billing and accounting purposes, helping to standardize financial data across the CRM. It is optional and may not be specified for all companies.
 */
export type ListCompaniesResponseCurrency = ClosedEnum<
  typeof ListCompaniesResponseCurrency
>;

/**
 * Indicates the type of bank account, such as checking, savings, or business. This information is returned as a string and helps in categorizing the account for financial operations and reporting.
 */
export const ListCompaniesResponseAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * Indicates the type of bank account, such as checking, savings, or business. This information is returned as a string and helps in categorizing the account for financial operations and reporting.
 */
export type ListCompaniesResponseAccountType = ClosedEnum<
  typeof ListCompaniesResponseAccountType
>;

/**
 * The currency property indicates the type of currency associated with the company's bank account, following the ISO 4217 standard. It specifies the currency in which transactions are conducted and is crucial for financial reporting and analysis. This property is included in the response when bank account details are relevant to the operation.
 */
export const ListCompaniesResponseDataCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * The currency property indicates the type of currency associated with the company's bank account, following the ISO 4217 standard. It specifies the currency in which transactions are conducted and is crucial for financial reporting and analysis. This property is included in the response when bank account details are relevant to the operation.
 */
export type ListCompaniesResponseDataCurrency = ClosedEnum<
  typeof ListCompaniesResponseDataCurrency
>;

export type ListCompaniesResponseBankAccounts = {
  /**
   * The name of the bank where the company's account is held. This field is part of the bank account details and helps identify the financial institution associated with the company's banking activities.
   */
  bankName?: string | null | undefined;
  /**
   * The bank account number associated with a company's bank account. This is a unique identifier for each account and is used for transactions and account management. It is returned as a string and may vary in format depending on the bank's specifications.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name under which the company's bank account is registered. This is typically the name of the account holder or the business entity and is returned as a string. It helps in identifying the account within the bank's records.
   */
  accountName?: string | null | undefined;
  /**
   * Indicates the type of bank account, such as checking, savings, or business. This information is returned as a string and helps in categorizing the account for financial operations and reporting.
   */
  accountType?: ListCompaniesResponseAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN) for the company's bank account. This is a standardized international code that facilitates cross-border transactions and is returned as a string. It ensures the account can be uniquely identified across international banking systems.
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC), also known as the SWIFT code, for the company's bank account. This code is used to identify the bank in international transactions and is returned as a string. It is essential for ensuring funds are transferred to the correct financial institution.
   */
  bic?: string | null | undefined;
  /**
   * The routing number is a nine-digit code used to identify a financial institution within the United States. It is essential for processing domestic wire transfers and electronic payments. This property is included in the response when the company's bank account details are available and relevant to the operation.
   */
  routingNumber?: string | null | undefined;
  /**
   * The BSB number is a six-digit numeric code used to identify the branch of an Australian or New Zealand bank or financial institution. It is crucial for processing transactions within these countries. This property appears in the response when the company's bank account information includes Australian or New Zealand bank details.
   */
  bsbNumber?: string | null | undefined;
  /**
   * The branch identifier is a unique code that identifies a specific branch of a bank or financial institution. It is used to ensure transactions are routed to the correct branch. This property is part of the response when detailed bank account information is provided for the company.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * The bank code is a unique identifier assigned to banks by a central authority or banking association within a country. It is used for identifying member banks in financial transactions. This property is included in the response when the company's bank account details require such identification.
   */
  bankCode?: string | null | undefined;
  /**
   * The currency property indicates the type of currency associated with the company's bank account, following the ISO 4217 standard. It specifies the currency in which transactions are conducted and is crucial for financial reporting and analysis. This property is included in the response when bank account details are relevant to the operation.
   */
  currency?: ListCompaniesResponseDataCurrency | null | undefined;
};

/**
 * Indicates the type of website, such as 'main', 'blog', or 'support'. This string helps categorize the website's purpose or function within the company's digital ecosystem. It is optional and may be omitted if the type is not specified.
 */
export const ListCompaniesResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Indicates the type of website, such as 'main', 'blog', or 'support'. This string helps categorize the website's purpose or function within the company's digital ecosystem. It is optional and may be omitted if the type is not specified.
 */
export type ListCompaniesResponseType = ClosedEnum<
  typeof ListCompaniesResponseType
>;

export type ListCompaniesResponseWebsites = {
  /**
   * A unique identifier for each website entry within the company's website list. This string is used to distinguish between different websites and is crucial for operations that require specific website identification. It is optional and may not be present for all websites.
   */
  id?: string | null | undefined;
  /**
   * The URL of the company's website, provided as a string. This is a required field and must be a valid URL format, representing the web address where the company's site can be accessed. It is essential for linking to the company's online resources.
   */
  url: string;
  /**
   * Indicates the type of website, such as 'main', 'blog', or 'support'. This string helps categorize the website's purpose or function within the company's digital ecosystem. It is optional and may be omitted if the type is not specified.
   */
  type?: ListCompaniesResponseType | null | undefined;
};

/**
 * Specifies the category or purpose of the address, such as 'billing', 'shipping', or 'office'. This helps in identifying the role of the address within the company's operations. The value is a string that aligns with predefined address types in the CRM.
 */
export const ListCompaniesResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category or purpose of the address, such as 'billing', 'shipping', or 'office'. This helps in identifying the role of the address within the company's operations. The value is a string that aligns with predefined address types in the CRM.
 */
export type ListCompaniesResponseDataType = ClosedEnum<
  typeof ListCompaniesResponseDataType
>;

export type ListCompaniesResponseAddresses = {
  /**
   * A unique identifier assigned to each address associated with a company. This ID is used to distinguish between different addresses within the CRM system. It is typically a non-empty string when an address is present.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category or purpose of the address, such as 'billing', 'shipping', or 'office'. This helps in identifying the role of the address within the company's operations. The value is a string that aligns with predefined address types in the CRM.
   */
  type?: ListCompaniesResponseDataType | null | undefined;
  /**
   * Represents the full address as a single unstructured string. This format is used when the API does not provide detailed address components, allowing for flexible address representation. It is useful for display purposes where structured data is not required.
   */
  string?: string | null | undefined;
  /**
   * The designated name or label for the address, which might include a description like 'Headquarters' or 'Main Office'. This helps users quickly identify the address's significance or location. It is a string value that can be customized by the user.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically including the street number, street name, and any apartment or suite numbers. This is a crucial part of the address used for mailing and identification purposes. It is formatted as a string and is often the primary address line used in correspondence.
   */
  line1?: string | null | undefined;
  /**
   * This property contains the second line of the company's address, which may include additional location details such as apartment or suite numbers. It is returned as a string and is optional, meaning it may not be present if not applicable to the address.
   */
  line2?: string | null | undefined;
  /**
   * This property holds the third line of the company's address, often used for further address details like building names or complex identifiers. It is an optional string field and may be omitted if not relevant to the address structure.
   */
  line3?: string | null | undefined;
  /**
   * This property represents the fourth line of the company's address, typically used for any additional address information that doesn't fit in the previous lines. It is an optional string and may not be included if unnecessary.
   */
  line4?: string | null | undefined;
  /**
   * This property specifies the street number of the company's address, providing a precise location on the street. It is returned as a string and is optional, as some addresses may not include a street number.
   */
  streetNumber?: string | null | undefined;
  /**
   * This property contains the name of the city where the company is located. It is an optional string field and provides geographical context within the address, aiding in identifying the company's location.
   */
  city?: string | null | undefined;
  /**
   * The full name of the state or region where the company is located. This information is part of the company's address details and is useful for geographical analysis or regional reporting. The value is returned as a string and may be empty if the state information is not available.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code associated with the company's address. This code is crucial for mail delivery and location-based services. It is returned as a string and may vary in format depending on the country's postal system.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the company's location, following the ISO 3166-1 alpha-2 standard. This two-letter code helps identify the country for international operations and integrations. It is returned as a string and is essential for global applications.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the company's address, represented as a string. This value is part of the geographical data used for mapping and location services. It may be empty if the latitude is not available or applicable.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the company's address, provided as a string. This data point is used in conjunction with latitude for precise location mapping and navigation services. It may be empty if the longitude is not available or applicable.
   */
  longitude?: string | null | undefined;
  /**
   * The 'county' field represents the sublocality or administrative division within a region, such as a county or district, associated with the company's address. This field is optional and may be empty if not applicable. It provides additional geographical context for the company's location.
   */
  county?: string | null | undefined;
  /**
   * The 'contact_name' field contains the full name of the primary contact person at the specified address. This information is useful for direct communication and correspondence with the company. It is an optional field and may be left blank if no specific contact is designated.
   */
  contactName?: string | null | undefined;
  /**
   * The 'salutation' field includes the formal greeting or title used for the contact person at the address, such as Mr., Ms., or Dr. This field helps in addressing the contact person appropriately in communications. It is optional and may be omitted if not relevant.
   */
  salutation?: string | null | undefined;
  /**
   * The 'phone_number' field provides the primary telephone number associated with the company's address. This number is used for voice communication and is formatted as a string, potentially including country and area codes. It is optional and may be absent if no phone number is available.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The 'fax' field contains the fax number associated with the company's address, formatted as a string. This number is used for sending and receiving documents via fax. It is an optional field and may be empty if the company does not use fax communication.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the company's address entry. This is typically used for official communications and may not always be present if the company has not provided an email. The format is a standard email string, such as 'example@company.com'.
   */
  email?: string | null | undefined;
  /**
   * The website URL linked to the company's address entry. This provides a direct link to the company's online presence and is formatted as a standard URL, such as 'https://www.company.com'. It may be absent if the company does not have a website.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the company's address entry. This field can contain any supplementary information that might be relevant to the address, such as delivery instructions or historical data. The format is a plain text string.
   */
  notes?: string | null | undefined;
  /**
   * A versioning string used to track changes to the address entry. This binary value is updated with each modification to prevent data conflicts, ensuring that the latest version of the address is always used. It is crucial for maintaining data integrity in concurrent environments.
   */
  rowVersion?: string | null | undefined;
};

export type ListCompaniesResponseSocialLinks = {
  /**
   * A unique identifier assigned to each social link associated with a company. This ID is used internally to distinguish between different social links and is not intended for display purposes. It is optional and may not be present for all social links.
   */
  id?: string | null | undefined;
  /**
   * The full URL of the company's social media profile or page. This is a required field and must be a valid URL, such as 'https://www.twitter.com/apideck'. It provides direct access to the company's social presence and is crucial for integration with social media platforms.
   */
  url: string;
  /**
   * Specifies the type of social media platform associated with the URL, such as 'twitter', 'facebook', or 'linkedin'. This field helps categorize the social link and is useful for filtering or displaying specific types of social media connections. It is optional and may not be present for all social links.
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number, such as 'mobile', 'landline', or 'fax', represented as a string. This optional field helps categorize the phone number, providing context for its intended use within the CRM system.
 */
export const ListCompaniesResponseDataPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number, such as 'mobile', 'landline', or 'fax', represented as a string. This optional field helps categorize the phone number, providing context for its intended use within the CRM system.
 */
export type ListCompaniesResponseDataPhoneNumbersType = ClosedEnum<
  typeof ListCompaniesResponseDataPhoneNumbersType
>;

export type ListCompaniesResponsePhoneNumbers = {
  /**
   * A unique identifier for each phone number entry within the company's phone numbers array. This ID is used to differentiate between multiple phone numbers and is not intended for display. It is optional and may not be present for all phone numbers.
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, represented as a string starting with a '+' followed by the international dialing code (e.g., '+1' for the United States). This field helps identify the country of origin for the phone number, which is useful for international communications and integrations.
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, provided as a string of digits (e.g., '323'). This code specifies the geographic region within a country, aiding in localizing the phone number's origin within the CRM data.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number, excluding country and area codes, formatted as a string of digits. This is a required field and represents the core part of the phone number used for direct dialing within the specified area and country codes.
   */
  number: string;
  /**
   * The extension of the phone number, if applicable, provided as a string. This optional field allows for direct dialing to specific departments or individuals within a larger organization, enhancing the specificity of contact information.
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number, such as 'mobile', 'landline', or 'fax', represented as a string. This optional field helps categorize the phone number, providing context for its intended use within the CRM system.
   */
  type?: ListCompaniesResponseDataPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This string helps categorize the email addresses, providing context on how each email is used within the company.
 */
export const ListCompaniesResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This string helps categorize the email addresses, providing context on how each email is used within the company.
 */
export type ListCompaniesResponseDataEmailsType = ClosedEnum<
  typeof ListCompaniesResponseDataEmailsType
>;

export type ListCompaniesResponseEmails = {
  /**
   * A unique identifier for each email address entry within the company's email list. This string serves as a primary key to distinguish between different email records in the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The actual email address associated with the company, formatted as a standard email string (e.g., example@domain.com). This field is mandatory for each email entry, ensuring that every email object contains a valid email address.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work', 'personal', or 'other'. This string helps categorize the email addresses, providing context on how each email is used within the company.
   */
  type?: ListCompaniesResponseDataEmailsType | null | undefined;
};

/**
 * An object that defines the type of data row returned in the response. This object may include metadata or additional attributes that describe the nature of the data, aiding in the interpretation of the company's information within the CRM.
 */
export type ListCompaniesResponseCompanyRowType = {
  /**
   * A unique identifier for the row type associated with the company data. This string value helps differentiate between various types of company records within the CRM system. It is optional and may not be present for all company entries.
   */
  id?: string | null | undefined;
  /**
   * The name of the row type that categorizes the company data. This string provides a human-readable label for the type of company record, aiding in classification and filtering within the CRM. It is optional and may not be included for every company.
   */
  name?: string | null | undefined;
};

export type ListCompaniesResponseValue6 = {};

export type ListCompaniesResponseValue4 = {};

/**
 * The value assigned to a custom field for a company, represented as a string. This allows for storing specific data that is unique to the company's needs and not covered by standard fields. It is optional and may be empty if no value is set.
 */
export type ListCompaniesResponseValue =
  | ListCompaniesResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListCompaniesResponseValue6>;

export type ListCompaniesResponseCustomFields = {
  /**
   * A unique identifier for each custom field associated with the company. This string is required for identifying and managing custom attributes within the CRM, ensuring each field can be distinctly referenced.
   */
  id: string | null;
  /**
   * The name of the custom field, providing a descriptive label for the additional attribute stored in the CRM. This string helps users understand the purpose of the custom field and is optional, depending on the field's configuration.
   */
  name?: string | null | undefined;
  /**
   * This property contains additional information about a custom field associated with a company. It is a string that provides context or details that are not covered by standard fields, allowing for more tailored data representation. This field is optional and may be empty if no extra description is provided.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to a custom field for a company, represented as a string. This allows for storing specific data that is unique to the company's needs and not covered by standard fields. It is optional and may be empty if no value is set.
   */
  value?:
    | ListCompaniesResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListCompaniesResponseValue6>
    | null
    | undefined;
};

/**
 * An object containing any custom mappings configured for the company resource. These mappings allow for additional, user-defined fields or data structures that extend the standard company data model, providing flexibility for specific business needs.
 */
export type CustomMappings = {};

export type ListCompaniesResponseExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where the value should be applied. This path is essential for accurately targeting and modifying specific elements within complex JSON objects.
   */
  path: string;
  /**
   * This property contains the value to be set at a specified path within the data structure. It can be of any data type, such as a string, number, or object, depending on the context of its use. This flexibility allows developers to dynamically update or access nested data elements within the CRM system.
   */
  value?: any | undefined;
};

export type ListCompaniesResponsePassThrough = {
  /**
   * A unique identifier representing the specific service to which this pass-through operation should be applied. This string is crucial for routing the request to the correct service within the CRM system, ensuring that the data is processed appropriately.
   */
  serviceId: string;
  /**
   * An optional string identifier for a specific workflow operation that this pass-through should target. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise operation targeting within complex workflows.
   */
  operationId?: string | undefined;
  /**
   * An object that can contain any set of properties, allowing for direct extension and customization of the pass-through operation. This flexibility supports various use cases where additional data needs to be included in the request.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. Each object within the array defines a path and the corresponding data to be applied, facilitating precise updates to nested data structures.
   */
  extendPaths?: Array<ListCompaniesResponseExtendPaths> | undefined;
};

export type Data = {
  /**
   * A unique identifier assigned to each company within the CRM. This string is used to distinguish each company record and is essential for operations that require referencing a specific company.
   */
  id?: string | undefined;
  /**
   * The official name of the company as recorded in the CRM. This string is always provided for each company and serves as a key identifier in listings and reports.
   */
  name: string | null;
  /**
   * The total number of interactions recorded with the company. This integer value provides insight into the level of engagement or activity associated with the company within the CRM.
   */
  interactionCount?: number | null | undefined;
  /**
   * The identifier of the user or entity that owns or manages the company record in the CRM. This string helps in assigning responsibility and tracking ownership of the company data.
   */
  ownerId?: string | null | undefined;
  /**
   * The URL of the company's logo or representative image. This string should be a valid URL format, allowing applications to display the company's image directly from the CRM. It is optional and may not be present for all companies.
   */
  image?: string | null | undefined;
  /**
   * A brief overview or summary of the company's business activities and offerings. This text provides context about the company's operations and is useful for understanding its role within the CRM. It is optional and may vary in length and detail.
   */
  description?: string | null | undefined;
  /**
   * The company's Value Added Tax (VAT) identification number, formatted as a string. This number is used for tax purposes and is essential for financial transactions and compliance. It is optional and may not be available for all companies.
   */
  vatNumber?: string | null | undefined;
  /**
   * The currency code associated with the company's financial transactions, following the ISO 4217 standard. This string indicates the currency used for billing and accounting purposes, helping to standardize financial data across the CRM. It is optional and may not be specified for all companies.
   */
  currency?: ListCompaniesResponseCurrency | null | undefined;
  /**
   * The current operational status of the company within the CRM, represented as a string. This status helps users understand whether the company is active, inactive, or in another state, aiding in filtering and categorizing company data. It is optional and may vary depending on the company's lifecycle stage.
   */
  status?: string | null | undefined;
  /**
   * The company's fax number, formatted as a string. This property may be empty if the company does not have a fax number on record. It is useful for applications that need to send documents via fax or verify contact information.
   */
  fax?: string | null | undefined;
  /**
   * The annual revenue of the company, represented as a string. This value provides insight into the company's financial size and performance, which can be crucial for market analysis and business strategy development.
   */
  annualRevenue?: string | null | undefined;
  /**
   * The total number of employees working at the company, expressed as a string. This information helps in understanding the company's scale and operational capacity, which can be important for partnership or investment considerations.
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * The industry sector in which the company operates, provided as a string. This categorization helps in identifying the company's market segment and can be used for filtering or grouping companies in reports and analyses.
   */
  industry?: string | null | undefined;
  /**
   * The type of ownership of the company, such as private, public, or government-owned, represented as a string. This information is useful for understanding the company's governance structure and potential regulatory requirements.
   */
  ownership?: string | null | undefined;
  /**
   * The sales tax number uniquely identifies a company for tax purposes within the CRM system. It is typically a string of alphanumeric characters and may vary in format depending on the country or region. This property is optional and may not be present for all companies.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * The payee number is a unique identifier for a payee, used primarily for tax-related transactions. It is a string value that helps in distinguishing different payees within the CRM. This field is optional and may not be available for every company record.
   */
  payeeNumber?: string | null | undefined;
  /**
   * This field contains either the Australian Business Number (ABN) or the Tax File Number (TFN), essential for businesses and individuals operating in Australia. It is a string that follows specific national formats, aiding in tax identification and compliance. This property is optional and may not be included for all companies.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * The ABN Branch number, also known as a GST Branch number, is used when a segment of a business needs to report GST separately from its main entity. It is a string that follows a specific format, relevant for businesses with multiple branches. This field is optional and may not be present for all companies.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) is a nine-digit identifier for companies registered in Australia, formatted as three groups of three digits (e.g., XXX XXX XXX). It serves as a unique identifier for legal and official purposes within the CRM. This property is optional and may not be available for all companies.
   */
  acn?: string | null | undefined;
  /**
   * The first name of the person associated with the company record. This field is optional and may be empty if not applicable. It is typically used for contacts or representatives of the company.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person associated with the company record. Like the first name, this field is optional and may be empty if not applicable. It is used to identify contacts or representatives within the company.
   */
  lastName?: string | null | undefined;
  /**
   * A unique identifier representing the parent company of the current company record. This field is optional and may be empty if the company does not have a parent entity. It is used to establish hierarchical relationships between companies in the CRM.
   */
  parentId?: string | null | undefined;
  /**
   * An array containing details of the bank accounts associated with the company. Each entry in the array represents a separate bank account, providing a structured way to access financial information related to the company.
   */
  bankAccounts?: Array<ListCompaniesResponseBankAccounts> | undefined;
  /**
   * An array containing details of the company's websites. Each entry in the array represents a distinct website associated with the company, providing a comprehensive view of the company's online presence. This property is optional and may be empty if no websites are associated with the company.
   */
  websites?: Array<ListCompaniesResponseWebsites> | undefined;
  /**
   * An array of address objects associated with the company. Each object within the array contains detailed information about a specific location related to the company, such as headquarters or branch offices. This property is optional and may be empty if no addresses are recorded.
   */
  addresses?: Array<ListCompaniesResponseAddresses> | undefined;
  /**
   * An array of social media links associated with the company. Each entry in the array represents a different social media platform, providing URLs to the company's profiles. This allows users to quickly access the company's social media presence from the CRM.
   */
  socialLinks?: Array<ListCompaniesResponseSocialLinks> | undefined;
  /**
   * An array containing the phone numbers associated with the company. Each entry in the array represents a distinct phone number, which may include various types such as office, mobile, or fax numbers. This array is optional and may be empty if no phone numbers are available for the company.
   */
  phoneNumbers?: Array<ListCompaniesResponsePhoneNumbers> | undefined;
  /**
   * An array containing email objects associated with the company. Each object within the array represents a distinct email address entry, providing detailed information about the company's email contacts. This array can be empty if no email addresses are associated with the company.
   */
  emails?: Array<ListCompaniesResponseEmails> | undefined;
  /**
   * An object that defines the type of data row returned in the response. This object may include metadata or additional attributes that describe the nature of the data, aiding in the interpretation of the company's information within the CRM.
   */
  rowType?: ListCompaniesResponseCompanyRowType | undefined;
  /**
   * An array containing custom fields associated with the company. Each entry in this array represents a specific custom attribute that has been defined to store additional information about the company. This allows for flexible data storage beyond standard fields.
   */
  customFields?: Array<ListCompaniesResponseCustomFields> | undefined;
  /**
   * An array containing tags associated with the company, which are used for categorization or filtering purposes. Each tag helps in identifying or grouping companies based on specific criteria or characteristics. This field is optional and can be empty if no tags are assigned.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Indicates whether the company's data is read-only, meaning it cannot be modified through the API. A value of 'true' signifies that the company is locked for editing, while 'false' allows for potential updates. This is useful for understanding data access permissions.
   */
  readOnly?: boolean | null | undefined;
  /**
   * The timestamp of the most recent activity associated with the company, formatted as an ISO 8601 string. This helps in tracking the last interaction or update made to the company's record within the CRM. Useful for determining engagement recency and activity trends.
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * Indicates whether the company record is marked as deleted within the CRM system. A value of 'true' means the company is considered deleted and may not be active in current operations. This helps in filtering out inactive or obsolete company records from the dataset.
   */
  deleted?: boolean | undefined;
  /**
   * A formal salutation or title associated with a contact person at the company, such as 'Mr.', 'Mrs.', or 'Dr.'. This is used for personalization in communications and is optional depending on the company's contact data.
   */
  salutation?: string | null | undefined;
  /**
   * The birth date of a contact person at the company, formatted as a string in YYYY-MM-DD format. This information can be used for personalizing interactions or for demographic analysis, if applicable.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * An object containing any custom mappings configured for the company resource. These mappings allow for additional, user-defined fields or data structures that extend the standard company data model, providing flexibility for specific business needs.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * The unique identifier of the user who last updated the company record. This is typically a user ID string, which helps track changes and maintain an audit trail within the CRM system. Useful for understanding who made the most recent modifications to the company data.
   */
  updatedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who initially created the company record. This string value is crucial for auditing purposes, allowing developers to trace back to the origin of the data entry within the CRM.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the company record was last updated. This string is formatted in ISO 8601, providing precise date and time information, which is essential for synchronization and data consistency checks.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp representing when the company record was originally created. Provided in ISO 8601 format, this string helps in tracking the age of the record and is vital for historical data analysis.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array that holds service-specific custom data or structured modifications. This property allows developers to include additional, non-standard information in requests, facilitating advanced integrations and custom workflows.
   */
  passThrough?: Array<ListCompaniesResponsePassThrough> | undefined;
};

/**
 * This object contains cursors used for paginating through the list of companies. It includes pointers to navigate to the previous or next set of results, facilitating seamless data retrieval across multiple API requests.
 */
export type Cursors = {
  /**
   * This string represents the cursor needed to access the previous page of results in a paginated response. It is used in subsequent API calls to retrieve earlier data entries, ensuring continuity in data navigation.
   */
  previous?: string | null | undefined;
  /**
   * This property contains the cursor string used to identify the current page of results in the API response. It is a navigational tool that helps in paginating through the list of companies, allowing developers to retrieve the current set of data efficiently. The format is a string that uniquely represents the current position in the dataset.
   */
  current?: string | null | undefined;
  /**
   * This property holds the cursor string for the next page of results, enabling seamless pagination through the API. It allows developers to fetch the subsequent set of company data by using this cursor in their next API call. The value is a string that acts as a pointer to the next page in the dataset.
   */
  next?: string | null | undefined;
};

/**
 * This object holds metadata about the API response, providing additional context and information about the data returned. It typically includes details like pagination cursors and item counts, which are essential for navigating through large datasets efficiently.
 */
export type Meta = {
  /**
   * This integer indicates the number of company records included in the current page of the response. It helps developers understand the volume of data retrieved in a single API call, especially when dealing with paginated results.
   */
  itemsOnPage?: number | undefined;
  /**
   * This object contains cursors used for paginating through the list of companies. It includes pointers to navigate to the previous or next set of results, facilitating seamless data retrieval across multiple API requests.
   */
  cursors?: Cursors | undefined;
};

/**
 * This object contains navigational links that facilitate moving between pages of results in the API response. It includes links to the current and previous pages, providing a structured way to access different parts of the dataset. The object format ensures easy integration with hypermedia-driven applications.
 */
export type Links = {
  /**
   * This property provides the URL link to navigate to the previous page of results in the API response. It is used in pagination to access earlier data sets, ensuring developers can traverse backward through the list of companies. The format is a string URL pointing to the previous page.
   */
  previous?: string | null | undefined;
  /**
   * This property contains the URL link to the current page of results, allowing developers to refresh or re-access the current dataset in the API response. It is part of the pagination links and is formatted as a string URL that points to the current page.
   */
  current?: string | undefined;
  /**
   * This property contains the URL link to navigate to the next page of results in the API response. It is formatted as a string URL and is used in conjunction with pagination to access subsequent pages of company data. If there are no additional pages, this property may be null or omitted.
   */
  next?: string | null | undefined;
};

/**
 * Companies
 */
export type ListCompaniesResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value helps determine if the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is crucial for error handling and debugging purposes.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for an error. This string provides a human-readable explanation of the status code, aiding in quick understanding of the response outcome.
   */
  status: string;
  /**
   * The unique Apideck identifier for the service provider from which the data is being fetched. This string helps in identifying the source of the data within the unified API ecosystem, ensuring clarity in multi-service environments.
   */
  service: string;
  /**
   * The name of the unified API resource being accessed, such as 'companies'. This string indicates the specific type of data returned by the API, helping developers understand the context of the response data.
   */
  resource: string;
  /**
   * The specific operation performed by the API, in this case, 'companiesAll'. This string helps in identifying the action taken by the API, which is crucial for logging and tracking API usage.
   */
  operation: string;
  /**
   * An array containing the list of companies retrieved from the CRM system. Each element in the array represents a company object with detailed information such as ID, name, interaction count, and owner ID. This array is the primary container for the company data returned by the API.
   */
  data: Array<Data>;
  /**
   * This object holds metadata about the API response, providing additional context and information about the data returned. It typically includes details like pagination cursors and item counts, which are essential for navigating through large datasets efficiently.
   */
  meta?: Meta | undefined;
  /**
   * This object contains navigational links that facilitate moving between pages of results in the API response. It includes links to the current and previous pages, providing a structured way to access different parts of the dataset. The object format ensures easy integration with hypermedia-driven applications.
   */
  links?: Links | undefined;
};

/** @internal */
export const ListCompaniesResponseCurrency$inboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseCurrency
> = z.nativeEnum(ListCompaniesResponseCurrency);

/** @internal */
export const ListCompaniesResponseCurrency$outboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseCurrency
> = ListCompaniesResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseCurrency$ {
  /** @deprecated use `ListCompaniesResponseCurrency$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseCurrency$inboundSchema;
  /** @deprecated use `ListCompaniesResponseCurrency$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseCurrency$outboundSchema;
}

/** @internal */
export const ListCompaniesResponseAccountType$inboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseAccountType
> = z.nativeEnum(ListCompaniesResponseAccountType);

/** @internal */
export const ListCompaniesResponseAccountType$outboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseAccountType
> = ListCompaniesResponseAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseAccountType$ {
  /** @deprecated use `ListCompaniesResponseAccountType$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseAccountType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseAccountType$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseAccountType$outboundSchema;
}

/** @internal */
export const ListCompaniesResponseDataCurrency$inboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseDataCurrency
> = z.nativeEnum(ListCompaniesResponseDataCurrency);

/** @internal */
export const ListCompaniesResponseDataCurrency$outboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseDataCurrency
> = ListCompaniesResponseDataCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseDataCurrency$ {
  /** @deprecated use `ListCompaniesResponseDataCurrency$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseDataCurrency$inboundSchema;
  /** @deprecated use `ListCompaniesResponseDataCurrency$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseDataCurrency$outboundSchema;
}

/** @internal */
export const ListCompaniesResponseBankAccounts$inboundSchema: z.ZodType<
  ListCompaniesResponseBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(ListCompaniesResponseAccountType$inboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(ListCompaniesResponseDataCurrency$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type ListCompaniesResponseBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseBankAccounts$outboundSchema: z.ZodType<
  ListCompaniesResponseBankAccounts$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(ListCompaniesResponseAccountType$outboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(ListCompaniesResponseDataCurrency$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseBankAccounts$ {
  /** @deprecated use `ListCompaniesResponseBankAccounts$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseBankAccounts$inboundSchema;
  /** @deprecated use `ListCompaniesResponseBankAccounts$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseBankAccounts$outboundSchema;
  /** @deprecated use `ListCompaniesResponseBankAccounts$Outbound` instead. */
  export type Outbound = ListCompaniesResponseBankAccounts$Outbound;
}

export function listCompaniesResponseBankAccountsToJSON(
  listCompaniesResponseBankAccounts: ListCompaniesResponseBankAccounts,
): string {
  return JSON.stringify(
    ListCompaniesResponseBankAccounts$outboundSchema.parse(
      listCompaniesResponseBankAccounts,
    ),
  );
}

export function listCompaniesResponseBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseBankAccounts' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseType
> = z.nativeEnum(ListCompaniesResponseType);

/** @internal */
export const ListCompaniesResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseType
> = ListCompaniesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseType$ {
  /** @deprecated use `ListCompaniesResponseType$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseType$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseType$outboundSchema;
}

/** @internal */
export const ListCompaniesResponseWebsites$inboundSchema: z.ZodType<
  ListCompaniesResponseWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ListCompaniesResponseType$inboundSchema).optional(),
});

/** @internal */
export type ListCompaniesResponseWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseWebsites$outboundSchema: z.ZodType<
  ListCompaniesResponseWebsites$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ListCompaniesResponseType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseWebsites$ {
  /** @deprecated use `ListCompaniesResponseWebsites$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseWebsites$inboundSchema;
  /** @deprecated use `ListCompaniesResponseWebsites$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseWebsites$outboundSchema;
  /** @deprecated use `ListCompaniesResponseWebsites$Outbound` instead. */
  export type Outbound = ListCompaniesResponseWebsites$Outbound;
}

export function listCompaniesResponseWebsitesToJSON(
  listCompaniesResponseWebsites: ListCompaniesResponseWebsites,
): string {
  return JSON.stringify(
    ListCompaniesResponseWebsites$outboundSchema.parse(
      listCompaniesResponseWebsites,
    ),
  );
}

export function listCompaniesResponseWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseWebsites' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseDataType
> = z.nativeEnum(ListCompaniesResponseDataType);

/** @internal */
export const ListCompaniesResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseDataType
> = ListCompaniesResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseDataType$ {
  /** @deprecated use `ListCompaniesResponseDataType$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseDataType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseDataType$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseDataType$outboundSchema;
}

/** @internal */
export const ListCompaniesResponseAddresses$inboundSchema: z.ZodType<
  ListCompaniesResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListCompaniesResponseDataType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ListCompaniesResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseAddresses$outboundSchema: z.ZodType<
  ListCompaniesResponseAddresses$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListCompaniesResponseDataType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseAddresses$ {
  /** @deprecated use `ListCompaniesResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseAddresses$inboundSchema;
  /** @deprecated use `ListCompaniesResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseAddresses$outboundSchema;
  /** @deprecated use `ListCompaniesResponseAddresses$Outbound` instead. */
  export type Outbound = ListCompaniesResponseAddresses$Outbound;
}

export function listCompaniesResponseAddressesToJSON(
  listCompaniesResponseAddresses: ListCompaniesResponseAddresses,
): string {
  return JSON.stringify(
    ListCompaniesResponseAddresses$outboundSchema.parse(
      listCompaniesResponseAddresses,
    ),
  );
}

export function listCompaniesResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseAddresses' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseSocialLinks$inboundSchema: z.ZodType<
  ListCompaniesResponseSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListCompaniesResponseSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseSocialLinks$outboundSchema: z.ZodType<
  ListCompaniesResponseSocialLinks$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseSocialLinks$ {
  /** @deprecated use `ListCompaniesResponseSocialLinks$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseSocialLinks$inboundSchema;
  /** @deprecated use `ListCompaniesResponseSocialLinks$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseSocialLinks$outboundSchema;
  /** @deprecated use `ListCompaniesResponseSocialLinks$Outbound` instead. */
  export type Outbound = ListCompaniesResponseSocialLinks$Outbound;
}

export function listCompaniesResponseSocialLinksToJSON(
  listCompaniesResponseSocialLinks: ListCompaniesResponseSocialLinks,
): string {
  return JSON.stringify(
    ListCompaniesResponseSocialLinks$outboundSchema.parse(
      listCompaniesResponseSocialLinks,
    ),
  );
}

export function listCompaniesResponseSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseSocialLinks' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseDataPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof ListCompaniesResponseDataPhoneNumbersType> = z
    .nativeEnum(ListCompaniesResponseDataPhoneNumbersType);

/** @internal */
export const ListCompaniesResponseDataPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof ListCompaniesResponseDataPhoneNumbersType> =
    ListCompaniesResponseDataPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseDataPhoneNumbersType$ {
  /** @deprecated use `ListCompaniesResponseDataPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    ListCompaniesResponseDataPhoneNumbersType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseDataPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseDataPhoneNumbersType$outboundSchema;
}

/** @internal */
export const ListCompaniesResponsePhoneNumbers$inboundSchema: z.ZodType<
  ListCompaniesResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListCompaniesResponseDataPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ListCompaniesResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponsePhoneNumbers$outboundSchema: z.ZodType<
  ListCompaniesResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListCompaniesResponseDataPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponsePhoneNumbers$ {
  /** @deprecated use `ListCompaniesResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `ListCompaniesResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `ListCompaniesResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = ListCompaniesResponsePhoneNumbers$Outbound;
}

export function listCompaniesResponsePhoneNumbersToJSON(
  listCompaniesResponsePhoneNumbers: ListCompaniesResponsePhoneNumbers,
): string {
  return JSON.stringify(
    ListCompaniesResponsePhoneNumbers$outboundSchema.parse(
      listCompaniesResponsePhoneNumbers,
    ),
  );
}

export function listCompaniesResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseDataEmailsType
> = z.nativeEnum(ListCompaniesResponseDataEmailsType);

/** @internal */
export const ListCompaniesResponseDataEmailsType$outboundSchema:
  z.ZodNativeEnum<typeof ListCompaniesResponseDataEmailsType> =
    ListCompaniesResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseDataEmailsType$ {
  /** @deprecated use `ListCompaniesResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema =
    ListCompaniesResponseDataEmailsType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const ListCompaniesResponseEmails$inboundSchema: z.ZodType<
  ListCompaniesResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListCompaniesResponseDataEmailsType$inboundSchema)
    .optional(),
});

/** @internal */
export type ListCompaniesResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseEmails$outboundSchema: z.ZodType<
  ListCompaniesResponseEmails$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListCompaniesResponseDataEmailsType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseEmails$ {
  /** @deprecated use `ListCompaniesResponseEmails$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseEmails$inboundSchema;
  /** @deprecated use `ListCompaniesResponseEmails$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseEmails$outboundSchema;
  /** @deprecated use `ListCompaniesResponseEmails$Outbound` instead. */
  export type Outbound = ListCompaniesResponseEmails$Outbound;
}

export function listCompaniesResponseEmailsToJSON(
  listCompaniesResponseEmails: ListCompaniesResponseEmails,
): string {
  return JSON.stringify(
    ListCompaniesResponseEmails$outboundSchema.parse(
      listCompaniesResponseEmails,
    ),
  );
}

export function listCompaniesResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseEmails' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseCompanyRowType$inboundSchema: z.ZodType<
  ListCompaniesResponseCompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListCompaniesResponseCompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseCompanyRowType$outboundSchema: z.ZodType<
  ListCompaniesResponseCompanyRowType$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseCompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseCompanyRowType$ {
  /** @deprecated use `ListCompaniesResponseCompanyRowType$inboundSchema` instead. */
  export const inboundSchema =
    ListCompaniesResponseCompanyRowType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseCompanyRowType$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseCompanyRowType$outboundSchema;
  /** @deprecated use `ListCompaniesResponseCompanyRowType$Outbound` instead. */
  export type Outbound = ListCompaniesResponseCompanyRowType$Outbound;
}

export function listCompaniesResponseCompanyRowTypeToJSON(
  listCompaniesResponseCompanyRowType: ListCompaniesResponseCompanyRowType,
): string {
  return JSON.stringify(
    ListCompaniesResponseCompanyRowType$outboundSchema.parse(
      listCompaniesResponseCompanyRowType,
    ),
  );
}

export function listCompaniesResponseCompanyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseCompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListCompaniesResponseCompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseCompanyRowType' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseValue6$inboundSchema: z.ZodType<
  ListCompaniesResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListCompaniesResponseValue6$Outbound = {};

/** @internal */
export const ListCompaniesResponseValue6$outboundSchema: z.ZodType<
  ListCompaniesResponseValue6$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseValue6$ {
  /** @deprecated use `ListCompaniesResponseValue6$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseValue6$inboundSchema;
  /** @deprecated use `ListCompaniesResponseValue6$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseValue6$outboundSchema;
  /** @deprecated use `ListCompaniesResponseValue6$Outbound` instead. */
  export type Outbound = ListCompaniesResponseValue6$Outbound;
}

export function listCompaniesResponseValue6ToJSON(
  listCompaniesResponseValue6: ListCompaniesResponseValue6,
): string {
  return JSON.stringify(
    ListCompaniesResponseValue6$outboundSchema.parse(
      listCompaniesResponseValue6,
    ),
  );
}

export function listCompaniesResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseValue6' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseValue4$inboundSchema: z.ZodType<
  ListCompaniesResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListCompaniesResponseValue4$Outbound = {};

/** @internal */
export const ListCompaniesResponseValue4$outboundSchema: z.ZodType<
  ListCompaniesResponseValue4$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseValue4$ {
  /** @deprecated use `ListCompaniesResponseValue4$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseValue4$inboundSchema;
  /** @deprecated use `ListCompaniesResponseValue4$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseValue4$outboundSchema;
  /** @deprecated use `ListCompaniesResponseValue4$Outbound` instead. */
  export type Outbound = ListCompaniesResponseValue4$Outbound;
}

export function listCompaniesResponseValue4ToJSON(
  listCompaniesResponseValue4: ListCompaniesResponseValue4,
): string {
  return JSON.stringify(
    ListCompaniesResponseValue4$outboundSchema.parse(
      listCompaniesResponseValue4,
    ),
  );
}

export function listCompaniesResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseValue4' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseValue$inboundSchema: z.ZodType<
  ListCompaniesResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListCompaniesResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListCompaniesResponseValue6$inboundSchema)),
]);

/** @internal */
export type ListCompaniesResponseValue$Outbound =
  | ListCompaniesResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListCompaniesResponseValue6$Outbound>;

/** @internal */
export const ListCompaniesResponseValue$outboundSchema: z.ZodType<
  ListCompaniesResponseValue$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseValue
> = z.union([
  z.lazy(() => ListCompaniesResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListCompaniesResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseValue$ {
  /** @deprecated use `ListCompaniesResponseValue$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseValue$inboundSchema;
  /** @deprecated use `ListCompaniesResponseValue$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseValue$outboundSchema;
  /** @deprecated use `ListCompaniesResponseValue$Outbound` instead. */
  export type Outbound = ListCompaniesResponseValue$Outbound;
}

export function listCompaniesResponseValueToJSON(
  listCompaniesResponseValue: ListCompaniesResponseValue,
): string {
  return JSON.stringify(
    ListCompaniesResponseValue$outboundSchema.parse(listCompaniesResponseValue),
  );
}

export function listCompaniesResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseValue' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseCustomFields$inboundSchema: z.ZodType<
  ListCompaniesResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListCompaniesResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListCompaniesResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ListCompaniesResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ListCompaniesResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListCompaniesResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ListCompaniesResponseCustomFields$outboundSchema: z.ZodType<
  ListCompaniesResponseCustomFields$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListCompaniesResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListCompaniesResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseCustomFields$ {
  /** @deprecated use `ListCompaniesResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseCustomFields$inboundSchema;
  /** @deprecated use `ListCompaniesResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseCustomFields$outboundSchema;
  /** @deprecated use `ListCompaniesResponseCustomFields$Outbound` instead. */
  export type Outbound = ListCompaniesResponseCustomFields$Outbound;
}

export function listCompaniesResponseCustomFieldsToJSON(
  listCompaniesResponseCustomFields: ListCompaniesResponseCustomFields,
): string {
  return JSON.stringify(
    ListCompaniesResponseCustomFields$outboundSchema.parse(
      listCompaniesResponseCustomFields,
    ),
  );
}

export function listCompaniesResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const CustomMappings$inboundSchema: z.ZodType<
  CustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomMappings$Outbound = {};

/** @internal */
export const CustomMappings$outboundSchema: z.ZodType<
  CustomMappings$Outbound,
  z.ZodTypeDef,
  CustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomMappings$ {
  /** @deprecated use `CustomMappings$inboundSchema` instead. */
  export const inboundSchema = CustomMappings$inboundSchema;
  /** @deprecated use `CustomMappings$outboundSchema` instead. */
  export const outboundSchema = CustomMappings$outboundSchema;
  /** @deprecated use `CustomMappings$Outbound` instead. */
  export type Outbound = CustomMappings$Outbound;
}

export function customMappingsToJSON(customMappings: CustomMappings): string {
  return JSON.stringify(CustomMappings$outboundSchema.parse(customMappings));
}

export function customMappingsFromJSON(
  jsonString: string,
): SafeParseResult<CustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomMappings' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseExtendPaths$inboundSchema: z.ZodType<
  ListCompaniesResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListCompaniesResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListCompaniesResponseExtendPaths$outboundSchema: z.ZodType<
  ListCompaniesResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseExtendPaths$ {
  /** @deprecated use `ListCompaniesResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListCompaniesResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListCompaniesResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListCompaniesResponseExtendPaths$Outbound;
}

export function listCompaniesResponseExtendPathsToJSON(
  listCompaniesResponseExtendPaths: ListCompaniesResponseExtendPaths,
): string {
  return JSON.stringify(
    ListCompaniesResponseExtendPaths$outboundSchema.parse(
      listCompaniesResponseExtendPaths,
    ),
  );
}

export function listCompaniesResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponsePassThrough$inboundSchema: z.ZodType<
  ListCompaniesResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListCompaniesResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListCompaniesResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListCompaniesResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListCompaniesResponsePassThrough$outboundSchema: z.ZodType<
  ListCompaniesResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListCompaniesResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponsePassThrough$ {
  /** @deprecated use `ListCompaniesResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponsePassThrough$inboundSchema;
  /** @deprecated use `ListCompaniesResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponsePassThrough$outboundSchema;
  /** @deprecated use `ListCompaniesResponsePassThrough$Outbound` instead. */
  export type Outbound = ListCompaniesResponsePassThrough$Outbound;
}

export function listCompaniesResponsePassThroughToJSON(
  listCompaniesResponsePassThrough: ListCompaniesResponsePassThrough,
): string {
  return JSON.stringify(
    ListCompaniesResponsePassThrough$outboundSchema.parse(
      listCompaniesResponsePassThrough,
    ),
  );
}

export function listCompaniesResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.nullable(z.string()),
    interaction_count: z.nullable(z.number().int()).optional(),
    owner_id: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    vat_number: z.nullable(z.string()).optional(),
    currency: z.nullable(ListCompaniesResponseCurrency$inboundSchema)
      .optional(),
    status: z.nullable(z.string()).optional(),
    fax: z.nullable(z.string()).optional(),
    annual_revenue: z.nullable(z.string()).optional(),
    number_of_employees: z.nullable(z.string()).optional(),
    industry: z.nullable(z.string()).optional(),
    ownership: z.nullable(z.string()).optional(),
    sales_tax_number: z.nullable(z.string()).optional(),
    payee_number: z.nullable(z.string()).optional(),
    abn_or_tfn: z.nullable(z.string()).optional(),
    abn_branch: z.nullable(z.string()).optional(),
    acn: z.nullable(z.string()).optional(),
    first_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    parent_id: z.nullable(z.string()).optional(),
    bank_accounts: z.array(
      z.lazy(() => ListCompaniesResponseBankAccounts$inboundSchema),
    ).optional(),
    websites: z.array(z.lazy(() => ListCompaniesResponseWebsites$inboundSchema))
      .optional(),
    addresses: z.array(
      z.lazy(() => ListCompaniesResponseAddresses$inboundSchema),
    ).optional(),
    social_links: z.array(
      z.lazy(() => ListCompaniesResponseSocialLinks$inboundSchema),
    ).optional(),
    phone_numbers: z.array(
      z.lazy(() => ListCompaniesResponsePhoneNumbers$inboundSchema),
    ).optional(),
    emails: z.array(z.lazy(() => ListCompaniesResponseEmails$inboundSchema))
      .optional(),
    row_type: z.lazy(() => ListCompaniesResponseCompanyRowType$inboundSchema)
      .optional(),
    custom_fields: z.array(
      z.lazy(() => ListCompaniesResponseCustomFields$inboundSchema),
    ).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    read_only: z.nullable(z.boolean()).optional(),
    last_activity_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    deleted: z.boolean().optional(),
    salutation: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    custom_mappings: z.nullable(z.lazy(() => CustomMappings$inboundSchema))
      .optional(),
    updated_by: z.nullable(z.string()).optional(),
    created_by: z.nullable(z.string()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    pass_through: z.array(
      z.lazy(() => ListCompaniesResponsePassThrough$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "interaction_count": "interactionCount",
      "owner_id": "ownerId",
      "vat_number": "vatNumber",
      "annual_revenue": "annualRevenue",
      "number_of_employees": "numberOfEmployees",
      "sales_tax_number": "salesTaxNumber",
      "payee_number": "payeeNumber",
      "abn_or_tfn": "abnOrTfn",
      "abn_branch": "abnBranch",
      "first_name": "firstName",
      "last_name": "lastName",
      "parent_id": "parentId",
      "bank_accounts": "bankAccounts",
      "social_links": "socialLinks",
      "phone_numbers": "phoneNumbers",
      "row_type": "rowType",
      "custom_fields": "customFields",
      "read_only": "readOnly",
      "last_activity_at": "lastActivityAt",
      "custom_mappings": "customMappings",
      "updated_by": "updatedBy",
      "created_by": "createdBy",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type Data$Outbound = {
  id?: string | undefined;
  name: string | null;
  interaction_count?: number | null | undefined;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  parent_id?: string | null | undefined;
  bank_accounts?: Array<ListCompaniesResponseBankAccounts$Outbound> | undefined;
  websites?: Array<ListCompaniesResponseWebsites$Outbound> | undefined;
  addresses?: Array<ListCompaniesResponseAddresses$Outbound> | undefined;
  social_links?: Array<ListCompaniesResponseSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<ListCompaniesResponsePhoneNumbers$Outbound> | undefined;
  emails?: Array<ListCompaniesResponseEmails$Outbound> | undefined;
  row_type?: ListCompaniesResponseCompanyRowType$Outbound | undefined;
  custom_fields?: Array<ListCompaniesResponseCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ListCompaniesResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string().optional(),
    name: z.nullable(z.string()),
    interactionCount: z.nullable(z.number().int()).optional(),
    ownerId: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    vatNumber: z.nullable(z.string()).optional(),
    currency: z.nullable(ListCompaniesResponseCurrency$outboundSchema)
      .optional(),
    status: z.nullable(z.string()).optional(),
    fax: z.nullable(z.string()).optional(),
    annualRevenue: z.nullable(z.string()).optional(),
    numberOfEmployees: z.nullable(z.string()).optional(),
    industry: z.nullable(z.string()).optional(),
    ownership: z.nullable(z.string()).optional(),
    salesTaxNumber: z.nullable(z.string()).optional(),
    payeeNumber: z.nullable(z.string()).optional(),
    abnOrTfn: z.nullable(z.string()).optional(),
    abnBranch: z.nullable(z.string()).optional(),
    acn: z.nullable(z.string()).optional(),
    firstName: z.nullable(z.string()).optional(),
    lastName: z.nullable(z.string()).optional(),
    parentId: z.nullable(z.string()).optional(),
    bankAccounts: z.array(
      z.lazy(() => ListCompaniesResponseBankAccounts$outboundSchema),
    ).optional(),
    websites: z.array(
      z.lazy(() => ListCompaniesResponseWebsites$outboundSchema),
    ).optional(),
    addresses: z.array(
      z.lazy(() => ListCompaniesResponseAddresses$outboundSchema),
    ).optional(),
    socialLinks: z.array(
      z.lazy(() => ListCompaniesResponseSocialLinks$outboundSchema),
    ).optional(),
    phoneNumbers: z.array(
      z.lazy(() => ListCompaniesResponsePhoneNumbers$outboundSchema),
    ).optional(),
    emails: z.array(z.lazy(() => ListCompaniesResponseEmails$outboundSchema))
      .optional(),
    rowType: z.lazy(() => ListCompaniesResponseCompanyRowType$outboundSchema)
      .optional(),
    customFields: z.array(
      z.lazy(() => ListCompaniesResponseCustomFields$outboundSchema),
    ).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    readOnly: z.nullable(z.boolean()).optional(),
    lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
      .optional(),
    deleted: z.boolean().optional(),
    salutation: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    customMappings: z.nullable(z.lazy(() => CustomMappings$outboundSchema))
      .optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    passThrough: z.array(
      z.lazy(() => ListCompaniesResponsePassThrough$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      interactionCount: "interaction_count",
      ownerId: "owner_id",
      vatNumber: "vat_number",
      annualRevenue: "annual_revenue",
      numberOfEmployees: "number_of_employees",
      salesTaxNumber: "sales_tax_number",
      payeeNumber: "payee_number",
      abnOrTfn: "abn_or_tfn",
      abnBranch: "abn_branch",
      firstName: "first_name",
      lastName: "last_name",
      parentId: "parent_id",
      bankAccounts: "bank_accounts",
      socialLinks: "social_links",
      phoneNumbers: "phone_numbers",
      rowType: "row_type",
      customFields: "custom_fields",
      readOnly: "read_only",
      lastActivityAt: "last_activity_at",
      customMappings: "custom_mappings",
      updatedBy: "updated_by",
      createdBy: "created_by",
      updatedAt: "updated_at",
      createdAt: "created_at",
      passThrough: "pass_through",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const Cursors$inboundSchema: z.ZodType<Cursors, z.ZodTypeDef, unknown> =
  z.object({
    previous: z.nullable(z.string()).optional(),
    current: z.nullable(z.string()).optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Cursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Cursors$outboundSchema: z.ZodType<
  Cursors$Outbound,
  z.ZodTypeDef,
  Cursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cursors$ {
  /** @deprecated use `Cursors$inboundSchema` instead. */
  export const inboundSchema = Cursors$inboundSchema;
  /** @deprecated use `Cursors$outboundSchema` instead. */
  export const outboundSchema = Cursors$outboundSchema;
  /** @deprecated use `Cursors$Outbound` instead. */
  export type Outbound = Cursors$Outbound;
}

export function cursorsToJSON(cursors: Cursors): string {
  return JSON.stringify(Cursors$outboundSchema.parse(cursors));
}

export function cursorsFromJSON(
  jsonString: string,
): SafeParseResult<Cursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cursors' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    items_on_page: z.number().int().optional(),
    cursors: z.lazy(() => Cursors$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "items_on_page": "itemsOnPage",
    });
  });

/** @internal */
export type Meta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: Cursors$Outbound | undefined;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    itemsOnPage: z.number().int().optional(),
    cursors: z.lazy(() => Cursors$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      itemsOnPage: "items_on_page",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({
    previous: z.nullable(z.string()).optional(),
    current: z.string().optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Links$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

export function linksToJSON(links: Links): string {
  return JSON.stringify(Links$outboundSchema.parse(links));
}

export function linksFromJSON(
  jsonString: string,
): SafeParseResult<Links, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Links$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Links' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponse$inboundSchema: z.ZodType<
  ListCompaniesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => Data$inboundSchema)),
  meta: z.lazy(() => Meta$inboundSchema).optional(),
  links: z.lazy(() => Links$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListCompaniesResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<Data$Outbound>;
  meta?: Meta$Outbound | undefined;
  links?: Links$Outbound | undefined;
};

/** @internal */
export const ListCompaniesResponse$outboundSchema: z.ZodType<
  ListCompaniesResponse$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => Data$outboundSchema)),
  meta: z.lazy(() => Meta$outboundSchema).optional(),
  links: z.lazy(() => Links$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponse$ {
  /** @deprecated use `ListCompaniesResponse$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponse$inboundSchema;
  /** @deprecated use `ListCompaniesResponse$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponse$outboundSchema;
  /** @deprecated use `ListCompaniesResponse$Outbound` instead. */
  export type Outbound = ListCompaniesResponse$Outbound;
}

export function listCompaniesResponseToJSON(
  listCompaniesResponse: ListCompaniesResponse,
): string {
  return JSON.stringify(
    ListCompaniesResponse$outboundSchema.parse(listCompaniesResponse),
  );
}

export function listCompaniesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponse' from JSON`,
  );
}
