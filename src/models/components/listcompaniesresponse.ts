/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * Specifies the type of bank account associated with the company, such as 'savings', 'checking', or 'business'. This string value helps categorize the account, influencing factors like transaction limits and applicable interest rates. Understanding the account type is crucial for financial operations and reporting within the CRM system.
 */
export const ListCompaniesResponseAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * Specifies the type of bank account associated with the company, such as 'savings', 'checking', or 'business'. This string value helps categorize the account, influencing factors like transaction limits and applicable interest rates. Understanding the account type is crucial for financial operations and reporting within the CRM system.
 */
export type ListCompaniesResponseAccountType = ClosedEnum<
  typeof ListCompaniesResponseAccountType
>;

export type ListCompaniesResponseBankAccounts = {
  /**
   * This property contains the name of the bank where the company's account is held. It is a string value that forms part of the bank account details array, helping to identify the financial institution associated with the company's banking activities. This field is optional and may not be present if the bank name is not recorded in the CRM system.
   */
  bankName?: string | null | undefined;
  /**
   * This property contains the bank account number linked to a specific bank account within the CRM system. It is a string of digits that uniquely identifies the account for financial transactions and management purposes. In the context of the 'companiesAll' operation, it provides essential financial details for each company retrieved, aiding in comprehensive company data analysis.
   */
  accountNumber?: string | null | undefined;
  /**
   * The account_name property contains the name associated with a bank account, typically reflecting the account holder's or business's registered name. This string value is crucial for identifying and verifying the bank account within the CRM system's company data. It helps ensure that financial transactions and records are accurately matched to the correct entity.
   */
  accountName?: string | null | undefined;
  /**
   * Specifies the type of bank account associated with the company, such as 'savings', 'checking', or 'business'. This string value helps categorize the account, influencing factors like transaction limits and applicable interest rates. Understanding the account type is crucial for financial operations and reporting within the CRM system.
   */
  accountType?: ListCompaniesResponseAccountType | null | undefined;
  /**
   * This property contains the International Bank Account Number (IBAN) associated with a company's bank account. The IBAN is a string formatted according to international standards, typically including a country code, bank code, and account number. In the context of the 'companiesAll' operation, it provides essential banking details for companies listed in the CRM, facilitating international financial transactions.
   */
  iban?: string | null | undefined;
  /**
   * This property contains the Bank Identifier Code (BIC), also known as the SWIFT code, which is a unique string identifier for a bank used in international transactions. The BIC is crucial for routing transactions to the correct bank and branch, ensuring accurate and secure cross-border fund transfers. In the context of the 'companiesAll' operation, this field provides essential banking details for companies listed in the CRM, aiding in financial operations and integrations.
   */
  bic?: string | null | undefined;
  /**
   * This property contains the routing number, a nine-digit code essential for identifying a specific financial institution within the United States. It is used primarily for processing domestic transfers and transactions, ensuring that funds are directed to the correct bank. In the context of the 'companiesAll' operation, this information is relevant for applications that handle U.S.-based financial operations, providing necessary details for financial transactions associated with the companies listed in the CRM.
   */
  routingNumber?: string | null | undefined;
  /**
   * This property contains the BSB (Bank State Branch) number, a six-digit code used to identify a specific branch of a bank or financial institution in Australia or New Zealand. The BSB number is essential for routing financial transactions accurately to the correct branch, ensuring efficient processing of payments and other banking operations. In the context of the 'companiesAll' operation, this field provides detailed banking information for companies listed in the CRM, aiding in financial transactions and record-keeping.
   */
  bsbNumber?: string | null | undefined;
  /**
   * This property contains the unique code identifying a specific branch of a bank or financial institution associated with the company. The branch identifier is crucial for ensuring that financial transactions are directed to the correct branch, facilitating accurate processing and record-keeping. In the context of the 'companiesAll' operation, this information helps developers understand the financial affiliations of the companies retrieved from the CRM system.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * A unique code assigned to banks or financial institutions within a country, used to identify them in financial transactions. This string ensures that funds are accurately routed to the correct institution, playing a vital role in both domestic and international banking operations. In the context of the 'companiesAll' operation, it provides essential banking details for each company listed in the CRM.
   */
  bankCode?: string | null | undefined;
  currency?: Currency | null | undefined;
};

/**
 * This property specifies the category of the company's website, such as 'corporate', 'e-commerce', or 'blog'. It helps in identifying the website's role or function within the company's digital presence. The value is expected to be a string that categorizes the website, aiding developers in understanding the company's online strategy as part of the CRM data.
 */
export const ListCompaniesResponseDataWebsitesType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * This property specifies the category of the company's website, such as 'corporate', 'e-commerce', or 'blog'. It helps in identifying the website's role or function within the company's digital presence. The value is expected to be a string that categorizes the website, aiding developers in understanding the company's online strategy as part of the CRM data.
 */
export type ListCompaniesResponseDataWebsitesType = ClosedEnum<
  typeof ListCompaniesResponseDataWebsitesType
>;

export type ListCompaniesResponseWebsites = {
  /**
   * This property contains a unique identifier for each website entry associated with a company in the CRM system. The ID is a string that serves to uniquely distinguish each website within the company's list of websites, allowing developers to reference or manipulate specific website entries efficiently. This identifier is crucial for operations that involve accessing or updating website details for a company.
   */
  id?: string | null | undefined;
  /**
   * This property contains the URL of the company's official website. It is a required field and should be a valid web address (e.g., 'https://www.example.com') that directs users to the company's online presence. In the context of the 'companiesAll' operation, this URL is crucial for accessing detailed information about the company directly from the web, facilitating seamless integration and data retrieval for applications displaying company data.
   */
  url: string;
  /**
   * This property specifies the category of the company's website, such as 'corporate', 'e-commerce', or 'blog'. It helps in identifying the website's role or function within the company's digital presence. The value is expected to be a string that categorizes the website, aiding developers in understanding the company's online strategy as part of the CRM data.
   */
  type?: ListCompaniesResponseDataWebsitesType | null | undefined;
};

/**
 * This property specifies the category or purpose of the address associated with a company, such as 'billing', 'shipping', or 'office'. It helps in identifying the role of the address within the company's operations, ensuring that the correct address is used for the appropriate context. The value is expected to be a string that clearly defines the address type, aiding in the organization and retrieval of company address information.
 */
export const ListCompaniesResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * This property specifies the category or purpose of the address associated with a company, such as 'billing', 'shipping', or 'office'. It helps in identifying the role of the address within the company's operations, ensuring that the correct address is used for the appropriate context. The value is expected to be a string that clearly defines the address type, aiding in the organization and retrieval of company address information.
 */
export type ListCompaniesResponseType = ClosedEnum<
  typeof ListCompaniesResponseType
>;

export type ListCompaniesResponseAddresses = {
  /**
   * This property contains a unique identifier for each address linked to a company within the CRM system. The ID is a string format and is essential for distinguishing between multiple addresses associated with a single company. It plays a critical role in operations that involve retrieving or updating specific address details, ensuring precise data management and access.
   */
  id?: string | null | undefined;
  /**
   * This property specifies the category or purpose of the address associated with a company, such as 'billing', 'shipping', or 'office'. It helps in identifying the role of the address within the company's operations, ensuring that the correct address is used for the appropriate context. The value is expected to be a string that clearly defines the address type, aiding in the organization and retrieval of company address information.
   */
  type?: ListCompaniesResponseType | null | undefined;
  /**
   * This property contains the full address of a company as a single string. It may include various components such as street, city, state, and postal code, all concatenated into one line. This format is particularly useful when a structured breakdown of address components is unavailable, offering a comprehensive view of the company's location in the CRM system.
   */
  string?: string | null | undefined;
  /**
   * The name or label assigned to a specific address associated with the company. This string value helps identify the address's role or purpose within the company's operations, such as 'Headquarters' or 'Warehouse'. It is useful for distinguishing between multiple addresses in the company's records.
   */
  name?: string | null | undefined;
  /**
   * This property contains the first line of a company's address, typically including the street number, street name, and any apartment or suite numbers. It is formatted as a string and is essential for identifying the company's physical location for mailing and logistical purposes. In the context of the 'companiesAll' operation, this field helps users retrieve detailed address information for each company listed in the CRM system.
   */
  line1?: string | null | undefined;
  /**
   * Contains the second line of the company's address, typically used for additional details like apartment or suite numbers. This optional field enhances the address structure for precise mailing and location purposes.
   */
  line2?: string | null | undefined;
  /**
   * Holds the third line of the company's address, used for further details such as building names or other identifiers. This optional field allows for a more comprehensive address format when necessary.
   */
  line3?: string | null | undefined;
  /**
   * Represents the fourth line of the company's address, accommodating any extra information not covered in previous lines. This optional field ensures flexibility in capturing complex address details.
   */
  line4?: string | null | undefined;
  /**
   * Specifies the street number of the company's address, indicating its precise location on the street. The format is a string to support various alphanumeric combinations, crucial for accurate address identification.
   */
  streetNumber?: string | null | undefined;
  /**
   * Contains the name of the city where the company is located, essential for identifying the company's geographical location. This information is vital for regional categorization and logistical purposes.
   */
  city?: string | null | undefined;
  /**
   * This property contains the name of the state or region where the company is located, as part of its address details. The value is a string representing the state's name, which helps identify the geographical area for the company's business operations. This information is crucial for applications that need to display or process location-based company data.
   */
  state?: string | null | undefined;
  /**
   * The postal_code field contains the zip code or equivalent postal code associated with the company's address. This string value is essential for identifying the company's location and ensuring accurate mail delivery. In the context of the 'companiesAll' operation, it helps in retrieving detailed address information for each company listed in the CRM system.
   */
  postalCode?: string | null | undefined;
  /**
   * This property contains the ISO 3166-1 alpha-2 code representing the country where the company is located. It is a two-letter string code that helps in identifying the country for international operations and data processing. This field is part of the company's address details in the CRM system, aiding in geographical categorization and reporting.
   */
  country?: string | null | undefined;
  /**
   * The 'latitude' field contains the geographical latitude coordinate of the company's address, represented as a numeric string. This value is crucial for mapping the company's exact location on a global scale, aiding in spatial analysis and mapping tasks. It is part of the geolocation data returned in the response, providing essential information for applications that require precise location details.
   */
  latitude?: string | null | undefined;
  /**
   * This property contains the geographical longitude coordinate of the company's address, represented as a numeric string. It is used in conjunction with the latitude to accurately locate the company on a map, which is essential for geolocation services and mapping applications. This field is part of the company's address details returned in the response, providing crucial location information for applications that require spatial data.
   */
  longitude?: string | null | undefined;
  /**
   * The 'county' field contains the name of the administrative division or sublocality within the address, such as a county or district. This string value helps categorize and geographically locate the company within the CRM system, aiding in regional analysis and reporting.
   */
  county?: string | null | undefined;
  /**
   * The 'contact_name' field holds the full name of the primary contact person associated with the address. This string is crucial for identifying the main point of contact at the company location, facilitating direct communication and correspondence.
   */
  contactName?: string | null | undefined;
  /**
   * The 'salutation' field specifies the formal greeting or title used for the contact person at the address, such as Mr., Ms., or Dr. This string value helps maintain a professional tone in communications and should reflect the contact's preferred salutation.
   */
  salutation?: string | null | undefined;
  /**
   * The 'phone_number' field provides the primary telephone number associated with the address. This string should follow international or local dialing conventions and is essential for direct communication with the company or contact person.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The 'fax' field contains the fax number associated with the address, used for sending documents via fax. Although less common today, this string value remains important for certain communications and should be formatted according to standard fax number conventions.
   */
  fax?: string | null | undefined;
  /**
   * This property contains the email address linked to a specific address entry of the company. It is formatted as a standard email address and is used for electronic communications related to that address. This field is optional and may be null if no email address is provided for the address entry.
   */
  email?: string | null | undefined;
  /**
   * This property contains the website URL associated with the company's address entry. It should be in a valid URL format, serving as a digital point of contact or information source for the company. This field is optional and may be null if the website information is not provided in the company's CRM record.
   */
  website?: string | null | undefined;
  /**
   * This property contains additional notes or comments related to the company's address entry. It is a string field that can include any supplementary information relevant to the address, such as delivery instructions or historical context. This field is optional and may be null if no additional information is provided, allowing developers to include extra details as needed for clarity or record-keeping.
   */
  notes?: string | null | undefined;
  /**
   * A version identifier for the address entry, represented as a binary string. This property is used to track changes and ensure data consistency by preventing update conflicts. It automatically updates with each modification to the address, facilitating synchronization in distributed systems.
   */
  rowVersion?: string | null | undefined;
};

export type ListCompaniesResponseSocialLinks = {
  /**
   * A unique identifier for each social link associated with a company. This ID is used to manage and reference specific social links within the company's profile, facilitating easy updates and retrievals.
   */
  id?: string | null | undefined;
  /**
   * The URL of the company's social media link, such as 'https://www.twitter.com/apideck'. This required field provides direct access to the company's social media presence, enabling seamless integration and interaction.
   */
  url: string;
  /**
   * Indicates the type of social media platform the link belongs to, such as 'twitter'. This categorization helps in organizing and filtering social links based on platform type, enhancing data management.
   */
  type?: string | null | undefined;
};

/**
 * This property specifies the category of the phone number associated with a company, such as 'mobile', 'landline', or 'fax'. It is a string value that helps in identifying the nature of the phone number, facilitating appropriate communication and routing within the CRM system. Understanding the type of phone number is crucial for applications that need to handle different communication channels effectively.
 */
export const ListCompaniesResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * This property specifies the category of the phone number associated with a company, such as 'mobile', 'landline', or 'fax'. It is a string value that helps in identifying the nature of the phone number, facilitating appropriate communication and routing within the CRM system. Understanding the type of phone number is crucial for applications that need to handle different communication channels effectively.
 */
export type ListCompaniesResponseDataType = ClosedEnum<
  typeof ListCompaniesResponseDataType
>;

export type ListCompaniesResponsePhoneNumbers = {
  /**
   * A unique identifier for each phone number linked to the company. This ID aids in managing and referencing specific phone numbers within the company's contact information, ensuring precise communication management.
   */
  id?: string | null | undefined;
  /**
   * This property contains the country code of the phone number, formatted as a string prefixed with a plus sign (e.g., '+1'). It is used to identify the international dialing code associated with the phone number, which is essential for making international calls. In the context of the 'companiesAll' operation, this field helps ensure that phone numbers are correctly formatted for global communication.
   */
  countryCode?: string | null | undefined;
  /**
   * This property contains the area code of a phone number, which is typically a 3-digit string. It identifies a specific geographic region within a country, such as '323', and is crucial for routing calls to the correct local area. In the context of the 'companiesAll' operation, this field helps in understanding the regional distribution of company contact numbers retrieved from the CRM system.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number associated with the company, provided as a string. This number is crucial for direct communication and does not include country or area codes, ensuring it is the primary contact point for reaching the company directly. It is a required field in the response, reflecting its importance in company records.
   */
  number: string;
  /**
   * This property contains the extension number associated with a company's phone line. It is a string value that directs calls to specific departments or individuals within the organization, enhancing communication efficiency. This field is optional and particularly useful for large companies with multiple internal divisions.
   */
  extension?: string | null | undefined;
  /**
   * This property specifies the category of the phone number associated with a company, such as 'mobile', 'landline', or 'fax'. It is a string value that helps in identifying the nature of the phone number, facilitating appropriate communication and routing within the CRM system. Understanding the type of phone number is crucial for applications that need to handle different communication channels effectively.
   */
  type?: ListCompaniesResponseDataType | null | undefined;
};

/**
 * This optional field specifies the category of the email address, such as 'work', 'personal', or 'other'. It helps organize and provide context to the email address within the company's contact information.
 */
export const ListCompaniesResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * This optional field specifies the category of the email address, such as 'work', 'personal', or 'other'. It helps organize and provide context to the email address within the company's contact information.
 */
export type ListCompaniesResponseDataEmailsType = ClosedEnum<
  typeof ListCompaniesResponseDataEmailsType
>;

export type ListCompaniesResponseEmails = {
  /**
   * This string serves as a unique identifier for each email address associated with the company. It acts as a distinct key to differentiate between multiple email entries within the company's email array, ensuring each email can be individually referenced.
   */
  id?: string | null | undefined;
  /**
   * This field contains the actual email address linked to the company, formatted as a standard email address. It is required and is used for communication or identification purposes within the company's contact information.
   */
  email: string | null;
  /**
   * This optional field specifies the category of the email address, such as 'work', 'personal', or 'other'. It helps organize and provide context to the email address within the company's contact information.
   */
  type?: ListCompaniesResponseDataEmailsType | null | undefined;
};

/**
 * This object represents the type of data row returned in the response, potentially containing additional metadata or attributes. It aids in interpreting and processing the company's data by defining the nature of the row.
 */
export type ListCompaniesResponseCompanyRowType = {
  /**
   * This property contains a unique identifier for the type of row that represents a company in the CRM system. It is a string value used to differentiate various types of company records, facilitating internal categorization and processing within the CRM.
   */
  id?: string | null | undefined;
  /**
   * This property holds the name of the row type, categorizing the company within the CRM. It provides a human-readable label that helps in understanding and managing different categories of company records.
   */
  name?: string | null | undefined;
};

export type ListCompaniesResponseValue6 = {};

export type ListCompaniesResponseValue4 = {};

/**
 * This property holds the specific value assigned to a custom field for a company within the CRM system. The format of this value can vary, including text, numbers, or dates, depending on the type of data the custom field is designed to capture. It allows for the storage of unique information that is not covered by the standard fields, providing flexibility in data management.
 */
export type ListCompaniesResponseValue =
  | ListCompaniesResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListCompaniesResponseValue6>;

export type ListCompaniesResponseCustomFields = {
  /**
   * This property is a unique identifier for each custom field linked to the company. It is crucial for referencing and managing specific custom fields within the company's data structure, ensuring precise data handling.
   */
  id: string | null;
  /**
   * The name assigned to a custom field, providing a descriptive label that indicates the type of additional information stored in this field. This helps users understand the purpose and content of the custom field, enhancing data clarity.
   */
  name?: string | null | undefined;
  /**
   * This field contains additional information about the custom field associated with a company. It provides context or details that help in understanding the purpose or usage of the custom field within the CRM system. This information is optional and may not be present for all custom fields.
   */
  description?: string | null | undefined;
  /**
   * This property holds the specific value assigned to a custom field for a company within the CRM system. The format of this value can vary, including text, numbers, or dates, depending on the type of data the custom field is designed to capture. It allows for the storage of unique information that is not covered by the standard fields, providing flexibility in data management.
   */
  value?:
    | ListCompaniesResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListCompaniesResponseValue6>
    | null
    | undefined;
};

/**
 * This property contains any additional mappings configured for the company resource. It holds custom fields or relationships that extend the standard schema, enabling tailored data integration and retrieval based on specific business needs. This flexibility allows developers to adapt the CRM data structure to unique requirements.
 */
export type ListCompaniesResponseCustomMappings = {};

export type ListCompaniesResponseExtendPaths = {
  /**
   * This property contains a JSONPath string that specifies the exact location within the data structure where a value should be applied. It is formatted as a string following JSONPath syntax, ensuring precise targeting of data modifications. In the context of the 'companiesAll' operation, this field is crucial for accurately applying changes to specific parts of the company data returned by the CRM system.
   */
  path: string;
  /**
   * This property contains the value to be set at a specified path within the CRM data structure. It can be of any data type, providing flexibility for storing or updating various kinds of information. This is crucial for dynamically adjusting company data based on specific application needs, ensuring that the CRM reflects the most current and relevant data.
   */
  value?: any | undefined;
};

export type ListCompaniesResponsePassThrough = {
  /**
   * This property holds the unique identifier for the service that the pass-through operation is intended to target. It is a mandatory field, ensuring that data processing or retrieval is directed to the correct service within the CRM system. The value is expected to be a string, typically formatted as a UUID or another unique string identifier.
   */
  serviceId: string;
  /**
   * This optional property identifies a specific workflow operation that the pass-through should address. It is particularly useful in scenarios involving multiple downstream requests, allowing for precise targeting of operations. The value is a string, aiding in the management of complex workflows within the CRM.
   */
  operationId?: string | undefined;
  /**
   * This property is an object that allows for the inclusion of additional properties necessary for the pass-through operation. It provides flexibility to incorporate custom data structures required for specific service integrations or data manipulations. The format is a JSON object, capable of holding various key-value pairs.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array containing objects that specify paths for data modification within the CRM system. Each object in the array includes a path and a corresponding value, allowing for precise updates to company data. This structure supports targeted data transformations, making it easier to apply specific changes to the company's information in the response.
   */
  extendPaths?: Array<ListCompaniesResponseExtendPaths> | undefined;
};

export type Data = {
  /**
   * A unique identifier assigned to each company within the CRM system. This ID is used to distinguish and reference individual company records, facilitating operations such as updates or deletions. It is essential for identifying specific companies in subsequent API requests.
   */
  id?: string | undefined;
  /**
   * The 'data.name' property contains the official name of the company as recorded in the CRM system. It is a string value that serves as a primary identifier for the company, essential for display in user interfaces and reports. This field is required, ensuring that every company entry is uniquely recognizable and can be efficiently accessed or referenced in applications.
   */
  name: string | null;
  /**
   * This property represents the total number of interactions recorded with the company, such as emails, calls, or meetings. It is an integer value that provides insight into the level of engagement and activity with the company, which is useful for analytics and performance tracking. In the context of the 'companiesAll' operation, it helps developers understand the extent of communication and interaction history associated with each company in the CRM system.
   */
  interactionCount?: number | null | undefined;
  /**
   * This property contains the unique identifier of the user or entity responsible for managing the company record within the CRM system. It is a string value that helps in assigning accountability and tracking interactions related to the company. In the context of the 'companiesAll' operation, this ID is crucial for understanding who oversees the company's data and activities, aiding in efficient data management and retrieval.
   */
  ownerId?: string | null | undefined;
  /**
   * This property contains the URL of the company's image, typically used to display the company's logo or a representative image. The URL points to an image file, such as a JPEG or PNG, that can be used in applications to visually represent the company. It is optional and may not be present for all companies, providing a visual context when available.
   */
  image?: string | null | undefined;
  /**
   * This property contains a textual description of the company, offering an overview of its business activities, mission, or other relevant information. The description is presented as a string and can vary in length and detail, providing context to help users understand the company's core focus areas. It is an optional field in the response, allowing developers to include it based on their specific needs when retrieving company data from the CRM system.
   */
  description?: string | null | undefined;
  /**
   * The VAT (Value Added Tax) number assigned to the company, primarily used for tax identification within the European Union. This alphanumeric identifier is essential for conducting financial transactions and ensuring compliance with EU tax regulations. It is an optional field and may not be present for companies operating outside the EU.
   */
  vatNumber?: string | null | undefined;
  currency?: Currency | null | undefined;
  /**
   * The current operational status of the company in the CRM system. This field indicates whether the company is active, inactive, or in another state, affecting how the company is managed and displayed in the system. It is optional and can influence business processes and reporting.
   */
  status?: string | null | undefined;
  /**
   * The fax number of the company, provided as a string. This field contains the company's fax contact information, which can be used for sending documents via fax. It is an optional field and may not be present for all companies, depending on whether they have a fax number listed in the CRM system.
   */
  fax?: string | null | undefined;
  /**
   * The annual revenue of the company, represented as a string. This field indicates the total income generated by the company over the past year, providing insight into the company's financial size and market presence. It is optional and may not be available for all companies.
   */
  annualRevenue?: string | null | undefined;
  /**
   * This property contains the number of employees working at the company, represented as a string. It provides an estimate of the company's workforce size, which can help gauge the scale of its operations. As this field is optional, it may not be available for every company in the response.
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * The industry in which the company operates, represented as a string. This field categorizes the type of business activities the company is involved in, helping to identify its market sector. It is optional and may vary in specificity.
   */
  industry?: string | null | undefined;
  /**
   * Specifies the type of ownership of the company, such as private or public, providing insight into its governance structure. This string field is optional and may not be present for all companies, reflecting the company's ownership status as recorded in the CRM system.
   */
  ownership?: string | null | undefined;
  /**
   * This property contains the sales tax number, an alphanumeric string that uniquely identifies a company for tax purposes within the CRM system. It is crucial for tax reporting and compliance, ensuring the company is recognized by tax authorities. This field is optional and may not be present for all companies.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * This property holds the payee number, a unique string identifier for a payee used primarily in tax-related transactions. It helps distinguish payees within the CRM, facilitating accurate financial reporting and processing. This field is optional and may not be available for every company entry.
   */
  payeeNumber?: string | null | undefined;
  /**
   * This field contains either the Australian Business Number (ABN) or the Tax File Number (TFN), both essential for business operations and tax purposes in Australia. The ABN is used for business identification, while the TFN is necessary for individual tax reporting. The format is a string, and it is optional, depending on the company's registration status.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * This property represents the ABN Branch number, used when a segment of the business needs to account for GST separately from the main entity. It is a string that helps organize financial records for different business branches, ensuring compliance with tax regulations. This field is optional and applicable only if the business has such a structure.
   */
  abnBranch?: string | null | undefined;
  /**
   * This field contains the Australian Company Number (ACN), a nine-digit identifier for companies registered in Australia, formatted as XXX XXX XXX. It is crucial for legal and official documentation, ensuring the company is recognized by regulatory bodies. This field is optional and specific to Australian companies.
   */
  acn?: string | null | undefined;
  /**
   * This property contains the first name of a person associated with a company record in the CRM system. It is a string value that can be used to identify or personalize communications with key contacts within the company. Although optional, it complements the 'last_name' field to form a complete name, aiding in the retrieval and display of contact information.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the individual associated with the company record in the CRM system. This field is optional and complements the 'first_name' to provide a full name for individuals linked to the company, aiding in identification and communication. The value is stored as a string and is useful for applications that need to display or process personal information related to company contacts.
   */
  lastName?: string | null | undefined;
  /**
   * This property contains a unique string identifier for the parent company, if one exists. It is used to establish and represent hierarchical relationships within the CRM, allowing developers to organize and manage subsidiary companies under a parent entity. This field is optional and may be absent if the company does not have a parent company associated with it.
   */
  parentId?: string | null | undefined;
  /**
   * This property contains an array of objects, each representing a bank account associated with the company. The array provides detailed financial information necessary for transactions or audits, such as account numbers, bank names, and account types. This field is optional and may be empty if the company has no linked bank accounts, reflecting the company's financial setup within the CRM system.
   */
  bankAccounts?: Array<ListCompaniesResponseBankAccounts> | undefined;
  /**
   * This property contains an array of objects, each representing a website associated with the company. Each object includes details such as the website's URL and its type (e.g., official site, blog, etc.). This information is crucial for understanding the company's online presence and can be used to display or analyze the company's digital footprint.
   */
  websites?: Array<ListCompaniesResponseWebsites> | undefined;
  /**
   * This property contains an array of address objects associated with the company. Each object within the array provides detailed information about a specific location, such as a physical office or mailing address. This data is crucial for applications that need to display or process company location information as part of the CRM data retrieval operation.
   */
  addresses?: Array<ListCompaniesResponseAddresses> | undefined;
  /**
   * This property contains an array of social media links associated with the company. Each element in the array represents a different social media platform and includes URLs or identifiers for the company's profiles on those platforms. This field is optional and may be empty if the company has not provided any social media links. It helps developers access and display the company's social media presence as part of the CRM data.
   */
  socialLinks?: Array<ListCompaniesResponseSocialLinks> | undefined;
  /**
   * An array of phone numbers associated with the company. Each element in the array represents a distinct contact number, allowing multiple contact points to be stored and accessed within the company's profile.
   */
  phoneNumbers?: Array<ListCompaniesResponsePhoneNumbers> | undefined;
  /**
   * This property contains an array of email objects linked to the company. Each object in the array provides detailed information about a specific email address, including its unique identifier, the email itself, and its type. This array is optional and may be empty if the company has no associated email addresses.
   */
  emails?: Array<ListCompaniesResponseEmails> | undefined;
  /**
   * This object represents the type of data row returned in the response, potentially containing additional metadata or attributes. It aids in interpreting and processing the company's data by defining the nature of the row.
   */
  rowType?: ListCompaniesResponseCompanyRowType | undefined;
  /**
   * An array that contains custom fields associated with the company. These fields allow for storing additional user-defined data alongside standard company information, offering flexibility in data management.
   */
  customFields?: Array<ListCompaniesResponseCustomFields> | undefined;
  /**
   * An array of strings representing tags associated with the company. These tags serve as labels or categories to help organize and filter companies within the CRM system. They provide a flexible way to group companies based on various criteria, enhancing searchability and management.
   */
  tags?: Array<string> | null | undefined;
  /**
   * This property indicates whether the company record is read-only within the CRM system. A value of 'true' means that the company's data cannot be modified through the API, ensuring data integrity for certain records that require protection from changes. This is particularly relevant for GET operations where data retrieval is the focus, and it helps developers understand which records are immutable.
   */
  readOnly?: boolean | null | undefined;
  /**
   * This property contains the date and time of the most recent interaction or update related to the company within the CRM. It is formatted as an ISO 8601 string, ensuring a standardized representation of the timestamp. This information is crucial for tracking engagement and activity levels, helping developers monitor when the last activity occurred.
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * This property indicates whether the company record has been marked as deleted in the CRM system. A value of 'true' means the company is no longer active or visible in standard queries, while 'false' indicates the company is still active. This flag is essential for managing the lifecycle of company records and understanding their current status.
   */
  deleted?: boolean | undefined;
  /**
   * This property provides a formal greeting or title associated with a contact person at the company, such as 'Mr', 'Mrs', or 'Dr'. It is used to personalize communications and ensure proper etiquette in interactions, enhancing the professionalism of correspondence.
   */
  salutation?: string | null | undefined;
  /**
   * This property captures the date of birth of a contact person associated with the company. It is formatted as a string in ISO 8601 format, allowing for consistent representation. This information can be used for personalizing interactions or for compliance purposes.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * This property contains any additional mappings configured for the company resource. It holds custom fields or relationships that extend the standard schema, enabling tailored data integration and retrieval based on specific business needs. This flexibility allows developers to adapt the CRM data structure to unique requirements.
   */
  customMappings?: ListCompaniesResponseCustomMappings | null | undefined;
  /**
   * The 'updated_by' field contains the unique identifier of the user who last modified the company record. This string value helps track changes by identifying the user responsible for the most recent update, providing accountability and traceability within the CRM system.
   */
  updatedBy?: string | null | undefined;
  /**
   * The 'created_by' field holds the unique identifier of the user who initially created the company record. This string value provides insight into the origin of the data, allowing developers to trace back to the user responsible for the initial entry of the company information.
   */
  createdBy?: string | null | undefined;
  /**
   * The 'updated_at' field indicates the date and time when the company record was last modified, formatted as an ISO 8601 string. This timestamp is crucial for understanding the recency of the data, helping developers determine how current the information is within the CRM system.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The 'created_at' field specifies the date and time when the company record was initially created, formatted as an ISO 8601 string. This timestamp helps determine the age of the record, providing context on how long the company information has been stored in the CRM system.
   */
  createdAt?: Date | null | undefined;
  /**
   * The 'pass_through' property is an array that allows for the inclusion of service-specific custom data or structured modifications in the request body. This feature is particularly useful for extending the API's functionality by enabling the transmission of additional information when retrieving company data, thereby enhancing customization and flexibility.
   */
  passThrough?: Array<ListCompaniesResponsePassThrough> | undefined;
};

/**
 * This object contains cursor information used for paginating through the list of companies. It assists in navigating between different pages of results, ensuring efficient data retrieval and management in applications dealing with large datasets.
 */
export type Cursors = {
  /**
   * A string cursor that facilitates navigation to the previous page of company results. This is essential for implementing backward pagination in applications, allowing users to review earlier pages of data efficiently.
   */
  previous?: string | null | undefined;
  /**
   * The 'meta.cursors.current' property contains a string that uniquely identifies the current page of results in the API response. This cursor is essential for navigating through paginated company data, allowing developers to efficiently retrieve the current set of records. The format is a string that serves as a pointer to the current position within the dataset.
   */
  current?: string | null | undefined;
  /**
   * The 'meta.cursors.next' property holds a string that acts as a unique identifier for the next page of results in the API response. This cursor facilitates seamless pagination by enabling developers to fetch the subsequent set of company records. The format is a string that indicates the next position in the dataset sequence.
   */
  next?: string | null | undefined;
};

/**
 * This object holds metadata about the API response, offering additional context and information about the data returned. It helps developers understand the structure of the response and any supplementary parameters included, facilitating better integration and data handling within applications.
 */
export type Meta = {
  /**
   * This integer indicates the number of company records included in the current API response. It is useful for understanding the volume of data retrieved, aiding in pagination and efficient data display within applications.
   */
  itemsOnPage?: number | undefined;
  /**
   * This object contains cursor information used for paginating through the list of companies. It assists in navigating between different pages of results, ensuring efficient data retrieval and management in applications dealing with large datasets.
   */
  cursors?: Cursors | undefined;
};

/**
 * The 'links' object contains navigational URLs that assist in moving between pages of results within the API response. It includes properties for links to the previous and current pages, which are crucial for managing the retrieval of paginated company data. The structure is an object with string URL properties for different page links.
 */
export type Links = {
  /**
   * The 'links.previous' property provides a string URL that directs to the previous page of results in the API response. This URL is part of the pagination mechanism, allowing developers to access earlier sets of company records. It is formatted as a string URL pointing to the previous page.
   */
  previous?: string | null | undefined;
  /**
   * The 'links.current' property offers a string URL that points to the current page of results, helping developers verify their current position within the paginated data. This URL is crucial for maintaining context while navigating through the API's response pages. It is formatted as a string URL that indicates the current page.
   */
  current?: string | undefined;
  /**
   * The 'links.next' property provides the URL for accessing the next page of results in the API response. This string URL is crucial for implementing pagination, allowing developers to seamlessly fetch additional company data when the initial response contains more entries than can be displayed at once. It appears in the response only when there are more pages of data to retrieve, ensuring efficient data navigation.
   */
  next?: string | null | undefined;
};

/**
 * Companies
 */
export type ListCompaniesResponse = {
  /**
   * This property contains the HTTP response status code as an integer, indicating the result of the GET request to the '/crm/companies' endpoint. It helps developers understand whether the request was successful (e.g., 200) or encountered an error (e.g., 404 for not found). The status code is crucial for error handling and debugging API interactions.
   */
  statusCode: number;
  /**
   * This property provides a human-readable string that describes the HTTP response status. It complements the status code by offering a textual explanation, such as 'OK' for a successful request or 'Not Found' for a missing resource, aiding developers in quickly understanding the outcome of their API call.
   */
  status: string;
  /**
   * This property identifies the unique Apideck service provider handling the request as a string. It indicates which third-party service or CRM system is accessed through the unified API, helping developers trace the source of the data and ensuring proper integration with the correct service.
   */
  service: string;
  /**
   * This property specifies the name of the unified API resource being accessed, represented as a string. It indicates that the resource in question is 'companies', aligning with the endpoint '/crm/companies', and helps developers understand the type of data being retrieved from the API.
   */
  resource: string;
  /**
   * This property describes the specific operation performed by the API call as a string. It details the action taken, such as 'fetch' or 'retrieve', and is essential for logging and debugging purposes to track the intended function of the API request.
   */
  operation: string;
  /**
   * This property contains an array of company objects retrieved from the CRM system. Each object within the array represents a company and includes detailed information such as the company's unique identifier (ID), name, and interaction count. This array serves as the main component of the response, enabling developers to access and manipulate the list of companies efficiently.
   */
  data: Array<Data>;
  /**
   * This object holds metadata about the API response, offering additional context and information about the data returned. It helps developers understand the structure of the response and any supplementary parameters included, facilitating better integration and data handling within applications.
   */
  meta?: Meta | undefined;
  /**
   * The 'links' object contains navigational URLs that assist in moving between pages of results within the API response. It includes properties for links to the previous and current pages, which are crucial for managing the retrieval of paginated company data. The structure is an object with string URL properties for different page links.
   */
  links?: Links | undefined;
};

/** @internal */
export const ListCompaniesResponseAccountType$inboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseAccountType
> = z.nativeEnum(ListCompaniesResponseAccountType);

/** @internal */
export const ListCompaniesResponseAccountType$outboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseAccountType
> = ListCompaniesResponseAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseAccountType$ {
  /** @deprecated use `ListCompaniesResponseAccountType$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseAccountType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseAccountType$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseAccountType$outboundSchema;
}

/** @internal */
export const ListCompaniesResponseBankAccounts$inboundSchema: z.ZodType<
  ListCompaniesResponseBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(ListCompaniesResponseAccountType$inboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type ListCompaniesResponseBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseBankAccounts$outboundSchema: z.ZodType<
  ListCompaniesResponseBankAccounts$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(ListCompaniesResponseAccountType$outboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseBankAccounts$ {
  /** @deprecated use `ListCompaniesResponseBankAccounts$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseBankAccounts$inboundSchema;
  /** @deprecated use `ListCompaniesResponseBankAccounts$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseBankAccounts$outboundSchema;
  /** @deprecated use `ListCompaniesResponseBankAccounts$Outbound` instead. */
  export type Outbound = ListCompaniesResponseBankAccounts$Outbound;
}

export function listCompaniesResponseBankAccountsToJSON(
  listCompaniesResponseBankAccounts: ListCompaniesResponseBankAccounts,
): string {
  return JSON.stringify(
    ListCompaniesResponseBankAccounts$outboundSchema.parse(
      listCompaniesResponseBankAccounts,
    ),
  );
}

export function listCompaniesResponseBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseBankAccounts' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseDataWebsitesType$inboundSchema:
  z.ZodNativeEnum<typeof ListCompaniesResponseDataWebsitesType> = z.nativeEnum(
    ListCompaniesResponseDataWebsitesType,
  );

/** @internal */
export const ListCompaniesResponseDataWebsitesType$outboundSchema:
  z.ZodNativeEnum<typeof ListCompaniesResponseDataWebsitesType> =
    ListCompaniesResponseDataWebsitesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseDataWebsitesType$ {
  /** @deprecated use `ListCompaniesResponseDataWebsitesType$inboundSchema` instead. */
  export const inboundSchema =
    ListCompaniesResponseDataWebsitesType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseDataWebsitesType$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseDataWebsitesType$outboundSchema;
}

/** @internal */
export const ListCompaniesResponseWebsites$inboundSchema: z.ZodType<
  ListCompaniesResponseWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ListCompaniesResponseDataWebsitesType$inboundSchema)
    .optional(),
});

/** @internal */
export type ListCompaniesResponseWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseWebsites$outboundSchema: z.ZodType<
  ListCompaniesResponseWebsites$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ListCompaniesResponseDataWebsitesType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseWebsites$ {
  /** @deprecated use `ListCompaniesResponseWebsites$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseWebsites$inboundSchema;
  /** @deprecated use `ListCompaniesResponseWebsites$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseWebsites$outboundSchema;
  /** @deprecated use `ListCompaniesResponseWebsites$Outbound` instead. */
  export type Outbound = ListCompaniesResponseWebsites$Outbound;
}

export function listCompaniesResponseWebsitesToJSON(
  listCompaniesResponseWebsites: ListCompaniesResponseWebsites,
): string {
  return JSON.stringify(
    ListCompaniesResponseWebsites$outboundSchema.parse(
      listCompaniesResponseWebsites,
    ),
  );
}

export function listCompaniesResponseWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseWebsites' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseType
> = z.nativeEnum(ListCompaniesResponseType);

/** @internal */
export const ListCompaniesResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseType
> = ListCompaniesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseType$ {
  /** @deprecated use `ListCompaniesResponseType$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseType$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseType$outboundSchema;
}

/** @internal */
export const ListCompaniesResponseAddresses$inboundSchema: z.ZodType<
  ListCompaniesResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListCompaniesResponseType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ListCompaniesResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseAddresses$outboundSchema: z.ZodType<
  ListCompaniesResponseAddresses$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListCompaniesResponseType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseAddresses$ {
  /** @deprecated use `ListCompaniesResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseAddresses$inboundSchema;
  /** @deprecated use `ListCompaniesResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseAddresses$outboundSchema;
  /** @deprecated use `ListCompaniesResponseAddresses$Outbound` instead. */
  export type Outbound = ListCompaniesResponseAddresses$Outbound;
}

export function listCompaniesResponseAddressesToJSON(
  listCompaniesResponseAddresses: ListCompaniesResponseAddresses,
): string {
  return JSON.stringify(
    ListCompaniesResponseAddresses$outboundSchema.parse(
      listCompaniesResponseAddresses,
    ),
  );
}

export function listCompaniesResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseAddresses' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseSocialLinks$inboundSchema: z.ZodType<
  ListCompaniesResponseSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListCompaniesResponseSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseSocialLinks$outboundSchema: z.ZodType<
  ListCompaniesResponseSocialLinks$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseSocialLinks$ {
  /** @deprecated use `ListCompaniesResponseSocialLinks$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseSocialLinks$inboundSchema;
  /** @deprecated use `ListCompaniesResponseSocialLinks$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseSocialLinks$outboundSchema;
  /** @deprecated use `ListCompaniesResponseSocialLinks$Outbound` instead. */
  export type Outbound = ListCompaniesResponseSocialLinks$Outbound;
}

export function listCompaniesResponseSocialLinksToJSON(
  listCompaniesResponseSocialLinks: ListCompaniesResponseSocialLinks,
): string {
  return JSON.stringify(
    ListCompaniesResponseSocialLinks$outboundSchema.parse(
      listCompaniesResponseSocialLinks,
    ),
  );
}

export function listCompaniesResponseSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseSocialLinks' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseDataType
> = z.nativeEnum(ListCompaniesResponseDataType);

/** @internal */
export const ListCompaniesResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseDataType
> = ListCompaniesResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseDataType$ {
  /** @deprecated use `ListCompaniesResponseDataType$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseDataType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseDataType$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseDataType$outboundSchema;
}

/** @internal */
export const ListCompaniesResponsePhoneNumbers$inboundSchema: z.ZodType<
  ListCompaniesResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListCompaniesResponseDataType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ListCompaniesResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponsePhoneNumbers$outboundSchema: z.ZodType<
  ListCompaniesResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListCompaniesResponseDataType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponsePhoneNumbers$ {
  /** @deprecated use `ListCompaniesResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `ListCompaniesResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `ListCompaniesResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = ListCompaniesResponsePhoneNumbers$Outbound;
}

export function listCompaniesResponsePhoneNumbersToJSON(
  listCompaniesResponsePhoneNumbers: ListCompaniesResponsePhoneNumbers,
): string {
  return JSON.stringify(
    ListCompaniesResponsePhoneNumbers$outboundSchema.parse(
      listCompaniesResponsePhoneNumbers,
    ),
  );
}

export function listCompaniesResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof ListCompaniesResponseDataEmailsType
> = z.nativeEnum(ListCompaniesResponseDataEmailsType);

/** @internal */
export const ListCompaniesResponseDataEmailsType$outboundSchema:
  z.ZodNativeEnum<typeof ListCompaniesResponseDataEmailsType> =
    ListCompaniesResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseDataEmailsType$ {
  /** @deprecated use `ListCompaniesResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema =
    ListCompaniesResponseDataEmailsType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const ListCompaniesResponseEmails$inboundSchema: z.ZodType<
  ListCompaniesResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListCompaniesResponseDataEmailsType$inboundSchema)
    .optional(),
});

/** @internal */
export type ListCompaniesResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseEmails$outboundSchema: z.ZodType<
  ListCompaniesResponseEmails$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListCompaniesResponseDataEmailsType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseEmails$ {
  /** @deprecated use `ListCompaniesResponseEmails$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseEmails$inboundSchema;
  /** @deprecated use `ListCompaniesResponseEmails$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseEmails$outboundSchema;
  /** @deprecated use `ListCompaniesResponseEmails$Outbound` instead. */
  export type Outbound = ListCompaniesResponseEmails$Outbound;
}

export function listCompaniesResponseEmailsToJSON(
  listCompaniesResponseEmails: ListCompaniesResponseEmails,
): string {
  return JSON.stringify(
    ListCompaniesResponseEmails$outboundSchema.parse(
      listCompaniesResponseEmails,
    ),
  );
}

export function listCompaniesResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseEmails' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseCompanyRowType$inboundSchema: z.ZodType<
  ListCompaniesResponseCompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListCompaniesResponseCompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const ListCompaniesResponseCompanyRowType$outboundSchema: z.ZodType<
  ListCompaniesResponseCompanyRowType$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseCompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseCompanyRowType$ {
  /** @deprecated use `ListCompaniesResponseCompanyRowType$inboundSchema` instead. */
  export const inboundSchema =
    ListCompaniesResponseCompanyRowType$inboundSchema;
  /** @deprecated use `ListCompaniesResponseCompanyRowType$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseCompanyRowType$outboundSchema;
  /** @deprecated use `ListCompaniesResponseCompanyRowType$Outbound` instead. */
  export type Outbound = ListCompaniesResponseCompanyRowType$Outbound;
}

export function listCompaniesResponseCompanyRowTypeToJSON(
  listCompaniesResponseCompanyRowType: ListCompaniesResponseCompanyRowType,
): string {
  return JSON.stringify(
    ListCompaniesResponseCompanyRowType$outboundSchema.parse(
      listCompaniesResponseCompanyRowType,
    ),
  );
}

export function listCompaniesResponseCompanyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseCompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListCompaniesResponseCompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseCompanyRowType' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseValue6$inboundSchema: z.ZodType<
  ListCompaniesResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListCompaniesResponseValue6$Outbound = {};

/** @internal */
export const ListCompaniesResponseValue6$outboundSchema: z.ZodType<
  ListCompaniesResponseValue6$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseValue6$ {
  /** @deprecated use `ListCompaniesResponseValue6$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseValue6$inboundSchema;
  /** @deprecated use `ListCompaniesResponseValue6$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseValue6$outboundSchema;
  /** @deprecated use `ListCompaniesResponseValue6$Outbound` instead. */
  export type Outbound = ListCompaniesResponseValue6$Outbound;
}

export function listCompaniesResponseValue6ToJSON(
  listCompaniesResponseValue6: ListCompaniesResponseValue6,
): string {
  return JSON.stringify(
    ListCompaniesResponseValue6$outboundSchema.parse(
      listCompaniesResponseValue6,
    ),
  );
}

export function listCompaniesResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseValue6' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseValue4$inboundSchema: z.ZodType<
  ListCompaniesResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListCompaniesResponseValue4$Outbound = {};

/** @internal */
export const ListCompaniesResponseValue4$outboundSchema: z.ZodType<
  ListCompaniesResponseValue4$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseValue4$ {
  /** @deprecated use `ListCompaniesResponseValue4$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseValue4$inboundSchema;
  /** @deprecated use `ListCompaniesResponseValue4$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseValue4$outboundSchema;
  /** @deprecated use `ListCompaniesResponseValue4$Outbound` instead. */
  export type Outbound = ListCompaniesResponseValue4$Outbound;
}

export function listCompaniesResponseValue4ToJSON(
  listCompaniesResponseValue4: ListCompaniesResponseValue4,
): string {
  return JSON.stringify(
    ListCompaniesResponseValue4$outboundSchema.parse(
      listCompaniesResponseValue4,
    ),
  );
}

export function listCompaniesResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseValue4' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseValue$inboundSchema: z.ZodType<
  ListCompaniesResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListCompaniesResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListCompaniesResponseValue6$inboundSchema)),
]);

/** @internal */
export type ListCompaniesResponseValue$Outbound =
  | ListCompaniesResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListCompaniesResponseValue6$Outbound>;

/** @internal */
export const ListCompaniesResponseValue$outboundSchema: z.ZodType<
  ListCompaniesResponseValue$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseValue
> = z.union([
  z.lazy(() => ListCompaniesResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListCompaniesResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseValue$ {
  /** @deprecated use `ListCompaniesResponseValue$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseValue$inboundSchema;
  /** @deprecated use `ListCompaniesResponseValue$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseValue$outboundSchema;
  /** @deprecated use `ListCompaniesResponseValue$Outbound` instead. */
  export type Outbound = ListCompaniesResponseValue$Outbound;
}

export function listCompaniesResponseValueToJSON(
  listCompaniesResponseValue: ListCompaniesResponseValue,
): string {
  return JSON.stringify(
    ListCompaniesResponseValue$outboundSchema.parse(listCompaniesResponseValue),
  );
}

export function listCompaniesResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseValue' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseCustomFields$inboundSchema: z.ZodType<
  ListCompaniesResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListCompaniesResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListCompaniesResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ListCompaniesResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ListCompaniesResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListCompaniesResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ListCompaniesResponseCustomFields$outboundSchema: z.ZodType<
  ListCompaniesResponseCustomFields$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListCompaniesResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListCompaniesResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseCustomFields$ {
  /** @deprecated use `ListCompaniesResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseCustomFields$inboundSchema;
  /** @deprecated use `ListCompaniesResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseCustomFields$outboundSchema;
  /** @deprecated use `ListCompaniesResponseCustomFields$Outbound` instead. */
  export type Outbound = ListCompaniesResponseCustomFields$Outbound;
}

export function listCompaniesResponseCustomFieldsToJSON(
  listCompaniesResponseCustomFields: ListCompaniesResponseCustomFields,
): string {
  return JSON.stringify(
    ListCompaniesResponseCustomFields$outboundSchema.parse(
      listCompaniesResponseCustomFields,
    ),
  );
}

export function listCompaniesResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseCustomMappings$inboundSchema: z.ZodType<
  ListCompaniesResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListCompaniesResponseCustomMappings$Outbound = {};

/** @internal */
export const ListCompaniesResponseCustomMappings$outboundSchema: z.ZodType<
  ListCompaniesResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseCustomMappings$ {
  /** @deprecated use `ListCompaniesResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema =
    ListCompaniesResponseCustomMappings$inboundSchema;
  /** @deprecated use `ListCompaniesResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    ListCompaniesResponseCustomMappings$outboundSchema;
  /** @deprecated use `ListCompaniesResponseCustomMappings$Outbound` instead. */
  export type Outbound = ListCompaniesResponseCustomMappings$Outbound;
}

export function listCompaniesResponseCustomMappingsToJSON(
  listCompaniesResponseCustomMappings: ListCompaniesResponseCustomMappings,
): string {
  return JSON.stringify(
    ListCompaniesResponseCustomMappings$outboundSchema.parse(
      listCompaniesResponseCustomMappings,
    ),
  );
}

export function listCompaniesResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListCompaniesResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponseExtendPaths$inboundSchema: z.ZodType<
  ListCompaniesResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListCompaniesResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListCompaniesResponseExtendPaths$outboundSchema: z.ZodType<
  ListCompaniesResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponseExtendPaths$ {
  /** @deprecated use `ListCompaniesResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListCompaniesResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListCompaniesResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListCompaniesResponseExtendPaths$Outbound;
}

export function listCompaniesResponseExtendPathsToJSON(
  listCompaniesResponseExtendPaths: ListCompaniesResponseExtendPaths,
): string {
  return JSON.stringify(
    ListCompaniesResponseExtendPaths$outboundSchema.parse(
      listCompaniesResponseExtendPaths,
    ),
  );
}

export function listCompaniesResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponsePassThrough$inboundSchema: z.ZodType<
  ListCompaniesResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListCompaniesResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListCompaniesResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListCompaniesResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListCompaniesResponsePassThrough$outboundSchema: z.ZodType<
  ListCompaniesResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListCompaniesResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponsePassThrough$ {
  /** @deprecated use `ListCompaniesResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponsePassThrough$inboundSchema;
  /** @deprecated use `ListCompaniesResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponsePassThrough$outboundSchema;
  /** @deprecated use `ListCompaniesResponsePassThrough$Outbound` instead. */
  export type Outbound = ListCompaniesResponsePassThrough$Outbound;
}

export function listCompaniesResponsePassThroughToJSON(
  listCompaniesResponsePassThrough: ListCompaniesResponsePassThrough,
): string {
  return JSON.stringify(
    ListCompaniesResponsePassThrough$outboundSchema.parse(
      listCompaniesResponsePassThrough,
    ),
  );
}

export function listCompaniesResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.nullable(z.string()),
    interaction_count: z.nullable(z.number().int()).optional(),
    owner_id: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    vat_number: z.nullable(z.string()).optional(),
    currency: z.nullable(Currency$inboundSchema).optional(),
    status: z.nullable(z.string()).optional(),
    fax: z.nullable(z.string()).optional(),
    annual_revenue: z.nullable(z.string()).optional(),
    number_of_employees: z.nullable(z.string()).optional(),
    industry: z.nullable(z.string()).optional(),
    ownership: z.nullable(z.string()).optional(),
    sales_tax_number: z.nullable(z.string()).optional(),
    payee_number: z.nullable(z.string()).optional(),
    abn_or_tfn: z.nullable(z.string()).optional(),
    abn_branch: z.nullable(z.string()).optional(),
    acn: z.nullable(z.string()).optional(),
    first_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    parent_id: z.nullable(z.string()).optional(),
    bank_accounts: z.array(
      z.lazy(() => ListCompaniesResponseBankAccounts$inboundSchema),
    ).optional(),
    websites: z.array(z.lazy(() => ListCompaniesResponseWebsites$inboundSchema))
      .optional(),
    addresses: z.array(
      z.lazy(() => ListCompaniesResponseAddresses$inboundSchema),
    ).optional(),
    social_links: z.array(
      z.lazy(() => ListCompaniesResponseSocialLinks$inboundSchema),
    ).optional(),
    phone_numbers: z.array(
      z.lazy(() => ListCompaniesResponsePhoneNumbers$inboundSchema),
    ).optional(),
    emails: z.array(z.lazy(() => ListCompaniesResponseEmails$inboundSchema))
      .optional(),
    row_type: z.lazy(() => ListCompaniesResponseCompanyRowType$inboundSchema)
      .optional(),
    custom_fields: z.array(
      z.lazy(() => ListCompaniesResponseCustomFields$inboundSchema),
    ).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    read_only: z.nullable(z.boolean()).optional(),
    last_activity_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    deleted: z.boolean().optional(),
    salutation: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    custom_mappings: z.nullable(
      z.lazy(() => ListCompaniesResponseCustomMappings$inboundSchema),
    ).optional(),
    updated_by: z.nullable(z.string()).optional(),
    created_by: z.nullable(z.string()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    pass_through: z.array(
      z.lazy(() => ListCompaniesResponsePassThrough$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "interaction_count": "interactionCount",
      "owner_id": "ownerId",
      "vat_number": "vatNumber",
      "annual_revenue": "annualRevenue",
      "number_of_employees": "numberOfEmployees",
      "sales_tax_number": "salesTaxNumber",
      "payee_number": "payeeNumber",
      "abn_or_tfn": "abnOrTfn",
      "abn_branch": "abnBranch",
      "first_name": "firstName",
      "last_name": "lastName",
      "parent_id": "parentId",
      "bank_accounts": "bankAccounts",
      "social_links": "socialLinks",
      "phone_numbers": "phoneNumbers",
      "row_type": "rowType",
      "custom_fields": "customFields",
      "read_only": "readOnly",
      "last_activity_at": "lastActivityAt",
      "custom_mappings": "customMappings",
      "updated_by": "updatedBy",
      "created_by": "createdBy",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type Data$Outbound = {
  id?: string | undefined;
  name: string | null;
  interaction_count?: number | null | undefined;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  parent_id?: string | null | undefined;
  bank_accounts?: Array<ListCompaniesResponseBankAccounts$Outbound> | undefined;
  websites?: Array<ListCompaniesResponseWebsites$Outbound> | undefined;
  addresses?: Array<ListCompaniesResponseAddresses$Outbound> | undefined;
  social_links?: Array<ListCompaniesResponseSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<ListCompaniesResponsePhoneNumbers$Outbound> | undefined;
  emails?: Array<ListCompaniesResponseEmails$Outbound> | undefined;
  row_type?: ListCompaniesResponseCompanyRowType$Outbound | undefined;
  custom_fields?: Array<ListCompaniesResponseCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  custom_mappings?:
    | ListCompaniesResponseCustomMappings$Outbound
    | null
    | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ListCompaniesResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string().optional(),
    name: z.nullable(z.string()),
    interactionCount: z.nullable(z.number().int()).optional(),
    ownerId: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    vatNumber: z.nullable(z.string()).optional(),
    currency: z.nullable(Currency$outboundSchema).optional(),
    status: z.nullable(z.string()).optional(),
    fax: z.nullable(z.string()).optional(),
    annualRevenue: z.nullable(z.string()).optional(),
    numberOfEmployees: z.nullable(z.string()).optional(),
    industry: z.nullable(z.string()).optional(),
    ownership: z.nullable(z.string()).optional(),
    salesTaxNumber: z.nullable(z.string()).optional(),
    payeeNumber: z.nullable(z.string()).optional(),
    abnOrTfn: z.nullable(z.string()).optional(),
    abnBranch: z.nullable(z.string()).optional(),
    acn: z.nullable(z.string()).optional(),
    firstName: z.nullable(z.string()).optional(),
    lastName: z.nullable(z.string()).optional(),
    parentId: z.nullable(z.string()).optional(),
    bankAccounts: z.array(
      z.lazy(() => ListCompaniesResponseBankAccounts$outboundSchema),
    ).optional(),
    websites: z.array(
      z.lazy(() => ListCompaniesResponseWebsites$outboundSchema),
    ).optional(),
    addresses: z.array(
      z.lazy(() => ListCompaniesResponseAddresses$outboundSchema),
    ).optional(),
    socialLinks: z.array(
      z.lazy(() => ListCompaniesResponseSocialLinks$outboundSchema),
    ).optional(),
    phoneNumbers: z.array(
      z.lazy(() => ListCompaniesResponsePhoneNumbers$outboundSchema),
    ).optional(),
    emails: z.array(z.lazy(() => ListCompaniesResponseEmails$outboundSchema))
      .optional(),
    rowType: z.lazy(() => ListCompaniesResponseCompanyRowType$outboundSchema)
      .optional(),
    customFields: z.array(
      z.lazy(() => ListCompaniesResponseCustomFields$outboundSchema),
    ).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    readOnly: z.nullable(z.boolean()).optional(),
    lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
      .optional(),
    deleted: z.boolean().optional(),
    salutation: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    customMappings: z.nullable(
      z.lazy(() => ListCompaniesResponseCustomMappings$outboundSchema),
    ).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    passThrough: z.array(
      z.lazy(() => ListCompaniesResponsePassThrough$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      interactionCount: "interaction_count",
      ownerId: "owner_id",
      vatNumber: "vat_number",
      annualRevenue: "annual_revenue",
      numberOfEmployees: "number_of_employees",
      salesTaxNumber: "sales_tax_number",
      payeeNumber: "payee_number",
      abnOrTfn: "abn_or_tfn",
      abnBranch: "abn_branch",
      firstName: "first_name",
      lastName: "last_name",
      parentId: "parent_id",
      bankAccounts: "bank_accounts",
      socialLinks: "social_links",
      phoneNumbers: "phone_numbers",
      rowType: "row_type",
      customFields: "custom_fields",
      readOnly: "read_only",
      lastActivityAt: "last_activity_at",
      customMappings: "custom_mappings",
      updatedBy: "updated_by",
      createdBy: "created_by",
      updatedAt: "updated_at",
      createdAt: "created_at",
      passThrough: "pass_through",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const Cursors$inboundSchema: z.ZodType<Cursors, z.ZodTypeDef, unknown> =
  z.object({
    previous: z.nullable(z.string()).optional(),
    current: z.nullable(z.string()).optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Cursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Cursors$outboundSchema: z.ZodType<
  Cursors$Outbound,
  z.ZodTypeDef,
  Cursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cursors$ {
  /** @deprecated use `Cursors$inboundSchema` instead. */
  export const inboundSchema = Cursors$inboundSchema;
  /** @deprecated use `Cursors$outboundSchema` instead. */
  export const outboundSchema = Cursors$outboundSchema;
  /** @deprecated use `Cursors$Outbound` instead. */
  export type Outbound = Cursors$Outbound;
}

export function cursorsToJSON(cursors: Cursors): string {
  return JSON.stringify(Cursors$outboundSchema.parse(cursors));
}

export function cursorsFromJSON(
  jsonString: string,
): SafeParseResult<Cursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cursors' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    items_on_page: z.number().int().optional(),
    cursors: z.lazy(() => Cursors$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "items_on_page": "itemsOnPage",
    });
  });

/** @internal */
export type Meta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: Cursors$Outbound | undefined;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    itemsOnPage: z.number().int().optional(),
    cursors: z.lazy(() => Cursors$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      itemsOnPage: "items_on_page",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({
    previous: z.nullable(z.string()).optional(),
    current: z.string().optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Links$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

export function linksToJSON(links: Links): string {
  return JSON.stringify(Links$outboundSchema.parse(links));
}

export function linksFromJSON(
  jsonString: string,
): SafeParseResult<Links, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Links$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Links' from JSON`,
  );
}

/** @internal */
export const ListCompaniesResponse$inboundSchema: z.ZodType<
  ListCompaniesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => Data$inboundSchema)),
  meta: z.lazy(() => Meta$inboundSchema).optional(),
  links: z.lazy(() => Links$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListCompaniesResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<Data$Outbound>;
  meta?: Meta$Outbound | undefined;
  links?: Links$Outbound | undefined;
};

/** @internal */
export const ListCompaniesResponse$outboundSchema: z.ZodType<
  ListCompaniesResponse$Outbound,
  z.ZodTypeDef,
  ListCompaniesResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => Data$outboundSchema)),
  meta: z.lazy(() => Meta$outboundSchema).optional(),
  links: z.lazy(() => Links$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompaniesResponse$ {
  /** @deprecated use `ListCompaniesResponse$inboundSchema` instead. */
  export const inboundSchema = ListCompaniesResponse$inboundSchema;
  /** @deprecated use `ListCompaniesResponse$outboundSchema` instead. */
  export const outboundSchema = ListCompaniesResponse$outboundSchema;
  /** @deprecated use `ListCompaniesResponse$Outbound` instead. */
  export type Outbound = ListCompaniesResponse$Outbound;
}

export function listCompaniesResponseToJSON(
  listCompaniesResponse: ListCompaniesResponse,
): string {
  return JSON.stringify(
    ListCompaniesResponse$outboundSchema.parse(listCompaniesResponse),
  );
}

export function listCompaniesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCompaniesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCompaniesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCompaniesResponse' from JSON`,
  );
}
