/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Indicates the classification or category of the contact, such as 'customer', 'lead', or 'vendor'. This string helps in organizing and filtering contacts based on their role or relationship with the organization.
 */
export const GetContactResponseType = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * Indicates the classification or category of the contact, such as 'customer', 'lead', or 'vendor'. This string helps in organizing and filtering contacts based on their role or relationship with the organization.
 */
export type GetContactResponseType = ClosedEnum<typeof GetContactResponseType>;

/**
 * The gender of the contact, which can be used for demographic analysis or personalized communication. This field may contain values such as 'male', 'female', or other gender identities as applicable.
 */
export const GetContactResponseGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact, which can be used for demographic analysis or personalized communication. This field may contain values such as 'male', 'female', or other gender identities as applicable.
 */
export type GetContactResponseGender = ClosedEnum<
  typeof GetContactResponseGender
>;

/**
 * Specifies the type of website, such as personal, business, or social media. This string helps categorize the website's purpose or affiliation, aiding in better organization and understanding of the contact's online profiles.
 */
export const GetContactResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of website, such as personal, business, or social media. This string helps categorize the website's purpose or affiliation, aiding in better organization and understanding of the contact's online profiles.
 */
export type GetContactResponseDataType = ClosedEnum<
  typeof GetContactResponseDataType
>;

export type GetContactResponseWebsites = {
  /**
   * A unique identifier for each website entry associated with the contact. This string value is used to distinguish between different websites linked to the same contact, facilitating updates or deletions of specific entries.
   */
  id?: string | null | undefined;
  /**
   * The URL of the website associated with the contact. This string is required and must be a valid URL format, providing a direct link to the contact's online presence or resources.
   */
  url: string;
  /**
   * Specifies the type of website, such as personal, business, or social media. This string helps categorize the website's purpose or affiliation, aiding in better organization and understanding of the contact's online profiles.
   */
  type?: GetContactResponseDataType | null | undefined;
};

/**
 * Specifies the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in identifying the context in which the address is used and is crucial for applications that need to filter or sort addresses based on their type.
 */
export const GetContactResponseDataAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in identifying the context in which the address is used and is crucial for applications that need to filter or sort addresses based on their type.
 */
export type GetContactResponseDataAddressesType = ClosedEnum<
  typeof GetContactResponseDataAddressesType
>;

export type GetContactResponseAddresses = {
  /**
   * A unique identifier for each address entry within the contact's address list. This string is used to distinguish between different addresses and is essential for operations that require address-specific actions.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in identifying the context in which the address is used and is crucial for applications that need to filter or sort addresses based on their type.
   */
  type?: GetContactResponseDataAddressesType | null | undefined;
  /**
   * The full address as a single string, which may include street, city, state, and postal code. This format is useful for APIs that do not provide structured address components, allowing for easy display and storage of address information.
   */
  string?: string | null | undefined;
  /**
   * A descriptive name or label for the address, such as 'Headquarters' or 'Main Office'. This name helps users quickly identify the address's significance or location without needing to parse the full address string.
   */
  name?: string | null | undefined;
  /**
   * The first line of the contact's address, typically including the street number, street name, and any apartment or suite number. This field is optional and may be empty if not applicable. It is used to provide the primary location information for the contact.
   */
  line1?: string | null | undefined;
  /**
   * The second line of the contact's address, often used for additional location details such as building name or floor number. This field is optional and can be left blank if not needed. It complements the primary address information provided in line 1.
   */
  line2?: string | null | undefined;
  /**
   * The third line of the contact's address, which may include further address details like landmarks or specific instructions. This field is optional and is typically used for extended address information that doesn't fit in the first two lines.
   */
  line3?: string | null | undefined;
  /**
   * The fourth line of the contact's address, reserved for any additional address information that may be necessary. This field is optional and is generally used for very detailed address specifications.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the contact's address, indicating the specific location on the street. This field is optional and may be included in line 1 if preferred. It helps in precisely identifying the contact's address within a street.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name associated with the contact's address. This string value represents the city where the contact is located, and it may be used for geographical filtering or display purposes in applications. It is optional and may be empty if not provided.
   */
  city?: string | null | undefined;
  /**
   * The state or region name for the contact's address. This string value indicates the state or province where the contact resides, useful for regional segmentation or analysis. It is optional and may be empty if not specified.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code for the contact's address. This string value is used for mailing purposes and can help in identifying the exact location of the contact. It is optional and may be empty if not provided.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the contact's address, formatted according to ISO 3166-1 alpha-2 standards. This two-letter string identifies the country where the contact is located, essential for international operations and compliance. It is optional and may be empty if not specified.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the contact's address. This string value represents the geographical latitude, which can be used for mapping and location-based services. It is optional and may be empty if not available.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, represented as a string. This value is part of the geographical data used to pinpoint the exact location of the contact's address on a map. It is useful for applications that require mapping or location-based services.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality associated with the address, provided as a string. This field helps in identifying the regional division within a state or country where the contact resides. It is particularly useful for regional analysis or demographic segmentation.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address, formatted as a string. This information is crucial for identifying the primary individual at the location, facilitating personalized communication and record-keeping.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as 'Mr.', 'Ms.', or 'Dr.', provided as a string. This field is important for formal communication and ensuring respectful address in correspondence.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the address, formatted as a string. This number is essential for direct communication with the contact person or organization at the specified location, supporting both voice calls and messaging.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the contact's address, formatted as a string. This field may be empty if no fax number is provided. It is useful for sending documents directly to the contact's fax machine.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the contact's address, represented as a string. This field may be empty if no email is provided. It is essential for electronic communication with the contact.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the contact's address, formatted as a string. This field may be empty if no website is provided. It provides a direct link to the contact's online presence or business.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the contact's address, stored as a string. This field may contain any extra information or comments about the address, aiding in context or clarification.
   */
  notes?: string | null | undefined;
  /**
   * A string representing a binary value used to track changes to the contact's address object. It is incremented with each update to prevent data conflicts, ensuring data integrity during concurrent modifications.
   */
  rowVersion?: string | null | undefined;
};

export type GetContactResponseSocialLinks = {
  /**
   * A unique identifier for each social link associated with the contact. This string is used to distinguish between different social media links within the contact's profile. It is optional and may not be present if the social link does not have a specific identifier.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media link, such as a Twitter or LinkedIn profile. This string is required and must be a valid URL format, providing direct access to the contact's social media page.
   */
  url: string;
  /**
   * Specifies the type of social media link, such as 'twitter' or 'linkedin'. This string helps categorize the social link and is optional, allowing flexibility in the types of social media platforms that can be associated with the contact.
   */
  type?: string | null | undefined;
};

/**
 * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used. The value is a string that describes the type of phone number associated with the contact.
 */
export const GetContactResponseDataPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used. The value is a string that describes the type of phone number associated with the contact.
 */
export type GetContactResponseDataPhoneNumbersType = ClosedEnum<
  typeof GetContactResponseDataPhoneNumbersType
>;

export type GetContactResponsePhoneNumbers = {
  /**
   * A unique identifier assigned to each phone number entry within the contact's record. This string value is used to distinguish between different phone numbers associated with the same contact, facilitating precise data management and retrieval.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code associated with the phone number, represented as a string (e.g., '+1' for the United States). This code is crucial for making international calls and is part of the complete phone number format.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code for the phone number, provided as a string (e.g., '323' for Los Angeles). This code helps in identifying the specific geographic region of the phone number within a country.
   */
  areaCode?: string | null | undefined;
  /**
   * The main sequence of digits representing the phone number, excluding the country and area codes. This string is essential for dialing the contact directly and is a required field in the contact's phone number details.
   */
  number: string;
  /**
   * An optional string representing the extension number for the phone line, used in organizations to direct calls to specific departments or individuals. This is part of the complete dialing sequence when applicable.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used. The value is a string that describes the type of phone number associated with the contact.
   */
  type?: GetContactResponseDataPhoneNumbersType | null | undefined;
};

/**
 * Indicates the type of email address, such as 'personal', 'work', or 'other'. This helps in categorizing the email address based on its usage context. The value is a string that describes the type of email address associated with the contact.
 */
export const GetContactResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Indicates the type of email address, such as 'personal', 'work', or 'other'. This helps in categorizing the email address based on its usage context. The value is a string that describes the type of email address associated with the contact.
 */
export type GetContactResponseDataEmailsType = ClosedEnum<
  typeof GetContactResponseDataEmailsType
>;

export type GetContactResponseEmails = {
  /**
   * A unique string identifier for each email address associated with the contact. This ID is used to distinguish between different email entries within the contact's email array.
   */
  id?: string | null | undefined;
  /**
   * The actual email address of the contact. This is a required field and is always returned as a valid email string, ensuring that the contact can be reached electronically.
   */
  email: string | null;
  /**
   * Indicates the type of email address, such as 'personal', 'work', or 'other'. This helps in categorizing the email address based on its usage context. The value is a string that describes the type of email address associated with the contact.
   */
  type?: GetContactResponseDataEmailsType | null | undefined;
};

export type GetContactResponseValue6 = {};

export type GetContactResponseValue4 = {};

/**
 * Contains the specific value assigned to a custom field for the contact. This value can vary in type, such as a string, number, or date, depending on the custom field's configuration. It allows for the storage of additional, customizable information unique to the contact.
 */
export type GetContactResponseValue =
  | GetContactResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<GetContactResponseValue6>;

export type GetContactResponseCustomFields = {
  /**
   * A unique identifier for each custom field associated with the contact. This string value is essential for referencing specific custom fields when updating or retrieving custom data.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, providing a human-readable label for the data it represents. This string helps users identify the purpose of the custom field within the contact's profile.
   */
  name?: string | null | undefined;
  /**
   * A detailed description of the custom field, offering additional context or instructions about its intended use. This string can include guidelines or examples to help users understand the data's relevance.
   */
  description?: string | null | undefined;
  /**
   * Contains the specific value assigned to a custom field for the contact. This value can vary in type, such as a string, number, or date, depending on the custom field's configuration. It allows for the storage of additional, customizable information unique to the contact.
   */
  value?:
    | GetContactResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<GetContactResponseValue6>
    | null
    | undefined;
};

/**
 * An object containing any custom mappings configured for the contact resource. This may include additional fields or metadata that are specific to the user's CRM setup, allowing for extended customization and integration. The structure of this object depends on the custom mappings defined by the user.
 */
export type GetContactResponseCustomMappings = {};

export type GetContactResponseExtendPaths = {
  /**
   * A JSONPath string that precisely identifies the location within the contact's data structure where a modification should be applied. This path is crucial for targeting specific fields or nested objects within the contact's details, ensuring that updates are accurately implemented.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath within the contact's data. This can be of any data type, allowing for flexible updates to the contact's information, such as changing a string, number, or even a nested object, depending on the path specified.
   */
  value?: any | undefined;
};

export type GetContactResponsePassThrough = {
  /**
   * A required string that identifies the specific service to which the pass_through data should be applied. This ensures that the custom data is correctly associated with the intended service, facilitating accurate processing and integration.
   */
  serviceId: string;
  /**
   * An optional string that specifies the identifier for a particular workflow operation to which the pass_through data should be applied. This is particularly useful for Unify calls that involve multiple downstream requests, ensuring that the data is applied to the correct operation.
   */
  operationId?: string | undefined;
  /**
   * An optional object that allows for the direct extension of the contact's data with any additional properties. This flexible structure supports the inclusion of custom fields or data points that may be necessary for specific use cases or integrations.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property contains an array of objects, each representing a specific modification path for structured data within the contact's details. It allows developers to specify where and how to apply changes to the contact data using JSONPath expressions. This feature is particularly useful for customizing the contact information retrieved from the CRM system.
   */
  extendPaths?: Array<GetContactResponseExtendPaths> | undefined;
};

/**
 * This object contains all the detailed information about the specific contact retrieved from the CRM system. It serves as the main container for the contact's attributes, ensuring that all related data is encapsulated within a single structure for easy access and manipulation.
 */
export type GetContactResponseData = {
  /**
   * A unique identifier assigned to the contact within the CRM system. This string value is used to reference the contact in various operations and is essential for distinguishing between different contact records.
   */
  id?: string | undefined;
  /**
   * The full name of the contact as recorded in the CRM. This string is crucial for identifying the contact in user interfaces and reports, and it is always provided for active contact records.
   */
  name: string | null;
  /**
   * The unique identifier of the user or entity that owns or manages the contact. This string helps in assigning responsibility and tracking who is in charge of maintaining the contact's information.
   */
  ownerId?: string | null | undefined;
  /**
   * Indicates the classification or category of the contact, such as 'customer', 'lead', or 'vendor'. This string helps in organizing and filtering contacts based on their role or relationship with the organization.
   */
  type?: GetContactResponseType | null | undefined;
  /**
   * The unique identifier for the company associated with the contact. This ID is used to link the contact to its corresponding company record within the CRM system. It is typically a string of alphanumeric characters and may be null if the contact is not linked to any company.
   */
  companyId?: string | null | undefined;
  /**
   * The official name of the company that the contact is associated with. This is a string value that provides a human-readable reference to the company, facilitating easier identification and display in user interfaces.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with the contact. This ID helps in tracking the contact's origin or potential sales opportunity within the CRM. It is a string and may be null if the contact is not linked to any lead.
   */
  leadId?: string | null | undefined;
  /**
   * The first name of the contact person. This string value is used for personal identification and communication purposes, often displayed in user interfaces and reports.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the contact person, if available. This string value provides additional identification details and may be used in formal communications or records.
   */
  middleName?: string | null | undefined;
  /**
   * The contact's family name or surname as recorded in the CRM. This field may be empty if the last name is not provided. It is used to identify the contact in formal communications and reports.
   */
  lastName?: string | null | undefined;
  /**
   * An optional prefix for the contact's name, such as 'Mr.', 'Ms.', or 'Dr.'. This field is used to address the contact appropriately in formal settings and communications.
   */
  prefix?: string | null | undefined;
  /**
   * An optional suffix for the contact's name, such as 'Jr.', 'Sr.', or 'III'. This field is used to distinguish between individuals with similar names and is included in formal communications.
   */
  suffix?: string | null | undefined;
  /**
   * The professional title or position held by the contact within their organization, such as 'Software Engineer' or 'Marketing Manager'. This information helps in understanding the contact's role and responsibilities.
   */
  title?: string | null | undefined;
  /**
   * The specific department within the organization where the contact works, such as 'Human Resources' or 'Sales'. This helps in categorizing the contact's role and facilitates targeted communication.
   */
  department?: string | null | undefined;
  /**
   * The language code representing the contact's preferred language, formatted according to the ISO 639-1 standard. For example, 'EN' for English in the United States. This helps in localizing communication with the contact.
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact, which can be used for demographic analysis or personalized communication. This field may contain values such as 'male', 'female', or other gender identities as applicable.
   */
  gender?: GetContactResponseGender | null | undefined;
  /**
   * The contact's date of birth, formatted as a string in the 'YYYY-MM-DD' format. This information can be used for age verification or to send birthday greetings.
   */
  birthday?: string | null | undefined;
  /**
   * A string containing the URL to the contact's image, if available. This can be used to display the contact's picture in user interfaces or reports.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The URL pointing to the contact's photo, allowing applications to fetch and display the contact's image. This is useful for visual identification in CRM systems.
   */
  photoUrl?: string | null | undefined;
  /**
   * Indicates the origin from which the contact was acquired, such as 'web', 'referral', or 'advertisement'. This information helps in tracking the effectiveness of different marketing channels. The value is a string and may be null if the lead source is not specified.
   */
  leadSource?: string | null | undefined;
  /**
   * The contact's fax number, formatted as a string. This field may be empty or null if the contact does not have a fax number. Useful for businesses that still utilize fax communication.
   */
  fax?: string | null | undefined;
  /**
   * A brief textual description or notes about the contact, which can include personal preferences, history, or other relevant details. This field is a string and can be null if no description is provided.
   */
  description?: string | null | undefined;
  /**
   * Represents the current financial balance associated with the contact, typically in the default currency of the CRM system. This numeric value can be used to assess outstanding amounts or credits related to the contact.
   */
  currentBalance?: number | null | undefined;
  /**
   * The current status of the contact, such as 'active', 'inactive', or 'prospect'. This string value helps in categorizing the contact's engagement level or lifecycle stage within the CRM.
   */
  status?: string | null | undefined;
  /**
   * Indicates whether the contact is currently active within the CRM system. This boolean value helps determine if the contact is actively engaged or available for communication and processing. It is optional and may not be present for all contacts.
   */
  active?: boolean | null | undefined;
  /**
   * A list of websites associated with the contact. Each entry in the array represents a website object containing details such as the URL and type. This array can be empty if no websites are linked to the contact.
   */
  websites?: Array<GetContactResponseWebsites> | undefined;
  /**
   * An array containing the contact's addresses. Each entry in the array represents a distinct address associated with the contact, allowing for multiple addresses to be stored. This array can include various types of addresses such as home, work, or other.
   */
  addresses?: Array<GetContactResponseAddresses> | undefined;
  /**
   * An array containing the social media links associated with the contact. Each element in the array is an object that includes details such as the social link's unique identifier, URL, and type. This property is optional and may be empty if no social links are associated with the contact.
   */
  socialLinks?: Array<GetContactResponseSocialLinks> | undefined;
  /**
   * An array of phone numbers associated with the contact. Each entry in the array represents a different phone number, potentially including details such as type (e.g., mobile, work) and country code. This property is optional and may be empty if no phone numbers are recorded for the contact.
   */
  phoneNumbers?: Array<GetContactResponsePhoneNumbers> | undefined;
  /**
   * An array containing the email addresses associated with the contact. Each entry in the array is an object that holds detailed information about a specific email address, including its unique identifier, the email address itself, and its type.
   */
  emails?: Array<GetContactResponseEmails> | undefined;
  /**
   * The email domain associated with the contact, typically extracted from their primary email address. This string value helps in categorizing contacts based on their organizational domain, useful for domain-specific processing or filtering.
   */
  emailDomain?: string | null | undefined;
  /**
   * An array containing custom fields associated with the contact. Each entry in the array represents a unique custom field, allowing for additional, user-defined data to be stored and retrieved alongside standard contact information.
   */
  customFields?: Array<GetContactResponseCustomFields> | undefined;
  /**
   * An array of tags associated with the contact, each representing a label or category that helps in organizing and filtering contacts. Tags are useful for grouping contacts based on specific criteria or characteristics.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The date and time when the first call was made to or from the contact, formatted as an ISO 8601 string. This timestamp helps track the initial communication with the contact and is useful for understanding the contact's interaction history.
   */
  firstCallAt?: Date | null | undefined;
  /**
   * The date and time when the first email was sent to or received from the contact, formatted as an ISO 8601 string. This information is crucial for tracking the contact's communication timeline and engagement history.
   */
  firstEmailAt?: Date | null | undefined;
  /**
   * The date and time of the most recent interaction or activity involving the contact, formatted as an ISO 8601 string. This information helps track the engagement level of the contact and is useful for understanding recent interactions. It may be null if no activities have been recorded.
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * An object containing any custom mappings configured for the contact resource. This may include additional fields or metadata that are specific to the user's CRM setup, allowing for extended customization and integration. The structure of this object depends on the custom mappings defined by the user.
   */
  customMappings?: GetContactResponseCustomMappings | null | undefined;
  /**
   * The date and time when the contact's information was last modified, formatted as an ISO 8601 string. This timestamp is crucial for synchronization processes and ensuring that the most current data is being used. It reflects any changes made to the contact's record.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the contact was initially created in the CRM system, formatted as an ISO 8601 string. This property provides historical context about the contact's record and is useful for auditing and tracking the age of the contact data.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array of identifiers representing opportunities associated with the contact. Each ID corresponds to a specific opportunity in the CRM, allowing developers to link the contact to potential business deals or projects. This array may be empty if no opportunities are linked to the contact.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * An optional array that allows the inclusion of service-specific custom data or modifications when retrieving the contact's details. This property is useful for extending the response with additional information that may be required for specific integrations or workflows.
   */
  passThrough?: Array<GetContactResponsePassThrough> | undefined;
};

/**
 * Contact
 */
export type GetContactResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value helps determine whether the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is crucial for error handling and debugging in client applications.
   */
  statusCode: number;
  /**
   * A string representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for an error. This provides a human-readable status that complements the numeric status code, aiding in quick understanding of the response outcome.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the contact data is retrieved. This string uniquely identifies the service within the Apideck ecosystem, ensuring that the data source is clear and traceable for integration purposes.
   */
  service: string;
  /**
   * The name of the unified API resource accessed, in this case, 'contacts'. This string indicates the type of resource being interacted with, helping developers understand the context of the data returned in the response.
   */
  resource: string;
  /**
   * The specific operation performed by the API, represented as a string. For this endpoint, it would typically be 'retrieve' or similar, indicating that the operation involved fetching data rather than modifying it.
   */
  operation: string;
  /**
   * This object contains all the detailed information about the specific contact retrieved from the CRM system. It serves as the main container for the contact's attributes, ensuring that all related data is encapsulated within a single structure for easy access and manipulation.
   */
  data: GetContactResponseData;
};

/** @internal */
export const GetContactResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetContactResponseType
> = z.nativeEnum(GetContactResponseType);

/** @internal */
export const GetContactResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetContactResponseType
> = GetContactResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseType$ {
  /** @deprecated use `GetContactResponseType$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseType$inboundSchema;
  /** @deprecated use `GetContactResponseType$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseType$outboundSchema;
}

/** @internal */
export const GetContactResponseGender$inboundSchema: z.ZodNativeEnum<
  typeof GetContactResponseGender
> = z.nativeEnum(GetContactResponseGender);

/** @internal */
export const GetContactResponseGender$outboundSchema: z.ZodNativeEnum<
  typeof GetContactResponseGender
> = GetContactResponseGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseGender$ {
  /** @deprecated use `GetContactResponseGender$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseGender$inboundSchema;
  /** @deprecated use `GetContactResponseGender$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseGender$outboundSchema;
}

/** @internal */
export const GetContactResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof GetContactResponseDataType
> = z.nativeEnum(GetContactResponseDataType);

/** @internal */
export const GetContactResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof GetContactResponseDataType
> = GetContactResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseDataType$ {
  /** @deprecated use `GetContactResponseDataType$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseDataType$inboundSchema;
  /** @deprecated use `GetContactResponseDataType$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseDataType$outboundSchema;
}

/** @internal */
export const GetContactResponseWebsites$inboundSchema: z.ZodType<
  GetContactResponseWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(GetContactResponseDataType$inboundSchema).optional(),
});

/** @internal */
export type GetContactResponseWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const GetContactResponseWebsites$outboundSchema: z.ZodType<
  GetContactResponseWebsites$Outbound,
  z.ZodTypeDef,
  GetContactResponseWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(GetContactResponseDataType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseWebsites$ {
  /** @deprecated use `GetContactResponseWebsites$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseWebsites$inboundSchema;
  /** @deprecated use `GetContactResponseWebsites$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseWebsites$outboundSchema;
  /** @deprecated use `GetContactResponseWebsites$Outbound` instead. */
  export type Outbound = GetContactResponseWebsites$Outbound;
}

export function getContactResponseWebsitesToJSON(
  getContactResponseWebsites: GetContactResponseWebsites,
): string {
  return JSON.stringify(
    GetContactResponseWebsites$outboundSchema.parse(getContactResponseWebsites),
  );
}

export function getContactResponseWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseWebsites' from JSON`,
  );
}

/** @internal */
export const GetContactResponseDataAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof GetContactResponseDataAddressesType
> = z.nativeEnum(GetContactResponseDataAddressesType);

/** @internal */
export const GetContactResponseDataAddressesType$outboundSchema:
  z.ZodNativeEnum<typeof GetContactResponseDataAddressesType> =
    GetContactResponseDataAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseDataAddressesType$ {
  /** @deprecated use `GetContactResponseDataAddressesType$inboundSchema` instead. */
  export const inboundSchema =
    GetContactResponseDataAddressesType$inboundSchema;
  /** @deprecated use `GetContactResponseDataAddressesType$outboundSchema` instead. */
  export const outboundSchema =
    GetContactResponseDataAddressesType$outboundSchema;
}

/** @internal */
export const GetContactResponseAddresses$inboundSchema: z.ZodType<
  GetContactResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(GetContactResponseDataAddressesType$inboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type GetContactResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const GetContactResponseAddresses$outboundSchema: z.ZodType<
  GetContactResponseAddresses$Outbound,
  z.ZodTypeDef,
  GetContactResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(GetContactResponseDataAddressesType$outboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseAddresses$ {
  /** @deprecated use `GetContactResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseAddresses$inboundSchema;
  /** @deprecated use `GetContactResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseAddresses$outboundSchema;
  /** @deprecated use `GetContactResponseAddresses$Outbound` instead. */
  export type Outbound = GetContactResponseAddresses$Outbound;
}

export function getContactResponseAddressesToJSON(
  getContactResponseAddresses: GetContactResponseAddresses,
): string {
  return JSON.stringify(
    GetContactResponseAddresses$outboundSchema.parse(
      getContactResponseAddresses,
    ),
  );
}

export function getContactResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseAddresses' from JSON`,
  );
}

/** @internal */
export const GetContactResponseSocialLinks$inboundSchema: z.ZodType<
  GetContactResponseSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetContactResponseSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const GetContactResponseSocialLinks$outboundSchema: z.ZodType<
  GetContactResponseSocialLinks$Outbound,
  z.ZodTypeDef,
  GetContactResponseSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseSocialLinks$ {
  /** @deprecated use `GetContactResponseSocialLinks$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseSocialLinks$inboundSchema;
  /** @deprecated use `GetContactResponseSocialLinks$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseSocialLinks$outboundSchema;
  /** @deprecated use `GetContactResponseSocialLinks$Outbound` instead. */
  export type Outbound = GetContactResponseSocialLinks$Outbound;
}

export function getContactResponseSocialLinksToJSON(
  getContactResponseSocialLinks: GetContactResponseSocialLinks,
): string {
  return JSON.stringify(
    GetContactResponseSocialLinks$outboundSchema.parse(
      getContactResponseSocialLinks,
    ),
  );
}

export function getContactResponseSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseSocialLinks' from JSON`,
  );
}

/** @internal */
export const GetContactResponseDataPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof GetContactResponseDataPhoneNumbersType> = z.nativeEnum(
    GetContactResponseDataPhoneNumbersType,
  );

/** @internal */
export const GetContactResponseDataPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof GetContactResponseDataPhoneNumbersType> =
    GetContactResponseDataPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseDataPhoneNumbersType$ {
  /** @deprecated use `GetContactResponseDataPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    GetContactResponseDataPhoneNumbersType$inboundSchema;
  /** @deprecated use `GetContactResponseDataPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    GetContactResponseDataPhoneNumbersType$outboundSchema;
}

/** @internal */
export const GetContactResponsePhoneNumbers$inboundSchema: z.ZodType<
  GetContactResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(GetContactResponseDataPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type GetContactResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const GetContactResponsePhoneNumbers$outboundSchema: z.ZodType<
  GetContactResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  GetContactResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(GetContactResponseDataPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponsePhoneNumbers$ {
  /** @deprecated use `GetContactResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = GetContactResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `GetContactResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = GetContactResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `GetContactResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = GetContactResponsePhoneNumbers$Outbound;
}

export function getContactResponsePhoneNumbersToJSON(
  getContactResponsePhoneNumbers: GetContactResponsePhoneNumbers,
): string {
  return JSON.stringify(
    GetContactResponsePhoneNumbers$outboundSchema.parse(
      getContactResponsePhoneNumbers,
    ),
  );
}

export function getContactResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const GetContactResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof GetContactResponseDataEmailsType
> = z.nativeEnum(GetContactResponseDataEmailsType);

/** @internal */
export const GetContactResponseDataEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof GetContactResponseDataEmailsType
> = GetContactResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseDataEmailsType$ {
  /** @deprecated use `GetContactResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseDataEmailsType$inboundSchema;
  /** @deprecated use `GetContactResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const GetContactResponseEmails$inboundSchema: z.ZodType<
  GetContactResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(GetContactResponseDataEmailsType$inboundSchema).optional(),
});

/** @internal */
export type GetContactResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const GetContactResponseEmails$outboundSchema: z.ZodType<
  GetContactResponseEmails$Outbound,
  z.ZodTypeDef,
  GetContactResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(GetContactResponseDataEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseEmails$ {
  /** @deprecated use `GetContactResponseEmails$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseEmails$inboundSchema;
  /** @deprecated use `GetContactResponseEmails$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseEmails$outboundSchema;
  /** @deprecated use `GetContactResponseEmails$Outbound` instead. */
  export type Outbound = GetContactResponseEmails$Outbound;
}

export function getContactResponseEmailsToJSON(
  getContactResponseEmails: GetContactResponseEmails,
): string {
  return JSON.stringify(
    GetContactResponseEmails$outboundSchema.parse(getContactResponseEmails),
  );
}

export function getContactResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseEmails' from JSON`,
  );
}

/** @internal */
export const GetContactResponseValue6$inboundSchema: z.ZodType<
  GetContactResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetContactResponseValue6$Outbound = {};

/** @internal */
export const GetContactResponseValue6$outboundSchema: z.ZodType<
  GetContactResponseValue6$Outbound,
  z.ZodTypeDef,
  GetContactResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseValue6$ {
  /** @deprecated use `GetContactResponseValue6$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseValue6$inboundSchema;
  /** @deprecated use `GetContactResponseValue6$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseValue6$outboundSchema;
  /** @deprecated use `GetContactResponseValue6$Outbound` instead. */
  export type Outbound = GetContactResponseValue6$Outbound;
}

export function getContactResponseValue6ToJSON(
  getContactResponseValue6: GetContactResponseValue6,
): string {
  return JSON.stringify(
    GetContactResponseValue6$outboundSchema.parse(getContactResponseValue6),
  );
}

export function getContactResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseValue6' from JSON`,
  );
}

/** @internal */
export const GetContactResponseValue4$inboundSchema: z.ZodType<
  GetContactResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetContactResponseValue4$Outbound = {};

/** @internal */
export const GetContactResponseValue4$outboundSchema: z.ZodType<
  GetContactResponseValue4$Outbound,
  z.ZodTypeDef,
  GetContactResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseValue4$ {
  /** @deprecated use `GetContactResponseValue4$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseValue4$inboundSchema;
  /** @deprecated use `GetContactResponseValue4$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseValue4$outboundSchema;
  /** @deprecated use `GetContactResponseValue4$Outbound` instead. */
  export type Outbound = GetContactResponseValue4$Outbound;
}

export function getContactResponseValue4ToJSON(
  getContactResponseValue4: GetContactResponseValue4,
): string {
  return JSON.stringify(
    GetContactResponseValue4$outboundSchema.parse(getContactResponseValue4),
  );
}

export function getContactResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseValue4' from JSON`,
  );
}

/** @internal */
export const GetContactResponseValue$inboundSchema: z.ZodType<
  GetContactResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetContactResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => GetContactResponseValue6$inboundSchema)),
]);

/** @internal */
export type GetContactResponseValue$Outbound =
  | GetContactResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<GetContactResponseValue6$Outbound>;

/** @internal */
export const GetContactResponseValue$outboundSchema: z.ZodType<
  GetContactResponseValue$Outbound,
  z.ZodTypeDef,
  GetContactResponseValue
> = z.union([
  z.lazy(() => GetContactResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => GetContactResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseValue$ {
  /** @deprecated use `GetContactResponseValue$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseValue$inboundSchema;
  /** @deprecated use `GetContactResponseValue$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseValue$outboundSchema;
  /** @deprecated use `GetContactResponseValue$Outbound` instead. */
  export type Outbound = GetContactResponseValue$Outbound;
}

export function getContactResponseValueToJSON(
  getContactResponseValue: GetContactResponseValue,
): string {
  return JSON.stringify(
    GetContactResponseValue$outboundSchema.parse(getContactResponseValue),
  );
}

export function getContactResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseValue' from JSON`,
  );
}

/** @internal */
export const GetContactResponseCustomFields$inboundSchema: z.ZodType<
  GetContactResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => GetContactResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => GetContactResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type GetContactResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | GetContactResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<GetContactResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const GetContactResponseCustomFields$outboundSchema: z.ZodType<
  GetContactResponseCustomFields$Outbound,
  z.ZodTypeDef,
  GetContactResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => GetContactResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => GetContactResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseCustomFields$ {
  /** @deprecated use `GetContactResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseCustomFields$inboundSchema;
  /** @deprecated use `GetContactResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseCustomFields$outboundSchema;
  /** @deprecated use `GetContactResponseCustomFields$Outbound` instead. */
  export type Outbound = GetContactResponseCustomFields$Outbound;
}

export function getContactResponseCustomFieldsToJSON(
  getContactResponseCustomFields: GetContactResponseCustomFields,
): string {
  return JSON.stringify(
    GetContactResponseCustomFields$outboundSchema.parse(
      getContactResponseCustomFields,
    ),
  );
}

export function getContactResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const GetContactResponseCustomMappings$inboundSchema: z.ZodType<
  GetContactResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetContactResponseCustomMappings$Outbound = {};

/** @internal */
export const GetContactResponseCustomMappings$outboundSchema: z.ZodType<
  GetContactResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  GetContactResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseCustomMappings$ {
  /** @deprecated use `GetContactResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseCustomMappings$inboundSchema;
  /** @deprecated use `GetContactResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseCustomMappings$outboundSchema;
  /** @deprecated use `GetContactResponseCustomMappings$Outbound` instead. */
  export type Outbound = GetContactResponseCustomMappings$Outbound;
}

export function getContactResponseCustomMappingsToJSON(
  getContactResponseCustomMappings: GetContactResponseCustomMappings,
): string {
  return JSON.stringify(
    GetContactResponseCustomMappings$outboundSchema.parse(
      getContactResponseCustomMappings,
    ),
  );
}

export function getContactResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const GetContactResponseExtendPaths$inboundSchema: z.ZodType<
  GetContactResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type GetContactResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const GetContactResponseExtendPaths$outboundSchema: z.ZodType<
  GetContactResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  GetContactResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseExtendPaths$ {
  /** @deprecated use `GetContactResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseExtendPaths$inboundSchema;
  /** @deprecated use `GetContactResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseExtendPaths$outboundSchema;
  /** @deprecated use `GetContactResponseExtendPaths$Outbound` instead. */
  export type Outbound = GetContactResponseExtendPaths$Outbound;
}

export function getContactResponseExtendPathsToJSON(
  getContactResponseExtendPaths: GetContactResponseExtendPaths,
): string {
  return JSON.stringify(
    GetContactResponseExtendPaths$outboundSchema.parse(
      getContactResponseExtendPaths,
    ),
  );
}

export function getContactResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const GetContactResponsePassThrough$inboundSchema: z.ZodType<
  GetContactResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => GetContactResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type GetContactResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<GetContactResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const GetContactResponsePassThrough$outboundSchema: z.ZodType<
  GetContactResponsePassThrough$Outbound,
  z.ZodTypeDef,
  GetContactResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => GetContactResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponsePassThrough$ {
  /** @deprecated use `GetContactResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = GetContactResponsePassThrough$inboundSchema;
  /** @deprecated use `GetContactResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = GetContactResponsePassThrough$outboundSchema;
  /** @deprecated use `GetContactResponsePassThrough$Outbound` instead. */
  export type Outbound = GetContactResponsePassThrough$Outbound;
}

export function getContactResponsePassThroughToJSON(
  getContactResponsePassThrough: GetContactResponsePassThrough,
): string {
  return JSON.stringify(
    GetContactResponsePassThrough$outboundSchema.parse(
      getContactResponsePassThrough,
    ),
  );
}

export function getContactResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const GetContactResponseData$inboundSchema: z.ZodType<
  GetContactResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  type: z.nullable(GetContactResponseType$inboundSchema).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(GetContactResponseGender$inboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => GetContactResponseWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => GetContactResponseAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => GetContactResponseSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => GetContactResponsePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => GetContactResponseEmails$inboundSchema))
    .optional(),
  email_domain: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => GetContactResponseCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  first_call_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  first_email_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_activity_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => GetContactResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  opportunity_ids: z.array(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => GetContactResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "company_id": "companyId",
    "company_name": "companyName",
    "lead_id": "leadId",
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "photo_url": "photoUrl",
    "lead_source": "leadSource",
    "current_balance": "currentBalance",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "email_domain": "emailDomain",
    "custom_fields": "customFields",
    "first_call_at": "firstCallAt",
    "first_email_at": "firstEmailAt",
    "last_activity_at": "lastActivityAt",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "opportunity_ids": "opportunityIds",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type GetContactResponseData$Outbound = {
  id?: string | undefined;
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<GetContactResponseWebsites$Outbound> | undefined;
  addresses?: Array<GetContactResponseAddresses$Outbound> | undefined;
  social_links?: Array<GetContactResponseSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<GetContactResponsePhoneNumbers$Outbound> | undefined;
  emails?: Array<GetContactResponseEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<GetContactResponseCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  first_call_at?: string | null | undefined;
  first_email_at?: string | null | undefined;
  last_activity_at?: string | null | undefined;
  custom_mappings?:
    | GetContactResponseCustomMappings$Outbound
    | null
    | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<GetContactResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const GetContactResponseData$outboundSchema: z.ZodType<
  GetContactResponseData$Outbound,
  z.ZodTypeDef,
  GetContactResponseData
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(GetContactResponseType$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(GetContactResponseGender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => GetContactResponseWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => GetContactResponseAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => GetContactResponseSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => GetContactResponsePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => GetContactResponseEmails$outboundSchema))
    .optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => GetContactResponseCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  firstCallAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  firstEmailAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => GetContactResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => GetContactResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    firstCallAt: "first_call_at",
    firstEmailAt: "first_email_at",
    lastActivityAt: "last_activity_at",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponseData$ {
  /** @deprecated use `GetContactResponseData$inboundSchema` instead. */
  export const inboundSchema = GetContactResponseData$inboundSchema;
  /** @deprecated use `GetContactResponseData$outboundSchema` instead. */
  export const outboundSchema = GetContactResponseData$outboundSchema;
  /** @deprecated use `GetContactResponseData$Outbound` instead. */
  export type Outbound = GetContactResponseData$Outbound;
}

export function getContactResponseDataToJSON(
  getContactResponseData: GetContactResponseData,
): string {
  return JSON.stringify(
    GetContactResponseData$outboundSchema.parse(getContactResponseData),
  );
}

export function getContactResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponseData' from JSON`,
  );
}

/** @internal */
export const GetContactResponse$inboundSchema: z.ZodType<
  GetContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetContactResponseData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetContactResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: GetContactResponseData$Outbound;
};

/** @internal */
export const GetContactResponse$outboundSchema: z.ZodType<
  GetContactResponse$Outbound,
  z.ZodTypeDef,
  GetContactResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetContactResponseData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponse$ {
  /** @deprecated use `GetContactResponse$inboundSchema` instead. */
  export const inboundSchema = GetContactResponse$inboundSchema;
  /** @deprecated use `GetContactResponse$outboundSchema` instead. */
  export const outboundSchema = GetContactResponse$outboundSchema;
  /** @deprecated use `GetContactResponse$Outbound` instead. */
  export type Outbound = GetContactResponse$Outbound;
}

export function getContactResponseToJSON(
  getContactResponse: GetContactResponse,
): string {
  return JSON.stringify(
    GetContactResponse$outboundSchema.parse(getContactResponse),
  );
}

export function getContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponse' from JSON`,
  );
}
