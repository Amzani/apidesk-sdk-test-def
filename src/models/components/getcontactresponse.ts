/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Contact,
  Contact$inboundSchema,
  Contact$Outbound,
  Contact$outboundSchema,
} from "./contact.js";

/**
 * Contact
 */
export type GetContactResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the GET request, such as 200 for success or 404 if the contact is not found. It helps in determining the outcome of the API call and handling responses accordingly.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'OK' for a successful request or 'Not Found' if the contact does not exist. It complements the status code by offering a more descriptive context.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the contact information is retrieved. This string uniquely identifies the service within the Apideck ecosystem, ensuring that the data source is clearly specified in the response.
   */
  service: string;
  /**
   * The name of the unified API resource accessed by this operation. This string indicates the type of resource, such as 'contact', that the GET request is interacting with, providing clarity on the data structure being returned.
   */
  resource: string;
  /**
   * The specific operation performed by the API call, represented as a string. In this context, it indicates the 'contactsOne' operation, which fetches detailed information about a specific contact. This helps in understanding the action taken by the API request.
   */
  operation: string;
  /**
   * This object contains all the detailed information about the contact retrieved from the CRM system. It serves as the main container for the contact's attributes, ensuring that all related data is organized under this single property. The structure of this object allows for easy access and manipulation of the contact's details within your application.
   */
  data: Contact;
};

/** @internal */
export const GetContactResponse$inboundSchema: z.ZodType<
  GetContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: Contact$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetContactResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Contact$Outbound;
};

/** @internal */
export const GetContactResponse$outboundSchema: z.ZodType<
  GetContactResponse$Outbound,
  z.ZodTypeDef,
  GetContactResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: Contact$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactResponse$ {
  /** @deprecated use `GetContactResponse$inboundSchema` instead. */
  export const inboundSchema = GetContactResponse$inboundSchema;
  /** @deprecated use `GetContactResponse$outboundSchema` instead. */
  export const outboundSchema = GetContactResponse$outboundSchema;
  /** @deprecated use `GetContactResponse$Outbound` instead. */
  export type Outbound = GetContactResponse$Outbound;
}

export function getContactResponseToJSON(
  getContactResponse: GetContactResponse,
): string {
  return JSON.stringify(
    GetContactResponse$outboundSchema.parse(getContactResponse),
  );
}

export function getContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactResponse' from JSON`,
  );
}
