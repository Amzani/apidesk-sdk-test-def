/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateNoteRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the note where the value should be applied. This path must be a valid JSONPath expression, ensuring that the update is accurately targeted to the intended part of the note's data structure.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath location within the note. This can be of any data type, allowing for flexible updates to the note's content, whether it's a string, number, object, or array.
   */
  value?: any | undefined;
};

export type UpdateNoteRequestPassThrough = {
  /**
   * This property identifies the specific service to which the pass_through data should be applied. It is required to ensure that the custom data is correctly routed and processed by the intended service. Must be a valid string representing a service ID.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that this pass-through should apply to. This is particularly useful in scenarios where multiple downstream requests are made in a single Unify call, allowing for precise operation targeting. The value should be a valid string that uniquely identifies the operation within the workflow.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties. This can be used to add custom fields or additional data to the note being updated, providing a way to include extra information that may not be covered by predefined fields. The object can contain any key-value pairs as needed.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. Each object in the array should define a path and a value, enabling precise updates to nested data structures within the note. This is useful for making targeted changes without altering the entire note object.
   */
  extendPaths?: Array<UpdateNoteRequestExtendPaths> | undefined;
};

export type UpdateNoteRequest = {
  /**
   * The title of the note. This field allows you to specify a brief, descriptive heading for the note, helping users quickly identify its content or purpose. It is optional and can be left blank if a title is not necessary for your use case.
   */
  title?: string | null | undefined;
  /**
   * The content of the note. This property holds the main body text of the note, where detailed information or comments are stored. It is optional, allowing flexibility in how much detail you wish to include in the note update.
   */
  content?: string | null | undefined;
  /**
   * The user that owns the note. This property is used to associate the note with a specific user in the CRM, ensuring that ownership and responsibility are clearly defined. It is optional and should be a valid user identifier if provided.
   */
  ownerId?: string | null | undefined;
  /**
   * The contact that is related to the note. Use this property to link the note to a specific contact within the CRM, facilitating easy reference and context. It is optional and should be a valid contact identifier if included.
   */
  contactId?: string | null | undefined;
  /**
   * The company that is related to the note. This field allows you to associate the note with a particular company, providing context and relevance within the CRM. It is optional and should be a valid company identifier if specified.
   */
  companyId?: string | null | undefined;
  /**
   * This property specifies the unique identifier of the opportunity associated with the note. It allows the note to be linked to a specific opportunity within the CRM, providing context and relevance to the note's content. If provided, it must be a valid string that corresponds to an existing opportunity ID.
   */
  opportunityId?: string | null | undefined;
  /**
   * This property specifies the unique identifier of the lead associated with the note. It enables the note to be connected to a particular lead, offering additional context and relevance. If included, it should be a valid string that matches an existing lead ID.
   */
  leadId?: string | null | undefined;
  /**
   * Indicates whether the note is currently active. This boolean flag helps manage the note's visibility and status within the CRM. When set to true, the note is considered active and visible; when false, it may be archived or hidden.
   */
  active?: boolean | null | undefined;
  /**
   * The pass_through property is used to send custom data or modifications specific to a service when updating a note. This allows for flexibility and customization in handling service-specific requirements or data structures. It should be an array containing valid pass_through objects.
   */
  passThrough?: Array<UpdateNoteRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateNoteRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateNoteRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateNoteRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateNoteRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateNoteRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateNoteRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNoteRequestExtendPaths$ {
  /** @deprecated use `UpdateNoteRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateNoteRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateNoteRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateNoteRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateNoteRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateNoteRequestExtendPaths$Outbound;
}

export function updateNoteRequestExtendPathsToJSON(
  updateNoteRequestExtendPaths: UpdateNoteRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateNoteRequestExtendPaths$outboundSchema.parse(
      updateNoteRequestExtendPaths,
    ),
  );
}

export function updateNoteRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNoteRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNoteRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNoteRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateNoteRequestPassThrough$inboundSchema: z.ZodType<
  UpdateNoteRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateNoteRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateNoteRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateNoteRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateNoteRequestPassThrough$outboundSchema: z.ZodType<
  UpdateNoteRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateNoteRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateNoteRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNoteRequestPassThrough$ {
  /** @deprecated use `UpdateNoteRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateNoteRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateNoteRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateNoteRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateNoteRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateNoteRequestPassThrough$Outbound;
}

export function updateNoteRequestPassThroughToJSON(
  updateNoteRequestPassThrough: UpdateNoteRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateNoteRequestPassThrough$outboundSchema.parse(
      updateNoteRequestPassThrough,
    ),
  );
}

export function updateNoteRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNoteRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNoteRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNoteRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateNoteRequest$inboundSchema: z.ZodType<
  UpdateNoteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  pass_through: z.array(
    z.lazy(() => UpdateNoteRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateNoteRequest$Outbound = {
  title?: string | null | undefined;
  content?: string | null | undefined;
  owner_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  active?: boolean | null | undefined;
  pass_through?: Array<UpdateNoteRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateNoteRequest$outboundSchema: z.ZodType<
  UpdateNoteRequest$Outbound,
  z.ZodTypeDef,
  UpdateNoteRequest
> = z.object({
  title: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  passThrough: z.array(
    z.lazy(() => UpdateNoteRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNoteRequest$ {
  /** @deprecated use `UpdateNoteRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateNoteRequest$inboundSchema;
  /** @deprecated use `UpdateNoteRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateNoteRequest$outboundSchema;
  /** @deprecated use `UpdateNoteRequest$Outbound` instead. */
  export type Outbound = UpdateNoteRequest$Outbound;
}

export function updateNoteRequestToJSON(
  updateNoteRequest: UpdateNoteRequest,
): string {
  return JSON.stringify(
    UpdateNoteRequest$outboundSchema.parse(updateNoteRequest),
  );
}

export function updateNoteRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNoteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNoteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNoteRequest' from JSON`,
  );
}
