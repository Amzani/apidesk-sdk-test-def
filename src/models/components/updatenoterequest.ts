/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateNoteRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the note's data structure where the update should be applied. This path must be a valid JSONPath expression and is required for each entry in the extend_paths array to ensure precise data modification.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath within the note's data. This can be of any data type, allowing for flexible updates to the note's content. It is required for each path specified in the extend_paths array to complete the data modification process.
   */
  value?: any | undefined;
};

export type UpdateNoteRequestPassThrough = {
  /**
   * The identifier for the specific service to which the pass_through data should be applied. This is mandatory when using the pass_through property to ensure the data is directed to the correct service integration.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation within the Unify platform. This property is used to associate the pass-through data with a particular operation, especially when multiple downstream requests are involved. It should be a unique string if used, but is not mandatory for all requests.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties within the note. This property can include any key-value pairs needed to enhance or modify the note's data structure. It is optional and should be used when additional customization is required.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. Each object within the array should define a path and a corresponding value to update the note's data precisely. This property is optional and is useful for targeted updates.
   */
  extendPaths?: Array<UpdateNoteRequestExtendPaths> | undefined;
};

export type UpdateNoteRequest = {
  /**
   * The title of the note, used to provide a brief summary or headline for the note's content. This field is optional and can be any string value that effectively summarizes the note's main idea or purpose. It helps users quickly identify the note within the CRM system.
   */
  title?: string | null | undefined;
  /**
   * The main body of the note, containing detailed information or commentary. This field is optional and should be a string that clearly conveys the intended message or information. It is essential for capturing the full context and details of the note.
   */
  content?: string | null | undefined;
  /**
   * The unique identifier of the user who owns the note. This optional field should be a valid user ID within the CRM system, linking the note to its creator or responsible party. It helps in tracking note ownership and accountability.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with the note. This optional field should be a valid contact ID, establishing a relationship between the note and a specific contact within the CRM. It aids in organizing notes by related contacts.
   */
  contactId?: string | null | undefined;
  /**
   * The unique identifier of the company related to the note. This optional field should be a valid company ID, linking the note to a specific company within the CRM. It is useful for associating notes with relevant business entities.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier of the opportunity associated with this note. This field allows you to link the note to a specific opportunity within the CRM, facilitating better organization and retrieval of related information. Ensure the ID corresponds to an existing opportunity record in the system.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with this note. Use this field to connect the note to a particular lead, enhancing the traceability and context of interactions within the CRM. The ID should match an existing lead record.
   */
  leadId?: string | null | undefined;
  /**
   * Indicates whether the note is currently active. Set this to true if the note is active and should be considered in active records, or false if it should be archived or inactive. This helps in filtering notes based on their status.
   */
  active?: boolean | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or modifications when updating the note. This property is useful for passing additional structured data that may be required by specific services integrated with the CRM.
   */
  passThrough?: Array<UpdateNoteRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateNoteRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateNoteRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateNoteRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateNoteRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateNoteRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateNoteRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNoteRequestExtendPaths$ {
  /** @deprecated use `UpdateNoteRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateNoteRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateNoteRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateNoteRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateNoteRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateNoteRequestExtendPaths$Outbound;
}

export function updateNoteRequestExtendPathsToJSON(
  updateNoteRequestExtendPaths: UpdateNoteRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateNoteRequestExtendPaths$outboundSchema.parse(
      updateNoteRequestExtendPaths,
    ),
  );
}

export function updateNoteRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNoteRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNoteRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNoteRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateNoteRequestPassThrough$inboundSchema: z.ZodType<
  UpdateNoteRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateNoteRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateNoteRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateNoteRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateNoteRequestPassThrough$outboundSchema: z.ZodType<
  UpdateNoteRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateNoteRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateNoteRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNoteRequestPassThrough$ {
  /** @deprecated use `UpdateNoteRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateNoteRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateNoteRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateNoteRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateNoteRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateNoteRequestPassThrough$Outbound;
}

export function updateNoteRequestPassThroughToJSON(
  updateNoteRequestPassThrough: UpdateNoteRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateNoteRequestPassThrough$outboundSchema.parse(
      updateNoteRequestPassThrough,
    ),
  );
}

export function updateNoteRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNoteRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNoteRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNoteRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateNoteRequest$inboundSchema: z.ZodType<
  UpdateNoteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  pass_through: z.array(
    z.lazy(() => UpdateNoteRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateNoteRequest$Outbound = {
  title?: string | null | undefined;
  content?: string | null | undefined;
  owner_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  active?: boolean | null | undefined;
  pass_through?: Array<UpdateNoteRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateNoteRequest$outboundSchema: z.ZodType<
  UpdateNoteRequest$Outbound,
  z.ZodTypeDef,
  UpdateNoteRequest
> = z.object({
  title: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  passThrough: z.array(
    z.lazy(() => UpdateNoteRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNoteRequest$ {
  /** @deprecated use `UpdateNoteRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateNoteRequest$inboundSchema;
  /** @deprecated use `UpdateNoteRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateNoteRequest$outboundSchema;
  /** @deprecated use `UpdateNoteRequest$Outbound` instead. */
  export type Outbound = UpdateNoteRequest$Outbound;
}

export function updateNoteRequestToJSON(
  updateNoteRequest: UpdateNoteRequest,
): string {
  return JSON.stringify(
    UpdateNoteRequest$outboundSchema.parse(updateNoteRequest),
  );
}

export function updateNoteRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNoteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNoteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNoteRequest' from JSON`,
  );
}
