/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the activity, represented as a string. This required field specifies the nature of the activity, such as 'meeting', 'call', or 'task', and is crucial for categorizing and processing activities within the CRM system.
 */
export const GetActivityResponseType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * The type of the activity, represented as a string. This required field specifies the nature of the activity, such as 'meeting', 'call', or 'task', and is crucial for categorizing and processing activities within the CRM system.
 */
export type GetActivityResponseType = ClosedEnum<
  typeof GetActivityResponseType
>;

/**
 * Indicates the type of address related to the CRM activity, such as 'billing', 'shipping', or 'home'. This string value helps categorize the address, allowing developers to handle different address types appropriately within their applications.
 */
export const GetActivityResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Indicates the type of address related to the CRM activity, such as 'billing', 'shipping', or 'home'. This string value helps categorize the address, allowing developers to handle different address types appropriately within their applications.
 */
export type GetActivityResponseDataType = ClosedEnum<
  typeof GetActivityResponseDataType
>;

/**
 * An object containing detailed address information for the location of the CRM activity. This may include fields such as street, city, state, and postal code, providing comprehensive location details necessary for navigation or correspondence.
 */
export type GetActivityResponseLocationAddress = {
  /**
   * This property contains the unique identifier for the address associated with the CRM activity. It is a string value that serves as a primary key for referencing the specific address within the system. This ID is crucial for linking the address to the activity and ensuring accurate data retrieval.
   */
  id?: string | null | undefined;
  /**
   * Indicates the type of address related to the CRM activity, such as 'billing', 'shipping', or 'home'. This string value helps categorize the address, allowing developers to handle different address types appropriately within their applications.
   */
  type?: GetActivityResponseDataType | null | undefined;
  /**
   * Represents the full address in a single string format, which may include street, city, state, and postal code. This is particularly useful when APIs do not provide structured address data, enabling developers to display or process the address as a whole.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address, such as a business name or a contact person. This string value provides additional context for the address, making it easier for users to identify or verify the location within the CRM activity details.
   */
  name?: string | null | undefined;
  /**
   * Contains the first line of the address, typically including the street number, street name, and any suite or apartment numbers. This string is essential for accurately mapping or displaying the primary part of the address in applications.
   */
  line1?: string | null | undefined;
  /**
   * The second line of the address, typically used for apartment numbers, suite numbers, or additional address information. This field is optional and may be empty if not applicable. It helps in providing a more precise location for CRM activities.
   */
  line2?: string | null | undefined;
  /**
   * The third line of the address, often used for further address details such as building names or complex identifiers. This optional field can be left blank if not needed, offering additional granularity for location data in CRM activities.
   */
  line3?: string | null | undefined;
  /**
   * The fourth line of the address, which may include any extra address information not covered in the previous lines. This field is optional and may remain empty, providing flexibility in address formatting for CRM activities.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the address, indicating the specific location on a street. This optional field is crucial for pinpointing the exact address in CRM activities, though it may be empty if not provided.
   */
  streetNumber?: string | null | undefined;
  /**
   * The name of the city where the CRM activity is located. This optional field helps in identifying the geographical area of the activity and is typically a non-empty string if the city is known.
   */
  city?: string | null | undefined;
  /**
   * The full name of the state or region where the activity is located. This information is part of the address details and helps in identifying the geographical area of the activity. It is returned as a string and may be empty if not applicable.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code corresponding to the activity's location. This code is used for mail delivery and geographical identification within the address. It is returned as a string and may vary in format depending on the country.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the activity's location, following the ISO 3166-1 alpha-2 standard. This two-letter code identifies the country and is crucial for international address recognition. It is returned as a string and is essential for global applications.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the activity's location, expressed as a decimal number in string format. This value is part of the geographical coordinates that pinpoint the exact location on the Earth's surface. It is useful for mapping and location-based services.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the activity's location, expressed as a decimal number in string format. This value, along with latitude, helps in determining the precise geographical position of the activity. It is essential for navigation and spatial analysis.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality associated with the activity's location address. This field provides geographical context and is useful for regional analysis or reporting. The value is returned as a string and may be empty if not applicable.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the location address of the activity. This information is crucial for identifying the primary point of contact at the specified address. The value is a string and may be empty if no contact is specified.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title (e.g., Mr., Ms., Dr.) of the contact person at the location address. This field helps in formal communication and personalization. The value is a string and may be empty if not provided.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the location address of the activity. This number is essential for direct communication with the contact person or organization at the address. The value is a string formatted according to international standards and may be empty if not available.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the location address of the activity. This field is useful for sending documents via fax to the specified address. The value is a string and may be empty if no fax number is provided.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the location of the CRM activity. This is typically used for communication purposes and is returned as a string. It may be empty if no email is provided for the location.
   */
  email?: string | null | undefined;
  /**
   * The website URL linked to the location of the CRM activity. This string provides a direct link to the location's online presence, if available, and may be empty if no website is specified.
   */
  website?: string | null | undefined;
  /**
   * Additional notes or comments related to the location of the CRM activity. This field is a string that can include any supplementary information that might be relevant to the activity's location.
   */
  notes?: string | null | undefined;
  /**
   * A string representing the row version of the location data, used to track changes and prevent data conflicts. This value is updated with each modification to ensure data integrity during concurrent updates.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Represents the display status of the CRM activity, such as 'busy', 'free', or other custom statuses. This string value is used to convey how the activity should be visually represented in calendars or scheduling interfaces, aiding in user scheduling and planning.
 */
export const GetActivityResponseShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
/**
 * Represents the display status of the CRM activity, such as 'busy', 'free', or other custom statuses. This string value is used to convey how the activity should be visually represented in calendars or scheduling interfaces, aiding in user scheduling and planning.
 */
export type GetActivityResponseShowAs = ClosedEnum<
  typeof GetActivityResponseShowAs
>;

export type GetActivityResponseValue6 = {};

export type GetActivityResponseValue4 = {};

/**
 * The value assigned to the custom field, which can vary in type depending on the field's configuration. This value represents the actual data or setting stored in the custom field, relevant to the CRM activity.
 */
export type GetActivityResponseValue =
  | GetActivityResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<GetActivityResponseValue6>;

export type GetActivityResponseCustomFields = {
  /**
   * A unique string identifier for the custom field associated with the CRM activity. This ID is essential for referencing and managing specific custom fields within the activity record. It is always present and is used to uniquely distinguish each custom field.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, represented as a string. This name helps identify the purpose or type of the custom field within the CRM activity, aiding in understanding its role or content.
   */
  name?: string | null | undefined;
  /**
   * A descriptive text providing more information about the custom field. This description helps clarify the field's purpose or usage within the CRM activity, offering additional context to users.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field, which can vary in type depending on the field's configuration. This value represents the actual data or setting stored in the custom field, relevant to the CRM activity.
   */
  value?:
    | GetActivityResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<GetActivityResponseValue6>
    | null
    | undefined;
};

/**
 * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This optional field provides insight into the attendee's participation level and is useful for planning and logistics.
 */
export const GetActivityResponseStatus = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This optional field provides insight into the attendee's participation level and is useful for planning and logistics.
 */
export type GetActivityResponseStatus = ClosedEnum<
  typeof GetActivityResponseStatus
>;

export type GetActivityResponseAttendees = {
  /**
   * A unique identifier assigned to each attendee within the CRM activity. This string value is used to distinguish individual attendees and is crucial for tracking and managing participant-specific data in the context of the activity.
   */
  id?: string | null | undefined;
  /**
   * The full name of the attendee as recorded in the CRM. This string combines the first, middle, and last names, providing a complete representation of the attendee's identity for display and communication purposes.
   */
  name?: string | null | undefined;
  /**
   * The first name of the attendee, extracted from the full name. This string is used for personalized communications and identification within the CRM activity context.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the attendee, if available. This string provides additional identification detail, helping to differentiate attendees with similar first and last names within the CRM activity.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the attendee, which is part of the full name. This string is essential for formal identification and sorting of attendees in the CRM activity records.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the attendee's name, such as Mr., Ms., or Dr. This field is optional and may be empty if no prefix is applicable. It helps in addressing the attendee formally in communications related to the CRM activity.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the attendee's name, such as Jr., Sr., or III. This optional field may be empty if no suffix is applicable. It is used to accurately represent the attendee's full name in CRM activity records.
   */
  suffix?: string | null | undefined;
  /**
   * The email address of the attendee, used for sending notifications and updates related to the CRM activity. This field is optional but crucial for electronic communication and coordination with the attendee.
   */
  emailAddress?: string | null | undefined;
  /**
   * A boolean value indicating whether the attendee is the organizer of the activity. This field is optional and helps identify the primary contact responsible for the activity's coordination.
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This optional field provides insight into the attendee's participation level and is useful for planning and logistics.
   */
  status?: GetActivityResponseStatus | null | undefined;
  /**
   * The unique identifier for a user associated with the CRM activity. This string value helps in linking the activity to a specific user within the system, facilitating user-specific data retrieval and processing.
   */
  userId?: string | null | undefined;
  /**
   * The unique identifier for a contact associated with the CRM activity. This string value is used to connect the activity to a particular contact, enabling contact-specific data management and integration.
   */
  contactId?: string | null | undefined;
  /**
   * The timestamp indicating the last update made to the attendee's information, formatted in ISO 8601. This helps track changes and maintain an accurate history of modifications for the attendee data.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp marking when the attendee was initially created, formatted in ISO 8601. This provides a historical reference point for when the attendee was added to the CRM activity.
   */
  createdAt?: Date | null | undefined;
};

/**
 * An object containing custom mappings configured for the CRM activity resource. This includes any additional, user-defined fields or settings that extend the default data structure, allowing for tailored data representation and processing.
 */
export type GetActivityResponseCustomMappings = {};

export type GetActivityResponseExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the CRM activity data where a value should be applied. This is essential for developers who need to make targeted modifications or extensions to the data structure.
   */
  path: string;
  /**
   * This property holds the value to be set at a specified path within the CRM activity data structure. It can be of any data type, such as a string, number, object, or array, depending on the context of the activity being retrieved. This flexibility allows developers to access or manipulate specific nested data points within the activity record, ensuring precise data handling and integration.
   */
  value?: any | undefined;
};

export type GetActivityResponsePassThrough = {
  /**
   * The unique identifier for the service associated with this pass-through operation. This string is crucial for routing the request to the correct service within the CRM system, ensuring that the activity data is processed or retrieved accurately.
   */
  serviceId: string;
  /**
   * An optional string identifier for a specific workflow operation related to this pass-through. It is particularly useful when the CRM activity involves multiple downstream requests, allowing for precise tracking and management of each operation.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that can include any additional properties needed to extend the CRM activity data. This allows developers to customize the response with extra information relevant to their specific use case.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. This feature enables developers to apply changes or enhancements to the CRM activity data at precise locations within the JSON structure.
   */
  extendPaths?: Array<GetActivityResponseExtendPaths> | undefined;
};

/**
 * This object contains all the detailed information about the specific CRM activity requested. It serves as the main container for the activity's data, encapsulating various attributes such as ID, date, and duration. This structure allows developers to access and manipulate the activity details efficiently.
 */
export type GetActivityResponseData = {
  /**
   * The unique identifier for the CRM activity, represented as a string. This ID is crucial for distinguishing this specific activity from others within the CRM system. It is often used in subsequent API calls to reference this particular activity.
   */
  id?: string | undefined;
  /**
   * The identifier used by the third-party API to reference the original entity. This string value is essential for integrations where activities are synchronized across different platforms, ensuring consistency and traceability.
   */
  downstreamId?: string | null | undefined;
  /**
   * The date and time when the activity occurred, formatted as a string. This timestamp is vital for chronological sorting and filtering of activities, allowing developers to display or analyze activities based on their occurrence time.
   */
  activityDatetime?: string | null | undefined;
  /**
   * The total duration of the activity measured in seconds. This integer value helps in understanding the length of the activity, which can be useful for time tracking and reporting purposes within the CRM.
   */
  durationSeconds?: number | null | undefined;
  /**
   * The unique identifier of the user associated with this activity. This ID is a string that links the activity to a specific user within the CRM, allowing for tracking and management of user-related activities. It is optional and may not be present if the activity is not user-specific.
   */
  userId?: string | null | undefined;
  /**
   * The unique identifier of the account associated with this activity. This string ID connects the activity to a particular account in the CRM, facilitating the organization and retrieval of account-related activities. It is optional and may be omitted if the activity does not pertain to a specific account.
   */
  accountId?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with this activity. This string serves as a link between the activity and a specific contact in the CRM, enabling detailed tracking of interactions with individual contacts. It is optional and may not be included if the activity is not contact-specific.
   */
  contactId?: string | null | undefined;
  /**
   * The unique identifier of the company associated with this activity. This ID is a string that ties the activity to a specific company within the CRM, aiding in the management and analysis of company-related activities. It is optional and may be absent if the activity is not linked to a particular company.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier of the opportunity associated with this activity. This string ID connects the activity to a specific opportunity in the CRM, allowing for the tracking and evaluation of opportunity-related activities. It is optional and may not be present if the activity does not relate to a specific opportunity.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with this CRM activity. This string value helps in linking the activity to a specific lead, allowing developers to track interactions or engagements related to that lead. Useful for generating reports or insights on lead activities.
   */
  leadId?: string | null | undefined;
  /**
   * The unique identifier of the user or entity that owns this activity. This string value is crucial for determining responsibility and tracking who is managing or has initiated the activity. It helps in assigning tasks and monitoring user performance within the CRM.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier of the marketing campaign associated with this activity. This string value links the activity to a specific campaign, enabling developers to analyze campaign performance and the effectiveness of marketing efforts. It is essential for tracking campaign-related interactions.
   */
  campaignId?: string | null | undefined;
  /**
   * The unique identifier of the case related to this activity. This string value connects the activity to a specific case, which is useful for case management and tracking the progress or resolution of issues. It aids in organizing activities around customer support or service cases.
   */
  caseId?: string | null | undefined;
  /**
   * The unique identifier of the asset associated with this activity. This string value helps in linking the activity to a particular asset, which is important for asset management and tracking usage or maintenance activities. It supports efficient management of physical or digital assets within the CRM.
   */
  assetId?: string | null | undefined;
  /**
   * The unique identifier for the contract associated with this activity. This string value links the activity to a specific contract within the CRM, allowing users to track which contract the activity pertains to. It is optional and may not be present if the activity is not contract-related.
   */
  contractId?: string | null | undefined;
  /**
   * The unique identifier for the product associated with this activity. This string value helps in identifying which product the activity is related to, facilitating product-specific tracking and analysis. It is optional and may not be included if the activity does not involve a product.
   */
  productId?: string | null | undefined;
  /**
   * The unique identifier for the solution associated with this activity. This property is a string that connects the activity to a particular solution, useful for solution-specific reporting and management. It is optional and may be absent if the activity is not linked to a solution.
   */
  solutionId?: string | null | undefined;
  /**
   * The unique identifier for a custom object associated with this activity. This string value allows the activity to be linked to a custom object, providing flexibility in associating activities with various custom-defined entities. It is optional and may not be present if no custom object is related to the activity.
   */
  customObjectId?: string | null | undefined;
  /**
   * The type of the activity, represented as a string. This required field specifies the nature of the activity, such as 'meeting', 'call', or 'task', and is crucial for categorizing and processing activities within the CRM system.
   */
  type: GetActivityResponseType | null;
  /**
   * The title of the activity, representing a brief and clear summary of the CRM activity. This string is used to quickly identify the activity within lists or summaries, aiding users in recognizing the purpose or subject of the activity at a glance.
   */
  title?: string | null | undefined;
  /**
   * A detailed description of the CRM activity, providing additional context and information about what the activity entails. This string can include specifics such as objectives, participants, or any other relevant details that help in understanding the activity's scope and purpose.
   */
  description?: string | null | undefined;
  /**
   * An internal note associated with the CRM activity, intended for internal use to capture additional insights or comments that are not meant for external sharing. This string can be used by team members to document observations or follow-up actions related to the activity.
   */
  note?: string | null | undefined;
  /**
   * The physical or virtual location where the CRM activity takes place. This string provides information about the venue or platform, which can be crucial for logistical planning or virtual meeting setups.
   */
  location?: string | null | undefined;
  /**
   * An object containing detailed address information for the location of the CRM activity. This may include fields such as street, city, state, and postal code, providing comprehensive location details necessary for navigation or correspondence.
   */
  locationAddress?: GetActivityResponseLocationAddress | undefined;
  /**
   * Indicates whether the CRM activity spans the entire day. This boolean value is true if the activity is an all-day event, and false otherwise, helping to schedule and display the activity appropriately.
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Indicates whether the activity is marked as private within the CRM system. A value of 'true' means the activity is private and may have restricted visibility to certain users. This property helps manage access control for sensitive activity data.
   */
  private?: boolean | null | undefined;
  /**
   * Specifies if the activity is classified as a group event. A 'true' value denotes that the activity involves multiple participants or entities. This property is useful for distinguishing between individual and collaborative activities.
   */
  groupEvent?: boolean | null | undefined;
  /**
   * Describes the specific sub-category of the group event, providing additional context about the nature of the activity. This string value helps in categorizing and filtering events based on their sub-types within the CRM.
   */
  eventSubType?: string | null | undefined;
  /**
   * Defines the main category or type of the group event, such as 'meeting' or 'conference'. This string value is essential for understanding the general nature of the group activity and aids in organizing events within the CRM.
   */
  groupEventType?: string | null | undefined;
  /**
   * Indicates whether the activity is a subordinate or dependent activity linked to a parent activity. A 'true' value signifies that this activity is part of a larger sequence or hierarchy of activities, which can be important for tracking related tasks or events.
   */
  child?: boolean | null | undefined;
  /**
   * Indicates whether the CRM activity is archived. This boolean value helps determine if the activity is stored in an archive state, which may affect its visibility and accessibility within the CRM system. Useful for filtering activities based on their archival status.
   */
  archived?: boolean | null | undefined;
  /**
   * Indicates whether the CRM activity has been deleted. This boolean value is crucial for understanding the current state of the activity, as deleted activities are typically not displayed in standard views or reports. It helps in managing and cleaning up activity records.
   */
  deleted?: boolean | null | undefined;
  /**
   * Represents the display status of the CRM activity, such as 'busy', 'free', or other custom statuses. This string value is used to convey how the activity should be visually represented in calendars or scheduling interfaces, aiding in user scheduling and planning.
   */
  showAs?: GetActivityResponseShowAs | null | undefined;
  /**
   * Indicates whether the CRM activity is marked as completed. This boolean value is essential for tracking the progress of activities, allowing users to filter or sort activities based on their completion status. It helps in workflow management and reporting.
   */
  done?: boolean | null | undefined;
  /**
   * The start date and time of the CRM activity, formatted as an ISO 8601 string. This timestamp is critical for scheduling and chronological sorting of activities, providing a precise point in time when the activity is set to begin. It is used in calendar views and reminders.
   */
  startDatetime?: string | null | undefined;
  /**
   * The end date and time of the activity, formatted as an ISO 8601 string. This property indicates when the activity is scheduled to conclude, providing a precise timestamp that can be used for scheduling and time management within the CRM.
   */
  endDatetime?: string | null | undefined;
  /**
   * The duration of the activity in minutes, represented as an integer. This value helps in understanding the length of the activity, which can be crucial for time tracking and reporting purposes.
   */
  durationMinutes?: number | null | undefined;
  /**
   * The date on which the activity is scheduled to occur, formatted as an ISO 8601 date string. This property is essential for identifying the specific day of the activity, aiding in chronological organization and planning.
   */
  activityDate?: string | null | undefined;
  /**
   * The end date of the activity, provided as an ISO 8601 date string. This property specifies the final day of the activity, which is particularly useful for activities spanning multiple days.
   */
  endDate?: string | null | undefined;
  /**
   * A boolean value indicating whether the activity is recurrent. If true, the activity repeats according to a defined schedule, which is important for managing ongoing or repeated tasks within the CRM.
   */
  recurrent?: boolean | undefined;
  /**
   * The reminder_datetime property contains the specific date and time when the reminder for the CRM activity is set to trigger. It is formatted as an ISO 8601 string, allowing developers to easily parse and display the reminder time in their applications. This property is optional and may not be present if no reminder is set for the activity.
   */
  reminderDatetime?: string | null | undefined;
  /**
   * The reminder_set property indicates whether a reminder has been configured for the CRM activity. It returns a boolean value: true if a reminder is set, and false otherwise. This property helps developers quickly determine if an activity has an associated reminder without needing to check additional details.
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The video_conference_url property provides the URL link to join the video conference associated with the CRM activity. It is returned as a string and can be used directly in applications to facilitate quick access to the video meeting. This property is optional and will be absent if no video conference is linked to the activity.
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * The video_conference_id property contains the unique identifier for the video conference linked to the CRM activity. This string value is used to reference the specific video meeting within the system, enabling developers to manage or join the conference programmatically. It is optional and only present if a video conference is associated with the activity.
   */
  videoConferenceId?: string | null | undefined;
  /**
   * The custom_fields property is an array that holds any additional custom data fields associated with the CRM activity. These fields allow for extended metadata and can vary depending on the specific needs of the application or user. This property is optional and provides flexibility for developers to include or process extra information as required.
   */
  customFields?: Array<GetActivityResponseCustomFields> | undefined;
  /**
   * An array containing details of attendees associated with the CRM activity. Each entry in the array represents an individual attendee, including relevant information such as names and contact details, if available.
   */
  attendees?: Array<GetActivityResponseAttendees> | undefined;
  /**
   * An object containing custom mappings configured for the CRM activity resource. This includes any additional, user-defined fields or settings that extend the default data structure, allowing for tailored data representation and processing.
   */
  customMappings?: GetActivityResponseCustomMappings | null | undefined;
  /**
   * The identifier of the user who last modified the activity record. This value is typically a user ID or username, allowing tracking of changes within the CRM. It helps in auditing and understanding the history of modifications to the activity.
   */
  updatedBy?: string | null | undefined;
  /**
   * The identifier of the user who initially created the activity record. This is usually a user ID or username, providing insight into the origin of the activity within the CRM. It is useful for tracking the source of data entries.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the activity was last updated, formatted in ISO 8601. This helps in determining the recency of changes and is crucial for synchronization and data freshness checks.
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp indicating when the activity was originally created, formatted in ISO 8601. This provides a historical reference for the activity's inception and is important for chronological data analysis.
   */
  createdAt?: string | null | undefined;
  /**
   * An array containing service-specific custom data or structured modifications. This property allows for the inclusion of additional metadata or configuration details that are specific to the service integration, enhancing the flexibility of the API response.
   */
  passThrough?: Array<GetActivityResponsePassThrough> | undefined;
};

/**
 * Activity
 */
export type GetActivityResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value helps determine whether the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is essential for error handling and debugging in client applications.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for an unsuccessful one. This string provides a human-readable explanation of the status code, aiding in understanding the outcome of the API call.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the request. This string identifies which service within the Apideck ecosystem handled the API call, crucial for tracking and managing requests across multiple services.
   */
  service: string;
  /**
   * The name of the Unified API resource that was accessed, such as 'activity'. This string indicates the type of resource involved in the operation, helping developers understand the context of the data returned.
   */
  resource: string;
  /**
   * The specific operation performed by the API, such as 'activitiesOne'. This string identifies the action taken, providing clarity on what the API call was intended to do, which is useful for logging and auditing purposes.
   */
  operation: string;
  /**
   * This object contains all the detailed information about the specific CRM activity requested. It serves as the main container for the activity's data, encapsulating various attributes such as ID, date, and duration. This structure allows developers to access and manipulate the activity details efficiently.
   */
  data: GetActivityResponseData;
};

/** @internal */
export const GetActivityResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetActivityResponseType
> = z.nativeEnum(GetActivityResponseType);

/** @internal */
export const GetActivityResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetActivityResponseType
> = GetActivityResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseType$ {
  /** @deprecated use `GetActivityResponseType$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseType$inboundSchema;
  /** @deprecated use `GetActivityResponseType$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseType$outboundSchema;
}

/** @internal */
export const GetActivityResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof GetActivityResponseDataType
> = z.nativeEnum(GetActivityResponseDataType);

/** @internal */
export const GetActivityResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof GetActivityResponseDataType
> = GetActivityResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseDataType$ {
  /** @deprecated use `GetActivityResponseDataType$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseDataType$inboundSchema;
  /** @deprecated use `GetActivityResponseDataType$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseDataType$outboundSchema;
}

/** @internal */
export const GetActivityResponseLocationAddress$inboundSchema: z.ZodType<
  GetActivityResponseLocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(GetActivityResponseDataType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type GetActivityResponseLocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const GetActivityResponseLocationAddress$outboundSchema: z.ZodType<
  GetActivityResponseLocationAddress$Outbound,
  z.ZodTypeDef,
  GetActivityResponseLocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(GetActivityResponseDataType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseLocationAddress$ {
  /** @deprecated use `GetActivityResponseLocationAddress$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseLocationAddress$inboundSchema;
  /** @deprecated use `GetActivityResponseLocationAddress$outboundSchema` instead. */
  export const outboundSchema =
    GetActivityResponseLocationAddress$outboundSchema;
  /** @deprecated use `GetActivityResponseLocationAddress$Outbound` instead. */
  export type Outbound = GetActivityResponseLocationAddress$Outbound;
}

export function getActivityResponseLocationAddressToJSON(
  getActivityResponseLocationAddress: GetActivityResponseLocationAddress,
): string {
  return JSON.stringify(
    GetActivityResponseLocationAddress$outboundSchema.parse(
      getActivityResponseLocationAddress,
    ),
  );
}

export function getActivityResponseLocationAddressFromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponseLocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetActivityResponseLocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponseLocationAddress' from JSON`,
  );
}

/** @internal */
export const GetActivityResponseShowAs$inboundSchema: z.ZodNativeEnum<
  typeof GetActivityResponseShowAs
> = z.nativeEnum(GetActivityResponseShowAs);

/** @internal */
export const GetActivityResponseShowAs$outboundSchema: z.ZodNativeEnum<
  typeof GetActivityResponseShowAs
> = GetActivityResponseShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseShowAs$ {
  /** @deprecated use `GetActivityResponseShowAs$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseShowAs$inboundSchema;
  /** @deprecated use `GetActivityResponseShowAs$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseShowAs$outboundSchema;
}

/** @internal */
export const GetActivityResponseValue6$inboundSchema: z.ZodType<
  GetActivityResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetActivityResponseValue6$Outbound = {};

/** @internal */
export const GetActivityResponseValue6$outboundSchema: z.ZodType<
  GetActivityResponseValue6$Outbound,
  z.ZodTypeDef,
  GetActivityResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseValue6$ {
  /** @deprecated use `GetActivityResponseValue6$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseValue6$inboundSchema;
  /** @deprecated use `GetActivityResponseValue6$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseValue6$outboundSchema;
  /** @deprecated use `GetActivityResponseValue6$Outbound` instead. */
  export type Outbound = GetActivityResponseValue6$Outbound;
}

export function getActivityResponseValue6ToJSON(
  getActivityResponseValue6: GetActivityResponseValue6,
): string {
  return JSON.stringify(
    GetActivityResponseValue6$outboundSchema.parse(getActivityResponseValue6),
  );
}

export function getActivityResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActivityResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponseValue6' from JSON`,
  );
}

/** @internal */
export const GetActivityResponseValue4$inboundSchema: z.ZodType<
  GetActivityResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetActivityResponseValue4$Outbound = {};

/** @internal */
export const GetActivityResponseValue4$outboundSchema: z.ZodType<
  GetActivityResponseValue4$Outbound,
  z.ZodTypeDef,
  GetActivityResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseValue4$ {
  /** @deprecated use `GetActivityResponseValue4$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseValue4$inboundSchema;
  /** @deprecated use `GetActivityResponseValue4$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseValue4$outboundSchema;
  /** @deprecated use `GetActivityResponseValue4$Outbound` instead. */
  export type Outbound = GetActivityResponseValue4$Outbound;
}

export function getActivityResponseValue4ToJSON(
  getActivityResponseValue4: GetActivityResponseValue4,
): string {
  return JSON.stringify(
    GetActivityResponseValue4$outboundSchema.parse(getActivityResponseValue4),
  );
}

export function getActivityResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActivityResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponseValue4' from JSON`,
  );
}

/** @internal */
export const GetActivityResponseValue$inboundSchema: z.ZodType<
  GetActivityResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetActivityResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => GetActivityResponseValue6$inboundSchema)),
]);

/** @internal */
export type GetActivityResponseValue$Outbound =
  | GetActivityResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<GetActivityResponseValue6$Outbound>;

/** @internal */
export const GetActivityResponseValue$outboundSchema: z.ZodType<
  GetActivityResponseValue$Outbound,
  z.ZodTypeDef,
  GetActivityResponseValue
> = z.union([
  z.lazy(() => GetActivityResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => GetActivityResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseValue$ {
  /** @deprecated use `GetActivityResponseValue$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseValue$inboundSchema;
  /** @deprecated use `GetActivityResponseValue$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseValue$outboundSchema;
  /** @deprecated use `GetActivityResponseValue$Outbound` instead. */
  export type Outbound = GetActivityResponseValue$Outbound;
}

export function getActivityResponseValueToJSON(
  getActivityResponseValue: GetActivityResponseValue,
): string {
  return JSON.stringify(
    GetActivityResponseValue$outboundSchema.parse(getActivityResponseValue),
  );
}

export function getActivityResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActivityResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponseValue' from JSON`,
  );
}

/** @internal */
export const GetActivityResponseCustomFields$inboundSchema: z.ZodType<
  GetActivityResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => GetActivityResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => GetActivityResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type GetActivityResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | GetActivityResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<GetActivityResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const GetActivityResponseCustomFields$outboundSchema: z.ZodType<
  GetActivityResponseCustomFields$Outbound,
  z.ZodTypeDef,
  GetActivityResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => GetActivityResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => GetActivityResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseCustomFields$ {
  /** @deprecated use `GetActivityResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseCustomFields$inboundSchema;
  /** @deprecated use `GetActivityResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseCustomFields$outboundSchema;
  /** @deprecated use `GetActivityResponseCustomFields$Outbound` instead. */
  export type Outbound = GetActivityResponseCustomFields$Outbound;
}

export function getActivityResponseCustomFieldsToJSON(
  getActivityResponseCustomFields: GetActivityResponseCustomFields,
): string {
  return JSON.stringify(
    GetActivityResponseCustomFields$outboundSchema.parse(
      getActivityResponseCustomFields,
    ),
  );
}

export function getActivityResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActivityResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const GetActivityResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetActivityResponseStatus
> = z.nativeEnum(GetActivityResponseStatus);

/** @internal */
export const GetActivityResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetActivityResponseStatus
> = GetActivityResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseStatus$ {
  /** @deprecated use `GetActivityResponseStatus$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseStatus$inboundSchema;
  /** @deprecated use `GetActivityResponseStatus$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseStatus$outboundSchema;
}

/** @internal */
export const GetActivityResponseAttendees$inboundSchema: z.ZodType<
  GetActivityResponseAttendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(GetActivityResponseStatus$inboundSchema).optional(),
  user_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
    "user_id": "userId",
    "contact_id": "contactId",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
  });
});

/** @internal */
export type GetActivityResponseAttendees$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
  user_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const GetActivityResponseAttendees$outboundSchema: z.ZodType<
  GetActivityResponseAttendees$Outbound,
  z.ZodTypeDef,
  GetActivityResponseAttendees
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(GetActivityResponseStatus$outboundSchema).optional(),
  userId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
    userId: "user_id",
    contactId: "contact_id",
    updatedAt: "updated_at",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseAttendees$ {
  /** @deprecated use `GetActivityResponseAttendees$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseAttendees$inboundSchema;
  /** @deprecated use `GetActivityResponseAttendees$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseAttendees$outboundSchema;
  /** @deprecated use `GetActivityResponseAttendees$Outbound` instead. */
  export type Outbound = GetActivityResponseAttendees$Outbound;
}

export function getActivityResponseAttendeesToJSON(
  getActivityResponseAttendees: GetActivityResponseAttendees,
): string {
  return JSON.stringify(
    GetActivityResponseAttendees$outboundSchema.parse(
      getActivityResponseAttendees,
    ),
  );
}

export function getActivityResponseAttendeesFromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponseAttendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActivityResponseAttendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponseAttendees' from JSON`,
  );
}

/** @internal */
export const GetActivityResponseCustomMappings$inboundSchema: z.ZodType<
  GetActivityResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetActivityResponseCustomMappings$Outbound = {};

/** @internal */
export const GetActivityResponseCustomMappings$outboundSchema: z.ZodType<
  GetActivityResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  GetActivityResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseCustomMappings$ {
  /** @deprecated use `GetActivityResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseCustomMappings$inboundSchema;
  /** @deprecated use `GetActivityResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    GetActivityResponseCustomMappings$outboundSchema;
  /** @deprecated use `GetActivityResponseCustomMappings$Outbound` instead. */
  export type Outbound = GetActivityResponseCustomMappings$Outbound;
}

export function getActivityResponseCustomMappingsToJSON(
  getActivityResponseCustomMappings: GetActivityResponseCustomMappings,
): string {
  return JSON.stringify(
    GetActivityResponseCustomMappings$outboundSchema.parse(
      getActivityResponseCustomMappings,
    ),
  );
}

export function getActivityResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActivityResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const GetActivityResponseExtendPaths$inboundSchema: z.ZodType<
  GetActivityResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type GetActivityResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const GetActivityResponseExtendPaths$outboundSchema: z.ZodType<
  GetActivityResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  GetActivityResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseExtendPaths$ {
  /** @deprecated use `GetActivityResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseExtendPaths$inboundSchema;
  /** @deprecated use `GetActivityResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseExtendPaths$outboundSchema;
  /** @deprecated use `GetActivityResponseExtendPaths$Outbound` instead. */
  export type Outbound = GetActivityResponseExtendPaths$Outbound;
}

export function getActivityResponseExtendPathsToJSON(
  getActivityResponseExtendPaths: GetActivityResponseExtendPaths,
): string {
  return JSON.stringify(
    GetActivityResponseExtendPaths$outboundSchema.parse(
      getActivityResponseExtendPaths,
    ),
  );
}

export function getActivityResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActivityResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const GetActivityResponsePassThrough$inboundSchema: z.ZodType<
  GetActivityResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => GetActivityResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type GetActivityResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<GetActivityResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const GetActivityResponsePassThrough$outboundSchema: z.ZodType<
  GetActivityResponsePassThrough$Outbound,
  z.ZodTypeDef,
  GetActivityResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => GetActivityResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponsePassThrough$ {
  /** @deprecated use `GetActivityResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponsePassThrough$inboundSchema;
  /** @deprecated use `GetActivityResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponsePassThrough$outboundSchema;
  /** @deprecated use `GetActivityResponsePassThrough$Outbound` instead. */
  export type Outbound = GetActivityResponsePassThrough$Outbound;
}

export function getActivityResponsePassThroughToJSON(
  getActivityResponsePassThrough: GetActivityResponsePassThrough,
): string {
  return JSON.stringify(
    GetActivityResponsePassThrough$outboundSchema.parse(
      getActivityResponsePassThrough,
    ),
  );
}

export function getActivityResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActivityResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const GetActivityResponseData$inboundSchema: z.ZodType<
  GetActivityResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  downstream_id: z.nullable(z.string()).optional(),
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(GetActivityResponseType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() =>
    GetActivityResponseLocationAddress$inboundSchema
  ).optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(GetActivityResponseShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  duration_minutes: z.nullable(z.number().int()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => GetActivityResponseCustomFields$inboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => GetActivityResponseAttendees$inboundSchema))
    .optional(),
  custom_mappings: z.nullable(
    z.lazy(() => GetActivityResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => GetActivityResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "downstream_id": "downstreamId",
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "duration_minutes": "durationMinutes",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type GetActivityResponseData$Outbound = {
  id?: string | undefined;
  downstream_id?: string | null | undefined;
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: GetActivityResponseLocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  duration_minutes?: number | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<GetActivityResponseCustomFields$Outbound> | undefined;
  attendees?: Array<GetActivityResponseAttendees$Outbound> | undefined;
  custom_mappings?:
    | GetActivityResponseCustomMappings$Outbound
    | null
    | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<GetActivityResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const GetActivityResponseData$outboundSchema: z.ZodType<
  GetActivityResponseData$Outbound,
  z.ZodTypeDef,
  GetActivityResponseData
> = z.object({
  id: z.string().optional(),
  downstreamId: z.nullable(z.string()).optional(),
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(GetActivityResponseType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() =>
    GetActivityResponseLocationAddress$outboundSchema
  ).optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(GetActivityResponseShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  durationMinutes: z.nullable(z.number().int()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => GetActivityResponseCustomFields$outboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => GetActivityResponseAttendees$outboundSchema))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => GetActivityResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => GetActivityResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    downstreamId: "downstream_id",
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    durationMinutes: "duration_minutes",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponseData$ {
  /** @deprecated use `GetActivityResponseData$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponseData$inboundSchema;
  /** @deprecated use `GetActivityResponseData$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponseData$outboundSchema;
  /** @deprecated use `GetActivityResponseData$Outbound` instead. */
  export type Outbound = GetActivityResponseData$Outbound;
}

export function getActivityResponseDataToJSON(
  getActivityResponseData: GetActivityResponseData,
): string {
  return JSON.stringify(
    GetActivityResponseData$outboundSchema.parse(getActivityResponseData),
  );
}

export function getActivityResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActivityResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponseData' from JSON`,
  );
}

/** @internal */
export const GetActivityResponse$inboundSchema: z.ZodType<
  GetActivityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetActivityResponseData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetActivityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: GetActivityResponseData$Outbound;
};

/** @internal */
export const GetActivityResponse$outboundSchema: z.ZodType<
  GetActivityResponse$Outbound,
  z.ZodTypeDef,
  GetActivityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetActivityResponseData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetActivityResponse$ {
  /** @deprecated use `GetActivityResponse$inboundSchema` instead. */
  export const inboundSchema = GetActivityResponse$inboundSchema;
  /** @deprecated use `GetActivityResponse$outboundSchema` instead. */
  export const outboundSchema = GetActivityResponse$outboundSchema;
  /** @deprecated use `GetActivityResponse$Outbound` instead. */
  export type Outbound = GetActivityResponse$Outbound;
}

export function getActivityResponseToJSON(
  getActivityResponse: GetActivityResponse,
): string {
  return JSON.stringify(
    GetActivityResponse$outboundSchema.parse(getActivityResponse),
  );
}

export function getActivityResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetActivityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetActivityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetActivityResponse' from JSON`,
  );
}
