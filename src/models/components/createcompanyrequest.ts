/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the currency in which financial transactions are conducted for the company. This should be a valid ISO 4217 currency code, such as 'USD' for United States Dollar or 'EUR' for Euro. It helps in standardizing financial data across the CRM system.
 */
export const Currency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Specifies the currency in which financial transactions are conducted for the company. This should be a valid ISO 4217 currency code, such as 'USD' for United States Dollar or 'EUR' for Euro. It helps in standardizing financial data across the CRM system.
 */
export type Currency = ClosedEnum<typeof Currency>;

/**
 * Indicates the type of bank account, such as checking, savings, or business. This classification helps in managing the company's financial accounts appropriately within the CRM. The account type should be specified as recognized by the bank.
 */
export const AccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * Indicates the type of bank account, such as checking, savings, or business. This classification helps in managing the company's financial accounts appropriately within the CRM. The account type should be specified as recognized by the bank.
 */
export type AccountType = ClosedEnum<typeof AccountType>;

/**
 * Specifies the currency type for the company's bank account transactions. Must be a valid ISO 4217 currency code, such as 'USD' for US Dollars or 'EUR' for Euros. This ensures that all financial data is accurately recorded and processed in the correct currency.
 */
export const CreateCompanyRequestCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Specifies the currency type for the company's bank account transactions. Must be a valid ISO 4217 currency code, such as 'USD' for US Dollars or 'EUR' for Euros. This ensures that all financial data is accurately recorded and processed in the correct currency.
 */
export type CreateCompanyRequestCurrency = ClosedEnum<
  typeof CreateCompanyRequestCurrency
>;

export type BankAccounts = {
  /**
   * Specifies the name of the bank associated with the company's account. This property is used to identify the financial institution where the account is held, aiding in accurate financial tracking and management within the CRM. It should be a valid bank name as recognized by financial institutions.
   */
  bankName?: string | null | undefined;
  /**
   * Represents the unique number assigned to the company's bank account. This is crucial for transactions and financial operations, ensuring funds are directed to the correct account. The account number must be formatted according to the bank's standards, typically a string of digits.
   */
  accountNumber?: string | null | undefined;
  /**
   * Denotes the name under which the bank account was opened. This property helps verify the account's ownership and should match the name registered with the bank. It is essential for ensuring that transactions are processed under the correct account holder.
   */
  accountName?: string | null | undefined;
  /**
   * Indicates the type of bank account, such as checking, savings, or business. This classification helps in managing the company's financial accounts appropriately within the CRM. The account type should be specified as recognized by the bank.
   */
  accountType?: AccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN) used for international transactions. This property ensures that the company's bank account can be identified globally, facilitating cross-border financial operations. The IBAN must be formatted according to international banking standards.
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC) is used to uniquely identify a bank during international transactions. It should be a valid BIC format, typically 8 or 11 characters long, consisting of both letters and numbers. This property helps ensure that the companyâ€™s bank details are correctly recorded for international financial operations.
   */
  bic?: string | null | undefined;
  /**
   * The routing number is a nine-digit code essential for identifying a financial institution in the United States. It is required for processing domestic wire transfers and electronic payments. Including this ensures accurate routing of funds to the company's bank account within the U.S. financial system.
   */
  routingNumber?: string | null | undefined;
  /**
   * The BSB number is a 6-digit code used to identify the branch of an Australian or New Zealand bank. It is crucial for processing domestic transactions within these countries. Providing this ensures that payments are directed to the correct branch of the company's bank.
   */
  bsbNumber?: string | null | undefined;
  /**
   * The branch identifier uniquely identifies a specific branch of a bank or financial institution. This property is important for ensuring that transactions are accurately directed to the correct branch, especially in regions where branch-specific codes are used.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * The bank code is assigned by a central authority to identify banks within a country. It is used to facilitate the correct routing of transactions to the company's bank. This property is essential for ensuring that the company's banking details are accurately captured and used in financial operations.
   */
  bankCode?: string | null | undefined;
  /**
   * Specifies the currency type for the company's bank account transactions. Must be a valid ISO 4217 currency code, such as 'USD' for US Dollars or 'EUR' for Euros. This ensures that all financial data is accurately recorded and processed in the correct currency.
   */
  currency?: CreateCompanyRequestCurrency | null | undefined;
};

/**
 * Describes the category or purpose of the website, such as 'corporate', 'e-commerce', or 'blog'. This helps in classifying the website's role within the company's digital strategy and is useful for targeted marketing and analytics.
 */
export const CreateCompanyRequestWebsitesType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Describes the category or purpose of the website, such as 'corporate', 'e-commerce', or 'blog'. This helps in classifying the website's role within the company's digital strategy and is useful for targeted marketing and analytics.
 */
export type CreateCompanyRequestWebsitesType = ClosedEnum<
  typeof CreateCompanyRequestWebsitesType
>;

export type Websites = {
  /**
   * A unique identifier for each website entry in the company's list of websites. This ID is crucial for differentiating between multiple websites and managing them individually within the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The full URL of the company's website, which must be a valid and reachable web address. This is a required field as it provides a direct link to the company's online presence, essential for digital engagement and verification.
   */
  url: string;
  /**
   * Describes the category or purpose of the website, such as 'corporate', 'e-commerce', or 'blog'. This helps in classifying the website's role within the company's digital strategy and is useful for targeted marketing and analytics.
   */
  type?: CreateCompanyRequestWebsitesType | null | undefined;
};

/**
 * Specifies the type of address, such as 'billing', 'shipping', or 'office'. This helps categorize the address for specific business functions and should be a predefined string that matches the company's address type categories.
 */
export const CreateCompanyRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of address, such as 'billing', 'shipping', or 'office'. This helps categorize the address for specific business functions and should be a predefined string that matches the company's address type categories.
 */
export type CreateCompanyRequestType = ClosedEnum<
  typeof CreateCompanyRequestType
>;

export type Addresses = {
  /**
   * A unique identifier for each address object within the addresses array. This ID is used to distinguish between different addresses and is particularly useful for updates or deletions of specific addresses. It should be a valid UUID or a similar unique string format.
   */
  id?: string | null | undefined;
  /**
   * Specifies the type of address, such as 'billing', 'shipping', or 'office'. This helps categorize the address for specific business functions and should be a predefined string that matches the company's address type categories.
   */
  type?: CreateCompanyRequestType | null | undefined;
  /**
   * The full address in a single string format, used when structured address data is not available. This should include all necessary address components like street, city, and postal code, formatted as a single line of text.
   */
  string?: string | null | undefined;
  /**
   * A descriptive name for the address, such as 'Headquarters' or 'Main Office'. This helps identify the purpose or location of the address within the company's operations and should be a clear, concise label.
   */
  name?: string | null | undefined;
  /**
   * The primary address line, typically including the street number, street name, and any suite or apartment number. This field helps identify the main location of the company and should be formatted as a standard address line.
   */
  line1?: string | null | undefined;
  /**
   * An additional address line for supplementary information such as building name or floor number. This field is optional and can be used to provide more detailed location data if necessary.
   */
  line2?: string | null | undefined;
  /**
   * A third address line for any extra address details that do not fit in the first two lines. This is optional and can be used for extended address information.
   */
  line3?: string | null | undefined;
  /**
   * A fourth address line for further address details, allowing for comprehensive address information. This is optional and typically used for very detailed address specifications.
   */
  line4?: string | null | undefined;
  /**
   * The specific street number of the company's address. This field is part of the primary address line and is crucial for precise location identification. It should be formatted as a numeric or alphanumeric string, depending on local address conventions.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city where the company is located. This field helps in geographically categorizing the company within the CRM system. It should be a valid city name and is used for location-based operations and reporting.
   */
  city?: string | null | undefined;
  /**
   * The state or region where the company is situated. This information is crucial for regional analysis and reporting within the CRM. It should be a valid state name or abbreviation, depending on the country's conventions.
   */
  state?: string | null | undefined;
  /**
   * The postal code corresponding to the company's address. This field is used for precise location identification and mail delivery purposes. It should follow the postal code format of the respective country.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the company's location, following the ISO 3166-1 alpha-2 standard. This code is essential for international operations and ensures consistency in country identification across the CRM system.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the company's address. This geographic coordinate is used for mapping and spatial analysis within the CRM. It should be a valid latitude value, typically in decimal degrees.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the company's address. This property is used to specify the geographical location of the company, which can be important for mapping and location-based services. It should be a valid string representation of a longitude value, typically ranging from -180 to 180 degrees.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality of the company's address. This field helps in identifying the specific administrative region within a state or country where the company is located. It is useful for regional segmentation and reporting within the CRM system.
   */
  county?: string | null | undefined;
  /**
   * The full name of the primary contact person at the company's address. This property is essential for personalizing communications and ensuring that correspondence is directed to the correct individual. It should be a valid string containing the contact's first and last name.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title of the contact person at the company's address, such as Mr., Ms., or Dr. This property is used to address the contact person appropriately in communications and should match the contact's preferred form of address.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the company's address. This property is crucial for direct communication with the company and should be formatted according to international standards, including the country code if applicable.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the company's address. This optional field should be a valid fax number format, allowing the CRM to store and manage fax communication details for the company. Useful for companies that still utilize fax for official communications.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the company's address. This optional field should be a valid email format, enabling the CRM to send and receive email communications related to the company. Essential for maintaining contact through digital correspondence.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the company's address. This optional field should be a valid URL format, providing a direct link to the company's online presence. Useful for accessing more information about the company directly from the CRM.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the company's address. This optional field allows for any extra information or comments that might be relevant to the address, aiding in better context and understanding of the company's location details.
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to track updates to the address object and prevent data conflicts. This optional field is incremented with each update, ensuring data integrity by detecting concurrent modifications. Essential for maintaining accurate and up-to-date address information in the CRM.
   */
  rowVersion?: string | null | undefined;
};

export type SocialLinks = {
  /**
   * A unique identifier for each social link entry. This ID is used to distinguish between different social media profiles within the company's record. While not required, providing an ID can help in managing and updating specific social links efficiently.
   */
  id?: string | null | undefined;
  /**
   * The full URL of the company's social media profile. This must be a valid URL format, such as 'https://www.twitter.com/apideck', and is required to ensure accurate linking to the company's online presence. This property is crucial for integrating social media data into the CRM.
   */
  url: string;
  /**
   * Specifies the type of social media platform, such as 'twitter' or 'linkedin'. This helps categorize the social link and is useful for filtering and organizing the company's social media data. Although optional, it enhances the clarity of the social media profile information.
   */
  type?: string | null | undefined;
};

/**
 * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in organizing and identifying the purpose of each phone number associated with the company. It is optional and can be left blank if categorization is not needed.
 */
export const CreateCompanyRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in organizing and identifying the purpose of each phone number associated with the company. It is optional and can be left blank if categorization is not needed.
 */
export type CreateCompanyRequestPhoneNumbersType = ClosedEnum<
  typeof CreateCompanyRequestPhoneNumbersType
>;

export type PhoneNumbers = {
  /**
   * A unique identifier for the phone number entry within the company's contact information. This ID is used to distinguish between multiple phone numbers associated with the same company, ensuring accurate data management and retrieval.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, such as '+1' for the United States. This code is essential for making international calls and should be included to ensure the phone number is correctly formatted and dialable from outside the country.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code for the phone number, like '323' for Los Angeles. This code helps in routing calls to the correct geographic area and should be provided to ensure the phone number is complete and valid within its region.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number for the company, excluding country and area codes. This number is required and must be a valid sequence of digits that can be dialed locally within the area specified by the area code.
   */
  number: string;
  /**
   * An optional extension number for reaching specific departments or individuals within the company. This extension should be numeric and is used to direct calls internally once the main phone number is reached.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in organizing and identifying the purpose of each phone number associated with the company. It is optional and can be left blank if categorization is not needed.
   */
  type?: CreateCompanyRequestPhoneNumbersType | null | undefined;
};

/**
 * Defines the nature of the email address, such as 'personal', 'work', or 'support'. This classification aids in understanding the context and intended use of each email address. It is optional and can be omitted if not applicable.
 */
export const CreateCompanyRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the nature of the email address, such as 'personal', 'work', or 'support'. This classification aids in understanding the context and intended use of each email address. It is optional and can be omitted if not applicable.
 */
export type CreateCompanyRequestEmailsType = ClosedEnum<
  typeof CreateCompanyRequestEmailsType
>;

export type Emails = {
  /**
   * A unique identifier for each email address entry within the company's email array. This ID is used to distinguish between different email records, facilitating updates and management of email information. It is optional and can be auto-generated if not provided.
   */
  id?: string | null | undefined;
  /**
   * The actual email address used for communication with the company. This field is mandatory and must be a valid email format to ensure proper delivery of messages. It serves as a primary contact method within the CRM system.
   */
  email: string | null;
  /**
   * Defines the nature of the email address, such as 'personal', 'work', or 'support'. This classification aids in understanding the context and intended use of each email address. It is optional and can be omitted if not applicable.
   */
  type?: CreateCompanyRequestEmailsType | null | undefined;
};

/**
 * Defines the type of company record being added. This object may include additional attributes that specify the category or classification of the company within the CRM system. It is optional and can be omitted if the company type is not relevant to the operation.
 */
export type CompanyRowType = {
  /**
   * A unique identifier for the company type. This string should be a valid UUID or another unique format that distinguishes the company type within the CRM. It is optional and used when specifying a particular type of company is necessary.
   */
  id?: string | null | undefined;
  /**
   * The name of the company type. This string should clearly describe the category or classification of the company, such as 'Supplier' or 'Client'. It is optional and helps in categorizing the company within the CRM system.
   */
  name?: string | null | undefined;
};

export type Six = {};

export type Four = {};

/**
 * The actual data or content stored in the custom field for the company. This value can vary depending on the custom field's purpose and should be formatted according to the field's requirements. It is essential for capturing specific information that standard fields do not cover.
 */
export type Value =
  | Four
  | string
  | number
  | boolean
  | Array<string>
  | Array<Six>;

export type CustomFields = {
  /**
   * A mandatory unique identifier for each custom field. This string must be a valid UUID or another unique format that ensures each custom field is distinct within the CRM system. It is crucial for linking specific custom data to the company record.
   */
  id: string | null;
  /**
   * The name assigned to a custom field within the company record. This allows for additional, user-defined data to be associated with the company, enhancing the flexibility of data management. It should be a descriptive string that clearly identifies the custom field's purpose.
   */
  name?: string | null | undefined;
  /**
   * A detailed explanation of what the custom field represents or is used for. This helps users understand the context and relevance of the custom field within the company record. It should provide enough information to clarify the field's intended use.
   */
  description?: string | null | undefined;
  /**
   * The actual data or content stored in the custom field for the company. This value can vary depending on the custom field's purpose and should be formatted according to the field's requirements. It is essential for capturing specific information that standard fields do not cover.
   */
  value?:
    | Four
    | string
    | number
    | boolean
    | Array<string>
    | Array<Six>
    | null
    | undefined;
};

export type ExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where the value should be applied. This property is mandatory and must be a valid JSONPath expression, ensuring precise data manipulation within the extend_paths array.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath within the data structure. This property is required and can be of any data type, allowing for flexible data updates in the extend_paths array. It must be compatible with the data structure at the specified path.
   */
  value?: any | undefined;
};

export type PassThrough = {
  /**
   * A mandatory identifier for the service to which the pass_through data should be applied. This string must match the service ID expected by the target service, ensuring that the custom data is processed correctly.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation to which this pass-through should be applied. This property is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise tracking and management of each operation. If provided, it must be a valid string that uniquely identifies the operation within the workflow.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties. This property can include any key-value pairs necessary for the operation, enabling developers to customize the request to meet specific needs. It should be structured as a valid JSON object.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. Each object within the array should define a path and a corresponding value, facilitating targeted updates to the data structure. This property must be a valid JSON array containing objects with defined paths and values.
   */
  extendPaths?: Array<ExtendPaths> | undefined;
};

export type CreateCompanyRequest = {
  /**
   * The official registered business name for the new company record. Must be a non-empty string that matches the company's legal documentation. This identifier will be used across the CRM system for all company-related operations.
   */
  name: string | null;
  /**
   * The unique identifier of the user or entity that owns the company record. This field is optional but can be used to assign ownership within the CRM, facilitating user-specific management and access control.
   */
  ownerId?: string | null | undefined;
  /**
   * A URL pointing to the company's logo or representative image. This optional field should be a valid URL format and can enhance the visual representation of the company within the CRM interface.
   */
  image?: string | null | undefined;
  /**
   * A brief overview or summary of the company's activities, mission, or services. This optional field provides context and additional information about the company, aiding in better understanding and categorization within the CRM.
   */
  description?: string | null | undefined;
  /**
   * The company's VAT (Value Added Tax) number, used for tax identification purposes. This optional field should be a valid VAT number format and is crucial for companies operating in regions where VAT is applicable.
   */
  vatNumber?: string | null | undefined;
  /**
   * Specifies the currency in which financial transactions are conducted for the company. This should be a valid ISO 4217 currency code, such as 'USD' for United States Dollar or 'EUR' for Euro. It helps in standardizing financial data across the CRM system.
   */
  currency?: Currency | null | undefined;
  /**
   * Indicates the current operational status of the company within the CRM. This could include statuses like 'active', 'inactive', or 'pending'. It helps in categorizing and managing companies based on their engagement level.
   */
  status?: string | null | undefined;
  /**
   * The fax number associated with the company, used for sending and receiving documents. This should be a valid phone number format, including country and area codes if applicable. It facilitates traditional communication methods within the CRM.
   */
  fax?: string | null | undefined;
  /**
   * Represents the total annual revenue generated by the company, expressed in the specified currency. This should be a numeric string that accurately reflects the company's financial performance. It is crucial for financial analysis and reporting within the CRM.
   */
  annualRevenue?: string | null | undefined;
  /**
   * Denotes the total number of employees working at the company. This should be a numeric string that provides insight into the company's size and operational capacity. It aids in resource allocation and workforce management within the CRM.
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * Specifies the business sector or category the company operates within. This information helps categorize the company within the CRM for better organization and reporting. Accepts any string value representing a recognized industry type.
   */
  industry?: string | null | undefined;
  /**
   * Defines the ownership structure of the company, such as 'private', 'public', or 'government'. This property aids in understanding the company's governance and legal structure, which can be important for compliance and reporting purposes. Accepts any string value that accurately describes the ownership type.
   */
  ownership?: string | null | undefined;
  /**
   * A unique identifier assigned to the company for tax reporting purposes. This number is crucial for ensuring compliance with tax regulations and is used in financial transactions and reporting. Must be a valid string that conforms to the tax authority's format requirements.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * Identifies the company as a payee for tax purposes, facilitating transactions and compliance with tax obligations. This number is essential for financial operations involving payments and deductions. Should be a valid string that meets the format specified by the relevant tax authority.
   */
  payeeNumber?: string | null | undefined;
  /**
   * The Australian Business Number (ABN) or Tax File Number (TFN) required for business operations and tax purposes in Australia. This identifier is necessary for legal and financial activities within the country. Must be a valid string that adheres to the Australian government's format standards.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * Specifies the ABN Branch, also known as a GST Branch, for the company. This is used when a part of the business needs to account for GST separately from its parent entity. It should be a valid string if applicable to the company's structure.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) is a unique nine-digit identifier for companies registered in Australia. It must be formatted as three blocks of three digits (XXX XXX XXX) and is essential for legal and official documentation within the CRM.
   */
  acn?: string | null | undefined;
  /**
   * Represents the first name of a contact person associated with the company. This field is optional but can be useful for personalizing communications and managing contact information within the CRM.
   */
  firstName?: string | null | undefined;
  /**
   * Denotes the last name of a contact person linked to the company. While optional, providing this helps in maintaining detailed contact records and facilitates personalized interactions within the CRM.
   */
  lastName?: string | null | undefined;
  /**
   * An array of bank account details associated with the company. Each entry should include necessary banking information to facilitate financial transactions and record-keeping within the CRM system.
   */
  bankAccounts?: Array<BankAccounts> | undefined;
  /**
   * A list of websites associated with the company. Each entry in the array should represent a distinct website, providing a comprehensive digital presence for the company. This array helps in managing and tracking multiple online resources linked to the company.
   */
  websites?: Array<Websites> | undefined;
  /**
   * An array of address objects associated with the company. Each object within the array should represent a distinct address related to the company, such as headquarters or branch locations. This property is optional and can be omitted if no address information is available.
   */
  addresses?: Array<Addresses> | undefined;
  /**
   * An array containing the social media links associated with the company. Each entry in the array should represent a distinct social media profile, allowing for comprehensive tracking of the company's online presence. This property is optional but recommended for a complete company profile.
   */
  socialLinks?: Array<SocialLinks> | undefined;
  /**
   * An array of phone numbers associated with the company. Each entry should represent a distinct phone number, allowing for multiple contact points. This property is optional but can be vital for ensuring comprehensive communication options within the CRM.
   */
  phoneNumbers?: Array<PhoneNumbers> | undefined;
  /**
   * A collection of email objects associated with the company. Each object within the array should contain details like the email address and its type. This array allows for multiple email contacts to be linked to the company profile, enhancing communication capabilities.
   */
  emails?: Array<Emails> | undefined;
  /**
   * Defines the type of company record being added. This object may include additional attributes that specify the category or classification of the company within the CRM system. It is optional and can be omitted if the company type is not relevant to the operation.
   */
  rowType?: CompanyRowType | undefined;
  /**
   * An array of custom fields that allow for additional, user-defined data to be associated with the company. Each entry in the array should conform to the structure defined for custom fields, enabling flexible data integration into the CRM.
   */
  customFields?: Array<CustomFields> | undefined;
  /**
   * A collection of tags associated with the company, used for categorization and easy retrieval. Tags help in organizing companies within the CRM by allowing users to label them with relevant keywords. Each tag should be a concise string that accurately represents a category or attribute of the company.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Indicates whether the company record is immutable. If set to true, the company data cannot be modified after creation, ensuring data integrity for records that should remain unchanged. This property is optional and defaults to false if not specified.
   */
  readOnly?: boolean | null | undefined;
  /**
   * A formal salutation for a contact person associated with the company, such as 'Mr.' or 'Mrs.'. This property is optional and should be used to personalize communications or records within the CRM. It must be a valid string if provided.
   */
  salutation?: string | null | undefined;
  /**
   * The birth date of a contact person associated with the company, formatted as YYYY-MM-DD. This optional property can be used for personalizing interactions or for demographic analysis within the CRM system.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or modifications when creating or updating company resources. This property is optional and should be structured according to the specific service requirements it targets.
   */
  passThrough?: Array<PassThrough> | undefined;
};

/** @internal */
export const Currency$inboundSchema: z.ZodNativeEnum<typeof Currency> = z
  .nativeEnum(Currency);

/** @internal */
export const Currency$outboundSchema: z.ZodNativeEnum<typeof Currency> =
  Currency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Currency$ {
  /** @deprecated use `Currency$inboundSchema` instead. */
  export const inboundSchema = Currency$inboundSchema;
  /** @deprecated use `Currency$outboundSchema` instead. */
  export const outboundSchema = Currency$outboundSchema;
}

/** @internal */
export const AccountType$inboundSchema: z.ZodNativeEnum<typeof AccountType> = z
  .nativeEnum(AccountType);

/** @internal */
export const AccountType$outboundSchema: z.ZodNativeEnum<typeof AccountType> =
  AccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
  /** @deprecated use `AccountType$inboundSchema` instead. */
  export const inboundSchema = AccountType$inboundSchema;
  /** @deprecated use `AccountType$outboundSchema` instead. */
  export const outboundSchema = AccountType$outboundSchema;
}

/** @internal */
export const CreateCompanyRequestCurrency$inboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestCurrency
> = z.nativeEnum(CreateCompanyRequestCurrency);

/** @internal */
export const CreateCompanyRequestCurrency$outboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestCurrency
> = CreateCompanyRequestCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequestCurrency$ {
  /** @deprecated use `CreateCompanyRequestCurrency$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyRequestCurrency$inboundSchema;
  /** @deprecated use `CreateCompanyRequestCurrency$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyRequestCurrency$outboundSchema;
}

/** @internal */
export const BankAccounts$inboundSchema: z.ZodType<
  BankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(AccountType$inboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(CreateCompanyRequestCurrency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type BankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const BankAccounts$outboundSchema: z.ZodType<
  BankAccounts$Outbound,
  z.ZodTypeDef,
  BankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(AccountType$outboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(CreateCompanyRequestCurrency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccounts$ {
  /** @deprecated use `BankAccounts$inboundSchema` instead. */
  export const inboundSchema = BankAccounts$inboundSchema;
  /** @deprecated use `BankAccounts$outboundSchema` instead. */
  export const outboundSchema = BankAccounts$outboundSchema;
  /** @deprecated use `BankAccounts$Outbound` instead. */
  export type Outbound = BankAccounts$Outbound;
}

export function bankAccountsToJSON(bankAccounts: BankAccounts): string {
  return JSON.stringify(BankAccounts$outboundSchema.parse(bankAccounts));
}

export function bankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<BankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccounts' from JSON`,
  );
}

/** @internal */
export const CreateCompanyRequestWebsitesType$inboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestWebsitesType
> = z.nativeEnum(CreateCompanyRequestWebsitesType);

/** @internal */
export const CreateCompanyRequestWebsitesType$outboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestWebsitesType
> = CreateCompanyRequestWebsitesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequestWebsitesType$ {
  /** @deprecated use `CreateCompanyRequestWebsitesType$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyRequestWebsitesType$inboundSchema;
  /** @deprecated use `CreateCompanyRequestWebsitesType$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyRequestWebsitesType$outboundSchema;
}

/** @internal */
export const Websites$inboundSchema: z.ZodType<
  Websites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateCompanyRequestWebsitesType$inboundSchema).optional(),
});

/** @internal */
export type Websites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const Websites$outboundSchema: z.ZodType<
  Websites$Outbound,
  z.ZodTypeDef,
  Websites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateCompanyRequestWebsitesType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Websites$ {
  /** @deprecated use `Websites$inboundSchema` instead. */
  export const inboundSchema = Websites$inboundSchema;
  /** @deprecated use `Websites$outboundSchema` instead. */
  export const outboundSchema = Websites$outboundSchema;
  /** @deprecated use `Websites$Outbound` instead. */
  export type Outbound = Websites$Outbound;
}

export function websitesToJSON(websites: Websites): string {
  return JSON.stringify(Websites$outboundSchema.parse(websites));
}

export function websitesFromJSON(
  jsonString: string,
): SafeParseResult<Websites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Websites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Websites' from JSON`,
  );
}

/** @internal */
export const CreateCompanyRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestType
> = z.nativeEnum(CreateCompanyRequestType);

/** @internal */
export const CreateCompanyRequestType$outboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestType
> = CreateCompanyRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequestType$ {
  /** @deprecated use `CreateCompanyRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyRequestType$inboundSchema;
  /** @deprecated use `CreateCompanyRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyRequestType$outboundSchema;
}

/** @internal */
export const Addresses$inboundSchema: z.ZodType<
  Addresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateCompanyRequestType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type Addresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const Addresses$outboundSchema: z.ZodType<
  Addresses$Outbound,
  z.ZodTypeDef,
  Addresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateCompanyRequestType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Addresses$ {
  /** @deprecated use `Addresses$inboundSchema` instead. */
  export const inboundSchema = Addresses$inboundSchema;
  /** @deprecated use `Addresses$outboundSchema` instead. */
  export const outboundSchema = Addresses$outboundSchema;
  /** @deprecated use `Addresses$Outbound` instead. */
  export type Outbound = Addresses$Outbound;
}

export function addressesToJSON(addresses: Addresses): string {
  return JSON.stringify(Addresses$outboundSchema.parse(addresses));
}

export function addressesFromJSON(
  jsonString: string,
): SafeParseResult<Addresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Addresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Addresses' from JSON`,
  );
}

/** @internal */
export const SocialLinks$inboundSchema: z.ZodType<
  SocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type SocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const SocialLinks$outboundSchema: z.ZodType<
  SocialLinks$Outbound,
  z.ZodTypeDef,
  SocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SocialLinks$ {
  /** @deprecated use `SocialLinks$inboundSchema` instead. */
  export const inboundSchema = SocialLinks$inboundSchema;
  /** @deprecated use `SocialLinks$outboundSchema` instead. */
  export const outboundSchema = SocialLinks$outboundSchema;
  /** @deprecated use `SocialLinks$Outbound` instead. */
  export type Outbound = SocialLinks$Outbound;
}

export function socialLinksToJSON(socialLinks: SocialLinks): string {
  return JSON.stringify(SocialLinks$outboundSchema.parse(socialLinks));
}

export function socialLinksFromJSON(
  jsonString: string,
): SafeParseResult<SocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SocialLinks' from JSON`,
  );
}

/** @internal */
export const CreateCompanyRequestPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof CreateCompanyRequestPhoneNumbersType> = z.nativeEnum(
    CreateCompanyRequestPhoneNumbersType,
  );

/** @internal */
export const CreateCompanyRequestPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof CreateCompanyRequestPhoneNumbersType> =
    CreateCompanyRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequestPhoneNumbersType$ {
  /** @deprecated use `CreateCompanyRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    CreateCompanyRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `CreateCompanyRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    CreateCompanyRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const PhoneNumbers$inboundSchema: z.ZodType<
  PhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateCompanyRequestPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type PhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const PhoneNumbers$outboundSchema: z.ZodType<
  PhoneNumbers$Outbound,
  z.ZodTypeDef,
  PhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateCompanyRequestPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhoneNumbers$ {
  /** @deprecated use `PhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = PhoneNumbers$inboundSchema;
  /** @deprecated use `PhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = PhoneNumbers$outboundSchema;
  /** @deprecated use `PhoneNumbers$Outbound` instead. */
  export type Outbound = PhoneNumbers$Outbound;
}

export function phoneNumbersToJSON(phoneNumbers: PhoneNumbers): string {
  return JSON.stringify(PhoneNumbers$outboundSchema.parse(phoneNumbers));
}

export function phoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<PhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CreateCompanyRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestEmailsType
> = z.nativeEnum(CreateCompanyRequestEmailsType);

/** @internal */
export const CreateCompanyRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestEmailsType
> = CreateCompanyRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequestEmailsType$ {
  /** @deprecated use `CreateCompanyRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyRequestEmailsType$inboundSchema;
  /** @deprecated use `CreateCompanyRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyRequestEmailsType$outboundSchema;
}

/** @internal */
export const Emails$inboundSchema: z.ZodType<Emails, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()),
    type: z.nullable(CreateCompanyRequestEmailsType$inboundSchema).optional(),
  });

/** @internal */
export type Emails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const Emails$outboundSchema: z.ZodType<
  Emails$Outbound,
  z.ZodTypeDef,
  Emails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CreateCompanyRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Emails$ {
  /** @deprecated use `Emails$inboundSchema` instead. */
  export const inboundSchema = Emails$inboundSchema;
  /** @deprecated use `Emails$outboundSchema` instead. */
  export const outboundSchema = Emails$outboundSchema;
  /** @deprecated use `Emails$Outbound` instead. */
  export type Outbound = Emails$Outbound;
}

export function emailsToJSON(emails: Emails): string {
  return JSON.stringify(Emails$outboundSchema.parse(emails));
}

export function emailsFromJSON(
  jsonString: string,
): SafeParseResult<Emails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Emails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Emails' from JSON`,
  );
}

/** @internal */
export const CompanyRowType$inboundSchema: z.ZodType<
  CompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CompanyRowType$outboundSchema: z.ZodType<
  CompanyRowType$Outbound,
  z.ZodTypeDef,
  CompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyRowType$ {
  /** @deprecated use `CompanyRowType$inboundSchema` instead. */
  export const inboundSchema = CompanyRowType$inboundSchema;
  /** @deprecated use `CompanyRowType$outboundSchema` instead. */
  export const outboundSchema = CompanyRowType$outboundSchema;
  /** @deprecated use `CompanyRowType$Outbound` instead. */
  export type Outbound = CompanyRowType$Outbound;
}

export function companyRowTypeToJSON(companyRowType: CompanyRowType): string {
  return JSON.stringify(CompanyRowType$outboundSchema.parse(companyRowType));
}

export function companyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<CompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyRowType' from JSON`,
  );
}

/** @internal */
export const Six$inboundSchema: z.ZodType<Six, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Six$Outbound = {};

/** @internal */
export const Six$outboundSchema: z.ZodType<Six$Outbound, z.ZodTypeDef, Six> = z
  .object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Six$ {
  /** @deprecated use `Six$inboundSchema` instead. */
  export const inboundSchema = Six$inboundSchema;
  /** @deprecated use `Six$outboundSchema` instead. */
  export const outboundSchema = Six$outboundSchema;
  /** @deprecated use `Six$Outbound` instead. */
  export type Outbound = Six$Outbound;
}

export function sixToJSON(six: Six): string {
  return JSON.stringify(Six$outboundSchema.parse(six));
}

export function sixFromJSON(
  jsonString: string,
): SafeParseResult<Six, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Six$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Six' from JSON`,
  );
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Four$Outbound = {};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Four$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.string()),
    z.array(z.lazy(() => Six$inboundSchema)),
  ]);

/** @internal */
export type Value$Outbound =
  | Four$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<Six$Outbound>;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([
  z.lazy(() => Four$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Six$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const CustomFields$inboundSchema: z.ZodType<
  CustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Six$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | Four$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<Six$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CustomFields$outboundSchema: z.ZodType<
  CustomFields$Outbound,
  z.ZodTypeDef,
  CustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Six$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFields$ {
  /** @deprecated use `CustomFields$inboundSchema` instead. */
  export const inboundSchema = CustomFields$inboundSchema;
  /** @deprecated use `CustomFields$outboundSchema` instead. */
  export const outboundSchema = CustomFields$outboundSchema;
  /** @deprecated use `CustomFields$Outbound` instead. */
  export type Outbound = CustomFields$Outbound;
}

export function customFieldsToJSON(customFields: CustomFields): string {
  return JSON.stringify(CustomFields$outboundSchema.parse(customFields));
}

export function customFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFields' from JSON`,
  );
}

/** @internal */
export const ExtendPaths$inboundSchema: z.ZodType<
  ExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ExtendPaths$outboundSchema: z.ZodType<
  ExtendPaths$Outbound,
  z.ZodTypeDef,
  ExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtendPaths$ {
  /** @deprecated use `ExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ExtendPaths$inboundSchema;
  /** @deprecated use `ExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ExtendPaths$outboundSchema;
  /** @deprecated use `ExtendPaths$Outbound` instead. */
  export type Outbound = ExtendPaths$Outbound;
}

export function extendPathsToJSON(extendPaths: ExtendPaths): string {
  return JSON.stringify(ExtendPaths$outboundSchema.parse(extendPaths));
}

export function extendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtendPaths' from JSON`,
  );
}

/** @internal */
export const PassThrough$inboundSchema: z.ZodType<
  PassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ExtendPaths$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type PassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ExtendPaths$Outbound> | undefined;
};

/** @internal */
export const PassThrough$outboundSchema: z.ZodType<
  PassThrough$Outbound,
  z.ZodTypeDef,
  PassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ExtendPaths$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PassThrough$ {
  /** @deprecated use `PassThrough$inboundSchema` instead. */
  export const inboundSchema = PassThrough$inboundSchema;
  /** @deprecated use `PassThrough$outboundSchema` instead. */
  export const outboundSchema = PassThrough$outboundSchema;
  /** @deprecated use `PassThrough$Outbound` instead. */
  export type Outbound = PassThrough$Outbound;
}

export function passThroughToJSON(passThrough: PassThrough): string {
  return JSON.stringify(PassThrough$outboundSchema.parse(passThrough));
}

export function passThroughFromJSON(
  jsonString: string,
): SafeParseResult<PassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PassThrough' from JSON`,
  );
}

/** @internal */
export const CreateCompanyRequest$inboundSchema: z.ZodType<
  CreateCompanyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vat_number: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annual_revenue: z.nullable(z.string()).optional(),
  number_of_employees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  sales_tax_number: z.nullable(z.string()).optional(),
  payee_number: z.nullable(z.string()).optional(),
  abn_or_tfn: z.nullable(z.string()).optional(),
  abn_branch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  bank_accounts: z.array(z.lazy(() => BankAccounts$inboundSchema)).optional(),
  websites: z.array(z.lazy(() => Websites$inboundSchema)).optional(),
  addresses: z.array(z.lazy(() => Addresses$inboundSchema)).optional(),
  social_links: z.array(z.lazy(() => SocialLinks$inboundSchema)).optional(),
  phone_numbers: z.array(z.lazy(() => PhoneNumbers$inboundSchema)).optional(),
  emails: z.array(z.lazy(() => Emails$inboundSchema)).optional(),
  row_type: z.lazy(() => CompanyRowType$inboundSchema).optional(),
  custom_fields: z.array(z.lazy(() => CustomFields$inboundSchema)).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  read_only: z.nullable(z.boolean()).optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  pass_through: z.array(z.lazy(() => PassThrough$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "vat_number": "vatNumber",
    "annual_revenue": "annualRevenue",
    "number_of_employees": "numberOfEmployees",
    "sales_tax_number": "salesTaxNumber",
    "payee_number": "payeeNumber",
    "abn_or_tfn": "abnOrTfn",
    "abn_branch": "abnBranch",
    "first_name": "firstName",
    "last_name": "lastName",
    "bank_accounts": "bankAccounts",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "row_type": "rowType",
    "custom_fields": "customFields",
    "read_only": "readOnly",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CreateCompanyRequest$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  bank_accounts?: Array<BankAccounts$Outbound> | undefined;
  websites?: Array<Websites$Outbound> | undefined;
  addresses?: Array<Addresses$Outbound> | undefined;
  social_links?: Array<SocialLinks$Outbound> | undefined;
  phone_numbers?: Array<PhoneNumbers$Outbound> | undefined;
  emails?: Array<Emails$Outbound> | undefined;
  row_type?: CompanyRowType$Outbound | undefined;
  custom_fields?: Array<CustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  pass_through?: Array<PassThrough$Outbound> | undefined;
};

/** @internal */
export const CreateCompanyRequest$outboundSchema: z.ZodType<
  CreateCompanyRequest$Outbound,
  z.ZodTypeDef,
  CreateCompanyRequest
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annualRevenue: z.nullable(z.string()).optional(),
  numberOfEmployees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  salesTaxNumber: z.nullable(z.string()).optional(),
  payeeNumber: z.nullable(z.string()).optional(),
  abnOrTfn: z.nullable(z.string()).optional(),
  abnBranch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  bankAccounts: z.array(z.lazy(() => BankAccounts$outboundSchema)).optional(),
  websites: z.array(z.lazy(() => Websites$outboundSchema)).optional(),
  addresses: z.array(z.lazy(() => Addresses$outboundSchema)).optional(),
  socialLinks: z.array(z.lazy(() => SocialLinks$outboundSchema)).optional(),
  phoneNumbers: z.array(z.lazy(() => PhoneNumbers$outboundSchema)).optional(),
  emails: z.array(z.lazy(() => Emails$outboundSchema)).optional(),
  rowType: z.lazy(() => CompanyRowType$outboundSchema).optional(),
  customFields: z.array(z.lazy(() => CustomFields$outboundSchema)).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  readOnly: z.nullable(z.boolean()).optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  passThrough: z.array(z.lazy(() => PassThrough$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    vatNumber: "vat_number",
    annualRevenue: "annual_revenue",
    numberOfEmployees: "number_of_employees",
    salesTaxNumber: "sales_tax_number",
    payeeNumber: "payee_number",
    abnOrTfn: "abn_or_tfn",
    abnBranch: "abn_branch",
    firstName: "first_name",
    lastName: "last_name",
    bankAccounts: "bank_accounts",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    rowType: "row_type",
    customFields: "custom_fields",
    readOnly: "read_only",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequest$ {
  /** @deprecated use `CreateCompanyRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyRequest$inboundSchema;
  /** @deprecated use `CreateCompanyRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyRequest$outboundSchema;
  /** @deprecated use `CreateCompanyRequest$Outbound` instead. */
  export type Outbound = CreateCompanyRequest$Outbound;
}

export function createCompanyRequestToJSON(
  createCompanyRequest: CreateCompanyRequest,
): string {
  return JSON.stringify(
    CreateCompanyRequest$outboundSchema.parse(createCompanyRequest),
  );
}

export function createCompanyRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompanyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompanyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompanyRequest' from JSON`,
  );
}
