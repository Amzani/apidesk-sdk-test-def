/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * The classification of the company's bank account, such as checking or savings. This property helps determine the account's features and limitations. Ensure the account type is specified accurately to avoid transaction issues.
 */
export const AccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The classification of the company's bank account, such as checking or savings. This property helps determine the account's features and limitations. Ensure the account type is specified accurately to avoid transaction issues.
 */
export type AccountType = ClosedEnum<typeof AccountType>;

export type BankAccounts = {
  /**
   * The name of the bank associated with the company's account. This property is used to identify the financial institution where the company's account is held. It should be a valid bank name as recognized by the financial system.
   */
  bankName?: string | null | undefined;
  /**
   * The unique number assigned to the company's bank account. This property is crucial for transactions and must be formatted according to the bank's specifications. It ensures that funds are correctly routed to the intended account.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name under which the company's bank account is registered. This property helps verify the account holder's identity and should match the name on official bank documents.
   */
  accountName?: string | null | undefined;
  /**
   * The classification of the company's bank account, such as checking or savings. This property helps determine the account's features and limitations. Ensure the account type is specified accurately to avoid transaction issues.
   */
  accountType?: AccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN) for the company's bank account. This property is used for international transactions and must comply with the IBAN format standards. It ensures that cross-border payments are processed correctly.
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC) is used to uniquely identify a bank in international transactions. This property is optional and should be provided if the company has an international bank account. It helps ensure that funds are correctly routed to the intended financial institution.
   */
  bic?: string | null | undefined;
  /**
   * The routing number is a nine-digit code used to identify a financial institution in the United States. This property is optional and should be included if the company has a U.S. bank account. It is crucial for processing domestic transactions accurately.
   */
  routingNumber?: string | null | undefined;
  /**
   * The BSB number is a six-digit code used to identify a specific branch of a bank in Australia or New Zealand. This property is optional and should be provided if the company holds an account in these regions. It ensures that transactions are directed to the correct branch.
   */
  bsbNumber?: string | null | undefined;
  /**
   * The branch identifier is a unique code for identifying a specific branch of a bank or financial institution. This property is optional and should be used when precise branch identification is necessary for the company's banking operations. It aids in directing transactions to the correct branch.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * The bank code is assigned by a central authority to identify banks within a country. This property is optional and should be included if the company operates in a region where such codes are used. It helps in ensuring that transactions are processed by the correct bank.
   */
  bankCode?: string | null | undefined;
  currency?: Currency | null | undefined;
};

/**
 * Describes the type of website, such as 'corporate', 'e-commerce', or 'blog'. This categorization helps in understanding the purpose and content focus of the website. This property is optional and can be used to provide additional context about the website's role.
 */
export const CreateCompanyRequestWebsitesType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Describes the type of website, such as 'corporate', 'e-commerce', or 'blog'. This categorization helps in understanding the purpose and content focus of the website. This property is optional and can be used to provide additional context about the website's role.
 */
export type CreateCompanyRequestWebsitesType = ClosedEnum<
  typeof CreateCompanyRequestWebsitesType
>;

export type Websites = {
  /**
   * A unique identifier for each website entry within the company's website list. This ID is used to distinguish between different websites and is crucial for managing and updating specific website records. This property is optional and can be auto-generated if not provided.
   */
  id?: string | null | undefined;
  /**
   * The URL of the company's website, which must be a valid web address. This field is required to ensure that the company's online presence is accurately captured and accessible. It is essential for linking to the company's digital resources.
   */
  url: string;
  /**
   * Describes the type of website, such as 'corporate', 'e-commerce', or 'blog'. This categorization helps in understanding the purpose and content focus of the website. This property is optional and can be used to provide additional context about the website's role.
   */
  type?: CreateCompanyRequestWebsitesType | null | undefined;
};

/**
 * Specifies the type of address, such as 'billing' or 'shipping'. This helps categorize the address for specific business functions and ensures that the correct address is used for the right purpose. It is optional but recommended for clarity.
 */
export const CreateCompanyRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of address, such as 'billing' or 'shipping'. This helps categorize the address for specific business functions and ensures that the correct address is used for the right purpose. It is optional but recommended for clarity.
 */
export type CreateCompanyRequestType = ClosedEnum<
  typeof CreateCompanyRequestType
>;

export type Addresses = {
  /**
   * A unique identifier for each address object within the addresses array. This ID is used to distinguish between different addresses and is particularly useful for updates or deletions of specific addresses. It is optional and can be left blank if not applicable.
   */
  id?: string | null | undefined;
  /**
   * Specifies the type of address, such as 'billing' or 'shipping'. This helps categorize the address for specific business functions and ensures that the correct address is used for the right purpose. It is optional but recommended for clarity.
   */
  type?: CreateCompanyRequestType | null | undefined;
  /**
   * The full address in a single string format, used when structured address data is not available. This field allows for flexibility in address input, accommodating various formats and international addresses. It is optional and can be used when detailed address components are not provided.
   */
  string?: string | null | undefined;
  /**
   * A descriptive name for the address, such as 'Headquarters' or 'Warehouse'. This name helps identify the address within the company's records and can be used for quick reference. It is optional and can be omitted if not needed.
   */
  name?: string | null | undefined;
  /**
   * The primary address line for the company, including details such as street number, street name, and apartment or suite number. This field helps in accurately locating the company and is optional, allowing flexibility in address entry.
   */
  line1?: string | null | undefined;
  /**
   * An additional address line for the company, often used for supplementary information like building name or floor number. This field is optional and provides extra space for detailed address information if needed.
   */
  line2?: string | null | undefined;
  /**
   * A third address line for the company, which can be used for any additional address details that do not fit in the first two lines. This optional field ensures comprehensive address documentation.
   */
  line3?: string | null | undefined;
  /**
   * A fourth address line for the company, allowing for further address details if necessary. This optional field supports extensive address information, ensuring all relevant details are captured.
   */
  line4?: string | null | undefined;
  /**
   * The specific street number of the company's address, crucial for precise location identification. This optional field can be used to enhance the accuracy of the address provided.
   */
  streetNumber?: string | null | undefined;
  /**
   * Specifies the city where the company is located. This field helps in geographically categorizing the company within the CRM system. It should be a valid city name to ensure accurate location data.
   */
  city?: string | null | undefined;
  /**
   * Indicates the state or region where the company is situated. This information is used to further refine the company's geographical location in the CRM. Ensure it is a valid state or region name for proper categorization.
   */
  state?: string | null | undefined;
  /**
   * Represents the postal code for the company's address, crucial for precise location mapping. It should conform to the postal code format of the respective country to ensure accuracy.
   */
  postalCode?: string | null | undefined;
  /**
   * Denotes the country where the company is based, using the ISO 3166-1 alpha-2 code. This field is essential for international categorization and must be a valid two-letter country code.
   */
  country?: string | null | undefined;
  /**
   * Specifies the latitude coordinate of the company's address, aiding in precise geographical positioning. It should be a valid latitude value to ensure accurate mapping within the CRM.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the company's address. This property is used to pinpoint the exact geographical location of the company on a map. It should be a valid string representation of a longitude value, typically ranging from -180 to 180 degrees.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality of the company's address. This field helps in identifying the specific administrative region within a larger area, which can be crucial for regional operations or compliance. It should be a valid string representing the county name.
   */
  county?: string | null | undefined;
  /**
   * The full name of the primary contact person at the company's address. This information is essential for establishing direct communication with the company and should be a valid string containing the contact's name.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title of the contact person at the company's address. This property is used to address the contact person respectfully and appropriately in communications. It should be a valid string such as 'Mr.', 'Ms.', 'Dr.', etc.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the company's address. This is used for direct telephonic communication with the company and should be a valid string formatted according to international or local standards.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the company's address. This property is optional and should be formatted as a standard fax number. It helps in maintaining comprehensive contact details for the company within the CRM system.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the company's address. This optional field should be a valid email format and is used for electronic communication purposes, ensuring that the company can be contacted efficiently through the CRM.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the company's address. This optional property should be a valid URL format and provides a direct link to the company's online presence, enhancing the CRM's contact information.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the company's address. This optional field allows for any extra information or comments that might be relevant to the address, aiding in detailed record-keeping within the CRM.
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to track changes to the address object. This optional field is crucial for concurrency control, as it helps detect updates and prevent data conflicts by incrementing with each modification.
   */
  rowVersion?: string | null | undefined;
};

export type SocialLinks = {
  /**
   * A unique identifier for each social link entry. This ID is used to distinguish between different social media profiles or links associated with the company, ensuring accurate data management and retrieval.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social link, such as a company's Twitter or LinkedIn profile. This field is required to establish a direct connection to the company's social media presence, facilitating easy access and interaction.
   */
  url: string;
  /**
   * Specifies the type of social link, such as 'twitter' or 'linkedin'. This helps categorize the social media profiles, enabling better organization and filtering within the CRM system.
   */
  type?: string | null | undefined;
};

/**
 * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in identifying the context in which the phone number is used within the CRM system. It is optional and can be left out if not applicable.
 */
export const CreateCompanyRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in identifying the context in which the phone number is used within the CRM system. It is optional and can be left out if not applicable.
 */
export type CreateCompanyRequestPhoneNumbersType = ClosedEnum<
  typeof CreateCompanyRequestPhoneNumbersType
>;

export type PhoneNumbers = {
  /**
   * A unique identifier for the phone number entry within the company's contact information. This ID is used to distinguish between different phone numbers associated with the company, allowing for precise updates and management of contact details. It is not required when adding a new phone number but may be used for reference in updates.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, such as '+1' for the United States. This code is essential for ensuring the phone number is correctly formatted and can be dialed internationally. It should be provided in the standard international format, prefixed with a '+'.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code for the phone number, such as '323' for Los Angeles. This code helps in identifying the specific geographic region of the phone number within a country. It should be provided as part of the complete phone number format.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number for the company, excluding the country and area codes. This is a required field and must be provided to successfully add a phone number to the company's contact information. It should be formatted as a string of digits without spaces or special characters.
   */
  number: string;
  /**
   * An optional extension number for the phone line, used to direct calls to a specific department or individual within the company. This field is useful for companies with complex phone systems and should be provided if applicable.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in identifying the context in which the phone number is used within the CRM system. It is optional and can be left out if not applicable.
   */
  type?: CreateCompanyRequestPhoneNumbersType | null | undefined;
};

/**
 * Defines the type of email address, such as 'work', 'personal', or 'support'. This categorization helps in organizing and managing email communications related to the company. It is optional and can be specified to provide additional context.
 */
export const CreateCompanyRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the type of email address, such as 'work', 'personal', or 'support'. This categorization helps in organizing and managing email communications related to the company. It is optional and can be specified to provide additional context.
 */
export type CreateCompanyRequestEmailsType = ClosedEnum<
  typeof CreateCompanyRequestEmailsType
>;

export type Emails = {
  /**
   * A unique identifier for each email address in the array. This ID is used to distinguish between different email entries and is crucial for managing email records within the CRM. It is optional but recommended for better email management.
   */
  id?: string | null | undefined;
  /**
   * The actual email address associated with the company. This field is required and must be a valid email format to ensure proper communication and record-keeping within the CRM system.
   */
  email: string | null;
  /**
   * Defines the type of email address, such as 'work', 'personal', or 'support'. This categorization helps in organizing and managing email communications related to the company. It is optional and can be specified to provide additional context.
   */
  type?: CreateCompanyRequestEmailsType | null | undefined;
};

/**
 * Specifies the type of company record being added. This object can include additional details such as the company's unique identifier and name, helping to categorize and manage different company types within the CRM. It is optional but can be used to provide more structured data about the company.
 */
export type CompanyRowType = {
  /**
   * A unique identifier for the type of company being added. This ID helps in distinguishing between different company types and is useful for integrations that require specific type handling. It is optional and should be a valid string if provided.
   */
  id?: string | null | undefined;
  /**
   * The name of the company type. This field allows you to specify a human-readable name for the company type, aiding in the organization and retrieval of company records. It is optional and should be a valid string if provided.
   */
  name?: string | null | undefined;
};

export type Six = {};

export type Four = {};

/**
 * The 'custom_fields.value' property holds the actual data or value for the custom field defined by 'custom_fields.name'. This optional field allows you to assign specific information to the custom field, enhancing the company's data profile. It should be a string that accurately represents the value intended for the custom attribute.
 */
export type Value =
  | Four
  | string
  | number
  | boolean
  | Array<string>
  | Array<Six>;

export type CustomFields = {
  /**
   * A mandatory unique identifier for each custom field. This ID ensures that each custom field can be distinctly referenced and managed within the CRM system. It must be a valid string and is crucial for maintaining the integrity of custom data entries.
   */
  id: string | null;
  /**
   * The 'custom_fields.name' property is used to specify the name of a custom field associated with the company being added. This field allows for the customization of company records by adding specific attributes that are not covered by standard fields. It is optional and should be a string that clearly identifies the custom attribute's purpose.
   */
  name?: string | null | undefined;
  /**
   * The 'custom_fields.description' property provides additional context or details about the custom field specified by 'custom_fields.name'. This optional field helps in understanding the purpose and usage of the custom field within the company record. It should be a descriptive string that elaborates on the custom field's role.
   */
  description?: string | null | undefined;
  /**
   * The 'custom_fields.value' property holds the actual data or value for the custom field defined by 'custom_fields.name'. This optional field allows you to assign specific information to the custom field, enhancing the company's data profile. It should be a string that accurately represents the value intended for the custom attribute.
   */
  value?:
    | Four
    | string
    | number
    | boolean
    | Array<string>
    | Array<Six>
    | null
    | undefined;
};

export type ExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where the value should be applied. This path must be a valid JSONPath expression, ensuring that the data modification is accurately targeted within the nested structure. It is crucial for operations that require precise data placement or updates.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath, which can be of any data type. This allows for flexible data updates, accommodating various types of data modifications as required by the operation. The value should be compatible with the data structure at the specified path to ensure successful application.
   */
  value?: any | undefined;
};

export type PassThrough = {
  /**
   * A required identifier for the service to which the pass_through data should be applied. This ensures that the custom data is correctly routed and processed by the intended service integration.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that this pass-through should be applied to. This is particularly useful in scenarios where multiple downstream requests are made in a single Unify call, allowing for precise tracking and management of each operation. The value should be a valid string that uniquely identifies the operation within the context of the request.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties, enabling custom data to be included in the request. This is useful for adding additional metadata or custom fields that are not predefined in the API schema. The object can contain any key-value pairs as needed for the specific use case.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications, allowing developers to specify changes to the request data using paths. Each object in the array should define a path and a value, facilitating precise updates to nested data structures. This feature is essential for complex data manipulations where direct object modification is required.
   */
  extendPaths?: Array<ExtendPaths> | undefined;
};

export type CreateCompanyRequest = {
  /**
   * The name of the company to be added to the CRM. This field is required and must be a non-empty string, as it uniquely identifies the company within the CRM system. Ensure the name accurately reflects the company's official or commonly recognized name to maintain clear records.
   */
  name: string | null;
  /**
   * The unique identifier of the user who owns or manages the company record. This field is optional and can be used to assign responsibility for the company within the CRM. If provided, it should match a valid user ID in the system to ensure proper association.
   */
  ownerId?: string | null | undefined;
  /**
   * The URL of the company's logo or representative image. This optional field allows for visual identification of the company within the CRM. Ensure the URL points to a valid image file accessible over the internet to display correctly.
   */
  image?: string | null | undefined;
  /**
   * A brief overview or summary of the company. This optional field provides additional context about the company's operations, mission, or services. Use clear and concise language to effectively communicate the company's purpose or key attributes.
   */
  description?: string | null | undefined;
  /**
   * The company's VAT (Value Added Tax) number, used for tax identification purposes. This optional field should contain a valid VAT number if applicable, ensuring compliance with tax regulations and facilitating financial transactions.
   */
  vatNumber?: string | null | undefined;
  currency?: Currency | null | undefined;
  /**
   * Defines the operational status of the company within the CRM. This status helps in categorizing the company for various business processes and reporting. It should be a valid status string that reflects the company's current state in the system.
   */
  status?: string | null | undefined;
  /**
   * The fax number associated with the company, used for sending and receiving documents via fax. This should be a valid phone number format, facilitating traditional communication methods where necessary.
   */
  fax?: string | null | undefined;
  /**
   * Represents the total annual revenue generated by the company, expressed in the specified currency. This information is crucial for financial analysis and strategic planning within the CRM system. It should be a numeric string reflecting the company's revenue.
   */
  annualRevenue?: string | null | undefined;
  /**
   * Indicates the total number of employees working for the company. This metric is important for understanding the company's size and operational capacity. It should be a numeric string representing the employee count.
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * Specifies the business sector the company operates in, helping categorize and manage company records within the CRM. This field is optional and can be any string that accurately represents the company's industry.
   */
  industry?: string | null | undefined;
  /**
   * Defines the ownership structure of the company, such as private or public, which can influence reporting and compliance requirements. This optional field should be a string that clearly describes the company's ownership type.
   */
  ownership?: string | null | undefined;
  /**
   * A unique identifier for the company used in tax-related processes, ensuring compliance with tax regulations. This optional field should be a valid string representing the company's sales tax number.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * Identifies the company as a payee for tax purposes, facilitating accurate tax reporting and transactions. This optional field should be a valid string that uniquely identifies the company as a payee.
   */
  payeeNumber?: string | null | undefined;
  /**
   * Required for businesses operating in Australia, this field should contain either an Australian Business Number (ABN) or a Tax File Number (TFN) for compliance with local regulations. This optional field must be a valid string representing either an ABN or TFN.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * Specifies the ABN Branch for the company, used when a business segment needs separate GST accounting from its parent entity. This field is optional and should be provided if applicable to the company's structure.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) uniquely identifies the company in Australia. It must be a nine-digit number formatted as XXX XXX XXX, ensuring compliance with ASIC standards. This field is optional but recommended for Australian companies.
   */
  acn?: string | null | undefined;
  /**
   * The first name of the primary contact person for the company. This field is optional and helps personalize communications and records within the CRM.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the primary contact person for the company. This field is optional and complements the first name to fully identify the contact person in CRM records.
   */
  lastName?: string | null | undefined;
  /**
   * A list of bank accounts associated with the company. This field is optional and can include multiple accounts to facilitate financial transactions and record-keeping within the CRM.
   */
  bankAccounts?: Array<BankAccounts> | undefined;
  /**
   * A collection of website entries associated with the company. Each entry in this array should represent a distinct website, providing a comprehensive list of the company's online presence. This property is optional and can be left empty if no websites are to be recorded.
   */
  websites?: Array<Websites> | undefined;
  /**
   * An array of address objects associated with the company. Each object within the array represents a distinct address, allowing for multiple addresses to be linked to a single company record. This property is optional and can be omitted if no addresses are to be added.
   */
  addresses?: Array<Addresses> | undefined;
  /**
   * An array of social links associated with the company. Each entry in the array should represent a distinct social media profile or link related to the company, allowing for comprehensive social media integration within the CRM.
   */
  socialLinks?: Array<SocialLinks> | undefined;
  /**
   * An array of phone numbers associated with the company. This allows the CRM to store multiple contact numbers, ensuring that all relevant communication channels are available for the company.
   */
  phoneNumbers?: Array<PhoneNumbers> | undefined;
  /**
   * A collection of email objects associated with the company. Each object within the array should contain details about an email address, including its type and unique identifier. This array is optional but necessary if you want to associate emails with the company.
   */
  emails?: Array<Emails> | undefined;
  /**
   * Specifies the type of company record being added. This object can include additional details such as the company's unique identifier and name, helping to categorize and manage different company types within the CRM. It is optional but can be used to provide more structured data about the company.
   */
  rowType?: CompanyRowType | undefined;
  /**
   * An array of custom fields that can be used to store additional information about the company. These fields allow for flexibility and customization of company records, enabling the storage of data that may not fit into predefined fields. It is optional but can enhance the detail and specificity of the company record.
   */
  customFields?: Array<CustomFields> | undefined;
  /**
   * The 'tags' property is an array used to categorize or label the company with specific keywords or identifiers. This optional field helps in organizing and retrieving company records based on common themes or characteristics. Each tag should be a string that succinctly represents a relevant category or label.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Indicates whether the company record is read-only. This property is used to determine if the company data can be modified after creation. If set to true, the company details cannot be edited, ensuring data integrity for certain records.
   */
  readOnly?: boolean | null | undefined;
  /**
   * A formal salutation for the primary contact person at the company, such as 'Mr' or 'Mrs'. This field is used to personalize communications and should be a valid salutation string. It is optional and can be omitted if not applicable.
   */
  salutation?: string | null | undefined;
  /**
   * The date of birth of the primary contact person at the company, formatted as a string. This information can be used for personalized interactions or demographic analysis. It is optional and should be provided in a standard date format, such as 'YYYY-MM-DD'.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or modifications when creating or updating company records. This property is useful for integrating with specific services that require additional data not covered by standard fields.
   */
  passThrough?: Array<PassThrough> | undefined;
};

/** @internal */
export const AccountType$inboundSchema: z.ZodNativeEnum<typeof AccountType> = z
  .nativeEnum(AccountType);

/** @internal */
export const AccountType$outboundSchema: z.ZodNativeEnum<typeof AccountType> =
  AccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
  /** @deprecated use `AccountType$inboundSchema` instead. */
  export const inboundSchema = AccountType$inboundSchema;
  /** @deprecated use `AccountType$outboundSchema` instead. */
  export const outboundSchema = AccountType$outboundSchema;
}

/** @internal */
export const BankAccounts$inboundSchema: z.ZodType<
  BankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(AccountType$inboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type BankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const BankAccounts$outboundSchema: z.ZodType<
  BankAccounts$Outbound,
  z.ZodTypeDef,
  BankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(AccountType$outboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccounts$ {
  /** @deprecated use `BankAccounts$inboundSchema` instead. */
  export const inboundSchema = BankAccounts$inboundSchema;
  /** @deprecated use `BankAccounts$outboundSchema` instead. */
  export const outboundSchema = BankAccounts$outboundSchema;
  /** @deprecated use `BankAccounts$Outbound` instead. */
  export type Outbound = BankAccounts$Outbound;
}

export function bankAccountsToJSON(bankAccounts: BankAccounts): string {
  return JSON.stringify(BankAccounts$outboundSchema.parse(bankAccounts));
}

export function bankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<BankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccounts' from JSON`,
  );
}

/** @internal */
export const CreateCompanyRequestWebsitesType$inboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestWebsitesType
> = z.nativeEnum(CreateCompanyRequestWebsitesType);

/** @internal */
export const CreateCompanyRequestWebsitesType$outboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestWebsitesType
> = CreateCompanyRequestWebsitesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequestWebsitesType$ {
  /** @deprecated use `CreateCompanyRequestWebsitesType$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyRequestWebsitesType$inboundSchema;
  /** @deprecated use `CreateCompanyRequestWebsitesType$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyRequestWebsitesType$outboundSchema;
}

/** @internal */
export const Websites$inboundSchema: z.ZodType<
  Websites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateCompanyRequestWebsitesType$inboundSchema).optional(),
});

/** @internal */
export type Websites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const Websites$outboundSchema: z.ZodType<
  Websites$Outbound,
  z.ZodTypeDef,
  Websites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateCompanyRequestWebsitesType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Websites$ {
  /** @deprecated use `Websites$inboundSchema` instead. */
  export const inboundSchema = Websites$inboundSchema;
  /** @deprecated use `Websites$outboundSchema` instead. */
  export const outboundSchema = Websites$outboundSchema;
  /** @deprecated use `Websites$Outbound` instead. */
  export type Outbound = Websites$Outbound;
}

export function websitesToJSON(websites: Websites): string {
  return JSON.stringify(Websites$outboundSchema.parse(websites));
}

export function websitesFromJSON(
  jsonString: string,
): SafeParseResult<Websites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Websites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Websites' from JSON`,
  );
}

/** @internal */
export const CreateCompanyRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestType
> = z.nativeEnum(CreateCompanyRequestType);

/** @internal */
export const CreateCompanyRequestType$outboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestType
> = CreateCompanyRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequestType$ {
  /** @deprecated use `CreateCompanyRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyRequestType$inboundSchema;
  /** @deprecated use `CreateCompanyRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyRequestType$outboundSchema;
}

/** @internal */
export const Addresses$inboundSchema: z.ZodType<
  Addresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateCompanyRequestType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type Addresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const Addresses$outboundSchema: z.ZodType<
  Addresses$Outbound,
  z.ZodTypeDef,
  Addresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateCompanyRequestType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Addresses$ {
  /** @deprecated use `Addresses$inboundSchema` instead. */
  export const inboundSchema = Addresses$inboundSchema;
  /** @deprecated use `Addresses$outboundSchema` instead. */
  export const outboundSchema = Addresses$outboundSchema;
  /** @deprecated use `Addresses$Outbound` instead. */
  export type Outbound = Addresses$Outbound;
}

export function addressesToJSON(addresses: Addresses): string {
  return JSON.stringify(Addresses$outboundSchema.parse(addresses));
}

export function addressesFromJSON(
  jsonString: string,
): SafeParseResult<Addresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Addresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Addresses' from JSON`,
  );
}

/** @internal */
export const SocialLinks$inboundSchema: z.ZodType<
  SocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type SocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const SocialLinks$outboundSchema: z.ZodType<
  SocialLinks$Outbound,
  z.ZodTypeDef,
  SocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SocialLinks$ {
  /** @deprecated use `SocialLinks$inboundSchema` instead. */
  export const inboundSchema = SocialLinks$inboundSchema;
  /** @deprecated use `SocialLinks$outboundSchema` instead. */
  export const outboundSchema = SocialLinks$outboundSchema;
  /** @deprecated use `SocialLinks$Outbound` instead. */
  export type Outbound = SocialLinks$Outbound;
}

export function socialLinksToJSON(socialLinks: SocialLinks): string {
  return JSON.stringify(SocialLinks$outboundSchema.parse(socialLinks));
}

export function socialLinksFromJSON(
  jsonString: string,
): SafeParseResult<SocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SocialLinks' from JSON`,
  );
}

/** @internal */
export const CreateCompanyRequestPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof CreateCompanyRequestPhoneNumbersType> = z.nativeEnum(
    CreateCompanyRequestPhoneNumbersType,
  );

/** @internal */
export const CreateCompanyRequestPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof CreateCompanyRequestPhoneNumbersType> =
    CreateCompanyRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequestPhoneNumbersType$ {
  /** @deprecated use `CreateCompanyRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    CreateCompanyRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `CreateCompanyRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    CreateCompanyRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const PhoneNumbers$inboundSchema: z.ZodType<
  PhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateCompanyRequestPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type PhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const PhoneNumbers$outboundSchema: z.ZodType<
  PhoneNumbers$Outbound,
  z.ZodTypeDef,
  PhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateCompanyRequestPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhoneNumbers$ {
  /** @deprecated use `PhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = PhoneNumbers$inboundSchema;
  /** @deprecated use `PhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = PhoneNumbers$outboundSchema;
  /** @deprecated use `PhoneNumbers$Outbound` instead. */
  export type Outbound = PhoneNumbers$Outbound;
}

export function phoneNumbersToJSON(phoneNumbers: PhoneNumbers): string {
  return JSON.stringify(PhoneNumbers$outboundSchema.parse(phoneNumbers));
}

export function phoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<PhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CreateCompanyRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestEmailsType
> = z.nativeEnum(CreateCompanyRequestEmailsType);

/** @internal */
export const CreateCompanyRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateCompanyRequestEmailsType
> = CreateCompanyRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequestEmailsType$ {
  /** @deprecated use `CreateCompanyRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyRequestEmailsType$inboundSchema;
  /** @deprecated use `CreateCompanyRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyRequestEmailsType$outboundSchema;
}

/** @internal */
export const Emails$inboundSchema: z.ZodType<Emails, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()),
    type: z.nullable(CreateCompanyRequestEmailsType$inboundSchema).optional(),
  });

/** @internal */
export type Emails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const Emails$outboundSchema: z.ZodType<
  Emails$Outbound,
  z.ZodTypeDef,
  Emails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CreateCompanyRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Emails$ {
  /** @deprecated use `Emails$inboundSchema` instead. */
  export const inboundSchema = Emails$inboundSchema;
  /** @deprecated use `Emails$outboundSchema` instead. */
  export const outboundSchema = Emails$outboundSchema;
  /** @deprecated use `Emails$Outbound` instead. */
  export type Outbound = Emails$Outbound;
}

export function emailsToJSON(emails: Emails): string {
  return JSON.stringify(Emails$outboundSchema.parse(emails));
}

export function emailsFromJSON(
  jsonString: string,
): SafeParseResult<Emails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Emails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Emails' from JSON`,
  );
}

/** @internal */
export const CompanyRowType$inboundSchema: z.ZodType<
  CompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CompanyRowType$outboundSchema: z.ZodType<
  CompanyRowType$Outbound,
  z.ZodTypeDef,
  CompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyRowType$ {
  /** @deprecated use `CompanyRowType$inboundSchema` instead. */
  export const inboundSchema = CompanyRowType$inboundSchema;
  /** @deprecated use `CompanyRowType$outboundSchema` instead. */
  export const outboundSchema = CompanyRowType$outboundSchema;
  /** @deprecated use `CompanyRowType$Outbound` instead. */
  export type Outbound = CompanyRowType$Outbound;
}

export function companyRowTypeToJSON(companyRowType: CompanyRowType): string {
  return JSON.stringify(CompanyRowType$outboundSchema.parse(companyRowType));
}

export function companyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<CompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyRowType' from JSON`,
  );
}

/** @internal */
export const Six$inboundSchema: z.ZodType<Six, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Six$Outbound = {};

/** @internal */
export const Six$outboundSchema: z.ZodType<Six$Outbound, z.ZodTypeDef, Six> = z
  .object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Six$ {
  /** @deprecated use `Six$inboundSchema` instead. */
  export const inboundSchema = Six$inboundSchema;
  /** @deprecated use `Six$outboundSchema` instead. */
  export const outboundSchema = Six$outboundSchema;
  /** @deprecated use `Six$Outbound` instead. */
  export type Outbound = Six$Outbound;
}

export function sixToJSON(six: Six): string {
  return JSON.stringify(Six$outboundSchema.parse(six));
}

export function sixFromJSON(
  jsonString: string,
): SafeParseResult<Six, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Six$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Six' from JSON`,
  );
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Four$Outbound = {};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Four$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.string()),
    z.array(z.lazy(() => Six$inboundSchema)),
  ]);

/** @internal */
export type Value$Outbound =
  | Four$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<Six$Outbound>;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([
  z.lazy(() => Four$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Six$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const CustomFields$inboundSchema: z.ZodType<
  CustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Six$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | Four$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<Six$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CustomFields$outboundSchema: z.ZodType<
  CustomFields$Outbound,
  z.ZodTypeDef,
  CustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Six$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFields$ {
  /** @deprecated use `CustomFields$inboundSchema` instead. */
  export const inboundSchema = CustomFields$inboundSchema;
  /** @deprecated use `CustomFields$outboundSchema` instead. */
  export const outboundSchema = CustomFields$outboundSchema;
  /** @deprecated use `CustomFields$Outbound` instead. */
  export type Outbound = CustomFields$Outbound;
}

export function customFieldsToJSON(customFields: CustomFields): string {
  return JSON.stringify(CustomFields$outboundSchema.parse(customFields));
}

export function customFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFields' from JSON`,
  );
}

/** @internal */
export const ExtendPaths$inboundSchema: z.ZodType<
  ExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ExtendPaths$outboundSchema: z.ZodType<
  ExtendPaths$Outbound,
  z.ZodTypeDef,
  ExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtendPaths$ {
  /** @deprecated use `ExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ExtendPaths$inboundSchema;
  /** @deprecated use `ExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ExtendPaths$outboundSchema;
  /** @deprecated use `ExtendPaths$Outbound` instead. */
  export type Outbound = ExtendPaths$Outbound;
}

export function extendPathsToJSON(extendPaths: ExtendPaths): string {
  return JSON.stringify(ExtendPaths$outboundSchema.parse(extendPaths));
}

export function extendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtendPaths' from JSON`,
  );
}

/** @internal */
export const PassThrough$inboundSchema: z.ZodType<
  PassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ExtendPaths$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type PassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ExtendPaths$Outbound> | undefined;
};

/** @internal */
export const PassThrough$outboundSchema: z.ZodType<
  PassThrough$Outbound,
  z.ZodTypeDef,
  PassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ExtendPaths$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PassThrough$ {
  /** @deprecated use `PassThrough$inboundSchema` instead. */
  export const inboundSchema = PassThrough$inboundSchema;
  /** @deprecated use `PassThrough$outboundSchema` instead. */
  export const outboundSchema = PassThrough$outboundSchema;
  /** @deprecated use `PassThrough$Outbound` instead. */
  export type Outbound = PassThrough$Outbound;
}

export function passThroughToJSON(passThrough: PassThrough): string {
  return JSON.stringify(PassThrough$outboundSchema.parse(passThrough));
}

export function passThroughFromJSON(
  jsonString: string,
): SafeParseResult<PassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PassThrough' from JSON`,
  );
}

/** @internal */
export const CreateCompanyRequest$inboundSchema: z.ZodType<
  CreateCompanyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vat_number: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annual_revenue: z.nullable(z.string()).optional(),
  number_of_employees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  sales_tax_number: z.nullable(z.string()).optional(),
  payee_number: z.nullable(z.string()).optional(),
  abn_or_tfn: z.nullable(z.string()).optional(),
  abn_branch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  bank_accounts: z.array(z.lazy(() => BankAccounts$inboundSchema)).optional(),
  websites: z.array(z.lazy(() => Websites$inboundSchema)).optional(),
  addresses: z.array(z.lazy(() => Addresses$inboundSchema)).optional(),
  social_links: z.array(z.lazy(() => SocialLinks$inboundSchema)).optional(),
  phone_numbers: z.array(z.lazy(() => PhoneNumbers$inboundSchema)).optional(),
  emails: z.array(z.lazy(() => Emails$inboundSchema)).optional(),
  row_type: z.lazy(() => CompanyRowType$inboundSchema).optional(),
  custom_fields: z.array(z.lazy(() => CustomFields$inboundSchema)).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  read_only: z.nullable(z.boolean()).optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  pass_through: z.array(z.lazy(() => PassThrough$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "vat_number": "vatNumber",
    "annual_revenue": "annualRevenue",
    "number_of_employees": "numberOfEmployees",
    "sales_tax_number": "salesTaxNumber",
    "payee_number": "payeeNumber",
    "abn_or_tfn": "abnOrTfn",
    "abn_branch": "abnBranch",
    "first_name": "firstName",
    "last_name": "lastName",
    "bank_accounts": "bankAccounts",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "row_type": "rowType",
    "custom_fields": "customFields",
    "read_only": "readOnly",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CreateCompanyRequest$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  bank_accounts?: Array<BankAccounts$Outbound> | undefined;
  websites?: Array<Websites$Outbound> | undefined;
  addresses?: Array<Addresses$Outbound> | undefined;
  social_links?: Array<SocialLinks$Outbound> | undefined;
  phone_numbers?: Array<PhoneNumbers$Outbound> | undefined;
  emails?: Array<Emails$Outbound> | undefined;
  row_type?: CompanyRowType$Outbound | undefined;
  custom_fields?: Array<CustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  pass_through?: Array<PassThrough$Outbound> | undefined;
};

/** @internal */
export const CreateCompanyRequest$outboundSchema: z.ZodType<
  CreateCompanyRequest$Outbound,
  z.ZodTypeDef,
  CreateCompanyRequest
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annualRevenue: z.nullable(z.string()).optional(),
  numberOfEmployees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  salesTaxNumber: z.nullable(z.string()).optional(),
  payeeNumber: z.nullable(z.string()).optional(),
  abnOrTfn: z.nullable(z.string()).optional(),
  abnBranch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  bankAccounts: z.array(z.lazy(() => BankAccounts$outboundSchema)).optional(),
  websites: z.array(z.lazy(() => Websites$outboundSchema)).optional(),
  addresses: z.array(z.lazy(() => Addresses$outboundSchema)).optional(),
  socialLinks: z.array(z.lazy(() => SocialLinks$outboundSchema)).optional(),
  phoneNumbers: z.array(z.lazy(() => PhoneNumbers$outboundSchema)).optional(),
  emails: z.array(z.lazy(() => Emails$outboundSchema)).optional(),
  rowType: z.lazy(() => CompanyRowType$outboundSchema).optional(),
  customFields: z.array(z.lazy(() => CustomFields$outboundSchema)).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  readOnly: z.nullable(z.boolean()).optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  passThrough: z.array(z.lazy(() => PassThrough$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    vatNumber: "vat_number",
    annualRevenue: "annual_revenue",
    numberOfEmployees: "number_of_employees",
    salesTaxNumber: "sales_tax_number",
    payeeNumber: "payee_number",
    abnOrTfn: "abn_or_tfn",
    abnBranch: "abn_branch",
    firstName: "first_name",
    lastName: "last_name",
    bankAccounts: "bank_accounts",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    rowType: "row_type",
    customFields: "custom_fields",
    readOnly: "read_only",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyRequest$ {
  /** @deprecated use `CreateCompanyRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyRequest$inboundSchema;
  /** @deprecated use `CreateCompanyRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyRequest$outboundSchema;
  /** @deprecated use `CreateCompanyRequest$Outbound` instead. */
  export type Outbound = CreateCompanyRequest$Outbound;
}

export function createCompanyRequestToJSON(
  createCompanyRequest: CreateCompanyRequest,
): string {
  return JSON.stringify(
    CreateCompanyRequest$outboundSchema.parse(createCompanyRequest),
  );
}

export function createCompanyRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompanyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompanyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompanyRequest' from JSON`,
  );
}
