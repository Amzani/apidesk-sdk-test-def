/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * The classification of the company's bank account, such as 'savings', 'checking', or 'business'. This string indicates the nature of the account and can affect the terms and conditions applied by the bank. Understanding the account type is crucial for managing financial operations.
 */
export const CompanyAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The classification of the company's bank account, such as 'savings', 'checking', or 'business'. This string indicates the nature of the account and can affect the terms and conditions applied by the bank. Understanding the account type is crucial for managing financial operations.
 */
export type CompanyAccountType = ClosedEnum<typeof CompanyAccountType>;

export type CompanyBankAccounts = {
  /**
   * The name of the bank where the company's account is held. This field is part of the bank account details and helps identify the financial institution associated with the company. It is optional and may not be present for all bank accounts.
   */
  bankName?: string | null | undefined;
  /**
   * The bank account number associated with the company's bank account. This string uniquely identifies the bank account within the bank's system and is essential for transactions and financial operations. It is typically a series of digits and may vary in length depending on the bank.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name under which the company's bank account is registered. This string is used to identify the account holder and is often required for verification purposes during transactions. It usually matches the company's legal or trading name.
   */
  accountName?: string | null | undefined;
  /**
   * The classification of the company's bank account, such as 'savings', 'checking', or 'business'. This string indicates the nature of the account and can affect the terms and conditions applied by the bank. Understanding the account type is crucial for managing financial operations.
   */
  accountType?: CompanyAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN) for the company's bank account. This string is a standardized international code that facilitates cross-border transactions and ensures accurate processing of international payments. It typically includes the country code, bank code, and account number.
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC) associated with the company's bank account. This string serves as a unique identifier for the bank in international transactions, ensuring that funds are routed correctly. It is essential for processing SWIFT payments and other international transfers.
   */
  bic?: string | null | undefined;
  /**
   * The routing number is a nine-digit code used to identify the specific financial institution in the United States where the company's bank account is held. This code is essential for processing domestic wire transfers and electronic payments.
   */
  routingNumber?: string | null | undefined;
  /**
   * The BSB number is a six-digit code used to identify the branch of an Australian or New Zealand bank where the company's account is maintained. It is crucial for processing transactions within these countries.
   */
  bsbNumber?: string | null | undefined;
  /**
   * The branch identifier uniquely identifies the specific branch of a bank or financial institution where the company's account is located. This information is used to ensure accurate routing of transactions to the correct branch.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * The bank code is a unique identifier assigned to banks or financial institutions by a central authority within a country. It is used to facilitate the identification and processing of transactions involving the company's bank account.
   */
  bankCode?: string | null | undefined;
  currency?: Currency | null | undefined;
};

/**
 * The type of website, indicating the role or category of the website within the company's digital strategy. This could include types such as 'corporate', 'e-commerce', or 'blog', helping to classify the website's purpose.
 */
export const CompanyType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website, indicating the role or category of the website within the company's digital strategy. This could include types such as 'corporate', 'e-commerce', or 'blog', helping to classify the website's purpose.
 */
export type CompanyType = ClosedEnum<typeof CompanyType>;

export type CompanyWebsites = {
  /**
   * A unique identifier for each website associated with the company. This ID is used to distinguish between different websites in the company's profile and is crucial for any operations that require specific website identification.
   */
  id?: string | null | undefined;
  /**
   * The URL of the company's website. This is a required field and provides the direct web address where the company's online presence can be accessed. It is essential for linking to the company's digital resources.
   */
  url: string;
  /**
   * The type of website, indicating the role or category of the website within the company's digital strategy. This could include types such as 'corporate', 'e-commerce', or 'blog', helping to classify the website's purpose.
   */
  type?: CompanyType | null | undefined;
};

/**
 * Specifies the category or purpose of the address, such as 'billing', 'shipping', or 'office'. This helps in identifying the role of the address within the company's operations. The value is a string that describes the address type.
 */
export const CompanyAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category or purpose of the address, such as 'billing', 'shipping', or 'office'. This helps in identifying the role of the address within the company's operations. The value is a string that describes the address type.
 */
export type CompanyAddressesType = ClosedEnum<typeof CompanyAddressesType>;

export type CompanyAddresses = {
  /**
   * A unique identifier assigned to each address associated with the company. This ID is used to distinguish between different addresses in the company's record. It is typically a string of alphanumeric characters.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category or purpose of the address, such as 'billing', 'shipping', or 'office'. This helps in identifying the role of the address within the company's operations. The value is a string that describes the address type.
   */
  type?: CompanyAddressesType | null | undefined;
  /**
   * Represents the full address as a single string, which may include street, city, state, and postal code. This format is used when structured address data is not available from the API. It provides a complete address in a single field.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address, which could be a building name, company department, or any other relevant identifier. This helps in quickly identifying the address's significance or location within the company.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically including the street number, street name, and any additional location details like suite or apartment number. This is a crucial part of the address for identifying the exact location.
   */
  line1?: string | null | undefined;
  /**
   * This field contains the second line of the company's address, often used for additional location details such as suite numbers or building names. It is part of the address structure returned in the response, allowing applications to display or process comprehensive address information. The value is expected to be a string, and it is optional, meaning it may not be present if not applicable.
   */
  line2?: string | null | undefined;
  /**
   * This field holds the third line of the company's address, which can be used for further address details that do not fit in the first two lines. It is included in the address data returned by the API, providing additional context for precise location identification. The value is a string and is optional, so it may be omitted if unnecessary.
   */
  line3?: string | null | undefined;
  /**
   * This property represents the fourth line of the company's address, typically used for any remaining address information that needs to be captured. It is part of the detailed address data provided in the response, ensuring that all address components are covered. The value is a string and is optional, allowing flexibility in address formatting.
   */
  line4?: string | null | undefined;
  /**
   * This field specifies the street number of the company's address, which is a crucial component for identifying the exact location of the company. It is included in the address details returned by the API, aiding in accurate address representation. The value is expected to be a string and is optional, as some addresses may not include a street number.
   */
  streetNumber?: string | null | undefined;
  /**
   * This property contains the name of the city where the company is located. It is a key part of the address information returned in the API response, helping to identify the geographical location of the company. The value is a string and is optional, though typically present to provide context about the company's location.
   */
  city?: string | null | undefined;
  /**
   * The state or region where the company is located. This field provides geographical context and may be used for location-based services or analytics. The value is expected to be a string representing the state's name.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code associated with the company's address. This field is used for mailing purposes and location identification. The value should be a string formatted according to the local postal system.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the company's location, following the ISO 3166-1 alpha-2 standard. This two-letter code helps in identifying the country for international operations and compliance. The value is a string representing the country code.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the company's address, used for mapping and geolocation services. This value is a string representing the latitude in decimal degrees.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the company's address, essential for mapping and geolocation services. This value is a string representing the longitude in decimal degrees.
   */
  longitude?: string | null | undefined;
  /**
   * This field contains the name of the county or sublocality associated with the company's address. It helps in identifying the specific region within a larger area, which can be crucial for location-based services or regional analysis. The value is expected to be a string representing the county name.
   */
  county?: string | null | undefined;
  /**
   * The name of the primary contact person located at the company's address. This information is useful for direct communication and correspondence with the company. The value should be a string containing the full name of the contact person.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the company's address, such as Mr., Ms., or Dr. This field helps in formal communication and is expected to be a string representing the appropriate salutation.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the company's address, used for telephonic communication. This should be a string formatted according to international or local standards, enabling direct contact with the company.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number for the company's address, allowing for the transmission of documents via fax. This field is a string and should be formatted to comply with standard fax number conventions.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the company's address. This field contains the primary contact email and is formatted as a standard email string (e.g., example@domain.com). It is used for communication purposes and may be displayed in company profiles or contact lists.
   */
  email?: string | null | undefined;
  /**
   * The website URL linked to the company's address. This property holds the main web address where more information about the company can be found. It is formatted as a standard URL (e.g., https://www.company.com) and is useful for directing users to the company's online presence.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the company's address. This field can include any extra information or comments that are relevant to the address, such as delivery instructions or historical data. It is a free-text field, allowing for varied content based on specific needs.
   */
  notes?: string | null | undefined;
  /**
   * A version identifier for the company's address record, used to track changes and prevent data conflicts. This binary value is automatically incremented with each update to ensure data integrity and consistency across systems. It is crucial for applications that handle concurrent data modifications.
   */
  rowVersion?: string | null | undefined;
};

export type CompanySocialLinks = {
  /**
   * A unique identifier for each social link associated with the company. This ID is used to distinguish between different social media profiles linked to the company, allowing for precise management and retrieval of social link data.
   */
  id?: string | null | undefined;
  /**
   * The URL of the company's social media profile. This field is mandatory and should contain a valid web address, such as 'https://www.twitter.com/apideck', which directs to the company's specific social media page.
   */
  url: string;
  /**
   * Specifies the type of social media platform linked to the company, such as 'twitter' or 'linkedin'. This helps categorize the social links and is useful for filtering or displaying specific types of social media connections.
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number, such as 'mobile', 'landline', or 'fax', provided as a string. This field helps categorize the phone number for appropriate usage and handling within the CRM system.
 */
export const CompanyPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number, such as 'mobile', 'landline', or 'fax', provided as a string. This field helps categorize the phone number for appropriate usage and handling within the CRM system.
 */
export type CompanyPhoneNumbersType = ClosedEnum<
  typeof CompanyPhoneNumbersType
>;

export type CompanyPhoneNumbers = {
  /**
   * A unique identifier for each phone number associated with the company. This ID helps in managing and referencing specific phone numbers within the company's contact information.
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, represented as a string starting with a '+' followed by the international dialing code. This field helps identify the country of origin for the phone number, which is crucial for international communications.
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, typically a 3-digit string that identifies a specific geographic region within a country. This field is used to route calls to the correct local area.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number, excluding the country and area codes, provided as a string. This is the primary contact number for the company and is essential for direct communication.
   */
  number: string;
  /**
   * The extension of the phone number, which is an additional numeric string used to direct calls to a specific department or individual within the company. This field is optional and is used in larger organizations to facilitate internal call routing.
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number, such as 'mobile', 'landline', or 'fax', provided as a string. This field helps categorize the phone number for appropriate usage and handling within the CRM system.
   */
  type?: CompanyPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This categorization helps in organizing and managing different email addresses based on their usage context.
 */
export const CompanyEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This categorization helps in organizing and managing different email addresses based on their usage context.
 */
export type CompanyEmailsType = ClosedEnum<typeof CompanyEmailsType>;

export type CompanyEmails = {
  /**
   * A unique identifier for each email address associated with the company. This ID is used to distinguish between different email entries and is essential for operations that require specific email identification.
   */
  id?: string | null | undefined;
  /**
   * The actual email address associated with the company. This field is mandatory and is used for communication and identification purposes within the CRM system.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work', 'personal', or 'other'. This categorization helps in organizing and managing different email addresses based on their usage context.
   */
  type?: CompanyEmailsType | null | undefined;
};

/**
 * An object that defines the type of data row returned in the response. This property provides metadata about the structure or category of the data, aiding in the interpretation and processing of the company's information.
 */
export type CompanyCompanyRowType = {
  /**
   * A unique identifier representing the type of row associated with the company data. This ID helps in categorizing or differentiating the company data within the CRM system. It is typically used for internal processing and organization of company records.
   */
  id?: string | null | undefined;
  /**
   * The name of the row type associated with the company data. This property provides a human-readable label for the row type, aiding in the understanding and categorization of the company data within the CRM system.
   */
  name?: string | null | undefined;
};

export type Value6 = {};

export type Value4 = {};

/**
 * The value assigned to the custom field for the company. This can be any string that represents specific data or information relevant to the custom field's purpose. It helps in customizing the company's data profile according to specific needs.
 */
export type CompanyValue =
  | Value4
  | string
  | number
  | boolean
  | Array<string>
  | Array<Value6>;

export type CompanyCustomFields = {
  /**
   * A unique identifier for each custom field associated with the company. This ID is essential for distinguishing between different custom fields and is used for referencing specific fields in operations or queries.
   */
  id: string | null;
  /**
   * The name of the custom field associated with the company. This property provides a descriptive label for the custom field, making it easier to identify and understand the purpose of the field within the company's data structure.
   */
  name?: string | null | undefined;
  /**
   * This field contains additional information about a custom field associated with the company. It provides context or details that help in understanding the purpose or usage of the custom field within the company's CRM record. The value is a string that can include any descriptive text.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field for the company. This can be any string that represents specific data or information relevant to the custom field's purpose. It helps in customizing the company's data profile according to specific needs.
   */
  value?:
    | Value4
    | string
    | number
    | boolean
    | Array<string>
    | Array<Value6>
    | null
    | undefined;
};

/**
 * The 'custom_mappings' field contains any additional, user-defined mappings that have been configured for the company resource. This object holds key-value pairs that extend the standard data model, allowing for customization and integration with other systems or processes.
 */
export type CustomMappings = {};

export type CompanyExtendPaths = {
  /**
   * The 'path' within 'extend_paths' is a JSONPath string that specifies the exact location in the data structure where a value should be applied. This allows for targeted modifications, ensuring that changes are made precisely where needed within the data model. This field is required for each object in the 'extend_paths' array.
   */
  path: string;
  /**
   * This property holds the value to be set at a specified path within the company's data structure. The format of this value can vary, as it is determined by the specific path it is associated with. This allows for flexible data manipulation within the company's record, enabling developers to update or extend company details dynamically.
   */
  value?: any | undefined;
};

export type CompanyPassThrough = {
  /**
   * The 'service_id' is a unique identifier for the specific service to which this pass-through operation should be applied. It is crucial for routing the request to the correct service within the CRM system. This field is mandatory and must be a valid string representing the service's ID.
   */
  serviceId: string;
  /**
   * The 'operation_id' is an optional identifier that specifies a particular workflow operation for the pass-through. This is particularly useful when the request involves multiple downstream operations, allowing for precise targeting of the operation within the CRM system. If provided, it should be a valid string.
   */
  operationId?: string | undefined;
  /**
   * The 'extend_object' is a flexible object that allows for the inclusion of additional properties directly. This can be used to extend the data model with custom fields or attributes as needed for specific use cases. The structure of this object is not predefined, allowing for dynamic extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * The 'extend_paths' is an array of objects designed for structured data modifications. Each object within the array specifies a path and value for modifying the data structure, enabling complex data transformations and extensions. This is useful for scenarios requiring precise data manipulation.
   */
  extendPaths?: Array<CompanyExtendPaths> | undefined;
};

/**
 * This object contains all the detailed information about the company retrieved from the CRM system. It serves as the main container for the company's data, including identifiers, names, and other relevant attributes. The structure of this object is crucial for applications that need to process or display comprehensive company details.
 */
export type Company = {
  /**
   * A unique identifier assigned to the company within the CRM system. This string value is used to distinguish the company from others and is essential for referencing the company in subsequent API calls or database operations.
   */
  id?: string | undefined;
  /**
   * The official name of the company as recorded in the CRM system. This string is a key attribute used for display purposes and to identify the company in user interfaces and reports.
   */
  name: string | null;
  /**
   * The total number of interactions recorded with the company, such as meetings, calls, or emails. This integer value provides insight into the level of engagement and activity between the company and the CRM users.
   */
  interactionCount?: number | null | undefined;
  /**
   * The identifier of the user or entity that owns or manages the company record within the CRM system. This string helps in assigning responsibility and tracking who is accountable for the company's data and interactions.
   */
  ownerId?: string | null | undefined;
  /**
   * The URL of the company's image or logo. This string should be a valid URL pointing to an image file, which can be used to visually represent the company in applications. It is optional and may not be present if the company does not have an associated image.
   */
  image?: string | null | undefined;
  /**
   * A textual description providing an overview of the company. This string can include details about the company's mission, services, or any other relevant information that helps in understanding the company's profile. It is optional and may vary in length and detail.
   */
  description?: string | null | undefined;
  /**
   * The company's VAT (Value Added Tax) number, which is a unique identifier used for tax purposes. This string is typically formatted according to the country's VAT regulations and is essential for financial transactions and compliance. It is optional and may not be present if the company is not VAT registered.
   */
  vatNumber?: string | null | undefined;
  currency?: Currency | null | undefined;
  /**
   * The current status of the company within the CRM system. This string indicates whether the company is active, inactive, or in another state, affecting how the company data is processed and displayed. It is optional and provides insight into the company's operational state.
   */
  status?: string | null | undefined;
  /**
   * The fax number of the company, formatted as a string. This field provides the company's fax contact information, which can be used for sending documents via fax. It is optional and may not be present if the company does not use fax communication.
   */
  fax?: string | null | undefined;
  /**
   * The annual revenue of the company, represented as a string. This field indicates the total income generated by the company over the past year. It is useful for assessing the company's financial size and market position, though it is optional and may not always be available.
   */
  annualRevenue?: string | null | undefined;
  /**
   * The number of employees working at the company, expressed as a string. This field provides insight into the company's size and operational capacity. It is optional and may not be included if the information is not available.
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * The industry in which the company operates, given as a string. This field categorizes the type of business activities the company is involved in, helping to understand its market sector. It is optional and may not be specified for all companies.
   */
  industry?: string | null | undefined;
  /**
   * The ownership type of the company, described as a string. This field indicates whether the company is privately held, publicly traded, or has another form of ownership. It provides context about the company's governance structure and is optional.
   */
  ownership?: string | null | undefined;
  /**
   * The sales tax number uniquely identifies the company for tax purposes, allowing it to report and remit sales tax to the appropriate authorities. This string is crucial for businesses operating in regions where sales tax is applicable, ensuring compliance with local tax regulations.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * The payee number is a unique identifier for the company as a payee in tax-related transactions. This string is used in financial systems to ensure accurate tax reporting and payment processing, particularly in jurisdictions that require such identifiers.
   */
  payeeNumber?: string | null | undefined;
  /**
   * This field contains either the Australian Business Number (ABN) or the Tax File Number (TFN), essential for business operations and tax purposes in Australia. The ABN is used for business identification, while the TFN is necessary for individual tax reporting. The format is a string that aligns with Australian tax regulations.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * The ABN Branch number is used to identify a specific branch of a business for separate GST accounting from its parent entity. This string is important for businesses that manage multiple branches and need to report GST separately for each branch, ensuring accurate tax compliance.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) is a nine-digit identifier for companies registered in Australia, formatted as three groups of three digits (e.g., XXX XXX XXX). This string is used for legal and regulatory purposes, ensuring the company is recognized by the Australian Securities and Investments Commission (ASIC).
   */
  acn?: string | null | undefined;
  /**
   * The first name of the person associated with the company. This field may be used to identify key contacts or representatives within the company. It is optional and may not be present for all company records.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person associated with the company. This field complements the first name to provide a full name for contacts or representatives. It is optional and may not be present for all company records.
   */
  lastName?: string | null | undefined;
  /**
   * The unique identifier of the parent company, if applicable. This field helps in understanding the hierarchical structure of companies within the CRM. It is optional and may not be present if the company does not have a parent entity.
   */
  parentId?: string | null | undefined;
  /**
   * A list of bank accounts associated with the company. Each entry in the array represents a separate bank account, providing details such as bank name and account number. This field is optional and may not be present for all companies.
   */
  bankAccounts?: Array<CompanyBankAccounts> | undefined;
  /**
   * An array containing details of the company's websites. Each entry in the array represents a website associated with the company, including its unique identifier, URL, and type. This property helps in understanding the online presence of the company.
   */
  websites?: Array<CompanyWebsites> | undefined;
  /**
   * An array of addresses associated with the company. Each entry provides detailed information about a specific location related to the company, such as headquarters or branch offices. This is useful for understanding the geographical footprint of the company.
   */
  addresses?: Array<CompanyAddresses> | undefined;
  /**
   * An array of social media links associated with the company. Each entry in the array represents a different social media platform where the company maintains a presence. This allows users to easily access and interact with the company through various social networks.
   */
  socialLinks?: Array<CompanySocialLinks> | undefined;
  /**
   * An array containing the company's phone numbers. Each entry in the array represents a distinct phone number record, which may include details such as type and usage context within the company.
   */
  phoneNumbers?: Array<CompanyPhoneNumbers> | undefined;
  /**
   * An array containing the email addresses associated with the company. Each entry in the array is an object that includes details such as the email address itself, its unique identifier, and the type of email. This structure allows applications to handle multiple email contacts for a company efficiently.
   */
  emails?: Array<CompanyEmails> | undefined;
  /**
   * An object that defines the type of data row returned in the response. This property provides metadata about the structure or category of the data, aiding in the interpretation and processing of the company's information.
   */
  rowType?: CompanyCompanyRowType | undefined;
  /**
   * An array containing custom fields associated with the company. Each entry in the array represents a custom field, allowing for additional, user-defined data to be stored and retrieved alongside standard company information.
   */
  customFields?: Array<CompanyCustomFields> | undefined;
  /**
   * An array of tags associated with the company. Each tag is a string that categorizes or labels the company for easier identification and filtering within the CRM system. Tags help in organizing and managing company records efficiently.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Indicates whether the company record is read-only. A value of 'true' means the record cannot be modified, ensuring data integrity and preventing unauthorized changes. This is crucial for maintaining consistent and accurate company information.
   */
  readOnly?: boolean | null | undefined;
  /**
   * The 'last_activity_at' field records the date and time of the most recent interaction or activity related to the company. This timestamp helps track engagement and is formatted as an ISO 8601 string, such as '2023-10-15T13:45:30Z'. It is useful for understanding the recency of company interactions within the CRM system.
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * The 'deleted' field indicates whether the company record has been marked as deleted in the CRM system. A value of 'true' means the company is considered deleted and may not be actively used in operations, while 'false' indicates it is still active. This helps manage the lifecycle of company records.
   */
  deleted?: boolean | undefined;
  /**
   * The 'salutation' field provides a formal greeting or title for a contact person associated with the company, such as 'Mr', 'Mrs', or 'Dr'. This string is used to address individuals respectfully in communications and is optional depending on the company's data requirements.
   */
  salutation?: string | null | undefined;
  /**
   * The 'birthday' field captures the date of birth of a contact person linked to the company. This information is formatted as a date string (e.g., 'YYYY-MM-DD') and can be used for personalizing interactions or for demographic analysis within the CRM.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * The 'custom_mappings' field contains any additional, user-defined mappings that have been configured for the company resource. This object holds key-value pairs that extend the standard data model, allowing for customization and integration with other systems or processes.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * The unique identifier of the user who last updated the company record. This field helps track changes and identify the responsible user. It is typically a string representing a user ID.
   */
  updatedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who initially created the company record. This information is useful for auditing and tracking the origin of the data entry. It is usually a string representing a user ID.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the company record was last updated. This field is crucial for understanding the recency of the data and is formatted as an ISO 8601 date string.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp indicating when the company record was originally created. This helps in tracking the age of the record and is formatted as an ISO 8601 date string.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or structured modifications in the request body. This is particularly useful for extending functionality or integrating with other services.
   */
  passThrough?: Array<CompanyPassThrough> | undefined;
};

/** @internal */
export const CompanyAccountType$inboundSchema: z.ZodNativeEnum<
  typeof CompanyAccountType
> = z.nativeEnum(CompanyAccountType);

/** @internal */
export const CompanyAccountType$outboundSchema: z.ZodNativeEnum<
  typeof CompanyAccountType
> = CompanyAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyAccountType$ {
  /** @deprecated use `CompanyAccountType$inboundSchema` instead. */
  export const inboundSchema = CompanyAccountType$inboundSchema;
  /** @deprecated use `CompanyAccountType$outboundSchema` instead. */
  export const outboundSchema = CompanyAccountType$outboundSchema;
}

/** @internal */
export const CompanyBankAccounts$inboundSchema: z.ZodType<
  CompanyBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(CompanyAccountType$inboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type CompanyBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const CompanyBankAccounts$outboundSchema: z.ZodType<
  CompanyBankAccounts$Outbound,
  z.ZodTypeDef,
  CompanyBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(CompanyAccountType$outboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyBankAccounts$ {
  /** @deprecated use `CompanyBankAccounts$inboundSchema` instead. */
  export const inboundSchema = CompanyBankAccounts$inboundSchema;
  /** @deprecated use `CompanyBankAccounts$outboundSchema` instead. */
  export const outboundSchema = CompanyBankAccounts$outboundSchema;
  /** @deprecated use `CompanyBankAccounts$Outbound` instead. */
  export type Outbound = CompanyBankAccounts$Outbound;
}

export function companyBankAccountsToJSON(
  companyBankAccounts: CompanyBankAccounts,
): string {
  return JSON.stringify(
    CompanyBankAccounts$outboundSchema.parse(companyBankAccounts),
  );
}

export function companyBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<CompanyBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyBankAccounts' from JSON`,
  );
}

/** @internal */
export const CompanyType$inboundSchema: z.ZodNativeEnum<typeof CompanyType> = z
  .nativeEnum(CompanyType);

/** @internal */
export const CompanyType$outboundSchema: z.ZodNativeEnum<typeof CompanyType> =
  CompanyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyType$ {
  /** @deprecated use `CompanyType$inboundSchema` instead. */
  export const inboundSchema = CompanyType$inboundSchema;
  /** @deprecated use `CompanyType$outboundSchema` instead. */
  export const outboundSchema = CompanyType$outboundSchema;
}

/** @internal */
export const CompanyWebsites$inboundSchema: z.ZodType<
  CompanyWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CompanyType$inboundSchema).optional(),
});

/** @internal */
export type CompanyWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CompanyWebsites$outboundSchema: z.ZodType<
  CompanyWebsites$Outbound,
  z.ZodTypeDef,
  CompanyWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CompanyType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyWebsites$ {
  /** @deprecated use `CompanyWebsites$inboundSchema` instead. */
  export const inboundSchema = CompanyWebsites$inboundSchema;
  /** @deprecated use `CompanyWebsites$outboundSchema` instead. */
  export const outboundSchema = CompanyWebsites$outboundSchema;
  /** @deprecated use `CompanyWebsites$Outbound` instead. */
  export type Outbound = CompanyWebsites$Outbound;
}

export function companyWebsitesToJSON(
  companyWebsites: CompanyWebsites,
): string {
  return JSON.stringify(CompanyWebsites$outboundSchema.parse(companyWebsites));
}

export function companyWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<CompanyWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyWebsites' from JSON`,
  );
}

/** @internal */
export const CompanyAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof CompanyAddressesType
> = z.nativeEnum(CompanyAddressesType);

/** @internal */
export const CompanyAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof CompanyAddressesType
> = CompanyAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyAddressesType$ {
  /** @deprecated use `CompanyAddressesType$inboundSchema` instead. */
  export const inboundSchema = CompanyAddressesType$inboundSchema;
  /** @deprecated use `CompanyAddressesType$outboundSchema` instead. */
  export const outboundSchema = CompanyAddressesType$outboundSchema;
}

/** @internal */
export const CompanyAddresses$inboundSchema: z.ZodType<
  CompanyAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CompanyAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type CompanyAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const CompanyAddresses$outboundSchema: z.ZodType<
  CompanyAddresses$Outbound,
  z.ZodTypeDef,
  CompanyAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CompanyAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyAddresses$ {
  /** @deprecated use `CompanyAddresses$inboundSchema` instead. */
  export const inboundSchema = CompanyAddresses$inboundSchema;
  /** @deprecated use `CompanyAddresses$outboundSchema` instead. */
  export const outboundSchema = CompanyAddresses$outboundSchema;
  /** @deprecated use `CompanyAddresses$Outbound` instead. */
  export type Outbound = CompanyAddresses$Outbound;
}

export function companyAddressesToJSON(
  companyAddresses: CompanyAddresses,
): string {
  return JSON.stringify(
    CompanyAddresses$outboundSchema.parse(companyAddresses),
  );
}

export function companyAddressesFromJSON(
  jsonString: string,
): SafeParseResult<CompanyAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyAddresses' from JSON`,
  );
}

/** @internal */
export const CompanySocialLinks$inboundSchema: z.ZodType<
  CompanySocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompanySocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CompanySocialLinks$outboundSchema: z.ZodType<
  CompanySocialLinks$Outbound,
  z.ZodTypeDef,
  CompanySocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanySocialLinks$ {
  /** @deprecated use `CompanySocialLinks$inboundSchema` instead. */
  export const inboundSchema = CompanySocialLinks$inboundSchema;
  /** @deprecated use `CompanySocialLinks$outboundSchema` instead. */
  export const outboundSchema = CompanySocialLinks$outboundSchema;
  /** @deprecated use `CompanySocialLinks$Outbound` instead. */
  export type Outbound = CompanySocialLinks$Outbound;
}

export function companySocialLinksToJSON(
  companySocialLinks: CompanySocialLinks,
): string {
  return JSON.stringify(
    CompanySocialLinks$outboundSchema.parse(companySocialLinks),
  );
}

export function companySocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<CompanySocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanySocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanySocialLinks' from JSON`,
  );
}

/** @internal */
export const CompanyPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof CompanyPhoneNumbersType
> = z.nativeEnum(CompanyPhoneNumbersType);

/** @internal */
export const CompanyPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof CompanyPhoneNumbersType
> = CompanyPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyPhoneNumbersType$ {
  /** @deprecated use `CompanyPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = CompanyPhoneNumbersType$inboundSchema;
  /** @deprecated use `CompanyPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema = CompanyPhoneNumbersType$outboundSchema;
}

/** @internal */
export const CompanyPhoneNumbers$inboundSchema: z.ZodType<
  CompanyPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CompanyPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type CompanyPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const CompanyPhoneNumbers$outboundSchema: z.ZodType<
  CompanyPhoneNumbers$Outbound,
  z.ZodTypeDef,
  CompanyPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CompanyPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyPhoneNumbers$ {
  /** @deprecated use `CompanyPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = CompanyPhoneNumbers$inboundSchema;
  /** @deprecated use `CompanyPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = CompanyPhoneNumbers$outboundSchema;
  /** @deprecated use `CompanyPhoneNumbers$Outbound` instead. */
  export type Outbound = CompanyPhoneNumbers$Outbound;
}

export function companyPhoneNumbersToJSON(
  companyPhoneNumbers: CompanyPhoneNumbers,
): string {
  return JSON.stringify(
    CompanyPhoneNumbers$outboundSchema.parse(companyPhoneNumbers),
  );
}

export function companyPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<CompanyPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CompanyEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof CompanyEmailsType
> = z.nativeEnum(CompanyEmailsType);

/** @internal */
export const CompanyEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof CompanyEmailsType
> = CompanyEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyEmailsType$ {
  /** @deprecated use `CompanyEmailsType$inboundSchema` instead. */
  export const inboundSchema = CompanyEmailsType$inboundSchema;
  /** @deprecated use `CompanyEmailsType$outboundSchema` instead. */
  export const outboundSchema = CompanyEmailsType$outboundSchema;
}

/** @internal */
export const CompanyEmails$inboundSchema: z.ZodType<
  CompanyEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CompanyEmailsType$inboundSchema).optional(),
});

/** @internal */
export type CompanyEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const CompanyEmails$outboundSchema: z.ZodType<
  CompanyEmails$Outbound,
  z.ZodTypeDef,
  CompanyEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CompanyEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyEmails$ {
  /** @deprecated use `CompanyEmails$inboundSchema` instead. */
  export const inboundSchema = CompanyEmails$inboundSchema;
  /** @deprecated use `CompanyEmails$outboundSchema` instead. */
  export const outboundSchema = CompanyEmails$outboundSchema;
  /** @deprecated use `CompanyEmails$Outbound` instead. */
  export type Outbound = CompanyEmails$Outbound;
}

export function companyEmailsToJSON(companyEmails: CompanyEmails): string {
  return JSON.stringify(CompanyEmails$outboundSchema.parse(companyEmails));
}

export function companyEmailsFromJSON(
  jsonString: string,
): SafeParseResult<CompanyEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyEmails' from JSON`,
  );
}

/** @internal */
export const CompanyCompanyRowType$inboundSchema: z.ZodType<
  CompanyCompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompanyCompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CompanyCompanyRowType$outboundSchema: z.ZodType<
  CompanyCompanyRowType$Outbound,
  z.ZodTypeDef,
  CompanyCompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyCompanyRowType$ {
  /** @deprecated use `CompanyCompanyRowType$inboundSchema` instead. */
  export const inboundSchema = CompanyCompanyRowType$inboundSchema;
  /** @deprecated use `CompanyCompanyRowType$outboundSchema` instead. */
  export const outboundSchema = CompanyCompanyRowType$outboundSchema;
  /** @deprecated use `CompanyCompanyRowType$Outbound` instead. */
  export type Outbound = CompanyCompanyRowType$Outbound;
}

export function companyCompanyRowTypeToJSON(
  companyCompanyRowType: CompanyCompanyRowType,
): string {
  return JSON.stringify(
    CompanyCompanyRowType$outboundSchema.parse(companyCompanyRowType),
  );
}

export function companyCompanyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<CompanyCompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyCompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyCompanyRowType' from JSON`,
  );
}

/** @internal */
export const Value6$inboundSchema: z.ZodType<Value6, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value6$Outbound = {};

/** @internal */
export const Value6$outboundSchema: z.ZodType<
  Value6$Outbound,
  z.ZodTypeDef,
  Value6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value6$ {
  /** @deprecated use `Value6$inboundSchema` instead. */
  export const inboundSchema = Value6$inboundSchema;
  /** @deprecated use `Value6$outboundSchema` instead. */
  export const outboundSchema = Value6$outboundSchema;
  /** @deprecated use `Value6$Outbound` instead. */
  export type Outbound = Value6$Outbound;
}

export function value6ToJSON(value6: Value6): string {
  return JSON.stringify(Value6$outboundSchema.parse(value6));
}

export function value6FromJSON(
  jsonString: string,
): SafeParseResult<Value6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value6' from JSON`,
  );
}

/** @internal */
export const Value4$inboundSchema: z.ZodType<Value4, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value4$Outbound = {};

/** @internal */
export const Value4$outboundSchema: z.ZodType<
  Value4$Outbound,
  z.ZodTypeDef,
  Value4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value4$ {
  /** @deprecated use `Value4$inboundSchema` instead. */
  export const inboundSchema = Value4$inboundSchema;
  /** @deprecated use `Value4$outboundSchema` instead. */
  export const outboundSchema = Value4$outboundSchema;
  /** @deprecated use `Value4$Outbound` instead. */
  export type Outbound = Value4$Outbound;
}

export function value4ToJSON(value4: Value4): string {
  return JSON.stringify(Value4$outboundSchema.parse(value4));
}

export function value4FromJSON(
  jsonString: string,
): SafeParseResult<Value4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value4' from JSON`,
  );
}

/** @internal */
export const CompanyValue$inboundSchema: z.ZodType<
  CompanyValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Value4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Value6$inboundSchema)),
]);

/** @internal */
export type CompanyValue$Outbound =
  | Value4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<Value6$Outbound>;

/** @internal */
export const CompanyValue$outboundSchema: z.ZodType<
  CompanyValue$Outbound,
  z.ZodTypeDef,
  CompanyValue
> = z.union([
  z.lazy(() => Value4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Value6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyValue$ {
  /** @deprecated use `CompanyValue$inboundSchema` instead. */
  export const inboundSchema = CompanyValue$inboundSchema;
  /** @deprecated use `CompanyValue$outboundSchema` instead. */
  export const outboundSchema = CompanyValue$outboundSchema;
  /** @deprecated use `CompanyValue$Outbound` instead. */
  export type Outbound = CompanyValue$Outbound;
}

export function companyValueToJSON(companyValue: CompanyValue): string {
  return JSON.stringify(CompanyValue$outboundSchema.parse(companyValue));
}

export function companyValueFromJSON(
  jsonString: string,
): SafeParseResult<CompanyValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyValue' from JSON`,
  );
}

/** @internal */
export const CompanyCustomFields$inboundSchema: z.ZodType<
  CompanyCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Value4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Value6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CompanyCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | Value4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<Value6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CompanyCustomFields$outboundSchema: z.ZodType<
  CompanyCustomFields$Outbound,
  z.ZodTypeDef,
  CompanyCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Value4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Value6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyCustomFields$ {
  /** @deprecated use `CompanyCustomFields$inboundSchema` instead. */
  export const inboundSchema = CompanyCustomFields$inboundSchema;
  /** @deprecated use `CompanyCustomFields$outboundSchema` instead. */
  export const outboundSchema = CompanyCustomFields$outboundSchema;
  /** @deprecated use `CompanyCustomFields$Outbound` instead. */
  export type Outbound = CompanyCustomFields$Outbound;
}

export function companyCustomFieldsToJSON(
  companyCustomFields: CompanyCustomFields,
): string {
  return JSON.stringify(
    CompanyCustomFields$outboundSchema.parse(companyCustomFields),
  );
}

export function companyCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CompanyCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyCustomFields' from JSON`,
  );
}

/** @internal */
export const CustomMappings$inboundSchema: z.ZodType<
  CustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomMappings$Outbound = {};

/** @internal */
export const CustomMappings$outboundSchema: z.ZodType<
  CustomMappings$Outbound,
  z.ZodTypeDef,
  CustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomMappings$ {
  /** @deprecated use `CustomMappings$inboundSchema` instead. */
  export const inboundSchema = CustomMappings$inboundSchema;
  /** @deprecated use `CustomMappings$outboundSchema` instead. */
  export const outboundSchema = CustomMappings$outboundSchema;
  /** @deprecated use `CustomMappings$Outbound` instead. */
  export type Outbound = CustomMappings$Outbound;
}

export function customMappingsToJSON(customMappings: CustomMappings): string {
  return JSON.stringify(CustomMappings$outboundSchema.parse(customMappings));
}

export function customMappingsFromJSON(
  jsonString: string,
): SafeParseResult<CustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomMappings' from JSON`,
  );
}

/** @internal */
export const CompanyExtendPaths$inboundSchema: z.ZodType<
  CompanyExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CompanyExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CompanyExtendPaths$outboundSchema: z.ZodType<
  CompanyExtendPaths$Outbound,
  z.ZodTypeDef,
  CompanyExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyExtendPaths$ {
  /** @deprecated use `CompanyExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CompanyExtendPaths$inboundSchema;
  /** @deprecated use `CompanyExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CompanyExtendPaths$outboundSchema;
  /** @deprecated use `CompanyExtendPaths$Outbound` instead. */
  export type Outbound = CompanyExtendPaths$Outbound;
}

export function companyExtendPathsToJSON(
  companyExtendPaths: CompanyExtendPaths,
): string {
  return JSON.stringify(
    CompanyExtendPaths$outboundSchema.parse(companyExtendPaths),
  );
}

export function companyExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CompanyExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyExtendPaths' from JSON`,
  );
}

/** @internal */
export const CompanyPassThrough$inboundSchema: z.ZodType<
  CompanyPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => CompanyExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CompanyPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CompanyExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CompanyPassThrough$outboundSchema: z.ZodType<
  CompanyPassThrough$Outbound,
  z.ZodTypeDef,
  CompanyPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => CompanyExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyPassThrough$ {
  /** @deprecated use `CompanyPassThrough$inboundSchema` instead. */
  export const inboundSchema = CompanyPassThrough$inboundSchema;
  /** @deprecated use `CompanyPassThrough$outboundSchema` instead. */
  export const outboundSchema = CompanyPassThrough$outboundSchema;
  /** @deprecated use `CompanyPassThrough$Outbound` instead. */
  export type Outbound = CompanyPassThrough$Outbound;
}

export function companyPassThroughToJSON(
  companyPassThrough: CompanyPassThrough,
): string {
  return JSON.stringify(
    CompanyPassThrough$outboundSchema.parse(companyPassThrough),
  );
}

export function companyPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CompanyPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyPassThrough' from JSON`,
  );
}

/** @internal */
export const Company$inboundSchema: z.ZodType<Company, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    name: z.nullable(z.string()),
    interaction_count: z.nullable(z.number().int()).optional(),
    owner_id: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    vat_number: z.nullable(z.string()).optional(),
    currency: z.nullable(Currency$inboundSchema).optional(),
    status: z.nullable(z.string()).optional(),
    fax: z.nullable(z.string()).optional(),
    annual_revenue: z.nullable(z.string()).optional(),
    number_of_employees: z.nullable(z.string()).optional(),
    industry: z.nullable(z.string()).optional(),
    ownership: z.nullable(z.string()).optional(),
    sales_tax_number: z.nullable(z.string()).optional(),
    payee_number: z.nullable(z.string()).optional(),
    abn_or_tfn: z.nullable(z.string()).optional(),
    abn_branch: z.nullable(z.string()).optional(),
    acn: z.nullable(z.string()).optional(),
    first_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    parent_id: z.nullable(z.string()).optional(),
    bank_accounts: z.array(z.lazy(() => CompanyBankAccounts$inboundSchema))
      .optional(),
    websites: z.array(z.lazy(() => CompanyWebsites$inboundSchema)).optional(),
    addresses: z.array(z.lazy(() => CompanyAddresses$inboundSchema)).optional(),
    social_links: z.array(z.lazy(() => CompanySocialLinks$inboundSchema))
      .optional(),
    phone_numbers: z.array(z.lazy(() => CompanyPhoneNumbers$inboundSchema))
      .optional(),
    emails: z.array(z.lazy(() => CompanyEmails$inboundSchema)).optional(),
    row_type: z.lazy(() => CompanyCompanyRowType$inboundSchema).optional(),
    custom_fields: z.array(z.lazy(() => CompanyCustomFields$inboundSchema))
      .optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    read_only: z.nullable(z.boolean()).optional(),
    last_activity_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    deleted: z.boolean().optional(),
    salutation: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    custom_mappings: z.nullable(z.lazy(() => CustomMappings$inboundSchema))
      .optional(),
    updated_by: z.nullable(z.string()).optional(),
    created_by: z.nullable(z.string()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    pass_through: z.array(z.lazy(() => CompanyPassThrough$inboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "interaction_count": "interactionCount",
      "owner_id": "ownerId",
      "vat_number": "vatNumber",
      "annual_revenue": "annualRevenue",
      "number_of_employees": "numberOfEmployees",
      "sales_tax_number": "salesTaxNumber",
      "payee_number": "payeeNumber",
      "abn_or_tfn": "abnOrTfn",
      "abn_branch": "abnBranch",
      "first_name": "firstName",
      "last_name": "lastName",
      "parent_id": "parentId",
      "bank_accounts": "bankAccounts",
      "social_links": "socialLinks",
      "phone_numbers": "phoneNumbers",
      "row_type": "rowType",
      "custom_fields": "customFields",
      "read_only": "readOnly",
      "last_activity_at": "lastActivityAt",
      "custom_mappings": "customMappings",
      "updated_by": "updatedBy",
      "created_by": "createdBy",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type Company$Outbound = {
  id?: string | undefined;
  name: string | null;
  interaction_count?: number | null | undefined;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  parent_id?: string | null | undefined;
  bank_accounts?: Array<CompanyBankAccounts$Outbound> | undefined;
  websites?: Array<CompanyWebsites$Outbound> | undefined;
  addresses?: Array<CompanyAddresses$Outbound> | undefined;
  social_links?: Array<CompanySocialLinks$Outbound> | undefined;
  phone_numbers?: Array<CompanyPhoneNumbers$Outbound> | undefined;
  emails?: Array<CompanyEmails$Outbound> | undefined;
  row_type?: CompanyCompanyRowType$Outbound | undefined;
  custom_fields?: Array<CompanyCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<CompanyPassThrough$Outbound> | undefined;
};

/** @internal */
export const Company$outboundSchema: z.ZodType<
  Company$Outbound,
  z.ZodTypeDef,
  Company
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  interactionCount: z.nullable(z.number().int()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annualRevenue: z.nullable(z.string()).optional(),
  numberOfEmployees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  salesTaxNumber: z.nullable(z.string()).optional(),
  payeeNumber: z.nullable(z.string()).optional(),
  abnOrTfn: z.nullable(z.string()).optional(),
  abnBranch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  parentId: z.nullable(z.string()).optional(),
  bankAccounts: z.array(z.lazy(() => CompanyBankAccounts$outboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => CompanyWebsites$outboundSchema)).optional(),
  addresses: z.array(z.lazy(() => CompanyAddresses$outboundSchema)).optional(),
  socialLinks: z.array(z.lazy(() => CompanySocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => CompanyPhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => CompanyEmails$outboundSchema)).optional(),
  rowType: z.lazy(() => CompanyCompanyRowType$outboundSchema).optional(),
  customFields: z.array(z.lazy(() => CompanyCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  readOnly: z.nullable(z.boolean()).optional(),
  lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  deleted: z.boolean().optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  customMappings: z.nullable(z.lazy(() => CustomMappings$outboundSchema))
    .optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(z.lazy(() => CompanyPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    interactionCount: "interaction_count",
    ownerId: "owner_id",
    vatNumber: "vat_number",
    annualRevenue: "annual_revenue",
    numberOfEmployees: "number_of_employees",
    salesTaxNumber: "sales_tax_number",
    payeeNumber: "payee_number",
    abnOrTfn: "abn_or_tfn",
    abnBranch: "abn_branch",
    firstName: "first_name",
    lastName: "last_name",
    parentId: "parent_id",
    bankAccounts: "bank_accounts",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    rowType: "row_type",
    customFields: "custom_fields",
    readOnly: "read_only",
    lastActivityAt: "last_activity_at",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Company$ {
  /** @deprecated use `Company$inboundSchema` instead. */
  export const inboundSchema = Company$inboundSchema;
  /** @deprecated use `Company$outboundSchema` instead. */
  export const outboundSchema = Company$outboundSchema;
  /** @deprecated use `Company$Outbound` instead. */
  export type Outbound = Company$Outbound;
}

export function companyToJSON(company: Company): string {
  return JSON.stringify(Company$outboundSchema.parse(company));
}

export function companyFromJSON(
  jsonString: string,
): SafeParseResult<Company, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Company$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Company' from JSON`,
  );
}
