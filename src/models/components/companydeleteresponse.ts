/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The data object encapsulates the entire response payload for the delete operation. It serves as a container for all relevant information returned by the API after a successful deletion request. This object is always included in the response to provide a structured format for any additional metadata or status information that may be necessary for client-side processing.
 */
export type CompanyDeleteResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Company deleted
 */
export type CompanyDeleteResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the delete operation, such as 200 for a successful deletion or 404 if the company ID was not found. It is always included to inform the client of the outcome of their request.
   */
  statusCode: number;
  /**
   * The HTTP response status message accompanying the status code. This string provides a textual representation of the status code, such as 'OK' for a successful operation or 'Not Found' if the specified company ID does not exist. It is included to give a human-readable explanation of the response.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which service provider's data was affected by the delete request, such as 'pipedrive' or another integrated service. It is required to ensure the correct service context is applied to the operation.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the operation. This string specifies the type of resource, such as 'company', that was deleted. It is included to confirm the specific resource type affected by the request.
   */
  resource: string;
  /**
   * The specific operation that was performed, in this case, 'delete'. This string indicates the action taken on the resource, confirming that the intended delete operation was executed. It is always included to verify the action completed by the API.
   */
  operation: string;
  /**
   * The data object encapsulates the entire response payload for the delete operation. It serves as a container for all relevant information returned by the API after a successful deletion request. This object is always included in the response to provide a structured format for any additional metadata or status information that may be necessary for client-side processing.
   */
  data: CompanyDeleteResponseUnifiedId;
};

/** @internal */
export const CompanyDeleteResponseUnifiedId$inboundSchema: z.ZodType<
  CompanyDeleteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CompanyDeleteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CompanyDeleteResponseUnifiedId$outboundSchema: z.ZodType<
  CompanyDeleteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CompanyDeleteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyDeleteResponseUnifiedId$ {
  /** @deprecated use `CompanyDeleteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CompanyDeleteResponseUnifiedId$inboundSchema;
  /** @deprecated use `CompanyDeleteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CompanyDeleteResponseUnifiedId$outboundSchema;
  /** @deprecated use `CompanyDeleteResponseUnifiedId$Outbound` instead. */
  export type Outbound = CompanyDeleteResponseUnifiedId$Outbound;
}

export function companyDeleteResponseUnifiedIdToJSON(
  companyDeleteResponseUnifiedId: CompanyDeleteResponseUnifiedId,
): string {
  return JSON.stringify(
    CompanyDeleteResponseUnifiedId$outboundSchema.parse(
      companyDeleteResponseUnifiedId,
    ),
  );
}

export function companyDeleteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CompanyDeleteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyDeleteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyDeleteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CompanyDeleteResponse$inboundSchema: z.ZodType<
  CompanyDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CompanyDeleteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CompanyDeleteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CompanyDeleteResponseUnifiedId$Outbound;
};

/** @internal */
export const CompanyDeleteResponse$outboundSchema: z.ZodType<
  CompanyDeleteResponse$Outbound,
  z.ZodTypeDef,
  CompanyDeleteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CompanyDeleteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyDeleteResponse$ {
  /** @deprecated use `CompanyDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = CompanyDeleteResponse$inboundSchema;
  /** @deprecated use `CompanyDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = CompanyDeleteResponse$outboundSchema;
  /** @deprecated use `CompanyDeleteResponse$Outbound` instead. */
  export type Outbound = CompanyDeleteResponse$Outbound;
}

export function companyDeleteResponseToJSON(
  companyDeleteResponse: CompanyDeleteResponse,
): string {
  return JSON.stringify(
    CompanyDeleteResponse$outboundSchema.parse(companyDeleteResponse),
  );
}

export function companyDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompanyDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyDeleteResponse' from JSON`,
  );
}
