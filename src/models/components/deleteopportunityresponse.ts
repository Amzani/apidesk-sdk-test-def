/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object encapsulates the details of the operation performed, specifically indicating the resource that was deleted. It serves as a confirmation that the delete request was processed successfully. The object structure is typically empty for delete operations, aligning with RESTful practices.
 */
export type DeleteOpportunityResponseUnifiedId = {
  /**
   * The unique identifier of the opportunity record that was deleted. This string confirms the specific resource that has been removed from the CRM system, ensuring developers can verify the correct record was targeted by the delete operation.
   */
  id: string;
};

/**
 * Opportunity deleted
 */
export type DeleteOpportunityResponse = {
  /**
   * The HTTP response status code indicating the result of the delete operation. A status code of 200 confirms that the opportunity record was successfully deleted. This integer value is crucial for error handling and validation of the operation's success.
   */
  statusCode: number;
  /**
   * A brief textual representation of the HTTP response status. Typically, this will be 'OK' for a successful delete operation, providing a human-readable confirmation of the action performed.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the delete request. This string helps identify which service handled the operation, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the delete operation. This string confirms the type of resource affected, ensuring developers understand the context of the deletion within the API ecosystem.
   */
  resource: string;
  /**
   * The specific operation performed, in this case, 'delete'. This string provides clarity on the action executed, helping developers track and log API interactions accurately.
   */
  operation: string;
  /**
   * This object encapsulates the details of the operation performed, specifically indicating the resource that was deleted. It serves as a confirmation that the delete request was processed successfully. The object structure is typically empty for delete operations, aligning with RESTful practices.
   */
  data: DeleteOpportunityResponseUnifiedId;
};

/** @internal */
export const DeleteOpportunityResponseUnifiedId$inboundSchema: z.ZodType<
  DeleteOpportunityResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteOpportunityResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const DeleteOpportunityResponseUnifiedId$outboundSchema: z.ZodType<
  DeleteOpportunityResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  DeleteOpportunityResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteOpportunityResponseUnifiedId$ {
  /** @deprecated use `DeleteOpportunityResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = DeleteOpportunityResponseUnifiedId$inboundSchema;
  /** @deprecated use `DeleteOpportunityResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema =
    DeleteOpportunityResponseUnifiedId$outboundSchema;
  /** @deprecated use `DeleteOpportunityResponseUnifiedId$Outbound` instead. */
  export type Outbound = DeleteOpportunityResponseUnifiedId$Outbound;
}

export function deleteOpportunityResponseUnifiedIdToJSON(
  deleteOpportunityResponseUnifiedId: DeleteOpportunityResponseUnifiedId,
): string {
  return JSON.stringify(
    DeleteOpportunityResponseUnifiedId$outboundSchema.parse(
      deleteOpportunityResponseUnifiedId,
    ),
  );
}

export function deleteOpportunityResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<DeleteOpportunityResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteOpportunityResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteOpportunityResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const DeleteOpportunityResponse$inboundSchema: z.ZodType<
  DeleteOpportunityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteOpportunityResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type DeleteOpportunityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: DeleteOpportunityResponseUnifiedId$Outbound;
};

/** @internal */
export const DeleteOpportunityResponse$outboundSchema: z.ZodType<
  DeleteOpportunityResponse$Outbound,
  z.ZodTypeDef,
  DeleteOpportunityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteOpportunityResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteOpportunityResponse$ {
  /** @deprecated use `DeleteOpportunityResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteOpportunityResponse$inboundSchema;
  /** @deprecated use `DeleteOpportunityResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteOpportunityResponse$outboundSchema;
  /** @deprecated use `DeleteOpportunityResponse$Outbound` instead. */
  export type Outbound = DeleteOpportunityResponse$Outbound;
}

export function deleteOpportunityResponseToJSON(
  deleteOpportunityResponse: DeleteOpportunityResponse,
): string {
  return JSON.stringify(
    DeleteOpportunityResponse$outboundSchema.parse(deleteOpportunityResponse),
  );
}

export function deleteOpportunityResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteOpportunityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteOpportunityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteOpportunityResponse' from JSON`,
  );
}
