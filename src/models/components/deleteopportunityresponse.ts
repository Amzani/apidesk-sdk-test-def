/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains information about the resource that was deleted. It serves as a confirmation that the specified opportunity record has been successfully removed from the CRM system. The object includes the unique identifier of the deleted resource, ensuring developers can verify the specific record that was affected by the delete operation.
 */
export type DeleteOpportunityResponseUnifiedId = {
  /**
   * The unique identifier of the opportunity record that was deleted. This ID confirms the specific resource that has been removed from the CRM, allowing developers to track and verify the deletion operation. It is essential for ensuring that the correct record was targeted and successfully deleted.
   */
  id: string;
};

/**
 * Opportunity deleted
 */
export type DeleteOpportunityResponse = {
  /**
   * The HTTP response status code returned by the server after attempting to delete the opportunity. A status code of 200 indicates that the deletion was successful, confirming that the specified opportunity record has been removed from the CRM system. This integer value is crucial for error handling and confirming the operation's success.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, typically 'OK' for a successful deletion operation. This string provides a human-readable confirmation of the operation's outcome, complementing the numerical status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the delete request. This string identifies which service integration was used, helping developers track and manage service-specific operations within the unified API framework.
   */
  service: string;
  /**
   * The name of the unified API resource that was targeted by the delete operation, in this case, 'opportunities'. This string helps developers understand which type of resource was affected by the operation, ensuring clarity in API interactions.
   */
  resource: string;
  /**
   * The specific operation performed, which in this context is 'delete'. This string indicates the type of action executed on the resource, providing a clear understanding of the operation's intent and outcome.
   */
  operation: string;
  /**
   * This object contains information about the resource that was deleted. It serves as a confirmation that the specified opportunity record has been successfully removed from the CRM system. The object includes the unique identifier of the deleted resource, ensuring developers can verify the specific record that was affected by the delete operation.
   */
  data: DeleteOpportunityResponseUnifiedId;
};

/** @internal */
export const DeleteOpportunityResponseUnifiedId$inboundSchema: z.ZodType<
  DeleteOpportunityResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteOpportunityResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const DeleteOpportunityResponseUnifiedId$outboundSchema: z.ZodType<
  DeleteOpportunityResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  DeleteOpportunityResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteOpportunityResponseUnifiedId$ {
  /** @deprecated use `DeleteOpportunityResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = DeleteOpportunityResponseUnifiedId$inboundSchema;
  /** @deprecated use `DeleteOpportunityResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema =
    DeleteOpportunityResponseUnifiedId$outboundSchema;
  /** @deprecated use `DeleteOpportunityResponseUnifiedId$Outbound` instead. */
  export type Outbound = DeleteOpportunityResponseUnifiedId$Outbound;
}

export function deleteOpportunityResponseUnifiedIdToJSON(
  deleteOpportunityResponseUnifiedId: DeleteOpportunityResponseUnifiedId,
): string {
  return JSON.stringify(
    DeleteOpportunityResponseUnifiedId$outboundSchema.parse(
      deleteOpportunityResponseUnifiedId,
    ),
  );
}

export function deleteOpportunityResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<DeleteOpportunityResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteOpportunityResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteOpportunityResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const DeleteOpportunityResponse$inboundSchema: z.ZodType<
  DeleteOpportunityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteOpportunityResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type DeleteOpportunityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: DeleteOpportunityResponseUnifiedId$Outbound;
};

/** @internal */
export const DeleteOpportunityResponse$outboundSchema: z.ZodType<
  DeleteOpportunityResponse$Outbound,
  z.ZodTypeDef,
  DeleteOpportunityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteOpportunityResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteOpportunityResponse$ {
  /** @deprecated use `DeleteOpportunityResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteOpportunityResponse$inboundSchema;
  /** @deprecated use `DeleteOpportunityResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteOpportunityResponse$outboundSchema;
  /** @deprecated use `DeleteOpportunityResponse$Outbound` instead. */
  export type Outbound = DeleteOpportunityResponse$Outbound;
}

export function deleteOpportunityResponseToJSON(
  deleteOpportunityResponse: DeleteOpportunityResponse,
): string {
  return JSON.stringify(
    DeleteOpportunityResponse$outboundSchema.parse(deleteOpportunityResponse),
  );
}

export function deleteOpportunityResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteOpportunityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteOpportunityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteOpportunityResponse' from JSON`,
  );
}
