/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated details of the user record that was modified. It serves as a confirmation of the changes made to the user data in the CRM system. The structure includes various fields representing the user's updated information.
 */
export type UpdateUserResponseUnifiedId = {
  /**
   * The unique identifier of the user record that was updated. This string value confirms the specific user entry that has been modified, ensuring developers can verify the correct record was altered.
   */
  id: string;
};

/**
 * User updated
 */
export type UpdateUserResponse = {
  /**
   * The HTTP response status code indicating the result of the PATCH request. A value of 200 confirms that the user record was successfully updated. This integer is crucial for error handling and debugging.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful update. This string provides a human-readable confirmation of the operation's outcome, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the update request. This string helps identify which service handled the operation, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource that was updated, typically 'user' in this context. This string indicates the type of resource affected by the operation, ensuring clarity in multi-resource environments.
   */
  resource: string;
  /**
   * The specific operation performed, in this case, 'update'. This string confirms the action taken on the resource, providing context for the response and aiding in audit trails.
   */
  operation: string;
  /**
   * This object contains the updated details of the user record that was modified. It serves as a confirmation of the changes made to the user data in the CRM system. The structure includes various fields representing the user's updated information.
   */
  data: UpdateUserResponseUnifiedId;
};

/** @internal */
export const UpdateUserResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateUserResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateUserResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateUserResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateUserResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateUserResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserResponseUnifiedId$ {
  /** @deprecated use `UpdateUserResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateUserResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateUserResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateUserResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateUserResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateUserResponseUnifiedId$Outbound;
}

export function updateUserResponseUnifiedIdToJSON(
  updateUserResponseUnifiedId: UpdateUserResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateUserResponseUnifiedId$outboundSchema.parse(
      updateUserResponseUnifiedId,
    ),
  );
}

export function updateUserResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateUserResponse$inboundSchema: z.ZodType<
  UpdateUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateUserResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateUserResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateUserResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateUserResponse$outboundSchema: z.ZodType<
  UpdateUserResponse$Outbound,
  z.ZodTypeDef,
  UpdateUserResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateUserResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserResponse$ {
  /** @deprecated use `UpdateUserResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserResponse$inboundSchema;
  /** @deprecated use `UpdateUserResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserResponse$outboundSchema;
  /** @deprecated use `UpdateUserResponse$Outbound` instead. */
  export type Outbound = UpdateUserResponse$Outbound;
}

export function updateUserResponseToJSON(
  updateUserResponse: UpdateUserResponse,
): string {
  return JSON.stringify(
    UpdateUserResponse$outboundSchema.parse(updateUserResponse),
  );
}

export function updateUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserResponse' from JSON`,
  );
}
