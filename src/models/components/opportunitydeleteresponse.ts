/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The data object containing the response details
 */
export type OpportunityDeleteResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Opportunity deleted
 */
export type OpportunityDeleteResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the delete operation, with a status code of 200 signifying a successful deletion of the specified opportunity record. It is always included in the response to provide immediate feedback on the operation's outcome.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'OK' for a successful operation. It is included to offer clarity and context about the result of the delete request.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the request. This string identifies which service within the Apideck ecosystem handled the deletion operation, ensuring transparency and traceability in environments with multiple service integrations. It is always included in the response.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the operation. This string specifies the type of resource, such as 'opportunity', that was affected by the delete request. It is included to confirm the specific resource type involved in the operation.
   */
  resource: string;
  /**
   * The specific operation performed by the API, in this case, 'delete'. This string indicates the action taken on the resource, providing a clear record of the operation executed. It is always included to document the nature of the request processed.
   */
  operation: string;
  /**
   * The data object containing the response details
   */
  data: OpportunityDeleteResponseUnifiedId;
};

/** @internal */
export const OpportunityDeleteResponseUnifiedId$inboundSchema: z.ZodType<
  OpportunityDeleteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type OpportunityDeleteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const OpportunityDeleteResponseUnifiedId$outboundSchema: z.ZodType<
  OpportunityDeleteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  OpportunityDeleteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityDeleteResponseUnifiedId$ {
  /** @deprecated use `OpportunityDeleteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = OpportunityDeleteResponseUnifiedId$inboundSchema;
  /** @deprecated use `OpportunityDeleteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema =
    OpportunityDeleteResponseUnifiedId$outboundSchema;
  /** @deprecated use `OpportunityDeleteResponseUnifiedId$Outbound` instead. */
  export type Outbound = OpportunityDeleteResponseUnifiedId$Outbound;
}

export function opportunityDeleteResponseUnifiedIdToJSON(
  opportunityDeleteResponseUnifiedId: OpportunityDeleteResponseUnifiedId,
): string {
  return JSON.stringify(
    OpportunityDeleteResponseUnifiedId$outboundSchema.parse(
      opportunityDeleteResponseUnifiedId,
    ),
  );
}

export function opportunityDeleteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityDeleteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunityDeleteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityDeleteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const OpportunityDeleteResponse$inboundSchema: z.ZodType<
  OpportunityDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunityDeleteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type OpportunityDeleteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: OpportunityDeleteResponseUnifiedId$Outbound;
};

/** @internal */
export const OpportunityDeleteResponse$outboundSchema: z.ZodType<
  OpportunityDeleteResponse$Outbound,
  z.ZodTypeDef,
  OpportunityDeleteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunityDeleteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityDeleteResponse$ {
  /** @deprecated use `OpportunityDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = OpportunityDeleteResponse$inboundSchema;
  /** @deprecated use `OpportunityDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = OpportunityDeleteResponse$outboundSchema;
  /** @deprecated use `OpportunityDeleteResponse$Outbound` instead. */
  export type Outbound = OpportunityDeleteResponse$Outbound;
}

export function opportunityDeleteResponseToJSON(
  opportunityDeleteResponse: OpportunityDeleteResponse,
): string {
  return JSON.stringify(
    OpportunityDeleteResponse$outboundSchema.parse(opportunityDeleteResponse),
  );
}

export function opportunityDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityDeleteResponse' from JSON`,
  );
}
