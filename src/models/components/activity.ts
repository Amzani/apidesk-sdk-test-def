/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This field specifies the type of the CRM activity, indicating the nature or category of the activity being recorded. It is a required field and helps in classifying the activity for better organization and retrieval. The value is a string that describes the activity type, such as 'call', 'meeting', or 'task'.
 */
export const ActivityType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * This field specifies the type of the CRM activity, indicating the nature or category of the activity being recorded. It is a required field and helps in classifying the activity for better organization and retrieval. The value is a string that describes the activity type, such as 'call', 'meeting', or 'task'.
 */
export type ActivityType = ClosedEnum<typeof ActivityType>;

/**
 * Specifies the category or classification of the address, such as 'billing', 'shipping', or 'home'. This helps in identifying the purpose of the address within the CRM activity context.
 */
export const ActivityLocationAddressType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category or classification of the address, such as 'billing', 'shipping', or 'home'. This helps in identifying the purpose of the address within the CRM activity context.
 */
export type ActivityLocationAddressType = ClosedEnum<
  typeof ActivityLocationAddressType
>;

/**
 * An object containing detailed address information for the activity's location. This may include fields such as street, city, state, and postal code, providing a comprehensive address for logistical purposes.
 */
export type ActivityLocationAddress = {
  /**
   * A unique identifier assigned to the address within the CRM system. This ID is used to reference the specific address in database operations and integrations. It is typically a string of alphanumeric characters.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category or classification of the address, such as 'billing', 'shipping', or 'home'. This helps in identifying the purpose of the address within the CRM activity context.
   */
  type?: ActivityLocationAddressType | null | undefined;
  /**
   * A complete, unstructured representation of the address as a single string. This format is useful when APIs do not provide detailed address components, allowing for a straightforward display or logging of the address.
   */
  string?: string | null | undefined;
  /**
   * The designated name or label for the address, which might represent a business name, location nickname, or other identifying title. This helps in quickly recognizing the address in user interfaces or reports.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically including the street number, street name, and any apartment or suite number. This is a key component of the address used for mailing and location identification.
   */
  line1?: string | null | undefined;
  /**
   * This property contains the second line of the address, typically used for additional address information such as apartment or suite numbers. It is part of the detailed location information for a CRM activity, helping to specify the exact address where the activity is associated. The format is a string, and it is optional, meaning it may not be present if not applicable.
   */
  line2?: string | null | undefined;
  /**
   * This property holds the third line of the address, which can be used for further address details beyond the standard street and city information. It is included in the CRM activity details to provide a comprehensive address structure. The value is a string and is optional, allowing flexibility in address formatting.
   */
  line3?: string | null | undefined;
  /**
   * This property represents the fourth line of the address, offering additional space for address components that do not fit in the previous lines. It is part of the CRM activity's location details, ensuring all necessary address information is captured. The format is a string, and its inclusion is optional.
   */
  line4?: string | null | undefined;
  /**
   * This property specifies the street number of the address, which is a crucial part of the location details for a CRM activity. It helps in identifying the exact location on a street where the activity is related. The expected format is a string, and it is optional, meaning it might not be included if not applicable.
   */
  streetNumber?: string | null | undefined;
  /**
   * This property indicates the city name where the CRM activity is located. It is a key component of the address, providing geographical context for the activity. The format is a string, and while it is optional, it is typically included to ensure clarity in the activity's location details.
   */
  city?: string | null | undefined;
  /**
   * The state or region where the activity is located, represented as a string. This information helps in identifying the geographical area of the CRM activity, which can be useful for location-based analytics or reporting.
   */
  state?: string | null | undefined;
  /**
   * The postal code corresponding to the activity's location, formatted as a string. This code is essential for pinpointing the exact area within a state or city, aiding in precise location tracking and logistics.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the activity's location, following the ISO 3166-1 alpha-2 standard. This two-letter code is crucial for internationalization and ensuring the activity is associated with the correct country.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the activity's location, expressed as a string. This value is part of the geographical coordinates that help in mapping the exact position of the activity on the globe.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the activity's location, expressed as a string. Together with latitude, this value provides the precise geographical positioning of the activity, useful for mapping and spatial analysis.
   */
  longitude?: string | null | undefined;
  /**
   * This property contains the name of the county where the activity's location is situated. It provides geographical context to the address, helping in identifying the sublocality within a larger region. The value is expected to be a string representing the county's name.
   */
  county?: string | null | undefined;
  /**
   * This property holds the full name of the contact person associated with the activity's location. It is used to identify the primary individual for communication or queries related to the activity. The format is a string containing the contact's name.
   */
  contactName?: string | null | undefined;
  /**
   * This property specifies the salutation or title of the contact person at the activity's location, such as Mr., Ms., or Dr. It provides a formal prefix to the contact's name, aiding in respectful communication. The value is a string representing the salutation.
   */
  salutation?: string | null | undefined;
  /**
   * This property contains the phone number associated with the activity's location. It is used for direct telephonic communication with the contact person or office at the location. The expected format is a string, typically following international or local dialing conventions.
   */
  phoneNumber?: string | null | undefined;
  /**
   * This property holds the fax number for the activity's location, allowing for document transmission via fax. It is useful for sending or receiving documents related to the activity. The value is a string formatted according to standard fax number conventions.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the location of the CRM activity. This field provides a way to contact the location directly via email, if available. It is formatted as a standard email address.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the location of the CRM activity. This field allows users to access more information about the location online. It is expected to be a valid URL.
   */
  website?: string | null | undefined;
  /**
   * Additional notes or comments related to the location of the CRM activity. This field can include any extra information that might be relevant for understanding the context or specifics of the location.
   */
  notes?: string | null | undefined;
  /**
   * A version identifier for the location data, used to track changes and prevent data conflicts. This binary value is updated with each modification to ensure data integrity during concurrent updates.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Represents the display status of the activity in the CRM interface. This string value can be used to customize how the activity is presented to users, such as showing it as busy, free, or tentative.
 */
export const ActivityShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
/**
 * Represents the display status of the activity in the CRM interface. This string value can be used to customize how the activity is presented to users, such as showing it as busy, free, or tentative.
 */
export type ActivityShowAs = ClosedEnum<typeof ActivityShowAs>;

export type ActivityValue6 = {};

export type ActivityValue4 = {};

/**
 * The actual data or content stored in the custom field, which can vary based on the field's intended use. This optional value is crucial for understanding the specific information captured by the field within the CRM activity.
 */
export type ActivityValue =
  | ActivityValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivityValue6>;

export type ActivityCustomFields = {
  /**
   * A unique identifier assigned to each custom field within the CRM activity. This string value is essential for distinguishing between different custom fields and is required for any operations involving specific fields.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, which helps in identifying the purpose or content of the field within the CRM activity. This is an optional string value that provides a human-readable label for the field.
   */
  name?: string | null | undefined;
  /**
   * A detailed explanation or additional information about the custom field, providing context or usage notes. This optional string helps developers understand the role or significance of the field within the CRM activity.
   */
  description?: string | null | undefined;
  /**
   * The actual data or content stored in the custom field, which can vary based on the field's intended use. This optional value is crucial for understanding the specific information captured by the field within the CRM activity.
   */
  value?:
    | ActivityValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivityValue6>
    | null
    | undefined;
};

/**
 * The current participation status of the attendee in the CRM activity, such as confirmed, tentative, or declined. This field provides insight into the attendee's engagement level and helps in managing the activity's logistics.
 */
export const ActivityStatus = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * The current participation status of the attendee in the CRM activity, such as confirmed, tentative, or declined. This field provides insight into the attendee's engagement level and helps in managing the activity's logistics.
 */
export type ActivityStatus = ClosedEnum<typeof ActivityStatus>;

export type Attendees = {
  /**
   * A unique identifier assigned to each attendee of the CRM activity. This string value is used to distinguish individual attendees within the activity details, allowing developers to reference or manipulate specific attendee records as needed.
   */
  id?: string | null | undefined;
  /**
   * The full name of the attendee participating in the CRM activity. This string combines the first, middle, and last names, providing a complete representation of the attendee's identity for display or processing purposes.
   */
  name?: string | null | undefined;
  /**
   * The first name of the attendee involved in the CRM activity. This string represents the given name of the attendee, useful for personalized communication or identification within the activity context.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the attendee, if available, participating in the CRM activity. This string provides additional identification detail, which can be used for more precise attendee differentiation or formal documentation.
   */
  middleName?: string | null | undefined;
  /**
   * The last name or surname of the attendee involved in the CRM activity. This string is essential for identifying the attendee in formal contexts and is often used in conjunction with the first name for complete identification.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the attendee's name, such as Mr., Ms., or Dr. This field helps in addressing the attendee appropriately in communications related to the CRM activity. It is optional and may not be present for all attendees.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the attendee's name, such as Jr., Sr., or III. This field is used to provide additional context to the attendee's name in the CRM activity details. It is optional and may not be present for all attendees.
   */
  suffix?: string | null | undefined;
  /**
   * The email address of the attendee, used for sending notifications and updates related to the CRM activity. This field is crucial for communication purposes and is expected to be in a standard email format.
   */
  emailAddress?: string | null | undefined;
  /**
   * A boolean value indicating whether the attendee is the organizer of the CRM activity. If true, this attendee has organizing privileges and responsibilities for the activity. This field helps in identifying the primary contact for the activity.
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * The current participation status of the attendee in the CRM activity, such as confirmed, tentative, or declined. This field provides insight into the attendee's engagement level and helps in managing the activity's logistics.
   */
  status?: ActivityStatus | null | undefined;
  /**
   * The unique identifier for a user associated with the CRM activity. This ID helps in linking the activity to a specific user, facilitating user-specific operations or data retrieval. The format is a string, typically a UUID or similar unique string.
   */
  userId?: string | null | undefined;
  /**
   * The unique identifier for a contact associated with the CRM activity. This ID is used to connect the activity to a specific contact, enabling contact-specific interactions or data access. The format is a string, usually a UUID or similar unique string.
   */
  contactId?: string | null | undefined;
  /**
   * The timestamp indicating when the attendee's information was last updated. This is formatted in ISO 8601, providing a standardized date and time representation. It helps track changes and updates to the attendee's data within the CRM activity.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp indicating when the attendee's information was initially created. This is formatted in ISO 8601, ensuring a consistent date and time format. It provides historical context about when the attendee was added to the CRM activity.
   */
  createdAt?: Date | null | undefined;
};

/**
 * An object containing custom mappings configured for the CRM activity resource. This property includes any additional, user-defined fields or mappings that have been set up, allowing for extended customization and integration with other systems. The structure of this object depends on the specific custom mappings applied.
 */
export type ActivityCustomMappings = {};

export type ActivityExtendPaths = {
  /**
   * This property contains a JSONPath string that specifies the exact location within the data structure where a value should be applied. It is a required field within the 'extend_paths' array, ensuring that modifications are accurately targeted. The format is a string representing a JSONPath expression.
   */
  path: string;
  /**
   * This property holds the value to be set at a specified path within the CRM activity data structure. It can be of any data type, allowing flexibility in the kind of information that can be stored or updated. This value is crucial for customizing or extending the activity details as per specific business requirements.
   */
  value?: any | undefined;
};

export type ActivityPassThrough = {
  /**
   * This property contains the unique identifier for the service to which the pass-through operation should be applied. It is a required field and ensures that the activity is correctly routed to the appropriate service within the CRM system. The format is a string that uniquely identifies the service.
   */
  serviceId: string;
  /**
   * This optional property specifies the identifier for a particular workflow operation that the pass-through should target. It is particularly useful in scenarios where multiple downstream requests are made, allowing developers to pinpoint the exact operation within a unified call. The format is a string, and its presence helps in managing complex workflows.
   */
  operationId?: string | undefined;
  /**
   * This property is an object that allows for direct extension by including any additional properties needed for the operation. It provides flexibility for developers to add custom data fields that may be required for specific use cases. The format is a JSON object, enabling dynamic data extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property is an array of objects designed for structured data modifications using specified paths. It allows developers to apply changes to specific parts of the data structure, facilitating precise data manipulation. Each entry in the array represents a modification path and its corresponding data.
   */
  extendPaths?: Array<ActivityExtendPaths> | undefined;
};

/**
 * This object contains all the detailed information about the specific CRM activity requested. It serves as the main container for the activity's data, encapsulating various attributes such as identifiers, timestamps, and other relevant details. This structure ensures that developers can access all necessary information about the activity in a single, organized format.
 */
export type Activity = {
  /**
   * The unique identifier of the activity within the CRM system. This ID is used to reference the specific activity record and is essential for retrieving or manipulating this particular activity in future operations. It is a string format, ensuring compatibility with various systems and databases.
   */
  id?: string | undefined;
  /**
   * The identifier used by a third-party API to reference the original entity associated with this activity. This ID helps in mapping the CRM activity to its corresponding entity in external systems, facilitating integration and data synchronization. It is typically a string, allowing for consistent referencing across different platforms.
   */
  downstreamId?: string | null | undefined;
  /**
   * The date and time when the activity occurred, formatted as a string. This timestamp is crucial for understanding the chronological context of the activity, enabling developers to track when specific actions took place within the CRM. It is often formatted in ISO 8601 for consistency and ease of parsing.
   */
  activityDatetime?: string | null | undefined;
  /**
   * The total duration of the activity measured in seconds. This integer value provides insight into how long the activity lasted, which can be useful for performance analysis and reporting. It helps developers quantify the time spent on specific activities within the CRM system.
   */
  durationSeconds?: number | null | undefined;
  /**
   * A unique identifier representing the user associated with this CRM activity. This ID is used to link the activity to a specific user within the CRM system, allowing for tracking and management of user-related activities. The format is typically a string of alphanumeric characters.
   */
  userId?: string | null | undefined;
  /**
   * A unique identifier for the account associated with this CRM activity. This ID helps in linking the activity to a particular account, facilitating account-specific tracking and reporting. The value is usually a string composed of alphanumeric characters.
   */
  accountId?: string | null | undefined;
  /**
   * A unique identifier for the contact associated with this CRM activity. This ID is crucial for associating the activity with a specific contact, enabling detailed contact-level insights and interactions. The format is a string of alphanumeric characters.
   */
  contactId?: string | null | undefined;
  /**
   * A unique identifier for the company associated with this CRM activity. This ID allows the activity to be linked to a specific company, supporting company-level analysis and management. The identifier is typically a string of alphanumeric characters.
   */
  companyId?: string | null | undefined;
  /**
   * A unique identifier for the opportunity related to this CRM activity. This ID is used to connect the activity to a specific sales opportunity, aiding in opportunity tracking and management. The format is generally a string of alphanumeric characters.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with this activity. This string value links the activity to a specific lead record in the CRM, allowing developers to track interactions and history related to that lead.
   */
  leadId?: string | null | undefined;
  /**
   * The unique identifier of the user or entity that owns this activity. This string helps in determining responsibility and tracking who is managing or has initiated the activity within the CRM system.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier of the campaign associated with this activity. This string value connects the activity to a specific marketing or sales campaign, providing context on the campaign's influence or involvement in the activity.
   */
  campaignId?: string | null | undefined;
  /**
   * The unique identifier of the case related to this activity. This string value links the activity to a particular case, which can be useful for tracking case progress or history in the CRM system.
   */
  caseId?: string | null | undefined;
  /**
   * The unique identifier of the asset associated with this activity. This string value ties the activity to a specific asset, which can be important for asset management and tracking within the CRM.
   */
  assetId?: string | null | undefined;
  /**
   * This field contains the unique identifier of the contract associated with the CRM activity. It helps in linking the activity to a specific contract, allowing developers to track interactions or updates related to that contract. The format is a string, typically a UUID or similar unique string identifier.
   */
  contractId?: string | null | undefined;
  /**
   * This property holds the unique identifier for the product related to the CRM activity. It is used to associate the activity with a particular product, facilitating tracking and management of product-specific interactions. The value is expected to be a string, often formatted as a UUID.
   */
  productId?: string | null | undefined;
  /**
   * This field represents the unique identifier of the solution linked to the CRM activity. It allows developers to connect the activity with a specific solution, aiding in the organization and analysis of solution-related activities. The identifier is a string, usually in the form of a UUID.
   */
  solutionId?: string | null | undefined;
  /**
   * This property contains the unique identifier for a custom object associated with the CRM activity. It enables the linking of the activity to custom-defined objects, providing flexibility in tracking non-standard entities. The format is a string, typically a UUID or similar unique identifier.
   */
  customObjectId?: string | null | undefined;
  /**
   * This field specifies the type of the CRM activity, indicating the nature or category of the activity being recorded. It is a required field and helps in classifying the activity for better organization and retrieval. The value is a string that describes the activity type, such as 'call', 'meeting', or 'task'.
   */
  type: ActivityType | null;
  /**
   * The title of the activity, representing a brief and concise name that summarizes the main focus or subject of the CRM activity. This helps in quickly identifying the activity in lists or reports.
   */
  title?: string | null | undefined;
  /**
   * A detailed description of the activity, providing additional context and information about what the activity entails. This can include objectives, participants, and any other relevant details that help in understanding the purpose and scope of the activity.
   */
  description?: string | null | undefined;
  /**
   * An internal note about the activity, intended for use by team members to share insights, reminders, or any other pertinent information that should not be exposed to external parties. This field supports internal collaboration and record-keeping.
   */
  note?: string | null | undefined;
  /**
   * The location of the activity, specified as a string that can include a physical address, a virtual meeting link, or any other relevant location identifier. This helps participants know where the activity will take place.
   */
  location?: string | null | undefined;
  /**
   * An object containing detailed address information for the activity's location. This may include fields such as street, city, state, and postal code, providing a comprehensive address for logistical purposes.
   */
  locationAddress?: ActivityLocationAddress | undefined;
  /**
   * Indicates whether the CRM activity spans the entire day. A value of 'true' means the activity is scheduled for the whole day, while 'false' indicates it has specific start and end times.
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Indicates whether the activity is private, meaning it is restricted to certain users or groups within the CRM. This boolean value helps determine the visibility of the activity details to users accessing the CRM system.
   */
  private?: boolean | null | undefined;
  /**
   * Specifies if the activity is a group event, which involves multiple participants or attendees. This boolean value helps in categorizing the activity as either individual or group-based within the CRM.
   */
  groupEvent?: boolean | null | undefined;
  /**
   * Defines the specific subtype of the group event, providing additional context about the nature of the event. This string value helps in further classifying the event within broader event categories in the CRM.
   */
  eventSubType?: string | null | undefined;
  /**
   * Describes the main type of the group event, offering a general classification such as meeting, conference, or workshop. This string value aids in organizing events within the CRM by their primary characteristics.
   */
  groupEventType?: string | null | undefined;
  /**
   * Indicates whether the activity is a subordinate or dependent activity linked to a parent activity. This boolean value is useful for understanding hierarchical relationships between activities in the CRM.
   */
  child?: boolean | null | undefined;
  /**
   * Indicates whether the CRM activity has been archived. An archived activity is typically not active but retained for historical reference. This boolean value helps in filtering activities based on their archival status.
   */
  archived?: boolean | null | undefined;
  /**
   * Indicates whether the CRM activity has been marked as deleted. A deleted activity is generally removed from active views but may still exist in the database for recovery purposes. This boolean value is crucial for managing activity lifecycle states.
   */
  deleted?: boolean | null | undefined;
  /**
   * Represents the display status of the activity in the CRM interface. This string value can be used to customize how the activity is presented to users, such as showing it as busy, free, or tentative.
   */
  showAs?: ActivityShowAs | null | undefined;
  /**
   * Indicates whether the CRM activity has been completed. A 'done' activity is one that has reached its conclusion and requires no further action. This boolean value is useful for tracking the progress of activities.
   */
  done?: boolean | null | undefined;
  /**
   * Specifies the start date and time of the CRM activity in ISO 8601 format. This timestamp is essential for scheduling and chronological organization of activities within the CRM system.
   */
  startDatetime?: string | null | undefined;
  /**
   * The end date and time of the activity, formatted as an ISO 8601 string. This property indicates when the activity is scheduled to conclude, providing a precise timestamp for developers to manage timelines and schedules effectively.
   */
  endDatetime?: string | null | undefined;
  /**
   * The duration of the activity in minutes, represented as an integer. This value helps developers understand the total time allocated for the activity, which can be crucial for scheduling and resource management.
   */
  durationMinutes?: number | null | undefined;
  /**
   * The date of the activity, formatted as an ISO 8601 date string. This property specifies the day on which the activity occurs, allowing developers to organize and display activities chronologically.
   */
  activityDate?: string | null | undefined;
  /**
   * The end date of the activity, formatted as an ISO 8601 date string. This property provides the final day of the activity, useful for determining the activity's duration and planning subsequent tasks.
   */
  endDate?: string | null | undefined;
  /**
   * A boolean value indicating whether the activity is recurrent. This property helps developers identify if the activity repeats over time, which is essential for managing recurring schedules and notifications.
   */
  recurrent?: boolean | undefined;
  /**
   * The date and time when the reminder for the CRM activity is scheduled. This property is formatted as a string representing a date-time, typically in ISO 8601 format, allowing developers to easily parse and display the reminder information. It helps in scheduling and notifying users about upcoming activities.
   */
  reminderDatetime?: string | null | undefined;
  /**
   * A boolean value indicating whether a reminder has been set for the CRM activity. This property helps developers determine if a reminder notification should be expected, aiding in user engagement and task management.
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The URL link to the video conference associated with the CRM activity. This string property provides a direct link to join the video meeting, facilitating remote communication and collaboration related to the activity.
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * The unique identifier for the video conference linked to the CRM activity. This string serves as a reference for managing and accessing specific video conference sessions, ensuring seamless integration with video conferencing tools.
   */
  videoConferenceId?: string | null | undefined;
  /**
   * An array containing custom fields associated with the CRM activity. These fields allow for additional, user-defined data to be stored and retrieved, providing flexibility to tailor the activity details to specific business needs.
   */
  customFields?: Array<ActivityCustomFields> | undefined;
  /**
   * A list of individuals or entities participating in the CRM activity. This array contains objects representing each attendee, providing details such as names and roles, and is useful for tracking involvement in the activity.
   */
  attendees?: Array<Attendees> | undefined;
  /**
   * An object containing custom mappings configured for the CRM activity resource. This property includes any additional, user-defined fields or mappings that have been set up, allowing for extended customization and integration with other systems. The structure of this object depends on the specific custom mappings applied.
   */
  customMappings?: ActivityCustomMappings | null | undefined;
  /**
   * The identifier of the user who last modified the activity record. This field helps track changes and maintain an audit trail within the CRM system. It is typically a user ID or username.
   */
  updatedBy?: string | null | undefined;
  /**
   * The identifier of the user who initially created the activity record. This information is crucial for understanding the origin of the activity and maintaining accountability. It is usually represented as a user ID or username.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the activity was last modified. This field is formatted as an ISO 8601 date-time string, providing precise information for synchronization and auditing purposes.
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp indicating when the activity was originally created. It is formatted as an ISO 8601 date-time string, which is essential for tracking the lifecycle of the activity within the CRM system.
   */
  createdAt?: string | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or structured modifications. This property is used when creating or updating resources, enabling flexibility and extensibility in handling additional data requirements.
   */
  passThrough?: Array<ActivityPassThrough> | undefined;
};

/** @internal */
export const ActivityType$inboundSchema: z.ZodNativeEnum<typeof ActivityType> =
  z.nativeEnum(ActivityType);

/** @internal */
export const ActivityType$outboundSchema: z.ZodNativeEnum<typeof ActivityType> =
  ActivityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityType$ {
  /** @deprecated use `ActivityType$inboundSchema` instead. */
  export const inboundSchema = ActivityType$inboundSchema;
  /** @deprecated use `ActivityType$outboundSchema` instead. */
  export const outboundSchema = ActivityType$outboundSchema;
}

/** @internal */
export const ActivityLocationAddressType$inboundSchema: z.ZodNativeEnum<
  typeof ActivityLocationAddressType
> = z.nativeEnum(ActivityLocationAddressType);

/** @internal */
export const ActivityLocationAddressType$outboundSchema: z.ZodNativeEnum<
  typeof ActivityLocationAddressType
> = ActivityLocationAddressType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLocationAddressType$ {
  /** @deprecated use `ActivityLocationAddressType$inboundSchema` instead. */
  export const inboundSchema = ActivityLocationAddressType$inboundSchema;
  /** @deprecated use `ActivityLocationAddressType$outboundSchema` instead. */
  export const outboundSchema = ActivityLocationAddressType$outboundSchema;
}

/** @internal */
export const ActivityLocationAddress$inboundSchema: z.ZodType<
  ActivityLocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivityLocationAddressType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ActivityLocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ActivityLocationAddress$outboundSchema: z.ZodType<
  ActivityLocationAddress$Outbound,
  z.ZodTypeDef,
  ActivityLocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivityLocationAddressType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityLocationAddress$ {
  /** @deprecated use `ActivityLocationAddress$inboundSchema` instead. */
  export const inboundSchema = ActivityLocationAddress$inboundSchema;
  /** @deprecated use `ActivityLocationAddress$outboundSchema` instead. */
  export const outboundSchema = ActivityLocationAddress$outboundSchema;
  /** @deprecated use `ActivityLocationAddress$Outbound` instead. */
  export type Outbound = ActivityLocationAddress$Outbound;
}

export function activityLocationAddressToJSON(
  activityLocationAddress: ActivityLocationAddress,
): string {
  return JSON.stringify(
    ActivityLocationAddress$outboundSchema.parse(activityLocationAddress),
  );
}

export function activityLocationAddressFromJSON(
  jsonString: string,
): SafeParseResult<ActivityLocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityLocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityLocationAddress' from JSON`,
  );
}

/** @internal */
export const ActivityShowAs$inboundSchema: z.ZodNativeEnum<
  typeof ActivityShowAs
> = z.nativeEnum(ActivityShowAs);

/** @internal */
export const ActivityShowAs$outboundSchema: z.ZodNativeEnum<
  typeof ActivityShowAs
> = ActivityShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityShowAs$ {
  /** @deprecated use `ActivityShowAs$inboundSchema` instead. */
  export const inboundSchema = ActivityShowAs$inboundSchema;
  /** @deprecated use `ActivityShowAs$outboundSchema` instead. */
  export const outboundSchema = ActivityShowAs$outboundSchema;
}

/** @internal */
export const ActivityValue6$inboundSchema: z.ZodType<
  ActivityValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivityValue6$Outbound = {};

/** @internal */
export const ActivityValue6$outboundSchema: z.ZodType<
  ActivityValue6$Outbound,
  z.ZodTypeDef,
  ActivityValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityValue6$ {
  /** @deprecated use `ActivityValue6$inboundSchema` instead. */
  export const inboundSchema = ActivityValue6$inboundSchema;
  /** @deprecated use `ActivityValue6$outboundSchema` instead. */
  export const outboundSchema = ActivityValue6$outboundSchema;
  /** @deprecated use `ActivityValue6$Outbound` instead. */
  export type Outbound = ActivityValue6$Outbound;
}

export function activityValue6ToJSON(activityValue6: ActivityValue6): string {
  return JSON.stringify(ActivityValue6$outboundSchema.parse(activityValue6));
}

export function activityValue6FromJSON(
  jsonString: string,
): SafeParseResult<ActivityValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityValue6' from JSON`,
  );
}

/** @internal */
export const ActivityValue4$inboundSchema: z.ZodType<
  ActivityValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivityValue4$Outbound = {};

/** @internal */
export const ActivityValue4$outboundSchema: z.ZodType<
  ActivityValue4$Outbound,
  z.ZodTypeDef,
  ActivityValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityValue4$ {
  /** @deprecated use `ActivityValue4$inboundSchema` instead. */
  export const inboundSchema = ActivityValue4$inboundSchema;
  /** @deprecated use `ActivityValue4$outboundSchema` instead. */
  export const outboundSchema = ActivityValue4$outboundSchema;
  /** @deprecated use `ActivityValue4$Outbound` instead. */
  export type Outbound = ActivityValue4$Outbound;
}

export function activityValue4ToJSON(activityValue4: ActivityValue4): string {
  return JSON.stringify(ActivityValue4$outboundSchema.parse(activityValue4));
}

export function activityValue4FromJSON(
  jsonString: string,
): SafeParseResult<ActivityValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityValue4' from JSON`,
  );
}

/** @internal */
export const ActivityValue$inboundSchema: z.ZodType<
  ActivityValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivityValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivityValue6$inboundSchema)),
]);

/** @internal */
export type ActivityValue$Outbound =
  | ActivityValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivityValue6$Outbound>;

/** @internal */
export const ActivityValue$outboundSchema: z.ZodType<
  ActivityValue$Outbound,
  z.ZodTypeDef,
  ActivityValue
> = z.union([
  z.lazy(() => ActivityValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivityValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityValue$ {
  /** @deprecated use `ActivityValue$inboundSchema` instead. */
  export const inboundSchema = ActivityValue$inboundSchema;
  /** @deprecated use `ActivityValue$outboundSchema` instead. */
  export const outboundSchema = ActivityValue$outboundSchema;
  /** @deprecated use `ActivityValue$Outbound` instead. */
  export type Outbound = ActivityValue$Outbound;
}

export function activityValueToJSON(activityValue: ActivityValue): string {
  return JSON.stringify(ActivityValue$outboundSchema.parse(activityValue));
}

export function activityValueFromJSON(
  jsonString: string,
): SafeParseResult<ActivityValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityValue' from JSON`,
  );
}

/** @internal */
export const ActivityCustomFields$inboundSchema: z.ZodType<
  ActivityCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivityValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivityValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ActivityCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ActivityValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivityValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ActivityCustomFields$outboundSchema: z.ZodType<
  ActivityCustomFields$Outbound,
  z.ZodTypeDef,
  ActivityCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivityValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivityValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCustomFields$ {
  /** @deprecated use `ActivityCustomFields$inboundSchema` instead. */
  export const inboundSchema = ActivityCustomFields$inboundSchema;
  /** @deprecated use `ActivityCustomFields$outboundSchema` instead. */
  export const outboundSchema = ActivityCustomFields$outboundSchema;
  /** @deprecated use `ActivityCustomFields$Outbound` instead. */
  export type Outbound = ActivityCustomFields$Outbound;
}

export function activityCustomFieldsToJSON(
  activityCustomFields: ActivityCustomFields,
): string {
  return JSON.stringify(
    ActivityCustomFields$outboundSchema.parse(activityCustomFields),
  );
}

export function activityCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ActivityCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityCustomFields' from JSON`,
  );
}

/** @internal */
export const ActivityStatus$inboundSchema: z.ZodNativeEnum<
  typeof ActivityStatus
> = z.nativeEnum(ActivityStatus);

/** @internal */
export const ActivityStatus$outboundSchema: z.ZodNativeEnum<
  typeof ActivityStatus
> = ActivityStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityStatus$ {
  /** @deprecated use `ActivityStatus$inboundSchema` instead. */
  export const inboundSchema = ActivityStatus$inboundSchema;
  /** @deprecated use `ActivityStatus$outboundSchema` instead. */
  export const outboundSchema = ActivityStatus$outboundSchema;
}

/** @internal */
export const Attendees$inboundSchema: z.ZodType<
  Attendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ActivityStatus$inboundSchema).optional(),
  user_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
    "user_id": "userId",
    "contact_id": "contactId",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
  });
});

/** @internal */
export type Attendees$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
  user_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const Attendees$outboundSchema: z.ZodType<
  Attendees$Outbound,
  z.ZodTypeDef,
  Attendees
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ActivityStatus$outboundSchema).optional(),
  userId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
    userId: "user_id",
    contactId: "contact_id",
    updatedAt: "updated_at",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attendees$ {
  /** @deprecated use `Attendees$inboundSchema` instead. */
  export const inboundSchema = Attendees$inboundSchema;
  /** @deprecated use `Attendees$outboundSchema` instead. */
  export const outboundSchema = Attendees$outboundSchema;
  /** @deprecated use `Attendees$Outbound` instead. */
  export type Outbound = Attendees$Outbound;
}

export function attendeesToJSON(attendees: Attendees): string {
  return JSON.stringify(Attendees$outboundSchema.parse(attendees));
}

export function attendeesFromJSON(
  jsonString: string,
): SafeParseResult<Attendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attendees' from JSON`,
  );
}

/** @internal */
export const ActivityCustomMappings$inboundSchema: z.ZodType<
  ActivityCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivityCustomMappings$Outbound = {};

/** @internal */
export const ActivityCustomMappings$outboundSchema: z.ZodType<
  ActivityCustomMappings$Outbound,
  z.ZodTypeDef,
  ActivityCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCustomMappings$ {
  /** @deprecated use `ActivityCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ActivityCustomMappings$inboundSchema;
  /** @deprecated use `ActivityCustomMappings$outboundSchema` instead. */
  export const outboundSchema = ActivityCustomMappings$outboundSchema;
  /** @deprecated use `ActivityCustomMappings$Outbound` instead. */
  export type Outbound = ActivityCustomMappings$Outbound;
}

export function activityCustomMappingsToJSON(
  activityCustomMappings: ActivityCustomMappings,
): string {
  return JSON.stringify(
    ActivityCustomMappings$outboundSchema.parse(activityCustomMappings),
  );
}

export function activityCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ActivityCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityCustomMappings' from JSON`,
  );
}

/** @internal */
export const ActivityExtendPaths$inboundSchema: z.ZodType<
  ActivityExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ActivityExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ActivityExtendPaths$outboundSchema: z.ZodType<
  ActivityExtendPaths$Outbound,
  z.ZodTypeDef,
  ActivityExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityExtendPaths$ {
  /** @deprecated use `ActivityExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ActivityExtendPaths$inboundSchema;
  /** @deprecated use `ActivityExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ActivityExtendPaths$outboundSchema;
  /** @deprecated use `ActivityExtendPaths$Outbound` instead. */
  export type Outbound = ActivityExtendPaths$Outbound;
}

export function activityExtendPathsToJSON(
  activityExtendPaths: ActivityExtendPaths,
): string {
  return JSON.stringify(
    ActivityExtendPaths$outboundSchema.parse(activityExtendPaths),
  );
}

export function activityExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ActivityExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityExtendPaths' from JSON`,
  );
}

/** @internal */
export const ActivityPassThrough$inboundSchema: z.ZodType<
  ActivityPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ActivityExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ActivityPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ActivityExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ActivityPassThrough$outboundSchema: z.ZodType<
  ActivityPassThrough$Outbound,
  z.ZodTypeDef,
  ActivityPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ActivityExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityPassThrough$ {
  /** @deprecated use `ActivityPassThrough$inboundSchema` instead. */
  export const inboundSchema = ActivityPassThrough$inboundSchema;
  /** @deprecated use `ActivityPassThrough$outboundSchema` instead. */
  export const outboundSchema = ActivityPassThrough$outboundSchema;
  /** @deprecated use `ActivityPassThrough$Outbound` instead. */
  export type Outbound = ActivityPassThrough$Outbound;
}

export function activityPassThroughToJSON(
  activityPassThrough: ActivityPassThrough,
): string {
  return JSON.stringify(
    ActivityPassThrough$outboundSchema.parse(activityPassThrough),
  );
}

export function activityPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ActivityPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityPassThrough' from JSON`,
  );
}

/** @internal */
export const Activity$inboundSchema: z.ZodType<
  Activity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  downstream_id: z.nullable(z.string()).optional(),
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivityType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() => ActivityLocationAddress$inboundSchema)
    .optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(ActivityShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  duration_minutes: z.nullable(z.number().int()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(z.lazy(() => ActivityCustomFields$inboundSchema))
    .optional(),
  attendees: z.array(z.lazy(() => Attendees$inboundSchema)).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ActivityCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => ActivityPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "downstream_id": "downstreamId",
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "duration_minutes": "durationMinutes",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type Activity$Outbound = {
  id?: string | undefined;
  downstream_id?: string | null | undefined;
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: ActivityLocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  duration_minutes?: number | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<ActivityCustomFields$Outbound> | undefined;
  attendees?: Array<Attendees$Outbound> | undefined;
  custom_mappings?: ActivityCustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ActivityPassThrough$Outbound> | undefined;
};

/** @internal */
export const Activity$outboundSchema: z.ZodType<
  Activity$Outbound,
  z.ZodTypeDef,
  Activity
> = z.object({
  id: z.string().optional(),
  downstreamId: z.nullable(z.string()).optional(),
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(ActivityType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() => ActivityLocationAddress$outboundSchema)
    .optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(ActivityShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  durationMinutes: z.nullable(z.number().int()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(z.lazy(() => ActivityCustomFields$outboundSchema))
    .optional(),
  attendees: z.array(z.lazy(() => Attendees$outboundSchema)).optional(),
  customMappings: z.nullable(
    z.lazy(() => ActivityCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => ActivityPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    downstreamId: "downstream_id",
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    durationMinutes: "duration_minutes",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Activity$ {
  /** @deprecated use `Activity$inboundSchema` instead. */
  export const inboundSchema = Activity$inboundSchema;
  /** @deprecated use `Activity$outboundSchema` instead. */
  export const outboundSchema = Activity$outboundSchema;
  /** @deprecated use `Activity$Outbound` instead. */
  export type Outbound = Activity$Outbound;
}

export function activityToJSON(activity: Activity): string {
  return JSON.stringify(Activity$outboundSchema.parse(activity));
}

export function activityFromJSON(
  jsonString: string,
): SafeParseResult<Activity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Activity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Activity' from JSON`,
  );
}
