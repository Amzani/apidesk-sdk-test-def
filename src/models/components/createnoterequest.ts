/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateNoteRequestExtendPaths = {
  /**
   * A required JSONPath string that specifies the exact location within the data structure where the value should be applied. This path must be a valid JSONPath expression, ensuring that the modification targets the correct element within the object. It is crucial for developers to provide an accurate path to avoid unintended data changes.
   */
  path: string;
  /**
   * The required value to be set at the specified JSONPath within the data structure. This value can be of any data type, allowing for flexible updates to the data. Developers must ensure that the value is appropriate for the target location to maintain data integrity and consistency.
   */
  value?: any | undefined;
};

export type CreateNoteRequestPassThrough = {
  /**
   * A mandatory identifier for the service to which the pass_through data should be applied. This property ensures that the custom data is directed to the correct service, facilitating seamless integration and operation within the CRM environment.
   */
  serviceId: string;
  /**
   * An optional string identifier for a specific workflow operation to which this pass-through should be applied. This property is particularly useful for Unify calls that involve multiple downstream requests, allowing developers to track and manage these operations effectively. There are no specific format requirements, but it should be unique within the context of the operation.
   */
  operationId?: string | undefined;
  /**
   * An optional object that allows for direct extension by including any additional properties needed for the operation. This flexibility is useful for developers who need to pass custom data structures that are not predefined in the API schema. The object can contain any key-value pairs as required by the specific use case.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An optional array of objects designed for structured data modifications using specified paths. Each object within the array should define a path and a value, enabling precise updates to nested data structures. This feature is ideal for developers needing to apply complex changes to data without altering the entire object.
   */
  extendPaths?: Array<CreateNoteRequestExtendPaths> | undefined;
};

export type CreateNoteRequest = {
  /**
   * The title of the note, serving as a brief summary or headline. It is optional but recommended for easier identification and retrieval of notes within the CRM system. The title should be concise and descriptive, ideally capturing the essence of the note's content.
   */
  title?: string | null | undefined;
  /**
   * The main body of the note, containing detailed information or commentary. This field is optional but crucial for conveying the full message or details intended by the note. Ensure the content is clear and relevant to the associated CRM entry.
   */
  content?: string | null | undefined;
  /**
   * The unique identifier of the user who owns or created the note. This optional field helps in tracking note ownership and can be used for filtering notes by user. The ID should correspond to a valid user within the CRM system.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with the note. This optional field links the note to a specific contact, facilitating context and relevance in CRM operations. Ensure the ID matches an existing contact in the CRM.
   */
  contactId?: string | null | undefined;
  /**
   * The unique identifier of the company related to the note. This optional field associates the note with a particular company, aiding in organization and retrieval within the CRM. The ID should correspond to a valid company entry in the CRM system.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier of the opportunity associated with this note. This property is optional and should be used when the note is specifically related to an opportunity within the CRM. It helps in linking the note to the relevant opportunity record for better context and tracking.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with this note. This optional property should be included when the note pertains to a specific lead, allowing for better organization and retrieval of notes related to lead management.
   */
  leadId?: string | null | undefined;
  /**
   * Indicates whether the note is currently active. This boolean property is optional and can be used to filter notes based on their active status, aiding in the management and visibility of notes within the CRM system.
   */
  active?: boolean | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or structured modifications when creating or updating resources. This optional property is useful for passing additional data that may be required by specific services integrated with the CRM.
   */
  passThrough?: Array<CreateNoteRequestPassThrough> | undefined;
};

/** @internal */
export const CreateNoteRequestExtendPaths$inboundSchema: z.ZodType<
  CreateNoteRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CreateNoteRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CreateNoteRequestExtendPaths$outboundSchema: z.ZodType<
  CreateNoteRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  CreateNoteRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateNoteRequestExtendPaths$ {
  /** @deprecated use `CreateNoteRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CreateNoteRequestExtendPaths$inboundSchema;
  /** @deprecated use `CreateNoteRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CreateNoteRequestExtendPaths$outboundSchema;
  /** @deprecated use `CreateNoteRequestExtendPaths$Outbound` instead. */
  export type Outbound = CreateNoteRequestExtendPaths$Outbound;
}

export function createNoteRequestExtendPathsToJSON(
  createNoteRequestExtendPaths: CreateNoteRequestExtendPaths,
): string {
  return JSON.stringify(
    CreateNoteRequestExtendPaths$outboundSchema.parse(
      createNoteRequestExtendPaths,
    ),
  );
}

export function createNoteRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CreateNoteRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateNoteRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateNoteRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const CreateNoteRequestPassThrough$inboundSchema: z.ZodType<
  CreateNoteRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => CreateNoteRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CreateNoteRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CreateNoteRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CreateNoteRequestPassThrough$outboundSchema: z.ZodType<
  CreateNoteRequestPassThrough$Outbound,
  z.ZodTypeDef,
  CreateNoteRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => CreateNoteRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateNoteRequestPassThrough$ {
  /** @deprecated use `CreateNoteRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = CreateNoteRequestPassThrough$inboundSchema;
  /** @deprecated use `CreateNoteRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = CreateNoteRequestPassThrough$outboundSchema;
  /** @deprecated use `CreateNoteRequestPassThrough$Outbound` instead. */
  export type Outbound = CreateNoteRequestPassThrough$Outbound;
}

export function createNoteRequestPassThroughToJSON(
  createNoteRequestPassThrough: CreateNoteRequestPassThrough,
): string {
  return JSON.stringify(
    CreateNoteRequestPassThrough$outboundSchema.parse(
      createNoteRequestPassThrough,
    ),
  );
}

export function createNoteRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CreateNoteRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateNoteRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateNoteRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const CreateNoteRequest$inboundSchema: z.ZodType<
  CreateNoteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  pass_through: z.array(
    z.lazy(() => CreateNoteRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CreateNoteRequest$Outbound = {
  title?: string | null | undefined;
  content?: string | null | undefined;
  owner_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  active?: boolean | null | undefined;
  pass_through?: Array<CreateNoteRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const CreateNoteRequest$outboundSchema: z.ZodType<
  CreateNoteRequest$Outbound,
  z.ZodTypeDef,
  CreateNoteRequest
> = z.object({
  title: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  passThrough: z.array(
    z.lazy(() => CreateNoteRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateNoteRequest$ {
  /** @deprecated use `CreateNoteRequest$inboundSchema` instead. */
  export const inboundSchema = CreateNoteRequest$inboundSchema;
  /** @deprecated use `CreateNoteRequest$outboundSchema` instead. */
  export const outboundSchema = CreateNoteRequest$outboundSchema;
  /** @deprecated use `CreateNoteRequest$Outbound` instead. */
  export type Outbound = CreateNoteRequest$Outbound;
}

export function createNoteRequestToJSON(
  createNoteRequest: CreateNoteRequest,
): string {
  return JSON.stringify(
    CreateNoteRequest$outboundSchema.parse(createNoteRequest),
  );
}

export function createNoteRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateNoteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateNoteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateNoteRequest' from JSON`,
  );
}
