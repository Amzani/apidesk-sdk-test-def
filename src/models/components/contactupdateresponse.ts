/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The 'data' object serves as the primary container for the response payload, encapsulating all relevant information about the contact record that has been updated. This object is always included in the response to provide a structured format for accessing the updated contact details. It is essential for ensuring that the client application can easily parse and utilize the updated information returned by the API.
 */
export type ContactUpdateResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Contact updated
 */
export type ContactUpdateResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the PATCH request to update a contact. A status code of 200 signifies a successful update, confirming that the contact record has been modified as requested. This code is crucial for determining the outcome of the operation and handling any errors that may arise.
   */
  statusCode: number;
  /**
   * The HTTP response status message accompanying the status code. This string provides a textual representation of the status code, such as 'OK' for a 200 status. It offers a human-readable explanation of the response, aiding in understanding the result of the contact update operation. This message is essential for debugging and logging purposes.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which third-party service (e.g., Pipedrive) was targeted by the update request. It is included in the response to confirm the specific integration used, especially important when multiple services are connected to the CRM system.
   */
  service: string;
  /**
   * The name of the unified API resource that was accessed or modified. This string indicates the type of resource, such as 'contacts', that the operation was performed on. It helps in identifying the context of the request and ensuring that the correct resource was targeted during the update process.
   */
  resource: string;
  /**
   * The specific operation that was performed on the resource. This string describes the action taken, such as 'update', confirming that the contact record was modified. It is included in the response to provide clarity on what change was executed, aiding in tracking and auditing operations within the CRM system.
   */
  operation: string;
  /**
   * The 'data' object serves as the primary container for the response payload, encapsulating all relevant information about the contact record that has been updated. This object is always included in the response to provide a structured format for accessing the updated contact details. It is essential for ensuring that the client application can easily parse and utilize the updated information returned by the API.
   */
  data: ContactUpdateResponseUnifiedId;
};

/** @internal */
export const ContactUpdateResponseUnifiedId$inboundSchema: z.ZodType<
  ContactUpdateResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ContactUpdateResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ContactUpdateResponseUnifiedId$outboundSchema: z.ZodType<
  ContactUpdateResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  ContactUpdateResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactUpdateResponseUnifiedId$ {
  /** @deprecated use `ContactUpdateResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ContactUpdateResponseUnifiedId$inboundSchema;
  /** @deprecated use `ContactUpdateResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ContactUpdateResponseUnifiedId$outboundSchema;
  /** @deprecated use `ContactUpdateResponseUnifiedId$Outbound` instead. */
  export type Outbound = ContactUpdateResponseUnifiedId$Outbound;
}

export function contactUpdateResponseUnifiedIdToJSON(
  contactUpdateResponseUnifiedId: ContactUpdateResponseUnifiedId,
): string {
  return JSON.stringify(
    ContactUpdateResponseUnifiedId$outboundSchema.parse(
      contactUpdateResponseUnifiedId,
    ),
  );
}

export function contactUpdateResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ContactUpdateResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactUpdateResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactUpdateResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const ContactUpdateResponse$inboundSchema: z.ZodType<
  ContactUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactUpdateResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ContactUpdateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ContactUpdateResponseUnifiedId$Outbound;
};

/** @internal */
export const ContactUpdateResponse$outboundSchema: z.ZodType<
  ContactUpdateResponse$Outbound,
  z.ZodTypeDef,
  ContactUpdateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactUpdateResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactUpdateResponse$ {
  /** @deprecated use `ContactUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = ContactUpdateResponse$inboundSchema;
  /** @deprecated use `ContactUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = ContactUpdateResponse$outboundSchema;
  /** @deprecated use `ContactUpdateResponse$Outbound` instead. */
  export type Outbound = ContactUpdateResponse$Outbound;
}

export function contactUpdateResponseToJSON(
  contactUpdateResponse: ContactUpdateResponse,
): string {
  return JSON.stringify(
    ContactUpdateResponse$outboundSchema.parse(contactUpdateResponse),
  );
}

export function contactUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactUpdateResponse' from JSON`,
  );
}
