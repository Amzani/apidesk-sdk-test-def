/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The currency code corresponding to the monetary amount, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This string ensures clarity in financial data by specifying the currency context for the lead's monetary value.
 */
export const GetLeadResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * The currency code corresponding to the monetary amount, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This string ensures clarity in financial data by specifying the currency context for the lead's monetary value.
 */
export type GetLeadResponseCurrency = ClosedEnum<
  typeof GetLeadResponseCurrency
>;

/**
 * Specifies the category or role of the website in relation to the lead, such as 'personal', 'business', or 'portfolio'. This helps in understanding the context of the website's use.
 */
export const GetLeadResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category or role of the website in relation to the lead, such as 'personal', 'business', or 'portfolio'. This helps in understanding the context of the website's use.
 */
export type GetLeadResponseType = ClosedEnum<typeof GetLeadResponseType>;

export type GetLeadResponseWebsites = {
  /**
   * A unique identifier assigned to each website associated with the lead. This ID is used internally to reference the website within the CRM system. It is typically a non-empty string if a website is present.
   */
  id?: string | null | undefined;
  /**
   * The full URL of the website linked to the lead. This is a mandatory field and should be a valid web address, ensuring direct access to the website when needed.
   */
  url: string;
  /**
   * Specifies the category or role of the website in relation to the lead, such as 'personal', 'business', or 'portfolio'. This helps in understanding the context of the website's use.
   */
  type?: GetLeadResponseType | null | undefined;
};

/**
 * Specifies the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in identifying the context in which the address is used within the lead's profile. The value is a string that represents the type of address associated with the lead.
 */
export const GetLeadResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in identifying the context in which the address is used within the lead's profile. The value is a string that represents the type of address associated with the lead.
 */
export type GetLeadResponseDataType = ClosedEnum<
  typeof GetLeadResponseDataType
>;

export type GetLeadResponseAddresses = {
  /**
   * A unique identifier for each address linked to the lead. This ID is used to differentiate between multiple addresses and is essential for address management within the CRM.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in identifying the context in which the address is used within the lead's profile. The value is a string that represents the type of address associated with the lead.
   */
  type?: GetLeadResponseDataType | null | undefined;
  /**
   * Contains the full address as a single string, which may include street, city, state, and postal code. This format is useful when the API does not provide structured address components, allowing for a complete address representation in one field.
   */
  string?: string | null | undefined;
  /**
   * Represents the name associated with the address, which could be a business name or a contact person. This field helps in identifying the address within the lead's profile, especially when multiple addresses are present.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically including the street number, street name, and any suite or apartment numbers. This is a key component of the address used for mailing and identification purposes.
   */
  line1?: string | null | undefined;
  /**
   * The second line of the address, often used for additional address details such as floor numbers or building names. This field complements 'line1' to provide a complete address structure.
   */
  line2?: string | null | undefined;
  /**
   * This property contains the third line of the address, which may include additional location details such as a suite or apartment number. It is returned as a string and is optional, meaning it may not be present if not applicable to the lead's address. This field helps provide a more complete address when additional information is available.
   */
  line3?: string | null | undefined;
  /**
   * This property holds the fourth line of the address, often used for further address details that do not fit in the previous lines. It is an optional string field, which means it might be absent if not relevant to the lead's address. Including this field ensures that all parts of an address can be captured if needed.
   */
  line4?: string | null | undefined;
  /**
   * The street number of the lead's address, provided as a string. This field is optional and may not be included if the street number is not specified in the lead's address. It is crucial for pinpointing the exact location within a street.
   */
  streetNumber?: string | null | undefined;
  /**
   * This property represents the city name associated with the lead's address. It is returned as a string and is optional, meaning it may not appear if the city is not specified. The city is a key component of the address, helping to identify the geographical area of the lead.
   */
  city?: string | null | undefined;
  /**
   * The state name where the lead is located, provided as a string. This optional field may be omitted if the state information is not available. Including the state helps in narrowing down the lead's location to a specific region within a country.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code associated with the lead's address. This string value helps in identifying the specific area or region for mailing purposes. It is optional and may not be present if the address does not include a postal code.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the lead's address, formatted according to the ISO 3166-1 alpha-2 standard. This two-letter string provides a standardized way to identify the country, ensuring consistency across international addresses. It is optional and may not be included if the country is not specified.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the lead's address, represented as a string. This value indicates the north-south position on the Earth's surface and is useful for mapping and location-based services. It is optional and may not be present if the address does not include geographic coordinates.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the lead's address, provided as a string. This value specifies the east-west position on the Earth's surface, aiding in precise location identification for mapping applications. It is optional and may not be included if the address lacks geographic coordinates.
   */
  longitude?: string | null | undefined;
  /**
   * The county or equivalent sublocality of the lead's address, stored as a string. This field provides additional geographic detail, often used for administrative purposes or regional identification. It is optional and may not be present if the address does not specify a county.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address. This is typically used for addressing correspondence or identifying the primary contact at the location. The value is returned as a string and may be empty if no contact is specified.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as Mr., Ms., or Dr. This field helps in formal communication and is returned as a string. It may be empty if no salutation is provided.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with the address, used for direct communication. This value is returned as a string and may include country and area codes. It can be empty if no phone number is available.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the address, used for sending documents via fax. This is returned as a string and may include country and area codes. The field can be empty if no fax number is provided.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the address, used for electronic communication. This value is returned as a string and should be in a standard email format (e.g., user@example.com). It may be empty if no email address is specified.
   */
  email?: string | null | undefined;
  /**
   * The website associated with the lead's address, typically a URL string. This field provides a direct link to the lead's online presence or business site, aiding in quick access to more detailed information about the lead's operations or offerings.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the lead's address, often used for internal comments or specific instructions. This field can contain any textual information that might be relevant for understanding the context or special considerations regarding the lead's location.
   */
  notes?: string | null | undefined;
  /**
   * A versioning string used to track changes to the lead's address data, ensuring data integrity and consistency. This value is automatically updated with each modification, helping to prevent conflicts during concurrent data updates.
   */
  rowVersion?: string | null | undefined;
};

export type GetLeadResponseSocialLinks = {
  /**
   * A unique identifier for each social link entry within the lead's social media array. This ID is used to distinguish between different social media accounts or profiles linked to the lead, facilitating precise data management and retrieval.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media profile associated with the lead. This is a complete web address, such as https://www.twitter.com/apideck, and is essential for accessing the lead's social media presence directly from the CRM.
   */
  url: string;
  /**
   * Specifies the type of social media platform linked to the lead, such as 'twitter' or 'linkedin'. This helps categorize the social link and is useful for filtering or displaying specific types of social media connections.
   */
  type?: string | null | undefined;
};

/**
 * The classification of the phone number, indicating its purpose such as 'mobile', 'home', or 'work'. This optional field helps in identifying the context in which the number should be used for contacting the lead.
 */
export const GetLeadResponseDataPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The classification of the phone number, indicating its purpose such as 'mobile', 'home', or 'work'. This optional field helps in identifying the context in which the number should be used for contacting the lead.
 */
export type GetLeadResponseDataPhoneNumbersType = ClosedEnum<
  typeof GetLeadResponseDataPhoneNumbersType
>;

export type GetLeadResponsePhoneNumbers = {
  /**
   * A unique identifier for each phone number associated with the lead. This ID is used internally to manage and reference specific phone numbers within the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the lead's phone number, such as '+1' for the United States. This code is crucial for ensuring the correct formatting and dialing of international phone numbers.
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The complete phone number associated with the lead, excluding the area code. This is a mandatory field and is typically formatted as a string of digits without spaces or special characters. It is crucial for direct communication with the lead.
   */
  number: string;
  /**
   * The extension number for the lead's phone, if applicable. This is an optional field and is used to direct calls to a specific department or individual within an organization. It is typically a short string of digits.
   */
  extension?: string | null | undefined;
  /**
   * The classification of the phone number, indicating its purpose such as 'mobile', 'home', or 'work'. This optional field helps in identifying the context in which the number should be used for contacting the lead.
   */
  type?: GetLeadResponseDataPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email addresses for better organization and is returned as a string. It may not be present if the type is not specified.
 */
export const GetLeadResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email addresses for better organization and is returned as a string. It may not be present if the type is not specified.
 */
export type GetLeadResponseDataEmailsType = ClosedEnum<
  typeof GetLeadResponseDataEmailsType
>;

export type GetLeadResponseEmails = {
  /**
   * A unique identifier assigned to each email address associated with the lead. This ID is used internally to manage and reference email addresses within the CRM system. It is returned as a string and may not be present if the email address is not stored with an ID.
   */
  id?: string | null | undefined;
  /**
   * The email address of the lead, formatted as a standard email string (e.g., user@example.com). This field is crucial for communication and is always included in the response for leads with an email address.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email addresses for better organization and is returned as a string. It may not be present if the type is not specified.
   */
  type?: GetLeadResponseDataEmailsType | null | undefined;
};

export type GetLeadResponseValue6 = {};

export type GetLeadResponseValue4 = {};

/**
 * The actual value assigned to the custom field for the lead. This can vary in format depending on the field's intended use, such as text, numbers, or dates, and is crucial for personalized lead data.
 */
export type GetLeadResponseValue =
  | GetLeadResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<GetLeadResponseValue6>;

export type GetLeadResponseCustomFields = {
  /**
   * A unique identifier for each custom field associated with the lead. This ID is used to manage and reference custom fields within the CRM system. It is always returned as a string for each custom field entry in the array.
   */
  id: string | null;
  /**
   * The name of the custom field associated with the lead. This string value is used to identify the specific custom field within the CRM system, allowing for tailored data management and retrieval.
   */
  name?: string | null | undefined;
  /**
   * A detailed description of the custom field, providing additional context or instructions related to its use. This helps users understand the purpose or expected input for the field.
   */
  description?: string | null | undefined;
  /**
   * The actual value assigned to the custom field for the lead. This can vary in format depending on the field's intended use, such as text, numbers, or dates, and is crucial for personalized lead data.
   */
  value?:
    | GetLeadResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<GetLeadResponseValue6>
    | null
    | undefined;
};

/**
 * Contains any custom mappings configured for the lead resource. This object may include key-value pairs that map specific fields to custom values or structures, allowing for tailored data representation. Useful for integrations that require specific field alignments.
 */
export type GetLeadResponseCustomMappings = {};

export type GetLeadResponseExtendPaths = {
  /**
   * This property specifies the JSONPath string where a value should be applied within the lead data. It is a required field for each object in the extend_paths array, ensuring that the data modification is accurately targeted. The path must be a valid JSONPath expression that points to the exact location in the data structure.
   */
  path: string;
  /**
   * This property represents the value to be set at the specified JSONPath within the lead data. It is required for each object in the extend_paths array and can be of any data type, depending on the context and the specific data modification being performed. This flexibility allows for a wide range of updates, from simple string replacements to complex object insertions.
   */
  value?: any | undefined;
};

export type GetLeadResponsePassThrough = {
  /**
   * A unique identifier for the service to which the pass_through data should be applied. This ensures that the custom data is directed to the correct service, facilitating precise integration and data handling.
   */
  serviceId: string;
  /**
   * This property contains an optional identifier for a specific workflow operation within the CRM system. It is useful for Unify calls that involve multiple downstream requests, allowing developers to track and manage these operations effectively. The value is expected to be a string that uniquely identifies the operation.
   */
  operationId?: string | undefined;
  /**
   * This property is a flexible object designed to allow direct extension with any additional properties needed for the lead data. It provides a way to include custom fields or data points that are not part of the standard lead schema. The structure of this object is dynamic, accommodating various key-value pairs as required.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property is an array of objects used for structured data modifications via specified paths. Each object within the array defines a path and a corresponding value to be applied, enabling precise updates or extensions to the lead data. This array facilitates complex data manipulation tasks by allowing multiple modifications in a single operation.
   */
  extendPaths?: Array<GetLeadResponseExtendPaths> | undefined;
};

/**
 * The main object containing all the detailed information about the lead. This object includes various fields such as the lead's ID, name, company name, and owner ID. It serves as the primary container for the lead's data in the response.
 */
export type GetLeadResponseData = {
  /**
   * A unique string identifier for the lead within the CRM system. This ID is used to reference the lead in subsequent API calls or database queries. It is not always included unless specifically requested.
   */
  id?: string | undefined;
  /**
   * The full name of the lead as recorded in the CRM. This string is always included in the response and is essential for identifying the lead in user interfaces and reports.
   */
  name: string;
  /**
   * The name of the company with which the lead is associated. This string is crucial for understanding the lead's business context and is always included in the response.
   */
  companyName: string | null;
  /**
   * The unique identifier of the user or agent who owns or manages the lead. This ID helps in tracking responsibility and follow-up actions within the CRM system. It may not be included if not applicable or requested.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the owner of the lead. This string represents the full name of the individual responsible for managing or overseeing the lead within the CRM system. It helps identify who is accountable for the lead's progress and interactions.
   */
  ownerName?: string | null | undefined;
  /**
   * The company the lead is associated with. This string serves as a unique identifier for the company linked to the lead, allowing users to track which organization the lead is connected to within the CRM.
   */
  companyId?: string | null | undefined;
  /**
   * The identifier of the lead. This string is a unique ID assigned to the lead within the CRM, used to retrieve and reference the lead's detailed information in various operations.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead. This string indicates where the lead originated from, such as a marketing campaign, referral, or other channels, providing context on how the lead was acquired.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead. This string contains the given name of the lead, used for personalization and identification purposes within the CRM system.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead as recorded in the CRM system. This field may be empty if the last name is not provided. It is used to identify and differentiate leads within the system.
   */
  lastName?: string | null | undefined;
  /**
   * A brief overview or notes about the lead, which may include details about their interests, interactions, or any other relevant information. This field is optional and can be customized to suit the needs of the CRM users.
   */
  description?: string | null | undefined;
  /**
   * The prefix or title of the lead, such as Mr., Ms., or Dr. This field helps in addressing the lead appropriately in communications and is optional.
   */
  prefix?: string | null | undefined;
  /**
   * The professional job title of the lead, such as 'Software Engineer' or 'Marketing Manager'. This information is useful for understanding the lead's role and potential needs within their organization.
   */
  title?: string | null | undefined;
  /**
   * The language preference of the lead, represented by a two-letter ISO 639-1 code, such as 'EN' for English. This helps in tailoring communications and content to the lead's preferred language.
   */
  language?: string | null | undefined;
  /**
   * The current status of the lead within the CRM system. This string value indicates the lead's progress or state, such as 'New', 'Contacted', or 'Qualified'. Understanding the status helps in tracking the lead's journey and planning subsequent actions.
   */
  status?: string | null | undefined;
  /**
   * The total monetary value associated with the lead, represented as a numeric value. This amount reflects potential revenue or investment related to the lead, aiding in financial forecasting and prioritization.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * The currency code corresponding to the monetary amount, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This string ensures clarity in financial data by specifying the currency context for the lead's monetary value.
   */
  currency?: GetLeadResponseCurrency | null | undefined;
  /**
   * The lead's fax number, provided as a string. This contact detail is useful for businesses that still utilize fax communication, ensuring all possible contact methods are available.
   */
  fax?: string | null | undefined;
  /**
   * An array of website URLs associated with the lead. Each entry in the array is a string representing a website address, offering additional online resources or information related to the lead.
   */
  websites?: Array<GetLeadResponseWebsites> | undefined;
  /**
   * An array containing all addresses associated with the lead. Each entry in the array represents a distinct address, providing comprehensive location details for the lead.
   */
  addresses?: Array<GetLeadResponseAddresses> | undefined;
  /**
   * An array of social media links associated with the lead, each entry representing a different platform. This collection allows users to quickly access and review the lead's social media presence, providing insights into their online activities and engagement.
   */
  socialLinks?: Array<GetLeadResponseSocialLinks> | undefined;
  /**
   * An array containing the lead's phone numbers, each represented as an object with detailed information. This array can include multiple phone numbers, providing a comprehensive list of contact options for the lead.
   */
  phoneNumbers?: Array<GetLeadResponsePhoneNumbers> | undefined;
  /**
   * A list of email addresses associated with the lead. Each entry in the array is a string representing a valid email address. This field is optional and is used for electronic communication with the lead.
   */
  emails?: Array<GetLeadResponseEmails> | undefined;
  /**
   * An array containing custom fields associated with the lead. Each entry in the array represents a custom field that provides additional, user-defined information about the lead. This allows for flexible data storage beyond standard fields.
   */
  customFields?: Array<GetLeadResponseCustomFields> | undefined;
  /**
   * An array of tags associated with the lead, each representing a category or label that helps in organizing and filtering leads within the CRM. Tags are useful for segmenting leads based on specific criteria or campaigns.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Contains any custom mappings configured for the lead resource. This object may include key-value pairs that map specific fields to custom values or structures, allowing for tailored data representation. Useful for integrations that require specific field alignments.
   */
  customMappings?: GetLeadResponseCustomMappings | null | undefined;
  /**
   * The timestamp indicating when the lead was last updated, formatted in ISO 8601. This provides a precise record of the most recent changes made to the lead's information, useful for tracking updates and synchronization purposes.
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp indicating when the lead was initially created, formatted in ISO 8601. This serves as a historical record of the lead's entry into the system, useful for auditing and chronological tracking.
   */
  createdAt?: string | null | undefined;
  /**
   * An array that holds service-specific custom data or structured modifications that can be passed through when creating or updating resources. This allows for flexibility in handling additional data that may not fit standard fields.
   */
  passThrough?: Array<GetLeadResponsePassThrough> | undefined;
};

/**
 * Lead
 */
export type GetLeadResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value reflects whether the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It helps developers understand the outcome of their request at a glance.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for an unsuccessful one. This string provides a human-readable explanation of the status code, aiding in quick interpretation of the response.
   */
  status: string;
  /**
   * The unique Apideck identifier for the service provider from which the lead data is retrieved. This string helps in identifying the source of the data, especially useful in environments with multiple service integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource that was accessed, in this case, a lead. This string identifies the type of resource involved in the operation, ensuring developers know what kind of data structure to expect in the response.
   */
  resource: string;
  /**
   * The specific operation performed by the API, such as 'retrieve' for fetching lead details. This string indicates the action taken, helping developers understand the context of the response and the nature of the data returned.
   */
  operation: string;
  /**
   * The main object containing all the detailed information about the lead. This object includes various fields such as the lead's ID, name, company name, and owner ID. It serves as the primary container for the lead's data in the response.
   */
  data: GetLeadResponseData;
};

/** @internal */
export const GetLeadResponseCurrency$inboundSchema: z.ZodNativeEnum<
  typeof GetLeadResponseCurrency
> = z.nativeEnum(GetLeadResponseCurrency);

/** @internal */
export const GetLeadResponseCurrency$outboundSchema: z.ZodNativeEnum<
  typeof GetLeadResponseCurrency
> = GetLeadResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseCurrency$ {
  /** @deprecated use `GetLeadResponseCurrency$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseCurrency$inboundSchema;
  /** @deprecated use `GetLeadResponseCurrency$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseCurrency$outboundSchema;
}

/** @internal */
export const GetLeadResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetLeadResponseType
> = z.nativeEnum(GetLeadResponseType);

/** @internal */
export const GetLeadResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetLeadResponseType
> = GetLeadResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseType$ {
  /** @deprecated use `GetLeadResponseType$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseType$inboundSchema;
  /** @deprecated use `GetLeadResponseType$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseType$outboundSchema;
}

/** @internal */
export const GetLeadResponseWebsites$inboundSchema: z.ZodType<
  GetLeadResponseWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(GetLeadResponseType$inboundSchema).optional(),
});

/** @internal */
export type GetLeadResponseWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const GetLeadResponseWebsites$outboundSchema: z.ZodType<
  GetLeadResponseWebsites$Outbound,
  z.ZodTypeDef,
  GetLeadResponseWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(GetLeadResponseType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseWebsites$ {
  /** @deprecated use `GetLeadResponseWebsites$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseWebsites$inboundSchema;
  /** @deprecated use `GetLeadResponseWebsites$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseWebsites$outboundSchema;
  /** @deprecated use `GetLeadResponseWebsites$Outbound` instead. */
  export type Outbound = GetLeadResponseWebsites$Outbound;
}

export function getLeadResponseWebsitesToJSON(
  getLeadResponseWebsites: GetLeadResponseWebsites,
): string {
  return JSON.stringify(
    GetLeadResponseWebsites$outboundSchema.parse(getLeadResponseWebsites),
  );
}

export function getLeadResponseWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseWebsites' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof GetLeadResponseDataType
> = z.nativeEnum(GetLeadResponseDataType);

/** @internal */
export const GetLeadResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof GetLeadResponseDataType
> = GetLeadResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseDataType$ {
  /** @deprecated use `GetLeadResponseDataType$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseDataType$inboundSchema;
  /** @deprecated use `GetLeadResponseDataType$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseDataType$outboundSchema;
}

/** @internal */
export const GetLeadResponseAddresses$inboundSchema: z.ZodType<
  GetLeadResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(GetLeadResponseDataType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type GetLeadResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const GetLeadResponseAddresses$outboundSchema: z.ZodType<
  GetLeadResponseAddresses$Outbound,
  z.ZodTypeDef,
  GetLeadResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(GetLeadResponseDataType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseAddresses$ {
  /** @deprecated use `GetLeadResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseAddresses$inboundSchema;
  /** @deprecated use `GetLeadResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseAddresses$outboundSchema;
  /** @deprecated use `GetLeadResponseAddresses$Outbound` instead. */
  export type Outbound = GetLeadResponseAddresses$Outbound;
}

export function getLeadResponseAddressesToJSON(
  getLeadResponseAddresses: GetLeadResponseAddresses,
): string {
  return JSON.stringify(
    GetLeadResponseAddresses$outboundSchema.parse(getLeadResponseAddresses),
  );
}

export function getLeadResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseAddresses' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseSocialLinks$inboundSchema: z.ZodType<
  GetLeadResponseSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetLeadResponseSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const GetLeadResponseSocialLinks$outboundSchema: z.ZodType<
  GetLeadResponseSocialLinks$Outbound,
  z.ZodTypeDef,
  GetLeadResponseSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseSocialLinks$ {
  /** @deprecated use `GetLeadResponseSocialLinks$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseSocialLinks$inboundSchema;
  /** @deprecated use `GetLeadResponseSocialLinks$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseSocialLinks$outboundSchema;
  /** @deprecated use `GetLeadResponseSocialLinks$Outbound` instead. */
  export type Outbound = GetLeadResponseSocialLinks$Outbound;
}

export function getLeadResponseSocialLinksToJSON(
  getLeadResponseSocialLinks: GetLeadResponseSocialLinks,
): string {
  return JSON.stringify(
    GetLeadResponseSocialLinks$outboundSchema.parse(getLeadResponseSocialLinks),
  );
}

export function getLeadResponseSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseSocialLinks' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseDataPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof GetLeadResponseDataPhoneNumbersType
> = z.nativeEnum(GetLeadResponseDataPhoneNumbersType);

/** @internal */
export const GetLeadResponseDataPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof GetLeadResponseDataPhoneNumbersType> =
    GetLeadResponseDataPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseDataPhoneNumbersType$ {
  /** @deprecated use `GetLeadResponseDataPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    GetLeadResponseDataPhoneNumbersType$inboundSchema;
  /** @deprecated use `GetLeadResponseDataPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    GetLeadResponseDataPhoneNumbersType$outboundSchema;
}

/** @internal */
export const GetLeadResponsePhoneNumbers$inboundSchema: z.ZodType<
  GetLeadResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(GetLeadResponseDataPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type GetLeadResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const GetLeadResponsePhoneNumbers$outboundSchema: z.ZodType<
  GetLeadResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  GetLeadResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(GetLeadResponseDataPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponsePhoneNumbers$ {
  /** @deprecated use `GetLeadResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `GetLeadResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `GetLeadResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = GetLeadResponsePhoneNumbers$Outbound;
}

export function getLeadResponsePhoneNumbersToJSON(
  getLeadResponsePhoneNumbers: GetLeadResponsePhoneNumbers,
): string {
  return JSON.stringify(
    GetLeadResponsePhoneNumbers$outboundSchema.parse(
      getLeadResponsePhoneNumbers,
    ),
  );
}

export function getLeadResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof GetLeadResponseDataEmailsType
> = z.nativeEnum(GetLeadResponseDataEmailsType);

/** @internal */
export const GetLeadResponseDataEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof GetLeadResponseDataEmailsType
> = GetLeadResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseDataEmailsType$ {
  /** @deprecated use `GetLeadResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseDataEmailsType$inboundSchema;
  /** @deprecated use `GetLeadResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const GetLeadResponseEmails$inboundSchema: z.ZodType<
  GetLeadResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(GetLeadResponseDataEmailsType$inboundSchema).optional(),
});

/** @internal */
export type GetLeadResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const GetLeadResponseEmails$outboundSchema: z.ZodType<
  GetLeadResponseEmails$Outbound,
  z.ZodTypeDef,
  GetLeadResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(GetLeadResponseDataEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseEmails$ {
  /** @deprecated use `GetLeadResponseEmails$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseEmails$inboundSchema;
  /** @deprecated use `GetLeadResponseEmails$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseEmails$outboundSchema;
  /** @deprecated use `GetLeadResponseEmails$Outbound` instead. */
  export type Outbound = GetLeadResponseEmails$Outbound;
}

export function getLeadResponseEmailsToJSON(
  getLeadResponseEmails: GetLeadResponseEmails,
): string {
  return JSON.stringify(
    GetLeadResponseEmails$outboundSchema.parse(getLeadResponseEmails),
  );
}

export function getLeadResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseEmails' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseValue6$inboundSchema: z.ZodType<
  GetLeadResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetLeadResponseValue6$Outbound = {};

/** @internal */
export const GetLeadResponseValue6$outboundSchema: z.ZodType<
  GetLeadResponseValue6$Outbound,
  z.ZodTypeDef,
  GetLeadResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseValue6$ {
  /** @deprecated use `GetLeadResponseValue6$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseValue6$inboundSchema;
  /** @deprecated use `GetLeadResponseValue6$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseValue6$outboundSchema;
  /** @deprecated use `GetLeadResponseValue6$Outbound` instead. */
  export type Outbound = GetLeadResponseValue6$Outbound;
}

export function getLeadResponseValue6ToJSON(
  getLeadResponseValue6: GetLeadResponseValue6,
): string {
  return JSON.stringify(
    GetLeadResponseValue6$outboundSchema.parse(getLeadResponseValue6),
  );
}

export function getLeadResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseValue6' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseValue4$inboundSchema: z.ZodType<
  GetLeadResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetLeadResponseValue4$Outbound = {};

/** @internal */
export const GetLeadResponseValue4$outboundSchema: z.ZodType<
  GetLeadResponseValue4$Outbound,
  z.ZodTypeDef,
  GetLeadResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseValue4$ {
  /** @deprecated use `GetLeadResponseValue4$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseValue4$inboundSchema;
  /** @deprecated use `GetLeadResponseValue4$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseValue4$outboundSchema;
  /** @deprecated use `GetLeadResponseValue4$Outbound` instead. */
  export type Outbound = GetLeadResponseValue4$Outbound;
}

export function getLeadResponseValue4ToJSON(
  getLeadResponseValue4: GetLeadResponseValue4,
): string {
  return JSON.stringify(
    GetLeadResponseValue4$outboundSchema.parse(getLeadResponseValue4),
  );
}

export function getLeadResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseValue4' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseValue$inboundSchema: z.ZodType<
  GetLeadResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetLeadResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => GetLeadResponseValue6$inboundSchema)),
]);

/** @internal */
export type GetLeadResponseValue$Outbound =
  | GetLeadResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<GetLeadResponseValue6$Outbound>;

/** @internal */
export const GetLeadResponseValue$outboundSchema: z.ZodType<
  GetLeadResponseValue$Outbound,
  z.ZodTypeDef,
  GetLeadResponseValue
> = z.union([
  z.lazy(() => GetLeadResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => GetLeadResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseValue$ {
  /** @deprecated use `GetLeadResponseValue$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseValue$inboundSchema;
  /** @deprecated use `GetLeadResponseValue$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseValue$outboundSchema;
  /** @deprecated use `GetLeadResponseValue$Outbound` instead. */
  export type Outbound = GetLeadResponseValue$Outbound;
}

export function getLeadResponseValueToJSON(
  getLeadResponseValue: GetLeadResponseValue,
): string {
  return JSON.stringify(
    GetLeadResponseValue$outboundSchema.parse(getLeadResponseValue),
  );
}

export function getLeadResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseValue' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseCustomFields$inboundSchema: z.ZodType<
  GetLeadResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => GetLeadResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => GetLeadResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type GetLeadResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | GetLeadResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<GetLeadResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const GetLeadResponseCustomFields$outboundSchema: z.ZodType<
  GetLeadResponseCustomFields$Outbound,
  z.ZodTypeDef,
  GetLeadResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => GetLeadResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => GetLeadResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseCustomFields$ {
  /** @deprecated use `GetLeadResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseCustomFields$inboundSchema;
  /** @deprecated use `GetLeadResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseCustomFields$outboundSchema;
  /** @deprecated use `GetLeadResponseCustomFields$Outbound` instead. */
  export type Outbound = GetLeadResponseCustomFields$Outbound;
}

export function getLeadResponseCustomFieldsToJSON(
  getLeadResponseCustomFields: GetLeadResponseCustomFields,
): string {
  return JSON.stringify(
    GetLeadResponseCustomFields$outboundSchema.parse(
      getLeadResponseCustomFields,
    ),
  );
}

export function getLeadResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseCustomMappings$inboundSchema: z.ZodType<
  GetLeadResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetLeadResponseCustomMappings$Outbound = {};

/** @internal */
export const GetLeadResponseCustomMappings$outboundSchema: z.ZodType<
  GetLeadResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  GetLeadResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseCustomMappings$ {
  /** @deprecated use `GetLeadResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseCustomMappings$inboundSchema;
  /** @deprecated use `GetLeadResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseCustomMappings$outboundSchema;
  /** @deprecated use `GetLeadResponseCustomMappings$Outbound` instead. */
  export type Outbound = GetLeadResponseCustomMappings$Outbound;
}

export function getLeadResponseCustomMappingsToJSON(
  getLeadResponseCustomMappings: GetLeadResponseCustomMappings,
): string {
  return JSON.stringify(
    GetLeadResponseCustomMappings$outboundSchema.parse(
      getLeadResponseCustomMappings,
    ),
  );
}

export function getLeadResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseExtendPaths$inboundSchema: z.ZodType<
  GetLeadResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type GetLeadResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const GetLeadResponseExtendPaths$outboundSchema: z.ZodType<
  GetLeadResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  GetLeadResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseExtendPaths$ {
  /** @deprecated use `GetLeadResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseExtendPaths$inboundSchema;
  /** @deprecated use `GetLeadResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseExtendPaths$outboundSchema;
  /** @deprecated use `GetLeadResponseExtendPaths$Outbound` instead. */
  export type Outbound = GetLeadResponseExtendPaths$Outbound;
}

export function getLeadResponseExtendPathsToJSON(
  getLeadResponseExtendPaths: GetLeadResponseExtendPaths,
): string {
  return JSON.stringify(
    GetLeadResponseExtendPaths$outboundSchema.parse(getLeadResponseExtendPaths),
  );
}

export function getLeadResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const GetLeadResponsePassThrough$inboundSchema: z.ZodType<
  GetLeadResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => GetLeadResponseExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type GetLeadResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<GetLeadResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const GetLeadResponsePassThrough$outboundSchema: z.ZodType<
  GetLeadResponsePassThrough$Outbound,
  z.ZodTypeDef,
  GetLeadResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => GetLeadResponseExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponsePassThrough$ {
  /** @deprecated use `GetLeadResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponsePassThrough$inboundSchema;
  /** @deprecated use `GetLeadResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponsePassThrough$outboundSchema;
  /** @deprecated use `GetLeadResponsePassThrough$Outbound` instead. */
  export type Outbound = GetLeadResponsePassThrough$Outbound;
}

export function getLeadResponsePassThroughToJSON(
  getLeadResponsePassThrough: GetLeadResponsePassThrough,
): string {
  return JSON.stringify(
    GetLeadResponsePassThrough$outboundSchema.parse(getLeadResponsePassThrough),
  );
}

export function getLeadResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const GetLeadResponseData$inboundSchema: z.ZodType<
  GetLeadResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(GetLeadResponseCurrency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => GetLeadResponseWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => GetLeadResponseAddresses$inboundSchema))
    .optional(),
  social_links: z.array(z.lazy(() => GetLeadResponseSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => GetLeadResponsePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => GetLeadResponseEmails$inboundSchema)).optional(),
  custom_fields: z.array(
    z.lazy(() => GetLeadResponseCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => GetLeadResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => GetLeadResponsePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type GetLeadResponseData$Outbound = {
  id?: string | undefined;
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<GetLeadResponseWebsites$Outbound> | undefined;
  addresses?: Array<GetLeadResponseAddresses$Outbound> | undefined;
  social_links?: Array<GetLeadResponseSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<GetLeadResponsePhoneNumbers$Outbound> | undefined;
  emails?: Array<GetLeadResponseEmails$Outbound> | undefined;
  custom_fields?: Array<GetLeadResponseCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  custom_mappings?: GetLeadResponseCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<GetLeadResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const GetLeadResponseData$outboundSchema: z.ZodType<
  GetLeadResponseData$Outbound,
  z.ZodTypeDef,
  GetLeadResponseData
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(GetLeadResponseCurrency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => GetLeadResponseWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => GetLeadResponseAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(z.lazy(() => GetLeadResponseSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => GetLeadResponsePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => GetLeadResponseEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => GetLeadResponseCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customMappings: z.nullable(
    z.lazy(() => GetLeadResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => GetLeadResponsePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponseData$ {
  /** @deprecated use `GetLeadResponseData$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponseData$inboundSchema;
  /** @deprecated use `GetLeadResponseData$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponseData$outboundSchema;
  /** @deprecated use `GetLeadResponseData$Outbound` instead. */
  export type Outbound = GetLeadResponseData$Outbound;
}

export function getLeadResponseDataToJSON(
  getLeadResponseData: GetLeadResponseData,
): string {
  return JSON.stringify(
    GetLeadResponseData$outboundSchema.parse(getLeadResponseData),
  );
}

export function getLeadResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponseData' from JSON`,
  );
}

/** @internal */
export const GetLeadResponse$inboundSchema: z.ZodType<
  GetLeadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetLeadResponseData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetLeadResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: GetLeadResponseData$Outbound;
};

/** @internal */
export const GetLeadResponse$outboundSchema: z.ZodType<
  GetLeadResponse$Outbound,
  z.ZodTypeDef,
  GetLeadResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetLeadResponseData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLeadResponse$ {
  /** @deprecated use `GetLeadResponse$inboundSchema` instead. */
  export const inboundSchema = GetLeadResponse$inboundSchema;
  /** @deprecated use `GetLeadResponse$outboundSchema` instead. */
  export const outboundSchema = GetLeadResponse$outboundSchema;
  /** @deprecated use `GetLeadResponse$Outbound` instead. */
  export type Outbound = GetLeadResponse$Outbound;
}

export function getLeadResponseToJSON(
  getLeadResponse: GetLeadResponse,
): string {
  return JSON.stringify(GetLeadResponse$outboundSchema.parse(getLeadResponse));
}

export function getLeadResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetLeadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLeadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLeadResponse' from JSON`,
  );
}
