/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

export type OpportunityValue6 = {};

export type OpportunityValue4 = {};

/**
 * The value assigned to the custom field for the opportunity. This can be any string that represents specific data or metrics relevant to the opportunity, allowing for customized tracking and analysis within the CRM system.
 */
export type OpportunityValue =
  | OpportunityValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<OpportunityValue6>;

export type OpportunityCustomFields = {
  /**
   * A unique identifier for each custom field within the opportunity. This string value ensures that each custom field can be distinctly referenced and managed, facilitating precise data handling and updates.
   */
  id: string | null;
  /**
   * The name assigned to a custom field, represented as a string. This name helps in identifying the purpose or content of the custom field, making it easier to understand and utilize within the CRM system.
   */
  name?: string | null | undefined;
  /**
   * This field contains additional information or notes about the custom field associated with the opportunity. It provides context or clarification for the custom field's purpose or usage within the CRM system. The value is expected to be a string that can include any relevant details that enhance understanding of the custom field.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field for the opportunity. This can be any string that represents specific data or metrics relevant to the opportunity, allowing for customized tracking and analysis within the CRM system.
   */
  value?:
    | OpportunityValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<OpportunityValue6>
    | null
    | undefined;
};

/**
 * An object containing any custom mappings configured for this opportunity. These mappings allow for additional, user-defined fields or data structures to be included in the response, enhancing flexibility and integration capabilities.
 */
export type OpportunityCustomMappings = {};

export type OpportunityExtendPaths = {
  /**
   * This property specifies the JSONPath string that indicates where in the data structure the value should be applied. It is required for defining the exact location for data modification, ensuring that updates are accurately targeted. The format is a string representing a valid JSONPath expression.
   */
  path: string;
  /**
   * This property represents the value to be set at the specified JSONPath, and it can be of any data type. It is essential for applying the desired changes to the data structure, allowing for dynamic and flexible updates. The format is variable, depending on the type of data being inserted or modified.
   */
  value?: any | undefined;
};

export type OpportunityPassThrough = {
  /**
   * A mandatory identifier for the specific service to which the pass_through data applies. This ensures that the custom data is correctly routed and processed by the intended service integration.
   */
  serviceId: string;
  /**
   * This property contains an optional identifier for a specific workflow operation that the pass-through data should be applied to. It is particularly useful in scenarios where multiple downstream requests are made in a single Unify call, allowing developers to track and manage these operations effectively. The format is a string that uniquely identifies the operation within the CRM system.
   */
  operationId?: string | undefined;
  /**
   * This property is a flexible object designed to allow direct extension with any additional properties needed for the operation. It serves as a container for custom data that can be included in the response, enabling developers to tailor the output to specific requirements. The format is a JSON object that can include various key-value pairs as needed.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property is an array of objects used for making structured data modifications via specified paths. Each object in the array defines a path and a corresponding value to be applied, allowing for precise updates to the data structure. The format is an array of JSON objects, each containing a 'path' and 'value' field.
   */
  extendPaths?: Array<OpportunityExtendPaths> | undefined;
};

/**
 * This object contains all the detailed information about the specific opportunity retrieved from the CRM system. It serves as the main container for the opportunity's data, including identifiers, titles, and associated contacts. This structure allows developers to access and integrate opportunity details efficiently into their applications.
 */
export type Opportunity = {
  /**
   * A unique identifier for the opportunity within the CRM system. This string value is used to distinguish this particular opportunity from others, facilitating precise data retrieval and manipulation.
   */
  id?: string | undefined;
  /**
   * The title or name of the opportunity, providing a brief and clear reference to the opportunity's purpose or subject. This string is essential for identifying and displaying the opportunity in user interfaces and reports.
   */
  title: string;
  /**
   * The unique identifier of the primary contact associated with the opportunity. This string links the opportunity to a specific contact, enabling developers to fetch and display related contact information easily.
   */
  primaryContactId?: string | null | undefined;
  /**
   * A textual description of the opportunity, offering additional context or details about its nature and objectives. This string can be used to provide users with more comprehensive information about what the opportunity entails.
   */
  description?: string | null | undefined;
  /**
   * Specifies the category or classification of the opportunity within the CRM system. This helps in organizing and filtering opportunities based on their type, such as 'new business', 'renewal', or 'upsell'.
   */
  type?: string | null | undefined;
  /**
   * Represents the total financial value associated with the opportunity, expressed as a numerical amount. This value is crucial for financial forecasting and assessing the potential impact of the opportunity on revenue.
   */
  monetaryAmount?: number | null | undefined;
  currency?: Currency | null | undefined;
  /**
   * Indicates the likelihood of successfully closing the opportunity, represented as a percentage. This metric is used to evaluate the potential success rate and prioritize opportunities accordingly.
   */
  winProbability?: number | null | undefined;
  /**
   * Estimates the potential revenue that could be generated from the opportunity, calculated based on the monetary amount and win probability. This figure aids in revenue projections and strategic planning.
   */
  expectedRevenue?: number | null | undefined;
  /**
   * The date when the opportunity was officially closed. This field is formatted as a string representing a date, typically in ISO 8601 format (e.g., 'YYYY-MM-DD'). If this field is null, it indicates that the opportunity is still open and has not yet been closed.
   */
  closeDate?: RFCDate | null | undefined;
  /**
   * A unique string identifier that corresponds to the specific reason why the opportunity was lost. This ID can be used to reference predefined loss reasons within the CRM system, aiding in categorizing and analyzing lost opportunities.
   */
  lossReasonId?: string | null | undefined;
  /**
   * A descriptive string explaining why the opportunity was lost. This field provides context and insight into the factors that led to the loss, which can be useful for future strategy adjustments.
   */
  lossReason?: string | null | undefined;
  /**
   * A unique string identifier that corresponds to the specific reason why the opportunity was won. This ID helps in categorizing and understanding successful opportunities within the CRM system.
   */
  wonReasonId?: string | null | undefined;
  /**
   * A descriptive string detailing the reason why the opportunity was won. This information is valuable for analyzing successful strategies and can inform future business tactics.
   */
  wonReason?: string | null | undefined;
  /**
   * The unique identifier for the pipeline associated with this opportunity. This ID helps in categorizing the opportunity within a specific sales process pipeline, aiding in tracking and management. It is a string value that uniquely represents the pipeline in the CRM system.
   */
  pipelineId?: string | null | undefined;
  /**
   * The unique identifier for the stage within the pipeline where the opportunity currently resides. This ID is crucial for understanding the opportunity's progress and current status in the sales process. It is a string value that uniquely identifies the stage in the CRM system.
   */
  pipelineStageId?: string | null | undefined;
  /**
   * The unique identifier for the source from which the opportunity originated. This ID is used to track the origin of the opportunity, providing insights into lead generation and marketing effectiveness. It is a string value that uniquely represents the source in the CRM system.
   */
  sourceId?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with this opportunity. This ID links the opportunity to its originating lead, facilitating tracking and follow-up actions. It is a string value that uniquely represents the lead in the CRM system.
   */
  leadId?: string | null | undefined;
  /**
   * The source from which the lead associated with this opportunity was generated. This information helps in understanding the lead's origin and can influence marketing and sales strategies. It is a string value that describes the lead's source in the CRM system.
   */
  leadSource?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with the opportunity. This ID is used to link the opportunity to a specific contact within the CRM system, allowing for easy retrieval and management of contact-related information.
   */
  contactId?: string | null | undefined;
  /**
   * An array containing unique identifiers for all contacts associated with the opportunity. This allows developers to access and manage multiple contacts linked to a single opportunity, facilitating comprehensive relationship tracking.
   */
  contactIds?: Array<string> | undefined;
  /**
   * The unique identifier of the company associated with the opportunity. This ID is crucial for linking the opportunity to a specific company, ensuring accurate association and data retrieval within the CRM system.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company associated with the opportunity. This field provides a human-readable reference to the company, aiding in the identification and management of opportunities within the CRM.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier of the user who owns the opportunity. This ID helps in associating the opportunity with a specific user within the CRM system, facilitating user-specific operations and reporting. The format is a string that uniquely represents the user.
   */
  ownerId?: string | null | undefined;
  /**
   * The priority level of the opportunity, indicating its importance or urgency within the CRM system. This string value helps in categorizing opportunities for better management and decision-making processes. It is used to prioritize tasks and allocate resources effectively.
   */
  priority?: string | null | undefined;
  /**
   * The current status of the opportunity, reflecting its stage in the sales or engagement process. This string value helps in tracking the progress and managing the lifecycle of the opportunity within the CRM system. It is crucial for understanding the opportunity's current state and planning next steps.
   */
  status?: string | null | undefined;
  /**
   * The unique identifier of the current status of the opportunity, used to precisely track and manage the opportunity's lifecycle within the CRM system. This string ID is essential for linking the opportunity to its specific status, facilitating accurate reporting and workflow automation.
   */
  statusId?: string | null | undefined;
  /**
   * An array of tags associated with the opportunity, used for categorization and easy retrieval within the CRM system. These tags help in organizing opportunities based on various criteria, enhancing searchability and filtering capabilities. Each tag is a string that represents a specific attribute or category.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The total number of interactions recorded with this opportunity. This numeric value provides insight into the level of engagement and activity related to the opportunity, useful for tracking progress and customer interest.
   */
  interactionCount?: number | null | undefined;
  /**
   * A collection of custom fields associated with the opportunity, allowing for additional, user-defined data to be stored. Each entry in this array represents a specific custom field, providing flexibility to tailor the opportunity record to specific business needs.
   */
  customFields?: Array<OpportunityCustomFields> | undefined;
  /**
   * This property records the date and time when the opportunity's stage was last updated. It is formatted as an ISO 8601 string, providing a timestamp that helps track the progress and changes in the opportunity's lifecycle.
   */
  stageLastChangedAt?: Date | null | undefined;
  /**
   * Indicates the date and time of the most recent activity related to the opportunity. This is formatted as an ISO 8601 string and helps in understanding the recency of interactions or updates associated with the opportunity.
   */
  lastActivityAt?: string | null | undefined;
  /**
   * A boolean value that signifies whether the opportunity has been marked as deleted in the CRM system. If true, the opportunity is considered removed from active records, although it may still exist in the database for historical reference or recovery purposes.
   */
  deleted?: boolean | undefined;
  /**
   * The date and time when the opportunity's stage was last updated. This timestamp helps track the progress and changes in the opportunity's lifecycle. It is formatted as an ISO 8601 string, such as '2023-10-05T14:48:00Z'.
   */
  dateStageChanged?: Date | null | undefined;
  /**
   * The date and time when the last interaction with the opportunity occurred. This information is crucial for understanding recent engagement and planning future communications. It follows the ISO 8601 format, for example, '2023-10-05T14:48:00Z'.
   */
  dateLastContacted?: Date | null | undefined;
  /**
   * The date and time when the lead associated with this opportunity was initially created. This timestamp provides insight into the age of the lead and is formatted as an ISO 8601 string, such as '2023-10-05T14:48:00Z'.
   */
  dateLeadCreated?: Date | null | undefined;
  /**
   * An object containing any custom mappings configured for this opportunity. These mappings allow for additional, user-defined fields or data structures to be included in the response, enhancing flexibility and integration capabilities.
   */
  customMappings?: OpportunityCustomMappings | null | undefined;
  /**
   * The unique identifier of the user who last made changes to the opportunity. This ID helps track accountability and changes made by different users within the CRM system.
   */
  updatedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who originally created the opportunity record in the CRM system. This ID helps track the origin of the opportunity and is useful for auditing and user-specific operations.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the opportunity was last modified. This is in ISO 8601 format and helps in tracking changes and ensuring data freshness in the CRM system.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp representing when the opportunity was initially created in the CRM system. Provided in ISO 8601 format, it is essential for understanding the timeline and history of the opportunity.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array that holds custom data or modifications specific to a service, allowing for flexible data handling and integration when creating or updating resources. This is particularly useful for passing additional parameters that are not part of the standard API fields.
   */
  passThrough?: Array<OpportunityPassThrough> | undefined;
};

/** @internal */
export const OpportunityValue6$inboundSchema: z.ZodType<
  OpportunityValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunityValue6$Outbound = {};

/** @internal */
export const OpportunityValue6$outboundSchema: z.ZodType<
  OpportunityValue6$Outbound,
  z.ZodTypeDef,
  OpportunityValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityValue6$ {
  /** @deprecated use `OpportunityValue6$inboundSchema` instead. */
  export const inboundSchema = OpportunityValue6$inboundSchema;
  /** @deprecated use `OpportunityValue6$outboundSchema` instead. */
  export const outboundSchema = OpportunityValue6$outboundSchema;
  /** @deprecated use `OpportunityValue6$Outbound` instead. */
  export type Outbound = OpportunityValue6$Outbound;
}

export function opportunityValue6ToJSON(
  opportunityValue6: OpportunityValue6,
): string {
  return JSON.stringify(
    OpportunityValue6$outboundSchema.parse(opportunityValue6),
  );
}

export function opportunityValue6FromJSON(
  jsonString: string,
): SafeParseResult<OpportunityValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityValue6' from JSON`,
  );
}

/** @internal */
export const OpportunityValue4$inboundSchema: z.ZodType<
  OpportunityValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunityValue4$Outbound = {};

/** @internal */
export const OpportunityValue4$outboundSchema: z.ZodType<
  OpportunityValue4$Outbound,
  z.ZodTypeDef,
  OpportunityValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityValue4$ {
  /** @deprecated use `OpportunityValue4$inboundSchema` instead. */
  export const inboundSchema = OpportunityValue4$inboundSchema;
  /** @deprecated use `OpportunityValue4$outboundSchema` instead. */
  export const outboundSchema = OpportunityValue4$outboundSchema;
  /** @deprecated use `OpportunityValue4$Outbound` instead. */
  export type Outbound = OpportunityValue4$Outbound;
}

export function opportunityValue4ToJSON(
  opportunityValue4: OpportunityValue4,
): string {
  return JSON.stringify(
    OpportunityValue4$outboundSchema.parse(opportunityValue4),
  );
}

export function opportunityValue4FromJSON(
  jsonString: string,
): SafeParseResult<OpportunityValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityValue4' from JSON`,
  );
}

/** @internal */
export const OpportunityValue$inboundSchema: z.ZodType<
  OpportunityValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpportunityValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => OpportunityValue6$inboundSchema)),
]);

/** @internal */
export type OpportunityValue$Outbound =
  | OpportunityValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<OpportunityValue6$Outbound>;

/** @internal */
export const OpportunityValue$outboundSchema: z.ZodType<
  OpportunityValue$Outbound,
  z.ZodTypeDef,
  OpportunityValue
> = z.union([
  z.lazy(() => OpportunityValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => OpportunityValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityValue$ {
  /** @deprecated use `OpportunityValue$inboundSchema` instead. */
  export const inboundSchema = OpportunityValue$inboundSchema;
  /** @deprecated use `OpportunityValue$outboundSchema` instead. */
  export const outboundSchema = OpportunityValue$outboundSchema;
  /** @deprecated use `OpportunityValue$Outbound` instead. */
  export type Outbound = OpportunityValue$Outbound;
}

export function opportunityValueToJSON(
  opportunityValue: OpportunityValue,
): string {
  return JSON.stringify(
    OpportunityValue$outboundSchema.parse(opportunityValue),
  );
}

export function opportunityValueFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityValue' from JSON`,
  );
}

/** @internal */
export const OpportunityCustomFields$inboundSchema: z.ZodType<
  OpportunityCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => OpportunityValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => OpportunityValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type OpportunityCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | OpportunityValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<OpportunityValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const OpportunityCustomFields$outboundSchema: z.ZodType<
  OpportunityCustomFields$Outbound,
  z.ZodTypeDef,
  OpportunityCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => OpportunityValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => OpportunityValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityCustomFields$ {
  /** @deprecated use `OpportunityCustomFields$inboundSchema` instead. */
  export const inboundSchema = OpportunityCustomFields$inboundSchema;
  /** @deprecated use `OpportunityCustomFields$outboundSchema` instead. */
  export const outboundSchema = OpportunityCustomFields$outboundSchema;
  /** @deprecated use `OpportunityCustomFields$Outbound` instead. */
  export type Outbound = OpportunityCustomFields$Outbound;
}

export function opportunityCustomFieldsToJSON(
  opportunityCustomFields: OpportunityCustomFields,
): string {
  return JSON.stringify(
    OpportunityCustomFields$outboundSchema.parse(opportunityCustomFields),
  );
}

export function opportunityCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityCustomFields' from JSON`,
  );
}

/** @internal */
export const OpportunityCustomMappings$inboundSchema: z.ZodType<
  OpportunityCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunityCustomMappings$Outbound = {};

/** @internal */
export const OpportunityCustomMappings$outboundSchema: z.ZodType<
  OpportunityCustomMappings$Outbound,
  z.ZodTypeDef,
  OpportunityCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityCustomMappings$ {
  /** @deprecated use `OpportunityCustomMappings$inboundSchema` instead. */
  export const inboundSchema = OpportunityCustomMappings$inboundSchema;
  /** @deprecated use `OpportunityCustomMappings$outboundSchema` instead. */
  export const outboundSchema = OpportunityCustomMappings$outboundSchema;
  /** @deprecated use `OpportunityCustomMappings$Outbound` instead. */
  export type Outbound = OpportunityCustomMappings$Outbound;
}

export function opportunityCustomMappingsToJSON(
  opportunityCustomMappings: OpportunityCustomMappings,
): string {
  return JSON.stringify(
    OpportunityCustomMappings$outboundSchema.parse(opportunityCustomMappings),
  );
}

export function opportunityCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityCustomMappings' from JSON`,
  );
}

/** @internal */
export const OpportunityExtendPaths$inboundSchema: z.ZodType<
  OpportunityExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type OpportunityExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const OpportunityExtendPaths$outboundSchema: z.ZodType<
  OpportunityExtendPaths$Outbound,
  z.ZodTypeDef,
  OpportunityExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityExtendPaths$ {
  /** @deprecated use `OpportunityExtendPaths$inboundSchema` instead. */
  export const inboundSchema = OpportunityExtendPaths$inboundSchema;
  /** @deprecated use `OpportunityExtendPaths$outboundSchema` instead. */
  export const outboundSchema = OpportunityExtendPaths$outboundSchema;
  /** @deprecated use `OpportunityExtendPaths$Outbound` instead. */
  export type Outbound = OpportunityExtendPaths$Outbound;
}

export function opportunityExtendPathsToJSON(
  opportunityExtendPaths: OpportunityExtendPaths,
): string {
  return JSON.stringify(
    OpportunityExtendPaths$outboundSchema.parse(opportunityExtendPaths),
  );
}

export function opportunityExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityExtendPaths' from JSON`,
  );
}

/** @internal */
export const OpportunityPassThrough$inboundSchema: z.ZodType<
  OpportunityPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => OpportunityExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type OpportunityPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<OpportunityExtendPaths$Outbound> | undefined;
};

/** @internal */
export const OpportunityPassThrough$outboundSchema: z.ZodType<
  OpportunityPassThrough$Outbound,
  z.ZodTypeDef,
  OpportunityPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => OpportunityExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityPassThrough$ {
  /** @deprecated use `OpportunityPassThrough$inboundSchema` instead. */
  export const inboundSchema = OpportunityPassThrough$inboundSchema;
  /** @deprecated use `OpportunityPassThrough$outboundSchema` instead. */
  export const outboundSchema = OpportunityPassThrough$outboundSchema;
  /** @deprecated use `OpportunityPassThrough$Outbound` instead. */
  export type Outbound = OpportunityPassThrough$Outbound;
}

export function opportunityPassThroughToJSON(
  opportunityPassThrough: OpportunityPassThrough,
): string {
  return JSON.stringify(
    OpportunityPassThrough$outboundSchema.parse(opportunityPassThrough),
  );
}

export function opportunityPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityPassThrough' from JSON`,
  );
}

/** @internal */
export const Opportunity$inboundSchema: z.ZodType<
  Opportunity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.string(),
  primary_contact_id: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  win_probability: z.nullable(z.number()).optional(),
  expected_revenue: z.nullable(z.number()).optional(),
  close_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  loss_reason_id: z.nullable(z.string()).optional(),
  loss_reason: z.nullable(z.string()).optional(),
  won_reason_id: z.nullable(z.string()).optional(),
  won_reason: z.nullable(z.string()).optional(),
  pipeline_id: z.nullable(z.string()).optional(),
  pipeline_stage_id: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  contact_ids: z.array(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  status_id: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  interaction_count: z.nullable(z.number()).optional(),
  custom_fields: z.array(z.lazy(() => OpportunityCustomFields$inboundSchema))
    .optional(),
  stage_last_changed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_activity_at: z.nullable(z.string()).optional(),
  deleted: z.boolean().optional(),
  date_stage_changed: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_last_contacted: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_lead_created: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => OpportunityCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(z.lazy(() => OpportunityPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "primary_contact_id": "primaryContactId",
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "expected_revenue": "expectedRevenue",
    "close_date": "closeDate",
    "loss_reason_id": "lossReasonId",
    "loss_reason": "lossReason",
    "won_reason_id": "wonReasonId",
    "won_reason": "wonReason",
    "pipeline_id": "pipelineId",
    "pipeline_stage_id": "pipelineStageId",
    "source_id": "sourceId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "contact_id": "contactId",
    "contact_ids": "contactIds",
    "company_id": "companyId",
    "company_name": "companyName",
    "owner_id": "ownerId",
    "status_id": "statusId",
    "interaction_count": "interactionCount",
    "custom_fields": "customFields",
    "stage_last_changed_at": "stageLastChangedAt",
    "last_activity_at": "lastActivityAt",
    "date_stage_changed": "dateStageChanged",
    "date_last_contacted": "dateLastContacted",
    "date_lead_created": "dateLeadCreated",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type Opportunity$Outbound = {
  id?: string | undefined;
  title: string;
  primary_contact_id?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  win_probability?: number | null | undefined;
  expected_revenue?: number | null | undefined;
  close_date?: string | null | undefined;
  loss_reason_id?: string | null | undefined;
  loss_reason?: string | null | undefined;
  won_reason_id?: string | null | undefined;
  won_reason?: string | null | undefined;
  pipeline_id?: string | null | undefined;
  pipeline_stage_id?: string | null | undefined;
  source_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  contact_id?: string | null | undefined;
  contact_ids?: Array<string> | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  owner_id?: string | null | undefined;
  priority?: string | null | undefined;
  status?: string | null | undefined;
  status_id?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  interaction_count?: number | null | undefined;
  custom_fields?: Array<OpportunityCustomFields$Outbound> | undefined;
  stage_last_changed_at?: string | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  date_stage_changed?: string | null | undefined;
  date_last_contacted?: string | null | undefined;
  date_lead_created?: string | null | undefined;
  custom_mappings?: OpportunityCustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<OpportunityPassThrough$Outbound> | undefined;
};

/** @internal */
export const Opportunity$outboundSchema: z.ZodType<
  Opportunity$Outbound,
  z.ZodTypeDef,
  Opportunity
> = z.object({
  id: z.string().optional(),
  title: z.string(),
  primaryContactId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  winProbability: z.nullable(z.number()).optional(),
  expectedRevenue: z.nullable(z.number()).optional(),
  closeDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  lossReasonId: z.nullable(z.string()).optional(),
  lossReason: z.nullable(z.string()).optional(),
  wonReasonId: z.nullable(z.string()).optional(),
  wonReason: z.nullable(z.string()).optional(),
  pipelineId: z.nullable(z.string()).optional(),
  pipelineStageId: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  contactIds: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  statusId: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  interactionCount: z.nullable(z.number()).optional(),
  customFields: z.array(z.lazy(() => OpportunityCustomFields$outboundSchema))
    .optional(),
  stageLastChangedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  lastActivityAt: z.nullable(z.string()).optional(),
  deleted: z.boolean().optional(),
  dateStageChanged: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  dateLastContacted: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  dateLeadCreated: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => OpportunityCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(z.lazy(() => OpportunityPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    primaryContactId: "primary_contact_id",
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    expectedRevenue: "expected_revenue",
    closeDate: "close_date",
    lossReasonId: "loss_reason_id",
    lossReason: "loss_reason",
    wonReasonId: "won_reason_id",
    wonReason: "won_reason",
    pipelineId: "pipeline_id",
    pipelineStageId: "pipeline_stage_id",
    sourceId: "source_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    contactId: "contact_id",
    contactIds: "contact_ids",
    companyId: "company_id",
    companyName: "company_name",
    ownerId: "owner_id",
    statusId: "status_id",
    interactionCount: "interaction_count",
    customFields: "custom_fields",
    stageLastChangedAt: "stage_last_changed_at",
    lastActivityAt: "last_activity_at",
    dateStageChanged: "date_stage_changed",
    dateLastContacted: "date_last_contacted",
    dateLeadCreated: "date_lead_created",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Opportunity$ {
  /** @deprecated use `Opportunity$inboundSchema` instead. */
  export const inboundSchema = Opportunity$inboundSchema;
  /** @deprecated use `Opportunity$outboundSchema` instead. */
  export const outboundSchema = Opportunity$outboundSchema;
  /** @deprecated use `Opportunity$Outbound` instead. */
  export type Outbound = Opportunity$Outbound;
}

export function opportunityToJSON(opportunity: Opportunity): string {
  return JSON.stringify(Opportunity$outboundSchema.parse(opportunity));
}

export function opportunityFromJSON(
  jsonString: string,
): SafeParseResult<Opportunity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Opportunity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Opportunity' from JSON`,
  );
}
