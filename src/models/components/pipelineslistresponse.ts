/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Indicates the associated currency for an amount of money within the pipeline. This field uses ISO 4217 currency codes (e.g., USD, EUR) to standardize financial data across different regions and systems. While not mandatory, specifying a currency is essential for pipelines that involve financial transactions, ensuring that all monetary values are correctly interpreted and reported. This is particularly useful in multi-national operations where currency consistency is critical.
 */
export const PipelinesListResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money within the pipeline. This field uses ISO 4217 currency codes (e.g., USD, EUR) to standardize financial data across different regions and systems. While not mandatory, specifying a currency is essential for pipelines that involve financial transactions, ensuring that all monetary values are correctly interpreted and reported. This is particularly useful in multi-national operations where currency consistency is critical.
 */
export type PipelinesListResponseCurrency = ClosedEnum<
  typeof PipelinesListResponseCurrency
>;

export type Stages = {
  /**
   * A unique identifier for each stage within the pipeline. This ID is essential for distinguishing between different stages, especially when updating or retrieving specific stage information. It ensures that each stage can be individually managed and referenced, facilitating precise updates and data integrity within the pipeline.
   */
  id?: string | null | undefined;
  /**
   * The descriptive name assigned to each stage within the pipeline. This name should clearly convey the purpose or focus of the stage, aiding users in quickly understanding the stage's role within the pipeline. Naming conventions should be consistent and meaningful to ensure clarity and ease of use across the CRM system.
   */
  name?: string | null | undefined;
  /**
   * The name or label assigned to a specific stage within the pipeline. This value is used to identify and differentiate stages in the pipeline, allowing users to track the progress of opportunities as they move through various phases. It is crucial for organizing and managing the sales process effectively, ensuring that each stage is clearly defined and understood by all team members.
   */
  value?: string | null | undefined;
  /**
   * An integer representing the likelihood, expressed as a percentage, that an opportunity will be successfully closed at this stage of the pipeline. Valid values range from 0 to 100, where 0 indicates no chance of winning and 100 indicates certainty. This metric helps sales teams prioritize efforts and forecast potential revenue by assessing the probability of success at different stages.
   */
  winProbability?: number | null | undefined;
  /**
   * A numerical value that determines the sequence in which this pipeline stage appears in the user interface. Lower numbers typically indicate earlier stages in the pipeline, while higher numbers represent later stages. This ordering is essential for visualizing the sales process flow and ensuring that stages are presented in a logical and intuitive manner for users.
   */
  displayOrder?: number | null | undefined;
};

export type PipelinesListResponseExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the user record where the value should be applied. This is essential for making precise updates to nested fields, ensuring that changes are made only to the intended parts of the data structure. The path must be valid and correspond to an existing field within the user record.
   */
  path: string;
  /**
   * This property represents the specific value that you wish to assign to a designated path within the user record. It can be of any data type, such as a string, number, boolean, or object, depending on the field being updated. The flexibility of this property allows for a wide range of updates, from simple text changes to complex data structures. In the context of the `usersUpdate` operation, this property is crucial for specifying the exact data modification you intend to make, ensuring that only the targeted fields are altered without affecting other data. Proper validation should be applied to ensure the value is compatible with the field's expected data type and business rules. Common use cases include updating user contact information, preferences, or custom attributes specific to your CRM's schema.
   */
  value?: any | undefined;
};

export type PipelinesListResponsePassThrough = {
  /**
   * The unique identifier for the specific service to which this pass_through should be applied. This is crucial for directing the update operation to the correct service within the CRM system, ensuring that the modifications are executed in the appropriate context. It must be a valid service ID that corresponds to an active service integration, and it is required for the operation to proceed.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation within the CRM system to which this pass_through should be applied. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise targeting and execution of specific operations. If provided, it should match an existing operation ID to ensure correct processing.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the inclusion of any additional properties needed for direct extension of the user record. This can be used to add custom fields or metadata that are not part of the standard user schema, providing a way to tailor the user data to specific business needs. The structure of this object should align with the CRM's data model to ensure compatibility.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications via specified paths. This allows for precise updates to nested data structures within the user record, enabling complex modifications without altering unrelated data. Each object in the array should define a clear path and value to be applied, ensuring targeted updates.
   */
  extendPaths?: Array<PipelinesListResponseExtendPaths> | undefined;
};

export type PipelinesListResponseData = {
  /**
   * The unique identifier of the Pipeline. This ID is crucial for identifying which specific pipeline you wish to update within the CRM system. It must match an existing pipeline's ID to ensure the correct data is modified. Typically, this ID is generated by the system when the pipeline is created and is immutable. It is not required in the request body for this operation, as it is specified in the path parameter.
   */
  id?: string | undefined;
  /**
   * The name of the Pipeline. This is a mandatory field that serves as the primary label for the pipeline within the CRM. It should be descriptive enough to convey the purpose or stage of the pipeline, aiding users in quickly identifying and managing different sales or project processes. The name must be unique within the context of the CRM to avoid confusion and ensure accurate reporting and tracking.
   */
  name: string;
  /**
   * Indicates the associated currency for an amount of money within the pipeline. This field uses ISO 4217 currency codes (e.g., USD, EUR) to standardize financial data across different regions and systems. While not mandatory, specifying a currency is essential for pipelines that involve financial transactions, ensuring that all monetary values are correctly interpreted and reported. This is particularly useful in multi-national operations where currency consistency is critical.
   */
  currency?: PipelinesListResponseCurrency | null | undefined;
  /**
   * Whether the Pipeline is archived or not. This boolean flag indicates the current status of the pipeline, where 'true' means the pipeline is archived and no longer active in day-to-day operations. Archiving a pipeline can help declutter the CRM interface by hiding pipelines that are no longer in use, while still retaining their data for historical analysis or compliance purposes. This field is optional but useful for lifecycle management of pipelines.
   */
  archived?: boolean | undefined;
  /**
   * Whether the Pipeline is active or not. This boolean field determines if the pipeline is currently in use and visible to users within the CRM. An active pipeline is one that is part of ongoing operations, such as sales processes or project management workflows. Setting this field to 'false' can help manage resources by deactivating pipelines that are temporarily not needed, without archiving them completely. This field is optional and can be used to toggle the operational status of a pipeline.
   */
  active?: boolean | undefined;
  /**
   * Defines the sequence in which the pipeline appears within the user interface. This property is crucial for organizing multiple pipelines in a logical order, enhancing user navigation and workflow efficiency. Typically, a lower number indicates a higher priority or earlier position in the list. Adjusting this value can help prioritize certain pipelines over others based on business needs or user preferences.
   */
  displayOrder?: number | null | undefined;
  /**
   * Indicates whether the pipeline has the win probability feature activated. This feature is used to estimate the likelihood of successfully closing deals within this pipeline, providing valuable insights for sales forecasting and strategy planning. Enabling this feature can help sales teams focus on high-probability deals, optimizing resource allocation and effort.
   */
  winProbabilityEnabled?: boolean | undefined;
  /**
   * An array representing the various stages within the pipeline. Each stage is a critical step in the sales or project process, and defining these stages helps in tracking progress and managing tasks effectively. This property allows for the customization of the pipeline to fit specific business processes or sales cycles.
   */
  stages?: Array<Stages> | undefined;
  /**
   * A timestamp indicating the most recent date and time when the pipeline or its stages were modified. This information is vital for tracking changes and maintaining an audit trail of updates, ensuring that users can identify the latest version of the pipeline configuration. The format typically follows ISO 8601 standards, such as 'YYYY-MM-DDTHH:MM:SSZ'.
   */
  updatedAt?: Date | null | undefined;
  /**
   * A timestamp marking the original creation date and time of the pipeline or its stages. This property is important for historical reference and auditing purposes, allowing users to understand the lifecycle of the pipeline from inception. Like 'updated_at', it usually adheres to ISO 8601 format, providing a standardized way to record and display date-time information.
   */
  createdAt?: Date | null | undefined;
  /**
   * The `pass_through` property is an array that allows you to include service-specific custom data or structured modifications directly within the request body. This is particularly useful when updating resources in a CRM system where additional, non-standard data needs to be sent to the service. By using this property, you can ensure that any unique requirements of the service are met without altering the core API structure. It supports flexibility in handling diverse data formats required by different services.
   */
  passThrough?: Array<PipelinesListResponsePassThrough> | undefined;
};

/**
 * This property provides cursors that are used to navigate through paginated API responses, allowing clients to move to previous or next pages of data. It is included in the response when pagination is enabled, facilitating seamless data retrieval across multiple API calls. This ensures that applications can efficiently access large datasets without overwhelming the client or server.
 */
export type PipelinesListResponseCursors = {
  /**
   * The 'previous' cursor is a string token used to retrieve the preceding set of results in a paginated API response. It is included in the response when there are more results available before the current set, allowing clients to navigate backward through the data. This cursor is particularly useful in scenarios where users need to review or analyze data from earlier pages.
   */
  previous?: string | null | undefined;
  /**
   * The 'current' cursor is a string token representing the current position in the paginated list of results. It is included in the response to indicate the current page's starting point, helping clients maintain their place in the data sequence during navigation. This is essential for tracking the current dataset being viewed or processed.
   */
  current?: string | null | undefined;
  /**
   * The 'next' cursor is a string token that facilitates navigation to the subsequent set of results in a paginated API response. It is included when additional data is available beyond the current page, enabling clients to continue retrieving more results seamlessly. This is crucial for applications that need to process large datasets incrementally.
   */
  next?: string | null | undefined;
};

/**
 * An object containing metadata about the response, providing additional context and information about the data returned. This may include details such as pagination information, request identifiers, or processing times. It is included to help consumers understand the context of the response and to assist in debugging or logging operations.
 */
export type PipelinesListResponseMeta = {
  /**
   * This property indicates the number of items that are included in the 'data' section of the response. It is particularly useful for understanding the volume of data returned in a single API call, especially when pagination is in use. This property is included in the response to help clients manage data processing and display, ensuring that applications can handle the data efficiently.
   */
  itemsOnPage?: number | undefined;
  /**
   * This property provides cursors that are used to navigate through paginated API responses, allowing clients to move to previous or next pages of data. It is included in the response when pagination is enabled, facilitating seamless data retrieval across multiple API calls. This ensures that applications can efficiently access large datasets without overwhelming the client or server.
   */
  cursors?: PipelinesListResponseCursors | undefined;
};

/**
 * This object contains hypermedia links that provide direct access to navigate between pages in a paginated API response. These links are included to enhance user experience by offering straightforward navigation options to previous or next pages, facilitating efficient data exploration and management of CRM pipelines.
 */
export type PipelinesListResponseLinks = {
  /**
   * The 'previous' link is a URL string that directs clients to the previous page of results in the API. It is included when there are earlier pages available, allowing users to easily navigate back to review or access prior data. This link is essential for applications that support backward navigation through paginated datasets.
   */
  previous?: string | null | undefined;
  /**
   * This property provides a URL link that directs to the current page of the user list in the API response. It is particularly useful for applications implementing pagination, allowing them to easily reload or refresh the current set of user data. This link is included in the response when pagination is in use, ensuring that users can maintain their current position within the dataset when navigating through multiple pages of results.
   */
  current?: string | undefined;
  /**
   * This property contains a URL link that directs to the next page of the user list in the API response. It is essential for applications that need to handle large datasets by breaking them into manageable pages. This link is included when there are additional pages of user data available beyond the current page, facilitating seamless navigation through the complete list of users without manually constructing URLs.
   */
  next?: string | null | undefined;
};

/**
 * Pipelines
 */
export type PipelinesListResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the HTTP request, such as 200 for success or 404 for not found. It is always included in the response to inform the client about the outcome of their request, helping in debugging and handling responses programmatically.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'OK' for a 200 status code. It is included to give a quick understanding of the response outcome, complementing the numeric status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the request. This string uniquely identifies the service within the Apideck ecosystem, especially useful when multiple services are integrated. It is always included to specify which service handled the request, aiding in tracking and logging.
   */
  service: string;
  /**
   * The name of the unified API resource that was accessed. This string indicates the specific resource within the Apideck platform, such as 'pipelines' in this context. It is included to clarify which resource the operation was performed on, ensuring accurate data retrieval and processing.
   */
  resource: string;
  /**
   * The specific operation that was performed on the resource. This string describes the action taken, such as 'retrieve' for fetching data. It is included to provide context about the request's purpose, helping in understanding the sequence of operations performed.
   */
  operation: string;
  /**
   * An array containing the list of pipeline objects retrieved from the CRM. Each element in this array represents a distinct pipeline, encapsulating all relevant details such as its ID, name, currency, and status. This array is always included in the response to provide a comprehensive view of all available pipelines, facilitating management and display tasks within applications.
   */
  data: Array<PipelinesListResponseData>;
  /**
   * An object containing metadata about the response, providing additional context and information about the data returned. This may include details such as pagination information, request identifiers, or processing times. It is included to help consumers understand the context of the response and to assist in debugging or logging operations.
   */
  meta?: PipelinesListResponseMeta | undefined;
  /**
   * This object contains hypermedia links that provide direct access to navigate between pages in a paginated API response. These links are included to enhance user experience by offering straightforward navigation options to previous or next pages, facilitating efficient data exploration and management of CRM pipelines.
   */
  links?: PipelinesListResponseLinks | undefined;
};

/** @internal */
export const PipelinesListResponseCurrency$inboundSchema: z.ZodNativeEnum<
  typeof PipelinesListResponseCurrency
> = z.nativeEnum(PipelinesListResponseCurrency);

/** @internal */
export const PipelinesListResponseCurrency$outboundSchema: z.ZodNativeEnum<
  typeof PipelinesListResponseCurrency
> = PipelinesListResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesListResponseCurrency$ {
  /** @deprecated use `PipelinesListResponseCurrency$inboundSchema` instead. */
  export const inboundSchema = PipelinesListResponseCurrency$inboundSchema;
  /** @deprecated use `PipelinesListResponseCurrency$outboundSchema` instead. */
  export const outboundSchema = PipelinesListResponseCurrency$outboundSchema;
}

/** @internal */
export const Stages$inboundSchema: z.ZodType<Stages, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
    win_probability: z.nullable(z.number().int()).optional(),
    display_order: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "win_probability": "winProbability",
      "display_order": "displayOrder",
    });
  });

/** @internal */
export type Stages$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  value?: string | null | undefined;
  win_probability?: number | null | undefined;
  display_order?: number | null | undefined;
};

/** @internal */
export const Stages$outboundSchema: z.ZodType<
  Stages$Outbound,
  z.ZodTypeDef,
  Stages
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  winProbability: z.nullable(z.number().int()).optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    winProbability: "win_probability",
    displayOrder: "display_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stages$ {
  /** @deprecated use `Stages$inboundSchema` instead. */
  export const inboundSchema = Stages$inboundSchema;
  /** @deprecated use `Stages$outboundSchema` instead. */
  export const outboundSchema = Stages$outboundSchema;
  /** @deprecated use `Stages$Outbound` instead. */
  export type Outbound = Stages$Outbound;
}

export function stagesToJSON(stages: Stages): string {
  return JSON.stringify(Stages$outboundSchema.parse(stages));
}

export function stagesFromJSON(
  jsonString: string,
): SafeParseResult<Stages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stages' from JSON`,
  );
}

/** @internal */
export const PipelinesListResponseExtendPaths$inboundSchema: z.ZodType<
  PipelinesListResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type PipelinesListResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const PipelinesListResponseExtendPaths$outboundSchema: z.ZodType<
  PipelinesListResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  PipelinesListResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesListResponseExtendPaths$ {
  /** @deprecated use `PipelinesListResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = PipelinesListResponseExtendPaths$inboundSchema;
  /** @deprecated use `PipelinesListResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = PipelinesListResponseExtendPaths$outboundSchema;
  /** @deprecated use `PipelinesListResponseExtendPaths$Outbound` instead. */
  export type Outbound = PipelinesListResponseExtendPaths$Outbound;
}

export function pipelinesListResponseExtendPathsToJSON(
  pipelinesListResponseExtendPaths: PipelinesListResponseExtendPaths,
): string {
  return JSON.stringify(
    PipelinesListResponseExtendPaths$outboundSchema.parse(
      pipelinesListResponseExtendPaths,
    ),
  );
}

export function pipelinesListResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesListResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesListResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesListResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const PipelinesListResponsePassThrough$inboundSchema: z.ZodType<
  PipelinesListResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => PipelinesListResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type PipelinesListResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<PipelinesListResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const PipelinesListResponsePassThrough$outboundSchema: z.ZodType<
  PipelinesListResponsePassThrough$Outbound,
  z.ZodTypeDef,
  PipelinesListResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => PipelinesListResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesListResponsePassThrough$ {
  /** @deprecated use `PipelinesListResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = PipelinesListResponsePassThrough$inboundSchema;
  /** @deprecated use `PipelinesListResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = PipelinesListResponsePassThrough$outboundSchema;
  /** @deprecated use `PipelinesListResponsePassThrough$Outbound` instead. */
  export type Outbound = PipelinesListResponsePassThrough$Outbound;
}

export function pipelinesListResponsePassThroughToJSON(
  pipelinesListResponsePassThrough: PipelinesListResponsePassThrough,
): string {
  return JSON.stringify(
    PipelinesListResponsePassThrough$outboundSchema.parse(
      pipelinesListResponsePassThrough,
    ),
  );
}

export function pipelinesListResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesListResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesListResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesListResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const PipelinesListResponseData$inboundSchema: z.ZodType<
  PipelinesListResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(PipelinesListResponseCurrency$inboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  display_order: z.nullable(z.number().int()).optional(),
  win_probability_enabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => Stages$inboundSchema)).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => PipelinesListResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_order": "displayOrder",
    "win_probability_enabled": "winProbabilityEnabled",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type PipelinesListResponseData$Outbound = {
  id?: string | undefined;
  name: string;
  currency?: string | null | undefined;
  archived?: boolean | undefined;
  active?: boolean | undefined;
  display_order?: number | null | undefined;
  win_probability_enabled?: boolean | undefined;
  stages?: Array<Stages$Outbound> | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PipelinesListResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const PipelinesListResponseData$outboundSchema: z.ZodType<
  PipelinesListResponseData$Outbound,
  z.ZodTypeDef,
  PipelinesListResponseData
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(PipelinesListResponseCurrency$outboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
  winProbabilityEnabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => Stages$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(
    z.lazy(() => PipelinesListResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    displayOrder: "display_order",
    winProbabilityEnabled: "win_probability_enabled",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesListResponseData$ {
  /** @deprecated use `PipelinesListResponseData$inboundSchema` instead. */
  export const inboundSchema = PipelinesListResponseData$inboundSchema;
  /** @deprecated use `PipelinesListResponseData$outboundSchema` instead. */
  export const outboundSchema = PipelinesListResponseData$outboundSchema;
  /** @deprecated use `PipelinesListResponseData$Outbound` instead. */
  export type Outbound = PipelinesListResponseData$Outbound;
}

export function pipelinesListResponseDataToJSON(
  pipelinesListResponseData: PipelinesListResponseData,
): string {
  return JSON.stringify(
    PipelinesListResponseData$outboundSchema.parse(pipelinesListResponseData),
  );
}

export function pipelinesListResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesListResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesListResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesListResponseData' from JSON`,
  );
}

/** @internal */
export const PipelinesListResponseCursors$inboundSchema: z.ZodType<
  PipelinesListResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type PipelinesListResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const PipelinesListResponseCursors$outboundSchema: z.ZodType<
  PipelinesListResponseCursors$Outbound,
  z.ZodTypeDef,
  PipelinesListResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesListResponseCursors$ {
  /** @deprecated use `PipelinesListResponseCursors$inboundSchema` instead. */
  export const inboundSchema = PipelinesListResponseCursors$inboundSchema;
  /** @deprecated use `PipelinesListResponseCursors$outboundSchema` instead. */
  export const outboundSchema = PipelinesListResponseCursors$outboundSchema;
  /** @deprecated use `PipelinesListResponseCursors$Outbound` instead. */
  export type Outbound = PipelinesListResponseCursors$Outbound;
}

export function pipelinesListResponseCursorsToJSON(
  pipelinesListResponseCursors: PipelinesListResponseCursors,
): string {
  return JSON.stringify(
    PipelinesListResponseCursors$outboundSchema.parse(
      pipelinesListResponseCursors,
    ),
  );
}

export function pipelinesListResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesListResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesListResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesListResponseCursors' from JSON`,
  );
}

/** @internal */
export const PipelinesListResponseMeta$inboundSchema: z.ZodType<
  PipelinesListResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => PipelinesListResponseCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type PipelinesListResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: PipelinesListResponseCursors$Outbound | undefined;
};

/** @internal */
export const PipelinesListResponseMeta$outboundSchema: z.ZodType<
  PipelinesListResponseMeta$Outbound,
  z.ZodTypeDef,
  PipelinesListResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => PipelinesListResponseCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesListResponseMeta$ {
  /** @deprecated use `PipelinesListResponseMeta$inboundSchema` instead. */
  export const inboundSchema = PipelinesListResponseMeta$inboundSchema;
  /** @deprecated use `PipelinesListResponseMeta$outboundSchema` instead. */
  export const outboundSchema = PipelinesListResponseMeta$outboundSchema;
  /** @deprecated use `PipelinesListResponseMeta$Outbound` instead. */
  export type Outbound = PipelinesListResponseMeta$Outbound;
}

export function pipelinesListResponseMetaToJSON(
  pipelinesListResponseMeta: PipelinesListResponseMeta,
): string {
  return JSON.stringify(
    PipelinesListResponseMeta$outboundSchema.parse(pipelinesListResponseMeta),
  );
}

export function pipelinesListResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesListResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesListResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesListResponseMeta' from JSON`,
  );
}

/** @internal */
export const PipelinesListResponseLinks$inboundSchema: z.ZodType<
  PipelinesListResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type PipelinesListResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const PipelinesListResponseLinks$outboundSchema: z.ZodType<
  PipelinesListResponseLinks$Outbound,
  z.ZodTypeDef,
  PipelinesListResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesListResponseLinks$ {
  /** @deprecated use `PipelinesListResponseLinks$inboundSchema` instead. */
  export const inboundSchema = PipelinesListResponseLinks$inboundSchema;
  /** @deprecated use `PipelinesListResponseLinks$outboundSchema` instead. */
  export const outboundSchema = PipelinesListResponseLinks$outboundSchema;
  /** @deprecated use `PipelinesListResponseLinks$Outbound` instead. */
  export type Outbound = PipelinesListResponseLinks$Outbound;
}

export function pipelinesListResponseLinksToJSON(
  pipelinesListResponseLinks: PipelinesListResponseLinks,
): string {
  return JSON.stringify(
    PipelinesListResponseLinks$outboundSchema.parse(pipelinesListResponseLinks),
  );
}

export function pipelinesListResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesListResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesListResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesListResponseLinks' from JSON`,
  );
}

/** @internal */
export const PipelinesListResponse$inboundSchema: z.ZodType<
  PipelinesListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => PipelinesListResponseData$inboundSchema)),
  meta: z.lazy(() => PipelinesListResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => PipelinesListResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type PipelinesListResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<PipelinesListResponseData$Outbound>;
  meta?: PipelinesListResponseMeta$Outbound | undefined;
  links?: PipelinesListResponseLinks$Outbound | undefined;
};

/** @internal */
export const PipelinesListResponse$outboundSchema: z.ZodType<
  PipelinesListResponse$Outbound,
  z.ZodTypeDef,
  PipelinesListResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => PipelinesListResponseData$outboundSchema)),
  meta: z.lazy(() => PipelinesListResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => PipelinesListResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesListResponse$ {
  /** @deprecated use `PipelinesListResponse$inboundSchema` instead. */
  export const inboundSchema = PipelinesListResponse$inboundSchema;
  /** @deprecated use `PipelinesListResponse$outboundSchema` instead. */
  export const outboundSchema = PipelinesListResponse$outboundSchema;
  /** @deprecated use `PipelinesListResponse$Outbound` instead. */
  export type Outbound = PipelinesListResponse$Outbound;
}

export function pipelinesListResponseToJSON(
  pipelinesListResponse: PipelinesListResponse,
): string {
  return JSON.stringify(
    PipelinesListResponse$outboundSchema.parse(pipelinesListResponse),
  );
}

export function pipelinesListResponseFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesListResponse' from JSON`,
  );
}
