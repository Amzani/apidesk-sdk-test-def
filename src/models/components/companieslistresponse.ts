/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the currency in which the company's financial transactions are conducted, adhering to the ISO 4217 standard. This field is important for financial consistency and reporting, especially for companies operating in multiple countries. It ensures that monetary values are accurately represented and understood across different regions.
 */
export const CompaniesListResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Specifies the currency in which the company's financial transactions are conducted, adhering to the ISO 4217 standard. This field is important for financial consistency and reporting, especially for companies operating in multiple countries. It ensures that monetary values are accurately represented and understood across different regions.
 */
export type CompaniesListResponseCurrency = ClosedEnum<
  typeof CompaniesListResponseCurrency
>;

/**
 * Specifies the category of the bank account, such as 'savings', 'checking', or 'business'. This information is important for determining the nature of transactions that can be performed and may affect transaction limits and fees. Understanding the account type helps in aligning the company's financial operations with its banking capabilities.
 */
export const CompaniesListResponseAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * Specifies the category of the bank account, such as 'savings', 'checking', or 'business'. This information is important for determining the nature of transactions that can be performed and may affect transaction limits and fees. Understanding the account type helps in aligning the company's financial operations with its banking capabilities.
 */
export type CompaniesListResponseAccountType = ClosedEnum<
  typeof CompaniesListResponseAccountType
>;

/**
 * This property specifies the currency associated with the company's bank account, using the standardized codes defined by ISO 4217. When updating a company's financial information, specifying the correct currency is crucial for ensuring that all monetary transactions are recorded and processed in the appropriate currency. This is especially important for companies dealing with international clients or operating in multiple countries, as it helps in maintaining accurate financial records and avoiding currency conversion errors. While not mandatory, providing the currency code can enhance the clarity and precision of financial data management within the CRM.
 */
export const CompaniesListResponseDataCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * This property specifies the currency associated with the company's bank account, using the standardized codes defined by ISO 4217. When updating a company's financial information, specifying the correct currency is crucial for ensuring that all monetary transactions are recorded and processed in the appropriate currency. This is especially important for companies dealing with international clients or operating in multiple countries, as it helps in maintaining accurate financial records and avoiding currency conversion errors. While not mandatory, providing the currency code can enhance the clarity and precision of financial data management within the CRM.
 */
export type CompaniesListResponseDataCurrency = ClosedEnum<
  typeof CompaniesListResponseDataCurrency
>;

export type CompaniesListResponseBankAccounts = {
  /**
   * The name of the bank where the company's account is held. This field is part of the bank account details array and is optional. It provides clarity on the financial institutions the company is associated with, which can be important for financial audits, transactions, and maintaining accurate financial records within the CRM. It should be a valid bank name recognized by financial institutions.
   */
  bankName?: string | null | undefined;
  /**
   * The unique account number assigned to the company's bank account. This field is part of the bank account details array and is optional. It is crucial for identifying specific accounts for transactions, audits, and financial reporting. Each account number should be unique to avoid confusion and ensure accurate financial management within the CRM. It must adhere to the format and length specified by the bank.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name associated with your bank account, typically the name of the account holder or business entity. This is crucial for verifying the ownership of the account during financial transactions and ensuring that payments are directed to the correct entity. It should match the name on official bank documents to avoid discrepancies.
   */
  accountName?: string | null | undefined;
  /**
   * Specifies the category of the bank account, such as 'savings', 'checking', or 'business'. This information is important for determining the nature of transactions that can be performed and may affect transaction limits and fees. Understanding the account type helps in aligning the company's financial operations with its banking capabilities.
   */
  accountType?: CompaniesListResponseAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN) is a standardized international numbering system used to identify bank accounts across borders. It is essential for facilitating international wire transfers and ensuring that funds are transferred accurately to the intended account. The IBAN must be correctly formatted according to the standards of the account's country to be valid.
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC), also known as the SWIFT code, is used to uniquely identify a bank during international transactions. It is crucial for ensuring that funds are routed to the correct financial institution. The BIC is typically 8 or 11 characters long and must be provided accurately to avoid transaction errors.
   */
  bic?: string | null | undefined;
  /**
   * A routing number is a nine-digit code used to identify a financial institution within the United States. It is necessary for domestic wire transfers and direct deposits, ensuring that transactions are processed through the correct bank. The routing number must be accurate to facilitate smooth financial operations and prevent transaction delays.
   */
  routingNumber?: string | null | undefined;
  /**
   * The BSB (Bank State Branch) number is a 6-digit numeric code essential for identifying the specific branch of an Australian or New Zealand bank or financial institution. In the context of updating a company's bank account details, providing the correct BSB ensures that transactions are routed accurately to the intended branch. This is particularly important for companies operating in these regions, as it facilitates seamless financial operations and compliance with local banking regulations. While not mandatory, including the BSB number can prevent potential transaction errors and enhance the precision of financial data management within the CRM.
   */
  bsbNumber?: string | null | undefined;
  /**
   * The branch identifier serves as a unique code for pinpointing the exact branch of a bank or financial institution where the company's account is held. This identifier is crucial when updating bank account information to ensure that all financial transactions are directed to the correct branch, thereby minimizing the risk of errors. It is particularly useful for companies with multiple accounts across different branches, as it aids in maintaining organized and accurate financial records within the CRM system. Although not required, providing this information can significantly enhance the reliability of banking operations.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * The bank code is a standardized code assigned by a central authority, such as a central bank or a banking association, to all licensed banks or financial institutions within a country. When updating a company's bank account details, the bank code is vital for identifying the specific bank where the account is held. This ensures that all financial transactions are processed correctly and efficiently. The bank code is particularly important for international transactions, as it helps in distinguishing between banks in different countries. Including this code, although optional, can greatly improve the accuracy and efficiency of financial operations within the CRM.
   */
  bankCode?: string | null | undefined;
  /**
   * This property specifies the currency associated with the company's bank account, using the standardized codes defined by ISO 4217. When updating a company's financial information, specifying the correct currency is crucial for ensuring that all monetary transactions are recorded and processed in the appropriate currency. This is especially important for companies dealing with international clients or operating in multiple countries, as it helps in maintaining accurate financial records and avoiding currency conversion errors. While not mandatory, providing the currency code can enhance the clarity and precision of financial data management within the CRM.
   */
  currency?: CompaniesListResponseDataCurrency | null | undefined;
};

/**
 * The type of website associated with the lead, such as 'personal', 'business', or 'portfolio'. This categorization helps CRM users quickly understand the nature of the website and its relevance to the lead's profile. While not required, specifying the type can enhance data organization and retrieval, aiding in targeted communication strategies.
 */
export const CompaniesListResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website associated with the lead, such as 'personal', 'business', or 'portfolio'. This categorization helps CRM users quickly understand the nature of the website and its relevance to the lead's profile. While not required, specifying the type can enhance data organization and retrieval, aiding in targeted communication strategies.
 */
export type CompaniesListResponseType = ClosedEnum<
  typeof CompaniesListResponseType
>;

export type CompaniesListResponseWebsites = {
  /**
   * A unique identifier for each website entry associated with the lead, ensuring that each website can be distinctly referenced and managed within the CRM system. This ID is crucial for operations that involve updating or removing specific websites from the lead's profile, maintaining data integrity and consistency.
   */
  id?: string | null | undefined;
  /**
   * The website URL for the lead's business or personal site. This URL serves as a digital point of contact and is essential for verifying the lead's online presence. It must be a valid URL format, starting with http:// or https://, and is crucial for CRM users to access further information about the lead's activities or offerings. This field is required to ensure that the lead's digital footprint is accurately captured and easily accessible.
   */
  url: string;
  /**
   * The type of website associated with the lead, such as 'personal', 'business', or 'portfolio'. This categorization helps CRM users quickly understand the nature of the website and its relevance to the lead's profile. While not required, specifying the type can enhance data organization and retrieval, aiding in targeted communication strategies.
   */
  type?: CompaniesListResponseType | null | undefined;
};

/**
 * Specifies the type of address, such as 'home', 'work', or 'billing'. This classification helps in organizing and retrieving addresses based on their usage context. It is important for applications that need to differentiate between various address types for operations like shipping or invoicing.
 */
export const CompaniesListResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of address, such as 'home', 'work', or 'billing'. This classification helps in organizing and retrieving addresses based on their usage context. It is important for applications that need to differentiate between various address types for operations like shipping or invoicing.
 */
export type CompaniesListResponseDataType = ClosedEnum<
  typeof CompaniesListResponseDataType
>;

export type CompaniesListResponseAddresses = {
  /**
   * A unique identifier for each address within the user's address array. This ID is crucial for distinguishing between different address records, especially when updating or deleting specific addresses. It ensures that each address can be individually referenced and managed within the CRM system, maintaining data integrity and accuracy.
   */
  id?: string | null | undefined;
  /**
   * Specifies the type of address, such as 'home', 'work', or 'billing'. This classification helps in organizing and retrieving addresses based on their usage context. It is important for applications that need to differentiate between various address types for operations like shipping or invoicing.
   */
  type?: CompaniesListResponseDataType | null | undefined;
  /**
   * The full address in a single string format, used when structured address data is not available. This field is essential for APIs that do not support detailed address components, allowing for a flexible representation of address information. It is particularly useful for quick data entry and display purposes.
   */
  string?: string | null | undefined;
  /**
   * A descriptive name for the address, often used to label or identify the address within the user's profile. This can include names like 'Headquarters', 'Main Office', or 'John's Apartment', providing a human-readable identifier that simplifies address management and selection within the CRM.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * The name of the city associated with the user's address. This field is used to specify the city where the user resides or is located. It is important for geographical identification and can be used for location-based services or analytics. Ensure the city name is spelled correctly to maintain data accuracy and integrity within the CRM system.
   */
  city?: string | null | undefined;
  /**
   * The name of the state or region associated with the user's address. This field helps in identifying the specific administrative area within a country where the user is located. It is crucial for regional segmentation and can aid in compliance with local regulations. Ensure the state name is accurate to facilitate proper data management and reporting.
   */
  state?: string | null | undefined;
  /**
   * The postal code or equivalent for the user's address. This field is essential for precise location identification and is often used in mailing and shipping processes. It can also be used for demographic analysis and service eligibility checks. Ensure the postal code is valid and corresponds to the correct city and state to avoid errors in data processing.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the user's address, following the ISO 3166-1 alpha-2 standard. This field is vital for internationalization and ensures that the user's location is correctly identified on a global scale. It supports cross-border operations and compliance with international standards. Ensure the country code is accurate to maintain consistency in global data management.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the user's address. This field provides the geographical latitude, which is used in mapping and location-based services. It is important for applications that require precise geolocation, such as delivery services or geographic analysis. Ensure the latitude is accurate to enhance the reliability of location-dependent operations.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, representing the east-west position on the Earth's surface. This value is crucial for geolocation services and mapping functionalities within the CRM, enabling precise location tracking and integration with geographic information systems. It should be a valid string representation of a decimal degree, typically ranging from -180.0 to 180.0.
   */
  longitude?: string | null | undefined;
  /**
   * This field captures the sublocality or county of the address, providing additional geographic context. It is particularly useful for regional segmentation and analysis, allowing for more granular data categorization and reporting. The county name should be accurately spelled to ensure consistency across records.
   */
  county?: string | null | undefined;
  /**
   * The full name of the primary contact person associated with the address. This information is vital for personalized communication and relationship management within the CRM. It should include both first and last names, and be kept up-to-date to reflect any changes in contact personnel.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as Mr., Ms., Dr., etc. This field enhances formal communication and is important for maintaining professional etiquette in correspondence. It should be chosen based on the contact's preference and cultural norms.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with the address, used for direct communication with the contact person. This number should be formatted according to international standards to ensure it can be dialed from any location. It is essential for timely and effective communication, especially in customer service scenarios.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the user's address. This field allows for the inclusion of traditional communication methods, which may be necessary for certain business transactions or legal documentation. While not commonly used in modern digital communications, maintaining a fax number can be crucial for businesses that still rely on this method. Ensure the number is formatted correctly to avoid transmission errors.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the user's address, serving as a primary mode of digital communication. This field is essential for sending notifications, updates, and other important information directly to the user. It should be a valid email format to ensure successful delivery and communication. Keeping this information up-to-date is vital for maintaining effective contact with the user.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the user's address, providing a digital point of reference or contact. This can be used to direct users to a personal or business website, offering more information or services. Ensure the URL is complete and correctly formatted to facilitate seamless access. This field supports the user's digital presence and connectivity.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the user's address, offering space for any extra information that might be relevant but does not fit into other predefined fields. This could include special delivery instructions, historical data, or personal preferences. These notes can be crucial for personalized service and ensuring all relevant details are captured.
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to track changes to the user's address object, ensuring data integrity and preventing update conflicts. This field is automatically incremented with each update, allowing the system to detect concurrent modifications and manage them appropriately. It is crucial for maintaining accurate and consistent data across the CRM system, especially in environments with multiple users accessing the same records.
   */
  rowVersion?: string | null | undefined;
};

export type CompaniesListResponseSocialLinks = {
  /**
   * A unique identifier for each social link entry within the array. This ID is used to distinguish between different social media profiles associated with the lead, ensuring that each link can be individually referenced and managed. It is essential for operations that involve updating or removing specific social links without affecting others.
   */
  id?: string | null | undefined;
  /**
   * The complete URL of the social media profile associated with the lead. This field is required and must be a valid URL format, such as 'https://www.twitter.com/apideck'. It provides direct access to the lead's social media presence, enabling CRM users to quickly view and interact with the lead's profiles. Accurate URLs are vital for maintaining effective communication and engagement strategies.
   */
  url: string;
  /**
   * Specifies the type of social media link associated with the lead, such as Twitter, LinkedIn, or Facebook. This field helps categorize and manage the lead's social media presence within the CRM, allowing for targeted communication strategies. It is optional but recommended for leads with active social media profiles to enhance engagement tracking.
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number, indicating its purpose or usage context, such as 'mobile', 'home', 'work', etc. This classification helps in organizing contact methods and is crucial for determining the best way to reach a user. It is optional but recommended for clarity in communication preferences.
 */
export const CompaniesListResponseDataPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number, indicating its purpose or usage context, such as 'mobile', 'home', 'work', etc. This classification helps in organizing contact methods and is crucial for determining the best way to reach a user. It is optional but recommended for clarity in communication preferences.
 */
export type CompaniesListResponseDataPhoneNumbersType = ClosedEnum<
  typeof CompaniesListResponseDataPhoneNumbersType
>;

export type CompaniesListResponsePhoneNumbers = {
  /**
   * A unique identifier for each phone number entry within the user's phone numbers array. This ID is crucial for distinguishing between different phone numbers, especially when updating or deleting specific numbers. It ensures that operations are performed on the correct phone number entry, maintaining data integrity within the user's contact information.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code associated with the phone number, such as '+1' for the United States. This field is essential for ensuring that phone numbers are formatted correctly for international dialing and can be used to validate the geographical origin of the number. It helps in standardizing phone numbers across different regions and is critical for applications that involve international communication.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code that precedes the local phone number, such as '323' for parts of Los Angeles. This code is important for routing calls within specific geographic areas and is a key component of the full phone number. Including the area code ensures that the phone number is complete and can be dialed correctly from both local and international locations.
   */
  areaCode?: string | null | undefined;
  /**
   * The main part of the phone number, excluding the country and area codes. This field is required as it represents the actual number that will be dialed within the specified area and country codes. It is the core component of the user's contact information and must be accurate to ensure successful communication. This field is mandatory to ensure that there is a valid number associated with the user.
   */
  number: string;
  /**
   * The extension of the phone number, typically used in corporate environments to direct calls to specific departments or employees. This field is optional and should be used when the phone number is part of a larger system, such as a PBX, where extensions are necessary for routing calls internally. Including an extension ensures that calls reach the intended recipient without delay.
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number, indicating its purpose or usage context, such as 'mobile', 'home', 'work', etc. This classification helps in organizing contact methods and is crucial for determining the best way to reach a user. It is optional but recommended for clarity in communication preferences.
   */
  type?: CompaniesListResponseDataPhoneNumbersType | null | undefined;
};

/**
 * Specifies the category or role of the email address associated with the user, such as 'work', 'personal', or 'other'. This helps in distinguishing between different types of email addresses for effective communication management within the CRM system. It is not mandatory, but providing this information can enhance the clarity and organization of user contact details.
 */
export const CompaniesListResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category or role of the email address associated with the user, such as 'work', 'personal', or 'other'. This helps in distinguishing between different types of email addresses for effective communication management within the CRM system. It is not mandatory, but providing this information can enhance the clarity and organization of user contact details.
 */
export type CompaniesListResponseDataEmailsType = ClosedEnum<
  typeof CompaniesListResponseDataEmailsType
>;

export type CompaniesListResponseEmails = {
  /**
   * A unique identifier for each email address within the user's email collection. This ID is used to distinguish between multiple email addresses associated with a single user, allowing for precise updates and management of contact information. It is optional but can be useful for operations that require specific email targeting.
   */
  id?: string | null | undefined;
  /**
   * The actual email address used for electronic communication with the user. This field is required and must be a valid email format to ensure successful delivery of messages. It serves as a primary contact method and is essential for user engagement and CRM operations.
   */
  email: string | null;
  /**
   * Specifies the category or role of the email address associated with the user, such as 'work', 'personal', or 'other'. This helps in distinguishing between different types of email addresses for effective communication management within the CRM system. It is not mandatory, but providing this information can enhance the clarity and organization of user contact details.
   */
  type?: CompaniesListResponseDataEmailsType | null | undefined;
};

/**
 * An object representing the type of row or entry being updated within the company record. This can include various attributes that define the nature of the data being modified. It is optional and typically used when specific structured data needs to be updated or added.
 */
export type CompaniesListResponseCompanyRowType = {
  /**
   * The unique identifier for the specific row type object within the company record. This ID is crucial when updating or referencing a particular structured data entry, ensuring precise modifications without affecting other data. It is optional unless targeting a specific row type for update.
   */
  id?: string | null | undefined;
  /**
   * The name of the row type, which specifies the category or classification of the company record being updated. This field is optional and can be used to organize or filter company records based on predefined categories within the CRM system. It helps in maintaining structured data and can be useful for reporting and analytics purposes.
   */
  name?: string | null | undefined;
};

export type CompaniesListResponseValue6 = {};

export type CompaniesListResponseValue4 = {};

/**
 * The value assigned to a custom field within the opportunity record. Custom fields allow for additional, user-defined data to be stored, providing flexibility to tailor the CRM to specific business needs. This field is optional and can be used to capture unique attributes or metrics relevant to the opportunity that are not covered by standard fields.
 */
export type CompaniesListResponseValue =
  | CompaniesListResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<CompaniesListResponseValue6>;

export type CompaniesListResponseCustomFields = {
  /**
   * Unique identifier for the custom field. This ID is essential for distinguishing each custom field within the opportunity's data structure. It ensures that each field can be individually accessed, updated, or removed as needed. The ID must be unique within the context of the opportunity to prevent data conflicts and maintain data integrity.
   */
  id: string | null;
  /**
   * Name of the custom field. This name serves as a label for the custom field, providing a human-readable identifier that describes the field's purpose or content. While not required, including a name can improve clarity and usability, especially when multiple custom fields are present. It should be concise yet descriptive enough to convey the field's role in the opportunity's data.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field. This description offers additional context or details about the custom field's intended use or significance. It can include guidelines on what type of data should be entered or how the field relates to the overall sales process. Providing a description is optional but can enhance understanding and proper utilization of the custom field by users.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to a custom field within the opportunity record. Custom fields allow for additional, user-defined data to be stored, providing flexibility to tailor the CRM to specific business needs. This field is optional and can be used to capture unique attributes or metrics relevant to the opportunity that are not covered by standard fields.
   */
  value?:
    | CompaniesListResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<CompaniesListResponseValue6>
    | null
    | undefined;
};

/**
 * An object containing custom field mappings specific to the company's CRM configuration. This allows for the integration of additional, non-standard data fields that are unique to the company's operational needs. Useful for tailoring the CRM to better fit specific business processes or data requirements.
 */
export type CustomMappings = {};

export type CompaniesListResponseExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the user record where the value should be applied. This is essential for making precise updates to nested fields, ensuring that changes are made only to the intended parts of the data structure. The path must be valid and correspond to an existing field within the user record.
   */
  path: string;
  /**
   * This property represents the specific value that you wish to assign to a designated path within the user record. It can be of any data type, such as a string, number, boolean, or object, depending on the field being updated. The flexibility of this property allows for a wide range of updates, from simple text changes to complex data structures. In the context of the `usersUpdate` operation, this property is crucial for specifying the exact data modification you intend to make, ensuring that only the targeted fields are altered without affecting other data. Proper validation should be applied to ensure the value is compatible with the field's expected data type and business rules. Common use cases include updating user contact information, preferences, or custom attributes specific to your CRM's schema.
   */
  value?: any | undefined;
};

export type CompaniesListResponsePassThrough = {
  /**
   * The unique identifier for the specific service to which this pass_through should be applied. This is crucial for directing the update operation to the correct service within the CRM system, ensuring that the modifications are executed in the appropriate context. It must be a valid service ID that corresponds to an active service integration, and it is required for the operation to proceed.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation within the CRM system to which this pass_through should be applied. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise targeting and execution of specific operations. If provided, it should match an existing operation ID to ensure correct processing.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the inclusion of any additional properties needed for direct extension of the user record. This can be used to add custom fields or metadata that are not part of the standard user schema, providing a way to tailor the user data to specific business needs. The structure of this object should align with the CRM's data model to ensure compatibility.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications via specified paths. This allows for precise updates to nested data structures within the user record, enabling complex modifications without altering unrelated data. Each object in the array should define a clear path and value to be applied, ensuring targeted updates.
   */
  extendPaths?: Array<CompaniesListResponseExtendPaths> | undefined;
};

export type Data = {
  /**
   * The unique identifier for the company within the CRM system. This ID is crucial for locating the specific company record you wish to update. While not required in the request body, it must be specified in the path parameter to ensure the correct company is targeted for updates. Typically, this ID is generated by the CRM system and remains constant throughout the company's lifecycle.
   */
  id?: string | undefined;
  /**
   * The official name of the company as recognized in the CRM. This field is mandatory for updates as it serves as a primary reference point for identifying the company within the system. Ensuring the name is accurate and up-to-date is essential for maintaining clear and consistent records, especially when multiple companies may have similar names.
   */
  name: string | null;
  /**
   * The total number of recorded interactions with the company. This metric is useful for understanding the level of engagement and activity between the company and your organization. While not required, updating this field can help in tracking the company's history and relationship status over time. It should be a non-negative integer reflecting actual interactions logged in the CRM.
   */
  interactionCount?: number | null | undefined;
  /**
   * The unique identifier of the user or entity that owns or manages the company record within the CRM. This field helps in assigning responsibility and tracking who is accountable for the company's data. It is particularly useful in organizations with multiple users managing different accounts, ensuring clarity in ownership and management responsibilities.
   */
  ownerId?: string | null | undefined;
  /**
   * The URL of the company's logo or representative image. This visual identifier can enhance the user interface by providing a quick visual reference for the company. While optional, including an image URL can improve recognition and branding within the CRM, especially useful in dashboards or reports where visual elements aid in quick identification.
   */
  image?: string | null | undefined;
  /**
   * A detailed narrative about the company, providing insights into its operations, mission, and key aspects. This field is optional but can be valuable for giving context to the company's role and significance within the CRM. It helps users understand the company's background and can be used for internal documentation or customer-facing profiles.
   */
  description?: string | null | undefined;
  /**
   * The official VAT (Value Added Tax) number assigned to the company, used for tax identification purposes. This field is crucial for companies operating in regions where VAT is applicable, ensuring compliance with tax regulations. It should be formatted according to the country's specific VAT structure and is essential for financial transactions and reporting.
   */
  vatNumber?: string | null | undefined;
  /**
   * Specifies the currency in which the company's financial transactions are conducted, adhering to the ISO 4217 standard. This field is important for financial consistency and reporting, especially for companies operating in multiple countries. It ensures that monetary values are accurately represented and understood across different regions.
   */
  currency?: CompaniesListResponseCurrency | null | undefined;
  /**
   * Represents the current operational status of the company, such as active, inactive, or pending. This field helps in categorizing and managing company records within the CRM, allowing users to filter and prioritize companies based on their engagement level or operational state. It is crucial for maintaining up-to-date records and facilitating business decisions.
   */
  status?: string | null | undefined;
  /**
   * The company's fax number, used for sending and receiving documents via fax. Although less common in modern digital communications, this field can be important for businesses that still rely on fax for certain transactions or communications. It should be formatted according to international fax standards to ensure proper transmission.
   */
  fax?: string | null | undefined;
  /**
   * The annual revenue of the company, representing the total income generated by the company over a fiscal year. This figure is crucial for assessing the company's financial health and growth potential. It is typically used by stakeholders to make informed decisions regarding investments, partnerships, and strategic planning. When updating this field, ensure the value is accurate and reflects the most recent fiscal year to maintain data integrity within the CRM.
   */
  annualRevenue?: string | null | undefined;
  /**
   * Number of employees currently employed by the company. This metric provides insight into the company's size and operational capacity. It is often used to categorize companies into small, medium, or large enterprises, which can influence business strategies and market positioning. When updating, provide the latest headcount to ensure accurate representation in the CRM.
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * The industry represents the type of business the company is in, such as technology, healthcare, or finance. This classification helps in segmenting the market and tailoring marketing strategies. It also aids in benchmarking performance against industry standards. Ensure the industry type is selected from a standardized list to maintain consistency across records.
   */
  industry?: string | null | undefined;
  /**
   * The ownership indicates the type of ownership of the company, such as private, public, or government-owned. This information is vital for understanding the company's governance structure and potential regulatory requirements. It can impact investor relations and compliance obligations. Update this field to reflect any changes in the company's ownership status accurately.
   */
  ownership?: string | null | undefined;
  /**
   * A sales tax number is a unique identifier assigned to a company for tax purposes, required for reporting and remitting sales tax to the government. This number is essential for legal compliance and is used in financial transactions to validate the company's tax status. Ensure the sales tax number is current and correctly formatted according to regional tax authority standards when updating.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * The payee number serves as a unique identifier for a payee within the tax system. In the context of updating a company's details, this number ensures that the company's tax-related transactions are accurately recorded and reported. It is particularly important for businesses that handle multiple payees or require precise tax documentation. While not mandatory, providing this number can facilitate smoother tax processing and compliance checks.
   */
  payeeNumber?: string | null | undefined;
  /**
   * The Australian Business Number (ABN) or Tax File Number (TFN) is crucial for businesses operating in Australia. The ABN is used for business identification in dealings with the Australian Taxation Office (ATO) and other government agencies, while the TFN is essential for individuals and entities to manage their tax obligations. In the context of updating company records, including the correct ABN or TFN ensures that the company's tax identity is accurately maintained, which is vital for legal and financial transactions. This field is optional but highly recommended for businesses operating in Australia.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * The ABN Branch, also known as a GST Branch, is used when a segment of a business needs to report Goods and Services Tax (GST) separately from the main entity. This is particularly useful for large companies with multiple divisions or locations that require distinct GST reporting. When updating company information, specifying the ABN Branch can help in organizing financial records and ensuring compliance with tax regulations. This field is optional and should be used if applicable to the company's structure.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) is a unique nine-digit number issued to every company registered under the Corporations Act 2001. It is used to identify the company in legal and official documents. When updating a company's details, including the ACN ensures that the company's identity is correctly reflected in the CRM system, which is essential for legal compliance and business transactions. The ACN should be formatted as three blocks of three digits, separated by spaces, to match official documentation standards. This field is optional but recommended for companies registered in Australia.
   */
  acn?: string | null | undefined;
  /**
   * The first name of the contact person associated with the company. This field is used to personalize communications and maintain accurate contact records within the CRM. While updating company details, including the first name can enhance customer relationship management by ensuring that interactions are directed to the correct individual. This field is optional but can be valuable for businesses that prioritize personalized customer service.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person associated with the company record being updated. This field is optional and can be used to update the surname of a contact person linked to the company. It is important for personalizing communications and ensuring accurate contact information within the CRM. Typically used in scenarios where the contact person for the company has changed or needs correction.
   */
  lastName?: string | null | undefined;
  /**
   * The unique identifier of the parent company, if applicable. This field is optional and is used to establish or update hierarchical relationships between companies within the CRM. It is particularly useful for organizations with complex structures, allowing for better organization and reporting by linking subsidiaries to their parent companies. This ID should match an existing company ID in the CRM to ensure proper linkage.
   */
  parentId?: string | null | undefined;
  /**
   * An array of bank account details associated with the company. This field is optional and allows for the inclusion of multiple bank accounts, each represented as an object within the array. It is useful for companies that manage multiple financial accounts, enabling comprehensive financial tracking and reporting within the CRM. Each bank account object can include details such as bank name and account number.
   */
  bankAccounts?: Array<CompaniesListResponseBankAccounts> | undefined;
  /**
   * This property represents a list of websites associated with the company. When updating a company's profile, including its websites can provide valuable context and enhance the company's digital presence within the CRM. Websites can include the company's main homepage, product pages, or any other relevant online resources. This information is useful for sales and marketing teams to access up-to-date company information and for maintaining comprehensive company profiles. Although not required, adding websites can improve the richness of the company's data and support better engagement strategies.
   */
  websites?: Array<CompaniesListResponseWebsites> | undefined;
  /**
   * An array of address objects associated with the company, allowing for the management of multiple physical locations. Each address object can include details such as street, city, and postal code. This array is useful for companies with multiple branches or offices, enabling comprehensive location tracking and updates.
   */
  addresses?: Array<CompaniesListResponseAddresses> | undefined;
  /**
   * An array of social media links associated with the company. This collection allows you to update or add multiple social media profiles, enhancing the company's digital footprint and engagement with customers. Each entry should be a valid URL pointing to the company's official social media pages. This field is optional and can be tailored to reflect the company's current social media strategy.
   */
  socialLinks?: Array<CompaniesListResponseSocialLinks> | undefined;
  /**
   * An array of phone number objects associated with the company. Each object within the array can contain details such as the phone number's unique identifier, country code, and the number itself. This structure allows for the inclusion of multiple contact numbers, facilitating comprehensive communication options for the company. This field is optional but recommended for companies with multiple contact points.
   */
  phoneNumbers?: Array<CompaniesListResponsePhoneNumbers> | undefined;
  /**
   * An array of email addresses associated with the company. This field allows for updating multiple email contacts for the company, which can include general inquiries, support, or specific department emails. Keeping email addresses current is vital for ensuring effective electronic communication and for maintaining accurate records in the CRM. Each email should be a valid format and relevant to the company's operations.
   */
  emails?: Array<CompaniesListResponseEmails> | undefined;
  /**
   * An object representing the type of row or entry being updated within the company record. This can include various attributes that define the nature of the data being modified. It is optional and typically used when specific structured data needs to be updated or added.
   */
  rowType?: CompaniesListResponseCompanyRowType | undefined;
  /**
   * An array of custom fields that allows for the extension of the standard company record with additional, user-defined data points. This flexibility is crucial for businesses that need to capture specific information not covered by default fields, enabling a more tailored CRM experience. Each entry in the array should conform to the structure defined by the custom field schema.
   */
  customFields?: Array<CompaniesListResponseCustomFields> | undefined;
  /**
   * An array of tags associated with the company. Tags are used to categorize and organize companies within the CRM, allowing for easier filtering and retrieval of records. This property is optional and can include multiple tags to reflect various attributes or classifications relevant to the company. Tags should be meaningful and consistent to enhance searchability and reporting.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Indicates whether the company record is read-only. A read-only status means that the company's details cannot be modified, which is useful for protecting critical or sensitive information from unauthorized changes. This property is optional and should be set to true only when updates to the company record are not permitted under any circumstances.
   */
  readOnly?: boolean | null | undefined;
  /**
   * The date and time of the last recorded activity related to the company. This timestamp is crucial for tracking engagement and interactions with the company, providing insights into recent communications or transactions. It should be formatted according to the ISO 8601 standard (e.g., '2023-10-15T13:45:30Z') to ensure consistency and compatibility across systems. This field is optional but highly valuable for maintaining an up-to-date activity log.
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * Indicates whether the company record is marked as deleted in the CRM system. This flag is used to soft-delete a company, allowing for potential recovery or auditing purposes without permanently removing the data. Setting this to true will hide the company from active views but retain its data for historical reference or compliance needs.
   */
  deleted?: boolean | undefined;
  /**
   * A formal salutation or title associated with a contact person at the company, such as 'Mr.', 'Mrs.', 'Dr.', etc. This field is used to personalize communications and ensure respectful address in correspondence. It should be consistent with the contact's preferred form of address and is particularly useful in formal business interactions.
   */
  salutation?: string | null | undefined;
  /**
   * The birth date of a key contact person at the company, formatted as a string (e.g., 'YYYY-MM-DD'). This information can be used for personalizing interactions, sending birthday greetings, or for demographic analysis. Ensure the date is accurate and respects privacy regulations.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * An object containing custom field mappings specific to the company's CRM configuration. This allows for the integration of additional, non-standard data fields that are unique to the company's operational needs. Useful for tailoring the CRM to better fit specific business processes or data requirements.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * The unique identifier (user ID) of the person or system that last updated the company record. This is crucial for audit trails and accountability, allowing the CRM to track changes and identify who made specific updates. It supports maintaining data integrity and transparency within the organization.
   */
  updatedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who originally created the company record. This field is useful for tracking the origin of the data entry and maintaining accountability within the CRM system. It is not required for updates but can be included to provide context about the record's history.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the company record was last modified. This field is automatically updated by the system whenever a change is made, providing a chronological record of modifications. It is formatted in ISO 8601 standard and is crucial for audit trails and synchronization purposes.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp representing when the company record was initially created in the CRM. This field is set at the time of creation and remains unchanged, serving as a historical reference point. It follows the ISO 8601 format and is important for understanding the lifecycle of the record.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or structured modifications when updating the company record. This feature is particularly useful for integrating with third-party services that require additional parameters not covered by standard fields. Each entry in the array should conform to the expected structure of the target service.
   */
  passThrough?: Array<CompaniesListResponsePassThrough> | undefined;
};

/**
 * This property provides cursors that are used to navigate through paginated API responses, allowing clients to move to previous or next pages of data. It is included in the response when pagination is enabled, facilitating seamless data retrieval across multiple API calls. This ensures that applications can efficiently access large datasets without overwhelming the client or server.
 */
export type Cursors = {
  /**
   * The 'previous' cursor is a string token used to retrieve the preceding set of results in a paginated API response. It is included in the response when there are more results available before the current set, allowing clients to navigate backward through the data. This cursor is particularly useful in scenarios where users need to review or analyze data from earlier pages.
   */
  previous?: string | null | undefined;
  /**
   * The 'current' cursor is a string token representing the current position in the paginated list of results. It is included in the response to indicate the current page's starting point, helping clients maintain their place in the data sequence during navigation. This is essential for tracking the current dataset being viewed or processed.
   */
  current?: string | null | undefined;
  /**
   * The 'next' cursor is a string token that facilitates navigation to the subsequent set of results in a paginated API response. It is included when additional data is available beyond the current page, enabling clients to continue retrieving more results seamlessly. This is crucial for applications that need to process large datasets incrementally.
   */
  next?: string | null | undefined;
};

/**
 * This object contains metadata about the API response, providing additional context and information about the data returned. It is included in the response to help consumers understand the structure and status of the data, such as pagination details and cursors for navigation. Although not required, it enhances the usability of the API by offering insights into the response characteristics.
 */
export type Meta = {
  /**
   * This property indicates the number of items that are included in the 'data' section of the response. It is particularly useful for understanding the volume of data returned in a single API call, especially when pagination is in use. This property is included in the response to help clients manage data processing and display, ensuring that applications can handle the data efficiently.
   */
  itemsOnPage?: number | undefined;
  /**
   * This property provides cursors that are used to navigate through paginated API responses, allowing clients to move to previous or next pages of data. It is included in the response when pagination is enabled, facilitating seamless data retrieval across multiple API calls. This ensures that applications can efficiently access large datasets without overwhelming the client or server.
   */
  cursors?: Cursors | undefined;
};

/**
 * The 'links' object contains URLs that facilitate navigation between different pages of results within the API. This object is included in the response to provide direct access to pagination controls, enabling clients to move forward or backward through the dataset efficiently. It is particularly useful in user interfaces that require quick navigation between pages.
 */
export type Links = {
  /**
   * The 'previous' link is a URL string that directs clients to the previous page of results in the API. It is included when there are earlier pages available, allowing users to easily navigate back to review or access prior data. This link is essential for applications that support backward navigation through paginated datasets.
   */
  previous?: string | null | undefined;
  /**
   * This property provides a URL link that directs to the current page of the user list in the API response. It is particularly useful for applications implementing pagination, allowing them to easily reload or refresh the current set of user data. This link is included in the response when pagination is in use, ensuring that users can maintain their current position within the dataset when navigating through multiple pages of results.
   */
  current?: string | undefined;
  /**
   * This property contains a URL link that directs to the next page of the user list in the API response. It is essential for applications that need to handle large datasets by breaking them into manageable pages. This link is included when there are additional pages of user data available beyond the current page, facilitating seamless navigation through the complete list of users without manually constructing URLs.
   */
  next?: string | null | undefined;
};

/**
 * Companies
 */
export type CompaniesListResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value represents the outcome of the request, such as 200 for success, 404 for not found, or 500 for server error. It is included in every response to inform the client about the success or failure of the operation.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'OK' for 200 or 'Not Found' for 404. It is included to give a clear, concise description of the response outcome.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the request. This string uniquely identifies which service within the Apideck ecosystem handled the API call, especially important when multiple services are integrated. It is always included to ensure traceability and clarity in multi-service environments.
   */
  service: string;
  /**
   * The name of the unified API resource that was accessed. This string indicates the specific resource within the Apideck Unified API that the operation was performed on, such as 'companies'. It is included to confirm the target resource of the request and is essential for understanding the context of the response.
   */
  resource: string;
  /**
   * The specific operation that was performed as part of the API request. This string describes the action taken, such as 'retrieve' or 'update', and is included to provide clarity on what was executed in response to the request. It helps in understanding the nature of the API interaction.
   */
  operation: string;
  /**
   * An array containing the list of companies retrieved from the CRM system. Each entry in this array represents a single company object with detailed information. This array is always included in the response to provide the requested company data.
   */
  data: Array<Data>;
  /**
   * This object contains metadata about the API response, providing additional context and information about the data returned. It is included in the response to help consumers understand the structure and status of the data, such as pagination details and cursors for navigation. Although not required, it enhances the usability of the API by offering insights into the response characteristics.
   */
  meta?: Meta | undefined;
  /**
   * The 'links' object contains URLs that facilitate navigation between different pages of results within the API. This object is included in the response to provide direct access to pagination controls, enabling clients to move forward or backward through the dataset efficiently. It is particularly useful in user interfaces that require quick navigation between pages.
   */
  links?: Links | undefined;
};

/** @internal */
export const CompaniesListResponseCurrency$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseCurrency
> = z.nativeEnum(CompaniesListResponseCurrency);

/** @internal */
export const CompaniesListResponseCurrency$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseCurrency
> = CompaniesListResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseCurrency$ {
  /** @deprecated use `CompaniesListResponseCurrency$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseCurrency$inboundSchema;
  /** @deprecated use `CompaniesListResponseCurrency$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseCurrency$outboundSchema;
}

/** @internal */
export const CompaniesListResponseAccountType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseAccountType
> = z.nativeEnum(CompaniesListResponseAccountType);

/** @internal */
export const CompaniesListResponseAccountType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseAccountType
> = CompaniesListResponseAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseAccountType$ {
  /** @deprecated use `CompaniesListResponseAccountType$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseAccountType$inboundSchema;
  /** @deprecated use `CompaniesListResponseAccountType$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseAccountType$outboundSchema;
}

/** @internal */
export const CompaniesListResponseDataCurrency$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseDataCurrency
> = z.nativeEnum(CompaniesListResponseDataCurrency);

/** @internal */
export const CompaniesListResponseDataCurrency$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseDataCurrency
> = CompaniesListResponseDataCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseDataCurrency$ {
  /** @deprecated use `CompaniesListResponseDataCurrency$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseDataCurrency$inboundSchema;
  /** @deprecated use `CompaniesListResponseDataCurrency$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesListResponseDataCurrency$outboundSchema;
}

/** @internal */
export const CompaniesListResponseBankAccounts$inboundSchema: z.ZodType<
  CompaniesListResponseBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(CompaniesListResponseAccountType$inboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesListResponseDataCurrency$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type CompaniesListResponseBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const CompaniesListResponseBankAccounts$outboundSchema: z.ZodType<
  CompaniesListResponseBankAccounts$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(CompaniesListResponseAccountType$outboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesListResponseDataCurrency$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseBankAccounts$ {
  /** @deprecated use `CompaniesListResponseBankAccounts$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseBankAccounts$inboundSchema;
  /** @deprecated use `CompaniesListResponseBankAccounts$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesListResponseBankAccounts$outboundSchema;
  /** @deprecated use `CompaniesListResponseBankAccounts$Outbound` instead. */
  export type Outbound = CompaniesListResponseBankAccounts$Outbound;
}

export function companiesListResponseBankAccountsToJSON(
  companiesListResponseBankAccounts: CompaniesListResponseBankAccounts,
): string {
  return JSON.stringify(
    CompaniesListResponseBankAccounts$outboundSchema.parse(
      companiesListResponseBankAccounts,
    ),
  );
}

export function companiesListResponseBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponseBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseBankAccounts' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseType
> = z.nativeEnum(CompaniesListResponseType);

/** @internal */
export const CompaniesListResponseType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseType
> = CompaniesListResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseType$ {
  /** @deprecated use `CompaniesListResponseType$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseType$inboundSchema;
  /** @deprecated use `CompaniesListResponseType$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseType$outboundSchema;
}

/** @internal */
export const CompaniesListResponseWebsites$inboundSchema: z.ZodType<
  CompaniesListResponseWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CompaniesListResponseType$inboundSchema).optional(),
});

/** @internal */
export type CompaniesListResponseWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesListResponseWebsites$outboundSchema: z.ZodType<
  CompaniesListResponseWebsites$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CompaniesListResponseType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseWebsites$ {
  /** @deprecated use `CompaniesListResponseWebsites$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseWebsites$inboundSchema;
  /** @deprecated use `CompaniesListResponseWebsites$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseWebsites$outboundSchema;
  /** @deprecated use `CompaniesListResponseWebsites$Outbound` instead. */
  export type Outbound = CompaniesListResponseWebsites$Outbound;
}

export function companiesListResponseWebsitesToJSON(
  companiesListResponseWebsites: CompaniesListResponseWebsites,
): string {
  return JSON.stringify(
    CompaniesListResponseWebsites$outboundSchema.parse(
      companiesListResponseWebsites,
    ),
  );
}

export function companiesListResponseWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponseWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseWebsites' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseDataType
> = z.nativeEnum(CompaniesListResponseDataType);

/** @internal */
export const CompaniesListResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseDataType
> = CompaniesListResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseDataType$ {
  /** @deprecated use `CompaniesListResponseDataType$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseDataType$inboundSchema;
  /** @deprecated use `CompaniesListResponseDataType$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseDataType$outboundSchema;
}

/** @internal */
export const CompaniesListResponseAddresses$inboundSchema: z.ZodType<
  CompaniesListResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesListResponseDataType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type CompaniesListResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const CompaniesListResponseAddresses$outboundSchema: z.ZodType<
  CompaniesListResponseAddresses$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesListResponseDataType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseAddresses$ {
  /** @deprecated use `CompaniesListResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseAddresses$inboundSchema;
  /** @deprecated use `CompaniesListResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseAddresses$outboundSchema;
  /** @deprecated use `CompaniesListResponseAddresses$Outbound` instead. */
  export type Outbound = CompaniesListResponseAddresses$Outbound;
}

export function companiesListResponseAddressesToJSON(
  companiesListResponseAddresses: CompaniesListResponseAddresses,
): string {
  return JSON.stringify(
    CompaniesListResponseAddresses$outboundSchema.parse(
      companiesListResponseAddresses,
    ),
  );
}

export function companiesListResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseAddresses' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseSocialLinks$inboundSchema: z.ZodType<
  CompaniesListResponseSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompaniesListResponseSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesListResponseSocialLinks$outboundSchema: z.ZodType<
  CompaniesListResponseSocialLinks$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseSocialLinks$ {
  /** @deprecated use `CompaniesListResponseSocialLinks$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseSocialLinks$inboundSchema;
  /** @deprecated use `CompaniesListResponseSocialLinks$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseSocialLinks$outboundSchema;
  /** @deprecated use `CompaniesListResponseSocialLinks$Outbound` instead. */
  export type Outbound = CompaniesListResponseSocialLinks$Outbound;
}

export function companiesListResponseSocialLinksToJSON(
  companiesListResponseSocialLinks: CompaniesListResponseSocialLinks,
): string {
  return JSON.stringify(
    CompaniesListResponseSocialLinks$outboundSchema.parse(
      companiesListResponseSocialLinks,
    ),
  );
}

export function companiesListResponseSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponseSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseSocialLinks' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseDataPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof CompaniesListResponseDataPhoneNumbersType> = z
    .nativeEnum(CompaniesListResponseDataPhoneNumbersType);

/** @internal */
export const CompaniesListResponseDataPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof CompaniesListResponseDataPhoneNumbersType> =
    CompaniesListResponseDataPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseDataPhoneNumbersType$ {
  /** @deprecated use `CompaniesListResponseDataPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesListResponseDataPhoneNumbersType$inboundSchema;
  /** @deprecated use `CompaniesListResponseDataPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesListResponseDataPhoneNumbersType$outboundSchema;
}

/** @internal */
export const CompaniesListResponsePhoneNumbers$inboundSchema: z.ZodType<
  CompaniesListResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesListResponseDataPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type CompaniesListResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesListResponsePhoneNumbers$outboundSchema: z.ZodType<
  CompaniesListResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  CompaniesListResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesListResponseDataPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponsePhoneNumbers$ {
  /** @deprecated use `CompaniesListResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `CompaniesListResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesListResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `CompaniesListResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = CompaniesListResponsePhoneNumbers$Outbound;
}

export function companiesListResponsePhoneNumbersToJSON(
  companiesListResponsePhoneNumbers: CompaniesListResponsePhoneNumbers,
): string {
  return JSON.stringify(
    CompaniesListResponsePhoneNumbers$outboundSchema.parse(
      companiesListResponsePhoneNumbers,
    ),
  );
}

export function companiesListResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesListResponseDataEmailsType
> = z.nativeEnum(CompaniesListResponseDataEmailsType);

/** @internal */
export const CompaniesListResponseDataEmailsType$outboundSchema:
  z.ZodNativeEnum<typeof CompaniesListResponseDataEmailsType> =
    CompaniesListResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseDataEmailsType$ {
  /** @deprecated use `CompaniesListResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesListResponseDataEmailsType$inboundSchema;
  /** @deprecated use `CompaniesListResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesListResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const CompaniesListResponseEmails$inboundSchema: z.ZodType<
  CompaniesListResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CompaniesListResponseDataEmailsType$inboundSchema)
    .optional(),
});

/** @internal */
export type CompaniesListResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesListResponseEmails$outboundSchema: z.ZodType<
  CompaniesListResponseEmails$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CompaniesListResponseDataEmailsType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseEmails$ {
  /** @deprecated use `CompaniesListResponseEmails$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseEmails$inboundSchema;
  /** @deprecated use `CompaniesListResponseEmails$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseEmails$outboundSchema;
  /** @deprecated use `CompaniesListResponseEmails$Outbound` instead. */
  export type Outbound = CompaniesListResponseEmails$Outbound;
}

export function companiesListResponseEmailsToJSON(
  companiesListResponseEmails: CompaniesListResponseEmails,
): string {
  return JSON.stringify(
    CompaniesListResponseEmails$outboundSchema.parse(
      companiesListResponseEmails,
    ),
  );
}

export function companiesListResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseEmails' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseCompanyRowType$inboundSchema: z.ZodType<
  CompaniesListResponseCompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompaniesListResponseCompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CompaniesListResponseCompanyRowType$outboundSchema: z.ZodType<
  CompaniesListResponseCompanyRowType$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseCompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseCompanyRowType$ {
  /** @deprecated use `CompaniesListResponseCompanyRowType$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesListResponseCompanyRowType$inboundSchema;
  /** @deprecated use `CompaniesListResponseCompanyRowType$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesListResponseCompanyRowType$outboundSchema;
  /** @deprecated use `CompaniesListResponseCompanyRowType$Outbound` instead. */
  export type Outbound = CompaniesListResponseCompanyRowType$Outbound;
}

export function companiesListResponseCompanyRowTypeToJSON(
  companiesListResponseCompanyRowType: CompaniesListResponseCompanyRowType,
): string {
  return JSON.stringify(
    CompaniesListResponseCompanyRowType$outboundSchema.parse(
      companiesListResponseCompanyRowType,
    ),
  );
}

export function companiesListResponseCompanyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseCompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesListResponseCompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseCompanyRowType' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseValue6$inboundSchema: z.ZodType<
  CompaniesListResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CompaniesListResponseValue6$Outbound = {};

/** @internal */
export const CompaniesListResponseValue6$outboundSchema: z.ZodType<
  CompaniesListResponseValue6$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseValue6$ {
  /** @deprecated use `CompaniesListResponseValue6$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseValue6$inboundSchema;
  /** @deprecated use `CompaniesListResponseValue6$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseValue6$outboundSchema;
  /** @deprecated use `CompaniesListResponseValue6$Outbound` instead. */
  export type Outbound = CompaniesListResponseValue6$Outbound;
}

export function companiesListResponseValue6ToJSON(
  companiesListResponseValue6: CompaniesListResponseValue6,
): string {
  return JSON.stringify(
    CompaniesListResponseValue6$outboundSchema.parse(
      companiesListResponseValue6,
    ),
  );
}

export function companiesListResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseValue6' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseValue4$inboundSchema: z.ZodType<
  CompaniesListResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CompaniesListResponseValue4$Outbound = {};

/** @internal */
export const CompaniesListResponseValue4$outboundSchema: z.ZodType<
  CompaniesListResponseValue4$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseValue4$ {
  /** @deprecated use `CompaniesListResponseValue4$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseValue4$inboundSchema;
  /** @deprecated use `CompaniesListResponseValue4$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseValue4$outboundSchema;
  /** @deprecated use `CompaniesListResponseValue4$Outbound` instead. */
  export type Outbound = CompaniesListResponseValue4$Outbound;
}

export function companiesListResponseValue4ToJSON(
  companiesListResponseValue4: CompaniesListResponseValue4,
): string {
  return JSON.stringify(
    CompaniesListResponseValue4$outboundSchema.parse(
      companiesListResponseValue4,
    ),
  );
}

export function companiesListResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseValue4' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseValue$inboundSchema: z.ZodType<
  CompaniesListResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CompaniesListResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CompaniesListResponseValue6$inboundSchema)),
]);

/** @internal */
export type CompaniesListResponseValue$Outbound =
  | CompaniesListResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<CompaniesListResponseValue6$Outbound>;

/** @internal */
export const CompaniesListResponseValue$outboundSchema: z.ZodType<
  CompaniesListResponseValue$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseValue
> = z.union([
  z.lazy(() => CompaniesListResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CompaniesListResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseValue$ {
  /** @deprecated use `CompaniesListResponseValue$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseValue$inboundSchema;
  /** @deprecated use `CompaniesListResponseValue$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseValue$outboundSchema;
  /** @deprecated use `CompaniesListResponseValue$Outbound` instead. */
  export type Outbound = CompaniesListResponseValue$Outbound;
}

export function companiesListResponseValueToJSON(
  companiesListResponseValue: CompaniesListResponseValue,
): string {
  return JSON.stringify(
    CompaniesListResponseValue$outboundSchema.parse(companiesListResponseValue),
  );
}

export function companiesListResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseValue' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseCustomFields$inboundSchema: z.ZodType<
  CompaniesListResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CompaniesListResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CompaniesListResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CompaniesListResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | CompaniesListResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<CompaniesListResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CompaniesListResponseCustomFields$outboundSchema: z.ZodType<
  CompaniesListResponseCustomFields$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CompaniesListResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CompaniesListResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseCustomFields$ {
  /** @deprecated use `CompaniesListResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseCustomFields$inboundSchema;
  /** @deprecated use `CompaniesListResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesListResponseCustomFields$outboundSchema;
  /** @deprecated use `CompaniesListResponseCustomFields$Outbound` instead. */
  export type Outbound = CompaniesListResponseCustomFields$Outbound;
}

export function companiesListResponseCustomFieldsToJSON(
  companiesListResponseCustomFields: CompaniesListResponseCustomFields,
): string {
  return JSON.stringify(
    CompaniesListResponseCustomFields$outboundSchema.parse(
      companiesListResponseCustomFields,
    ),
  );
}

export function companiesListResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const CustomMappings$inboundSchema: z.ZodType<
  CustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomMappings$Outbound = {};

/** @internal */
export const CustomMappings$outboundSchema: z.ZodType<
  CustomMappings$Outbound,
  z.ZodTypeDef,
  CustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomMappings$ {
  /** @deprecated use `CustomMappings$inboundSchema` instead. */
  export const inboundSchema = CustomMappings$inboundSchema;
  /** @deprecated use `CustomMappings$outboundSchema` instead. */
  export const outboundSchema = CustomMappings$outboundSchema;
  /** @deprecated use `CustomMappings$Outbound` instead. */
  export type Outbound = CustomMappings$Outbound;
}

export function customMappingsToJSON(customMappings: CustomMappings): string {
  return JSON.stringify(CustomMappings$outboundSchema.parse(customMappings));
}

export function customMappingsFromJSON(
  jsonString: string,
): SafeParseResult<CustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomMappings' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponseExtendPaths$inboundSchema: z.ZodType<
  CompaniesListResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CompaniesListResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CompaniesListResponseExtendPaths$outboundSchema: z.ZodType<
  CompaniesListResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  CompaniesListResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponseExtendPaths$ {
  /** @deprecated use `CompaniesListResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponseExtendPaths$inboundSchema;
  /** @deprecated use `CompaniesListResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponseExtendPaths$outboundSchema;
  /** @deprecated use `CompaniesListResponseExtendPaths$Outbound` instead. */
  export type Outbound = CompaniesListResponseExtendPaths$Outbound;
}

export function companiesListResponseExtendPathsToJSON(
  companiesListResponseExtendPaths: CompaniesListResponseExtendPaths,
): string {
  return JSON.stringify(
    CompaniesListResponseExtendPaths$outboundSchema.parse(
      companiesListResponseExtendPaths,
    ),
  );
}

export function companiesListResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponsePassThrough$inboundSchema: z.ZodType<
  CompaniesListResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => CompaniesListResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CompaniesListResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CompaniesListResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CompaniesListResponsePassThrough$outboundSchema: z.ZodType<
  CompaniesListResponsePassThrough$Outbound,
  z.ZodTypeDef,
  CompaniesListResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => CompaniesListResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponsePassThrough$ {
  /** @deprecated use `CompaniesListResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponsePassThrough$inboundSchema;
  /** @deprecated use `CompaniesListResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponsePassThrough$outboundSchema;
  /** @deprecated use `CompaniesListResponsePassThrough$Outbound` instead. */
  export type Outbound = CompaniesListResponsePassThrough$Outbound;
}

export function companiesListResponsePassThroughToJSON(
  companiesListResponsePassThrough: CompaniesListResponsePassThrough,
): string {
  return JSON.stringify(
    CompaniesListResponsePassThrough$outboundSchema.parse(
      companiesListResponsePassThrough,
    ),
  );
}

export function companiesListResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.nullable(z.string()),
    interaction_count: z.nullable(z.number().int()).optional(),
    owner_id: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    vat_number: z.nullable(z.string()).optional(),
    currency: z.nullable(CompaniesListResponseCurrency$inboundSchema)
      .optional(),
    status: z.nullable(z.string()).optional(),
    fax: z.nullable(z.string()).optional(),
    annual_revenue: z.nullable(z.string()).optional(),
    number_of_employees: z.nullable(z.string()).optional(),
    industry: z.nullable(z.string()).optional(),
    ownership: z.nullable(z.string()).optional(),
    sales_tax_number: z.nullable(z.string()).optional(),
    payee_number: z.nullable(z.string()).optional(),
    abn_or_tfn: z.nullable(z.string()).optional(),
    abn_branch: z.nullable(z.string()).optional(),
    acn: z.nullable(z.string()).optional(),
    first_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    parent_id: z.nullable(z.string()).optional(),
    bank_accounts: z.array(
      z.lazy(() => CompaniesListResponseBankAccounts$inboundSchema),
    ).optional(),
    websites: z.array(z.lazy(() => CompaniesListResponseWebsites$inboundSchema))
      .optional(),
    addresses: z.array(
      z.lazy(() => CompaniesListResponseAddresses$inboundSchema),
    ).optional(),
    social_links: z.array(
      z.lazy(() => CompaniesListResponseSocialLinks$inboundSchema),
    ).optional(),
    phone_numbers: z.array(
      z.lazy(() => CompaniesListResponsePhoneNumbers$inboundSchema),
    ).optional(),
    emails: z.array(z.lazy(() => CompaniesListResponseEmails$inboundSchema))
      .optional(),
    row_type: z.lazy(() => CompaniesListResponseCompanyRowType$inboundSchema)
      .optional(),
    custom_fields: z.array(
      z.lazy(() => CompaniesListResponseCustomFields$inboundSchema),
    ).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    read_only: z.nullable(z.boolean()).optional(),
    last_activity_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    deleted: z.boolean().optional(),
    salutation: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    custom_mappings: z.nullable(z.lazy(() => CustomMappings$inboundSchema))
      .optional(),
    updated_by: z.nullable(z.string()).optional(),
    created_by: z.nullable(z.string()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    pass_through: z.array(
      z.lazy(() => CompaniesListResponsePassThrough$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "interaction_count": "interactionCount",
      "owner_id": "ownerId",
      "vat_number": "vatNumber",
      "annual_revenue": "annualRevenue",
      "number_of_employees": "numberOfEmployees",
      "sales_tax_number": "salesTaxNumber",
      "payee_number": "payeeNumber",
      "abn_or_tfn": "abnOrTfn",
      "abn_branch": "abnBranch",
      "first_name": "firstName",
      "last_name": "lastName",
      "parent_id": "parentId",
      "bank_accounts": "bankAccounts",
      "social_links": "socialLinks",
      "phone_numbers": "phoneNumbers",
      "row_type": "rowType",
      "custom_fields": "customFields",
      "read_only": "readOnly",
      "last_activity_at": "lastActivityAt",
      "custom_mappings": "customMappings",
      "updated_by": "updatedBy",
      "created_by": "createdBy",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type Data$Outbound = {
  id?: string | undefined;
  name: string | null;
  interaction_count?: number | null | undefined;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  parent_id?: string | null | undefined;
  bank_accounts?: Array<CompaniesListResponseBankAccounts$Outbound> | undefined;
  websites?: Array<CompaniesListResponseWebsites$Outbound> | undefined;
  addresses?: Array<CompaniesListResponseAddresses$Outbound> | undefined;
  social_links?: Array<CompaniesListResponseSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<CompaniesListResponsePhoneNumbers$Outbound> | undefined;
  emails?: Array<CompaniesListResponseEmails$Outbound> | undefined;
  row_type?: CompaniesListResponseCompanyRowType$Outbound | undefined;
  custom_fields?: Array<CompaniesListResponseCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<CompaniesListResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string().optional(),
    name: z.nullable(z.string()),
    interactionCount: z.nullable(z.number().int()).optional(),
    ownerId: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    vatNumber: z.nullable(z.string()).optional(),
    currency: z.nullable(CompaniesListResponseCurrency$outboundSchema)
      .optional(),
    status: z.nullable(z.string()).optional(),
    fax: z.nullable(z.string()).optional(),
    annualRevenue: z.nullable(z.string()).optional(),
    numberOfEmployees: z.nullable(z.string()).optional(),
    industry: z.nullable(z.string()).optional(),
    ownership: z.nullable(z.string()).optional(),
    salesTaxNumber: z.nullable(z.string()).optional(),
    payeeNumber: z.nullable(z.string()).optional(),
    abnOrTfn: z.nullable(z.string()).optional(),
    abnBranch: z.nullable(z.string()).optional(),
    acn: z.nullable(z.string()).optional(),
    firstName: z.nullable(z.string()).optional(),
    lastName: z.nullable(z.string()).optional(),
    parentId: z.nullable(z.string()).optional(),
    bankAccounts: z.array(
      z.lazy(() => CompaniesListResponseBankAccounts$outboundSchema),
    ).optional(),
    websites: z.array(
      z.lazy(() => CompaniesListResponseWebsites$outboundSchema),
    ).optional(),
    addresses: z.array(
      z.lazy(() => CompaniesListResponseAddresses$outboundSchema),
    ).optional(),
    socialLinks: z.array(
      z.lazy(() => CompaniesListResponseSocialLinks$outboundSchema),
    ).optional(),
    phoneNumbers: z.array(
      z.lazy(() => CompaniesListResponsePhoneNumbers$outboundSchema),
    ).optional(),
    emails: z.array(z.lazy(() => CompaniesListResponseEmails$outboundSchema))
      .optional(),
    rowType: z.lazy(() => CompaniesListResponseCompanyRowType$outboundSchema)
      .optional(),
    customFields: z.array(
      z.lazy(() => CompaniesListResponseCustomFields$outboundSchema),
    ).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    readOnly: z.nullable(z.boolean()).optional(),
    lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
      .optional(),
    deleted: z.boolean().optional(),
    salutation: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    customMappings: z.nullable(z.lazy(() => CustomMappings$outboundSchema))
      .optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    passThrough: z.array(
      z.lazy(() => CompaniesListResponsePassThrough$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      interactionCount: "interaction_count",
      ownerId: "owner_id",
      vatNumber: "vat_number",
      annualRevenue: "annual_revenue",
      numberOfEmployees: "number_of_employees",
      salesTaxNumber: "sales_tax_number",
      payeeNumber: "payee_number",
      abnOrTfn: "abn_or_tfn",
      abnBranch: "abn_branch",
      firstName: "first_name",
      lastName: "last_name",
      parentId: "parent_id",
      bankAccounts: "bank_accounts",
      socialLinks: "social_links",
      phoneNumbers: "phone_numbers",
      rowType: "row_type",
      customFields: "custom_fields",
      readOnly: "read_only",
      lastActivityAt: "last_activity_at",
      customMappings: "custom_mappings",
      updatedBy: "updated_by",
      createdBy: "created_by",
      updatedAt: "updated_at",
      createdAt: "created_at",
      passThrough: "pass_through",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const Cursors$inboundSchema: z.ZodType<Cursors, z.ZodTypeDef, unknown> =
  z.object({
    previous: z.nullable(z.string()).optional(),
    current: z.nullable(z.string()).optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Cursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Cursors$outboundSchema: z.ZodType<
  Cursors$Outbound,
  z.ZodTypeDef,
  Cursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cursors$ {
  /** @deprecated use `Cursors$inboundSchema` instead. */
  export const inboundSchema = Cursors$inboundSchema;
  /** @deprecated use `Cursors$outboundSchema` instead. */
  export const outboundSchema = Cursors$outboundSchema;
  /** @deprecated use `Cursors$Outbound` instead. */
  export type Outbound = Cursors$Outbound;
}

export function cursorsToJSON(cursors: Cursors): string {
  return JSON.stringify(Cursors$outboundSchema.parse(cursors));
}

export function cursorsFromJSON(
  jsonString: string,
): SafeParseResult<Cursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cursors' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    items_on_page: z.number().int().optional(),
    cursors: z.lazy(() => Cursors$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "items_on_page": "itemsOnPage",
    });
  });

/** @internal */
export type Meta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: Cursors$Outbound | undefined;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    itemsOnPage: z.number().int().optional(),
    cursors: z.lazy(() => Cursors$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      itemsOnPage: "items_on_page",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({
    previous: z.nullable(z.string()).optional(),
    current: z.string().optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Links$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

export function linksToJSON(links: Links): string {
  return JSON.stringify(Links$outboundSchema.parse(links));
}

export function linksFromJSON(
  jsonString: string,
): SafeParseResult<Links, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Links$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Links' from JSON`,
  );
}

/** @internal */
export const CompaniesListResponse$inboundSchema: z.ZodType<
  CompaniesListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => Data$inboundSchema)),
  meta: z.lazy(() => Meta$inboundSchema).optional(),
  links: z.lazy(() => Links$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CompaniesListResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<Data$Outbound>;
  meta?: Meta$Outbound | undefined;
  links?: Links$Outbound | undefined;
};

/** @internal */
export const CompaniesListResponse$outboundSchema: z.ZodType<
  CompaniesListResponse$Outbound,
  z.ZodTypeDef,
  CompaniesListResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => Data$outboundSchema)),
  meta: z.lazy(() => Meta$outboundSchema).optional(),
  links: z.lazy(() => Links$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesListResponse$ {
  /** @deprecated use `CompaniesListResponse$inboundSchema` instead. */
  export const inboundSchema = CompaniesListResponse$inboundSchema;
  /** @deprecated use `CompaniesListResponse$outboundSchema` instead. */
  export const outboundSchema = CompaniesListResponse$outboundSchema;
  /** @deprecated use `CompaniesListResponse$Outbound` instead. */
  export type Outbound = CompaniesListResponse$Outbound;
}

export function companiesListResponseToJSON(
  companiesListResponse: CompaniesListResponse,
): string {
  return JSON.stringify(
    CompaniesListResponse$outboundSchema.parse(companiesListResponse),
  );
}

export function companiesListResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesListResponse' from JSON`,
  );
}
