/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsFilter = {
  /**
   * Filter companies by their name. This parameter allows you to narrow down the list of companies to those whose names match the specified string. Useful for searching specific companies within the CRM.
   */
  name?: string | undefined;
  /**
   * Filter contacts by their first name. This parameter allows you to narrow down the contact list to those whose first name matches the specified value. Useful for searching specific individuals or groups with the same first name.
   */
  firstName?: string | undefined;
  /**
   * Filter contacts by their last name. This parameter helps in retrieving contacts whose last name matches the given value, facilitating targeted searches within the contact database.
   */
  lastName?: string | undefined;
  /**
   * Filter contacts by their email address. Use this parameter to find contacts with a specific email, which is particularly useful for identifying unique contacts or verifying email-based records.
   */
  email?: string | undefined;
  /**
   * Filter contacts by their phone number. This parameter is ideal for locating contacts with a specific phone number, aiding in direct communication or verification processes.
   */
  phoneNumber?: string | undefined;
  /**
   * The 'filter.company_id' property is used to filter activities by a specific company ID. This allows you to narrow down the results to activities associated with a particular company.
   */
  companyId?: string | undefined;
  /**
   * The 'filter.owner_id' property is used to filter activities by a specific owner ID, enabling you to view activities managed by a particular owner.
   */
  ownerId?: string | undefined;
};

/** @internal */
export const ContactsFilter$inboundSchema: z.ZodType<
  ContactsFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone_number: z.string().optional(),
  company_id: z.string().optional(),
  owner_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "phone_number": "phoneNumber",
    "company_id": "companyId",
    "owner_id": "ownerId",
  });
});

/** @internal */
export type ContactsFilter$Outbound = {
  name?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone_number?: string | undefined;
  company_id?: string | undefined;
  owner_id?: string | undefined;
};

/** @internal */
export const ContactsFilter$outboundSchema: z.ZodType<
  ContactsFilter$Outbound,
  z.ZodTypeDef,
  ContactsFilter
> = z.object({
  name: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phoneNumber: z.string().optional(),
  companyId: z.string().optional(),
  ownerId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    phoneNumber: "phone_number",
    companyId: "company_id",
    ownerId: "owner_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsFilter$ {
  /** @deprecated use `ContactsFilter$inboundSchema` instead. */
  export const inboundSchema = ContactsFilter$inboundSchema;
  /** @deprecated use `ContactsFilter$outboundSchema` instead. */
  export const outboundSchema = ContactsFilter$outboundSchema;
  /** @deprecated use `ContactsFilter$Outbound` instead. */
  export type Outbound = ContactsFilter$Outbound;
}

export function contactsFilterToJSON(contactsFilter: ContactsFilter): string {
  return JSON.stringify(ContactsFilter$outboundSchema.parse(contactsFilter));
}

export function contactsFilterFromJSON(
  jsonString: string,
): SafeParseResult<ContactsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsFilter' from JSON`,
  );
}
