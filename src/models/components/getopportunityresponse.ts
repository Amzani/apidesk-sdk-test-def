/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Opportunity,
  Opportunity$inboundSchema,
  Opportunity$Outbound,
  Opportunity$outboundSchema,
} from "./opportunity.js";

/**
 * Opportunity
 */
export type GetOpportunityResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the GET request, such as 200 for success or 404 if the opportunity is not found. It helps developers understand the outcome of their API call.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable status message, such as 'OK' for a successful request or 'Not Found' if the opportunity does not exist. It complements the status_code by offering a more descriptive explanation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider handling the request. This string identifies which service integration processed the opportunity data, useful in environments with multiple service integrations. It ensures developers can trace the source of the data.
   */
  service: string;
  /**
   * The name of the Unified API resource accessed by this operation. This string specifies the type of resource, such as 'opportunity', that the GET request is targeting. It helps developers understand the context of the data being retrieved.
   */
  resource: string;
  /**
   * The specific operation performed by the API request. This string indicates the action taken, such as 'retrieve', reflecting the nature of the GET request to fetch opportunity details. It provides clarity on the API's function within the CRM system.
   */
  operation: string;
  /**
   * This object contains all the detailed information about the specific opportunity retrieved from the CRM system. It serves as the main container for the opportunity's data, including identifiers, titles, and associated contacts. This structure allows developers to access and integrate opportunity details efficiently into their applications.
   */
  data: Opportunity;
};

/** @internal */
export const GetOpportunityResponse$inboundSchema: z.ZodType<
  GetOpportunityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: Opportunity$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetOpportunityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Opportunity$Outbound;
};

/** @internal */
export const GetOpportunityResponse$outboundSchema: z.ZodType<
  GetOpportunityResponse$Outbound,
  z.ZodTypeDef,
  GetOpportunityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: Opportunity$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponse$ {
  /** @deprecated use `GetOpportunityResponse$inboundSchema` instead. */
  export const inboundSchema = GetOpportunityResponse$inboundSchema;
  /** @deprecated use `GetOpportunityResponse$outboundSchema` instead. */
  export const outboundSchema = GetOpportunityResponse$outboundSchema;
  /** @deprecated use `GetOpportunityResponse$Outbound` instead. */
  export type Outbound = GetOpportunityResponse$Outbound;
}

export function getOpportunityResponseToJSON(
  getOpportunityResponse: GetOpportunityResponse,
): string {
  return JSON.stringify(
    GetOpportunityResponse$outboundSchema.parse(getOpportunityResponse),
  );
}

export function getOpportunityResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOpportunityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpportunityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpportunityResponse' from JSON`,
  );
}
