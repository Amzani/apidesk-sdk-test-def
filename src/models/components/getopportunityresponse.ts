/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Denotes the currency in which the monetary amount is expressed, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This string value ensures that the financial data is accurately interpreted across different regions and systems, facilitating international business operations.
 */
export const GetOpportunityResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Denotes the currency in which the monetary amount is expressed, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This string value ensures that the financial data is accurately interpreted across different regions and systems, facilitating international business operations.
 */
export type GetOpportunityResponseCurrency = ClosedEnum<
  typeof GetOpportunityResponseCurrency
>;

export type GetOpportunityResponseValue6 = {};

export type GetOpportunityResponseValue4 = {};

/**
 * The specific value assigned to the custom field for this opportunity. This value can vary in type and content, depending on the custom field's purpose and configuration within the CRM system.
 */
export type GetOpportunityResponseValue =
  | GetOpportunityResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<GetOpportunityResponseValue6>;

export type GetOpportunityResponseCustomFields = {
  /**
   * A unique identifier for each custom field within the opportunity. This ID is essential for distinguishing between different custom fields and is used to reference specific fields programmatically.
   */
  id: string | null;
  /**
   * The name assigned to each custom field, which describes the type of data it holds. This name is used to identify the custom field in the user interface and reports, aiding in data organization and retrieval.
   */
  name?: string | null | undefined;
  /**
   * A detailed explanation or additional information about the custom field associated with the opportunity. This string can provide context or clarification for custom data points that are specific to the opportunity, enhancing understanding of its unique attributes.
   */
  description?: string | null | undefined;
  /**
   * The specific value assigned to the custom field for this opportunity. This value can vary in type and content, depending on the custom field's purpose and configuration within the CRM system.
   */
  value?:
    | GetOpportunityResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<GetOpportunityResponseValue6>
    | null
    | undefined;
};

/**
 * An object containing any custom mappings configured for this opportunity. This allows for extended data representation and integration with other systems, providing flexibility in how opportunity data is utilized.
 */
export type GetOpportunityResponseCustomMappings = {};

export type GetOpportunityResponseExtendPaths = {
  /**
   * This property specifies the JSONPath string where the value should be applied within the CRM data structure. It is a required field for each object in the extend_paths array, ensuring that the data modification is accurately targeted. The path must be a valid JSONPath expression.
   */
  path: string;
  /**
   * This property represents the value to be set at the specified JSONPath within the CRM data structure. It is a required field and can be of any data type, allowing for flexible data updates. The value is applied to the path defined in the corresponding 'path' property.
   */
  value?: any | undefined;
};

export type GetOpportunityResponsePassThrough = {
  /**
   * A mandatory string identifier for the service to which the pass_through data applies. This ensures that the custom data is correctly routed and applied to the appropriate service integration.
   */
  serviceId: string;
  /**
   * This property contains an optional identifier for a specific workflow operation within the CRM system. It is used to associate the pass-through data with a particular operation, especially useful when a Unify call involves multiple downstream requests. The value is expected to be a string that uniquely identifies the operation.
   */
  operationId?: string | undefined;
  /**
   * This property is a flexible object designed to allow direct extension with any additional properties needed for the operation. It serves as a container for custom data that can be passed through the API without predefined structure, enabling developers to include extra information as required.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property is an array of objects, each representing a structured data modification via specified paths. It allows developers to define multiple JSONPath strings and corresponding values for precise data manipulation within the CRM system. The array format supports complex data extension scenarios.
   */
  extendPaths?: Array<GetOpportunityResponseExtendPaths> | undefined;
};

/**
 * The 'data' object contains all the detailed information about the specific opportunity retrieved from the CRM. It serves as the primary container for the opportunity's attributes, ensuring that all relevant details are encapsulated within a single structure. This object is essential for accessing the individual fields of the opportunity, such as its ID, title, and associated contacts.
 */
export type GetOpportunityResponseData = {
  /**
   * A unique identifier for the opportunity within the CRM system. This string value is used to distinguish this particular opportunity from others, allowing for precise retrieval and management of the opportunity's data. It is crucial for operations that require referencing or updating the specific opportunity record.
   */
  id?: string | undefined;
  /**
   * The title or name of the opportunity, representing its primary label within the CRM. This string is used to identify the opportunity in lists and reports, providing a quick reference to its purpose or nature. It is a mandatory field, ensuring that every opportunity has a clear and descriptive name.
   */
  title: string;
  /**
   * The unique identifier of the primary contact associated with the opportunity. This string links the opportunity to a specific contact within the CRM, facilitating communication and relationship management. It is a required field, ensuring that each opportunity is connected to a key contact person.
   */
  primaryContactId: string | null;
  /**
   * A textual description of the opportunity, providing additional context and details about its nature and objectives. This optional string field allows users to include notes or explanations that enhance understanding of the opportunity's scope and significance. It supports better decision-making and strategic planning by offering insights beyond basic identifiers.
   */
  description?: string | null | undefined;
  /**
   * Specifies the category or classification of the opportunity within the CRM system. This string value helps in organizing and filtering opportunities based on their type, such as 'New Business', 'Renewal', or 'Upsell'. Understanding the type is crucial for analyzing sales strategies and outcomes.
   */
  type?: string | null | undefined;
  /**
   * Represents the total financial value associated with this opportunity, expressed as a numerical amount. This figure is crucial for financial forecasting and assessing the potential impact on revenue. It is typically used in conjunction with the currency field to provide a complete financial overview.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Denotes the currency in which the monetary amount is expressed, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This string value ensures that the financial data is accurately interpreted across different regions and systems, facilitating international business operations.
   */
  currency?: GetOpportunityResponseCurrency | null | undefined;
  /**
   * Indicates the likelihood of successfully closing the opportunity, represented as a percentage (0-100). This numerical value is used by sales teams to prioritize efforts and resources, helping to focus on opportunities with higher chances of success.
   */
  winProbability?: number | null | undefined;
  /**
   * Calculates the potential revenue expected from this opportunity, factoring in the win probability. This number is essential for revenue projections and strategic planning, allowing businesses to estimate future income based on current opportunities.
   */
  expectedRevenue?: number | null | undefined;
  /**
   * The date when the opportunity was officially closed, formatted as a string in ISO 8601 date format (YYYY-MM-DD). If this field is null, it indicates that the opportunity is still open and has not been closed yet. This information helps track the lifecycle of sales opportunities within the CRM.
   */
  closeDate?: RFCDate | null | undefined;
  /**
   * A unique string identifier representing the specific reason why the opportunity was lost. This ID corresponds to predefined loss reasons within the CRM system, allowing for consistent categorization and analysis of lost opportunities.
   */
  lossReasonId?: string | null | undefined;
  /**
   * A descriptive string explaining why the opportunity was lost. This text provides context and insight into the factors that led to the loss, aiding in future strategy adjustments and decision-making processes.
   */
  lossReason?: string | null | undefined;
  /**
   * A unique string identifier representing the specific reason why the opportunity was won. This ID is linked to predefined win reasons in the CRM, facilitating structured analysis of successful sales strategies.
   */
  wonReasonId?: string | null | undefined;
  /**
   * A descriptive string detailing the reason why the opportunity was won. This information provides valuable insights into successful sales tactics and customer interactions, supporting ongoing sales strategy development.
   */
  wonReason?: string | null | undefined;
  /**
   * The unique identifier for the pipeline that this opportunity is part of. This ID is a string and helps in categorizing the opportunity within a specific sales process. It is useful for tracking the opportunity's progress through different stages of the sales pipeline.
   */
  pipelineId?: string | null | undefined;
  /**
   * The unique identifier for the current stage of the opportunity within its pipeline. This string value indicates the specific phase the opportunity is in, such as 'Negotiation' or 'Proposal', and is crucial for understanding its current status in the sales cycle.
   */
  pipelineStageId?: string | null | undefined;
  /**
   * The unique identifier for the source from which the opportunity originated. This string helps in identifying and analyzing the origin of the opportunity, such as a marketing campaign or referral, aiding in source tracking and performance evaluation.
   */
  sourceId?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with this opportunity. This string value links the opportunity to its originating lead, providing context on its initial point of contact and facilitating lead tracking and management.
   */
  leadId?: string | null | undefined;
  /**
   * The descriptive name of the source from which the lead associated with this opportunity was generated. This string provides insight into the lead's origin, such as 'Webinar' or 'Trade Show', and is important for understanding lead acquisition channels.
   */
  leadSource?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with the opportunity. This ID is used to link the opportunity to a specific contact within the CRM system. It is returned as a string and may be null if no contact is associated.
   */
  contactId?: string | null | undefined;
  /**
   * An array containing the unique identifiers of all contacts linked to the opportunity. Each ID in the array is a string, allowing for multiple contacts to be associated with a single opportunity. This is useful for opportunities involving multiple stakeholders.
   */
  contactIds?: Array<string> | undefined;
  /**
   * The unique identifier of the company associated with the opportunity. This ID is a string that links the opportunity to a specific company record in the CRM, facilitating company-specific opportunity tracking.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company associated with the opportunity. This is a string value that provides a human-readable reference to the company, aiding in the identification and analysis of the opportunity within the CRM.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier of the user who owns the opportunity. This ID is crucial for tracking responsibility and accountability within the CRM system. It is typically a UUID string that links the opportunity to a specific user profile.
   */
  ownerId?: string | null | undefined;
  /**
   * The priority level of the opportunity, indicating its importance or urgency within the sales pipeline. This is usually represented as a string such as 'High', 'Medium', or 'Low', helping sales teams prioritize their efforts.
   */
  priority?: string | null | undefined;
  /**
   * The current status of the opportunity, reflecting its stage in the sales process. Common statuses might include 'Open', 'Closed', or 'In Progress', and this string value helps users quickly assess the opportunity's progress.
   */
  status?: string | null | undefined;
  /**
   * The unique identifier of the current status of the opportunity. This ID is used internally to map the status to its corresponding description and is typically a UUID string.
   */
  statusId?: string | null | undefined;
  /**
   * An array of tags associated with the opportunity, providing additional context or categorization. Tags are typically strings that can be used for filtering and organizing opportunities within the CRM.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The total number of interactions recorded with this opportunity. This number provides insight into the level of engagement and activity related to the opportunity, helping to assess its progress and potential.
   */
  interactionCount?: number | null | undefined;
  /**
   * A collection of custom fields associated with the opportunity, allowing for additional, user-defined data to be stored. Each entry in the array represents a unique custom field, providing flexibility in data management.
   */
  customFields?: Array<GetOpportunityResponseCustomFields> | undefined;
  /**
   * The timestamp indicating when the opportunity's stage was last updated. This string is formatted in ISO 8601 and helps track the progression of the opportunity through different sales stages.
   */
  stageLastChangedAt?: Date | null | undefined;
  /**
   * The timestamp of the most recent activity related to the opportunity, formatted in ISO 8601. This provides insight into the latest interactions or updates, aiding in activity tracking and management.
   */
  lastActivityAt?: string | null | undefined;
  /**
   * A boolean flag indicating whether the opportunity has been marked as deleted. If true, the opportunity is considered removed from active records, though it may still exist in the system for archival purposes.
   */
  deleted?: boolean | undefined;
  /**
   * The date and time when the opportunity's stage was last updated. This timestamp is formatted as an ISO 8601 string, allowing developers to track changes in the sales process. It provides insights into the progression of the opportunity within the CRM.
   */
  dateStageChanged?: Date | null | undefined;
  /**
   * The date and time of the most recent contact with the opportunity, formatted as an ISO 8601 string. This information helps users understand the recency of interactions, aiding in follow-up strategies and engagement tracking.
   */
  dateLastContacted?: Date | null | undefined;
  /**
   * The creation date and time of the lead associated with this opportunity, presented as an ISO 8601 string. This property helps in understanding the lifecycle of the opportunity from lead generation to current status.
   */
  dateLeadCreated?: Date | null | undefined;
  /**
   * An object containing any custom mappings configured for this opportunity. This allows for extended data representation and integration with other systems, providing flexibility in how opportunity data is utilized.
   */
  customMappings?: GetOpportunityResponseCustomMappings | null | undefined;
  /**
   * The unique identifier of the user who last made updates to the opportunity. This string helps in auditing changes and understanding who is responsible for the latest modifications within the CRM system.
   */
  updatedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who originally created the opportunity record in the CRM system. This is typically a user ID string that helps track the origin of the opportunity. Useful for auditing and understanding the history of the record.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the opportunity record was last modified. This is formatted as an ISO 8601 string, providing precise date and time details. It helps users track the most recent changes to the opportunity.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp representing when the opportunity was initially created in the CRM. This is provided in ISO 8601 format, allowing users to understand the age and lifecycle of the opportunity.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array containing service-specific custom data or modifications that are passed through during the creation or update of resources. This allows for flexibility and customization in handling opportunity data across different services.
   */
  passThrough?: Array<GetOpportunityResponsePassThrough> | undefined;
};

/**
 * Opportunity
 */
export type GetOpportunityResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. A status code of 200 signifies a successful retrieval of the opportunity data. This integer value helps developers understand the outcome of their request at a glance.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request. This string provides a human-readable status that complements the numeric status code, aiding in quick interpretation of the response.
   */
  status: string;
  /**
   * The unique Apideck identifier for the service provider from which the opportunity data is retrieved. This string helps in identifying the source of the data, especially useful in environments with multiple service integrations.
   */
  service: string;
  /**
   * The name of the unified API resource, which in this context is 'opportunity'. This string indicates the type of resource being accessed, ensuring developers know which data structure to expect in the response.
   */
  resource: string;
  /**
   * The specific operation performed, in this case, 'opportunitiesOne', which denotes fetching a single opportunity record. This string helps developers track the action executed by the API call, useful for logging and debugging purposes.
   */
  operation: string;
  /**
   * The 'data' object contains all the detailed information about the specific opportunity retrieved from the CRM. It serves as the primary container for the opportunity's attributes, ensuring that all relevant details are encapsulated within a single structure. This object is essential for accessing the individual fields of the opportunity, such as its ID, title, and associated contacts.
   */
  data: GetOpportunityResponseData;
};

/** @internal */
export const GetOpportunityResponseCurrency$inboundSchema: z.ZodNativeEnum<
  typeof GetOpportunityResponseCurrency
> = z.nativeEnum(GetOpportunityResponseCurrency);

/** @internal */
export const GetOpportunityResponseCurrency$outboundSchema: z.ZodNativeEnum<
  typeof GetOpportunityResponseCurrency
> = GetOpportunityResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponseCurrency$ {
  /** @deprecated use `GetOpportunityResponseCurrency$inboundSchema` instead. */
  export const inboundSchema = GetOpportunityResponseCurrency$inboundSchema;
  /** @deprecated use `GetOpportunityResponseCurrency$outboundSchema` instead. */
  export const outboundSchema = GetOpportunityResponseCurrency$outboundSchema;
}

/** @internal */
export const GetOpportunityResponseValue6$inboundSchema: z.ZodType<
  GetOpportunityResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetOpportunityResponseValue6$Outbound = {};

/** @internal */
export const GetOpportunityResponseValue6$outboundSchema: z.ZodType<
  GetOpportunityResponseValue6$Outbound,
  z.ZodTypeDef,
  GetOpportunityResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponseValue6$ {
  /** @deprecated use `GetOpportunityResponseValue6$inboundSchema` instead. */
  export const inboundSchema = GetOpportunityResponseValue6$inboundSchema;
  /** @deprecated use `GetOpportunityResponseValue6$outboundSchema` instead. */
  export const outboundSchema = GetOpportunityResponseValue6$outboundSchema;
  /** @deprecated use `GetOpportunityResponseValue6$Outbound` instead. */
  export type Outbound = GetOpportunityResponseValue6$Outbound;
}

export function getOpportunityResponseValue6ToJSON(
  getOpportunityResponseValue6: GetOpportunityResponseValue6,
): string {
  return JSON.stringify(
    GetOpportunityResponseValue6$outboundSchema.parse(
      getOpportunityResponseValue6,
    ),
  );
}

export function getOpportunityResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<GetOpportunityResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpportunityResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpportunityResponseValue6' from JSON`,
  );
}

/** @internal */
export const GetOpportunityResponseValue4$inboundSchema: z.ZodType<
  GetOpportunityResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetOpportunityResponseValue4$Outbound = {};

/** @internal */
export const GetOpportunityResponseValue4$outboundSchema: z.ZodType<
  GetOpportunityResponseValue4$Outbound,
  z.ZodTypeDef,
  GetOpportunityResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponseValue4$ {
  /** @deprecated use `GetOpportunityResponseValue4$inboundSchema` instead. */
  export const inboundSchema = GetOpportunityResponseValue4$inboundSchema;
  /** @deprecated use `GetOpportunityResponseValue4$outboundSchema` instead. */
  export const outboundSchema = GetOpportunityResponseValue4$outboundSchema;
  /** @deprecated use `GetOpportunityResponseValue4$Outbound` instead. */
  export type Outbound = GetOpportunityResponseValue4$Outbound;
}

export function getOpportunityResponseValue4ToJSON(
  getOpportunityResponseValue4: GetOpportunityResponseValue4,
): string {
  return JSON.stringify(
    GetOpportunityResponseValue4$outboundSchema.parse(
      getOpportunityResponseValue4,
    ),
  );
}

export function getOpportunityResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<GetOpportunityResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpportunityResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpportunityResponseValue4' from JSON`,
  );
}

/** @internal */
export const GetOpportunityResponseValue$inboundSchema: z.ZodType<
  GetOpportunityResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetOpportunityResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => GetOpportunityResponseValue6$inboundSchema)),
]);

/** @internal */
export type GetOpportunityResponseValue$Outbound =
  | GetOpportunityResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<GetOpportunityResponseValue6$Outbound>;

/** @internal */
export const GetOpportunityResponseValue$outboundSchema: z.ZodType<
  GetOpportunityResponseValue$Outbound,
  z.ZodTypeDef,
  GetOpportunityResponseValue
> = z.union([
  z.lazy(() => GetOpportunityResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => GetOpportunityResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponseValue$ {
  /** @deprecated use `GetOpportunityResponseValue$inboundSchema` instead. */
  export const inboundSchema = GetOpportunityResponseValue$inboundSchema;
  /** @deprecated use `GetOpportunityResponseValue$outboundSchema` instead. */
  export const outboundSchema = GetOpportunityResponseValue$outboundSchema;
  /** @deprecated use `GetOpportunityResponseValue$Outbound` instead. */
  export type Outbound = GetOpportunityResponseValue$Outbound;
}

export function getOpportunityResponseValueToJSON(
  getOpportunityResponseValue: GetOpportunityResponseValue,
): string {
  return JSON.stringify(
    GetOpportunityResponseValue$outboundSchema.parse(
      getOpportunityResponseValue,
    ),
  );
}

export function getOpportunityResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<GetOpportunityResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpportunityResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpportunityResponseValue' from JSON`,
  );
}

/** @internal */
export const GetOpportunityResponseCustomFields$inboundSchema: z.ZodType<
  GetOpportunityResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => GetOpportunityResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => GetOpportunityResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type GetOpportunityResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | GetOpportunityResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<GetOpportunityResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const GetOpportunityResponseCustomFields$outboundSchema: z.ZodType<
  GetOpportunityResponseCustomFields$Outbound,
  z.ZodTypeDef,
  GetOpportunityResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => GetOpportunityResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => GetOpportunityResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponseCustomFields$ {
  /** @deprecated use `GetOpportunityResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = GetOpportunityResponseCustomFields$inboundSchema;
  /** @deprecated use `GetOpportunityResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    GetOpportunityResponseCustomFields$outboundSchema;
  /** @deprecated use `GetOpportunityResponseCustomFields$Outbound` instead. */
  export type Outbound = GetOpportunityResponseCustomFields$Outbound;
}

export function getOpportunityResponseCustomFieldsToJSON(
  getOpportunityResponseCustomFields: GetOpportunityResponseCustomFields,
): string {
  return JSON.stringify(
    GetOpportunityResponseCustomFields$outboundSchema.parse(
      getOpportunityResponseCustomFields,
    ),
  );
}

export function getOpportunityResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetOpportunityResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetOpportunityResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpportunityResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const GetOpportunityResponseCustomMappings$inboundSchema: z.ZodType<
  GetOpportunityResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetOpportunityResponseCustomMappings$Outbound = {};

/** @internal */
export const GetOpportunityResponseCustomMappings$outboundSchema: z.ZodType<
  GetOpportunityResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  GetOpportunityResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponseCustomMappings$ {
  /** @deprecated use `GetOpportunityResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema =
    GetOpportunityResponseCustomMappings$inboundSchema;
  /** @deprecated use `GetOpportunityResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    GetOpportunityResponseCustomMappings$outboundSchema;
  /** @deprecated use `GetOpportunityResponseCustomMappings$Outbound` instead. */
  export type Outbound = GetOpportunityResponseCustomMappings$Outbound;
}

export function getOpportunityResponseCustomMappingsToJSON(
  getOpportunityResponseCustomMappings: GetOpportunityResponseCustomMappings,
): string {
  return JSON.stringify(
    GetOpportunityResponseCustomMappings$outboundSchema.parse(
      getOpportunityResponseCustomMappings,
    ),
  );
}

export function getOpportunityResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<GetOpportunityResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetOpportunityResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpportunityResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const GetOpportunityResponseExtendPaths$inboundSchema: z.ZodType<
  GetOpportunityResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type GetOpportunityResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const GetOpportunityResponseExtendPaths$outboundSchema: z.ZodType<
  GetOpportunityResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  GetOpportunityResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponseExtendPaths$ {
  /** @deprecated use `GetOpportunityResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = GetOpportunityResponseExtendPaths$inboundSchema;
  /** @deprecated use `GetOpportunityResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema =
    GetOpportunityResponseExtendPaths$outboundSchema;
  /** @deprecated use `GetOpportunityResponseExtendPaths$Outbound` instead. */
  export type Outbound = GetOpportunityResponseExtendPaths$Outbound;
}

export function getOpportunityResponseExtendPathsToJSON(
  getOpportunityResponseExtendPaths: GetOpportunityResponseExtendPaths,
): string {
  return JSON.stringify(
    GetOpportunityResponseExtendPaths$outboundSchema.parse(
      getOpportunityResponseExtendPaths,
    ),
  );
}

export function getOpportunityResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<GetOpportunityResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpportunityResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpportunityResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const GetOpportunityResponsePassThrough$inboundSchema: z.ZodType<
  GetOpportunityResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => GetOpportunityResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type GetOpportunityResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<GetOpportunityResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const GetOpportunityResponsePassThrough$outboundSchema: z.ZodType<
  GetOpportunityResponsePassThrough$Outbound,
  z.ZodTypeDef,
  GetOpportunityResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => GetOpportunityResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponsePassThrough$ {
  /** @deprecated use `GetOpportunityResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = GetOpportunityResponsePassThrough$inboundSchema;
  /** @deprecated use `GetOpportunityResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema =
    GetOpportunityResponsePassThrough$outboundSchema;
  /** @deprecated use `GetOpportunityResponsePassThrough$Outbound` instead. */
  export type Outbound = GetOpportunityResponsePassThrough$Outbound;
}

export function getOpportunityResponsePassThroughToJSON(
  getOpportunityResponsePassThrough: GetOpportunityResponsePassThrough,
): string {
  return JSON.stringify(
    GetOpportunityResponsePassThrough$outboundSchema.parse(
      getOpportunityResponsePassThrough,
    ),
  );
}

export function getOpportunityResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<GetOpportunityResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpportunityResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpportunityResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const GetOpportunityResponseData$inboundSchema: z.ZodType<
  GetOpportunityResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.string(),
  primary_contact_id: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(GetOpportunityResponseCurrency$inboundSchema).optional(),
  win_probability: z.nullable(z.number()).optional(),
  expected_revenue: z.nullable(z.number()).optional(),
  close_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  loss_reason_id: z.nullable(z.string()).optional(),
  loss_reason: z.nullable(z.string()).optional(),
  won_reason_id: z.nullable(z.string()).optional(),
  won_reason: z.nullable(z.string()).optional(),
  pipeline_id: z.nullable(z.string()).optional(),
  pipeline_stage_id: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  contact_ids: z.array(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  status_id: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  interaction_count: z.nullable(z.number()).optional(),
  custom_fields: z.array(
    z.lazy(() => GetOpportunityResponseCustomFields$inboundSchema),
  ).optional(),
  stage_last_changed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_activity_at: z.nullable(z.string()).optional(),
  deleted: z.boolean().optional(),
  date_stage_changed: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_last_contacted: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_lead_created: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => GetOpportunityResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => GetOpportunityResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "primary_contact_id": "primaryContactId",
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "expected_revenue": "expectedRevenue",
    "close_date": "closeDate",
    "loss_reason_id": "lossReasonId",
    "loss_reason": "lossReason",
    "won_reason_id": "wonReasonId",
    "won_reason": "wonReason",
    "pipeline_id": "pipelineId",
    "pipeline_stage_id": "pipelineStageId",
    "source_id": "sourceId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "contact_id": "contactId",
    "contact_ids": "contactIds",
    "company_id": "companyId",
    "company_name": "companyName",
    "owner_id": "ownerId",
    "status_id": "statusId",
    "interaction_count": "interactionCount",
    "custom_fields": "customFields",
    "stage_last_changed_at": "stageLastChangedAt",
    "last_activity_at": "lastActivityAt",
    "date_stage_changed": "dateStageChanged",
    "date_last_contacted": "dateLastContacted",
    "date_lead_created": "dateLeadCreated",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type GetOpportunityResponseData$Outbound = {
  id?: string | undefined;
  title: string;
  primary_contact_id: string | null;
  description?: string | null | undefined;
  type?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  win_probability?: number | null | undefined;
  expected_revenue?: number | null | undefined;
  close_date?: string | null | undefined;
  loss_reason_id?: string | null | undefined;
  loss_reason?: string | null | undefined;
  won_reason_id?: string | null | undefined;
  won_reason?: string | null | undefined;
  pipeline_id?: string | null | undefined;
  pipeline_stage_id?: string | null | undefined;
  source_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  contact_id?: string | null | undefined;
  contact_ids?: Array<string> | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  owner_id?: string | null | undefined;
  priority?: string | null | undefined;
  status?: string | null | undefined;
  status_id?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  interaction_count?: number | null | undefined;
  custom_fields?:
    | Array<GetOpportunityResponseCustomFields$Outbound>
    | undefined;
  stage_last_changed_at?: string | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  date_stage_changed?: string | null | undefined;
  date_last_contacted?: string | null | undefined;
  date_lead_created?: string | null | undefined;
  custom_mappings?:
    | GetOpportunityResponseCustomMappings$Outbound
    | null
    | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<GetOpportunityResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const GetOpportunityResponseData$outboundSchema: z.ZodType<
  GetOpportunityResponseData$Outbound,
  z.ZodTypeDef,
  GetOpportunityResponseData
> = z.object({
  id: z.string().optional(),
  title: z.string(),
  primaryContactId: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(GetOpportunityResponseCurrency$outboundSchema)
    .optional(),
  winProbability: z.nullable(z.number()).optional(),
  expectedRevenue: z.nullable(z.number()).optional(),
  closeDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  lossReasonId: z.nullable(z.string()).optional(),
  lossReason: z.nullable(z.string()).optional(),
  wonReasonId: z.nullable(z.string()).optional(),
  wonReason: z.nullable(z.string()).optional(),
  pipelineId: z.nullable(z.string()).optional(),
  pipelineStageId: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  contactIds: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  statusId: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  interactionCount: z.nullable(z.number()).optional(),
  customFields: z.array(
    z.lazy(() => GetOpportunityResponseCustomFields$outboundSchema),
  ).optional(),
  stageLastChangedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  lastActivityAt: z.nullable(z.string()).optional(),
  deleted: z.boolean().optional(),
  dateStageChanged: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  dateLastContacted: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  dateLeadCreated: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => GetOpportunityResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(
    z.lazy(() => GetOpportunityResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    primaryContactId: "primary_contact_id",
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    expectedRevenue: "expected_revenue",
    closeDate: "close_date",
    lossReasonId: "loss_reason_id",
    lossReason: "loss_reason",
    wonReasonId: "won_reason_id",
    wonReason: "won_reason",
    pipelineId: "pipeline_id",
    pipelineStageId: "pipeline_stage_id",
    sourceId: "source_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    contactId: "contact_id",
    contactIds: "contact_ids",
    companyId: "company_id",
    companyName: "company_name",
    ownerId: "owner_id",
    statusId: "status_id",
    interactionCount: "interaction_count",
    customFields: "custom_fields",
    stageLastChangedAt: "stage_last_changed_at",
    lastActivityAt: "last_activity_at",
    dateStageChanged: "date_stage_changed",
    dateLastContacted: "date_last_contacted",
    dateLeadCreated: "date_lead_created",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponseData$ {
  /** @deprecated use `GetOpportunityResponseData$inboundSchema` instead. */
  export const inboundSchema = GetOpportunityResponseData$inboundSchema;
  /** @deprecated use `GetOpportunityResponseData$outboundSchema` instead. */
  export const outboundSchema = GetOpportunityResponseData$outboundSchema;
  /** @deprecated use `GetOpportunityResponseData$Outbound` instead. */
  export type Outbound = GetOpportunityResponseData$Outbound;
}

export function getOpportunityResponseDataToJSON(
  getOpportunityResponseData: GetOpportunityResponseData,
): string {
  return JSON.stringify(
    GetOpportunityResponseData$outboundSchema.parse(getOpportunityResponseData),
  );
}

export function getOpportunityResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<GetOpportunityResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpportunityResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpportunityResponseData' from JSON`,
  );
}

/** @internal */
export const GetOpportunityResponse$inboundSchema: z.ZodType<
  GetOpportunityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetOpportunityResponseData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetOpportunityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: GetOpportunityResponseData$Outbound;
};

/** @internal */
export const GetOpportunityResponse$outboundSchema: z.ZodType<
  GetOpportunityResponse$Outbound,
  z.ZodTypeDef,
  GetOpportunityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetOpportunityResponseData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOpportunityResponse$ {
  /** @deprecated use `GetOpportunityResponse$inboundSchema` instead. */
  export const inboundSchema = GetOpportunityResponse$inboundSchema;
  /** @deprecated use `GetOpportunityResponse$outboundSchema` instead. */
  export const outboundSchema = GetOpportunityResponse$outboundSchema;
  /** @deprecated use `GetOpportunityResponse$Outbound` instead. */
  export type Outbound = GetOpportunityResponse$Outbound;
}

export function getOpportunityResponseToJSON(
  getOpportunityResponse: GetOpportunityResponse,
): string {
  return JSON.stringify(
    GetOpportunityResponse$outboundSchema.parse(getOpportunityResponse),
  );
}

export function getOpportunityResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOpportunityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOpportunityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOpportunityResponse' from JSON`,
  );
}
