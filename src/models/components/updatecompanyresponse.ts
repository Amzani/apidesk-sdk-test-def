/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated details of the company record that was modified through the PATCH request. It includes all the fields that were successfully updated, reflecting the current state of the company in the CRM. This object is essential for confirming that the intended changes have been applied correctly.
 */
export type UpdateCompanyResponseUnifiedId = {
  /**
   * The unique identifier of the company record that was updated. This ID is crucial for referencing the specific company within the CRM system and confirms the exact resource that has been modified. It ensures that developers can accurately track changes to the correct company entry.
   */
  id: string;
};

/**
 * Company updated
 */
export type UpdateCompanyResponse = {
  /**
   * The HTTP response status code returned by the server, indicating the result of the PATCH request to update a company record. A status code of 200 signifies a successful update, while other codes may indicate errors or issues with the request.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful update operation. This provides a human-readable status alongside the numeric status code, helping to quickly understand the outcome of the request.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for the operation, identifying which service facilitated the update of the company record. This is crucial for tracking and auditing purposes within the Apideck ecosystem.
   */
  service: string;
  /**
   * The name of the unified API resource that was targeted by the operation, in this case, a company record. This helps in identifying the type of resource that was updated, ensuring clarity in multi-resource environments.
   */
  resource: string;
  /**
   * The specific operation performed, which in this context is 'update'. This indicates that the PATCH request was intended to modify an existing company record, providing context to the nature of the API call.
   */
  operation: string;
  /**
   * This object contains the updated details of the company record that was modified through the PATCH request. It includes all the fields that were successfully updated, reflecting the current state of the company in the CRM. This object is essential for confirming that the intended changes have been applied correctly.
   */
  data: UpdateCompanyResponseUnifiedId;
};

/** @internal */
export const UpdateCompanyResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateCompanyResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateCompanyResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateCompanyResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateCompanyResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateCompanyResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyResponseUnifiedId$ {
  /** @deprecated use `UpdateCompanyResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateCompanyResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateCompanyResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateCompanyResponseUnifiedId$Outbound;
}

export function updateCompanyResponseUnifiedIdToJSON(
  updateCompanyResponseUnifiedId: UpdateCompanyResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateCompanyResponseUnifiedId$outboundSchema.parse(
      updateCompanyResponseUnifiedId,
    ),
  );
}

export function updateCompanyResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyResponse$inboundSchema: z.ZodType<
  UpdateCompanyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateCompanyResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateCompanyResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateCompanyResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateCompanyResponse$outboundSchema: z.ZodType<
  UpdateCompanyResponse$Outbound,
  z.ZodTypeDef,
  UpdateCompanyResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateCompanyResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyResponse$ {
  /** @deprecated use `UpdateCompanyResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyResponse$inboundSchema;
  /** @deprecated use `UpdateCompanyResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyResponse$outboundSchema;
  /** @deprecated use `UpdateCompanyResponse$Outbound` instead. */
  export type Outbound = UpdateCompanyResponse$Outbound;
}

export function updateCompanyResponseToJSON(
  updateCompanyResponse: UpdateCompanyResponse,
): string {
  return JSON.stringify(
    UpdateCompanyResponse$outboundSchema.parse(updateCompanyResponse),
  );
}

export function updateCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyResponse' from JSON`,
  );
}
