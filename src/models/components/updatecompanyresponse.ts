/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated company resource, reflecting the latest changes made to the record. It includes all relevant fields that define the company, ensuring developers have access to the most current data. The structure of this object aligns with the company's schema in the CRM system.
 */
export type UpdateCompanyResponseUnifiedId = {
  /**
   * The unique identifier of the company resource that was updated. This string value confirms the specific company record that has been modified, allowing developers to verify the update operation's success. It is crucial for tracking and referencing the updated company within the CRM.
   */
  id: string;
};

/**
 * Company updated
 */
export type UpdateCompanyResponse = {
  /**
   * The HTTP response status code indicating the result of the PATCH operation. This integer value helps determine if the update was successful (e.g., 200 for success) or if there was an error (e.g., 4xx or 5xx codes). It is crucial for error handling and debugging purposes.
   */
  statusCode: number;
  /**
   * A string representation of the HTTP response status, such as 'OK' for a successful update. This provides a human-readable status that complements the status code, offering a quick understanding of the operation's outcome.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the update request. This string identifies which service within the Apideck ecosystem handled the operation, especially useful when multiple services are integrated.
   */
  service: string;
  /**
   * The name of the unified API resource that was updated, represented as a string. This indicates the specific type of resource affected by the operation, such as 'company', helping developers understand the context of the update.
   */
  resource: string;
  /**
   * A string that specifies the operation performed, in this case, 'update'. This clarifies the action taken on the resource, confirming that the operation was a modification of existing data.
   */
  operation: string;
  /**
   * This object contains the updated company resource, reflecting the latest changes made to the record. It includes all relevant fields that define the company, ensuring developers have access to the most current data. The structure of this object aligns with the company's schema in the CRM system.
   */
  data: UpdateCompanyResponseUnifiedId;
};

/** @internal */
export const UpdateCompanyResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateCompanyResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateCompanyResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateCompanyResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateCompanyResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateCompanyResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyResponseUnifiedId$ {
  /** @deprecated use `UpdateCompanyResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateCompanyResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateCompanyResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateCompanyResponseUnifiedId$Outbound;
}

export function updateCompanyResponseUnifiedIdToJSON(
  updateCompanyResponseUnifiedId: UpdateCompanyResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateCompanyResponseUnifiedId$outboundSchema.parse(
      updateCompanyResponseUnifiedId,
    ),
  );
}

export function updateCompanyResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyResponse$inboundSchema: z.ZodType<
  UpdateCompanyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateCompanyResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateCompanyResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateCompanyResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateCompanyResponse$outboundSchema: z.ZodType<
  UpdateCompanyResponse$Outbound,
  z.ZodTypeDef,
  UpdateCompanyResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateCompanyResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyResponse$ {
  /** @deprecated use `UpdateCompanyResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyResponse$inboundSchema;
  /** @deprecated use `UpdateCompanyResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyResponse$outboundSchema;
  /** @deprecated use `UpdateCompanyResponse$Outbound` instead. */
  export type Outbound = UpdateCompanyResponse$Outbound;
}

export function updateCompanyResponseToJSON(
  updateCompanyResponse: UpdateCompanyResponse,
): string {
  return JSON.stringify(
    UpdateCompanyResponse$outboundSchema.parse(updateCompanyResponse),
  );
}

export function updateCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyResponse' from JSON`,
  );
}
