/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of address, such as 'home', 'work', or 'billing'. This string helps categorize the address for better organization and retrieval within the CRM system. Understanding the address type is essential for applications that need to differentiate between various address uses.
 */
export const ListUsersResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address, such as 'home', 'work', or 'billing'. This string helps categorize the address for better organization and retrieval within the CRM system. Understanding the address type is essential for applications that need to differentiate between various address uses.
 */
export type ListUsersResponseType = ClosedEnum<typeof ListUsersResponseType>;

export type ListUsersResponseAddresses = {
  /**
   * A unique identifier for each address associated with the user. This string serves as a primary key to distinguish between different addresses in the user's address list. It is crucial for operations that require specific address identification.
   */
  id?: string | null | undefined;
  /**
   * The type of address, such as 'home', 'work', or 'billing'. This string helps categorize the address for better organization and retrieval within the CRM system. Understanding the address type is essential for applications that need to differentiate between various address uses.
   */
  type?: ListUsersResponseType | null | undefined;
  /**
   * The full address in a single string format. This field is used when the API does not provide structured address data, offering a complete address in one line. It is useful for applications that require a straightforward display of address information.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address entry, typically representing the recipient or the entity at the location. This field helps identify the address within the CRM system and is useful for distinguishing between multiple addresses linked to a user. It is a non-mandatory field and can be left blank if not applicable.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, usually containing the street number, street name, and any apartment or suite number. This field is essential for accurately locating the address and is often the first line used in mailing labels and address forms. It is optional but recommended for clarity in address identification.
   */
  line1?: string | null | undefined;
  /**
   * An additional line for the address, often used for supplementary information such as building names or additional directions. This field provides extra space for details that do not fit in the primary address line, enhancing the precision of the address. It is optional and can be omitted if not needed.
   */
  line2?: string | null | undefined;
  /**
   * A third line available for further address details, which can include secondary information like landmarks or specific delivery instructions. This field allows for comprehensive address descriptions, ensuring all necessary details are captured. It is optional and should be used as needed to complete the address.
   */
  line3?: string | null | undefined;
  /**
   * A fourth line for additional address information, useful for capturing any remaining details that do not fit in the previous lines. This field ensures that all aspects of an address can be documented, providing flexibility in address formatting. It is optional and can be left empty if not required.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the user's address. This field contains the numeric part of the address, typically representing the building or house number. It is used to identify the specific location within a street for the user in the CRM system.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name where the user resides. This field provides the name of the city as part of the user's address, helping to locate the user geographically within the CRM system.
   */
  city?: string | null | undefined;
  /**
   * The state or region name associated with the user's address. This field specifies the state or administrative region, aiding in the geographical categorization of the user within the CRM system.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code for the user's address. This field contains the code used for mail delivery purposes, helping to pinpoint the user's location more precisely within the CRM system.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the user's address, formatted according to ISO 3166-1 alpha-2 standards. This field identifies the country in which the user resides, providing a standardized way to reference the user's national location within the CRM system.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the address, represented as a string. This value is part of the geographical data that helps pinpoint the exact location of a user's address in the CRM system. Useful for mapping and location-based services.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, represented as a string. This value complements the latitude to provide precise geographical positioning of a user's address within the CRM system. Essential for applications requiring location tracking or mapping.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality associated with the address, stored as a string. This field provides additional geographical context, helping to identify the administrative region of the user's address in the CRM system. Useful for regional analysis and reporting.
   */
  county?: string | null | undefined;
  /**
   * The name of the contact person associated with the address, stored as a string. This information is crucial for identifying the primary individual at the location, facilitating communication and personalized interactions within the CRM system.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title of the contact person at the address, such as 'Mr.', 'Ms.', or 'Dr.', stored as a string. This field helps in maintaining formal communication and personalization in interactions with the contact person.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the user's address. This string should be formatted according to international dialing standards, including country code if applicable. It is used to contact the user directly via telephone and is part of the user's contact information in the CRM system.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the user's address. This string represents the fax contact information, which may be used for sending documents via fax machines. It is included as part of the user's contact details in the CRM system.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the user's address. This string should be a valid email format and is used for electronic communication with the user. It forms a crucial part of the user's contact information within the CRM system.
   */
  email?: string | null | undefined;
  /**
   * The website URL related to the user's address. This string should be a valid URL format and provides a link to the user's or their organization's online presence. It is part of the user's contact information in the CRM system.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the user's address. This string can contain any supplementary information or comments about the address that may be useful for CRM users. It provides context or special instructions related to the user's address.
   */
  notes?: string | null | undefined;
  /**
   * The 'row_version' property contains a string that represents a binary value used for concurrency control. It is crucial for detecting updates to a user object and preventing data conflicts by ensuring that changes are only applied to the latest version of the data. This value is automatically incremented with each update to the user object, helping maintain data integrity in the CRM system.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number, allowing applications to handle different types of contact numbers appropriately. Understanding the type can be crucial for context-specific communication strategies.
 */
export const ListUsersResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number, allowing applications to handle different types of contact numbers appropriately. Understanding the type can be crucial for context-specific communication strategies.
 */
export type ListUsersResponseDataType = ClosedEnum<
  typeof ListUsersResponseDataType
>;

export type ListUsersResponsePhoneNumbers = {
  /**
   * A unique identifier for each phone number entry within the user's phone numbers array. This ID is used to distinguish between different phone numbers associated with the same user.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code associated with the user's phone number, formatted as a string (e.g., '+1' for the United States). This code is essential for making international calls and is part of the complete phone number format.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code for the user's phone number, formatted as a string (e.g., '323' for Los Angeles). This code helps identify the specific geographic region of the phone number within a country.
   */
  areaCode?: string | null | undefined;
  /**
   * Contains the user's phone number in a standard format, such as E.164, which is essential for making calls or sending messages. This field is crucial for identifying the primary contact number of the user within the CRM system. It is a required field, ensuring that every user entry includes a valid phone number.
   */
  number: string;
  /**
   * Represents the extension number associated with the user's phone number, if applicable. This field is optional and is used in scenarios where direct dialing to a specific department or individual is needed within an organization. It enhances the phone number by providing additional routing information.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number, allowing applications to handle different types of contact numbers appropriately. Understanding the type can be crucial for context-specific communication strategies.
   */
  type?: ListUsersResponseDataType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work' or 'personal'. This helps categorize the email for better organization and context within the CRM system. The value is optional and can be used to filter or sort email addresses based on their type.
 */
export const ListUsersResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work' or 'personal'. This helps categorize the email for better organization and context within the CRM system. The value is optional and can be used to filter or sort email addresses based on their type.
 */
export type ListUsersResponseDataEmailsType = ClosedEnum<
  typeof ListUsersResponseDataEmailsType
>;

export type ListUsersResponseEmails = {
  /**
   * A unique identifier for each email address associated with the user, used to distinguish between multiple email entries. This optional field is crucial for operations that require precise identification and management of email addresses within the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The primary email address associated with the user. This field is crucial for user identification and communication within the CRM system. It is expected to be in a standard email format (e.g., user@example.com).
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work' or 'personal'. This helps categorize the email for better organization and context within the CRM system. The value is optional and can be used to filter or sort email addresses based on their type.
   */
  type?: ListUsersResponseDataEmailsType | null | undefined;
};

/**
 * Contains any custom mappings configured for the user resource. This object provides additional, user-specific data that may not be part of the standard schema, allowing for extended customization and integration flexibility.
 */
export type ListUsersResponseCustomMappings = {};

export type ListUsersResponseExtendPaths = {
  /**
   * Specifies the JSONPath string where the value should be applied within the user data. This path allows precise targeting of data fields for updates or retrieval, ensuring that the correct data is manipulated or accessed in the CRM system.
   */
  path: string;
  /**
   * Represents the value to be set at the specified JSONPath. This value can be of any data type, allowing flexibility in the kind of data that can be inserted or updated within the user records.
   */
  value?: any | undefined;
};

export type ListUsersResponsePassThrough = {
  /**
   * A string identifier for the specific service to which the pass_through data should be applied. This ensures that the custom data is directed to the correct service within the CRM system.
   */
  serviceId: string;
  /**
   * An optional string identifier for a specific workflow operation. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise targeting of the pass_through data.
   */
  operationId?: string | undefined;
  /**
   * An object that can contain any properties for direct extension. This allows developers to add custom fields or data structures to the response, providing additional flexibility in handling API responses.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects used for structured data modifications via paths. This property enables developers to specify precise modifications to the data structure, enhancing the customization of the API response.
   */
  extendPaths?: Array<ListUsersResponseExtendPaths> | undefined;
};

export type ListUsersResponseData = {
  /**
   * The unique identifier for each user within the CRM system. This ID is crucial for distinguishing between different users and is often used in operations that require user-specific data retrieval or manipulation.
   */
  id?: string | undefined;
  /**
   * The identifier for the parent user, if applicable, indicating a hierarchical relationship between users. This field is useful for understanding user roles and relationships within the CRM system, especially in organizations with complex user structures.
   */
  parentId?: string | null | undefined;
  /**
   * The username assigned to the user, used for login and identification purposes within the CRM system. This field is important for authentication processes and user-specific operations.
   */
  username?: string | null | undefined;
  /**
   * The first name of the user, providing a personal identifier that is often used in user interfaces and communications. This field helps personalize interactions and display user information in a more human-readable format.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the user in the CRM system. This field provides the surname or family name, which is part of the user's personal identification details. It is used in conjunction with other personal data to uniquely identify a user within the system.
   */
  lastName?: string | null | undefined;
  /**
   * The professional job title of the user within their organization. This field indicates the user's role or position, which can be useful for understanding their responsibilities and hierarchy within the company. It is typically a string value representing titles like 'Manager', 'Developer', etc.
   */
  title?: string | null | undefined;
  /**
   * The division within the organization where the user is currently assigned. This field represents a higher-level grouping of departments, teams, or regions, providing context about the user's organizational structure. It helps in understanding the broader area of the company the user is associated with.
   */
  division?: string | null | undefined;
  /**
   * The specific department within the organization where the user is currently assigned. Although deprecated in favor of 'department_id' and 'department_name', this field historically provided insight into the user's immediate working group or area of expertise. It is a string value that may still appear in legacy systems.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * The name of the company the user is associated with in the CRM system. This field provides the official name of the organization, which is crucial for identifying the user's employer or business entity. It is a string value that helps in linking the user to their corporate identity.
   */
  companyName?: string | null | undefined;
  /**
   * A unique identifier assigned to each employee within the company. This string value serves as an Employee Number, Employee ID, or Employee Code, and is used to uniquely distinguish staff members in the CRM system. It is not required but can be useful for tracking and managing employee records.
   */
  employeeNumber?: string | null | undefined;
  /**
   * A textual description providing additional details about the user object. This string can include information such as the user's role, responsibilities, or any other relevant notes that help in understanding the user's profile within the CRM system.
   */
  description?: string | null | undefined;
  /**
   * The URL pointing to the user's avatar image. This string should be a valid URL format and is used to visually represent the user in applications that integrate with the CRM system. It is optional but enhances user profiles by providing a visual identifier.
   */
  image?: string | null | undefined;
  /**
   * The language preference of the user, represented by a language code according to ISO 639-1 standards. For example, 'EN' for English as used in the United States. This string helps in localizing content and communications for the user within the CRM system.
   */
  language?: string | null | undefined;
  /**
   * The current status of the user within the CRM system. This string indicates whether the user is active, inactive, or in another state, affecting their accessibility and interaction with the CRM functionalities. Understanding the user's status is crucial for managing permissions and roles.
   */
  status?: string | null | undefined;
  /**
   * An array of address objects associated with the user. Each object within the array represents a distinct address, providing detailed location information for the user. This field is optional and may be empty if no addresses are associated with the user.
   */
  addresses?: Array<ListUsersResponseAddresses> | undefined;
  /**
   * An array containing the user's phone numbers, each represented as an object with specific details such as ID, country code, and area code. This array allows developers to access all phone numbers associated with a user in a structured format.
   */
  phoneNumbers?: Array<ListUsersResponsePhoneNumbers> | undefined;
  /**
   * An array containing the user's email addresses, each represented as an object with specific attributes. This field is required and provides a comprehensive list of all email contacts associated with the user, facilitating communication and integration with email-based services.
   */
  emails: Array<ListUsersResponseEmails>;
  /**
   * Contains any custom mappings configured for the user resource. This object provides additional, user-specific data that may not be part of the standard schema, allowing for extended customization and integration flexibility.
   */
  customMappings?: ListUsersResponseCustomMappings | null | undefined;
  /**
   * The timestamp indicating when the user's information was last updated in the CRM system. This is useful for tracking changes and ensuring data freshness. The format is typically ISO 8601 (e.g., '2023-01-01T12:00:00Z').
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp indicating when the user was initially created in the CRM system. This helps in understanding the user's history and tenure within the system. The format follows ISO 8601 standards (e.g., '2023-01-01T12:00:00Z').
   */
  createdAt?: string | null | undefined;
  /**
   * An array that holds service-specific custom data or structured modifications. This property allows developers to pass additional data when creating or updating resources, enhancing the flexibility of the API's response.
   */
  passThrough?: Array<ListUsersResponsePassThrough> | undefined;
};

/**
 * Provides cursors for navigating through paginated API responses. These cursors enable developers to efficiently move to previous or next pages of user data, facilitating seamless data retrieval in applications that require browsing through large datasets.
 */
export type ListUsersResponseCursors = {
  /**
   * A string representing the cursor used to navigate to the previous page of results in the API response. This is useful for implementing pagination in applications that consume the API, allowing users to easily access earlier pages of user data.
   */
  previous?: string | null | undefined;
  /**
   * A string that indicates the cursor for the current page of results in the API response. This helps in tracking the current position within the paginated data, ensuring consistent data retrieval across requests.
   */
  current?: string | null | undefined;
  /**
   * A string representing the cursor used to navigate to the next page of results in the API response. This facilitates pagination by enabling applications to load subsequent pages of user data seamlessly.
   */
  next?: string | null | undefined;
};

/**
 * Contains metadata about the response, providing additional context such as pagination details or request processing information. This object helps in understanding the structure and status of the response received from the API.
 */
export type ListUsersResponseMeta = {
  /**
   * Indicates the number of user records returned in the current response. This helps in understanding the volume of data retrieved and is useful for managing pagination and data display in applications.
   */
  itemsOnPage?: number | undefined;
  /**
   * Provides cursors for navigating through paginated API responses. These cursors enable developers to efficiently move to previous or next pages of user data, facilitating seamless data retrieval in applications that require browsing through large datasets.
   */
  cursors?: ListUsersResponseCursors | undefined;
};

/**
 * An object containing links that facilitate navigation between pages of results in the API response. This includes links to both previous and next pages, aiding in the implementation of pagination controls.
 */
export type ListUsersResponseLinks = {
  /**
   * A string URL that provides a direct link to navigate to the previous page of results in the API response. This is part of the pagination mechanism, allowing users to easily return to earlier data pages.
   */
  previous?: string | null | undefined;
  /**
   * The 'links.current' property contains a URL string that directs to the current page of the user list in the CRM system. This link is useful for maintaining the current view state when navigating through paginated results. It helps developers implement seamless navigation within the user data fetched by the 'usersAll' operation.
   */
  current?: string | undefined;
  /**
   * The 'links.next' property provides a URL string that points to the next page of the user list in the CRM system. This link is essential for implementing pagination, allowing developers to fetch subsequent pages of user data efficiently. It ensures smooth data retrieval when handling large sets of user information in the 'usersAll' operation.
   */
  next?: string | null | undefined;
};

/**
 * Users
 */
export type ListUsersResponse = {
  /**
   * The HTTP response status code returned by the server, indicating the result of the GET request to the '/crm/users' endpoint. This integer value helps developers understand whether the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is essential for error handling and debugging.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for an unsuccessful one. This string provides a human-readable explanation of the 'status_code' and aids in quickly understanding the outcome of the API call.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the user data is being fetched. This string uniquely identifies the service within the Apideck ecosystem, helping developers determine the source of the data in the response.
   */
  service: string;
  /**
   * The name of the unified API resource being accessed, in this case, 'users'. This string indicates the type of data returned in the response, aligning with the endpoint's purpose of fetching user information from the CRM system.
   */
  resource: string;
  /**
   * The specific operation performed by the API, which in this context is 'usersAll'. This string helps developers understand the action taken by the API, confirming that the request was to retrieve all user data from the CRM system.
   */
  operation: string;
  /**
   * An array containing user objects, each representing a user in the CRM system. This array is the main component of the response, providing structured access to user details such as IDs, usernames, and names. It is essential for applications that need to process or display multiple user records simultaneously.
   */
  data: Array<ListUsersResponseData>;
  /**
   * Contains metadata about the response, providing additional context such as pagination details or request processing information. This object helps in understanding the structure and status of the response received from the API.
   */
  meta?: ListUsersResponseMeta | undefined;
  /**
   * An object containing links that facilitate navigation between pages of results in the API response. This includes links to both previous and next pages, aiding in the implementation of pagination controls.
   */
  links?: ListUsersResponseLinks | undefined;
};

/** @internal */
export const ListUsersResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseType
> = z.nativeEnum(ListUsersResponseType);

/** @internal */
export const ListUsersResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseType
> = ListUsersResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseType$ {
  /** @deprecated use `ListUsersResponseType$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseType$inboundSchema;
  /** @deprecated use `ListUsersResponseType$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseType$outboundSchema;
}

/** @internal */
export const ListUsersResponseAddresses$inboundSchema: z.ZodType<
  ListUsersResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListUsersResponseType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ListUsersResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ListUsersResponseAddresses$outboundSchema: z.ZodType<
  ListUsersResponseAddresses$Outbound,
  z.ZodTypeDef,
  ListUsersResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListUsersResponseType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseAddresses$ {
  /** @deprecated use `ListUsersResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseAddresses$inboundSchema;
  /** @deprecated use `ListUsersResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseAddresses$outboundSchema;
  /** @deprecated use `ListUsersResponseAddresses$Outbound` instead. */
  export type Outbound = ListUsersResponseAddresses$Outbound;
}

export function listUsersResponseAddressesToJSON(
  listUsersResponseAddresses: ListUsersResponseAddresses,
): string {
  return JSON.stringify(
    ListUsersResponseAddresses$outboundSchema.parse(listUsersResponseAddresses),
  );
}

export function listUsersResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseAddresses' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseDataType
> = z.nativeEnum(ListUsersResponseDataType);

/** @internal */
export const ListUsersResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseDataType
> = ListUsersResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseDataType$ {
  /** @deprecated use `ListUsersResponseDataType$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseDataType$inboundSchema;
  /** @deprecated use `ListUsersResponseDataType$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseDataType$outboundSchema;
}

/** @internal */
export const ListUsersResponsePhoneNumbers$inboundSchema: z.ZodType<
  ListUsersResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListUsersResponseDataType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ListUsersResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ListUsersResponsePhoneNumbers$outboundSchema: z.ZodType<
  ListUsersResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  ListUsersResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListUsersResponseDataType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponsePhoneNumbers$ {
  /** @deprecated use `ListUsersResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `ListUsersResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `ListUsersResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = ListUsersResponsePhoneNumbers$Outbound;
}

export function listUsersResponsePhoneNumbersToJSON(
  listUsersResponsePhoneNumbers: ListUsersResponsePhoneNumbers,
): string {
  return JSON.stringify(
    ListUsersResponsePhoneNumbers$outboundSchema.parse(
      listUsersResponsePhoneNumbers,
    ),
  );
}

export function listUsersResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseDataEmailsType
> = z.nativeEnum(ListUsersResponseDataEmailsType);

/** @internal */
export const ListUsersResponseDataEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseDataEmailsType
> = ListUsersResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseDataEmailsType$ {
  /** @deprecated use `ListUsersResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseDataEmailsType$inboundSchema;
  /** @deprecated use `ListUsersResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const ListUsersResponseEmails$inboundSchema: z.ZodType<
  ListUsersResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListUsersResponseDataEmailsType$inboundSchema).optional(),
});

/** @internal */
export type ListUsersResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ListUsersResponseEmails$outboundSchema: z.ZodType<
  ListUsersResponseEmails$Outbound,
  z.ZodTypeDef,
  ListUsersResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListUsersResponseDataEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseEmails$ {
  /** @deprecated use `ListUsersResponseEmails$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseEmails$inboundSchema;
  /** @deprecated use `ListUsersResponseEmails$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseEmails$outboundSchema;
  /** @deprecated use `ListUsersResponseEmails$Outbound` instead. */
  export type Outbound = ListUsersResponseEmails$Outbound;
}

export function listUsersResponseEmailsToJSON(
  listUsersResponseEmails: ListUsersResponseEmails,
): string {
  return JSON.stringify(
    ListUsersResponseEmails$outboundSchema.parse(listUsersResponseEmails),
  );
}

export function listUsersResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseEmails' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseCustomMappings$inboundSchema: z.ZodType<
  ListUsersResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListUsersResponseCustomMappings$Outbound = {};

/** @internal */
export const ListUsersResponseCustomMappings$outboundSchema: z.ZodType<
  ListUsersResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  ListUsersResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseCustomMappings$ {
  /** @deprecated use `ListUsersResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseCustomMappings$inboundSchema;
  /** @deprecated use `ListUsersResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseCustomMappings$outboundSchema;
  /** @deprecated use `ListUsersResponseCustomMappings$Outbound` instead. */
  export type Outbound = ListUsersResponseCustomMappings$Outbound;
}

export function listUsersResponseCustomMappingsToJSON(
  listUsersResponseCustomMappings: ListUsersResponseCustomMappings,
): string {
  return JSON.stringify(
    ListUsersResponseCustomMappings$outboundSchema.parse(
      listUsersResponseCustomMappings,
    ),
  );
}

export function listUsersResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseExtendPaths$inboundSchema: z.ZodType<
  ListUsersResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListUsersResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListUsersResponseExtendPaths$outboundSchema: z.ZodType<
  ListUsersResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListUsersResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseExtendPaths$ {
  /** @deprecated use `ListUsersResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListUsersResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListUsersResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListUsersResponseExtendPaths$Outbound;
}

export function listUsersResponseExtendPathsToJSON(
  listUsersResponseExtendPaths: ListUsersResponseExtendPaths,
): string {
  return JSON.stringify(
    ListUsersResponseExtendPaths$outboundSchema.parse(
      listUsersResponseExtendPaths,
    ),
  );
}

export function listUsersResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListUsersResponsePassThrough$inboundSchema: z.ZodType<
  ListUsersResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListUsersResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListUsersResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListUsersResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListUsersResponsePassThrough$outboundSchema: z.ZodType<
  ListUsersResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListUsersResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListUsersResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponsePassThrough$ {
  /** @deprecated use `ListUsersResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponsePassThrough$inboundSchema;
  /** @deprecated use `ListUsersResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponsePassThrough$outboundSchema;
  /** @deprecated use `ListUsersResponsePassThrough$Outbound` instead. */
  export type Outbound = ListUsersResponsePassThrough$Outbound;
}

export function listUsersResponsePassThroughToJSON(
  listUsersResponsePassThrough: ListUsersResponsePassThrough,
): string {
  return JSON.stringify(
    ListUsersResponsePassThrough$outboundSchema.parse(
      listUsersResponsePassThrough,
    ),
  );
}

export function listUsersResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseData$inboundSchema: z.ZodType<
  ListUsersResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  parent_id: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employee_number: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => ListUsersResponseAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => ListUsersResponsePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => ListUsersResponseEmails$inboundSchema)),
  custom_mappings: z.nullable(
    z.lazy(() => ListUsersResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => ListUsersResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "first_name": "firstName",
    "last_name": "lastName",
    "company_name": "companyName",
    "employee_number": "employeeNumber",
    "phone_numbers": "phoneNumbers",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ListUsersResponseData$Outbound = {
  id?: string | undefined;
  parent_id?: string | null | undefined;
  username?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  title?: string | null | undefined;
  division?: string | null | undefined;
  department?: string | null | undefined;
  company_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  addresses?: Array<ListUsersResponseAddresses$Outbound> | undefined;
  phone_numbers?: Array<ListUsersResponsePhoneNumbers$Outbound> | undefined;
  emails: Array<ListUsersResponseEmails$Outbound>;
  custom_mappings?: ListUsersResponseCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ListUsersResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const ListUsersResponseData$outboundSchema: z.ZodType<
  ListUsersResponseData$Outbound,
  z.ZodTypeDef,
  ListUsersResponseData
> = z.object({
  id: z.string().optional(),
  parentId: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => ListUsersResponseAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => ListUsersResponsePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => ListUsersResponseEmails$outboundSchema)),
  customMappings: z.nullable(
    z.lazy(() => ListUsersResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => ListUsersResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    firstName: "first_name",
    lastName: "last_name",
    companyName: "company_name",
    employeeNumber: "employee_number",
    phoneNumbers: "phone_numbers",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseData$ {
  /** @deprecated use `ListUsersResponseData$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseData$inboundSchema;
  /** @deprecated use `ListUsersResponseData$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseData$outboundSchema;
  /** @deprecated use `ListUsersResponseData$Outbound` instead. */
  export type Outbound = ListUsersResponseData$Outbound;
}

export function listUsersResponseDataToJSON(
  listUsersResponseData: ListUsersResponseData,
): string {
  return JSON.stringify(
    ListUsersResponseData$outboundSchema.parse(listUsersResponseData),
  );
}

export function listUsersResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseData' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseCursors$inboundSchema: z.ZodType<
  ListUsersResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListUsersResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListUsersResponseCursors$outboundSchema: z.ZodType<
  ListUsersResponseCursors$Outbound,
  z.ZodTypeDef,
  ListUsersResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseCursors$ {
  /** @deprecated use `ListUsersResponseCursors$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseCursors$inboundSchema;
  /** @deprecated use `ListUsersResponseCursors$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseCursors$outboundSchema;
  /** @deprecated use `ListUsersResponseCursors$Outbound` instead. */
  export type Outbound = ListUsersResponseCursors$Outbound;
}

export function listUsersResponseCursorsToJSON(
  listUsersResponseCursors: ListUsersResponseCursors,
): string {
  return JSON.stringify(
    ListUsersResponseCursors$outboundSchema.parse(listUsersResponseCursors),
  );
}

export function listUsersResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseCursors' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseMeta$inboundSchema: z.ZodType<
  ListUsersResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ListUsersResponseCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ListUsersResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ListUsersResponseCursors$Outbound | undefined;
};

/** @internal */
export const ListUsersResponseMeta$outboundSchema: z.ZodType<
  ListUsersResponseMeta$Outbound,
  z.ZodTypeDef,
  ListUsersResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ListUsersResponseCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseMeta$ {
  /** @deprecated use `ListUsersResponseMeta$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseMeta$inboundSchema;
  /** @deprecated use `ListUsersResponseMeta$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseMeta$outboundSchema;
  /** @deprecated use `ListUsersResponseMeta$Outbound` instead. */
  export type Outbound = ListUsersResponseMeta$Outbound;
}

export function listUsersResponseMetaToJSON(
  listUsersResponseMeta: ListUsersResponseMeta,
): string {
  return JSON.stringify(
    ListUsersResponseMeta$outboundSchema.parse(listUsersResponseMeta),
  );
}

export function listUsersResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseMeta' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseLinks$inboundSchema: z.ZodType<
  ListUsersResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListUsersResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListUsersResponseLinks$outboundSchema: z.ZodType<
  ListUsersResponseLinks$Outbound,
  z.ZodTypeDef,
  ListUsersResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseLinks$ {
  /** @deprecated use `ListUsersResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseLinks$inboundSchema;
  /** @deprecated use `ListUsersResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseLinks$outboundSchema;
  /** @deprecated use `ListUsersResponseLinks$Outbound` instead. */
  export type Outbound = ListUsersResponseLinks$Outbound;
}

export function listUsersResponseLinksToJSON(
  listUsersResponseLinks: ListUsersResponseLinks,
): string {
  return JSON.stringify(
    ListUsersResponseLinks$outboundSchema.parse(listUsersResponseLinks),
  );
}

export function listUsersResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseLinks' from JSON`,
  );
}

/** @internal */
export const ListUsersResponse$inboundSchema: z.ZodType<
  ListUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListUsersResponseData$inboundSchema)),
  meta: z.lazy(() => ListUsersResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => ListUsersResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListUsersResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ListUsersResponseData$Outbound>;
  meta?: ListUsersResponseMeta$Outbound | undefined;
  links?: ListUsersResponseLinks$Outbound | undefined;
};

/** @internal */
export const ListUsersResponse$outboundSchema: z.ZodType<
  ListUsersResponse$Outbound,
  z.ZodTypeDef,
  ListUsersResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListUsersResponseData$outboundSchema)),
  meta: z.lazy(() => ListUsersResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => ListUsersResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponse$ {
  /** @deprecated use `ListUsersResponse$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponse$inboundSchema;
  /** @deprecated use `ListUsersResponse$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponse$outboundSchema;
  /** @deprecated use `ListUsersResponse$Outbound` instead. */
  export type Outbound = ListUsersResponse$Outbound;
}

export function listUsersResponseToJSON(
  listUsersResponse: ListUsersResponse,
): string {
  return JSON.stringify(
    ListUsersResponse$outboundSchema.parse(listUsersResponse),
  );
}

export function listUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponse' from JSON`,
  );
}
