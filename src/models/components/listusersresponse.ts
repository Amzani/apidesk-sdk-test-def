/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Indicates the type of address, such as 'home', 'work', or 'billing'. This helps categorize the address for better organization and retrieval in applications that manage multiple address types for users.
 */
export const ListUsersResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Indicates the type of address, such as 'home', 'work', or 'billing'. This helps categorize the address for better organization and retrieval in applications that manage multiple address types for users.
 */
export type ListUsersResponseType = ClosedEnum<typeof ListUsersResponseType>;

export type ListUsersResponseAddresses = {
  /**
   * A unique identifier for each address associated with the user. This ID is used to distinguish between different addresses and is crucial for operations that involve updating or deleting specific addresses.
   */
  id?: string | null | undefined;
  /**
   * Indicates the type of address, such as 'home', 'work', or 'billing'. This helps categorize the address for better organization and retrieval in applications that manage multiple address types for users.
   */
  type?: ListUsersResponseType | null | undefined;
  /**
   * The full address as a single string, which may include street, city, state, and postal code. This format is useful for APIs that do not provide structured address components, allowing for straightforward display and storage.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address entry, such as 'Home' or 'Office'. This helps in identifying the purpose or type of address within the user's profile. It is returned as a string and is optional, meaning it may not be present for all addresses.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, typically including the street number, street name, and any apartment or suite number. This is a crucial part of the address used for mailing and identification purposes, returned as a string.
   */
  line1?: string | null | undefined;
  /**
   * The secondary line of the address, often used for additional information such as building name or floor number. This field is optional and may not be present for all addresses, returned as a string.
   */
  line2?: string | null | undefined;
  /**
   * An additional line for the address, which can be used for further details like landmarks or specific instructions. This field is optional and is returned as a string, providing flexibility for complex addresses.
   */
  line3?: string | null | undefined;
  /**
   * A fourth line for the address, allowing for extra information that doesn't fit in the previous lines. This is optional and returned as a string, useful for comprehensive address details.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the user's address, typically representing the numeric part of the address. This is used to identify the specific location on a street and is returned as a string. It is optional and may be empty if not provided in the CRM.
   */
  streetNumber?: string | null | undefined;
  /**
   * The name of the city associated with the user's address. This string value helps in identifying the geographical location of the user within a country. It is optional and may be omitted if not available in the CRM data.
   */
  city?: string | null | undefined;
  /**
   * The state or region name where the user resides, provided as a string. This information is useful for regional segmentation and analysis of user data. It is optional and may not be present if the CRM does not store this detail.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code for the user's address, formatted as a string. This code is crucial for mail delivery and location-based services. It is optional and may be absent if not recorded in the CRM.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the user's address, following the ISO 3166-1 alpha-2 standard. This two-letter code identifies the user's country and is essential for internationalization and localization processes. It is optional and may not be included if the CRM lacks this information.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the address, represented as a string. This value is used to pinpoint the geographical location of the user's address on a map. It is optional and may not be present if the address does not include geographical data.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, represented as a string. This value helps in identifying the exact geographical location of the user's address. It is optional and may be omitted if the address lacks geographical information.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality associated with the address, provided as a string. This field helps in further categorizing the address within a larger geographical area, such as a state or region. It is optional and may not be included if the address does not specify a county.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address, given as a string. This information is useful for identifying the primary individual at the address for communication purposes. It is optional and may be absent if no contact person is specified.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title of the contact person at the address, such as 'Mr.', 'Ms.', or 'Dr.', provided as a string. This field is used to address the contact person respectfully in communications. It is optional and may not be present if no salutation is specified.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the user's address. This is typically formatted as a string of digits, possibly including country and area codes, and is used for contact purposes. It is optional and may not be present for all users.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the user's address, provided as a string. This may include country and area codes and is used for sending documents via fax. It is optional and may not be available for all users.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the user's address, formatted as a standard email string (e.g., user@example.com). This is used for electronic communication and is optional, meaning it might not be present for every user.
   */
  email?: string | null | undefined;
  /**
   * The website URL related to the user's address, provided as a string. This URL can be used to access the user's or organization's online presence and is optional, so it may not be included for all users.
   */
  website?: string | null | undefined;
  /**
   * Additional notes regarding the user's address, stored as a string. These notes can include any extra information relevant to the address and are optional, meaning they might not be present for every user.
   */
  notes?: string | null | undefined;
  /**
   * This property contains a versioning string that represents the current state of the user's address data. It is used to detect changes and prevent data conflicts by ensuring that updates are only applied to the latest version of the data. The value is automatically incremented with each update to the address, allowing for efficient synchronization and conflict resolution in applications that manage user data.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This string field helps categorize the phone number for better organization and understanding of the user's contact methods.
 */
export const ListUsersResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This string field helps categorize the phone number for better organization and understanding of the user's contact methods.
 */
export type ListUsersResponseDataType = ClosedEnum<
  typeof ListUsersResponseDataType
>;

export type ListUsersResponsePhoneNumbers = {
  /**
   * A unique identifier for each phone number associated with the user. This ID is used to distinguish between different phone numbers in the system and is essential for operations that require specific phone number references.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, represented as a string (e.g., '+1' for the United States). This code is crucial for making international calls and is part of the complete phone number format.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code for the phone number, provided as a string (e.g., '323' for Los Angeles). This code helps in identifying the specific geographic region of the phone number within a country.
   */
  areaCode?: string | null | undefined;
  /**
   * The primary contact phone number associated with the user. This is a mandatory field and is expected to be in a standard international format, such as '+1234567890'. It is crucial for communication purposes and is often used in user profiles and contact lists.
   */
  number: string;
  /**
   * An optional extension number for the user's phone, typically used in corporate environments to direct calls within a larger phone system. This field is a string and may contain numeric characters, allowing for additional routing within an organization.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This string field helps categorize the phone number for better organization and understanding of the user's contact methods.
   */
  type?: ListUsersResponseDataType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This optional field helps categorize the email for better context and usage within applications.
 */
export const ListUsersResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This optional field helps categorize the email for better context and usage within applications.
 */
export type ListUsersResponseDataEmailsType = ClosedEnum<
  typeof ListUsersResponseDataEmailsType
>;

export type ListUsersResponseEmails = {
  /**
   * A unique identifier for each email address within the user's email list. This string is used to distinguish between different email entries, facilitating management and updates of email records.
   */
  id?: string | null | undefined;
  /**
   * The primary email address associated with the user account. This is a required field and is always returned as a valid email string, ensuring that applications can reliably use it for communication or identification purposes.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work', 'personal', or 'other'. This optional field helps categorize the email for better context and usage within applications.
   */
  type?: ListUsersResponseDataEmailsType | null | undefined;
};

/**
 * Contains any custom mappings configured for the user resource. This object is included when custom mappings are set up, providing additional context or integration-specific data that may be necessary for certain applications.
 */
export type ListUsersResponseCustomMappings = {};

export type ListUsersResponseExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the JSON structure where the value should be applied. This allows for precise targeting of data fields within the response, ensuring that the correct data is modified or accessed.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath. This can be of any data type, allowing flexibility in the kind of data that can be inserted or updated at the targeted path within the JSON structure.
   */
  value?: any | undefined;
};

export type ListUsersResponsePassThrough = {
  /**
   * A string identifier that specifies the service to which the pass_through data should be applied. This is crucial when dealing with multiple integrations, ensuring that the correct service processes the additional data. It is always required to direct the pass_through data accurately.
   */
  serviceId: string;
  /**
   * An optional string identifier for a specific workflow operation that the pass_through data should target. This is particularly useful in scenarios where a single API call triggers multiple downstream requests, allowing precise control over which operation receives the data.
   */
  operationId?: string | undefined;
  /**
   * An object that allows for direct extension with any properties, providing a flexible structure for additional data. This can be used to include custom fields or configurations that are not predefined, adapting the response to specific needs.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications via specified paths. This allows developers to apply precise changes or additions to the data structure, facilitating complex integrations or custom workflows.
   */
  extendPaths?: Array<ListUsersResponseExtendPaths> | undefined;
};

export type ListUsersResponseData = {
  /**
   * A unique string identifier assigned to each user within the CRM system. This ID is crucial for distinguishing between different users and is used in various operations to reference specific user records. It is typically a non-empty string when a user is present in the system.
   */
  id?: string | undefined;
  /**
   * The identifier of the parent user, if applicable, indicating a hierarchical relationship within the CRM. This field is useful for understanding user roles and relationships, especially in organizations with complex structures. It is a string value that may be empty if no parent relationship exists.
   */
  parentId?: string | null | undefined;
  /**
   * The username associated with the user, used for login and identification purposes within the CRM. This string value is unique to each user and is essential for authentication and user management processes. It is typically a non-empty string for active users.
   */
  username?: string | null | undefined;
  /**
   * The first name of the user, representing their given name as stored in the CRM. This string value is used in user interfaces and communications to personalize interactions. It is generally a non-empty string for users with complete profiles.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the user as recorded in the CRM system. This field is optional and may be empty if the last name is not provided. It is used to identify and display user information in applications that integrate with the CRM.
   */
  lastName?: string | null | undefined;
  /**
   * The job title of the user within their organization. This string field provides insight into the user's role and responsibilities, and is useful for applications that need to display or categorize users based on their professional titles.
   */
  title?: string | null | undefined;
  /**
   * The division within the organization where the user is currently assigned. This field helps categorize users into larger organizational units, such as collections of departments, teams, or regions, and is useful for organizational reporting and analysis.
   */
  division?: string | null | undefined;
  /**
   * The department where the user is currently assigned. This field is deprecated in favor of 'department_id' and 'department_name' fields, but it may still appear in responses for backward compatibility. It helps in identifying the user's specific organizational unit.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * The name of the company the user is associated with. This field provides context about the user's employer and is essential for applications that display or process company-related user data. It is returned as a string and may be used in conjunction with other company-specific fields.
   */
  companyName?: string | null | undefined;
  /**
   * A unique identifier assigned to each employee within the company, such as an Employee Number, Employee ID, or Employee Code. This string is used to uniquely identify staff members in the CRM system and can be utilized for tracking and managing employee-related data.
   */
  employeeNumber?: string | null | undefined;
  /**
   * A textual description providing additional details about the user object. This string can include information such as the user's role, responsibilities, or any other relevant notes that help in understanding the user's profile within the CRM system.
   */
  description?: string | null | undefined;
  /**
   * The URL pointing to the user's avatar image. This string should be a valid URL and is used to visually represent the user in the CRM interface or any integrated applications.
   */
  image?: string | null | undefined;
  /**
   * The language code representing the user's preferred language, formatted according to ISO 639-1 standards (e.g., 'EN' for English). This string helps in localizing content and communications for the user within the CRM system.
   */
  language?: string | null | undefined;
  /**
   * The current status of the user within the CRM system, such as 'active', 'inactive', or 'pending'. This string indicates the user's availability or engagement level and can be used to filter or manage user interactions.
   */
  status?: string | null | undefined;
  /**
   * An array containing the user's addresses. Each address is represented as an object within the array, allowing for multiple addresses to be associated with a single user. This structure supports detailed address information, including type and specific address strings.
   */
  addresses?: Array<ListUsersResponseAddresses> | undefined;
  /**
   * An array containing the user's phone numbers, each represented as an object with specific details such as ID, country code, and area code. This allows applications to access and display multiple contact numbers associated with a user.
   */
  phoneNumbers?: Array<ListUsersResponsePhoneNumbers> | undefined;
  /**
   * A list of email addresses associated with the user. This array contains multiple email objects, each representing a unique email address used for communication. It is essential for identifying and contacting the user electronically.
   */
  emails: Array<ListUsersResponseEmails>;
  /**
   * Contains any custom mappings configured for the user resource. This object is included when custom mappings are set up, providing additional context or integration-specific data that may be necessary for certain applications.
   */
  customMappings?: ListUsersResponseCustomMappings | null | undefined;
  /**
   * Indicates the date and time when the user's information was last updated in the system. This timestamp is formatted as an ISO 8601 string, allowing developers to track changes and synchronize data efficiently.
   */
  updatedAt?: string | null | undefined;
  /**
   * Represents the date and time when the user account was initially created. Provided as an ISO 8601 formatted string, this field helps in understanding the account's age and history within the CRM system.
   */
  createdAt?: string | null | undefined;
  /**
   * This property contains an array of objects that allow for the inclusion of service-specific custom data or modifications. It is used to pass additional structured data when retrieving user information, enhancing the flexibility of the response. The array format supports multiple entries, each potentially targeting different services or operations.
   */
  passThrough?: Array<ListUsersResponsePassThrough> | undefined;
};

/**
 * An object containing cursor information used for navigating through paginated API responses. It includes pointers to the previous and next pages, facilitating efficient data retrieval across multiple requests.
 */
export type ListUsersResponseCursors = {
  /**
   * A string representing the cursor used to navigate to the previous page of results in the API response. This is useful for paginating through large sets of user data, allowing developers to efficiently access earlier pages of results.
   */
  previous?: string | null | undefined;
  /**
   * A string that indicates the cursor for the current page of results in the API response. This helps developers understand their current position within the paginated data set, ensuring accurate data retrieval.
   */
  current?: string | null | undefined;
  /**
   * A string representing the cursor used to navigate to the next page of results in the API response. This facilitates seamless pagination by allowing developers to move forward through the list of users.
   */
  next?: string | null | undefined;
};

/**
 * An object containing metadata about the response, such as pagination details or request identifiers. This information helps in understanding the context of the response and managing subsequent API calls effectively.
 */
export type ListUsersResponseMeta = {
  /**
   * An integer indicating the number of user records returned in the current page of the response. This helps in understanding the volume of data retrieved and is useful for implementing pagination in client applications.
   */
  itemsOnPage?: number | undefined;
  /**
   * An object containing cursor information used for navigating through paginated API responses. It includes pointers to the previous and next pages, facilitating efficient data retrieval across multiple requests.
   */
  cursors?: ListUsersResponseCursors | undefined;
};

/**
 * An object containing links for navigating between pages of results in the API response. This object typically includes URLs for accessing previous and next pages, aiding in efficient data traversal.
 */
export type ListUsersResponseLinks = {
  /**
   * A string URL that provides a direct link to navigate to the previous page of results in the API response. This link is part of the pagination mechanism, enabling backward navigation through user data.
   */
  previous?: string | null | undefined;
  /**
   * This property contains the URL link to the current page of the user list in the CRM system. It is a string formatted as a standard URL, allowing developers to easily access the current set of user data being viewed. This link is particularly useful for maintaining the current state in paginated responses.
   */
  current?: string | undefined;
  /**
   * This property provides the URL link to the next page of the user list in the CRM system. It is formatted as a string URL, enabling seamless navigation to subsequent pages of user data. This link is essential for applications implementing pagination to efficiently load additional user records.
   */
  next?: string | null | undefined;
};

/**
 * Users
 */
export type ListUsersResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value helps determine if the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is essential for error handling and debugging.
   */
  statusCode: number;
  /**
   * A string representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for an error. This provides a human-readable explanation of the status code and is useful for logging and user feedback.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the user data is retrieved. This string uniquely identifies the service within the Apideck ecosystem, ensuring that the correct integration is accessed.
   */
  service: string;
  /**
   * The name of the unified API resource being accessed, such as 'users'. This string indicates the type of data returned by the API and is crucial for understanding the context of the response.
   */
  resource: string;
  /**
   * The specific operation performed by the API, in this case, 'usersAll'. This string helps identify the action taken, which is useful for tracking and auditing API usage.
   */
  operation: string;
  /**
   * An array containing user objects retrieved from the CRM system. Each object in the array represents a user and includes detailed information such as user ID, username, and personal details. This array is the primary container for user data in the response, allowing applications to iterate over and process each user's information.
   */
  data: Array<ListUsersResponseData>;
  /**
   * An object containing metadata about the response, such as pagination details or request identifiers. This information helps in understanding the context of the response and managing subsequent API calls effectively.
   */
  meta?: ListUsersResponseMeta | undefined;
  /**
   * An object containing links for navigating between pages of results in the API response. This object typically includes URLs for accessing previous and next pages, aiding in efficient data traversal.
   */
  links?: ListUsersResponseLinks | undefined;
};

/** @internal */
export const ListUsersResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseType
> = z.nativeEnum(ListUsersResponseType);

/** @internal */
export const ListUsersResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseType
> = ListUsersResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseType$ {
  /** @deprecated use `ListUsersResponseType$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseType$inboundSchema;
  /** @deprecated use `ListUsersResponseType$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseType$outboundSchema;
}

/** @internal */
export const ListUsersResponseAddresses$inboundSchema: z.ZodType<
  ListUsersResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListUsersResponseType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ListUsersResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ListUsersResponseAddresses$outboundSchema: z.ZodType<
  ListUsersResponseAddresses$Outbound,
  z.ZodTypeDef,
  ListUsersResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListUsersResponseType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseAddresses$ {
  /** @deprecated use `ListUsersResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseAddresses$inboundSchema;
  /** @deprecated use `ListUsersResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseAddresses$outboundSchema;
  /** @deprecated use `ListUsersResponseAddresses$Outbound` instead. */
  export type Outbound = ListUsersResponseAddresses$Outbound;
}

export function listUsersResponseAddressesToJSON(
  listUsersResponseAddresses: ListUsersResponseAddresses,
): string {
  return JSON.stringify(
    ListUsersResponseAddresses$outboundSchema.parse(listUsersResponseAddresses),
  );
}

export function listUsersResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseAddresses' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseDataType
> = z.nativeEnum(ListUsersResponseDataType);

/** @internal */
export const ListUsersResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseDataType
> = ListUsersResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseDataType$ {
  /** @deprecated use `ListUsersResponseDataType$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseDataType$inboundSchema;
  /** @deprecated use `ListUsersResponseDataType$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseDataType$outboundSchema;
}

/** @internal */
export const ListUsersResponsePhoneNumbers$inboundSchema: z.ZodType<
  ListUsersResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListUsersResponseDataType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ListUsersResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ListUsersResponsePhoneNumbers$outboundSchema: z.ZodType<
  ListUsersResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  ListUsersResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListUsersResponseDataType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponsePhoneNumbers$ {
  /** @deprecated use `ListUsersResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `ListUsersResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `ListUsersResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = ListUsersResponsePhoneNumbers$Outbound;
}

export function listUsersResponsePhoneNumbersToJSON(
  listUsersResponsePhoneNumbers: ListUsersResponsePhoneNumbers,
): string {
  return JSON.stringify(
    ListUsersResponsePhoneNumbers$outboundSchema.parse(
      listUsersResponsePhoneNumbers,
    ),
  );
}

export function listUsersResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseDataEmailsType
> = z.nativeEnum(ListUsersResponseDataEmailsType);

/** @internal */
export const ListUsersResponseDataEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof ListUsersResponseDataEmailsType
> = ListUsersResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseDataEmailsType$ {
  /** @deprecated use `ListUsersResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseDataEmailsType$inboundSchema;
  /** @deprecated use `ListUsersResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const ListUsersResponseEmails$inboundSchema: z.ZodType<
  ListUsersResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListUsersResponseDataEmailsType$inboundSchema).optional(),
});

/** @internal */
export type ListUsersResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ListUsersResponseEmails$outboundSchema: z.ZodType<
  ListUsersResponseEmails$Outbound,
  z.ZodTypeDef,
  ListUsersResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListUsersResponseDataEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseEmails$ {
  /** @deprecated use `ListUsersResponseEmails$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseEmails$inboundSchema;
  /** @deprecated use `ListUsersResponseEmails$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseEmails$outboundSchema;
  /** @deprecated use `ListUsersResponseEmails$Outbound` instead. */
  export type Outbound = ListUsersResponseEmails$Outbound;
}

export function listUsersResponseEmailsToJSON(
  listUsersResponseEmails: ListUsersResponseEmails,
): string {
  return JSON.stringify(
    ListUsersResponseEmails$outboundSchema.parse(listUsersResponseEmails),
  );
}

export function listUsersResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseEmails' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseCustomMappings$inboundSchema: z.ZodType<
  ListUsersResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListUsersResponseCustomMappings$Outbound = {};

/** @internal */
export const ListUsersResponseCustomMappings$outboundSchema: z.ZodType<
  ListUsersResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  ListUsersResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseCustomMappings$ {
  /** @deprecated use `ListUsersResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseCustomMappings$inboundSchema;
  /** @deprecated use `ListUsersResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseCustomMappings$outboundSchema;
  /** @deprecated use `ListUsersResponseCustomMappings$Outbound` instead. */
  export type Outbound = ListUsersResponseCustomMappings$Outbound;
}

export function listUsersResponseCustomMappingsToJSON(
  listUsersResponseCustomMappings: ListUsersResponseCustomMappings,
): string {
  return JSON.stringify(
    ListUsersResponseCustomMappings$outboundSchema.parse(
      listUsersResponseCustomMappings,
    ),
  );
}

export function listUsersResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseExtendPaths$inboundSchema: z.ZodType<
  ListUsersResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListUsersResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListUsersResponseExtendPaths$outboundSchema: z.ZodType<
  ListUsersResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListUsersResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseExtendPaths$ {
  /** @deprecated use `ListUsersResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListUsersResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListUsersResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListUsersResponseExtendPaths$Outbound;
}

export function listUsersResponseExtendPathsToJSON(
  listUsersResponseExtendPaths: ListUsersResponseExtendPaths,
): string {
  return JSON.stringify(
    ListUsersResponseExtendPaths$outboundSchema.parse(
      listUsersResponseExtendPaths,
    ),
  );
}

export function listUsersResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListUsersResponsePassThrough$inboundSchema: z.ZodType<
  ListUsersResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListUsersResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListUsersResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListUsersResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListUsersResponsePassThrough$outboundSchema: z.ZodType<
  ListUsersResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListUsersResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListUsersResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponsePassThrough$ {
  /** @deprecated use `ListUsersResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponsePassThrough$inboundSchema;
  /** @deprecated use `ListUsersResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponsePassThrough$outboundSchema;
  /** @deprecated use `ListUsersResponsePassThrough$Outbound` instead. */
  export type Outbound = ListUsersResponsePassThrough$Outbound;
}

export function listUsersResponsePassThroughToJSON(
  listUsersResponsePassThrough: ListUsersResponsePassThrough,
): string {
  return JSON.stringify(
    ListUsersResponsePassThrough$outboundSchema.parse(
      listUsersResponsePassThrough,
    ),
  );
}

export function listUsersResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseData$inboundSchema: z.ZodType<
  ListUsersResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  parent_id: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employee_number: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => ListUsersResponseAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => ListUsersResponsePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => ListUsersResponseEmails$inboundSchema)),
  custom_mappings: z.nullable(
    z.lazy(() => ListUsersResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => ListUsersResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "first_name": "firstName",
    "last_name": "lastName",
    "company_name": "companyName",
    "employee_number": "employeeNumber",
    "phone_numbers": "phoneNumbers",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ListUsersResponseData$Outbound = {
  id?: string | undefined;
  parent_id?: string | null | undefined;
  username?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  title?: string | null | undefined;
  division?: string | null | undefined;
  department?: string | null | undefined;
  company_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  addresses?: Array<ListUsersResponseAddresses$Outbound> | undefined;
  phone_numbers?: Array<ListUsersResponsePhoneNumbers$Outbound> | undefined;
  emails: Array<ListUsersResponseEmails$Outbound>;
  custom_mappings?: ListUsersResponseCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ListUsersResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const ListUsersResponseData$outboundSchema: z.ZodType<
  ListUsersResponseData$Outbound,
  z.ZodTypeDef,
  ListUsersResponseData
> = z.object({
  id: z.string().optional(),
  parentId: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => ListUsersResponseAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => ListUsersResponsePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => ListUsersResponseEmails$outboundSchema)),
  customMappings: z.nullable(
    z.lazy(() => ListUsersResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => ListUsersResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    firstName: "first_name",
    lastName: "last_name",
    companyName: "company_name",
    employeeNumber: "employee_number",
    phoneNumbers: "phone_numbers",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseData$ {
  /** @deprecated use `ListUsersResponseData$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseData$inboundSchema;
  /** @deprecated use `ListUsersResponseData$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseData$outboundSchema;
  /** @deprecated use `ListUsersResponseData$Outbound` instead. */
  export type Outbound = ListUsersResponseData$Outbound;
}

export function listUsersResponseDataToJSON(
  listUsersResponseData: ListUsersResponseData,
): string {
  return JSON.stringify(
    ListUsersResponseData$outboundSchema.parse(listUsersResponseData),
  );
}

export function listUsersResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseData' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseCursors$inboundSchema: z.ZodType<
  ListUsersResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListUsersResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListUsersResponseCursors$outboundSchema: z.ZodType<
  ListUsersResponseCursors$Outbound,
  z.ZodTypeDef,
  ListUsersResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseCursors$ {
  /** @deprecated use `ListUsersResponseCursors$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseCursors$inboundSchema;
  /** @deprecated use `ListUsersResponseCursors$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseCursors$outboundSchema;
  /** @deprecated use `ListUsersResponseCursors$Outbound` instead. */
  export type Outbound = ListUsersResponseCursors$Outbound;
}

export function listUsersResponseCursorsToJSON(
  listUsersResponseCursors: ListUsersResponseCursors,
): string {
  return JSON.stringify(
    ListUsersResponseCursors$outboundSchema.parse(listUsersResponseCursors),
  );
}

export function listUsersResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseCursors' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseMeta$inboundSchema: z.ZodType<
  ListUsersResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ListUsersResponseCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ListUsersResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ListUsersResponseCursors$Outbound | undefined;
};

/** @internal */
export const ListUsersResponseMeta$outboundSchema: z.ZodType<
  ListUsersResponseMeta$Outbound,
  z.ZodTypeDef,
  ListUsersResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ListUsersResponseCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseMeta$ {
  /** @deprecated use `ListUsersResponseMeta$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseMeta$inboundSchema;
  /** @deprecated use `ListUsersResponseMeta$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseMeta$outboundSchema;
  /** @deprecated use `ListUsersResponseMeta$Outbound` instead. */
  export type Outbound = ListUsersResponseMeta$Outbound;
}

export function listUsersResponseMetaToJSON(
  listUsersResponseMeta: ListUsersResponseMeta,
): string {
  return JSON.stringify(
    ListUsersResponseMeta$outboundSchema.parse(listUsersResponseMeta),
  );
}

export function listUsersResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseMeta' from JSON`,
  );
}

/** @internal */
export const ListUsersResponseLinks$inboundSchema: z.ZodType<
  ListUsersResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListUsersResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListUsersResponseLinks$outboundSchema: z.ZodType<
  ListUsersResponseLinks$Outbound,
  z.ZodTypeDef,
  ListUsersResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponseLinks$ {
  /** @deprecated use `ListUsersResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponseLinks$inboundSchema;
  /** @deprecated use `ListUsersResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponseLinks$outboundSchema;
  /** @deprecated use `ListUsersResponseLinks$Outbound` instead. */
  export type Outbound = ListUsersResponseLinks$Outbound;
}

export function listUsersResponseLinksToJSON(
  listUsersResponseLinks: ListUsersResponseLinks,
): string {
  return JSON.stringify(
    ListUsersResponseLinks$outboundSchema.parse(listUsersResponseLinks),
  );
}

export function listUsersResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponseLinks' from JSON`,
  );
}

/** @internal */
export const ListUsersResponse$inboundSchema: z.ZodType<
  ListUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListUsersResponseData$inboundSchema)),
  meta: z.lazy(() => ListUsersResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => ListUsersResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListUsersResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ListUsersResponseData$Outbound>;
  meta?: ListUsersResponseMeta$Outbound | undefined;
  links?: ListUsersResponseLinks$Outbound | undefined;
};

/** @internal */
export const ListUsersResponse$outboundSchema: z.ZodType<
  ListUsersResponse$Outbound,
  z.ZodTypeDef,
  ListUsersResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListUsersResponseData$outboundSchema)),
  meta: z.lazy(() => ListUsersResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => ListUsersResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUsersResponse$ {
  /** @deprecated use `ListUsersResponse$inboundSchema` instead. */
  export const inboundSchema = ListUsersResponse$inboundSchema;
  /** @deprecated use `ListUsersResponse$outboundSchema` instead. */
  export const outboundSchema = ListUsersResponse$outboundSchema;
  /** @deprecated use `ListUsersResponse$Outbound` instead. */
  export type Outbound = ListUsersResponse$Outbound;
}

export function listUsersResponseToJSON(
  listUsersResponse: ListUsersResponse,
): string {
  return JSON.stringify(
    ListUsersResponse$outboundSchema.parse(listUsersResponse),
  );
}

export function listUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUsersResponse' from JSON`,
  );
}
