/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains details about the newly created note in the CRM system. It includes essential information such as the unique identifier of the note, confirming its successful addition. The structure is typically a JSON object encapsulating various attributes of the note.
 */
export type CreateNoteResponseUnifiedId = {
  /**
   * The unique identifier assigned to the note that was just created in the CRM system. This ID is a string and serves as a reference to access or manage the note in future operations. It confirms the successful creation of the note and is crucial for any subsequent API interactions involving this specific note.
   */
  id: string;
};

/**
 * Note created
 */
export type CreateNoteResponse = {
  /**
   * The HTTP response status code indicating the result of the POST request to add a new note. A successful operation will return a 201 status code, confirming that the note has been successfully created in the CRM system. This integer value helps developers understand the outcome of their API call.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'Created' for a successful note addition. This string provides a human-readable confirmation of the operation's result, complementing the numeric status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for this operation. This string identifies which service provider was involved in processing the note addition, crucial for environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the unified API resource, in this case, 'notes', indicating the type of resource that was affected by the operation. This string helps developers understand the context of the API call within the broader CRM system.
   */
  resource: string;
  /**
   * The specific operation performed, such as 'notesAdd', indicating that a new note was added to the CRM. This string provides clarity on the action taken by the API call, useful for logging and debugging purposes.
   */
  operation: string;
  /**
   * This object contains details about the newly created note in the CRM system. It includes essential information such as the unique identifier of the note, confirming its successful addition. The structure is typically a JSON object encapsulating various attributes of the note.
   */
  data: CreateNoteResponseUnifiedId;
};

/** @internal */
export const CreateNoteResponseUnifiedId$inboundSchema: z.ZodType<
  CreateNoteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateNoteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateNoteResponseUnifiedId$outboundSchema: z.ZodType<
  CreateNoteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateNoteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateNoteResponseUnifiedId$ {
  /** @deprecated use `CreateNoteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateNoteResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateNoteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CreateNoteResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateNoteResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateNoteResponseUnifiedId$Outbound;
}

export function createNoteResponseUnifiedIdToJSON(
  createNoteResponseUnifiedId: CreateNoteResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateNoteResponseUnifiedId$outboundSchema.parse(
      createNoteResponseUnifiedId,
    ),
  );
}

export function createNoteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateNoteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateNoteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateNoteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateNoteResponse$inboundSchema: z.ZodType<
  CreateNoteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateNoteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateNoteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateNoteResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateNoteResponse$outboundSchema: z.ZodType<
  CreateNoteResponse$Outbound,
  z.ZodTypeDef,
  CreateNoteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateNoteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateNoteResponse$ {
  /** @deprecated use `CreateNoteResponse$inboundSchema` instead. */
  export const inboundSchema = CreateNoteResponse$inboundSchema;
  /** @deprecated use `CreateNoteResponse$outboundSchema` instead. */
  export const outboundSchema = CreateNoteResponse$outboundSchema;
  /** @deprecated use `CreateNoteResponse$Outbound` instead. */
  export type Outbound = CreateNoteResponse$Outbound;
}

export function createNoteResponseToJSON(
  createNoteResponse: CreateNoteResponse,
): string {
  return JSON.stringify(
    CreateNoteResponse$outboundSchema.parse(createNoteResponse),
  );
}

export function createNoteResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateNoteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateNoteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateNoteResponse' from JSON`,
  );
}
