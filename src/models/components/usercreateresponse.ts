/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The 'data' object serves as the primary container for the response payload, encapsulating all relevant information about the newly created user. This object is always included in the response when a user is successfully added to the CRM system, ensuring that the client receives a structured and comprehensive set of details about the operation's outcome.
 */
export type UserCreateResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * User created
 */
export type UserCreateResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the HTTP request made to the '/crm/users' endpoint. A status code of 201 signifies that the user has been successfully created in the CRM system. This property is always included in the response to provide immediate feedback on the request's outcome.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'Created' for a 201 status code. It helps in understanding the result of the operation without needing to interpret numeric codes. This property is always included to ensure clarity in the response.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for this operation. This string uniquely identifies which service provider was engaged to process the 'usersAdd' request. It is crucial when multiple service integrations are active, helping to trace the source of the response. This property is always included to confirm the service handling the request.
   */
  service: string;
  /**
   * The name of the Unified API resource involved in the operation. This string indicates the specific resource within the Apideck ecosystem that was targeted by the request, such as 'users' in this context. It helps in identifying the type of resource that was affected by the operation. This property is always included to specify the resource context of the response.
   */
  resource: string;
  /**
   * The specific operation performed as part of the request. This string describes the action taken, such as 'add' in the context of adding a new user. It provides clarity on what change was attempted or completed in the CRM system. This property is always included to detail the nature of the operation executed.
   */
  operation: string;
  /**
   * The 'data' object serves as the primary container for the response payload, encapsulating all relevant information about the newly created user. This object is always included in the response when a user is successfully added to the CRM system, ensuring that the client receives a structured and comprehensive set of details about the operation's outcome.
   */
  data: UserCreateResponseUnifiedId;
};

/** @internal */
export const UserCreateResponseUnifiedId$inboundSchema: z.ZodType<
  UserCreateResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UserCreateResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UserCreateResponseUnifiedId$outboundSchema: z.ZodType<
  UserCreateResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UserCreateResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserCreateResponseUnifiedId$ {
  /** @deprecated use `UserCreateResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UserCreateResponseUnifiedId$inboundSchema;
  /** @deprecated use `UserCreateResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UserCreateResponseUnifiedId$outboundSchema;
  /** @deprecated use `UserCreateResponseUnifiedId$Outbound` instead. */
  export type Outbound = UserCreateResponseUnifiedId$Outbound;
}

export function userCreateResponseUnifiedIdToJSON(
  userCreateResponseUnifiedId: UserCreateResponseUnifiedId,
): string {
  return JSON.stringify(
    UserCreateResponseUnifiedId$outboundSchema.parse(
      userCreateResponseUnifiedId,
    ),
  );
}

export function userCreateResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UserCreateResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserCreateResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserCreateResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UserCreateResponse$inboundSchema: z.ZodType<
  UserCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UserCreateResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UserCreateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UserCreateResponseUnifiedId$Outbound;
};

/** @internal */
export const UserCreateResponse$outboundSchema: z.ZodType<
  UserCreateResponse$Outbound,
  z.ZodTypeDef,
  UserCreateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UserCreateResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserCreateResponse$ {
  /** @deprecated use `UserCreateResponse$inboundSchema` instead. */
  export const inboundSchema = UserCreateResponse$inboundSchema;
  /** @deprecated use `UserCreateResponse$outboundSchema` instead. */
  export const outboundSchema = UserCreateResponse$outboundSchema;
  /** @deprecated use `UserCreateResponse$Outbound` instead. */
  export type Outbound = UserCreateResponse$Outbound;
}

export function userCreateResponseToJSON(
  userCreateResponse: UserCreateResponse,
): string {
  return JSON.stringify(
    UserCreateResponse$outboundSchema.parse(userCreateResponse),
  );
}

export function userCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserCreateResponse' from JSON`,
  );
}
