/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The main container object that holds all the updated details of the activity record. This object is always included in the response to encapsulate the specific fields that have been modified as a result of the PATCH request. It serves as the primary structure through which the updated state of the activity is communicated back to the client, ensuring that the client has a complete and accurate representation of the activity post-update.
 */
export type ActivityUpdateResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Activity updated
 */
export type ActivityUpdateResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the PATCH request to update an activity record. A status code of 200 signifies a successful update, confirming that the changes have been applied to the specified activity. This code is crucial for error handling and debugging, as it helps determine the outcome of the request and guides subsequent actions.
   */
  statusCode: number;
  /**
   * The HTTP response status message accompanying the status code. This string provides a textual representation of the status code, such as 'OK' for a successful request. It offers a human-readable explanation of the response, aiding developers in understanding the result of the operation. This message is particularly useful in logging and debugging processes.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which third-party service (e.g., Pipedrive) was targeted by the PATCH request. It is included in the response to confirm the specific integration that processed the update, ensuring transparency and traceability in multi-service environments.
   */
  service: string;
  /**
   * The name of the unified API resource that was accessed or modified. This string indicates the type of resource, such as 'activity', that the PATCH request was intended to update. It helps in identifying the context of the operation within the broader API ecosystem, ensuring that the correct resource was targeted and modified.
   */
  resource: string;
  /**
   * The specific operation that was performed as part of the request. This string describes the action taken, such as 'update', and confirms that the intended modification was executed. It is included in the response to provide clarity on the nature of the request and to verify that the correct operation was carried out on the specified resource.
   */
  operation: string;
  /**
   * The main container object that holds all the updated details of the activity record. This object is always included in the response to encapsulate the specific fields that have been modified as a result of the PATCH request. It serves as the primary structure through which the updated state of the activity is communicated back to the client, ensuring that the client has a complete and accurate representation of the activity post-update.
   */
  data: ActivityUpdateResponseUnifiedId;
};

/** @internal */
export const ActivityUpdateResponseUnifiedId$inboundSchema: z.ZodType<
  ActivityUpdateResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ActivityUpdateResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ActivityUpdateResponseUnifiedId$outboundSchema: z.ZodType<
  ActivityUpdateResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  ActivityUpdateResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityUpdateResponseUnifiedId$ {
  /** @deprecated use `ActivityUpdateResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ActivityUpdateResponseUnifiedId$inboundSchema;
  /** @deprecated use `ActivityUpdateResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ActivityUpdateResponseUnifiedId$outboundSchema;
  /** @deprecated use `ActivityUpdateResponseUnifiedId$Outbound` instead. */
  export type Outbound = ActivityUpdateResponseUnifiedId$Outbound;
}

export function activityUpdateResponseUnifiedIdToJSON(
  activityUpdateResponseUnifiedId: ActivityUpdateResponseUnifiedId,
): string {
  return JSON.stringify(
    ActivityUpdateResponseUnifiedId$outboundSchema.parse(
      activityUpdateResponseUnifiedId,
    ),
  );
}

export function activityUpdateResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ActivityUpdateResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityUpdateResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityUpdateResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const ActivityUpdateResponse$inboundSchema: z.ZodType<
  ActivityUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivityUpdateResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ActivityUpdateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ActivityUpdateResponseUnifiedId$Outbound;
};

/** @internal */
export const ActivityUpdateResponse$outboundSchema: z.ZodType<
  ActivityUpdateResponse$Outbound,
  z.ZodTypeDef,
  ActivityUpdateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivityUpdateResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityUpdateResponse$ {
  /** @deprecated use `ActivityUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = ActivityUpdateResponse$inboundSchema;
  /** @deprecated use `ActivityUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = ActivityUpdateResponse$outboundSchema;
  /** @deprecated use `ActivityUpdateResponse$Outbound` instead. */
  export type Outbound = ActivityUpdateResponse$Outbound;
}

export function activityUpdateResponseToJSON(
  activityUpdateResponse: ActivityUpdateResponse,
): string {
  return JSON.stringify(
    ActivityUpdateResponse$outboundSchema.parse(activityUpdateResponse),
  );
}

export function activityUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivityUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityUpdateResponse' from JSON`,
  );
}
