/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * Specifies the type of website linked to the lead, such as 'personal', 'business', or 'portfolio'. This optional field helps categorize the website's purpose or function in relation to the lead.
 */
export const LeadType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of website linked to the lead, such as 'personal', 'business', or 'portfolio'. This optional field helps categorize the website's purpose or function in relation to the lead.
 */
export type LeadType = ClosedEnum<typeof LeadType>;

export type LeadWebsites = {
  /**
   * A unique identifier assigned to each website associated with the lead. This ID is used to distinguish between different websites linked to the same lead. It is not required but can be useful for managing multiple website entries.
   */
  id?: string | null | undefined;
  /**
   * The URL of the website associated with the lead. This field is mandatory and should contain a valid web address format (e.g., 'https://example.com'). It provides direct access to the lead's online presence or business site.
   */
  url: string;
  /**
   * Specifies the type of website linked to the lead, such as 'personal', 'business', or 'portfolio'. This optional field helps categorize the website's purpose or function in relation to the lead.
   */
  type?: LeadType | null | undefined;
};

/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the lead's contact information. The value is a string that categorizes the address type, aiding in organizing and filtering addresses in the CRM system.
 */
export const LeadAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the lead's contact information. The value is a string that categorizes the address type, aiding in organizing and filtering addresses in the CRM system.
 */
export type LeadAddressesType = ClosedEnum<typeof LeadAddressesType>;

export type LeadAddresses = {
  /**
   * A unique identifier for each address associated with the lead. This ID helps in differentiating between multiple addresses linked to the same lead, facilitating precise address management.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the lead's contact information. The value is a string that categorizes the address type, aiding in organizing and filtering addresses in the CRM system.
   */
  type?: LeadAddressesType | null | undefined;
  /**
   * Contains the full address as a single string, useful when the API does not provide structured address components. This field is essential for displaying or processing the complete address in applications where structured data is unavailable.
   */
  string?: string | null | undefined;
  /**
   * Represents the name associated with the address, which could be a designation like 'Headquarters' or 'Branch Office'. This helps in identifying the specific location or purpose of the address within the lead's profile.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically including the street number, street name, and any apartment or suite number. This field is crucial for pinpointing the exact location of the address and is often used in conjunction with other address fields for complete address representation.
   */
  line1?: string | null | undefined;
  /**
   * The second line of the address, often used for additional information such as building name, floor, or unit number. This field complements 'line1' to provide a more detailed address, ensuring accurate delivery or location identification.
   */
  line2?: string | null | undefined;
  /**
   * This field contains the third line of the address, which may include additional location details such as a suite or apartment number. It is part of the full address structure and helps in precisely identifying the lead's location. This field is optional and may be omitted if not applicable.
   */
  line3?: string | null | undefined;
  /**
   * This field contains the fourth line of the address, often used for further address details like building or complex names. It complements the other address lines to provide a complete address for the lead. This field is optional and may be omitted if not applicable.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the lead's address, indicating the specific location on a street. This is a crucial part of the address used for precise geolocation and delivery purposes. This field is optional and may be omitted if not applicable.
   */
  streetNumber?: string | null | undefined;
  /**
   * The name of the city where the lead is located. This field is part of the address structure and is essential for identifying the geographical area of the lead. It is optional and may be omitted if not applicable.
   */
  city?: string | null | undefined;
  /**
   * The name of the state or region where the lead is located. This field helps in categorizing the lead's location within a broader geographical context. It is optional and may be omitted if not applicable.
   */
  state?: string | null | undefined;
  /**
   * The postal code associated with the lead's address, typically used for mail delivery and location identification. This string value follows the format specific to the country of the address, aiding in precise geographic targeting and validation within the CRM system.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the lead's address, represented in ISO 3166-1 alpha-2 format. This two-letter string helps identify the country for international leads, ensuring proper regional handling and compliance with global standards.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the lead's address, expressed as a string. This value is crucial for mapping and geolocation services, allowing applications to pinpoint the exact north-south position of the address on the globe.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the lead's address, expressed as a string. This value is essential for mapping and geolocation services, enabling applications to determine the exact east-west position of the address on the globe.
   */
  longitude?: string | null | undefined;
  /**
   * The county or equivalent sublocality of the lead's address, provided as a string. This information is useful for regional analysis and reporting, offering additional granularity beyond city and state levels within the CRM system.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with this address entry. This field helps identify the primary individual to reach out to at the specified location. It is typically formatted as 'First Last' or 'Last, First'.
   */
  contactName?: string | null | undefined;
  /**
   * The formal greeting or title used for the contact person at this address, such as 'Mr.', 'Ms.', or 'Dr.'. This field is used to address the contact person respectfully in communications.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with this address, formatted according to international standards (e.g., '+1-800-555-0123'). This number is used for direct voice communication with the contact person or organization at the address.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to this address, allowing for the transmission of documents via fax machines. It is formatted similarly to phone numbers and is used for sending and receiving faxes.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with this address, used for electronic communication. It follows the standard email format (e.g., 'example@domain.com') and is essential for sending and receiving digital correspondence.
   */
  email?: string | null | undefined;
  /**
   * The website associated with the address of the lead. This field contains the URL in string format, providing a direct link to the lead's online presence. It is optional and may not be present if the lead does not have a website listed.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the address of the lead. This field can include any extra information or comments that are relevant to the address, stored as a string. It is optional and may be used for internal annotations or reminders.
   */
  notes?: string | null | undefined;
  /**
   * A string representing a binary value used for concurrency control. This value is incremented with each update to the address object, helping to detect changes and prevent data conflicts during updates. It is optional and primarily used for data integrity purposes.
   */
  rowVersion?: string | null | undefined;
};

export type LeadSocialLinks = {
  /**
   * A unique identifier for each social link within the array. This string value is used to distinctly identify and manage individual social media profiles associated with the lead. It is optional and is part of the social_links array structure.
   */
  id?: string | null | undefined;
  /**
   * This property contains the URL of a social media link associated with the lead, such as a Twitter profile. The URL should be a valid web address, formatted as a string, and is essential for accessing the lead's social media presence directly from the CRM system.
   */
  url: string;
  /**
   * This property specifies the type of social media platform linked to the lead, such as 'twitter'. It helps categorize the social link and is useful for identifying the platform without parsing the URL. This field is optional and formatted as a string.
   */
  type?: string | null | undefined;
};

/**
 * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This helps categorize the phone number for better contact management.
 */
export const LeadPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This helps categorize the phone number for better contact management.
 */
export type LeadPhoneNumbersType = ClosedEnum<typeof LeadPhoneNumbersType>;

export type LeadPhoneNumbers = {
  /**
   * A unique identifier for each phone number associated with the lead. This ID is crucial for differentiating between multiple phone numbers and managing them individually within the CRM system. It is formatted as a string.
   */
  id?: string | null | undefined;
  /**
   * The country code for the lead's phone number, such as '+1' for the United States. This code is important for international dialing and ensures that the phone number is correctly formatted for global communication. It is represented as a string.
   */
  countryCode?: string | null | undefined;
  /**
   * This property contains the area code of the lead's phone number, typically represented as a three-digit string. It helps identify the geographic region associated with the phone number, which can be crucial for regional marketing strategies or customer segmentation. This field is optional and may not be present if the area code is not applicable or available.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number associated with the lead, excluding the area code and extension. This is a required field and is crucial for direct communication with the lead.
   */
  number: string;
  /**
   * An optional extension number for the phone, used to direct calls to a specific line or department within an organization. This field is not always present.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This helps categorize the phone number for better contact management.
   */
  type?: LeadPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This categorization helps in understanding the context of the email address and its intended use within the lead's profile.
 */
export const LeadEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This categorization helps in understanding the context of the email address and its intended use within the lead's profile.
 */
export type LeadEmailsType = ClosedEnum<typeof LeadEmailsType>;

export type LeadEmails = {
  /**
   * A unique identifier assigned to each email address associated with the lead. This ID is used to distinguish between multiple email addresses linked to the same lead, facilitating precise data management and retrieval.
   */
  id?: string | null | undefined;
  /**
   * The email address of the lead, formatted as a standard email string (e.g., user@example.com). This field is essential for communication and is required for identifying the lead's primary contact method.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work', 'personal', or 'other'. This categorization helps in understanding the context of the email address and its intended use within the lead's profile.
   */
  type?: LeadEmailsType | null | undefined;
};

export type LeadValue6 = {};

export type LeadValue4 = {};

/**
 * The actual data or content stored in the custom field for the lead. This value can vary in format depending on the field's intended use, offering flexibility in capturing lead-specific information.
 */
export type LeadValue =
  | LeadValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadValue6>;

export type LeadCustomFields = {
  /**
   * A unique identifier for each custom field associated with the lead. This ID is crucial for managing and referencing specific custom fields, ensuring accurate data handling and integration.
   */
  id: string | null;
  /**
   * The name of the custom field associated with the lead. This string value helps identify the specific custom attribute that has been defined for the lead, allowing for tailored data management and retrieval.
   */
  name?: string | null | undefined;
  /**
   * A detailed explanation of the custom field's purpose or usage. This string provides context about what the custom field represents, aiding in understanding its role within the lead's data structure.
   */
  description?: string | null | undefined;
  /**
   * The actual data or content stored in the custom field for the lead. This value can vary in format depending on the field's intended use, offering flexibility in capturing lead-specific information.
   */
  value?:
    | LeadValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadValue6>
    | null
    | undefined;
};

/**
 * Contains any custom mappings configured for the lead resource. This object provides additional, customized data fields that may have been set up to tailor the lead information to specific business needs or integrations.
 */
export type LeadCustomMappings = {};

export type LeadExtendPaths = {
  /**
   * This property specifies the JSONPath string that indicates where a value should be applied within the lead's data structure. It is required for defining the exact location for data modification, ensuring that updates are accurately targeted within the JSON response.
   */
  path: string;
  /**
   * This property represents the value to be set at the specified JSONPath. It can be of any data type, allowing for flexible updates to the lead's data. This flexibility supports a wide range of data modifications, from simple updates to complex data transformations.
   */
  value?: any | undefined;
};

export type LeadPassThrough = {
  /**
   * A unique identifier for the service to which the pass_through data should be applied. This ensures that the custom data is directed to the correct service integration, facilitating precise data handling.
   */
  serviceId: string;
  /**
   * This property contains an optional identifier for a specific workflow operation. It is used to apply the pass-through logic to a particular operation, especially useful in scenarios where multiple downstream requests are made in Unify calls. The value should be a string that uniquely identifies the operation within the workflow.
   */
  operationId?: string | undefined;
  /**
   * This property is a flexible object that allows for the direct extension of properties. It can contain any key-value pairs, enabling developers to add custom data or metadata to the lead's details. The structure of this object is not predefined, allowing for maximum customization.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property is an array of objects designed for structured data modifications using specified paths. Each object within the array defines a path and a value, allowing developers to apply precise changes to the lead's data structure. This is particularly useful for integrating or transforming data within the CRM system.
   */
  extendPaths?: Array<LeadExtendPaths> | undefined;
};

/**
 * This object contains all the detailed information about the lead retrieved from the CRM system. It serves as the primary container for the lead's data, including identifiers, names, and associated company details. The structure of this object allows developers to access specific attributes of the lead efficiently.
 */
export type Lead = {
  /**
   * A unique string identifier for the lead within the CRM system. This ID is used to reference the lead in subsequent API calls or database queries, ensuring precise identification and retrieval of the lead's information.
   */
  id?: string | undefined;
  /**
   * The full name of the lead, which is essential for identification and communication purposes. This string value is typically used in user interfaces and reports to display the lead's identity clearly.
   */
  name: string;
  /**
   * The name of the company with which the lead is associated. This string provides context about the lead's business environment and is crucial for understanding the lead's professional background and potential business opportunities.
   */
  companyName: string | null;
  /**
   * The unique identifier of the user or entity that owns or manages the lead within the CRM system. This ID helps in assigning responsibility and tracking interactions with the lead, facilitating effective lead management.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the owner of the lead. This field contains the full name of the individual responsible for managing the lead within the CRM system. It helps identify who is accountable for the lead's progress and interactions.
   */
  ownerName?: string | null | undefined;
  /**
   * The unique identifier of the company associated with the lead. This string value links the lead to its respective company record in the CRM, facilitating the retrieval of company-specific information and ensuring accurate association between leads and companies.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier assigned to the lead within the CRM system. This string is crucial for retrieving and managing the lead's details, ensuring that each lead can be distinctly accessed and referenced in operations.
   */
  leadId?: string | null | undefined;
  /**
   * The origin or method through which the lead was acquired. This field provides insight into the lead's source, such as marketing campaigns or referrals, helping to track the effectiveness of different lead generation strategies.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead. This field contains the given name of the individual lead, which is used for personalization and identification purposes in communications and CRM records.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead, representing the family name or surname. This field is part of the lead's personal identification details and is used in conjunction with other name fields to uniquely identify the lead within the CRM system.
   */
  lastName?: string | null | undefined;
  /**
   * A brief narrative or summary about the lead, providing additional context or notes that may be relevant for sales or marketing purposes. This field can include information such as the lead's interests, background, or any specific requirements they may have.
   */
  description?: string | null | undefined;
  /**
   * The prefix of the lead's name, such as Mr., Ms., Dr., etc. This field is used to address the lead appropriately in communications and is part of the lead's full name details.
   */
  prefix?: string | null | undefined;
  /**
   * The job title of the lead, indicating their professional role or position within their organization. This information is useful for understanding the lead's responsibilities and potential influence in decision-making processes.
   */
  title?: string | null | undefined;
  /**
   * The language code of the lead, formatted according to ISO 639-1 standards (e.g., 'EN' for English). This field helps in tailoring communication and content to the lead's preferred language, enhancing engagement and understanding.
   */
  language?: string | null | undefined;
  /**
   * The current status of the lead within the CRM system. This field indicates the lead's progress or state, such as 'new', 'contacted', or 'qualified', and helps in tracking the lead's journey through the sales pipeline.
   */
  status?: string | null | undefined;
  /**
   * The total monetary value associated with the lead, expressed as a numeric value. This amount represents potential revenue or investment linked to the lead, aiding in financial forecasting and analysis.
   */
  monetaryAmount?: number | null | undefined;
  currency?: Currency | null | undefined;
  /**
   * The fax number provided for the lead, formatted as a string. This contact detail can be used for sending documents or communications via fax, complementing other contact methods like phone and email.
   */
  fax?: string | null | undefined;
  /**
   * An array of website URLs associated with the lead. These URLs provide additional online resources or information related to the lead, such as personal or company websites, enhancing the context and background information available for the lead.
   */
  websites?: Array<LeadWebsites> | undefined;
  /**
   * An array containing address objects related to the lead. Each object within the array represents a distinct address, providing comprehensive location details for the lead. This field is optional and can include multiple addresses if applicable.
   */
  addresses?: Array<LeadAddresses> | undefined;
  /**
   * An array containing the social media links associated with the lead. Each entry in the array represents a different social media profile, providing a comprehensive view of the lead's online social presence. This field is optional and may be empty if no social links are available.
   */
  socialLinks?: Array<LeadSocialLinks> | undefined;
  /**
   * An array containing the lead's phone numbers, each represented as an object with specific details. This collection allows for multiple contact numbers to be associated with a single lead, facilitating comprehensive communication options.
   */
  phoneNumbers?: Array<LeadPhoneNumbers> | undefined;
  /**
   * A list of email addresses associated with the lead. This array can contain multiple email entries, allowing for comprehensive contact options.
   */
  emails?: Array<LeadEmails> | undefined;
  /**
   * An array of custom fields that provide additional, user-defined information about the lead. These fields allow for extended customization and flexibility in capturing lead-specific data that may not be covered by standard fields.
   */
  customFields?: Array<LeadCustomFields> | undefined;
  /**
   * An array of tags associated with the lead, each representing a keyword or label that categorizes or describes the lead. These tags facilitate easy filtering and organization of leads within the CRM system.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Contains any custom mappings configured for the lead resource. This object provides additional, customized data fields that may have been set up to tailor the lead information to specific business needs or integrations.
   */
  customMappings?: LeadCustomMappings | null | undefined;
  /**
   * The timestamp indicating when the lead's information was last updated, formatted in ISO 8601. This helps track changes and ensure the data's currency within the CRM system.
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp indicating when the lead was initially created, formatted in ISO 8601. This provides a historical reference for when the lead entered the CRM system.
   */
  createdAt?: string | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or modifications when creating or updating lead resources. This feature supports advanced customization and integration with specific services.
   */
  passThrough?: Array<LeadPassThrough> | undefined;
};

/** @internal */
export const LeadType$inboundSchema: z.ZodNativeEnum<typeof LeadType> = z
  .nativeEnum(LeadType);

/** @internal */
export const LeadType$outboundSchema: z.ZodNativeEnum<typeof LeadType> =
  LeadType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadType$ {
  /** @deprecated use `LeadType$inboundSchema` instead. */
  export const inboundSchema = LeadType$inboundSchema;
  /** @deprecated use `LeadType$outboundSchema` instead. */
  export const outboundSchema = LeadType$outboundSchema;
}

/** @internal */
export const LeadWebsites$inboundSchema: z.ZodType<
  LeadWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadType$inboundSchema).optional(),
});

/** @internal */
export type LeadWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadWebsites$outboundSchema: z.ZodType<
  LeadWebsites$Outbound,
  z.ZodTypeDef,
  LeadWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadWebsites$ {
  /** @deprecated use `LeadWebsites$inboundSchema` instead. */
  export const inboundSchema = LeadWebsites$inboundSchema;
  /** @deprecated use `LeadWebsites$outboundSchema` instead. */
  export const outboundSchema = LeadWebsites$outboundSchema;
  /** @deprecated use `LeadWebsites$Outbound` instead. */
  export type Outbound = LeadWebsites$Outbound;
}

export function leadWebsitesToJSON(leadWebsites: LeadWebsites): string {
  return JSON.stringify(LeadWebsites$outboundSchema.parse(leadWebsites));
}

export function leadWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<LeadWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadWebsites' from JSON`,
  );
}

/** @internal */
export const LeadAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof LeadAddressesType
> = z.nativeEnum(LeadAddressesType);

/** @internal */
export const LeadAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof LeadAddressesType
> = LeadAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadAddressesType$ {
  /** @deprecated use `LeadAddressesType$inboundSchema` instead. */
  export const inboundSchema = LeadAddressesType$inboundSchema;
  /** @deprecated use `LeadAddressesType$outboundSchema` instead. */
  export const outboundSchema = LeadAddressesType$outboundSchema;
}

/** @internal */
export const LeadAddresses$inboundSchema: z.ZodType<
  LeadAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type LeadAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const LeadAddresses$outboundSchema: z.ZodType<
  LeadAddresses$Outbound,
  z.ZodTypeDef,
  LeadAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadAddresses$ {
  /** @deprecated use `LeadAddresses$inboundSchema` instead. */
  export const inboundSchema = LeadAddresses$inboundSchema;
  /** @deprecated use `LeadAddresses$outboundSchema` instead. */
  export const outboundSchema = LeadAddresses$outboundSchema;
  /** @deprecated use `LeadAddresses$Outbound` instead. */
  export type Outbound = LeadAddresses$Outbound;
}

export function leadAddressesToJSON(leadAddresses: LeadAddresses): string {
  return JSON.stringify(LeadAddresses$outboundSchema.parse(leadAddresses));
}

export function leadAddressesFromJSON(
  jsonString: string,
): SafeParseResult<LeadAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadAddresses' from JSON`,
  );
}

/** @internal */
export const LeadSocialLinks$inboundSchema: z.ZodType<
  LeadSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type LeadSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadSocialLinks$outboundSchema: z.ZodType<
  LeadSocialLinks$Outbound,
  z.ZodTypeDef,
  LeadSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadSocialLinks$ {
  /** @deprecated use `LeadSocialLinks$inboundSchema` instead. */
  export const inboundSchema = LeadSocialLinks$inboundSchema;
  /** @deprecated use `LeadSocialLinks$outboundSchema` instead. */
  export const outboundSchema = LeadSocialLinks$outboundSchema;
  /** @deprecated use `LeadSocialLinks$Outbound` instead. */
  export type Outbound = LeadSocialLinks$Outbound;
}

export function leadSocialLinksToJSON(
  leadSocialLinks: LeadSocialLinks,
): string {
  return JSON.stringify(LeadSocialLinks$outboundSchema.parse(leadSocialLinks));
}

export function leadSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<LeadSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadSocialLinks' from JSON`,
  );
}

/** @internal */
export const LeadPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof LeadPhoneNumbersType
> = z.nativeEnum(LeadPhoneNumbersType);

/** @internal */
export const LeadPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof LeadPhoneNumbersType
> = LeadPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadPhoneNumbersType$ {
  /** @deprecated use `LeadPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = LeadPhoneNumbersType$inboundSchema;
  /** @deprecated use `LeadPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema = LeadPhoneNumbersType$outboundSchema;
}

/** @internal */
export const LeadPhoneNumbers$inboundSchema: z.ZodType<
  LeadPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type LeadPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const LeadPhoneNumbers$outboundSchema: z.ZodType<
  LeadPhoneNumbers$Outbound,
  z.ZodTypeDef,
  LeadPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadPhoneNumbers$ {
  /** @deprecated use `LeadPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = LeadPhoneNumbers$inboundSchema;
  /** @deprecated use `LeadPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = LeadPhoneNumbers$outboundSchema;
  /** @deprecated use `LeadPhoneNumbers$Outbound` instead. */
  export type Outbound = LeadPhoneNumbers$Outbound;
}

export function leadPhoneNumbersToJSON(
  leadPhoneNumbers: LeadPhoneNumbers,
): string {
  return JSON.stringify(
    LeadPhoneNumbers$outboundSchema.parse(leadPhoneNumbers),
  );
}

export function leadPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<LeadPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const LeadEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof LeadEmailsType
> = z.nativeEnum(LeadEmailsType);

/** @internal */
export const LeadEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof LeadEmailsType
> = LeadEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadEmailsType$ {
  /** @deprecated use `LeadEmailsType$inboundSchema` instead. */
  export const inboundSchema = LeadEmailsType$inboundSchema;
  /** @deprecated use `LeadEmailsType$outboundSchema` instead. */
  export const outboundSchema = LeadEmailsType$outboundSchema;
}

/** @internal */
export const LeadEmails$inboundSchema: z.ZodType<
  LeadEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadEmailsType$inboundSchema).optional(),
});

/** @internal */
export type LeadEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const LeadEmails$outboundSchema: z.ZodType<
  LeadEmails$Outbound,
  z.ZodTypeDef,
  LeadEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadEmails$ {
  /** @deprecated use `LeadEmails$inboundSchema` instead. */
  export const inboundSchema = LeadEmails$inboundSchema;
  /** @deprecated use `LeadEmails$outboundSchema` instead. */
  export const outboundSchema = LeadEmails$outboundSchema;
  /** @deprecated use `LeadEmails$Outbound` instead. */
  export type Outbound = LeadEmails$Outbound;
}

export function leadEmailsToJSON(leadEmails: LeadEmails): string {
  return JSON.stringify(LeadEmails$outboundSchema.parse(leadEmails));
}

export function leadEmailsFromJSON(
  jsonString: string,
): SafeParseResult<LeadEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadEmails' from JSON`,
  );
}

/** @internal */
export const LeadValue6$inboundSchema: z.ZodType<
  LeadValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadValue6$Outbound = {};

/** @internal */
export const LeadValue6$outboundSchema: z.ZodType<
  LeadValue6$Outbound,
  z.ZodTypeDef,
  LeadValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadValue6$ {
  /** @deprecated use `LeadValue6$inboundSchema` instead. */
  export const inboundSchema = LeadValue6$inboundSchema;
  /** @deprecated use `LeadValue6$outboundSchema` instead. */
  export const outboundSchema = LeadValue6$outboundSchema;
  /** @deprecated use `LeadValue6$Outbound` instead. */
  export type Outbound = LeadValue6$Outbound;
}

export function leadValue6ToJSON(leadValue6: LeadValue6): string {
  return JSON.stringify(LeadValue6$outboundSchema.parse(leadValue6));
}

export function leadValue6FromJSON(
  jsonString: string,
): SafeParseResult<LeadValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadValue6' from JSON`,
  );
}

/** @internal */
export const LeadValue4$inboundSchema: z.ZodType<
  LeadValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadValue4$Outbound = {};

/** @internal */
export const LeadValue4$outboundSchema: z.ZodType<
  LeadValue4$Outbound,
  z.ZodTypeDef,
  LeadValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadValue4$ {
  /** @deprecated use `LeadValue4$inboundSchema` instead. */
  export const inboundSchema = LeadValue4$inboundSchema;
  /** @deprecated use `LeadValue4$outboundSchema` instead. */
  export const outboundSchema = LeadValue4$outboundSchema;
  /** @deprecated use `LeadValue4$Outbound` instead. */
  export type Outbound = LeadValue4$Outbound;
}

export function leadValue4ToJSON(leadValue4: LeadValue4): string {
  return JSON.stringify(LeadValue4$outboundSchema.parse(leadValue4));
}

export function leadValue4FromJSON(
  jsonString: string,
): SafeParseResult<LeadValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadValue4' from JSON`,
  );
}

/** @internal */
export const LeadValue$inboundSchema: z.ZodType<
  LeadValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadValue6$inboundSchema)),
]);

/** @internal */
export type LeadValue$Outbound =
  | LeadValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadValue6$Outbound>;

/** @internal */
export const LeadValue$outboundSchema: z.ZodType<
  LeadValue$Outbound,
  z.ZodTypeDef,
  LeadValue
> = z.union([
  z.lazy(() => LeadValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadValue$ {
  /** @deprecated use `LeadValue$inboundSchema` instead. */
  export const inboundSchema = LeadValue$inboundSchema;
  /** @deprecated use `LeadValue$outboundSchema` instead. */
  export const outboundSchema = LeadValue$outboundSchema;
  /** @deprecated use `LeadValue$Outbound` instead. */
  export type Outbound = LeadValue$Outbound;
}

export function leadValueToJSON(leadValue: LeadValue): string {
  return JSON.stringify(LeadValue$outboundSchema.parse(leadValue));
}

export function leadValueFromJSON(
  jsonString: string,
): SafeParseResult<LeadValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadValue' from JSON`,
  );
}

/** @internal */
export const LeadCustomFields$inboundSchema: z.ZodType<
  LeadCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type LeadCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | LeadValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const LeadCustomFields$outboundSchema: z.ZodType<
  LeadCustomFields$Outbound,
  z.ZodTypeDef,
  LeadCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCustomFields$ {
  /** @deprecated use `LeadCustomFields$inboundSchema` instead. */
  export const inboundSchema = LeadCustomFields$inboundSchema;
  /** @deprecated use `LeadCustomFields$outboundSchema` instead. */
  export const outboundSchema = LeadCustomFields$outboundSchema;
  /** @deprecated use `LeadCustomFields$Outbound` instead. */
  export type Outbound = LeadCustomFields$Outbound;
}

export function leadCustomFieldsToJSON(
  leadCustomFields: LeadCustomFields,
): string {
  return JSON.stringify(
    LeadCustomFields$outboundSchema.parse(leadCustomFields),
  );
}

export function leadCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<LeadCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCustomFields' from JSON`,
  );
}

/** @internal */
export const LeadCustomMappings$inboundSchema: z.ZodType<
  LeadCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadCustomMappings$Outbound = {};

/** @internal */
export const LeadCustomMappings$outboundSchema: z.ZodType<
  LeadCustomMappings$Outbound,
  z.ZodTypeDef,
  LeadCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCustomMappings$ {
  /** @deprecated use `LeadCustomMappings$inboundSchema` instead. */
  export const inboundSchema = LeadCustomMappings$inboundSchema;
  /** @deprecated use `LeadCustomMappings$outboundSchema` instead. */
  export const outboundSchema = LeadCustomMappings$outboundSchema;
  /** @deprecated use `LeadCustomMappings$Outbound` instead. */
  export type Outbound = LeadCustomMappings$Outbound;
}

export function leadCustomMappingsToJSON(
  leadCustomMappings: LeadCustomMappings,
): string {
  return JSON.stringify(
    LeadCustomMappings$outboundSchema.parse(leadCustomMappings),
  );
}

export function leadCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<LeadCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCustomMappings' from JSON`,
  );
}

/** @internal */
export const LeadExtendPaths$inboundSchema: z.ZodType<
  LeadExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type LeadExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const LeadExtendPaths$outboundSchema: z.ZodType<
  LeadExtendPaths$Outbound,
  z.ZodTypeDef,
  LeadExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadExtendPaths$ {
  /** @deprecated use `LeadExtendPaths$inboundSchema` instead. */
  export const inboundSchema = LeadExtendPaths$inboundSchema;
  /** @deprecated use `LeadExtendPaths$outboundSchema` instead. */
  export const outboundSchema = LeadExtendPaths$outboundSchema;
  /** @deprecated use `LeadExtendPaths$Outbound` instead. */
  export type Outbound = LeadExtendPaths$Outbound;
}

export function leadExtendPathsToJSON(
  leadExtendPaths: LeadExtendPaths,
): string {
  return JSON.stringify(LeadExtendPaths$outboundSchema.parse(leadExtendPaths));
}

export function leadExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<LeadExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadExtendPaths' from JSON`,
  );
}

/** @internal */
export const LeadPassThrough$inboundSchema: z.ZodType<
  LeadPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => LeadExtendPaths$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type LeadPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<LeadExtendPaths$Outbound> | undefined;
};

/** @internal */
export const LeadPassThrough$outboundSchema: z.ZodType<
  LeadPassThrough$Outbound,
  z.ZodTypeDef,
  LeadPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => LeadExtendPaths$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadPassThrough$ {
  /** @deprecated use `LeadPassThrough$inboundSchema` instead. */
  export const inboundSchema = LeadPassThrough$inboundSchema;
  /** @deprecated use `LeadPassThrough$outboundSchema` instead. */
  export const outboundSchema = LeadPassThrough$outboundSchema;
  /** @deprecated use `LeadPassThrough$Outbound` instead. */
  export type Outbound = LeadPassThrough$Outbound;
}

export function leadPassThroughToJSON(
  leadPassThrough: LeadPassThrough,
): string {
  return JSON.stringify(LeadPassThrough$outboundSchema.parse(leadPassThrough));
}

export function leadPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<LeadPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadPassThrough' from JSON`,
  );
}

/** @internal */
export const Lead$inboundSchema: z.ZodType<Lead, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.string(),
    company_name: z.nullable(z.string()),
    owner_id: z.nullable(z.string()).optional(),
    owner_name: z.nullable(z.string()).optional(),
    company_id: z.nullable(z.string()).optional(),
    lead_id: z.nullable(z.string()).optional(),
    lead_source: z.nullable(z.string()).optional(),
    first_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    prefix: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    language: z.nullable(z.string()).optional(),
    status: z.nullable(z.string()).optional(),
    monetary_amount: z.nullable(z.number()).optional(),
    currency: z.nullable(Currency$inboundSchema).optional(),
    fax: z.nullable(z.string()).optional(),
    websites: z.array(z.lazy(() => LeadWebsites$inboundSchema)).optional(),
    addresses: z.array(z.lazy(() => LeadAddresses$inboundSchema)).optional(),
    social_links: z.array(z.lazy(() => LeadSocialLinks$inboundSchema))
      .optional(),
    phone_numbers: z.array(z.lazy(() => LeadPhoneNumbers$inboundSchema))
      .optional(),
    emails: z.array(z.lazy(() => LeadEmails$inboundSchema)).optional(),
    custom_fields: z.array(z.lazy(() => LeadCustomFields$inboundSchema))
      .optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    custom_mappings: z.nullable(z.lazy(() => LeadCustomMappings$inboundSchema))
      .optional(),
    updated_at: z.nullable(z.string()).optional(),
    created_at: z.nullable(z.string()).optional(),
    pass_through: z.array(z.lazy(() => LeadPassThrough$inboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "company_name": "companyName",
      "owner_id": "ownerId",
      "owner_name": "ownerName",
      "company_id": "companyId",
      "lead_id": "leadId",
      "lead_source": "leadSource",
      "first_name": "firstName",
      "last_name": "lastName",
      "monetary_amount": "monetaryAmount",
      "social_links": "socialLinks",
      "phone_numbers": "phoneNumbers",
      "custom_fields": "customFields",
      "custom_mappings": "customMappings",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type Lead$Outbound = {
  id?: string | undefined;
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<LeadWebsites$Outbound> | undefined;
  addresses?: Array<LeadAddresses$Outbound> | undefined;
  social_links?: Array<LeadSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<LeadPhoneNumbers$Outbound> | undefined;
  emails?: Array<LeadEmails$Outbound> | undefined;
  custom_fields?: Array<LeadCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  custom_mappings?: LeadCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<LeadPassThrough$Outbound> | undefined;
};

/** @internal */
export const Lead$outboundSchema: z.ZodType<Lead$Outbound, z.ZodTypeDef, Lead> =
  z.object({
    id: z.string().optional(),
    name: z.string(),
    companyName: z.nullable(z.string()),
    ownerId: z.nullable(z.string()).optional(),
    ownerName: z.nullable(z.string()).optional(),
    companyId: z.nullable(z.string()).optional(),
    leadId: z.nullable(z.string()).optional(),
    leadSource: z.nullable(z.string()).optional(),
    firstName: z.nullable(z.string()).optional(),
    lastName: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    prefix: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    language: z.nullable(z.string()).optional(),
    status: z.nullable(z.string()).optional(),
    monetaryAmount: z.nullable(z.number()).optional(),
    currency: z.nullable(Currency$outboundSchema).optional(),
    fax: z.nullable(z.string()).optional(),
    websites: z.array(z.lazy(() => LeadWebsites$outboundSchema)).optional(),
    addresses: z.array(z.lazy(() => LeadAddresses$outboundSchema)).optional(),
    socialLinks: z.array(z.lazy(() => LeadSocialLinks$outboundSchema))
      .optional(),
    phoneNumbers: z.array(z.lazy(() => LeadPhoneNumbers$outboundSchema))
      .optional(),
    emails: z.array(z.lazy(() => LeadEmails$outboundSchema)).optional(),
    customFields: z.array(z.lazy(() => LeadCustomFields$outboundSchema))
      .optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    customMappings: z.nullable(z.lazy(() => LeadCustomMappings$outboundSchema))
      .optional(),
    updatedAt: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string()).optional(),
    passThrough: z.array(z.lazy(() => LeadPassThrough$outboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      companyName: "company_name",
      ownerId: "owner_id",
      ownerName: "owner_name",
      companyId: "company_id",
      leadId: "lead_id",
      leadSource: "lead_source",
      firstName: "first_name",
      lastName: "last_name",
      monetaryAmount: "monetary_amount",
      socialLinks: "social_links",
      phoneNumbers: "phone_numbers",
      customFields: "custom_fields",
      customMappings: "custom_mappings",
      updatedAt: "updated_at",
      createdAt: "created_at",
      passThrough: "pass_through",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Lead$ {
  /** @deprecated use `Lead$inboundSchema` instead. */
  export const inboundSchema = Lead$inboundSchema;
  /** @deprecated use `Lead$outboundSchema` instead. */
  export const outboundSchema = Lead$outboundSchema;
  /** @deprecated use `Lead$Outbound` instead. */
  export type Outbound = Lead$Outbound;
}

export function leadToJSON(lead: Lead): string {
  return JSON.stringify(Lead$outboundSchema.parse(lead));
}

export function leadFromJSON(
  jsonString: string,
): SafeParseResult<Lead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Lead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Lead' from JSON`,
  );
}
