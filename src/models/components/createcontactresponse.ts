/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the newly created contact, including its unique identifier. It serves as the main container for the response data, confirming the successful addition of the contact to the CRM system. The structure is typically a JSON object with nested properties.
 */
export type CreateContactResponseUnifiedId = {
  /**
   * The unique identifier assigned to the newly created contact in the CRM system. This ID is a string that serves as a reference for future operations involving this contact, such as updates or deletions. It is crucial for tracking and managing the contact within the CRM.
   */
  id: string;
};

/**
 * Contact created
 */
export type CreateContactResponse = {
  /**
   * The HTTP response status code indicating the result of the contact addition operation. A value of 201 confirms that the contact was successfully created in the CRM system. This integer is crucial for error handling and confirming successful operations.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'Created' for a successful contact addition. This string provides a human-readable confirmation of the operation's outcome, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for this operation. This string identifies which service handled the contact addition, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource involved in the operation, typically 'contacts' for this endpoint. This string helps developers understand which resource was affected by the operation.
   */
  resource: string;
  /**
   * The specific operation performed, such as 'add' for this endpoint. This string indicates the action taken on the resource, providing clarity on what change was made in the CRM system.
   */
  operation: string;
  /**
   * This object contains the details of the newly created contact, including its unique identifier. It serves as the main container for the response data, confirming the successful addition of the contact to the CRM system. The structure is typically a JSON object with nested properties.
   */
  data: CreateContactResponseUnifiedId;
};

/** @internal */
export const CreateContactResponseUnifiedId$inboundSchema: z.ZodType<
  CreateContactResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateContactResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateContactResponseUnifiedId$outboundSchema: z.ZodType<
  CreateContactResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateContactResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactResponseUnifiedId$ {
  /** @deprecated use `CreateContactResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateContactResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateContactResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CreateContactResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateContactResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateContactResponseUnifiedId$Outbound;
}

export function createContactResponseUnifiedIdToJSON(
  createContactResponseUnifiedId: CreateContactResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateContactResponseUnifiedId$outboundSchema.parse(
      createContactResponseUnifiedId,
    ),
  );
}

export function createContactResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateContactResponse$inboundSchema: z.ZodType<
  CreateContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateContactResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateContactResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateContactResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateContactResponse$outboundSchema: z.ZodType<
  CreateContactResponse$Outbound,
  z.ZodTypeDef,
  CreateContactResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateContactResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactResponse$ {
  /** @deprecated use `CreateContactResponse$inboundSchema` instead. */
  export const inboundSchema = CreateContactResponse$inboundSchema;
  /** @deprecated use `CreateContactResponse$outboundSchema` instead. */
  export const outboundSchema = CreateContactResponse$outboundSchema;
  /** @deprecated use `CreateContactResponse$Outbound` instead. */
  export type Outbound = CreateContactResponse$Outbound;
}

export function createContactResponseToJSON(
  createContactResponse: CreateContactResponse,
): string {
  return JSON.stringify(
    CreateContactResponse$outboundSchema.parse(createContactResponse),
  );
}

export function createContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactResponse' from JSON`,
  );
}
