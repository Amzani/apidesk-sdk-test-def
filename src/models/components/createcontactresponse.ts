/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the contact that was successfully created in the CRM system. It serves as a container for all relevant information about the new contact, including its unique identifier. This object is essential for confirming the successful addition of the contact and for any subsequent operations that may require reference to this contact.
 */
export type CreateContactResponseUnifiedId = {
  /**
   * The unique identifier assigned to the newly created contact resource. This ID is crucial for referencing the contact in future operations, such as updates or deletions, and ensures that each contact can be distinctly identified within the CRM system.
   */
  id: string;
};

/**
 * Contact created
 */
export type CreateContactResponse = {
  /**
   * The HTTP response status code indicating the result of the POST request to add a new contact. A successful operation returns a 201 status code, confirming that the contact has been successfully created in the CRM system.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'Created' for a successful contact addition. This provides a human-readable confirmation of the operation's outcome.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for this operation, identifying which service integration was utilized to add the contact. This helps in tracking and managing service-specific operations within the CRM.
   */
  service: string;
  /**
   * The name of the unified API resource that was affected by this operation, typically 'contact' in this context. It signifies the type of resource that has been created or modified.
   */
  resource: string;
  /**
   * The specific operation performed, in this case, 'contactsAdd', indicating that a new contact has been added to the CRM system. This helps in understanding the action taken by the API call.
   */
  operation: string;
  /**
   * This object contains the details of the contact that was successfully created in the CRM system. It serves as a container for all relevant information about the new contact, including its unique identifier. This object is essential for confirming the successful addition of the contact and for any subsequent operations that may require reference to this contact.
   */
  data: CreateContactResponseUnifiedId;
};

/** @internal */
export const CreateContactResponseUnifiedId$inboundSchema: z.ZodType<
  CreateContactResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateContactResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateContactResponseUnifiedId$outboundSchema: z.ZodType<
  CreateContactResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateContactResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactResponseUnifiedId$ {
  /** @deprecated use `CreateContactResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateContactResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateContactResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CreateContactResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateContactResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateContactResponseUnifiedId$Outbound;
}

export function createContactResponseUnifiedIdToJSON(
  createContactResponseUnifiedId: CreateContactResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateContactResponseUnifiedId$outboundSchema.parse(
      createContactResponseUnifiedId,
    ),
  );
}

export function createContactResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateContactResponse$inboundSchema: z.ZodType<
  CreateContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateContactResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateContactResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateContactResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateContactResponse$outboundSchema: z.ZodType<
  CreateContactResponse$Outbound,
  z.ZodTypeDef,
  CreateContactResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateContactResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactResponse$ {
  /** @deprecated use `CreateContactResponse$inboundSchema` instead. */
  export const inboundSchema = CreateContactResponse$inboundSchema;
  /** @deprecated use `CreateContactResponse$outboundSchema` instead. */
  export const outboundSchema = CreateContactResponse$outboundSchema;
  /** @deprecated use `CreateContactResponse$Outbound` instead. */
  export type Outbound = CreateContactResponse$Outbound;
}

export function createContactResponseToJSON(
  createContactResponse: CreateContactResponse,
): string {
  return JSON.stringify(
    CreateContactResponse$outboundSchema.parse(createContactResponse),
  );
}

export function createContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactResponse' from JSON`,
  );
}
