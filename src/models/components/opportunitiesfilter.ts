/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OpportunitiesFilter = {
  /**
   * Filters CRM opportunities by their title, allowing searches for specific titles or keywords. This is useful for locating opportunities with particular names or themes.
   */
  title?: string | undefined;
  /**
   * Filters opportunities based on their current status, aiding in retrieving those at a specific stage in the sales process. Useful for tracking progress and managing sales pipelines.
   */
  status?: string | undefined;
  /**
   * Filters opportunities by their monetary value, helping identify those that meet a specific financial threshold. This is beneficial for prioritizing high-value opportunities.
   */
  monetaryAmount?: number | undefined;
  /**
   * Filter opportunities based on their win probability. Specify a numerical value representing the likelihood of winning a particular opportunity, helping to narrow down results to those with a specific chance of success. Useful for focusing on high-probability opportunities.
   */
  winProbability?: number | undefined;
  /**
   * Filter opportunities by the associated company ID. Retrieve opportunities linked to a specific company, identified by its unique ID within the CRM system. Essential for company-specific opportunity tracking.
   */
  companyId?: string | undefined;
  /**
   * Filter opportunities by the owner's ID. Retrieve opportunities managed by a specific owner, identified by their unique ID in the CRM. Useful for tracking performance of individual sales representatives.
   */
  ownerId?: string | undefined;
  /**
   * Filter opportunities by the primary contact's ID. Find opportunities associated with a specific primary contact, identified by their unique ID. Helps in managing relationships with key contacts.
   */
  primaryContactId?: string | undefined;
};

/** @internal */
export const OpportunitiesFilter$inboundSchema: z.ZodType<
  OpportunitiesFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  status: z.string().optional(),
  monetary_amount: z.number().optional(),
  win_probability: z.number().optional(),
  company_id: z.string().optional(),
  owner_id: z.string().optional(),
  primary_contact_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "company_id": "companyId",
    "owner_id": "ownerId",
    "primary_contact_id": "primaryContactId",
  });
});

/** @internal */
export type OpportunitiesFilter$Outbound = {
  title?: string | undefined;
  status?: string | undefined;
  monetary_amount?: number | undefined;
  win_probability?: number | undefined;
  company_id?: string | undefined;
  owner_id?: string | undefined;
  primary_contact_id?: string | undefined;
};

/** @internal */
export const OpportunitiesFilter$outboundSchema: z.ZodType<
  OpportunitiesFilter$Outbound,
  z.ZodTypeDef,
  OpportunitiesFilter
> = z.object({
  title: z.string().optional(),
  status: z.string().optional(),
  monetaryAmount: z.number().optional(),
  winProbability: z.number().optional(),
  companyId: z.string().optional(),
  ownerId: z.string().optional(),
  primaryContactId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    companyId: "company_id",
    ownerId: "owner_id",
    primaryContactId: "primary_contact_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesFilter$ {
  /** @deprecated use `OpportunitiesFilter$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesFilter$inboundSchema;
  /** @deprecated use `OpportunitiesFilter$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesFilter$outboundSchema;
  /** @deprecated use `OpportunitiesFilter$Outbound` instead. */
  export type Outbound = OpportunitiesFilter$Outbound;
}

export function opportunitiesFilterToJSON(
  opportunitiesFilter: OpportunitiesFilter,
): string {
  return JSON.stringify(
    OpportunitiesFilter$outboundSchema.parse(opportunitiesFilter),
  );
}

export function opportunitiesFilterFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesFilter' from JSON`,
  );
}
