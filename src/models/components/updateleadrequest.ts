/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the currency type associated with monetary values for the lead. This should be a valid ISO 4217 currency code, such as 'USD' for US Dollars. Ensuring the correct currency code is crucial for accurate financial data representation in the CRM.
 */
export const UpdateLeadRequestCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Specifies the currency type associated with monetary values for the lead. This should be a valid ISO 4217 currency code, such as 'USD' for US Dollars. Ensuring the correct currency code is crucial for accurate financial data representation in the CRM.
 */
export type UpdateLeadRequestCurrency = ClosedEnum<
  typeof UpdateLeadRequestCurrency
>;

/**
 * Specifies the category or role of the website associated with the lead, such as 'personal', 'business', or 'portfolio'. This helps in categorizing the website information for better organization and retrieval. Ensure the type is a valid string that accurately reflects the website's purpose.
 */
export const UpdateLeadRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category or role of the website associated with the lead, such as 'personal', 'business', or 'portfolio'. This helps in categorizing the website information for better organization and retrieval. Ensure the type is a valid string that accurately reflects the website's purpose.
 */
export type UpdateLeadRequestType = ClosedEnum<typeof UpdateLeadRequestType>;

export type UpdateLeadRequestWebsites = {
  /**
   * A unique identifier for each website entry associated with the lead. This ID helps in distinguishing between multiple websites and is useful for updates or deletions. It should be a unique string within the context of the lead's websites.
   */
  id?: string | null | undefined;
  /**
   * The URL of the lead's website, which must be a valid and reachable web address. This is a required field for each website entry, ensuring that the lead's online presence is accurately captured and accessible.
   */
  url: string;
  /**
   * Specifies the category or role of the website associated with the lead, such as 'personal', 'business', or 'portfolio'. This helps in categorizing the website information for better organization and retrieval. Ensure the type is a valid string that accurately reflects the website's purpose.
   */
  type?: UpdateLeadRequestType | null | undefined;
};

/**
 * Defines the category of the address, such as 'home', 'work', or 'billing', to clarify its intended use. This categorization aids in managing and utilizing address data effectively within the CRM system. Ensure the type is a valid string that accurately describes the address's purpose.
 */
export const UpdateLeadRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the category of the address, such as 'home', 'work', or 'billing', to clarify its intended use. This categorization aids in managing and utilizing address data effectively within the CRM system. Ensure the type is a valid string that accurately describes the address's purpose.
 */
export type UpdateLeadRequestAddressesType = ClosedEnum<
  typeof UpdateLeadRequestAddressesType
>;

export type UpdateLeadRequestAddresses = {
  /**
   * A unique identifier for each address associated with the lead, used to distinguish between different addresses. This ID is crucial for updating or referencing specific addresses within the lead's address list. It should be a unique string value for each address entry.
   */
  id?: string | null | undefined;
  /**
   * Defines the category of the address, such as 'home', 'work', or 'billing', to clarify its intended use. This categorization aids in managing and utilizing address data effectively within the CRM system. Ensure the type is a valid string that accurately describes the address's purpose.
   */
  type?: UpdateLeadRequestAddressesType | null | undefined;
  /**
   * Represents the full address in a single string format, useful when structured address data is unavailable. This property allows for flexibility in storing address information that may not fit into predefined fields. Ensure the address string is complete and accurate for effective use.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address entry for the lead. This field is used to identify or label the address within the lead's contact information. It can be any descriptive name that helps distinguish this address from others, such as 'Home', 'Office', or 'Billing'.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, typically including the street number, street name, and any apartment or suite number. This field is essential for accurately locating the address and should be formatted according to standard postal guidelines.
   */
  line1?: string | null | undefined;
  /**
   * An additional line for the address, often used for supplementary information such as building name, floor number, or additional location details. This field helps provide a complete address when the primary line is insufficient.
   */
  line2?: string | null | undefined;
  /**
   * A third line for the address, allowing for further details that may be necessary for precise location identification. This field is optional and can be used for extended address information.
   */
  line3?: string | null | undefined;
  /**
   * A fourth line for the address, providing additional space for any extra address details that do not fit in the previous lines. This field ensures comprehensive address information can be captured when needed.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the lead's address. This property is used to specify the exact location of the lead's residence or business, aiding in precise geographical identification. It should be a string that accurately reflects the street number as per local addressing standards.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name where the lead is located. This property helps in identifying the lead's geographical area for regional analysis and communication purposes. It should be a valid city name, formatted as a string.
   */
  city?: string | null | undefined;
  /**
   * The state or region name associated with the lead's address. This property is crucial for regional segmentation and ensuring accurate delivery of services or products. It should be a string representing the official state or region name.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code for the lead's address. This property is essential for mail delivery and location-based services, ensuring that communications and services reach the correct area. It should be a string formatted according to local postal standards.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the lead's address, following the ISO 3166-1 alpha-2 standard. This property is used to identify the lead's country, facilitating international communication and compliance with global standards. It should be a two-letter string representing the country code.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the address, used to pinpoint the exact geographical location of the lead's address. This should be a valid string representation of a latitude value, typically in decimal degrees format. Including this information helps in mapping and location-based services within the CRM.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, essential for determining the precise geographical location of the lead's address. This should be a valid string representation of a longitude value, usually in decimal degrees format. Providing this data supports mapping and location-based functionalities in the CRM.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality of the address, which helps in further categorizing the lead's location within a broader geographical area. This field is useful for regional analysis and reporting within the CRM system.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address, crucial for personalizing communications and ensuring accurate contact management. This should be a string containing the first and last name of the contact person.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title of the contact person at the address, such as Mr., Ms., or Dr. This field is used to address the contact person appropriately in communications and should be a valid string representing common salutations.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the lead's address. This optional field allows you to update or add a contact number for the lead, facilitating direct communication. Ensure the phone number is formatted correctly according to international standards to avoid any issues with data processing.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the lead's address. This optional property can be used to update or include a fax contact for the lead, which might be necessary for businesses that still utilize fax communication. Ensure the fax number follows the standard format to ensure proper handling.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the lead's address. This optional field is crucial for updating or adding an email contact, enabling electronic communication with the lead. Ensure the email address is valid and correctly formatted to prevent delivery issues.
   */
  email?: string | null | undefined;
  /**
   * The website URL linked to the lead's address. This optional property allows you to update or add a website for the lead, providing additional context or resources related to the lead's business. Ensure the URL is complete and valid to facilitate proper access.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the lead's address. This optional field can be used to include any extra information or context about the lead's address that might be relevant for CRM purposes. Keep the notes concise and relevant to ensure clarity and usefulness.
   */
  notes?: string | null | undefined;
  /**
   * A string representing the current version of the address object, used to detect and prevent data conflicts during updates. This value should be incremented with each update to ensure data integrity.
   */
  rowVersion?: string | null | undefined;
};

export type UpdateLeadRequestSocialLinks = {
  /**
   * A unique string identifier for each social link associated with the lead. This ID is used to manage and reference specific social links within the lead's profile.
   */
  id?: string | null | undefined;
  /**
   * The complete URL of the social media profile or link, such as 'https://www.twitter.com/apideck'. This field is required to ensure accurate linking to the lead's social media presence.
   */
  url: string;
  /**
   * A string indicating the type of social media platform, such as 'twitter' or 'linkedin'. This helps categorize the social link for better organization and retrieval.
   */
  type?: string | null | undefined;
};

/**
 * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used, aiding in more personalized communication strategies. The value should be a predefined string that matches one of the accepted phone number types in the CRM system.
 */
export const UpdateLeadRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used, aiding in more personalized communication strategies. The value should be a predefined string that matches one of the accepted phone number types in the CRM system.
 */
export type UpdateLeadRequestPhoneNumbersType = ClosedEnum<
  typeof UpdateLeadRequestPhoneNumbersType
>;

export type UpdateLeadRequestPhoneNumbers = {
  /**
   * A unique identifier for each phone number entry. This ID is used to distinguish between different phone numbers associated with the lead, facilitating precise updates or deletions of specific numbers.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, such as '+1' for the United States. This property ensures that phone numbers are formatted correctly for international dialing, which is crucial for global communication with leads.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code for the phone number, such as '323' for Los Angeles. Including the area code helps in accurately routing calls within specific geographic regions, enhancing local communication efforts.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number associated with the lead, excluding the country and area codes. This property is required to ensure that there is a valid contact number for the lead, which is essential for direct communication.
   */
  number: string;
  /**
   * The extension number associated with the lead's phone number. This property allows for more precise contact information, especially in organizations with multiple internal lines. It should be a numeric string, if applicable, to ensure correct routing of calls within a business environment.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used, aiding in more personalized communication strategies. The value should be a predefined string that matches one of the accepted phone number types in the CRM system.
   */
  type?: UpdateLeadRequestPhoneNumbersType | null | undefined;
};

/**
 * Specifies the category of the email address, such as 'work', 'personal', or 'other'. This helps in organizing and distinguishing between different types of email addresses associated with the lead. It should be a valid string that clearly indicates the email's purpose.
 */
export const UpdateLeadRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the email address, such as 'work', 'personal', or 'other'. This helps in organizing and distinguishing between different types of email addresses associated with the lead. It should be a valid string that clearly indicates the email's purpose.
 */
export type UpdateLeadRequestEmailsType = ClosedEnum<
  typeof UpdateLeadRequestEmailsType
>;

export type UpdateLeadRequestEmails = {
  /**
   * A unique identifier for each email address object within the emails array. This ID is used to distinguish between different email entries, facilitating updates and management of specific email records. It should be a unique string that adheres to the CRM's identifier format.
   */
  id?: string | null | undefined;
  /**
   * The actual email address used for contacting the lead. This is a required field and must be a valid email format to ensure successful communication. It serves as a primary electronic contact method within the CRM system.
   */
  email: string | null;
  /**
   * Specifies the category of the email address, such as 'work', 'personal', or 'other'. This helps in organizing and distinguishing between different types of email addresses associated with the lead. It should be a valid string that clearly indicates the email's purpose.
   */
  type?: UpdateLeadRequestEmailsType | null | undefined;
};

export type UpdateLeadRequestValue6 = {};

export type UpdateLeadRequestValue4 = {};

/**
 * The value assigned to a custom field for the lead. This allows for storing additional, non-standard information specific to the lead, which can be tailored to fit unique business needs. Ensure the value aligns with the expected data type and format for the custom field.
 */
export type UpdateLeadRequestValue =
  | UpdateLeadRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateLeadRequestValue6>;

export type UpdateLeadRequestCustomFields = {
  /**
   * A mandatory unique identifier for each custom field, ensuring that each field can be distinctly referenced and managed. This ID must be a valid string that uniquely identifies the custom field within the context of the lead.
   */
  id: string | null;
  /**
   * The display name of the custom field, providing a human-readable label that describes the field's content or purpose. This name should be a string that clearly conveys the nature of the data stored in the field.
   */
  name?: string | null | undefined;
  /**
   * Provides additional context or details about the custom field, helping users understand its purpose and usage. This description should be a string that elaborates on the field's role or significance within the lead's data structure.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to a custom field for the lead. This allows for storing additional, non-standard information specific to the lead, which can be tailored to fit unique business needs. Ensure the value aligns with the expected data type and format for the custom field.
   */
  value?:
    | UpdateLeadRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateLeadRequestValue6>
    | null
    | undefined;
};

export type UpdateLeadRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the lead data where the value should be applied. This is crucial for ensuring that updates are made to the correct data fields, maintaining data integrity.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath, which can be of any data type. This flexibility allows developers to update lead data with a wide range of values, accommodating various data types and structures.
   */
  value?: any | undefined;
};

export type UpdateLeadRequestPassThrough = {
  /**
   * The unique identifier for the service to which the pass_through data should be applied. This ensures that the custom data is directed to the correct service integration, facilitating accurate data processing.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation to which this pass_through should be applied. It is particularly useful for Unify calls that involve multiple downstream requests, allowing developers to track and manage these operations effectively.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties. This can be used to add custom fields or additional data to the lead update request, providing a way to tailor the operation to specific needs.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. This allows developers to precisely target and update specific parts of the lead data, ensuring accurate and efficient data management.
   */
  extendPaths?: Array<UpdateLeadRequestExtendPaths> | undefined;
};

export type UpdateLeadRequest = {
  /**
   * The full name of the lead being updated. This field is required and must be a non-empty string, as it identifies the lead within the CRM system. Keeping this information current ensures accurate identification and communication with the lead.
   */
  name: string;
  /**
   * The name of the company associated with the lead. This required field must be a non-empty string, linking the lead to their respective organization. Accurate company information is crucial for contextualizing the lead's business environment.
   */
  companyName: string | null;
  /**
   * The unique identifier of the lead's owner within the CRM. This optional field helps assign responsibility and track interactions with the lead. Providing this ID facilitates efficient lead management and accountability.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the individual who owns the lead. This optional field complements the owner_id by providing a human-readable reference, aiding in the quick identification of the lead's manager.
   */
  ownerName?: string | null | undefined;
  /**
   * The unique identifier for the company associated with the lead. This optional field links the lead to their company within the CRM, supporting detailed organizational insights and reporting.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier for the lead within the CRM system. This property is used to specify which lead record is being updated, ensuring that the correct data is modified. It must be a valid string that matches an existing lead ID in the system.
   */
  leadId?: string | null | undefined;
  /**
   * Indicates the origin of the lead, such as a marketing campaign or referral. This property helps categorize and track the effectiveness of different lead generation sources. It should be a descriptive string that clearly identifies the lead's source.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead, used to personalize communications and records within the CRM. This property should be a valid string containing only alphabetic characters, and it enhances the ability to manage and interact with leads on a personal level.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead, essential for identifying and organizing lead records. This property should be a valid string containing only alphabetic characters, ensuring accurate and professional record-keeping within the CRM.
   */
  lastName?: string | null | undefined;
  /**
   * A detailed description or notes about the lead, providing context or additional information that may be relevant for sales or marketing purposes. This property can include any text that helps in understanding the lead's background or specific needs.
   */
  description?: string | null | undefined;
  /**
   * The prefix used to address the lead, such as Mr., Ms., or Dr. This field helps in personalizing communication with the lead. It should be a valid string representing a common title or salutation.
   */
  prefix?: string | null | undefined;
  /**
   * The professional job title of the lead, such as 'Software Engineer' or 'Marketing Manager'. This information is used to understand the lead's role within their organization and tailor interactions accordingly. It should be a descriptive string that accurately reflects the lead's position.
   */
  title?: string | null | undefined;
  /**
   * The preferred language of communication for the lead, specified using the ISO 639-1 language code (e.g., 'EN' for English). This helps in ensuring that all communications are in the lead's preferred language, enhancing engagement and understanding.
   */
  language?: string | null | undefined;
  /**
   * The current status of the lead within the CRM, such as 'New', 'Contacted', or 'Qualified'. This field is crucial for tracking the lead's progress through the sales pipeline and determining the next steps in engagement.
   */
  status?: string | null | undefined;
  /**
   * The potential monetary value associated with the lead, often representing the estimated revenue from a successful conversion. This numeric value helps prioritize leads based on their financial potential and is used in forecasting and sales strategy planning.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Specifies the currency type associated with monetary values for the lead. This should be a valid ISO 4217 currency code, such as 'USD' for US Dollars. Ensuring the correct currency code is crucial for accurate financial data representation in the CRM.
   */
  currency?: UpdateLeadRequestCurrency | null | undefined;
  /**
   * The lead's fax number, used for sending and receiving documents via fax. This should be a valid fax number format, including country and area codes if applicable. Including a fax number can facilitate traditional communication methods with the lead.
   */
  fax?: string | null | undefined;
  /**
   * A list of websites associated with the lead, providing additional online presence information. Each entry in the array should include a valid URL and may include an identifier for reference. This helps in tracking and managing the lead's digital footprint.
   */
  websites?: Array<UpdateLeadRequestWebsites> | undefined;
  /**
   * A collection of address objects associated with the lead, allowing for multiple addresses to be stored and updated. Each address in the array should conform to the specified address object structure, ensuring consistency and completeness of address data.
   */
  addresses?: Array<UpdateLeadRequestAddresses> | undefined;
  /**
   * An array of social link objects associated with the lead. Each object should contain details such as the URL and type of the social link, allowing for comprehensive social media tracking.
   */
  socialLinks?: Array<UpdateLeadRequestSocialLinks> | undefined;
  /**
   * An array of phone number objects associated with the lead. Each object within the array should contain details such as the phone number, country code, and area code. This property allows updating multiple phone numbers for a lead, ensuring comprehensive contact information is maintained.
   */
  phoneNumbers?: Array<UpdateLeadRequestPhoneNumbers> | undefined;
  /**
   * A collection of email objects associated with the lead. Each object within the array should represent a distinct email address, allowing for multiple contact points. This array is crucial for ensuring comprehensive communication options with the lead.
   */
  emails?: Array<UpdateLeadRequestEmails> | undefined;
  /**
   * An array of custom fields that allow for additional, user-defined data to be associated with the lead. Each entry in the array should conform to the structure defined for custom fields, enabling flexible data management tailored to specific business needs.
   */
  customFields?: Array<UpdateLeadRequestCustomFields> | undefined;
  /**
   * An array of tags associated with the lead, used for categorization and easy retrieval. Tags help in organizing leads based on specific criteria or campaigns. Each tag should be a meaningful string that represents a category or label.
   */
  tags?: Array<string> | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or modifications when updating the lead. This property is useful for passing through additional information that may not be covered by standard fields, ensuring flexibility in data handling.
   */
  passThrough?: Array<UpdateLeadRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateLeadRequestCurrency$inboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestCurrency
> = z.nativeEnum(UpdateLeadRequestCurrency);

/** @internal */
export const UpdateLeadRequestCurrency$outboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestCurrency
> = UpdateLeadRequestCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestCurrency$ {
  /** @deprecated use `UpdateLeadRequestCurrency$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestCurrency$inboundSchema;
  /** @deprecated use `UpdateLeadRequestCurrency$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestCurrency$outboundSchema;
}

/** @internal */
export const UpdateLeadRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestType
> = z.nativeEnum(UpdateLeadRequestType);

/** @internal */
export const UpdateLeadRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestType
> = UpdateLeadRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestType$ {
  /** @deprecated use `UpdateLeadRequestType$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestType$inboundSchema;
  /** @deprecated use `UpdateLeadRequestType$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestType$outboundSchema;
}

/** @internal */
export const UpdateLeadRequestWebsites$inboundSchema: z.ZodType<
  UpdateLeadRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateLeadRequestType$inboundSchema).optional(),
});

/** @internal */
export type UpdateLeadRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateLeadRequestWebsites$outboundSchema: z.ZodType<
  UpdateLeadRequestWebsites$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateLeadRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestWebsites$ {
  /** @deprecated use `UpdateLeadRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestWebsites$inboundSchema;
  /** @deprecated use `UpdateLeadRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestWebsites$outboundSchema;
  /** @deprecated use `UpdateLeadRequestWebsites$Outbound` instead. */
  export type Outbound = UpdateLeadRequestWebsites$Outbound;
}

export function updateLeadRequestWebsitesToJSON(
  updateLeadRequestWebsites: UpdateLeadRequestWebsites,
): string {
  return JSON.stringify(
    UpdateLeadRequestWebsites$outboundSchema.parse(updateLeadRequestWebsites),
  );
}

export function updateLeadRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestWebsites' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestAddressesType
> = z.nativeEnum(UpdateLeadRequestAddressesType);

/** @internal */
export const UpdateLeadRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestAddressesType
> = UpdateLeadRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestAddressesType$ {
  /** @deprecated use `UpdateLeadRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestAddressesType$inboundSchema;
  /** @deprecated use `UpdateLeadRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestAddressesType$outboundSchema;
}

/** @internal */
export const UpdateLeadRequestAddresses$inboundSchema: z.ZodType<
  UpdateLeadRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateLeadRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UpdateLeadRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UpdateLeadRequestAddresses$outboundSchema: z.ZodType<
  UpdateLeadRequestAddresses$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateLeadRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestAddresses$ {
  /** @deprecated use `UpdateLeadRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestAddresses$inboundSchema;
  /** @deprecated use `UpdateLeadRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestAddresses$outboundSchema;
  /** @deprecated use `UpdateLeadRequestAddresses$Outbound` instead. */
  export type Outbound = UpdateLeadRequestAddresses$Outbound;
}

export function updateLeadRequestAddressesToJSON(
  updateLeadRequestAddresses: UpdateLeadRequestAddresses,
): string {
  return JSON.stringify(
    UpdateLeadRequestAddresses$outboundSchema.parse(updateLeadRequestAddresses),
  );
}

export function updateLeadRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestAddresses' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestSocialLinks$inboundSchema: z.ZodType<
  UpdateLeadRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateLeadRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateLeadRequestSocialLinks$outboundSchema: z.ZodType<
  UpdateLeadRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestSocialLinks$ {
  /** @deprecated use `UpdateLeadRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestSocialLinks$inboundSchema;
  /** @deprecated use `UpdateLeadRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestSocialLinks$outboundSchema;
  /** @deprecated use `UpdateLeadRequestSocialLinks$Outbound` instead. */
  export type Outbound = UpdateLeadRequestSocialLinks$Outbound;
}

export function updateLeadRequestSocialLinksToJSON(
  updateLeadRequestSocialLinks: UpdateLeadRequestSocialLinks,
): string {
  return JSON.stringify(
    UpdateLeadRequestSocialLinks$outboundSchema.parse(
      updateLeadRequestSocialLinks,
    ),
  );
}

export function updateLeadRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestPhoneNumbersType
> = z.nativeEnum(UpdateLeadRequestPhoneNumbersType);

/** @internal */
export const UpdateLeadRequestPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestPhoneNumbersType
> = UpdateLeadRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestPhoneNumbersType$ {
  /** @deprecated use `UpdateLeadRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `UpdateLeadRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateLeadRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const UpdateLeadRequestPhoneNumbers$inboundSchema: z.ZodType<
  UpdateLeadRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateLeadRequestPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UpdateLeadRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateLeadRequestPhoneNumbers$outboundSchema: z.ZodType<
  UpdateLeadRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateLeadRequestPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestPhoneNumbers$ {
  /** @deprecated use `UpdateLeadRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `UpdateLeadRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `UpdateLeadRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = UpdateLeadRequestPhoneNumbers$Outbound;
}

export function updateLeadRequestPhoneNumbersToJSON(
  updateLeadRequestPhoneNumbers: UpdateLeadRequestPhoneNumbers,
): string {
  return JSON.stringify(
    UpdateLeadRequestPhoneNumbers$outboundSchema.parse(
      updateLeadRequestPhoneNumbers,
    ),
  );
}

export function updateLeadRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestEmailsType
> = z.nativeEnum(UpdateLeadRequestEmailsType);

/** @internal */
export const UpdateLeadRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestEmailsType
> = UpdateLeadRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestEmailsType$ {
  /** @deprecated use `UpdateLeadRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestEmailsType$inboundSchema;
  /** @deprecated use `UpdateLeadRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestEmailsType$outboundSchema;
}

/** @internal */
export const UpdateLeadRequestEmails$inboundSchema: z.ZodType<
  UpdateLeadRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateLeadRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type UpdateLeadRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateLeadRequestEmails$outboundSchema: z.ZodType<
  UpdateLeadRequestEmails$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateLeadRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestEmails$ {
  /** @deprecated use `UpdateLeadRequestEmails$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestEmails$inboundSchema;
  /** @deprecated use `UpdateLeadRequestEmails$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestEmails$outboundSchema;
  /** @deprecated use `UpdateLeadRequestEmails$Outbound` instead. */
  export type Outbound = UpdateLeadRequestEmails$Outbound;
}

export function updateLeadRequestEmailsToJSON(
  updateLeadRequestEmails: UpdateLeadRequestEmails,
): string {
  return JSON.stringify(
    UpdateLeadRequestEmails$outboundSchema.parse(updateLeadRequestEmails),
  );
}

export function updateLeadRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestEmails' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestValue6$inboundSchema: z.ZodType<
  UpdateLeadRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateLeadRequestValue6$Outbound = {};

/** @internal */
export const UpdateLeadRequestValue6$outboundSchema: z.ZodType<
  UpdateLeadRequestValue6$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestValue6$ {
  /** @deprecated use `UpdateLeadRequestValue6$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestValue6$inboundSchema;
  /** @deprecated use `UpdateLeadRequestValue6$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestValue6$outboundSchema;
  /** @deprecated use `UpdateLeadRequestValue6$Outbound` instead. */
  export type Outbound = UpdateLeadRequestValue6$Outbound;
}

export function updateLeadRequestValue6ToJSON(
  updateLeadRequestValue6: UpdateLeadRequestValue6,
): string {
  return JSON.stringify(
    UpdateLeadRequestValue6$outboundSchema.parse(updateLeadRequestValue6),
  );
}

export function updateLeadRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestValue6' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestValue4$inboundSchema: z.ZodType<
  UpdateLeadRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateLeadRequestValue4$Outbound = {};

/** @internal */
export const UpdateLeadRequestValue4$outboundSchema: z.ZodType<
  UpdateLeadRequestValue4$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestValue4$ {
  /** @deprecated use `UpdateLeadRequestValue4$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestValue4$inboundSchema;
  /** @deprecated use `UpdateLeadRequestValue4$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestValue4$outboundSchema;
  /** @deprecated use `UpdateLeadRequestValue4$Outbound` instead. */
  export type Outbound = UpdateLeadRequestValue4$Outbound;
}

export function updateLeadRequestValue4ToJSON(
  updateLeadRequestValue4: UpdateLeadRequestValue4,
): string {
  return JSON.stringify(
    UpdateLeadRequestValue4$outboundSchema.parse(updateLeadRequestValue4),
  );
}

export function updateLeadRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestValue4' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestValue$inboundSchema: z.ZodType<
  UpdateLeadRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateLeadRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateLeadRequestValue6$inboundSchema)),
]);

/** @internal */
export type UpdateLeadRequestValue$Outbound =
  | UpdateLeadRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateLeadRequestValue6$Outbound>;

/** @internal */
export const UpdateLeadRequestValue$outboundSchema: z.ZodType<
  UpdateLeadRequestValue$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestValue
> = z.union([
  z.lazy(() => UpdateLeadRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateLeadRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestValue$ {
  /** @deprecated use `UpdateLeadRequestValue$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestValue$inboundSchema;
  /** @deprecated use `UpdateLeadRequestValue$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestValue$outboundSchema;
  /** @deprecated use `UpdateLeadRequestValue$Outbound` instead. */
  export type Outbound = UpdateLeadRequestValue$Outbound;
}

export function updateLeadRequestValueToJSON(
  updateLeadRequestValue: UpdateLeadRequestValue,
): string {
  return JSON.stringify(
    UpdateLeadRequestValue$outboundSchema.parse(updateLeadRequestValue),
  );
}

export function updateLeadRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestValue' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestCustomFields$inboundSchema: z.ZodType<
  UpdateLeadRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateLeadRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateLeadRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type UpdateLeadRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | UpdateLeadRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateLeadRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateLeadRequestCustomFields$outboundSchema: z.ZodType<
  UpdateLeadRequestCustomFields$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateLeadRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateLeadRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestCustomFields$ {
  /** @deprecated use `UpdateLeadRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestCustomFields$inboundSchema;
  /** @deprecated use `UpdateLeadRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestCustomFields$outboundSchema;
  /** @deprecated use `UpdateLeadRequestCustomFields$Outbound` instead. */
  export type Outbound = UpdateLeadRequestCustomFields$Outbound;
}

export function updateLeadRequestCustomFieldsToJSON(
  updateLeadRequestCustomFields: UpdateLeadRequestCustomFields,
): string {
  return JSON.stringify(
    UpdateLeadRequestCustomFields$outboundSchema.parse(
      updateLeadRequestCustomFields,
    ),
  );
}

export function updateLeadRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateLeadRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateLeadRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateLeadRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateLeadRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestExtendPaths$ {
  /** @deprecated use `UpdateLeadRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateLeadRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateLeadRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateLeadRequestExtendPaths$Outbound;
}

export function updateLeadRequestExtendPathsToJSON(
  updateLeadRequestExtendPaths: UpdateLeadRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateLeadRequestExtendPaths$outboundSchema.parse(
      updateLeadRequestExtendPaths,
    ),
  );
}

export function updateLeadRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestPassThrough$inboundSchema: z.ZodType<
  UpdateLeadRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateLeadRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateLeadRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateLeadRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateLeadRequestPassThrough$outboundSchema: z.ZodType<
  UpdateLeadRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateLeadRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestPassThrough$ {
  /** @deprecated use `UpdateLeadRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateLeadRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateLeadRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateLeadRequestPassThrough$Outbound;
}

export function updateLeadRequestPassThroughToJSON(
  updateLeadRequestPassThrough: UpdateLeadRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateLeadRequestPassThrough$outboundSchema.parse(
      updateLeadRequestPassThrough,
    ),
  );
}

export function updateLeadRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequest$inboundSchema: z.ZodType<
  UpdateLeadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(UpdateLeadRequestCurrency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => UpdateLeadRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateLeadRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => UpdateLeadRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => UpdateLeadRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateLeadRequestEmails$inboundSchema))
    .optional(),
  custom_fields: z.array(
    z.lazy(() => UpdateLeadRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  pass_through: z.array(
    z.lazy(() => UpdateLeadRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateLeadRequest$Outbound = {
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<UpdateLeadRequestWebsites$Outbound> | undefined;
  addresses?: Array<UpdateLeadRequestAddresses$Outbound> | undefined;
  social_links?: Array<UpdateLeadRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<UpdateLeadRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<UpdateLeadRequestEmails$Outbound> | undefined;
  custom_fields?: Array<UpdateLeadRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  pass_through?: Array<UpdateLeadRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateLeadRequest$outboundSchema: z.ZodType<
  UpdateLeadRequest$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequest
> = z.object({
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(UpdateLeadRequestCurrency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => UpdateLeadRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateLeadRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => UpdateLeadRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => UpdateLeadRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateLeadRequestEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => UpdateLeadRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  passThrough: z.array(
    z.lazy(() => UpdateLeadRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequest$ {
  /** @deprecated use `UpdateLeadRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequest$inboundSchema;
  /** @deprecated use `UpdateLeadRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequest$outboundSchema;
  /** @deprecated use `UpdateLeadRequest$Outbound` instead. */
  export type Outbound = UpdateLeadRequest$Outbound;
}

export function updateLeadRequestToJSON(
  updateLeadRequest: UpdateLeadRequest,
): string {
  return JSON.stringify(
    UpdateLeadRequest$outboundSchema.parse(updateLeadRequest),
  );
}

export function updateLeadRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequest' from JSON`,
  );
}
