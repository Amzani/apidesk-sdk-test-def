/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * Specifies the category or role of the website associated with the lead. This property helps in distinguishing between different types of websites, such as personal, business, or social media, which can be crucial for targeted communication and marketing strategies. Ensure the type is a valid string that accurately represents the website's purpose.
 */
export const UpdateLeadRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category or role of the website associated with the lead. This property helps in distinguishing between different types of websites, such as personal, business, or social media, which can be crucial for targeted communication and marketing strategies. Ensure the type is a valid string that accurately represents the website's purpose.
 */
export type UpdateLeadRequestType = ClosedEnum<typeof UpdateLeadRequestType>;

export type UpdateLeadRequestWebsites = {
  /**
   * A unique identifier for each website entry associated with the lead. This ID is crucial for distinguishing between multiple websites and managing them individually within the lead's profile. Use this to reference specific websites when updating or querying lead data.
   */
  id?: string | null | undefined;
  /**
   * The URL of the website associated with the lead, which must be a valid web address. This field is required to ensure that each website entry has a corresponding URL, facilitating direct access to the lead's online resources or information.
   */
  url: string;
  /**
   * Specifies the category or role of the website associated with the lead. This property helps in distinguishing between different types of websites, such as personal, business, or social media, which can be crucial for targeted communication and marketing strategies. Ensure the type is a valid string that accurately represents the website's purpose.
   */
  type?: UpdateLeadRequestType | null | undefined;
};

/**
 * Defines the category or purpose of the address, such as home, work, or billing. This property helps in organizing and utilizing addresses effectively within the CRM system. Ensure the type is a valid string that accurately describes the address's role.
 */
export const UpdateLeadRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the category or purpose of the address, such as home, work, or billing. This property helps in organizing and utilizing addresses effectively within the CRM system. Ensure the type is a valid string that accurately describes the address's role.
 */
export type UpdateLeadRequestAddressesType = ClosedEnum<
  typeof UpdateLeadRequestAddressesType
>;

export type UpdateLeadRequestAddresses = {
  /**
   * A unique identifier for each address within the lead's address list. This ID is essential for distinguishing between different addresses when updating or managing them. Ensure the ID is a valid string that uniquely identifies an address entry.
   */
  id?: string | null | undefined;
  /**
   * Defines the category or purpose of the address, such as home, work, or billing. This property helps in organizing and utilizing addresses effectively within the CRM system. Ensure the type is a valid string that accurately describes the address's role.
   */
  type?: UpdateLeadRequestAddressesType | null | undefined;
  /**
   * Represents the full address in a single string format, useful when structured address data is unavailable. This field allows for flexibility in address entry, accommodating various formats and international addresses. Ensure the address string is complete and accurately reflects the location details.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address entry for the lead. This field helps in identifying or labeling the address, especially useful when multiple addresses are associated with a single lead. It should be a descriptive name that makes it easy to distinguish between different addresses.
   */
  name?: string | null | undefined;
  /**
   * The primary address line, typically including the street number, street name, and any apartment or suite number. This field is essential for accurately locating the lead's address and should be formatted according to standard postal address conventions.
   */
  line1?: string | null | undefined;
  /**
   * An additional address line used for supplementary information such as building name, floor number, or other relevant details. This field provides extra context to ensure precise address identification and should be used when necessary to complete the address.
   */
  line2?: string | null | undefined;
  /**
   * A tertiary address line for further address details that do not fit in the primary or secondary lines. This field can include any additional information needed to ensure the address is complete and accurate.
   */
  line3?: string | null | undefined;
  /**
   * A fourth address line for any remaining address details that need to be captured. This field ensures that all components of a complex address are recorded, supporting comprehensive address documentation.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the lead's address. This field is used to specify the exact number of the building or residence on the street, which is essential for accurate location identification. It should be a string that represents the numeric or alphanumeric identifier of the property.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name where the lead is located. This property helps in identifying the geographical area of the lead, which can be crucial for regional sales strategies and customer engagement. It should be a valid city name as a string.
   */
  city?: string | null | undefined;
  /**
   * The state or province name associated with the lead's address. This field is important for regional categorization and can affect tax calculations and shipping logistics. It should be a valid state or province name as a string.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code for the lead's address. This property is used for precise location mapping and can influence delivery services and regional marketing efforts. It should be a string that accurately represents the postal code format of the area.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the lead's address, following the ISO 3166-1 alpha-2 standard. This field is crucial for international operations and ensures that the address is recognized globally. It should be a two-letter country code string that complies with the ISO standard.
   */
  country?: string | null | undefined;
  /**
   * Specifies the latitude coordinate for the address location. This property is used to accurately place the lead's address on a map, which can be crucial for location-based services and analytics. Ensure the latitude is a valid string representation of a decimal number, typically ranging from -90 to 90.
   */
  latitude?: string | null | undefined;
  /**
   * Specifies the longitude coordinate for the address location. This property is essential for mapping the lead's address and integrating with geographic information systems. Ensure the longitude is a valid string representation of a decimal number, typically ranging from -180 to 180.
   */
  longitude?: string | null | undefined;
  /**
   * Represents the county or sublocality of the lead's address. This field helps in categorizing and organizing leads based on their geographic location, which can be useful for regional marketing strategies. Provide a valid string that accurately reflects the county name.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the lead's address. This property is important for personalizing communication and ensuring that correspondence is directed to the correct individual. Provide a valid string containing the contact's name.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the lead's address. This field is used to address the contact appropriately in communications, enhancing professionalism and personalization. Provide a valid string such as 'Mr.', 'Ms.', or 'Dr.' as applicable.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the lead's address. This field is used to update or add a contact number for the lead's location, ensuring accurate communication details. It should be formatted according to international standards if applicable.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the lead's address. This property allows you to update or specify a fax contact for the lead, which can be crucial for businesses that still utilize fax communication. Ensure the number is correctly formatted for successful transmission.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the lead's address. Use this field to update or provide an email contact for the lead's location, facilitating electronic communication. The email must be in a valid format to ensure deliverability.
   */
  email?: string | null | undefined;
  /**
   * The website URL related to the lead's address. This field is used to update or add a web presence for the lead, which can be important for verifying business legitimacy and providing additional contact methods. Ensure the URL is complete and valid.
   */
  website?: string | null | undefined;
  /**
   * Additional notes regarding the lead's address. This property allows you to include any extra information or context about the lead's location that might be relevant for CRM purposes. Keep the notes concise and relevant to the address.
   */
  notes?: string | null | undefined;
  /**
   * The row_version is a concurrency control mechanism used to prevent data conflicts during updates. It is a binary value that increments with each update to the address object, ensuring that changes are not overwritten by simultaneous operations. This property is optional but recommended for maintaining data integrity when updating lead addresses.
   */
  rowVersion?: string | null | undefined;
};

export type UpdateLeadRequestSocialLinks = {
  /**
   * The unique identifier for each social link within the array. This ID is used to specify which existing social link is being updated, ensuring that the correct link is modified. It is optional and should be included if you are updating an existing social link rather than adding a new one.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social link, which must be a valid web address. This field is required for each social link object and specifies the exact location of the lead's social media profile or page. Ensure the URL is correctly formatted to avoid errors during the update process.
   */
  url: string;
  /**
   * Specifies the type of social link, such as 'twitter' or 'linkedin'. This property helps categorize the social link and is optional, allowing for better organization and retrieval of social media information related to the lead.
   */
  type?: string | null | undefined;
};

/**
 * Indicates the category of the phone number, such as 'mobile', 'home', or 'work'. This optional field helps in identifying the context in which the phone number is used, aiding in better communication management with the lead.
 */
export const UpdateLeadRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Indicates the category of the phone number, such as 'mobile', 'home', or 'work'. This optional field helps in identifying the context in which the phone number is used, aiding in better communication management with the lead.
 */
export type UpdateLeadRequestPhoneNumbersType = ClosedEnum<
  typeof UpdateLeadRequestPhoneNumbersType
>;

export type UpdateLeadRequestPhoneNumbers = {
  /**
   * A unique identifier for each phone number entry within the array. This ID is used to specify which existing phone number record should be updated. If omitted, a new phone number entry will be created instead of updating an existing one.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, such as '+1' for the United States. This field ensures that the phone number is correctly formatted for international dialing and is optional if the country code remains unchanged.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code for the phone number, such as '323' for Los Angeles. This field helps in identifying the geographic region of the phone number and is optional if the area code remains unchanged.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number associated with the lead, excluding the country and area codes. This field is required to update or add a phone number entry and must be a valid string of digits representing the local number.
   */
  number: string;
  /**
   * Specifies the extension number associated with the primary phone number for the lead. This field is optional and should be used when the lead's phone number includes an extension. It helps in directing calls to the correct internal line within an organization.
   */
  extension?: string | null | undefined;
  /**
   * Indicates the category of the phone number, such as 'mobile', 'home', or 'work'. This optional field helps in identifying the context in which the phone number is used, aiding in better communication management with the lead.
   */
  type?: UpdateLeadRequestPhoneNumbersType | null | undefined;
};

/**
 * Specifies the category of the email address, such as 'work', 'personal', or 'other'. This helps in identifying the context in which the email is used, ensuring accurate communication with the lead. It is optional and should be a string that clearly defines the email's purpose.
 */
export const UpdateLeadRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the email address, such as 'work', 'personal', or 'other'. This helps in identifying the context in which the email is used, ensuring accurate communication with the lead. It is optional and should be a string that clearly defines the email's purpose.
 */
export type UpdateLeadRequestEmailsType = ClosedEnum<
  typeof UpdateLeadRequestEmailsType
>;

export type UpdateLeadRequestEmails = {
  /**
   * A unique identifier for each email address associated with the lead. This optional field is used to distinguish between different email entries, especially when updating or removing specific emails from the lead's contact information.
   */
  id?: string | null | undefined;
  /**
   * The primary email address for contacting the lead. This field is required and must be a valid email format, ensuring reliable communication. It is essential for sending updates, offers, or any correspondence to the lead.
   */
  email: string | null;
  /**
   * Specifies the category of the email address, such as 'work', 'personal', or 'other'. This helps in identifying the context in which the email is used, ensuring accurate communication with the lead. It is optional and should be a string that clearly defines the email's purpose.
   */
  type?: UpdateLeadRequestEmailsType | null | undefined;
};

export type UpdateLeadRequestValue6 = {};

export type UpdateLeadRequestValue4 = {};

/**
 * The custom_fields.value property is used to update specific custom field data for a lead. This allows for the inclusion of tailored information that may not be covered by standard fields, enhancing the flexibility of lead management. Ensure the value provided aligns with the expected data type and format for the custom field being updated.
 */
export type UpdateLeadRequestValue =
  | UpdateLeadRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateLeadRequestValue6>;

export type UpdateLeadRequestCustomFields = {
  /**
   * A mandatory unique identifier for each custom field, ensuring that each field can be distinctly recognized and managed. This ID is crucial for updating or referencing specific custom fields within the lead's data.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, which serves as a label for the data it holds. This is optional but recommended for clarity, as it helps in identifying the purpose of the custom field within the lead's profile.
   */
  name?: string | null | undefined;
  /**
   * Provides additional context or details about what the custom field represents. This optional description can help users understand the significance of the data captured by the custom field, enhancing the lead's profile information.
   */
  description?: string | null | undefined;
  /**
   * The custom_fields.value property is used to update specific custom field data for a lead. This allows for the inclusion of tailored information that may not be covered by standard fields, enhancing the flexibility of lead management. Ensure the value provided aligns with the expected data type and format for the custom field being updated.
   */
  value?:
    | UpdateLeadRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateLeadRequestValue6>
    | null
    | undefined;
};

export type UpdateLeadRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the lead data where the new value should be applied. This path must be valid and correctly formatted to ensure the update is applied to the intended field. It is crucial for pinpointing the exact data point for modification.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath location, which can be of any data type. This allows for flexibility in updating various types of data fields within the lead record. Ensure the value is compatible with the field type at the specified path to prevent errors.
   */
  value?: any | undefined;
};

export type UpdateLeadRequestPassThrough = {
  /**
   * The service_id within the pass_through array identifies the specific service for which the custom data or modifications are intended. This ensures that the data is correctly applied to the appropriate service integration, facilitating seamless updates across different platforms. The service_id must be a valid identifier for the target service.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that this pass-through should apply to. This is particularly useful when making multiple downstream requests in Unify calls, allowing you to track and manage each operation distinctly. Ensure the operation_id is unique within the context of your workflow to avoid conflicts.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows you to include additional properties for direct extension of the lead data. This can be used to add custom fields or metadata that are not part of the standard lead schema. Ensure that the properties added are relevant and necessary for your specific use case.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for making structured modifications to lead data using specified paths. Each object in the array should define a path and a corresponding value to update, allowing for precise and targeted data changes. This is useful for complex updates where multiple fields need to be adjusted simultaneously.
   */
  extendPaths?: Array<UpdateLeadRequestExtendPaths> | undefined;
};

export type UpdateLeadRequest = {
  /**
   * The full name of the lead that you want to update. This field is required to identify the lead within the CRM system and ensure that the correct record is modified. It must be a non-empty string that accurately represents the lead's name.
   */
  name: string;
  /**
   * The name of the company associated with the lead. This required field helps in categorizing and managing leads based on their business affiliations. Ensure the company name is a valid string that reflects the correct business entity.
   */
  companyName: string | null;
  /**
   * The unique identifier for the owner of the lead. This optional field allows you to specify or change the lead's owner within the CRM, facilitating proper assignment and follow-up. It should be a valid string that corresponds to an existing user ID in the system.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the individual who owns the lead. This optional field is used to display or update the owner's name in the CRM, aiding in personalizing lead management. It should be a valid string that matches the owner's actual name.
   */
  ownerName?: string | null | undefined;
  /**
   * The unique identifier for the company associated with the lead. This optional field is used to link the lead to a specific company within the CRM, ensuring accurate association and data integrity. It should be a valid string that corresponds to an existing company ID.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier for the lead you wish to update. This property is used to specify which lead record should be modified in the CRM system. Although not required in the request body, it is essential for identifying the lead when making changes.
   */
  leadId?: string | null | undefined;
  /**
   * Indicates the origin of the lead, such as a marketing campaign or referral. This information helps in tracking the effectiveness of different lead generation strategies. Ensure the source is accurately represented to maintain data integrity.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead, used to personalize communications and maintain accurate records. This field should contain only alphabetic characters and be formatted correctly to ensure proper data entry.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead, essential for identification and personalization in CRM interactions. Ensure this field is correctly spelled and formatted to maintain data accuracy.
   */
  lastName?: string | null | undefined;
  /**
   * A detailed description or notes about the lead, providing context or additional information that may be relevant for sales or marketing purposes. This field can include any pertinent details that help in understanding the lead's background or needs.
   */
  description?: string | null | undefined;
  /**
   * The prefix of the lead, such as Mr., Ms., or Dr. This field is used to address the lead appropriately in communications and is optional. It helps personalize interactions and should be a valid string if provided.
   */
  prefix?: string | null | undefined;
  /**
   * The job title of the lead, which provides context about their role within their organization. This information can be used to tailor communications and offers to the lead's professional position. It should be a valid string representing the lead's current job title.
   */
  title?: string | null | undefined;
  /**
   * The preferred language of the lead, specified using the ISO 639-1 code (e.g., 'EN' for English). This field ensures that communications are delivered in the lead's preferred language, enhancing engagement and understanding. It should be a valid ISO 639-1 language code.
   */
  language?: string | null | undefined;
  /**
   * The current status of the lead within the CRM system, which may indicate their engagement level or stage in the sales process. This field helps in categorizing and prioritizing leads for follow-up actions. It should be a valid status string that aligns with the CRM's lead management workflow.
   */
  status?: string | null | undefined;
  /**
   * The potential monetary value associated with the lead, which can be used to prioritize and strategize sales efforts. This field helps in assessing the lead's potential contribution to revenue and should be a valid numerical value representing currency.
   */
  monetaryAmount?: number | null | undefined;
  currency?: Currency | null | undefined;
  /**
   * The lead's fax number, used for sending and receiving documents via fax. This field should contain a valid fax number format, allowing for effective communication with the lead through traditional fax methods. Include this if the lead prefers or requires fax communication.
   */
  fax?: string | null | undefined;
  /**
   * A list of websites associated with the lead, providing additional online presence or resources related to the lead. Each entry in the array should represent a distinct website, allowing for comprehensive digital profiling of the lead.
   */
  websites?: Array<UpdateLeadRequestWebsites> | undefined;
  /**
   * A collection of address objects associated with the lead. This array allows you to update multiple addresses for a lead, providing flexibility in managing contact information. Each address object within the array should conform to the specified structure, including fields like id, type, and string.
   */
  addresses?: Array<UpdateLeadRequestAddresses> | undefined;
  /**
   * An array of social link objects associated with the lead. Each object within the array represents a distinct social media profile or link, allowing you to update or add multiple social links for the lead in a single request. This property is optional and can be omitted if no social links need updating.
   */
  socialLinks?: Array<UpdateLeadRequestSocialLinks> | undefined;
  /**
   * An array of phone number objects associated with the lead. Each object within the array should represent a distinct phone number entry, allowing for multiple contact numbers to be updated simultaneously. This property is optional and can be omitted if no phone number updates are needed.
   */
  phoneNumbers?: Array<UpdateLeadRequestPhoneNumbers> | undefined;
  /**
   * A collection of email objects associated with the lead. Each object within the array should represent a distinct email address, allowing for multiple contact points. This field is optional but crucial for maintaining comprehensive contact information.
   */
  emails?: Array<UpdateLeadRequestEmails> | undefined;
  /**
   * An array of custom fields that allows you to include additional, user-defined information about the lead. This is useful for capturing data that is not covered by standard fields, providing flexibility in lead management. Each entry in the array should conform to the structure defined for custom fields.
   */
  customFields?: Array<UpdateLeadRequestCustomFields> | undefined;
  /**
   * The tags property allows you to assign or update a list of tags associated with the lead. Tags are useful for categorizing leads and can help in filtering and segmenting them for targeted actions. Each tag should be a string that represents a meaningful label for the lead.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The pass_through property is designed to carry service-specific custom data or modifications when updating a lead. This allows for the integration of unique service requirements directly into the request, ensuring that all necessary data is transmitted. Each entry should be structured according to the service's specifications.
   */
  passThrough?: Array<UpdateLeadRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateLeadRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestType
> = z.nativeEnum(UpdateLeadRequestType);

/** @internal */
export const UpdateLeadRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestType
> = UpdateLeadRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestType$ {
  /** @deprecated use `UpdateLeadRequestType$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestType$inboundSchema;
  /** @deprecated use `UpdateLeadRequestType$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestType$outboundSchema;
}

/** @internal */
export const UpdateLeadRequestWebsites$inboundSchema: z.ZodType<
  UpdateLeadRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateLeadRequestType$inboundSchema).optional(),
});

/** @internal */
export type UpdateLeadRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateLeadRequestWebsites$outboundSchema: z.ZodType<
  UpdateLeadRequestWebsites$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateLeadRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestWebsites$ {
  /** @deprecated use `UpdateLeadRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestWebsites$inboundSchema;
  /** @deprecated use `UpdateLeadRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestWebsites$outboundSchema;
  /** @deprecated use `UpdateLeadRequestWebsites$Outbound` instead. */
  export type Outbound = UpdateLeadRequestWebsites$Outbound;
}

export function updateLeadRequestWebsitesToJSON(
  updateLeadRequestWebsites: UpdateLeadRequestWebsites,
): string {
  return JSON.stringify(
    UpdateLeadRequestWebsites$outboundSchema.parse(updateLeadRequestWebsites),
  );
}

export function updateLeadRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestWebsites' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestAddressesType
> = z.nativeEnum(UpdateLeadRequestAddressesType);

/** @internal */
export const UpdateLeadRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestAddressesType
> = UpdateLeadRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestAddressesType$ {
  /** @deprecated use `UpdateLeadRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestAddressesType$inboundSchema;
  /** @deprecated use `UpdateLeadRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestAddressesType$outboundSchema;
}

/** @internal */
export const UpdateLeadRequestAddresses$inboundSchema: z.ZodType<
  UpdateLeadRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateLeadRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UpdateLeadRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UpdateLeadRequestAddresses$outboundSchema: z.ZodType<
  UpdateLeadRequestAddresses$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateLeadRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestAddresses$ {
  /** @deprecated use `UpdateLeadRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestAddresses$inboundSchema;
  /** @deprecated use `UpdateLeadRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestAddresses$outboundSchema;
  /** @deprecated use `UpdateLeadRequestAddresses$Outbound` instead. */
  export type Outbound = UpdateLeadRequestAddresses$Outbound;
}

export function updateLeadRequestAddressesToJSON(
  updateLeadRequestAddresses: UpdateLeadRequestAddresses,
): string {
  return JSON.stringify(
    UpdateLeadRequestAddresses$outboundSchema.parse(updateLeadRequestAddresses),
  );
}

export function updateLeadRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestAddresses' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestSocialLinks$inboundSchema: z.ZodType<
  UpdateLeadRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateLeadRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateLeadRequestSocialLinks$outboundSchema: z.ZodType<
  UpdateLeadRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestSocialLinks$ {
  /** @deprecated use `UpdateLeadRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestSocialLinks$inboundSchema;
  /** @deprecated use `UpdateLeadRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestSocialLinks$outboundSchema;
  /** @deprecated use `UpdateLeadRequestSocialLinks$Outbound` instead. */
  export type Outbound = UpdateLeadRequestSocialLinks$Outbound;
}

export function updateLeadRequestSocialLinksToJSON(
  updateLeadRequestSocialLinks: UpdateLeadRequestSocialLinks,
): string {
  return JSON.stringify(
    UpdateLeadRequestSocialLinks$outboundSchema.parse(
      updateLeadRequestSocialLinks,
    ),
  );
}

export function updateLeadRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestPhoneNumbersType
> = z.nativeEnum(UpdateLeadRequestPhoneNumbersType);

/** @internal */
export const UpdateLeadRequestPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestPhoneNumbersType
> = UpdateLeadRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestPhoneNumbersType$ {
  /** @deprecated use `UpdateLeadRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `UpdateLeadRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateLeadRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const UpdateLeadRequestPhoneNumbers$inboundSchema: z.ZodType<
  UpdateLeadRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateLeadRequestPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UpdateLeadRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateLeadRequestPhoneNumbers$outboundSchema: z.ZodType<
  UpdateLeadRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateLeadRequestPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestPhoneNumbers$ {
  /** @deprecated use `UpdateLeadRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `UpdateLeadRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `UpdateLeadRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = UpdateLeadRequestPhoneNumbers$Outbound;
}

export function updateLeadRequestPhoneNumbersToJSON(
  updateLeadRequestPhoneNumbers: UpdateLeadRequestPhoneNumbers,
): string {
  return JSON.stringify(
    UpdateLeadRequestPhoneNumbers$outboundSchema.parse(
      updateLeadRequestPhoneNumbers,
    ),
  );
}

export function updateLeadRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestEmailsType
> = z.nativeEnum(UpdateLeadRequestEmailsType);

/** @internal */
export const UpdateLeadRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateLeadRequestEmailsType
> = UpdateLeadRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestEmailsType$ {
  /** @deprecated use `UpdateLeadRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestEmailsType$inboundSchema;
  /** @deprecated use `UpdateLeadRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestEmailsType$outboundSchema;
}

/** @internal */
export const UpdateLeadRequestEmails$inboundSchema: z.ZodType<
  UpdateLeadRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateLeadRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type UpdateLeadRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateLeadRequestEmails$outboundSchema: z.ZodType<
  UpdateLeadRequestEmails$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateLeadRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestEmails$ {
  /** @deprecated use `UpdateLeadRequestEmails$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestEmails$inboundSchema;
  /** @deprecated use `UpdateLeadRequestEmails$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestEmails$outboundSchema;
  /** @deprecated use `UpdateLeadRequestEmails$Outbound` instead. */
  export type Outbound = UpdateLeadRequestEmails$Outbound;
}

export function updateLeadRequestEmailsToJSON(
  updateLeadRequestEmails: UpdateLeadRequestEmails,
): string {
  return JSON.stringify(
    UpdateLeadRequestEmails$outboundSchema.parse(updateLeadRequestEmails),
  );
}

export function updateLeadRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestEmails' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestValue6$inboundSchema: z.ZodType<
  UpdateLeadRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateLeadRequestValue6$Outbound = {};

/** @internal */
export const UpdateLeadRequestValue6$outboundSchema: z.ZodType<
  UpdateLeadRequestValue6$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestValue6$ {
  /** @deprecated use `UpdateLeadRequestValue6$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestValue6$inboundSchema;
  /** @deprecated use `UpdateLeadRequestValue6$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestValue6$outboundSchema;
  /** @deprecated use `UpdateLeadRequestValue6$Outbound` instead. */
  export type Outbound = UpdateLeadRequestValue6$Outbound;
}

export function updateLeadRequestValue6ToJSON(
  updateLeadRequestValue6: UpdateLeadRequestValue6,
): string {
  return JSON.stringify(
    UpdateLeadRequestValue6$outboundSchema.parse(updateLeadRequestValue6),
  );
}

export function updateLeadRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestValue6' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestValue4$inboundSchema: z.ZodType<
  UpdateLeadRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateLeadRequestValue4$Outbound = {};

/** @internal */
export const UpdateLeadRequestValue4$outboundSchema: z.ZodType<
  UpdateLeadRequestValue4$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestValue4$ {
  /** @deprecated use `UpdateLeadRequestValue4$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestValue4$inboundSchema;
  /** @deprecated use `UpdateLeadRequestValue4$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestValue4$outboundSchema;
  /** @deprecated use `UpdateLeadRequestValue4$Outbound` instead. */
  export type Outbound = UpdateLeadRequestValue4$Outbound;
}

export function updateLeadRequestValue4ToJSON(
  updateLeadRequestValue4: UpdateLeadRequestValue4,
): string {
  return JSON.stringify(
    UpdateLeadRequestValue4$outboundSchema.parse(updateLeadRequestValue4),
  );
}

export function updateLeadRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestValue4' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestValue$inboundSchema: z.ZodType<
  UpdateLeadRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateLeadRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateLeadRequestValue6$inboundSchema)),
]);

/** @internal */
export type UpdateLeadRequestValue$Outbound =
  | UpdateLeadRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateLeadRequestValue6$Outbound>;

/** @internal */
export const UpdateLeadRequestValue$outboundSchema: z.ZodType<
  UpdateLeadRequestValue$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestValue
> = z.union([
  z.lazy(() => UpdateLeadRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateLeadRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestValue$ {
  /** @deprecated use `UpdateLeadRequestValue$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestValue$inboundSchema;
  /** @deprecated use `UpdateLeadRequestValue$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestValue$outboundSchema;
  /** @deprecated use `UpdateLeadRequestValue$Outbound` instead. */
  export type Outbound = UpdateLeadRequestValue$Outbound;
}

export function updateLeadRequestValueToJSON(
  updateLeadRequestValue: UpdateLeadRequestValue,
): string {
  return JSON.stringify(
    UpdateLeadRequestValue$outboundSchema.parse(updateLeadRequestValue),
  );
}

export function updateLeadRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestValue' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestCustomFields$inboundSchema: z.ZodType<
  UpdateLeadRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateLeadRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateLeadRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type UpdateLeadRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | UpdateLeadRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateLeadRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateLeadRequestCustomFields$outboundSchema: z.ZodType<
  UpdateLeadRequestCustomFields$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateLeadRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateLeadRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestCustomFields$ {
  /** @deprecated use `UpdateLeadRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestCustomFields$inboundSchema;
  /** @deprecated use `UpdateLeadRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestCustomFields$outboundSchema;
  /** @deprecated use `UpdateLeadRequestCustomFields$Outbound` instead. */
  export type Outbound = UpdateLeadRequestCustomFields$Outbound;
}

export function updateLeadRequestCustomFieldsToJSON(
  updateLeadRequestCustomFields: UpdateLeadRequestCustomFields,
): string {
  return JSON.stringify(
    UpdateLeadRequestCustomFields$outboundSchema.parse(
      updateLeadRequestCustomFields,
    ),
  );
}

export function updateLeadRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateLeadRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateLeadRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateLeadRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateLeadRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestExtendPaths$ {
  /** @deprecated use `UpdateLeadRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateLeadRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateLeadRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateLeadRequestExtendPaths$Outbound;
}

export function updateLeadRequestExtendPathsToJSON(
  updateLeadRequestExtendPaths: UpdateLeadRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateLeadRequestExtendPaths$outboundSchema.parse(
      updateLeadRequestExtendPaths,
    ),
  );
}

export function updateLeadRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequestPassThrough$inboundSchema: z.ZodType<
  UpdateLeadRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateLeadRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateLeadRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateLeadRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateLeadRequestPassThrough$outboundSchema: z.ZodType<
  UpdateLeadRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateLeadRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequestPassThrough$ {
  /** @deprecated use `UpdateLeadRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateLeadRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateLeadRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateLeadRequestPassThrough$Outbound;
}

export function updateLeadRequestPassThroughToJSON(
  updateLeadRequestPassThrough: UpdateLeadRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateLeadRequestPassThrough$outboundSchema.parse(
      updateLeadRequestPassThrough,
    ),
  );
}

export function updateLeadRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateLeadRequest$inboundSchema: z.ZodType<
  UpdateLeadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => UpdateLeadRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateLeadRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => UpdateLeadRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => UpdateLeadRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateLeadRequestEmails$inboundSchema))
    .optional(),
  custom_fields: z.array(
    z.lazy(() => UpdateLeadRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  pass_through: z.array(
    z.lazy(() => UpdateLeadRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateLeadRequest$Outbound = {
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<UpdateLeadRequestWebsites$Outbound> | undefined;
  addresses?: Array<UpdateLeadRequestAddresses$Outbound> | undefined;
  social_links?: Array<UpdateLeadRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<UpdateLeadRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<UpdateLeadRequestEmails$Outbound> | undefined;
  custom_fields?: Array<UpdateLeadRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  pass_through?: Array<UpdateLeadRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateLeadRequest$outboundSchema: z.ZodType<
  UpdateLeadRequest$Outbound,
  z.ZodTypeDef,
  UpdateLeadRequest
> = z.object({
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => UpdateLeadRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateLeadRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => UpdateLeadRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => UpdateLeadRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateLeadRequestEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => UpdateLeadRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  passThrough: z.array(
    z.lazy(() => UpdateLeadRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadRequest$ {
  /** @deprecated use `UpdateLeadRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadRequest$inboundSchema;
  /** @deprecated use `UpdateLeadRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadRequest$outboundSchema;
  /** @deprecated use `UpdateLeadRequest$Outbound` instead. */
  export type Outbound = UpdateLeadRequest$Outbound;
}

export function updateLeadRequestToJSON(
  updateLeadRequest: UpdateLeadRequest,
): string {
  return JSON.stringify(
    UpdateLeadRequest$outboundSchema.parse(updateLeadRequest),
  );
}

export function updateLeadRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadRequest' from JSON`,
  );
}
