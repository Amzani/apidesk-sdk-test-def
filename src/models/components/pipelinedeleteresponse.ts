/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The root object containing the response data for the delete operation. This object encapsulates all relevant information returned by the API after a pipeline is successfully deleted. It is always included in the response to confirm the operation's success and to provide any additional metadata or status information related to the deletion process.
 */
export type PipelineDeleteResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Pipeline deleted
 */
export type PipelineDeleteResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the DELETE operation, with a 200 status code confirming successful deletion of the specified pipeline. It is always included in the response to inform the client of the operation's outcome.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'OK' for a successful operation. It helps in quickly understanding the result of the request without needing to interpret the numeric status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string uniquely identifies which service was used to perform the pipeline deletion, especially useful when multiple services are integrated. It is always included to ensure clarity about the service context of the operation.
   */
  service: string;
  /**
   * The name of the unified API resource that was targeted by the operation. This string indicates the specific resource type, such as 'pipeline', that was affected by the DELETE request. It is crucial for confirming that the intended resource was acted upon.
   */
  resource: string;
  /**
   * The specific operation that was performed, represented as a string. In this context, it will indicate 'delete', confirming that the action taken was the removal of a pipeline. This is included to provide a clear record of the action executed by the API.
   */
  operation: string;
  /**
   * The root object containing the response data for the delete operation. This object encapsulates all relevant information returned by the API after a pipeline is successfully deleted. It is always included in the response to confirm the operation's success and to provide any additional metadata or status information related to the deletion process.
   */
  data: PipelineDeleteResponseUnifiedId;
};

/** @internal */
export const PipelineDeleteResponseUnifiedId$inboundSchema: z.ZodType<
  PipelineDeleteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PipelineDeleteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const PipelineDeleteResponseUnifiedId$outboundSchema: z.ZodType<
  PipelineDeleteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  PipelineDeleteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelineDeleteResponseUnifiedId$ {
  /** @deprecated use `PipelineDeleteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = PipelineDeleteResponseUnifiedId$inboundSchema;
  /** @deprecated use `PipelineDeleteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = PipelineDeleteResponseUnifiedId$outboundSchema;
  /** @deprecated use `PipelineDeleteResponseUnifiedId$Outbound` instead. */
  export type Outbound = PipelineDeleteResponseUnifiedId$Outbound;
}

export function pipelineDeleteResponseUnifiedIdToJSON(
  pipelineDeleteResponseUnifiedId: PipelineDeleteResponseUnifiedId,
): string {
  return JSON.stringify(
    PipelineDeleteResponseUnifiedId$outboundSchema.parse(
      pipelineDeleteResponseUnifiedId,
    ),
  );
}

export function pipelineDeleteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<PipelineDeleteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelineDeleteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelineDeleteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const PipelineDeleteResponse$inboundSchema: z.ZodType<
  PipelineDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelineDeleteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type PipelineDeleteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: PipelineDeleteResponseUnifiedId$Outbound;
};

/** @internal */
export const PipelineDeleteResponse$outboundSchema: z.ZodType<
  PipelineDeleteResponse$Outbound,
  z.ZodTypeDef,
  PipelineDeleteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelineDeleteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelineDeleteResponse$ {
  /** @deprecated use `PipelineDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = PipelineDeleteResponse$inboundSchema;
  /** @deprecated use `PipelineDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = PipelineDeleteResponse$outboundSchema;
  /** @deprecated use `PipelineDeleteResponse$Outbound` instead. */
  export type Outbound = PipelineDeleteResponse$Outbound;
}

export function pipelineDeleteResponseToJSON(
  pipelineDeleteResponse: PipelineDeleteResponse,
): string {
  return JSON.stringify(
    PipelineDeleteResponse$outboundSchema.parse(pipelineDeleteResponse),
  );
}

export function pipelineDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<PipelineDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelineDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelineDeleteResponse' from JSON`,
  );
}
