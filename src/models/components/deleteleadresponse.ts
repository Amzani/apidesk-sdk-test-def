/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the unique identifier of the lead that was deleted. It confirms the successful execution of the delete operation by providing the ID of the lead that has been removed from the CRM system. The structure is an object with a single key-value pair.
 */
export type DeleteLeadResponseUnifiedId = {
  /**
   * The unique identifier of the lead that was deleted. This string value confirms which specific lead entry was successfully removed from the CRM system, ensuring developers can verify the correct resource was targeted in the delete operation.
   */
  id: string;
};

/**
 * Lead deleted
 */
export type DeleteLeadResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the delete operation, with a 200 status code confirming that the lead was successfully removed from the CRM system. It is crucial for verifying the success of the operation.
   */
  statusCode: number;
  /**
   * A string representation of the HTTP response status. This property provides a textual description of the status code, such as 'OK' for a successful deletion, helping developers quickly understand the outcome of the operation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which service within the Apideck ecosystem processed the delete request, useful for tracking and logging purposes.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the operation. This string indicates the specific resource type, such as 'lead', that was deleted, providing context about the nature of the operation.
   */
  resource: string;
  /**
   * A string indicating the type of operation performed, in this case, 'delete'. This property confirms the action taken on the resource, ensuring clarity about the operation executed on the lead.
   */
  operation: string;
  /**
   * This object contains the unique identifier of the lead that was deleted. It confirms the successful execution of the delete operation by providing the ID of the lead that has been removed from the CRM system. The structure is an object with a single key-value pair.
   */
  data: DeleteLeadResponseUnifiedId;
};

/** @internal */
export const DeleteLeadResponseUnifiedId$inboundSchema: z.ZodType<
  DeleteLeadResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteLeadResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const DeleteLeadResponseUnifiedId$outboundSchema: z.ZodType<
  DeleteLeadResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  DeleteLeadResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteLeadResponseUnifiedId$ {
  /** @deprecated use `DeleteLeadResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = DeleteLeadResponseUnifiedId$inboundSchema;
  /** @deprecated use `DeleteLeadResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = DeleteLeadResponseUnifiedId$outboundSchema;
  /** @deprecated use `DeleteLeadResponseUnifiedId$Outbound` instead. */
  export type Outbound = DeleteLeadResponseUnifiedId$Outbound;
}

export function deleteLeadResponseUnifiedIdToJSON(
  deleteLeadResponseUnifiedId: DeleteLeadResponseUnifiedId,
): string {
  return JSON.stringify(
    DeleteLeadResponseUnifiedId$outboundSchema.parse(
      deleteLeadResponseUnifiedId,
    ),
  );
}

export function deleteLeadResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<DeleteLeadResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteLeadResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteLeadResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const DeleteLeadResponse$inboundSchema: z.ZodType<
  DeleteLeadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteLeadResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type DeleteLeadResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: DeleteLeadResponseUnifiedId$Outbound;
};

/** @internal */
export const DeleteLeadResponse$outboundSchema: z.ZodType<
  DeleteLeadResponse$Outbound,
  z.ZodTypeDef,
  DeleteLeadResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteLeadResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteLeadResponse$ {
  /** @deprecated use `DeleteLeadResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteLeadResponse$inboundSchema;
  /** @deprecated use `DeleteLeadResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteLeadResponse$outboundSchema;
  /** @deprecated use `DeleteLeadResponse$Outbound` instead. */
  export type Outbound = DeleteLeadResponse$Outbound;
}

export function deleteLeadResponseToJSON(
  deleteLeadResponse: DeleteLeadResponse,
): string {
  return JSON.stringify(
    DeleteLeadResponse$outboundSchema.parse(deleteLeadResponse),
  );
}

export function deleteLeadResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteLeadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteLeadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteLeadResponse' from JSON`,
  );
}
