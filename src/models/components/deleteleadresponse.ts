/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains details about the lead that was deleted, specifically focusing on the unique identifier of the lead. It serves as a confirmation that the specified lead has been successfully removed from the CRM system. The structure of this object is crucial for verifying the deletion operation's success.
 */
export type DeleteLeadResponseUnifiedId = {
  /**
   * The unique identifier of the lead that was deleted. This string confirms the specific lead that has been removed from the CRM system, ensuring that the correct record was targeted and successfully deleted during the operation.
   */
  id: string;
};

/**
 * Lead deleted
 */
export type DeleteLeadResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the delete operation, with a successful deletion typically returning a 200 status code. It helps developers confirm that the lead has been successfully removed from the CRM system.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable summary of the operation's outcome, such as 'OK' for a successful deletion, aiding in quick understanding of the response.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which service integration was used to perform the delete operation, helping developers track and manage service-specific actions within the CRM.
   */
  service: string;
  /**
   * The name of the Unified API resource that was affected by the operation. This string specifies the type of resource, such as 'lead', that was deleted, providing context about what data was modified in the CRM system.
   */
  resource: string;
  /**
   * The specific operation that was performed, in this case, 'delete'. This string indicates the action taken on the resource, confirming that the lead was removed from the CRM system.
   */
  operation: string;
  /**
   * This object contains details about the lead that was deleted, specifically focusing on the unique identifier of the lead. It serves as a confirmation that the specified lead has been successfully removed from the CRM system. The structure of this object is crucial for verifying the deletion operation's success.
   */
  data: DeleteLeadResponseUnifiedId;
};

/** @internal */
export const DeleteLeadResponseUnifiedId$inboundSchema: z.ZodType<
  DeleteLeadResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteLeadResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const DeleteLeadResponseUnifiedId$outboundSchema: z.ZodType<
  DeleteLeadResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  DeleteLeadResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteLeadResponseUnifiedId$ {
  /** @deprecated use `DeleteLeadResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = DeleteLeadResponseUnifiedId$inboundSchema;
  /** @deprecated use `DeleteLeadResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = DeleteLeadResponseUnifiedId$outboundSchema;
  /** @deprecated use `DeleteLeadResponseUnifiedId$Outbound` instead. */
  export type Outbound = DeleteLeadResponseUnifiedId$Outbound;
}

export function deleteLeadResponseUnifiedIdToJSON(
  deleteLeadResponseUnifiedId: DeleteLeadResponseUnifiedId,
): string {
  return JSON.stringify(
    DeleteLeadResponseUnifiedId$outboundSchema.parse(
      deleteLeadResponseUnifiedId,
    ),
  );
}

export function deleteLeadResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<DeleteLeadResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteLeadResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteLeadResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const DeleteLeadResponse$inboundSchema: z.ZodType<
  DeleteLeadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteLeadResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type DeleteLeadResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: DeleteLeadResponseUnifiedId$Outbound;
};

/** @internal */
export const DeleteLeadResponse$outboundSchema: z.ZodType<
  DeleteLeadResponse$Outbound,
  z.ZodTypeDef,
  DeleteLeadResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteLeadResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteLeadResponse$ {
  /** @deprecated use `DeleteLeadResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteLeadResponse$inboundSchema;
  /** @deprecated use `DeleteLeadResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteLeadResponse$outboundSchema;
  /** @deprecated use `DeleteLeadResponse$Outbound` instead. */
  export type Outbound = DeleteLeadResponse$Outbound;
}

export function deleteLeadResponseToJSON(
  deleteLeadResponse: DeleteLeadResponse,
): string {
  return JSON.stringify(
    DeleteLeadResponse$outboundSchema.parse(deleteLeadResponse),
  );
}

export function deleteLeadResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteLeadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteLeadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteLeadResponse' from JSON`,
  );
}
