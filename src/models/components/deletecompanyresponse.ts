/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains details about the company record that was deleted. It serves as a confirmation of the deletion operation, ensuring that the specified company has been successfully removed from the CRM system. The object includes the unique identifier of the deleted resource, which is crucial for tracking and logging purposes.
 */
export type DeleteCompanyResponseUnifiedId = {
  /**
   * The unique identifier of the company record that was deleted. This string value confirms the specific resource that has been removed from the CRM system, allowing developers to verify the successful execution of the delete operation. It is essential for maintaining accurate records and ensuring that the correct company entry was deleted.
   */
  id: string;
};

/**
 * Company deleted
 */
export type DeleteCompanyResponse = {
  /**
   * The HTTP response status code indicating the result of the delete operation. A status code of 200 confirms that the company record was successfully deleted from the CRM system. This integer value is crucial for error handling and validation of the operation's success.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful operation. This string provides a human-readable confirmation of the operation's outcome, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the delete request. This string helps identify which service handled the operation, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the delete operation. This string specifies the type of resource affected, ensuring clarity in multi-resource environments.
   */
  resource: string;
  /**
   * The specific operation performed, in this case, 'delete'. This string confirms the action taken on the resource, providing context within the API's operational log.
   */
  operation: string;
  /**
   * This object contains details about the company record that was deleted. It serves as a confirmation of the deletion operation, ensuring that the specified company has been successfully removed from the CRM system. The object includes the unique identifier of the deleted resource, which is crucial for tracking and logging purposes.
   */
  data: DeleteCompanyResponseUnifiedId;
};

/** @internal */
export const DeleteCompanyResponseUnifiedId$inboundSchema: z.ZodType<
  DeleteCompanyResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteCompanyResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const DeleteCompanyResponseUnifiedId$outboundSchema: z.ZodType<
  DeleteCompanyResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  DeleteCompanyResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCompanyResponseUnifiedId$ {
  /** @deprecated use `DeleteCompanyResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = DeleteCompanyResponseUnifiedId$inboundSchema;
  /** @deprecated use `DeleteCompanyResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = DeleteCompanyResponseUnifiedId$outboundSchema;
  /** @deprecated use `DeleteCompanyResponseUnifiedId$Outbound` instead. */
  export type Outbound = DeleteCompanyResponseUnifiedId$Outbound;
}

export function deleteCompanyResponseUnifiedIdToJSON(
  deleteCompanyResponseUnifiedId: DeleteCompanyResponseUnifiedId,
): string {
  return JSON.stringify(
    DeleteCompanyResponseUnifiedId$outboundSchema.parse(
      deleteCompanyResponseUnifiedId,
    ),
  );
}

export function deleteCompanyResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCompanyResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCompanyResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCompanyResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const DeleteCompanyResponse$inboundSchema: z.ZodType<
  DeleteCompanyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteCompanyResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type DeleteCompanyResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: DeleteCompanyResponseUnifiedId$Outbound;
};

/** @internal */
export const DeleteCompanyResponse$outboundSchema: z.ZodType<
  DeleteCompanyResponse$Outbound,
  z.ZodTypeDef,
  DeleteCompanyResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteCompanyResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCompanyResponse$ {
  /** @deprecated use `DeleteCompanyResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteCompanyResponse$inboundSchema;
  /** @deprecated use `DeleteCompanyResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteCompanyResponse$outboundSchema;
  /** @deprecated use `DeleteCompanyResponse$Outbound` instead. */
  export type Outbound = DeleteCompanyResponse$Outbound;
}

export function deleteCompanyResponseToJSON(
  deleteCompanyResponse: DeleteCompanyResponse,
): string {
  return JSON.stringify(
    DeleteCompanyResponse$outboundSchema.parse(deleteCompanyResponse),
  );
}

export function deleteCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCompanyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCompanyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCompanyResponse' from JSON`,
  );
}
