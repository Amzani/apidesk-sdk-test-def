/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The root object containing the response data for the delete operation. This object encapsulates all relevant information returned by the API after a user has been successfully deleted from the CRM system. It is always included in the response to confirm the operation's success and to provide any additional metadata or details about the deletion process.
 */
export type UserDeleteResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * User deleted
 */
export type UserDeleteResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the delete operation, with a 200 status code signifying that the user has been successfully removed from the CRM system. It is always included in the response to inform the client about the outcome of their request.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'OK' for a successful deletion. It is included to offer clarity on the operation's result, complementing the numeric status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which service within the Apideck ecosystem processed the delete request, especially useful when multiple services are integrated. It is always included to ensure transparency about the service handling the request.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the operation. This string specifies the type of resource, such as 'user', that the delete operation was performed on. It is included to confirm the resource context of the request and response.
   */
  resource: string;
  /**
   * The specific operation that was performed, in this case, 'delete'. This string indicates the action taken on the resource, confirming that the intended operation was executed. It is always included to provide a clear record of the action carried out by the API.
   */
  operation: string;
  /**
   * The root object containing the response data for the delete operation. This object encapsulates all relevant information returned by the API after a user has been successfully deleted from the CRM system. It is always included in the response to confirm the operation's success and to provide any additional metadata or details about the deletion process.
   */
  data: UserDeleteResponseUnifiedId;
};

/** @internal */
export const UserDeleteResponseUnifiedId$inboundSchema: z.ZodType<
  UserDeleteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UserDeleteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UserDeleteResponseUnifiedId$outboundSchema: z.ZodType<
  UserDeleteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UserDeleteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDeleteResponseUnifiedId$ {
  /** @deprecated use `UserDeleteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UserDeleteResponseUnifiedId$inboundSchema;
  /** @deprecated use `UserDeleteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UserDeleteResponseUnifiedId$outboundSchema;
  /** @deprecated use `UserDeleteResponseUnifiedId$Outbound` instead. */
  export type Outbound = UserDeleteResponseUnifiedId$Outbound;
}

export function userDeleteResponseUnifiedIdToJSON(
  userDeleteResponseUnifiedId: UserDeleteResponseUnifiedId,
): string {
  return JSON.stringify(
    UserDeleteResponseUnifiedId$outboundSchema.parse(
      userDeleteResponseUnifiedId,
    ),
  );
}

export function userDeleteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UserDeleteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserDeleteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserDeleteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UserDeleteResponse$inboundSchema: z.ZodType<
  UserDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UserDeleteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UserDeleteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UserDeleteResponseUnifiedId$Outbound;
};

/** @internal */
export const UserDeleteResponse$outboundSchema: z.ZodType<
  UserDeleteResponse$Outbound,
  z.ZodTypeDef,
  UserDeleteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UserDeleteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDeleteResponse$ {
  /** @deprecated use `UserDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = UserDeleteResponse$inboundSchema;
  /** @deprecated use `UserDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = UserDeleteResponse$outboundSchema;
  /** @deprecated use `UserDeleteResponse$Outbound` instead. */
  export type Outbound = UserDeleteResponse$Outbound;
}

export function userDeleteResponseToJSON(
  userDeleteResponse: UserDeleteResponse,
): string {
  return JSON.stringify(
    UserDeleteResponse$outboundSchema.parse(userDeleteResponse),
  );
}

export function userDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserDeleteResponse' from JSON`,
  );
}
