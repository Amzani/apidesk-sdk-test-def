/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Note,
  Note$inboundSchema,
  Note$Outbound,
  Note$outboundSchema,
} from "./note.js";

/**
 * Note
 */
export type GetNoteResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the GET request, with '200' representing a successful retrieval of the note. It helps developers understand the outcome of their API call.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'OK' for a successful request, aiding in quick interpretation of the response.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the note was retrieved. This string identifies the specific service integration used in the request, which is crucial when multiple integrations are involved.
   */
  service: string;
  /**
   * The name of the unified API resource accessed, in this case, a 'note'. This string helps developers understand which type of resource was involved in the operation, aligning with the unified API structure.
   */
  resource: string;
  /**
   * The specific operation performed by the API, identified as 'notesOne'. This string indicates the action taken, which in this context is retrieving a single note, providing clarity on the API's function.
   */
  operation: string;
  /**
   * This object contains all the details of the specific note retrieved from the CRM system. It serves as the main container for the note's information, including its unique identifier, title, content, and owner details. The structure of this object is crucial for accessing the individual properties of the note.
   */
  data: Note;
};

/** @internal */
export const GetNoteResponse$inboundSchema: z.ZodType<
  GetNoteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: Note$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetNoteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Note$Outbound;
};

/** @internal */
export const GetNoteResponse$outboundSchema: z.ZodType<
  GetNoteResponse$Outbound,
  z.ZodTypeDef,
  GetNoteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: Note$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNoteResponse$ {
  /** @deprecated use `GetNoteResponse$inboundSchema` instead. */
  export const inboundSchema = GetNoteResponse$inboundSchema;
  /** @deprecated use `GetNoteResponse$outboundSchema` instead. */
  export const outboundSchema = GetNoteResponse$outboundSchema;
  /** @deprecated use `GetNoteResponse$Outbound` instead. */
  export type Outbound = GetNoteResponse$Outbound;
}

export function getNoteResponseToJSON(
  getNoteResponse: GetNoteResponse,
): string {
  return JSON.stringify(GetNoteResponse$outboundSchema.parse(getNoteResponse));
}

export function getNoteResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetNoteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNoteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNoteResponse' from JSON`,
  );
}
