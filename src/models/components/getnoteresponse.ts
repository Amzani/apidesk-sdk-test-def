/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This property contains any custom mappings that have been configured for the note resource. It is an object that includes key-value pairs representing these mappings, which can be used to extend or modify the default behavior of the note within the CRM system. This field is included in the response only if custom mappings are present.
 */
export type GetNoteResponseCustomMappings = {};

export type GetNoteResponseExtendPaths = {
  /**
   * This property contains a JSONPath string that specifies the exact location within the note's data structure where a particular value should be applied. The format follows standard JSONPath syntax, allowing precise targeting of nested fields. It is crucial for operations that involve modifying or accessing specific parts of the note's data.
   */
  path: string;
  /**
   * This property holds the value that is to be set at the specified JSONPath within the note's data. The value can be of any data type, including string, number, object, or array, depending on what is appropriate for the targeted path. This flexibility allows for dynamic updates or retrievals of note data based on the operation's requirements.
   */
  value?: any | undefined;
};

export type GetNoteResponsePassThrough = {
  /**
   * A string identifier for the service to which the pass_through data should be applied. This ensures that the correct service processes the additional data, which is crucial when multiple services are integrated.
   */
  serviceId: string;
  /**
   * An optional string identifier for a specific workflow operation that the pass_through data should be applied to. This is particularly useful in scenarios where a single request triggers multiple downstream operations, ensuring the correct operation receives the data.
   */
  operationId?: string | undefined;
  /**
   * An object that allows for direct extension with any properties. This provides a flexible structure to include additional data fields that may be necessary for the service's processing of the note retrieval.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects used for structured data modifications via specified paths. This allows developers to define precise modifications to the data structure, ensuring the response meets specific requirements or formats needed by the application.
   */
  extendPaths?: Array<GetNoteResponseExtendPaths> | undefined;
};

/**
 * The 'data' object encapsulates all the details of the retrieved note. It serves as the primary container for the note's information, including its unique identifier, title, content, and ownership details. This object is always present in the response, ensuring that developers have access to the complete set of note attributes.
 */
export type GetNoteResponseData = {
  /**
   * The unique identifier of the note within the CRM system. This string value is crucial for referencing the note in future operations, such as updates or deletions. It is typically a UUID or another unique string format.
   */
  id?: string | undefined;
  /**
   * The title of the note, providing a brief summary or headline. This string is used to quickly identify the note's subject matter and is often displayed prominently in user interfaces.
   */
  title?: string | null | undefined;
  /**
   * The main body of the note, containing detailed information or commentary. This string can include plain text or formatted content, depending on the application's capabilities, and is essential for understanding the note's full context.
   */
  content?: string | null | undefined;
  /**
   * The identifier of the user who owns or created the note. This string helps in attributing the note to a specific user, which is important for tracking authorship and managing permissions within the CRM system.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with this note. This ID is a string that links the note to a specific contact within the CRM, allowing developers to easily retrieve or display related contact information. Useful for applications that need to show contact details alongside notes.
   */
  contactId?: string | null | undefined;
  /**
   * The unique identifier of the company associated with this note. This string ID connects the note to a particular company in the CRM, facilitating the retrieval or display of company-related information. Essential for applications that integrate company data with notes.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier of the opportunity linked to this note. This string serves as a reference to a specific opportunity in the CRM, enabling developers to access or display opportunity details in conjunction with the note. Important for tracking notes related to sales opportunities.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with this note. This string ID ties the note to a specific lead within the CRM, allowing for easy retrieval or display of lead information. Useful for applications that need to correlate notes with lead data.
   */
  leadId?: string | null | undefined;
  /**
   * Indicates whether the note is currently active. This boolean value helps developers determine if the note should be considered in active workflows or displays. A value of 'true' means the note is active, while 'false' indicates it is inactive.
   */
  active?: boolean | null | undefined;
  /**
   * This property contains any custom mappings that have been configured for the note resource. It is an object that includes key-value pairs representing these mappings, which can be used to extend or modify the default behavior of the note within the CRM system. This field is included in the response only if custom mappings are present.
   */
  customMappings?: GetNoteResponseCustomMappings | null | undefined;
  /**
   * The 'updated_by' property holds the identifier of the user who last modified the note. It is a string value, typically representing the user's unique ID or username, and helps track changes made to the note over time. This information is crucial for audit trails and understanding the note's modification history.
   */
  updatedBy?: string | null | undefined;
  /**
   * This property indicates the user who originally created the note. It is stored as a string, usually containing the user's unique ID or username, and provides insight into the note's origin. Knowing who created the note can be important for accountability and historical reference.
   */
  createdBy?: string | null | undefined;
  /**
   * The 'updated_at' property records the exact date and time when the note was last updated. It is formatted as an ISO 8601 string, allowing for precise tracking of changes. This timestamp is essential for understanding the recency of the note's content and for synchronization purposes.
   */
  updatedAt?: string | null | undefined;
  /**
   * This property captures the date and time when the note was initially created, formatted as an ISO 8601 string. It provides a historical timestamp that is useful for tracking the note's lifecycle and understanding its age within the CRM system.
   */
  createdAt?: string | null | undefined;
  /**
   * An array containing service-specific custom data or structured modifications. This property is used to pass additional information that may be required by the service when retrieving a note. It allows for flexibility in handling service-specific requirements.
   */
  passThrough?: Array<GetNoteResponsePassThrough> | undefined;
};

/**
 * Note
 */
export type GetNoteResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. A status code of 200 signifies that the note was successfully retrieved. This integer value is crucial for error handling and debugging purposes.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request. This string provides a human-readable status that complements the status code, aiding in quick understanding of the response outcome.
   */
  status: string;
  /**
   * The unique Apideck identifier for the service provider from which the note data is retrieved. This string helps in identifying the source service in environments with multiple integrations, ensuring data consistency and traceability.
   */
  service: string;
  /**
   * The name of the unified API resource, which in this context is 'notes'. This string indicates the type of resource being accessed, helping developers understand the context of the data returned in the response.
   */
  resource: string;
  /**
   * The specific operation performed by the API, which in this case is 'notesOne'. This string helps in identifying the action taken, useful for logging and tracking API usage.
   */
  operation: string;
  /**
   * The 'data' object encapsulates all the details of the retrieved note. It serves as the primary container for the note's information, including its unique identifier, title, content, and ownership details. This object is always present in the response, ensuring that developers have access to the complete set of note attributes.
   */
  data: GetNoteResponseData;
};

/** @internal */
export const GetNoteResponseCustomMappings$inboundSchema: z.ZodType<
  GetNoteResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetNoteResponseCustomMappings$Outbound = {};

/** @internal */
export const GetNoteResponseCustomMappings$outboundSchema: z.ZodType<
  GetNoteResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  GetNoteResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNoteResponseCustomMappings$ {
  /** @deprecated use `GetNoteResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = GetNoteResponseCustomMappings$inboundSchema;
  /** @deprecated use `GetNoteResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema = GetNoteResponseCustomMappings$outboundSchema;
  /** @deprecated use `GetNoteResponseCustomMappings$Outbound` instead. */
  export type Outbound = GetNoteResponseCustomMappings$Outbound;
}

export function getNoteResponseCustomMappingsToJSON(
  getNoteResponseCustomMappings: GetNoteResponseCustomMappings,
): string {
  return JSON.stringify(
    GetNoteResponseCustomMappings$outboundSchema.parse(
      getNoteResponseCustomMappings,
    ),
  );
}

export function getNoteResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<GetNoteResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNoteResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNoteResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const GetNoteResponseExtendPaths$inboundSchema: z.ZodType<
  GetNoteResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type GetNoteResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const GetNoteResponseExtendPaths$outboundSchema: z.ZodType<
  GetNoteResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  GetNoteResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNoteResponseExtendPaths$ {
  /** @deprecated use `GetNoteResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = GetNoteResponseExtendPaths$inboundSchema;
  /** @deprecated use `GetNoteResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = GetNoteResponseExtendPaths$outboundSchema;
  /** @deprecated use `GetNoteResponseExtendPaths$Outbound` instead. */
  export type Outbound = GetNoteResponseExtendPaths$Outbound;
}

export function getNoteResponseExtendPathsToJSON(
  getNoteResponseExtendPaths: GetNoteResponseExtendPaths,
): string {
  return JSON.stringify(
    GetNoteResponseExtendPaths$outboundSchema.parse(getNoteResponseExtendPaths),
  );
}

export function getNoteResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<GetNoteResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNoteResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNoteResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const GetNoteResponsePassThrough$inboundSchema: z.ZodType<
  GetNoteResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => GetNoteResponseExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type GetNoteResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<GetNoteResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const GetNoteResponsePassThrough$outboundSchema: z.ZodType<
  GetNoteResponsePassThrough$Outbound,
  z.ZodTypeDef,
  GetNoteResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => GetNoteResponseExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNoteResponsePassThrough$ {
  /** @deprecated use `GetNoteResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = GetNoteResponsePassThrough$inboundSchema;
  /** @deprecated use `GetNoteResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = GetNoteResponsePassThrough$outboundSchema;
  /** @deprecated use `GetNoteResponsePassThrough$Outbound` instead. */
  export type Outbound = GetNoteResponsePassThrough$Outbound;
}

export function getNoteResponsePassThroughToJSON(
  getNoteResponsePassThrough: GetNoteResponsePassThrough,
): string {
  return JSON.stringify(
    GetNoteResponsePassThrough$outboundSchema.parse(getNoteResponsePassThrough),
  );
}

export function getNoteResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<GetNoteResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNoteResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNoteResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const GetNoteResponseData$inboundSchema: z.ZodType<
  GetNoteResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => GetNoteResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => GetNoteResponsePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type GetNoteResponseData$Outbound = {
  id?: string | undefined;
  title?: string | null | undefined;
  content?: string | null | undefined;
  owner_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  active?: boolean | null | undefined;
  custom_mappings?: GetNoteResponseCustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<GetNoteResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const GetNoteResponseData$outboundSchema: z.ZodType<
  GetNoteResponseData$Outbound,
  z.ZodTypeDef,
  GetNoteResponseData
> = z.object({
  id: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  customMappings: z.nullable(
    z.lazy(() => GetNoteResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => GetNoteResponsePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNoteResponseData$ {
  /** @deprecated use `GetNoteResponseData$inboundSchema` instead. */
  export const inboundSchema = GetNoteResponseData$inboundSchema;
  /** @deprecated use `GetNoteResponseData$outboundSchema` instead. */
  export const outboundSchema = GetNoteResponseData$outboundSchema;
  /** @deprecated use `GetNoteResponseData$Outbound` instead. */
  export type Outbound = GetNoteResponseData$Outbound;
}

export function getNoteResponseDataToJSON(
  getNoteResponseData: GetNoteResponseData,
): string {
  return JSON.stringify(
    GetNoteResponseData$outboundSchema.parse(getNoteResponseData),
  );
}

export function getNoteResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<GetNoteResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNoteResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNoteResponseData' from JSON`,
  );
}

/** @internal */
export const GetNoteResponse$inboundSchema: z.ZodType<
  GetNoteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetNoteResponseData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetNoteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: GetNoteResponseData$Outbound;
};

/** @internal */
export const GetNoteResponse$outboundSchema: z.ZodType<
  GetNoteResponse$Outbound,
  z.ZodTypeDef,
  GetNoteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetNoteResponseData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNoteResponse$ {
  /** @deprecated use `GetNoteResponse$inboundSchema` instead. */
  export const inboundSchema = GetNoteResponse$inboundSchema;
  /** @deprecated use `GetNoteResponse$outboundSchema` instead. */
  export const outboundSchema = GetNoteResponse$outboundSchema;
  /** @deprecated use `GetNoteResponse$Outbound` instead. */
  export type Outbound = GetNoteResponse$Outbound;
}

export function getNoteResponseToJSON(
  getNoteResponse: GetNoteResponse,
): string {
  return JSON.stringify(GetNoteResponse$outboundSchema.parse(getNoteResponse));
}

export function getNoteResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetNoteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNoteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNoteResponse' from JSON`,
  );
}
