/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Indicates the associated currency for an amount of money, adhering to the ISO 4217 standard. This property ensures that all monetary values are consistently represented and understood across different regions and financial systems. It is essential for international operations and financial reporting, allowing users to specify the currency in which the opportunity's monetary amount is denominated.
 */
export const OpportunityUpdateRequestCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money, adhering to the ISO 4217 standard. This property ensures that all monetary values are consistently represented and understood across different regions and financial systems. It is essential for international operations and financial reporting, allowing users to specify the currency in which the opportunity's monetary amount is denominated.
 */
export type OpportunityUpdateRequestCurrency = ClosedEnum<
  typeof OpportunityUpdateRequestCurrency
>;

export type OpportunityUpdateRequestValue6 = {};

export type OpportunityUpdateRequestValue4 = {};

/**
 * The value assigned to a custom field within the opportunity record. Custom fields allow for additional, user-defined data to be stored, providing flexibility to tailor the CRM to specific business needs. This field is optional and can be used to capture unique attributes or metrics relevant to the opportunity that are not covered by standard fields.
 */
export type OpportunityUpdateRequestValue =
  | OpportunityUpdateRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<OpportunityUpdateRequestValue6>;

export type OpportunityUpdateRequestCustomFields = {
  /**
   * Unique identifier for the custom field. This ID is essential for distinguishing each custom field within the opportunity's data structure. It ensures that each field can be individually accessed, updated, or removed as needed. The ID must be unique within the context of the opportunity to prevent data conflicts and maintain data integrity.
   */
  id: string | null;
  /**
   * Name of the custom field. This name serves as a label for the custom field, providing a human-readable identifier that describes the field's purpose or content. While not required, including a name can improve clarity and usability, especially when multiple custom fields are present. It should be concise yet descriptive enough to convey the field's role in the opportunity's data.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field. This description offers additional context or details about the custom field's intended use or significance. It can include guidelines on what type of data should be entered or how the field relates to the overall sales process. Providing a description is optional but can enhance understanding and proper utilization of the custom field by users.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to a custom field within the opportunity record. Custom fields allow for additional, user-defined data to be stored, providing flexibility to tailor the CRM to specific business needs. This field is optional and can be used to capture unique attributes or metrics relevant to the opportunity that are not covered by standard fields.
   */
  value?:
    | OpportunityUpdateRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<OpportunityUpdateRequestValue6>
    | null
    | undefined;
};

export type OpportunityUpdateRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the user record where the value should be applied. This is essential for making precise updates to nested fields, ensuring that changes are made only to the intended parts of the data structure. The path must be valid and correspond to an existing field within the user record.
   */
  path: string;
  /**
   * This property represents the specific value that you wish to assign to a designated path within the user record. It can be of any data type, such as a string, number, boolean, or object, depending on the field being updated. The flexibility of this property allows for a wide range of updates, from simple text changes to complex data structures. In the context of the `usersUpdate` operation, this property is crucial for specifying the exact data modification you intend to make, ensuring that only the targeted fields are altered without affecting other data. Proper validation should be applied to ensure the value is compatible with the field's expected data type and business rules. Common use cases include updating user contact information, preferences, or custom attributes specific to your CRM's schema.
   */
  value?: any | undefined;
};

export type OpportunityUpdateRequestPassThrough = {
  /**
   * The unique identifier for the specific service to which this pass_through should be applied. This is crucial for directing the update operation to the correct service within the CRM system, ensuring that the modifications are executed in the appropriate context. It must be a valid service ID that corresponds to an active service integration, and it is required for the operation to proceed.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation within the CRM system to which this pass_through should be applied. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise targeting and execution of specific operations. If provided, it should match an existing operation ID to ensure correct processing.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the inclusion of any additional properties needed for direct extension of the user record. This can be used to add custom fields or metadata that are not part of the standard user schema, providing a way to tailor the user data to specific business needs. The structure of this object should align with the CRM's data model to ensure compatibility.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications via specified paths. This allows for precise updates to nested data structures within the user record, enabling complex modifications without altering unrelated data. Each object in the array should define a clear path and value to be applied, ensuring targeted updates.
   */
  extendPaths?: Array<OpportunityUpdateRequestExtendPaths> | undefined;
};

export type OpportunityUpdateRequest = {
  /**
   * The title or name of the opportunity. This field serves as a brief, descriptive label for the opportunity, often reflecting the potential deal or project name. It is required to provide clarity and context within the CRM, helping users quickly identify and differentiate between various opportunities. The title should be concise yet descriptive enough to convey the essence of the opportunity.
   */
  title: string;
  /**
   * The unique identifier of the primary contact associated with the opportunity. This ID links the opportunity to a specific contact within the CRM, facilitating communication and relationship management. It is crucial for ensuring that the opportunity is connected to the correct individual, who is typically the main point of contact for the deal or project. This field is required to maintain accurate and actionable CRM records.
   */
  primaryContactId: string | null;
  /**
   * A description of the opportunity. This field provides additional context and details about the opportunity, such as its scope, objectives, and any relevant background information. While not required, a well-crafted description can enhance understanding and collaboration among team members by offering insights into the opportunity's significance and potential impact.
   */
  description?: string | null | undefined;
  /**
   * The type of the opportunity. This field categorizes the opportunity, helping to organize and filter records within the CRM. Common types might include 'New Business', 'Renewal', or 'Upsell'. While optional, specifying the type can aid in reporting and analysis by allowing users to segment opportunities based on their nature and strategic importance.
   */
  type?: string | null | undefined;
  /**
   * The monetary value associated with the opportunity, representing the total potential revenue that could be generated if the opportunity is successfully closed. This value is crucial for forecasting and financial planning within the CRM system. It should be a positive number and accurately reflect the expected financial outcome of the opportunity.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money, adhering to the ISO 4217 standard. This property ensures that all monetary values are consistently represented and understood across different regions and financial systems. It is essential for international operations and financial reporting, allowing users to specify the currency in which the opportunity's monetary amount is denominated.
   */
  currency?: OpportunityUpdateRequestCurrency | null | undefined;
  /**
   * The probability of winning the opportunity, expressed as a percentage from 0 to 100. This metric is used to assess the likelihood of successfully closing the opportunity and is vital for risk assessment and prioritization of sales efforts. A higher percentage indicates a greater chance of winning the opportunity, guiding strategic decision-making within the sales team.
   */
  winProbability?: number | null | undefined;
  /**
   * The actual closing date for the opportunity, formatted as a date string (e.g., YYYY-MM-DD). This property indicates when the opportunity was or is expected to be finalized. If the close_date is null, it signifies that the opportunity is still open and ongoing. This information is critical for tracking sales cycles and managing timelines within the CRM.
   */
  closeDate?: RFCDate | null | undefined;
  /**
   * The unique identifier of the reason why the opportunity was lost. This ID links to a predefined list of loss reasons within the CRM, allowing for standardized reporting and analysis of lost opportunities. It helps in understanding trends and improving future sales strategies. Ensure the ID corresponds to an existing entry in the CRM's loss reasons database.
   */
  lossReasonId?: string | null | undefined;
  /**
   * The reason why the opportunity was lost. This field allows users to provide a detailed explanation or note about why the opportunity did not convert into a sale. It is useful for qualitative analysis and can be used to identify patterns or areas for improvement in the sales process. This field should be concise yet descriptive enough to provide meaningful insights.
   */
  lossReason?: string | null | undefined;
  /**
   * The unique identifier of the reason why the opportunity was won. Similar to the loss_reason_id, this ID should match an entry in the CRM's predefined list of win reasons. It facilitates consistent tracking and analysis of successful sales, aiding in the identification of effective sales tactics and strategies. Ensure this ID is valid and corresponds to an existing win reason in the CRM.
   */
  wonReasonId?: string | null | undefined;
  /**
   * The reason why the opportunity was won. This field captures the key factors or circumstances that led to the successful closing of the opportunity. It is valuable for understanding what strategies or conditions contribute to winning deals and can inform future sales approaches. The description should be clear and specific to provide actionable insights.
   */
  wonReason?: string | null | undefined;
  /**
   * The unique identifier of the pipeline associated with the opportunity. This ID links the opportunity to a specific sales pipeline within the CRM, which helps in tracking the opportunity's progress and status within the sales process. It is crucial for organizing opportunities and ensuring they are managed within the correct pipeline stages. The ID must match an existing pipeline in the CRM system.
   */
  pipelineId?: string | null | undefined;
  /**
   * The unique identifier of the stage in the pipeline associated with the opportunity. This field allows users to specify the current phase of the sales process that the opportunity is in, such as 'Prospecting', 'Qualification', or 'Negotiation'. Updating this field helps in tracking the progress of the opportunity through the sales funnel, enabling better forecasting and resource allocation. It should correspond to a valid stage ID within the CRM's pipeline configuration.
   */
  pipelineStageId?: string | null | undefined;
  /**
   * The unique identifier of the source of the opportunity. This property is used to trace the origin of the opportunity, such as a marketing campaign, referral, or direct inquiry. Understanding the source helps in evaluating the effectiveness of different lead generation strategies and optimizing marketing efforts. It should match a predefined source ID in the CRM system.
   */
  sourceId?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with the opportunity. This field links the opportunity to a specific lead record, ensuring continuity and context in the sales process. It is crucial for maintaining a clear history of interactions and engagements with potential clients. The lead ID must exist in the CRM to establish this connection.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead associated with the opportunity. This property provides additional context about how the lead was acquired, such as through a web form, event, or advertisement. It complements the 'source_id' by offering a descriptive label that can be used in reports and analytics to assess lead quality and conversion rates. This should be a valid source description recognized by the CRM.
   */
  leadSource?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with the opportunity. This field is essential for linking the opportunity to a specific contact person, facilitating personalized communication and relationship management. It ensures that all interactions are recorded under the correct contact, supporting a comprehensive view of customer engagement. The contact ID must be valid and existing in the CRM database.
   */
  contactId?: string | null | undefined;
  /**
   * An array of unique identifiers of all contacts associated with the opportunity. This list is crucial for linking relevant contacts to the opportunity, ensuring that all communications and interactions are tracked within the CRM. It allows for seamless integration of contact data, facilitating better relationship management and follow-up actions. Each ID should correspond to an existing contact in the system, and the array can be updated to reflect changes in contact associations as the opportunity progresses.
   */
  contactIds?: Array<string> | undefined;
  /**
   * The unique identifier of the company associated with the opportunity. This ID is essential for linking the opportunity to the correct company record within the CRM, ensuring that all related business activities are accurately tracked and reported. It must match an existing company ID in the system, facilitating precise data management and reporting.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company associated with the opportunity. This field is used to display the company name in the CRM interface, providing users with a clear and recognizable reference to the business entity involved. It should reflect the official or commonly used name of the company, aiding in user recognition and record accuracy.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier of the user who owns the opportunity. This ID is critical for assigning responsibility and accountability within the CRM, ensuring that the opportunity is managed by the correct individual or team. It should correspond to a valid user ID in the system, supporting effective workflow management and performance tracking.
   */
  ownerId?: string | null | undefined;
  /**
   * The priority level assigned to the opportunity, indicating its importance or urgency within the sales pipeline. This can help sales teams prioritize their efforts and allocate resources effectively. Common values might include 'High', 'Medium', or 'Low', and should align with your organization's sales strategy and criteria for opportunity management.
   */
  priority?: string | null | undefined;
  /**
   * The current status of the opportunity, reflecting its stage in the sales process. This field is crucial for tracking progress and forecasting sales outcomes. Typical statuses might include 'New', 'In Progress', 'Closed Won', or 'Closed Lost'. Ensure that the status aligns with predefined stages in your CRM to maintain consistency in reporting and analysis.
   */
  status?: string | null | undefined;
  /**
   * The unique identifier associated with the current status of the opportunity. This ID is used internally by the CRM to map to specific status names and should be used when updating the status programmatically. It ensures that the correct status is applied, especially in systems with complex workflows or custom statuses.
   */
  statusId?: string | null | undefined;
  /**
   * An array of tags associated with the opportunity, allowing for categorization and easier retrieval of records. Tags can be used to label opportunities with specific attributes or characteristics, such as 'Urgent', 'VIP Client', or 'Follow-up Required'. This enhances searchability and filtering within the CRM.
   */
  tags?: Array<string> | null | undefined;
  /**
   * An array of custom fields associated with the opportunity. Custom fields allow for the extension of the standard opportunity schema to include additional, user-defined data points. This flexibility supports various business needs by enabling the capture of unique information pertinent to specific sales processes or industry requirements. Each custom field within the array must adhere to the defined structure, including an ID and optionally a name and description.
   */
  customFields?: Array<OpportunityUpdateRequestCustomFields> | undefined;
  /**
   * The precise date and time when the opportunity's stage was last updated. This timestamp is crucial for tracking the progress and lifecycle of an opportunity, helping sales teams to manage their pipeline effectively. It should be formatted according to ISO 8601 standards (e.g., '2023-03-15T13:45:30Z') and is typically updated automatically by the system when the stage changes.
   */
  stageLastChangedAt?: Date | null | undefined;
  /**
   * The 'pass_through' property is an array that allows users to include service-specific custom data or structured modifications when updating an opportunity. This feature is particularly useful for integrating with external services or applying custom business logic that requires additional data not covered by standard fields. It supports flexibility and extensibility in handling unique business requirements during the update process.
   */
  passThrough?: Array<OpportunityUpdateRequestPassThrough> | undefined;
};

/** @internal */
export const OpportunityUpdateRequestCurrency$inboundSchema: z.ZodNativeEnum<
  typeof OpportunityUpdateRequestCurrency
> = z.nativeEnum(OpportunityUpdateRequestCurrency);

/** @internal */
export const OpportunityUpdateRequestCurrency$outboundSchema: z.ZodNativeEnum<
  typeof OpportunityUpdateRequestCurrency
> = OpportunityUpdateRequestCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityUpdateRequestCurrency$ {
  /** @deprecated use `OpportunityUpdateRequestCurrency$inboundSchema` instead. */
  export const inboundSchema = OpportunityUpdateRequestCurrency$inboundSchema;
  /** @deprecated use `OpportunityUpdateRequestCurrency$outboundSchema` instead. */
  export const outboundSchema = OpportunityUpdateRequestCurrency$outboundSchema;
}

/** @internal */
export const OpportunityUpdateRequestValue6$inboundSchema: z.ZodType<
  OpportunityUpdateRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunityUpdateRequestValue6$Outbound = {};

/** @internal */
export const OpportunityUpdateRequestValue6$outboundSchema: z.ZodType<
  OpportunityUpdateRequestValue6$Outbound,
  z.ZodTypeDef,
  OpportunityUpdateRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityUpdateRequestValue6$ {
  /** @deprecated use `OpportunityUpdateRequestValue6$inboundSchema` instead. */
  export const inboundSchema = OpportunityUpdateRequestValue6$inboundSchema;
  /** @deprecated use `OpportunityUpdateRequestValue6$outboundSchema` instead. */
  export const outboundSchema = OpportunityUpdateRequestValue6$outboundSchema;
  /** @deprecated use `OpportunityUpdateRequestValue6$Outbound` instead. */
  export type Outbound = OpportunityUpdateRequestValue6$Outbound;
}

export function opportunityUpdateRequestValue6ToJSON(
  opportunityUpdateRequestValue6: OpportunityUpdateRequestValue6,
): string {
  return JSON.stringify(
    OpportunityUpdateRequestValue6$outboundSchema.parse(
      opportunityUpdateRequestValue6,
    ),
  );
}

export function opportunityUpdateRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<OpportunityUpdateRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityUpdateRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityUpdateRequestValue6' from JSON`,
  );
}

/** @internal */
export const OpportunityUpdateRequestValue4$inboundSchema: z.ZodType<
  OpportunityUpdateRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunityUpdateRequestValue4$Outbound = {};

/** @internal */
export const OpportunityUpdateRequestValue4$outboundSchema: z.ZodType<
  OpportunityUpdateRequestValue4$Outbound,
  z.ZodTypeDef,
  OpportunityUpdateRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityUpdateRequestValue4$ {
  /** @deprecated use `OpportunityUpdateRequestValue4$inboundSchema` instead. */
  export const inboundSchema = OpportunityUpdateRequestValue4$inboundSchema;
  /** @deprecated use `OpportunityUpdateRequestValue4$outboundSchema` instead. */
  export const outboundSchema = OpportunityUpdateRequestValue4$outboundSchema;
  /** @deprecated use `OpportunityUpdateRequestValue4$Outbound` instead. */
  export type Outbound = OpportunityUpdateRequestValue4$Outbound;
}

export function opportunityUpdateRequestValue4ToJSON(
  opportunityUpdateRequestValue4: OpportunityUpdateRequestValue4,
): string {
  return JSON.stringify(
    OpportunityUpdateRequestValue4$outboundSchema.parse(
      opportunityUpdateRequestValue4,
    ),
  );
}

export function opportunityUpdateRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<OpportunityUpdateRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityUpdateRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityUpdateRequestValue4' from JSON`,
  );
}

/** @internal */
export const OpportunityUpdateRequestValue$inboundSchema: z.ZodType<
  OpportunityUpdateRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpportunityUpdateRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => OpportunityUpdateRequestValue6$inboundSchema)),
]);

/** @internal */
export type OpportunityUpdateRequestValue$Outbound =
  | OpportunityUpdateRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<OpportunityUpdateRequestValue6$Outbound>;

/** @internal */
export const OpportunityUpdateRequestValue$outboundSchema: z.ZodType<
  OpportunityUpdateRequestValue$Outbound,
  z.ZodTypeDef,
  OpportunityUpdateRequestValue
> = z.union([
  z.lazy(() => OpportunityUpdateRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => OpportunityUpdateRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityUpdateRequestValue$ {
  /** @deprecated use `OpportunityUpdateRequestValue$inboundSchema` instead. */
  export const inboundSchema = OpportunityUpdateRequestValue$inboundSchema;
  /** @deprecated use `OpportunityUpdateRequestValue$outboundSchema` instead. */
  export const outboundSchema = OpportunityUpdateRequestValue$outboundSchema;
  /** @deprecated use `OpportunityUpdateRequestValue$Outbound` instead. */
  export type Outbound = OpportunityUpdateRequestValue$Outbound;
}

export function opportunityUpdateRequestValueToJSON(
  opportunityUpdateRequestValue: OpportunityUpdateRequestValue,
): string {
  return JSON.stringify(
    OpportunityUpdateRequestValue$outboundSchema.parse(
      opportunityUpdateRequestValue,
    ),
  );
}

export function opportunityUpdateRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityUpdateRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityUpdateRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityUpdateRequestValue' from JSON`,
  );
}

/** @internal */
export const OpportunityUpdateRequestCustomFields$inboundSchema: z.ZodType<
  OpportunityUpdateRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => OpportunityUpdateRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => OpportunityUpdateRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type OpportunityUpdateRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | OpportunityUpdateRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<OpportunityUpdateRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const OpportunityUpdateRequestCustomFields$outboundSchema: z.ZodType<
  OpportunityUpdateRequestCustomFields$Outbound,
  z.ZodTypeDef,
  OpportunityUpdateRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => OpportunityUpdateRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => OpportunityUpdateRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityUpdateRequestCustomFields$ {
  /** @deprecated use `OpportunityUpdateRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema =
    OpportunityUpdateRequestCustomFields$inboundSchema;
  /** @deprecated use `OpportunityUpdateRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    OpportunityUpdateRequestCustomFields$outboundSchema;
  /** @deprecated use `OpportunityUpdateRequestCustomFields$Outbound` instead. */
  export type Outbound = OpportunityUpdateRequestCustomFields$Outbound;
}

export function opportunityUpdateRequestCustomFieldsToJSON(
  opportunityUpdateRequestCustomFields: OpportunityUpdateRequestCustomFields,
): string {
  return JSON.stringify(
    OpportunityUpdateRequestCustomFields$outboundSchema.parse(
      opportunityUpdateRequestCustomFields,
    ),
  );
}

export function opportunityUpdateRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityUpdateRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunityUpdateRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityUpdateRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const OpportunityUpdateRequestExtendPaths$inboundSchema: z.ZodType<
  OpportunityUpdateRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type OpportunityUpdateRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const OpportunityUpdateRequestExtendPaths$outboundSchema: z.ZodType<
  OpportunityUpdateRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  OpportunityUpdateRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityUpdateRequestExtendPaths$ {
  /** @deprecated use `OpportunityUpdateRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema =
    OpportunityUpdateRequestExtendPaths$inboundSchema;
  /** @deprecated use `OpportunityUpdateRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema =
    OpportunityUpdateRequestExtendPaths$outboundSchema;
  /** @deprecated use `OpportunityUpdateRequestExtendPaths$Outbound` instead. */
  export type Outbound = OpportunityUpdateRequestExtendPaths$Outbound;
}

export function opportunityUpdateRequestExtendPathsToJSON(
  opportunityUpdateRequestExtendPaths: OpportunityUpdateRequestExtendPaths,
): string {
  return JSON.stringify(
    OpportunityUpdateRequestExtendPaths$outboundSchema.parse(
      opportunityUpdateRequestExtendPaths,
    ),
  );
}

export function opportunityUpdateRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityUpdateRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunityUpdateRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityUpdateRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const OpportunityUpdateRequestPassThrough$inboundSchema: z.ZodType<
  OpportunityUpdateRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => OpportunityUpdateRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type OpportunityUpdateRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?:
    | Array<OpportunityUpdateRequestExtendPaths$Outbound>
    | undefined;
};

/** @internal */
export const OpportunityUpdateRequestPassThrough$outboundSchema: z.ZodType<
  OpportunityUpdateRequestPassThrough$Outbound,
  z.ZodTypeDef,
  OpportunityUpdateRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => OpportunityUpdateRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityUpdateRequestPassThrough$ {
  /** @deprecated use `OpportunityUpdateRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema =
    OpportunityUpdateRequestPassThrough$inboundSchema;
  /** @deprecated use `OpportunityUpdateRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema =
    OpportunityUpdateRequestPassThrough$outboundSchema;
  /** @deprecated use `OpportunityUpdateRequestPassThrough$Outbound` instead. */
  export type Outbound = OpportunityUpdateRequestPassThrough$Outbound;
}

export function opportunityUpdateRequestPassThroughToJSON(
  opportunityUpdateRequestPassThrough: OpportunityUpdateRequestPassThrough,
): string {
  return JSON.stringify(
    OpportunityUpdateRequestPassThrough$outboundSchema.parse(
      opportunityUpdateRequestPassThrough,
    ),
  );
}

export function opportunityUpdateRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityUpdateRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunityUpdateRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityUpdateRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const OpportunityUpdateRequest$inboundSchema: z.ZodType<
  OpportunityUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  primary_contact_id: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(OpportunityUpdateRequestCurrency$inboundSchema)
    .optional(),
  win_probability: z.nullable(z.number()).optional(),
  close_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  loss_reason_id: z.nullable(z.string()).optional(),
  loss_reason: z.nullable(z.string()).optional(),
  won_reason_id: z.nullable(z.string()).optional(),
  won_reason: z.nullable(z.string()).optional(),
  pipeline_id: z.nullable(z.string()).optional(),
  pipeline_stage_id: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  contact_ids: z.array(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  status_id: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_fields: z.array(
    z.lazy(() => OpportunityUpdateRequestCustomFields$inboundSchema),
  ).optional(),
  stage_last_changed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => OpportunityUpdateRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "primary_contact_id": "primaryContactId",
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "close_date": "closeDate",
    "loss_reason_id": "lossReasonId",
    "loss_reason": "lossReason",
    "won_reason_id": "wonReasonId",
    "won_reason": "wonReason",
    "pipeline_id": "pipelineId",
    "pipeline_stage_id": "pipelineStageId",
    "source_id": "sourceId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "contact_id": "contactId",
    "contact_ids": "contactIds",
    "company_id": "companyId",
    "company_name": "companyName",
    "owner_id": "ownerId",
    "status_id": "statusId",
    "custom_fields": "customFields",
    "stage_last_changed_at": "stageLastChangedAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type OpportunityUpdateRequest$Outbound = {
  title: string;
  primary_contact_id: string | null;
  description?: string | null | undefined;
  type?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  win_probability?: number | null | undefined;
  close_date?: string | null | undefined;
  loss_reason_id?: string | null | undefined;
  loss_reason?: string | null | undefined;
  won_reason_id?: string | null | undefined;
  won_reason?: string | null | undefined;
  pipeline_id?: string | null | undefined;
  pipeline_stage_id?: string | null | undefined;
  source_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  contact_id?: string | null | undefined;
  contact_ids?: Array<string> | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  owner_id?: string | null | undefined;
  priority?: string | null | undefined;
  status?: string | null | undefined;
  status_id?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  custom_fields?:
    | Array<OpportunityUpdateRequestCustomFields$Outbound>
    | undefined;
  stage_last_changed_at?: string | null | undefined;
  pass_through?:
    | Array<OpportunityUpdateRequestPassThrough$Outbound>
    | undefined;
};

/** @internal */
export const OpportunityUpdateRequest$outboundSchema: z.ZodType<
  OpportunityUpdateRequest$Outbound,
  z.ZodTypeDef,
  OpportunityUpdateRequest
> = z.object({
  title: z.string(),
  primaryContactId: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(OpportunityUpdateRequestCurrency$outboundSchema)
    .optional(),
  winProbability: z.nullable(z.number()).optional(),
  closeDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  lossReasonId: z.nullable(z.string()).optional(),
  lossReason: z.nullable(z.string()).optional(),
  wonReasonId: z.nullable(z.string()).optional(),
  wonReason: z.nullable(z.string()).optional(),
  pipelineId: z.nullable(z.string()).optional(),
  pipelineStageId: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  contactIds: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  statusId: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customFields: z.array(
    z.lazy(() => OpportunityUpdateRequestCustomFields$outboundSchema),
  ).optional(),
  stageLastChangedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  passThrough: z.array(
    z.lazy(() => OpportunityUpdateRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    primaryContactId: "primary_contact_id",
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    closeDate: "close_date",
    lossReasonId: "loss_reason_id",
    lossReason: "loss_reason",
    wonReasonId: "won_reason_id",
    wonReason: "won_reason",
    pipelineId: "pipeline_id",
    pipelineStageId: "pipeline_stage_id",
    sourceId: "source_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    contactId: "contact_id",
    contactIds: "contact_ids",
    companyId: "company_id",
    companyName: "company_name",
    ownerId: "owner_id",
    statusId: "status_id",
    customFields: "custom_fields",
    stageLastChangedAt: "stage_last_changed_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityUpdateRequest$ {
  /** @deprecated use `OpportunityUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = OpportunityUpdateRequest$inboundSchema;
  /** @deprecated use `OpportunityUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = OpportunityUpdateRequest$outboundSchema;
  /** @deprecated use `OpportunityUpdateRequest$Outbound` instead. */
  export type Outbound = OpportunityUpdateRequest$Outbound;
}

export function opportunityUpdateRequestToJSON(
  opportunityUpdateRequest: OpportunityUpdateRequest,
): string {
  return JSON.stringify(
    OpportunityUpdateRequest$outboundSchema.parse(opportunityUpdateRequest),
  );
}

export function opportunityUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityUpdateRequest' from JSON`,
  );
}
