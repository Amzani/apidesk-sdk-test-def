/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Indicates the currency type for the monetary amount, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This ensures that the monetary value is correctly interpreted in the context of international transactions.
 */
export const ListLeadsResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the currency type for the monetary amount, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This ensures that the monetary value is correctly interpreted in the context of international transactions.
 */
export type ListLeadsResponseCurrency = ClosedEnum<
  typeof ListLeadsResponseCurrency
>;

/**
 * Specifies the category or nature of the website, such as 'personal', 'business', or 'portfolio'. This string helps in classifying the website's purpose or role in relation to the lead, aiding in better organization and filtering of website data.
 */
export const ListLeadsResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category or nature of the website, such as 'personal', 'business', or 'portfolio'. This string helps in classifying the website's purpose or role in relation to the lead, aiding in better organization and filtering of website data.
 */
export type ListLeadsResponseType = ClosedEnum<typeof ListLeadsResponseType>;

export type ListLeadsResponseWebsites = {
  /**
   * A unique identifier assigned to each website entry associated with a lead. This string value is used to distinctly recognize and reference individual websites within the CRM system, facilitating easy management and retrieval of website-related data.
   */
  id?: string | null | undefined;
  /**
   * The full URL of the website associated with the lead. This string must be a valid web address and is crucial for linking to the lead's online presence or resources. It is a required field, ensuring that every website entry has a corresponding URL.
   */
  url: string;
  /**
   * Specifies the category or nature of the website, such as 'personal', 'business', or 'portfolio'. This string helps in classifying the website's purpose or role in relation to the lead, aiding in better organization and filtering of website data.
   */
  type?: ListLeadsResponseType | null | undefined;
};

/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the lead's contact information. The value is expected to be a string that matches predefined address types used in the CRM.
 */
export const ListLeadsResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the lead's contact information. The value is expected to be a string that matches predefined address types used in the CRM.
 */
export type ListLeadsResponseDataType = ClosedEnum<
  typeof ListLeadsResponseDataType
>;

export type ListLeadsResponseAddresses = {
  /**
   * A unique identifier for each address entry linked to a lead. This string is used to uniquely identify and manage individual addresses within the CRM, ensuring precise tracking and manipulation of address data.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the lead's contact information. The value is expected to be a string that matches predefined address types used in the CRM.
   */
  type?: ListLeadsResponseDataType | null | undefined;
  /**
   * Contains the full address as a single string, which may include street, city, state, and postal code. This format is used when the API does not provide structured address components, allowing for flexible address representation. It is useful for display purposes or when integrating with systems that require a single address field.
   */
  string?: string | null | undefined;
  /**
   * Represents the name associated with the address, such as the name of a business or a contact person. This field is useful for identifying the address in contexts where multiple addresses are associated with a lead. The value is a string that provides additional context to the address information.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically including the street number, street name, and any apartment or suite number. This field is part of the structured address data and is crucial for accurate geolocation and mail delivery. It is expected to be a string that clearly identifies the primary location details.
   */
  line1?: string | null | undefined;
  /**
   * The second line of the address, often used for additional location details such as building name, floor, or unit number. This field complements 'line1' and provides further specificity to the address. It is a string that helps in ensuring complete address information is captured.
   */
  line2?: string | null | undefined;
  /**
   * This property contains the third line of the address, which may include additional location details such as a suite or apartment number. It is returned as a string and is optional, meaning it may not be present if not applicable to the address. This field helps in providing a more precise address for leads.
   */
  line3?: string | null | undefined;
  /**
   * This property holds the fourth line of the address, often used for further address details or special delivery instructions. It is an optional string field, which may be empty if not needed. Including this field ensures comprehensive address information for each lead.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the address, indicating the specific location on a street. This is an optional string field that may be absent if the street number is not applicable or available. It is crucial for pinpointing the exact address of a lead.
   */
  streetNumber?: string | null | undefined;
  /**
   * This property specifies the city name where the lead is located. It is returned as a string and is optional, meaning it may not be present if the city information is not available. The city name is essential for geographical identification of the lead's address.
   */
  city?: string | null | undefined;
  /**
   * This property indicates the state or region name associated with the lead's address. It is an optional string field, which may be absent if the state information is not provided. The state name helps in further categorizing the geographical location of the lead.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code associated with the lead's address. This string value helps in identifying the specific area or region within a city or town, facilitating accurate location-based services and correspondence. It is optional and may not be present for all leads.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the lead's address, formatted according to the ISO 3166-1 alpha-2 standard. This two-letter string provides a standardized way to identify the country, ensuring consistency across international data exchanges. It is optional and may not be present for all leads.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the lead's address, represented as a string. This value indicates the north-south position on the Earth's surface, which can be used for mapping and geolocation services. It is optional and may not be present for all leads.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the lead's address, represented as a string. This value indicates the east-west position on the Earth's surface, useful for mapping and geolocation services. It is optional and may not be present for all leads.
   */
  longitude?: string | null | undefined;
  /**
   * The county or equivalent sublocality of the lead's address, provided as a string. This field helps in identifying smaller administrative regions within a state or province, which can be important for regional analysis and services. It is optional and may not be present for all leads.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address. This is typically used to identify the primary individual at the location and is returned as a string. It helps in personalizing communication and ensuring accurate delivery of information.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as 'Mr.', 'Ms.', or 'Dr.'. This string value is used to address the contact person formally in communications and documents.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with the address, formatted as a string. This number is used for direct communication with the contact person or organization at the specified address.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the address, provided as a string. This is used for sending documents via fax to the contact person or organization at the address, although it may be less commonly used in modern communications.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the contact at the address, formatted as a string. This is used for electronic communication and is essential for sending and receiving emails related to the lead.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the lead's address. This field may contain a full web address (e.g., 'https://www.example.com') and is useful for accessing the lead's online presence directly from the CRM data.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the lead's address. This field can include any extra information or comments that provide context or details about the address, aiding in better understanding or follow-up actions.
   */
  notes?: string | null | undefined;
  /**
   * A versioning string used to track changes to the lead's address data. This binary value is updated with each modification to prevent data conflicts and ensure data integrity during updates.
   */
  rowVersion?: string | null | undefined;
};

export type ListLeadsResponseSocialLinks = {
  /**
   * A unique identifier for each social link entry within the array. This ID is used to distinguish between different social media profiles linked to the lead, facilitating precise data management and updates.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media profile associated with the lead, such as https://www.twitter.com/apideck. This string should be a valid URL format and is crucial for linking to the lead's social presence directly from the CRM.
   */
  url: string;
  /**
   * Specifies the type of social media platform, such as 'twitter' or 'linkedin'. This string helps categorize the social link, allowing developers to tailor integrations based on the platform type.
   */
  type?: string | null | undefined;
};

/**
 * The classification of the phone number, such as 'mobile', 'home', or 'work'. This optional field helps in identifying the context in which the phone number is used and is returned as a string.
 */
export const ListLeadsResponseDataPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The classification of the phone number, such as 'mobile', 'home', or 'work'. This optional field helps in identifying the context in which the phone number is used and is returned as a string.
 */
export type ListLeadsResponseDataPhoneNumbersType = ClosedEnum<
  typeof ListLeadsResponseDataPhoneNumbersType
>;

export type ListLeadsResponsePhoneNumbers = {
  /**
   * A unique identifier for each phone number entry within the lead's contact information. This string is used to distinguish between different phone numbers associated with the same lead.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code associated with the lead's phone number, such as '+1' for the United States. This string helps in formatting and making international calls to the lead.
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The complete phone number associated with the lead, excluding the area code. This is a required field and is always returned as a string. It is essential for contacting the lead directly.
   */
  number: string;
  /**
   * The extension number for the lead's phone, if applicable. This is an optional field and is returned as a string. It is used for directing calls within organizations that use extensions.
   */
  extension?: string | null | undefined;
  /**
   * The classification of the phone number, such as 'mobile', 'home', or 'work'. This optional field helps in identifying the context in which the phone number is used and is returned as a string.
   */
  type?: ListLeadsResponseDataPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email addresses for better organization and retrieval. The value is optional and can be a predefined string.
 */
export const ListLeadsResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email addresses for better organization and retrieval. The value is optional and can be a predefined string.
 */
export type ListLeadsResponseDataEmailsType = ClosedEnum<
  typeof ListLeadsResponseDataEmailsType
>;

export type ListLeadsResponseEmails = {
  /**
   * A unique identifier assigned to each email address associated with a lead. This identifier is used to distinguish between different email entries within the CRM system. It is typically a non-empty string when an email is present.
   */
  id?: string | null | undefined;
  /**
   * The email address of the lead, formatted as a standard email string (e.g., example@domain.com). This field is mandatory and is used for communication and identification purposes within the CRM.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email addresses for better organization and retrieval. The value is optional and can be a predefined string.
   */
  type?: ListLeadsResponseDataEmailsType | null | undefined;
};

export type ListLeadsResponseValue6 = {};

export type ListLeadsResponseValue4 = {};

/**
 * The actual value assigned to the custom field for a particular lead. This can vary in format depending on the field's intended use, such as a date, number, or text.
 */
export type ListLeadsResponseValue =
  | ListLeadsResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListLeadsResponseValue6>;

export type ListLeadsResponseCustomFields = {
  /**
   * A unique identifier for each custom field associated with a lead. This identifier helps in managing and referencing custom fields within the CRM system. It is a required string value for each custom field entry.
   */
  id: string | null;
  /**
   * The name of the custom field as defined in the CRM system. This string value helps identify the specific custom field associated with a lead, allowing for tailored data management and retrieval.
   */
  name?: string | null | undefined;
  /**
   * A detailed description of the custom field, providing additional context or usage information. This string helps users understand the purpose and application of the custom field within the lead data.
   */
  description?: string | null | undefined;
  /**
   * The actual value assigned to the custom field for a particular lead. This can vary in format depending on the field's intended use, such as a date, number, or text.
   */
  value?:
    | ListLeadsResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListLeadsResponseValue6>
    | null
    | undefined;
};

/**
 * Contains any custom mappings configured for the lead resource. This object may include key-value pairs that map custom fields to standard fields, allowing for tailored data representation. Useful for integrations that require specific field alignments.
 */
export type ListLeadsResponseCustomMappings = {};

export type ListLeadsResponseExtendPaths = {
  /**
   * This property specifies the JSONPath string that indicates where in the data structure the value should be applied. It is a required field within each object in the extend_paths array, ensuring that modifications are accurately targeted within the data.
   */
  path: string;
  /**
   * This property represents the value to be set at the specified JSONPath within the data structure. It can be of any data type, allowing for flexible modifications to the data as required by the integration or workflow.
   */
  value?: any | undefined;
};

export type ListLeadsResponsePassThrough = {
  /**
   * A string identifier for the specific service to which the pass_through data should be applied. This ensures that custom data is correctly routed and processed by the intended service.
   */
  serviceId: string;
  /**
   * This property contains an optional identifier for a specific workflow operation within the CRM system. It is used to apply the pass-through logic to a particular operation, especially useful when a single API call triggers multiple downstream requests. The value is expected to be a string that uniquely identifies the operation.
   */
  operationId?: string | undefined;
  /**
   * This property is a flexible object designed to allow direct extension with any additional properties. It serves as a container for custom data that may be needed for specific integrations or workflows, providing a way to include extra information without altering the core API structure.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property is an array of objects, each representing a structured modification to the data using specified paths. It allows developers to define precise changes to the data structure, facilitating complex data transformations and integrations.
   */
  extendPaths?: Array<ListLeadsResponseExtendPaths> | undefined;
};

export type ListLeadsResponseData = {
  /**
   * A unique string identifier assigned to each lead within the CRM. This ID is used to uniquely distinguish each lead from others in the system and is essential for operations that require specific lead identification, such as updates or deletions.
   */
  id?: string | undefined;
  /**
   * The full name of the lead as recorded in the CRM. This string is crucial for identifying the lead in user interfaces and reports, and it is always provided for each lead entry to ensure clarity in lead identification.
   */
  name: string;
  /**
   * The name of the company with which the lead is associated. This string provides context about the lead's business affiliations and is essential for understanding the lead's professional background and potential business opportunities.
   */
  companyName: string | null;
  /**
   * The unique identifier of the user or entity that owns or manages the lead within the CRM. This ID helps in assigning responsibility and tracking lead management activities, and it is particularly useful in systems with multiple users managing leads.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the lead's owner, typically a sales representative or account manager responsible for managing the lead. This is returned as a string and helps identify who is handling the lead within the CRM system.
   */
  ownerName?: string | null | undefined;
  /**
   * A unique identifier for the company associated with the lead. This string value links the lead to its respective company record in the CRM, facilitating organization and retrieval of company-specific lead data.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier assigned to the lead within the CRM system. This string is crucial for tracking and referencing the lead across various operations and integrations.
   */
  leadId?: string | null | undefined;
  /**
   * Indicates the origin of the lead, such as a marketing campaign, referral, or direct inquiry. This string helps categorize leads based on their source, aiding in analysis and strategy development.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead, provided as a string. This is used for personalizing communications and managing lead records within the CRM.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead as recorded in the CRM system. This field may be empty if the lead's last name is not provided. It is used to identify and differentiate individual leads within the system.
   */
  lastName?: string | null | undefined;
  /**
   * A brief overview or summary of the lead, which may include notes or additional context about the lead's interests or interactions. This field is optional and can be customized to suit the needs of the CRM user.
   */
  description?: string | null | undefined;
  /**
   * The prefix or title used before the lead's name, such as Mr., Ms., or Dr. This field helps in addressing the lead appropriately in communications and is optional.
   */
  prefix?: string | null | undefined;
  /**
   * The professional job title of the lead, such as 'Software Engineer' or 'Marketing Manager'. This information is useful for understanding the lead's role and potential needs or interests.
   */
  title?: string | null | undefined;
  /**
   * The language preference of the lead, represented by a two-letter ISO 639-1 code, such as 'EN' for English. This helps in tailoring communications and content to the lead's preferred language.
   */
  language?: string | null | undefined;
  /**
   * Represents the current status of the lead, such as 'new', 'contacted', or 'qualified'. This helps in understanding the lead's position in the sales pipeline. The value is a string that indicates the lead's progress or state within the CRM system.
   */
  status?: string | null | undefined;
  /**
   * The total monetary value associated with the lead, expressed as a numeric value. This figure is crucial for assessing the potential revenue from the lead and is typically used in financial forecasting and analysis.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Indicates the currency type for the monetary amount, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This ensures that the monetary value is correctly interpreted in the context of international transactions.
   */
  currency?: ListLeadsResponseCurrency | null | undefined;
  /**
   * The fax number associated with the lead, formatted as a string. This contact detail is part of the lead's profile and can be used for sending documents via fax.
   */
  fax?: string | null | undefined;
  /**
   * An array of website URLs related to the lead, providing additional online resources or contact points. Each entry in the array is a string representing a full URL, which can be used for further engagement or information gathering.
   */
  websites?: Array<ListLeadsResponseWebsites> | undefined;
  /**
   * An array containing address objects related to the lead. Each object within the array holds detailed information about a specific address, allowing for comprehensive storage and retrieval of multiple addresses associated with a single lead.
   */
  addresses?: Array<ListLeadsResponseAddresses> | undefined;
  /**
   * An array of social media links associated with the lead. Each entry in the array represents a different social media profile, allowing for comprehensive tracking of the lead's online presence.
   */
  socialLinks?: Array<ListLeadsResponseSocialLinks> | undefined;
  /**
   * An array containing the lead's phone numbers, each represented as an object. This array can include multiple phone numbers, providing comprehensive contact options for the lead.
   */
  phoneNumbers?: Array<ListLeadsResponsePhoneNumbers> | undefined;
  /**
   * A list of email addresses associated with the lead. This array can contain multiple email strings, each representing a different email contact for the lead. It is useful for sending communications and updates to the lead.
   */
  emails?: Array<ListLeadsResponseEmails> | undefined;
  /**
   * An array of custom fields that provide additional, user-defined information about the lead. Each entry in the array corresponds to a specific custom field, allowing for flexible data storage and retrieval.
   */
  customFields?: Array<ListLeadsResponseCustomFields> | undefined;
  /**
   * An array of tags associated with the lead, used for categorization or filtering purposes. Each tag is a string that represents a specific label or keyword relevant to the lead.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Contains any custom mappings configured for the lead resource. This object may include key-value pairs that map custom fields to standard fields, allowing for tailored data representation. Useful for integrations that require specific field alignments.
   */
  customMappings?: ListLeadsResponseCustomMappings | null | undefined;
  /**
   * The timestamp indicating when the lead was last updated, formatted in ISO 8601. This helps track changes and synchronize data updates across systems.
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp indicating when the lead was initially created, formatted in ISO 8601. This is essential for understanding the lead's lifecycle and history within the CRM.
   */
  createdAt?: string | null | undefined;
  /**
   * An array that holds service-specific custom data or modifications. This allows for the inclusion of additional, non-standard information when interacting with the CRM, facilitating more flexible data handling.
   */
  passThrough?: Array<ListLeadsResponsePassThrough> | undefined;
};

/**
 * This object contains cursor information used for paginating through the lead data. It includes specific cursors for navigating to previous or next pages, allowing developers to efficiently traverse large sets of lead data without missing any entries. The cursors are crucial for implementing seamless data navigation in applications.
 */
export type ListLeadsResponseCursors = {
  /**
   * A string cursor that allows navigation to the previous page of lead results. This is particularly useful for applications that need to implement backward navigation through paginated data, ensuring users can easily access earlier data entries. It is part of the pagination mechanism that enhances user experience by providing flexible data access.
   */
  previous?: string | null | undefined;
  /**
   * A string cursor representing the current page of lead results in the pagination sequence. This cursor is used to maintain the current position within the dataset, ensuring that subsequent requests can continue from the correct point. It is essential for tracking progress through the data and avoiding duplication or data loss.
   */
  current?: string | null | undefined;
  /**
   * A string representing the cursor used to fetch the next set of results in a paginated response. This is particularly useful for navigating through large datasets efficiently, ensuring that developers can continue retrieving data seamlessly from the API.
   */
  next?: string | null | undefined;
};

/**
 * This object contains metadata about the response, providing additional context and information about the data returned. It includes details such as pagination cursors and the number of items on the current page, which are essential for navigating through large datasets efficiently. The metadata helps in understanding the scope and limits of the current response.
 */
export type ListLeadsResponseMeta = {
  /**
   * An integer representing the total number of lead items included in the current page of the response. This helps developers understand how many leads are being processed at a time, especially when dealing with paginated data. It is useful for iterating over results and managing data loads.
   */
  itemsOnPage?: number | undefined;
  /**
   * This object contains cursor information used for paginating through the lead data. It includes specific cursors for navigating to previous or next pages, allowing developers to efficiently traverse large sets of lead data without missing any entries. The cursors are crucial for implementing seamless data navigation in applications.
   */
  cursors?: ListLeadsResponseCursors | undefined;
};

/**
 * An object containing URLs that facilitate navigation between different pages of the API response. This includes links to the current, previous, and next pages, aiding in the management of paginated data retrieval.
 */
export type ListLeadsResponseLinks = {
  /**
   * A URL string that directs to the previous page of results in the paginated API response. This link is essential for developers who need to navigate backward through the dataset.
   */
  previous?: string | null | undefined;
  /**
   * A URL string pointing to the current page of results in the API response. This link helps developers confirm their current position within the paginated dataset.
   */
  current?: string | undefined;
  /**
   * A URL string that leads to the next page of results in the paginated API response. This link is crucial for developers to continue fetching subsequent data pages efficiently.
   */
  next?: string | null | undefined;
};

/**
 * Leads
 */
export type ListLeadsResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value helps determine if the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is essential for error handling and debugging in client applications.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for a failed one. This string provides a human-readable explanation of the status code, aiding in understanding the outcome of the API call.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the lead data is fetched. This string uniquely identifies the service within the Apideck ecosystem, ensuring that the data is sourced from the correct provider, especially when multiple integrations are in use.
   */
  service: string;
  /**
   * The name of the Unified API resource being accessed, in this case, 'leads'. This string indicates the type of data returned by the API, helping developers understand the context and structure of the response data.
   */
  resource: string;
  /**
   * The specific operation performed by the API, identified as 'leadsAll' for this request. This string helps track the action executed, useful for logging and auditing purposes within client applications.
   */
  operation: string;
  /**
   * An array containing the list of lead objects retrieved from the CRM. Each object within the array represents a single lead and includes detailed information such as the lead's ID, name, company name, and owner. This array is the primary container for the lead data returned by the API, facilitating easy iteration and manipulation of lead records.
   */
  data: Array<ListLeadsResponseData>;
  /**
   * This object contains metadata about the response, providing additional context and information about the data returned. It includes details such as pagination cursors and the number of items on the current page, which are essential for navigating through large datasets efficiently. The metadata helps in understanding the scope and limits of the current response.
   */
  meta?: ListLeadsResponseMeta | undefined;
  /**
   * An object containing URLs that facilitate navigation between different pages of the API response. This includes links to the current, previous, and next pages, aiding in the management of paginated data retrieval.
   */
  links?: ListLeadsResponseLinks | undefined;
};

/** @internal */
export const ListLeadsResponseCurrency$inboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseCurrency
> = z.nativeEnum(ListLeadsResponseCurrency);

/** @internal */
export const ListLeadsResponseCurrency$outboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseCurrency
> = ListLeadsResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseCurrency$ {
  /** @deprecated use `ListLeadsResponseCurrency$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseCurrency$inboundSchema;
  /** @deprecated use `ListLeadsResponseCurrency$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseCurrency$outboundSchema;
}

/** @internal */
export const ListLeadsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseType
> = z.nativeEnum(ListLeadsResponseType);

/** @internal */
export const ListLeadsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseType
> = ListLeadsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseType$ {
  /** @deprecated use `ListLeadsResponseType$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseType$inboundSchema;
  /** @deprecated use `ListLeadsResponseType$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseType$outboundSchema;
}

/** @internal */
export const ListLeadsResponseWebsites$inboundSchema: z.ZodType<
  ListLeadsResponseWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ListLeadsResponseType$inboundSchema).optional(),
});

/** @internal */
export type ListLeadsResponseWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseWebsites$outboundSchema: z.ZodType<
  ListLeadsResponseWebsites$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ListLeadsResponseType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseWebsites$ {
  /** @deprecated use `ListLeadsResponseWebsites$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseWebsites$inboundSchema;
  /** @deprecated use `ListLeadsResponseWebsites$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseWebsites$outboundSchema;
  /** @deprecated use `ListLeadsResponseWebsites$Outbound` instead. */
  export type Outbound = ListLeadsResponseWebsites$Outbound;
}

export function listLeadsResponseWebsitesToJSON(
  listLeadsResponseWebsites: ListLeadsResponseWebsites,
): string {
  return JSON.stringify(
    ListLeadsResponseWebsites$outboundSchema.parse(listLeadsResponseWebsites),
  );
}

export function listLeadsResponseWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseWebsites' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseDataType
> = z.nativeEnum(ListLeadsResponseDataType);

/** @internal */
export const ListLeadsResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseDataType
> = ListLeadsResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseDataType$ {
  /** @deprecated use `ListLeadsResponseDataType$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseDataType$inboundSchema;
  /** @deprecated use `ListLeadsResponseDataType$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseDataType$outboundSchema;
}

/** @internal */
export const ListLeadsResponseAddresses$inboundSchema: z.ZodType<
  ListLeadsResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListLeadsResponseDataType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ListLeadsResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseAddresses$outboundSchema: z.ZodType<
  ListLeadsResponseAddresses$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListLeadsResponseDataType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseAddresses$ {
  /** @deprecated use `ListLeadsResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseAddresses$inboundSchema;
  /** @deprecated use `ListLeadsResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseAddresses$outboundSchema;
  /** @deprecated use `ListLeadsResponseAddresses$Outbound` instead. */
  export type Outbound = ListLeadsResponseAddresses$Outbound;
}

export function listLeadsResponseAddressesToJSON(
  listLeadsResponseAddresses: ListLeadsResponseAddresses,
): string {
  return JSON.stringify(
    ListLeadsResponseAddresses$outboundSchema.parse(listLeadsResponseAddresses),
  );
}

export function listLeadsResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseAddresses' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseSocialLinks$inboundSchema: z.ZodType<
  ListLeadsResponseSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListLeadsResponseSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseSocialLinks$outboundSchema: z.ZodType<
  ListLeadsResponseSocialLinks$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseSocialLinks$ {
  /** @deprecated use `ListLeadsResponseSocialLinks$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseSocialLinks$inboundSchema;
  /** @deprecated use `ListLeadsResponseSocialLinks$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseSocialLinks$outboundSchema;
  /** @deprecated use `ListLeadsResponseSocialLinks$Outbound` instead. */
  export type Outbound = ListLeadsResponseSocialLinks$Outbound;
}

export function listLeadsResponseSocialLinksToJSON(
  listLeadsResponseSocialLinks: ListLeadsResponseSocialLinks,
): string {
  return JSON.stringify(
    ListLeadsResponseSocialLinks$outboundSchema.parse(
      listLeadsResponseSocialLinks,
    ),
  );
}

export function listLeadsResponseSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseSocialLinks' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseDataPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof ListLeadsResponseDataPhoneNumbersType> = z.nativeEnum(
    ListLeadsResponseDataPhoneNumbersType,
  );

/** @internal */
export const ListLeadsResponseDataPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof ListLeadsResponseDataPhoneNumbersType> =
    ListLeadsResponseDataPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseDataPhoneNumbersType$ {
  /** @deprecated use `ListLeadsResponseDataPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    ListLeadsResponseDataPhoneNumbersType$inboundSchema;
  /** @deprecated use `ListLeadsResponseDataPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    ListLeadsResponseDataPhoneNumbersType$outboundSchema;
}

/** @internal */
export const ListLeadsResponsePhoneNumbers$inboundSchema: z.ZodType<
  ListLeadsResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListLeadsResponseDataPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ListLeadsResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponsePhoneNumbers$outboundSchema: z.ZodType<
  ListLeadsResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  ListLeadsResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListLeadsResponseDataPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponsePhoneNumbers$ {
  /** @deprecated use `ListLeadsResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `ListLeadsResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `ListLeadsResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = ListLeadsResponsePhoneNumbers$Outbound;
}

export function listLeadsResponsePhoneNumbersToJSON(
  listLeadsResponsePhoneNumbers: ListLeadsResponsePhoneNumbers,
): string {
  return JSON.stringify(
    ListLeadsResponsePhoneNumbers$outboundSchema.parse(
      listLeadsResponsePhoneNumbers,
    ),
  );
}

export function listLeadsResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseDataEmailsType
> = z.nativeEnum(ListLeadsResponseDataEmailsType);

/** @internal */
export const ListLeadsResponseDataEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseDataEmailsType
> = ListLeadsResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseDataEmailsType$ {
  /** @deprecated use `ListLeadsResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseDataEmailsType$inboundSchema;
  /** @deprecated use `ListLeadsResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const ListLeadsResponseEmails$inboundSchema: z.ZodType<
  ListLeadsResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListLeadsResponseDataEmailsType$inboundSchema).optional(),
});

/** @internal */
export type ListLeadsResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseEmails$outboundSchema: z.ZodType<
  ListLeadsResponseEmails$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListLeadsResponseDataEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseEmails$ {
  /** @deprecated use `ListLeadsResponseEmails$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseEmails$inboundSchema;
  /** @deprecated use `ListLeadsResponseEmails$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseEmails$outboundSchema;
  /** @deprecated use `ListLeadsResponseEmails$Outbound` instead. */
  export type Outbound = ListLeadsResponseEmails$Outbound;
}

export function listLeadsResponseEmailsToJSON(
  listLeadsResponseEmails: ListLeadsResponseEmails,
): string {
  return JSON.stringify(
    ListLeadsResponseEmails$outboundSchema.parse(listLeadsResponseEmails),
  );
}

export function listLeadsResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseEmails' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseValue6$inboundSchema: z.ZodType<
  ListLeadsResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListLeadsResponseValue6$Outbound = {};

/** @internal */
export const ListLeadsResponseValue6$outboundSchema: z.ZodType<
  ListLeadsResponseValue6$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseValue6$ {
  /** @deprecated use `ListLeadsResponseValue6$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseValue6$inboundSchema;
  /** @deprecated use `ListLeadsResponseValue6$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseValue6$outboundSchema;
  /** @deprecated use `ListLeadsResponseValue6$Outbound` instead. */
  export type Outbound = ListLeadsResponseValue6$Outbound;
}

export function listLeadsResponseValue6ToJSON(
  listLeadsResponseValue6: ListLeadsResponseValue6,
): string {
  return JSON.stringify(
    ListLeadsResponseValue6$outboundSchema.parse(listLeadsResponseValue6),
  );
}

export function listLeadsResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseValue6' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseValue4$inboundSchema: z.ZodType<
  ListLeadsResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListLeadsResponseValue4$Outbound = {};

/** @internal */
export const ListLeadsResponseValue4$outboundSchema: z.ZodType<
  ListLeadsResponseValue4$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseValue4$ {
  /** @deprecated use `ListLeadsResponseValue4$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseValue4$inboundSchema;
  /** @deprecated use `ListLeadsResponseValue4$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseValue4$outboundSchema;
  /** @deprecated use `ListLeadsResponseValue4$Outbound` instead. */
  export type Outbound = ListLeadsResponseValue4$Outbound;
}

export function listLeadsResponseValue4ToJSON(
  listLeadsResponseValue4: ListLeadsResponseValue4,
): string {
  return JSON.stringify(
    ListLeadsResponseValue4$outboundSchema.parse(listLeadsResponseValue4),
  );
}

export function listLeadsResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseValue4' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseValue$inboundSchema: z.ZodType<
  ListLeadsResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListLeadsResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListLeadsResponseValue6$inboundSchema)),
]);

/** @internal */
export type ListLeadsResponseValue$Outbound =
  | ListLeadsResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListLeadsResponseValue6$Outbound>;

/** @internal */
export const ListLeadsResponseValue$outboundSchema: z.ZodType<
  ListLeadsResponseValue$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseValue
> = z.union([
  z.lazy(() => ListLeadsResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListLeadsResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseValue$ {
  /** @deprecated use `ListLeadsResponseValue$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseValue$inboundSchema;
  /** @deprecated use `ListLeadsResponseValue$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseValue$outboundSchema;
  /** @deprecated use `ListLeadsResponseValue$Outbound` instead. */
  export type Outbound = ListLeadsResponseValue$Outbound;
}

export function listLeadsResponseValueToJSON(
  listLeadsResponseValue: ListLeadsResponseValue,
): string {
  return JSON.stringify(
    ListLeadsResponseValue$outboundSchema.parse(listLeadsResponseValue),
  );
}

export function listLeadsResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseValue' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseCustomFields$inboundSchema: z.ZodType<
  ListLeadsResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListLeadsResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListLeadsResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ListLeadsResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ListLeadsResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListLeadsResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ListLeadsResponseCustomFields$outboundSchema: z.ZodType<
  ListLeadsResponseCustomFields$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListLeadsResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListLeadsResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseCustomFields$ {
  /** @deprecated use `ListLeadsResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseCustomFields$inboundSchema;
  /** @deprecated use `ListLeadsResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseCustomFields$outboundSchema;
  /** @deprecated use `ListLeadsResponseCustomFields$Outbound` instead. */
  export type Outbound = ListLeadsResponseCustomFields$Outbound;
}

export function listLeadsResponseCustomFieldsToJSON(
  listLeadsResponseCustomFields: ListLeadsResponseCustomFields,
): string {
  return JSON.stringify(
    ListLeadsResponseCustomFields$outboundSchema.parse(
      listLeadsResponseCustomFields,
    ),
  );
}

export function listLeadsResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseCustomMappings$inboundSchema: z.ZodType<
  ListLeadsResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListLeadsResponseCustomMappings$Outbound = {};

/** @internal */
export const ListLeadsResponseCustomMappings$outboundSchema: z.ZodType<
  ListLeadsResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseCustomMappings$ {
  /** @deprecated use `ListLeadsResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseCustomMappings$inboundSchema;
  /** @deprecated use `ListLeadsResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseCustomMappings$outboundSchema;
  /** @deprecated use `ListLeadsResponseCustomMappings$Outbound` instead. */
  export type Outbound = ListLeadsResponseCustomMappings$Outbound;
}

export function listLeadsResponseCustomMappingsToJSON(
  listLeadsResponseCustomMappings: ListLeadsResponseCustomMappings,
): string {
  return JSON.stringify(
    ListLeadsResponseCustomMappings$outboundSchema.parse(
      listLeadsResponseCustomMappings,
    ),
  );
}

export function listLeadsResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseExtendPaths$inboundSchema: z.ZodType<
  ListLeadsResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListLeadsResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListLeadsResponseExtendPaths$outboundSchema: z.ZodType<
  ListLeadsResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseExtendPaths$ {
  /** @deprecated use `ListLeadsResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListLeadsResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListLeadsResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListLeadsResponseExtendPaths$Outbound;
}

export function listLeadsResponseExtendPathsToJSON(
  listLeadsResponseExtendPaths: ListLeadsResponseExtendPaths,
): string {
  return JSON.stringify(
    ListLeadsResponseExtendPaths$outboundSchema.parse(
      listLeadsResponseExtendPaths,
    ),
  );
}

export function listLeadsResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponsePassThrough$inboundSchema: z.ZodType<
  ListLeadsResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListLeadsResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListLeadsResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListLeadsResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListLeadsResponsePassThrough$outboundSchema: z.ZodType<
  ListLeadsResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListLeadsResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListLeadsResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponsePassThrough$ {
  /** @deprecated use `ListLeadsResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponsePassThrough$inboundSchema;
  /** @deprecated use `ListLeadsResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponsePassThrough$outboundSchema;
  /** @deprecated use `ListLeadsResponsePassThrough$Outbound` instead. */
  export type Outbound = ListLeadsResponsePassThrough$Outbound;
}

export function listLeadsResponsePassThroughToJSON(
  listLeadsResponsePassThrough: ListLeadsResponsePassThrough,
): string {
  return JSON.stringify(
    ListLeadsResponsePassThrough$outboundSchema.parse(
      listLeadsResponsePassThrough,
    ),
  );
}

export function listLeadsResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseData$inboundSchema: z.ZodType<
  ListLeadsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(ListLeadsResponseCurrency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => ListLeadsResponseWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ListLeadsResponseAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => ListLeadsResponseSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => ListLeadsResponsePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => ListLeadsResponseEmails$inboundSchema))
    .optional(),
  custom_fields: z.array(
    z.lazy(() => ListLeadsResponseCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ListLeadsResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => ListLeadsResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ListLeadsResponseData$Outbound = {
  id?: string | undefined;
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<ListLeadsResponseWebsites$Outbound> | undefined;
  addresses?: Array<ListLeadsResponseAddresses$Outbound> | undefined;
  social_links?: Array<ListLeadsResponseSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<ListLeadsResponsePhoneNumbers$Outbound> | undefined;
  emails?: Array<ListLeadsResponseEmails$Outbound> | undefined;
  custom_fields?: Array<ListLeadsResponseCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  custom_mappings?: ListLeadsResponseCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ListLeadsResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const ListLeadsResponseData$outboundSchema: z.ZodType<
  ListLeadsResponseData$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseData
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(ListLeadsResponseCurrency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => ListLeadsResponseWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ListLeadsResponseAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => ListLeadsResponseSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => ListLeadsResponsePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => ListLeadsResponseEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => ListLeadsResponseCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customMappings: z.nullable(
    z.lazy(() => ListLeadsResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => ListLeadsResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseData$ {
  /** @deprecated use `ListLeadsResponseData$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseData$inboundSchema;
  /** @deprecated use `ListLeadsResponseData$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseData$outboundSchema;
  /** @deprecated use `ListLeadsResponseData$Outbound` instead. */
  export type Outbound = ListLeadsResponseData$Outbound;
}

export function listLeadsResponseDataToJSON(
  listLeadsResponseData: ListLeadsResponseData,
): string {
  return JSON.stringify(
    ListLeadsResponseData$outboundSchema.parse(listLeadsResponseData),
  );
}

export function listLeadsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseData' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseCursors$inboundSchema: z.ZodType<
  ListLeadsResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListLeadsResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseCursors$outboundSchema: z.ZodType<
  ListLeadsResponseCursors$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseCursors$ {
  /** @deprecated use `ListLeadsResponseCursors$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseCursors$inboundSchema;
  /** @deprecated use `ListLeadsResponseCursors$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseCursors$outboundSchema;
  /** @deprecated use `ListLeadsResponseCursors$Outbound` instead. */
  export type Outbound = ListLeadsResponseCursors$Outbound;
}

export function listLeadsResponseCursorsToJSON(
  listLeadsResponseCursors: ListLeadsResponseCursors,
): string {
  return JSON.stringify(
    ListLeadsResponseCursors$outboundSchema.parse(listLeadsResponseCursors),
  );
}

export function listLeadsResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseCursors' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseMeta$inboundSchema: z.ZodType<
  ListLeadsResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ListLeadsResponseCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ListLeadsResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ListLeadsResponseCursors$Outbound | undefined;
};

/** @internal */
export const ListLeadsResponseMeta$outboundSchema: z.ZodType<
  ListLeadsResponseMeta$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ListLeadsResponseCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseMeta$ {
  /** @deprecated use `ListLeadsResponseMeta$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseMeta$inboundSchema;
  /** @deprecated use `ListLeadsResponseMeta$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseMeta$outboundSchema;
  /** @deprecated use `ListLeadsResponseMeta$Outbound` instead. */
  export type Outbound = ListLeadsResponseMeta$Outbound;
}

export function listLeadsResponseMetaToJSON(
  listLeadsResponseMeta: ListLeadsResponseMeta,
): string {
  return JSON.stringify(
    ListLeadsResponseMeta$outboundSchema.parse(listLeadsResponseMeta),
  );
}

export function listLeadsResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseMeta' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseLinks$inboundSchema: z.ZodType<
  ListLeadsResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListLeadsResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseLinks$outboundSchema: z.ZodType<
  ListLeadsResponseLinks$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseLinks$ {
  /** @deprecated use `ListLeadsResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseLinks$inboundSchema;
  /** @deprecated use `ListLeadsResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseLinks$outboundSchema;
  /** @deprecated use `ListLeadsResponseLinks$Outbound` instead. */
  export type Outbound = ListLeadsResponseLinks$Outbound;
}

export function listLeadsResponseLinksToJSON(
  listLeadsResponseLinks: ListLeadsResponseLinks,
): string {
  return JSON.stringify(
    ListLeadsResponseLinks$outboundSchema.parse(listLeadsResponseLinks),
  );
}

export function listLeadsResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseLinks' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponse$inboundSchema: z.ZodType<
  ListLeadsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListLeadsResponseData$inboundSchema)),
  meta: z.lazy(() => ListLeadsResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => ListLeadsResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListLeadsResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ListLeadsResponseData$Outbound>;
  meta?: ListLeadsResponseMeta$Outbound | undefined;
  links?: ListLeadsResponseLinks$Outbound | undefined;
};

/** @internal */
export const ListLeadsResponse$outboundSchema: z.ZodType<
  ListLeadsResponse$Outbound,
  z.ZodTypeDef,
  ListLeadsResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListLeadsResponseData$outboundSchema)),
  meta: z.lazy(() => ListLeadsResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => ListLeadsResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponse$ {
  /** @deprecated use `ListLeadsResponse$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponse$inboundSchema;
  /** @deprecated use `ListLeadsResponse$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponse$outboundSchema;
  /** @deprecated use `ListLeadsResponse$Outbound` instead. */
  export type Outbound = ListLeadsResponse$Outbound;
}

export function listLeadsResponseToJSON(
  listLeadsResponse: ListLeadsResponse,
): string {
  return JSON.stringify(
    ListLeadsResponse$outboundSchema.parse(listLeadsResponse),
  );
}

export function listLeadsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponse' from JSON`,
  );
}
