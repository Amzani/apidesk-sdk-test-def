/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * Specifies the category or role of the website in relation to the lead, such as 'personal', 'business', or 'portfolio'. This information helps in categorizing and filtering leads based on their associated websites.
 */
export const ListLeadsResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category or role of the website in relation to the lead, such as 'personal', 'business', or 'portfolio'. This information helps in categorizing and filtering leads based on their associated websites.
 */
export type ListLeadsResponseType = ClosedEnum<typeof ListLeadsResponseType>;

export type ListLeadsResponseWebsites = {
  /**
   * A unique identifier assigned to each website associated with a lead. This ID is used to distinguish between different websites and is crucial for operations that involve updating or referencing specific website data within the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The full URL of the website linked to the lead. This field is mandatory and provides the direct web address, which can be used for accessing the website or for integration purposes within CRM applications.
   */
  url: string;
  /**
   * Specifies the category or role of the website in relation to the lead, such as 'personal', 'business', or 'portfolio'. This information helps in categorizing and filtering leads based on their associated websites.
   */
  type?: ListLeadsResponseType | null | undefined;
};

/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the lead's contact information. It is a string value that provides context for how the address is used in CRM operations.
 */
export const ListLeadsResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the lead's contact information. It is a string value that provides context for how the address is used in CRM operations.
 */
export type ListLeadsResponseDataType = ClosedEnum<
  typeof ListLeadsResponseDataType
>;

export type ListLeadsResponseAddresses = {
  /**
   * A unique identifier for each address associated with a lead. This ID is essential for distinguishing between multiple addresses and is used in operations that require precise address management within the CRM system.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the lead's contact information. It is a string value that provides context for how the address is used in CRM operations.
   */
  type?: ListLeadsResponseDataType | null | undefined;
  /**
   * Contains the full address as a single string. This is particularly useful when the API does not provide the address in a structured format, allowing developers to handle address data in a flexible manner. It is a string that represents the complete address details.
   */
  string?: string | null | undefined;
  /**
   * Represents the name associated with the address, which could be a business name or a location identifier. This helps in distinguishing between different addresses linked to the same lead. It is a string value that adds context to the address information.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically including the street number, street name, and any suite or apartment numbers. This field is crucial for identifying the primary location details of the address. It is a string that forms part of the structured address data.
   */
  line1?: string | null | undefined;
  /**
   * The second line of the address, often used for additional location details such as floor numbers or building names. This field complements 'line1' to provide a complete address. It is a string that supports detailed address specification.
   */
  line2?: string | null | undefined;
  /**
   * This field contains the third line of the address, which may include additional location details such as a suite or apartment number. It is optional and can be left blank if not applicable. This information helps in providing a more precise address for CRM leads.
   */
  line3?: string | null | undefined;
  /**
   * This field contains the fourth line of the address, used for any extra address information that doesn't fit in the previous lines. It is optional and typically used for complex addresses. This helps in ensuring complete address details for CRM leads.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the address, representing the specific number assigned to a building or location on a street. This is a crucial part of the address for identifying the exact location of a CRM lead.
   */
  streetNumber?: string | null | undefined;
  /**
   * The name of the city where the lead is located. This field is part of the address details and helps in categorizing leads based on their geographical location. It is optional but important for regional analysis.
   */
  city?: string | null | undefined;
  /**
   * The name of the state or province where the lead is located. This field is part of the address details and is useful for organizing leads by state or region. It is optional but enhances the geographical context of the lead's address.
   */
  state?: string | null | undefined;
  /**
   * The postal code associated with the lead's address. This string value represents the ZIP code or equivalent postal code used for mail delivery in the lead's location. It is part of the address details returned in the response, aiding in geographic identification and sorting of leads.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the lead's address, formatted according to the ISO 3166-1 alpha-2 standard. This two-letter string identifies the country where the lead is located, providing essential information for international leads and facilitating country-specific operations.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the lead's address, expressed as a string. This value indicates the north-south position of the address on the Earth's surface, useful for mapping and location-based services within the CRM system.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the lead's address, expressed as a string. This value indicates the east-west position of the address on the Earth's surface, complementing the latitude for precise geolocation and mapping functionalities.
   */
  longitude?: string | null | undefined;
  /**
   * The county or equivalent sublocality of the lead's address. This string provides additional geographic detail, often used for regional analysis and segmentation of leads within the CRM system.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address. This field helps identify the primary individual to communicate with at this location. It is typically formatted as a string containing first and last names.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as 'Mr.', 'Ms.', or 'Dr.'. This field provides a formal greeting context for communications and is formatted as a string.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with the address, used for direct communication. This field is formatted as a string and may include country and area codes to ensure proper dialing.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the address, allowing for document transmission via fax. This field is formatted as a string and should include any necessary prefixes for international dialing.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the address, used for electronic communications. This field is formatted as a string and should follow standard email address conventions, such as 'example@domain.com'.
   */
  email?: string | null | undefined;
  /**
   * The URL of the website associated with the address. This field provides a direct link to the online presence of the lead's address, facilitating quick access to additional information. It is typically formatted as a standard web address (e.g., 'https://www.example.com').
   */
  website?: string | null | undefined;
  /**
   * Additional notes or comments related to the address. This field allows for the inclusion of any extra information that might be relevant to the address, such as delivery instructions or historical context. It is a free-text field, enabling flexible data entry.
   */
  notes?: string | null | undefined;
  /**
   * A version control string used to track changes to the address object. This binary value is updated with each modification to help prevent data conflicts during concurrent updates. It ensures data integrity by allowing systems to detect and manage updates effectively.
   */
  rowVersion?: string | null | undefined;
};

export type ListLeadsResponseSocialLinks = {
  /**
   * A unique identifier for each social link entry. This ID is used to distinguish between different social media profiles within the array, ensuring that each link can be individually referenced and managed.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media profile associated with the lead. This string should be a valid web address, such as 'https://www.twitter.com/apideck'. It allows integration systems to directly access the lead's social media presence, facilitating social engagement and data enrichment.
   */
  url: string;
  /**
   * The type of social media platform linked to the lead, such as 'twitter'. This string helps categorize the social link, enabling systems to handle different platforms appropriately and tailor interactions based on the platform type.
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number, such as 'mobile', 'home', or 'work', represented as a string. This categorization helps in understanding the context of the phone number usage and prioritizing communication methods.
 */
export const ListLeadsResponseDataPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number, such as 'mobile', 'home', or 'work', represented as a string. This categorization helps in understanding the context of the phone number usage and prioritizing communication methods.
 */
export type ListLeadsResponseDataPhoneNumbersType = ClosedEnum<
  typeof ListLeadsResponseDataPhoneNumbersType
>;

export type ListLeadsResponsePhoneNumbers = {
  /**
   * A unique identifier for each phone number entry within the lead's contact information. This string ensures that each phone number can be distinctly referenced and managed within the CRM system, supporting precise data operations and updates.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code associated with the lead's phone number, such as '+1' for the United States. This string is crucial for ensuring that phone numbers are correctly formatted and dialed internationally, facilitating global communication efforts.
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, represented as a string, such as '323'. This field helps in identifying the geographical region associated with the phone number, aiding in regional segmentation and analysis of leads.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number associated with the lead, formatted as a string. This is a required field and serves as a primary contact method for the lead, essential for communication and follow-up.
   */
  number: string;
  /**
   * The extension number for the phone, if applicable, provided as a string. This field is useful for directing calls to specific departments or individuals within an organization, enhancing direct communication.
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number, such as 'mobile', 'home', or 'work', represented as a string. This categorization helps in understanding the context of the phone number usage and prioritizing communication methods.
   */
  type?: ListLeadsResponseDataPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and retrieval within the CRM system.
 */
export const ListLeadsResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and retrieval within the CRM system.
 */
export type ListLeadsResponseDataEmailsType = ClosedEnum<
  typeof ListLeadsResponseDataEmailsType
>;

export type ListLeadsResponseEmails = {
  /**
   * A unique identifier assigned to each email address associated with a lead. This ID is used to distinguish between different email entries within the lead's contact information.
   */
  id?: string | null | undefined;
  /**
   * The email address of the lead, formatted as a standard email string (e.g., example@domain.com). This field is essential for communication and is required for each lead entry.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and retrieval within the CRM system.
   */
  type?: ListLeadsResponseDataEmailsType | null | undefined;
};

export type ListLeadsResponseValue6 = {};

export type ListLeadsResponseValue4 = {};

/**
 * The actual value assigned to the custom field for a lead. This can vary in type and content, depending on the custom field's definition, and is crucial for personalized data management in CRM applications.
 */
export type ListLeadsResponseValue =
  | ListLeadsResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListLeadsResponseValue6>;

export type ListLeadsResponseCustomFields = {
  /**
   * A unique identifier for each custom field entry associated with a lead. This ID ensures that each custom field can be individually referenced and managed within the CRM system.
   */
  id: string | null;
  /**
   * The name of the custom field associated with a lead. This string value helps identify the specific custom attribute within the lead's data, allowing for tailored data handling and integration into CRM systems.
   */
  name?: string | null | undefined;
  /**
   * A detailed description of the custom field, providing additional context or information about its purpose and usage within the lead's data. This helps developers understand the significance of the custom field in the CRM system.
   */
  description?: string | null | undefined;
  /**
   * The actual value assigned to the custom field for a lead. This can vary in type and content, depending on the custom field's definition, and is crucial for personalized data management in CRM applications.
   */
  value?:
    | ListLeadsResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListLeadsResponseValue6>
    | null
    | undefined;
};

/**
 * Contains custom mappings configured for the lead resource, providing additional context or data transformations specific to the service integration. This object helps in aligning the lead data with custom fields or structures defined in the CRM system.
 */
export type ListLeadsResponseCustomMappings = {};

export type ListLeadsResponseExtendPaths = {
  /**
   * This property specifies the JSONPath string where a value should be applied within the data structure. It is required for defining the exact location in the JSON object where modifications are intended, ensuring accurate data updates.
   */
  path: string;
  /**
   * This property represents the value to be set at the specified JSONPath. It can be of any data type, allowing flexibility in the kind of data that can be inserted or updated within the API response structure.
   */
  value?: any | undefined;
};

export type ListLeadsResponsePassThrough = {
  /**
   * A unique identifier for the service to which the pass_through data should be applied, ensuring that the custom data is directed to the correct service integration.
   */
  serviceId: string;
  /**
   * This property contains an optional identifier for a specific workflow operation. It is particularly useful in scenarios where multiple downstream requests are made, allowing developers to track and apply the pass-through operation to the correct workflow. The value should be a string that uniquely identifies the operation within the context of the API call.
   */
  operationId?: string | undefined;
  /**
   * This property is a flexible object designed to allow direct extension with any additional properties. It serves as a container for custom data that can be passed through the API call, enabling developers to include extra information that may be necessary for specific integrations or workflows.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property is an array of objects, each representing a structured data modification. It allows developers to specify paths and values for modifying data within the API response, facilitating precise and targeted data handling.
   */
  extendPaths?: Array<ListLeadsResponseExtendPaths> | undefined;
};

export type ListLeadsResponseData = {
  /**
   * A unique identifier assigned to each lead within the CRM system. This ID is used to distinguish and reference individual leads, allowing for precise data management and retrieval operations.
   */
  id?: string | undefined;
  /**
   * The full name of the lead, which is essential for identification and communication purposes. This field is required and helps in personalizing interactions and maintaining accurate records within the CRM.
   */
  name: string;
  /**
   * The name of the company that the lead is associated with, providing context about the lead's business environment. This information is crucial for understanding the lead's professional background and potential business opportunities.
   */
  companyName: string | null;
  /**
   * The identifier of the user or entity that owns or manages the lead within the CRM system. This field helps in assigning responsibility and tracking the lead's progress through the sales pipeline.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the owner of the lead. This field contains the full name of the individual responsible for managing the lead within the CRM system. It helps in identifying the point of contact for any follow-up actions or communications related to the lead.
   */
  ownerName?: string | null | undefined;
  /**
   * The company the lead is associated with. This string represents the unique identifier of the company linked to the lead, facilitating the association of lead data with specific business entities within the CRM.
   */
  companyId?: string | null | undefined;
  /**
   * The identifier of the lead. This unique string serves as the primary key for the lead record, allowing for precise retrieval and management of lead information within the CRM system.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead. This field indicates the origin of the lead, such as a marketing campaign, referral, or direct inquiry, providing insights into lead generation channels and effectiveness.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead. This string contains the given name of the lead, used for personalization in communications and record-keeping within the CRM system.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead. This field contains the surname of the individual lead, which is used for identification and personalization within CRM systems. It is a string value that may be used in conjunction with other personal details to uniquely identify a lead.
   */
  lastName?: string | null | undefined;
  /**
   * A brief overview or summary of the lead, providing context or additional information about the individual or organization. This string field can include notes or comments that help in understanding the lead's background or interests, aiding in more personalized communication and follow-up.
   */
  description?: string | null | undefined;
  /**
   * The prefix or title of the lead, such as Mr., Ms., Dr., etc. This string field is used to address the lead appropriately in communications and can be important for maintaining professionalism and respect in interactions.
   */
  prefix?: string | null | undefined;
  /**
   * The job title or position held by the lead within their organization. This string value provides insight into the lead's role and responsibilities, which can be crucial for tailoring sales pitches or marketing strategies to their specific needs and authority level.
   */
  title?: string | null | undefined;
  /**
   * The language code representing the lead's preferred language for communication, formatted according to ISO 639-1 standards (e.g., 'EN' for English). This string field helps in ensuring that communications are conducted in the lead's preferred language, enhancing engagement and understanding.
   */
  language?: string | null | undefined;
  /**
   * The current status of the lead within the CRM system. This field indicates the lead's progress or state in the sales pipeline, such as 'new', 'contacted', or 'qualified'. Understanding the status helps in managing and prioritizing leads effectively.
   */
  status?: string | null | undefined;
  /**
   * The total monetary value associated with the lead, represented as a numeric value. This amount reflects the potential revenue that could be generated if the lead is successfully converted into a customer. It is crucial for financial forecasting and prioritizing high-value leads.
   */
  monetaryAmount?: number | null | undefined;
  currency?: Currency | null | undefined;
  /**
   * The fax number associated with the lead, formatted as a string. This contact detail can be used for sending documents or communications via fax, which may be relevant for certain business transactions or industries.
   */
  fax?: string | null | undefined;
  /**
   * A list of website URLs related to the lead, provided as an array of strings. These websites may include the lead's company site, personal blog, or other relevant online profiles, offering additional context and information about the lead.
   */
  websites?: Array<ListLeadsResponseWebsites> | undefined;
  /**
   * An array containing address objects related to the lead. Each object within the array holds detailed information about a specific address, facilitating comprehensive location data management for leads.
   */
  addresses?: Array<ListLeadsResponseAddresses> | undefined;
  /**
   * An array containing social media links associated with the lead. Each entry in the array represents a different social media profile, providing a comprehensive view of the lead's online presence. This structure supports multiple platforms and profiles.
   */
  socialLinks?: Array<ListLeadsResponseSocialLinks> | undefined;
  /**
   * An array containing the phone numbers associated with the lead. Each entry in the array represents a distinct phone number object, providing multiple contact options for the lead. This structure supports comprehensive communication strategies by listing all available phone contacts.
   */
  phoneNumbers?: Array<ListLeadsResponsePhoneNumbers> | undefined;
  /**
   * An array of email addresses associated with the lead. This collection allows for multiple contact points via email, facilitating diverse communication strategies and ensuring messages reach the lead through preferred channels.
   */
  emails?: Array<ListLeadsResponseEmails> | undefined;
  /**
   * An array of custom fields that provide additional, user-defined information about the lead. These fields allow for flexible data storage beyond standard attributes, accommodating specific business needs.
   */
  customFields?: Array<ListLeadsResponseCustomFields> | undefined;
  /**
   * An array of tags associated with the lead, used for categorization or labeling purposes. These tags help in organizing and filtering leads within the CRM system, enhancing data retrieval and management.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Contains custom mappings configured for the lead resource, providing additional context or data transformations specific to the service integration. This object helps in aligning the lead data with custom fields or structures defined in the CRM system.
   */
  customMappings?: ListLeadsResponseCustomMappings | null | undefined;
  /**
   * The timestamp indicating when the lead was last updated, formatted in ISO 8601. This helps track changes and ensure the lead data is current within the CRM system.
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp indicating when the lead was initially created, formatted in ISO 8601. This provides a historical reference for when the lead entered the CRM system.
   */
  createdAt?: string | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or modifications when creating or updating lead resources. This feature supports the transmission of additional parameters that may not be standard across all CRM systems.
   */
  passThrough?: Array<ListLeadsResponsePassThrough> | undefined;
};

/**
 * An object containing cursors used for pagination, allowing developers to navigate through different pages of lead data. It includes specific cursors for moving to previous or next pages, facilitating seamless data retrieval in paginated responses.
 */
export type ListLeadsResponseCursors = {
  /**
   * A string cursor that enables navigation to the previous page of results in the paginated response. This is useful for developers who need to traverse back through the data set to review or reprocess earlier leads.
   */
  previous?: string | null | undefined;
  /**
   * A string cursor that identifies the current page of results in the paginated response. This helps maintain the context of the current data view, ensuring developers can track their position within the dataset as they navigate through pages.
   */
  current?: string | null | undefined;
  /**
   * This property contains the cursor string used to fetch the next set of results in a paginated response. It is typically a token or identifier that the API uses to continue retrieving data from where the last request left off. This is particularly useful for navigating large datasets efficiently without overloading the response with too much data at once.
   */
  next?: string | null | undefined;
};

/**
 * This object contains metadata about the response, providing additional context and information about the data returned. It includes details such as pagination cursors and the number of items on the current page, helping developers manage and navigate through large sets of data efficiently.
 */
export type ListLeadsResponseMeta = {
  /**
   * An integer representing the total number of lead items included in the current page of the response. This helps developers understand the volume of data returned and manage pagination effectively when dealing with large datasets.
   */
  itemsOnPage?: number | undefined;
  /**
   * An object containing cursors used for pagination, allowing developers to navigate through different pages of lead data. It includes specific cursors for moving to previous or next pages, facilitating seamless data retrieval in paginated responses.
   */
  cursors?: ListLeadsResponseCursors | undefined;
};

/**
 * This object contains navigational links that help in traversing through paginated API responses. It typically includes URLs or endpoints that direct to the previous, current, or next pages of data, facilitating easy navigation and data retrieval in a structured manner.
 */
export type ListLeadsResponseLinks = {
  /**
   * This property provides the URL or endpoint link to access the previous page of results in a paginated API response. It is useful for users who need to review or reprocess data from earlier pages without having to manually adjust query parameters.
   */
  previous?: string | null | undefined;
  /**
   * This property contains the URL or endpoint link that represents the current page of results in the API response. It serves as a reference point for the current dataset being viewed or processed, ensuring users can easily identify their current position within the paginated data.
   */
  current?: string | undefined;
  /**
   * This property provides the URL or endpoint link to access the next page of results in a paginated API response. It is essential for users who wish to continue browsing through subsequent pages of data seamlessly, without having to manually construct the next query.
   */
  next?: string | null | undefined;
};

/**
 * Leads
 */
export type ListLeadsResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value helps determine if the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is essential for error handling and debugging in client applications.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for an error. This string provides a human-readable explanation of the status code, aiding in understanding the outcome of the API call.
   */
  status: string;
  /**
   * The unique identifier for the service provider within the Apideck ecosystem. This string helps in identifying which third-party service the leads data is being fetched from, ensuring proper integration and data mapping.
   */
  service: string;
  /**
   * The name of the unified API resource being accessed, in this case, 'leads'. This string indicates the type of data being retrieved, which is crucial for developers to understand the context of the response and how to handle the data appropriately.
   */
  resource: string;
  /**
   * The specific operation performed by the API, identified as 'leadsAll' in this context. This string helps developers understand the action taken by the API, which is fetching all leads, and is useful for logging and tracking API usage.
   */
  operation: string;
  /**
   * An array containing the list of leads retrieved from the CRM system. Each element in the array represents a single lead with detailed information such as name, company, and owner. This array is the primary container for the lead data returned by the 'leadsAll' operation, facilitating easy iteration and processing.
   */
  data: Array<ListLeadsResponseData>;
  /**
   * This object contains metadata about the response, providing additional context and information about the data returned. It includes details such as pagination cursors and the number of items on the current page, helping developers manage and navigate through large sets of data efficiently.
   */
  meta?: ListLeadsResponseMeta | undefined;
  /**
   * This object contains navigational links that help in traversing through paginated API responses. It typically includes URLs or endpoints that direct to the previous, current, or next pages of data, facilitating easy navigation and data retrieval in a structured manner.
   */
  links?: ListLeadsResponseLinks | undefined;
};

/** @internal */
export const ListLeadsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseType
> = z.nativeEnum(ListLeadsResponseType);

/** @internal */
export const ListLeadsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseType
> = ListLeadsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseType$ {
  /** @deprecated use `ListLeadsResponseType$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseType$inboundSchema;
  /** @deprecated use `ListLeadsResponseType$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseType$outboundSchema;
}

/** @internal */
export const ListLeadsResponseWebsites$inboundSchema: z.ZodType<
  ListLeadsResponseWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ListLeadsResponseType$inboundSchema).optional(),
});

/** @internal */
export type ListLeadsResponseWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseWebsites$outboundSchema: z.ZodType<
  ListLeadsResponseWebsites$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ListLeadsResponseType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseWebsites$ {
  /** @deprecated use `ListLeadsResponseWebsites$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseWebsites$inboundSchema;
  /** @deprecated use `ListLeadsResponseWebsites$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseWebsites$outboundSchema;
  /** @deprecated use `ListLeadsResponseWebsites$Outbound` instead. */
  export type Outbound = ListLeadsResponseWebsites$Outbound;
}

export function listLeadsResponseWebsitesToJSON(
  listLeadsResponseWebsites: ListLeadsResponseWebsites,
): string {
  return JSON.stringify(
    ListLeadsResponseWebsites$outboundSchema.parse(listLeadsResponseWebsites),
  );
}

export function listLeadsResponseWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseWebsites' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseDataType
> = z.nativeEnum(ListLeadsResponseDataType);

/** @internal */
export const ListLeadsResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseDataType
> = ListLeadsResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseDataType$ {
  /** @deprecated use `ListLeadsResponseDataType$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseDataType$inboundSchema;
  /** @deprecated use `ListLeadsResponseDataType$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseDataType$outboundSchema;
}

/** @internal */
export const ListLeadsResponseAddresses$inboundSchema: z.ZodType<
  ListLeadsResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListLeadsResponseDataType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ListLeadsResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseAddresses$outboundSchema: z.ZodType<
  ListLeadsResponseAddresses$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListLeadsResponseDataType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseAddresses$ {
  /** @deprecated use `ListLeadsResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseAddresses$inboundSchema;
  /** @deprecated use `ListLeadsResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseAddresses$outboundSchema;
  /** @deprecated use `ListLeadsResponseAddresses$Outbound` instead. */
  export type Outbound = ListLeadsResponseAddresses$Outbound;
}

export function listLeadsResponseAddressesToJSON(
  listLeadsResponseAddresses: ListLeadsResponseAddresses,
): string {
  return JSON.stringify(
    ListLeadsResponseAddresses$outboundSchema.parse(listLeadsResponseAddresses),
  );
}

export function listLeadsResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseAddresses' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseSocialLinks$inboundSchema: z.ZodType<
  ListLeadsResponseSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListLeadsResponseSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseSocialLinks$outboundSchema: z.ZodType<
  ListLeadsResponseSocialLinks$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseSocialLinks$ {
  /** @deprecated use `ListLeadsResponseSocialLinks$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseSocialLinks$inboundSchema;
  /** @deprecated use `ListLeadsResponseSocialLinks$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseSocialLinks$outboundSchema;
  /** @deprecated use `ListLeadsResponseSocialLinks$Outbound` instead. */
  export type Outbound = ListLeadsResponseSocialLinks$Outbound;
}

export function listLeadsResponseSocialLinksToJSON(
  listLeadsResponseSocialLinks: ListLeadsResponseSocialLinks,
): string {
  return JSON.stringify(
    ListLeadsResponseSocialLinks$outboundSchema.parse(
      listLeadsResponseSocialLinks,
    ),
  );
}

export function listLeadsResponseSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseSocialLinks' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseDataPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof ListLeadsResponseDataPhoneNumbersType> = z.nativeEnum(
    ListLeadsResponseDataPhoneNumbersType,
  );

/** @internal */
export const ListLeadsResponseDataPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof ListLeadsResponseDataPhoneNumbersType> =
    ListLeadsResponseDataPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseDataPhoneNumbersType$ {
  /** @deprecated use `ListLeadsResponseDataPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    ListLeadsResponseDataPhoneNumbersType$inboundSchema;
  /** @deprecated use `ListLeadsResponseDataPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    ListLeadsResponseDataPhoneNumbersType$outboundSchema;
}

/** @internal */
export const ListLeadsResponsePhoneNumbers$inboundSchema: z.ZodType<
  ListLeadsResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListLeadsResponseDataPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ListLeadsResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponsePhoneNumbers$outboundSchema: z.ZodType<
  ListLeadsResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  ListLeadsResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListLeadsResponseDataPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponsePhoneNumbers$ {
  /** @deprecated use `ListLeadsResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `ListLeadsResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `ListLeadsResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = ListLeadsResponsePhoneNumbers$Outbound;
}

export function listLeadsResponsePhoneNumbersToJSON(
  listLeadsResponsePhoneNumbers: ListLeadsResponsePhoneNumbers,
): string {
  return JSON.stringify(
    ListLeadsResponsePhoneNumbers$outboundSchema.parse(
      listLeadsResponsePhoneNumbers,
    ),
  );
}

export function listLeadsResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseDataEmailsType
> = z.nativeEnum(ListLeadsResponseDataEmailsType);

/** @internal */
export const ListLeadsResponseDataEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof ListLeadsResponseDataEmailsType
> = ListLeadsResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseDataEmailsType$ {
  /** @deprecated use `ListLeadsResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseDataEmailsType$inboundSchema;
  /** @deprecated use `ListLeadsResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const ListLeadsResponseEmails$inboundSchema: z.ZodType<
  ListLeadsResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListLeadsResponseDataEmailsType$inboundSchema).optional(),
});

/** @internal */
export type ListLeadsResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseEmails$outboundSchema: z.ZodType<
  ListLeadsResponseEmails$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListLeadsResponseDataEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseEmails$ {
  /** @deprecated use `ListLeadsResponseEmails$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseEmails$inboundSchema;
  /** @deprecated use `ListLeadsResponseEmails$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseEmails$outboundSchema;
  /** @deprecated use `ListLeadsResponseEmails$Outbound` instead. */
  export type Outbound = ListLeadsResponseEmails$Outbound;
}

export function listLeadsResponseEmailsToJSON(
  listLeadsResponseEmails: ListLeadsResponseEmails,
): string {
  return JSON.stringify(
    ListLeadsResponseEmails$outboundSchema.parse(listLeadsResponseEmails),
  );
}

export function listLeadsResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseEmails' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseValue6$inboundSchema: z.ZodType<
  ListLeadsResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListLeadsResponseValue6$Outbound = {};

/** @internal */
export const ListLeadsResponseValue6$outboundSchema: z.ZodType<
  ListLeadsResponseValue6$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseValue6$ {
  /** @deprecated use `ListLeadsResponseValue6$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseValue6$inboundSchema;
  /** @deprecated use `ListLeadsResponseValue6$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseValue6$outboundSchema;
  /** @deprecated use `ListLeadsResponseValue6$Outbound` instead. */
  export type Outbound = ListLeadsResponseValue6$Outbound;
}

export function listLeadsResponseValue6ToJSON(
  listLeadsResponseValue6: ListLeadsResponseValue6,
): string {
  return JSON.stringify(
    ListLeadsResponseValue6$outboundSchema.parse(listLeadsResponseValue6),
  );
}

export function listLeadsResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseValue6' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseValue4$inboundSchema: z.ZodType<
  ListLeadsResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListLeadsResponseValue4$Outbound = {};

/** @internal */
export const ListLeadsResponseValue4$outboundSchema: z.ZodType<
  ListLeadsResponseValue4$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseValue4$ {
  /** @deprecated use `ListLeadsResponseValue4$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseValue4$inboundSchema;
  /** @deprecated use `ListLeadsResponseValue4$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseValue4$outboundSchema;
  /** @deprecated use `ListLeadsResponseValue4$Outbound` instead. */
  export type Outbound = ListLeadsResponseValue4$Outbound;
}

export function listLeadsResponseValue4ToJSON(
  listLeadsResponseValue4: ListLeadsResponseValue4,
): string {
  return JSON.stringify(
    ListLeadsResponseValue4$outboundSchema.parse(listLeadsResponseValue4),
  );
}

export function listLeadsResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseValue4' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseValue$inboundSchema: z.ZodType<
  ListLeadsResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListLeadsResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListLeadsResponseValue6$inboundSchema)),
]);

/** @internal */
export type ListLeadsResponseValue$Outbound =
  | ListLeadsResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListLeadsResponseValue6$Outbound>;

/** @internal */
export const ListLeadsResponseValue$outboundSchema: z.ZodType<
  ListLeadsResponseValue$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseValue
> = z.union([
  z.lazy(() => ListLeadsResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListLeadsResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseValue$ {
  /** @deprecated use `ListLeadsResponseValue$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseValue$inboundSchema;
  /** @deprecated use `ListLeadsResponseValue$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseValue$outboundSchema;
  /** @deprecated use `ListLeadsResponseValue$Outbound` instead. */
  export type Outbound = ListLeadsResponseValue$Outbound;
}

export function listLeadsResponseValueToJSON(
  listLeadsResponseValue: ListLeadsResponseValue,
): string {
  return JSON.stringify(
    ListLeadsResponseValue$outboundSchema.parse(listLeadsResponseValue),
  );
}

export function listLeadsResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseValue' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseCustomFields$inboundSchema: z.ZodType<
  ListLeadsResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListLeadsResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListLeadsResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ListLeadsResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ListLeadsResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListLeadsResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ListLeadsResponseCustomFields$outboundSchema: z.ZodType<
  ListLeadsResponseCustomFields$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListLeadsResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListLeadsResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseCustomFields$ {
  /** @deprecated use `ListLeadsResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseCustomFields$inboundSchema;
  /** @deprecated use `ListLeadsResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseCustomFields$outboundSchema;
  /** @deprecated use `ListLeadsResponseCustomFields$Outbound` instead. */
  export type Outbound = ListLeadsResponseCustomFields$Outbound;
}

export function listLeadsResponseCustomFieldsToJSON(
  listLeadsResponseCustomFields: ListLeadsResponseCustomFields,
): string {
  return JSON.stringify(
    ListLeadsResponseCustomFields$outboundSchema.parse(
      listLeadsResponseCustomFields,
    ),
  );
}

export function listLeadsResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseCustomMappings$inboundSchema: z.ZodType<
  ListLeadsResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListLeadsResponseCustomMappings$Outbound = {};

/** @internal */
export const ListLeadsResponseCustomMappings$outboundSchema: z.ZodType<
  ListLeadsResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseCustomMappings$ {
  /** @deprecated use `ListLeadsResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseCustomMappings$inboundSchema;
  /** @deprecated use `ListLeadsResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseCustomMappings$outboundSchema;
  /** @deprecated use `ListLeadsResponseCustomMappings$Outbound` instead. */
  export type Outbound = ListLeadsResponseCustomMappings$Outbound;
}

export function listLeadsResponseCustomMappingsToJSON(
  listLeadsResponseCustomMappings: ListLeadsResponseCustomMappings,
): string {
  return JSON.stringify(
    ListLeadsResponseCustomMappings$outboundSchema.parse(
      listLeadsResponseCustomMappings,
    ),
  );
}

export function listLeadsResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseExtendPaths$inboundSchema: z.ZodType<
  ListLeadsResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListLeadsResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListLeadsResponseExtendPaths$outboundSchema: z.ZodType<
  ListLeadsResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseExtendPaths$ {
  /** @deprecated use `ListLeadsResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListLeadsResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListLeadsResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListLeadsResponseExtendPaths$Outbound;
}

export function listLeadsResponseExtendPathsToJSON(
  listLeadsResponseExtendPaths: ListLeadsResponseExtendPaths,
): string {
  return JSON.stringify(
    ListLeadsResponseExtendPaths$outboundSchema.parse(
      listLeadsResponseExtendPaths,
    ),
  );
}

export function listLeadsResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponsePassThrough$inboundSchema: z.ZodType<
  ListLeadsResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListLeadsResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListLeadsResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListLeadsResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListLeadsResponsePassThrough$outboundSchema: z.ZodType<
  ListLeadsResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListLeadsResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListLeadsResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponsePassThrough$ {
  /** @deprecated use `ListLeadsResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponsePassThrough$inboundSchema;
  /** @deprecated use `ListLeadsResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponsePassThrough$outboundSchema;
  /** @deprecated use `ListLeadsResponsePassThrough$Outbound` instead. */
  export type Outbound = ListLeadsResponsePassThrough$Outbound;
}

export function listLeadsResponsePassThroughToJSON(
  listLeadsResponsePassThrough: ListLeadsResponsePassThrough,
): string {
  return JSON.stringify(
    ListLeadsResponsePassThrough$outboundSchema.parse(
      listLeadsResponsePassThrough,
    ),
  );
}

export function listLeadsResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseData$inboundSchema: z.ZodType<
  ListLeadsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => ListLeadsResponseWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ListLeadsResponseAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => ListLeadsResponseSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => ListLeadsResponsePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => ListLeadsResponseEmails$inboundSchema))
    .optional(),
  custom_fields: z.array(
    z.lazy(() => ListLeadsResponseCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ListLeadsResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => ListLeadsResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ListLeadsResponseData$Outbound = {
  id?: string | undefined;
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<ListLeadsResponseWebsites$Outbound> | undefined;
  addresses?: Array<ListLeadsResponseAddresses$Outbound> | undefined;
  social_links?: Array<ListLeadsResponseSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<ListLeadsResponsePhoneNumbers$Outbound> | undefined;
  emails?: Array<ListLeadsResponseEmails$Outbound> | undefined;
  custom_fields?: Array<ListLeadsResponseCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  custom_mappings?: ListLeadsResponseCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ListLeadsResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const ListLeadsResponseData$outboundSchema: z.ZodType<
  ListLeadsResponseData$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseData
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => ListLeadsResponseWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ListLeadsResponseAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => ListLeadsResponseSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => ListLeadsResponsePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => ListLeadsResponseEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => ListLeadsResponseCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customMappings: z.nullable(
    z.lazy(() => ListLeadsResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => ListLeadsResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseData$ {
  /** @deprecated use `ListLeadsResponseData$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseData$inboundSchema;
  /** @deprecated use `ListLeadsResponseData$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseData$outboundSchema;
  /** @deprecated use `ListLeadsResponseData$Outbound` instead. */
  export type Outbound = ListLeadsResponseData$Outbound;
}

export function listLeadsResponseDataToJSON(
  listLeadsResponseData: ListLeadsResponseData,
): string {
  return JSON.stringify(
    ListLeadsResponseData$outboundSchema.parse(listLeadsResponseData),
  );
}

export function listLeadsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseData' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseCursors$inboundSchema: z.ZodType<
  ListLeadsResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListLeadsResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseCursors$outboundSchema: z.ZodType<
  ListLeadsResponseCursors$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseCursors$ {
  /** @deprecated use `ListLeadsResponseCursors$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseCursors$inboundSchema;
  /** @deprecated use `ListLeadsResponseCursors$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseCursors$outboundSchema;
  /** @deprecated use `ListLeadsResponseCursors$Outbound` instead. */
  export type Outbound = ListLeadsResponseCursors$Outbound;
}

export function listLeadsResponseCursorsToJSON(
  listLeadsResponseCursors: ListLeadsResponseCursors,
): string {
  return JSON.stringify(
    ListLeadsResponseCursors$outboundSchema.parse(listLeadsResponseCursors),
  );
}

export function listLeadsResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseCursors' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseMeta$inboundSchema: z.ZodType<
  ListLeadsResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ListLeadsResponseCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ListLeadsResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ListLeadsResponseCursors$Outbound | undefined;
};

/** @internal */
export const ListLeadsResponseMeta$outboundSchema: z.ZodType<
  ListLeadsResponseMeta$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ListLeadsResponseCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseMeta$ {
  /** @deprecated use `ListLeadsResponseMeta$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseMeta$inboundSchema;
  /** @deprecated use `ListLeadsResponseMeta$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseMeta$outboundSchema;
  /** @deprecated use `ListLeadsResponseMeta$Outbound` instead. */
  export type Outbound = ListLeadsResponseMeta$Outbound;
}

export function listLeadsResponseMetaToJSON(
  listLeadsResponseMeta: ListLeadsResponseMeta,
): string {
  return JSON.stringify(
    ListLeadsResponseMeta$outboundSchema.parse(listLeadsResponseMeta),
  );
}

export function listLeadsResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseMeta' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponseLinks$inboundSchema: z.ZodType<
  ListLeadsResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListLeadsResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListLeadsResponseLinks$outboundSchema: z.ZodType<
  ListLeadsResponseLinks$Outbound,
  z.ZodTypeDef,
  ListLeadsResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponseLinks$ {
  /** @deprecated use `ListLeadsResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponseLinks$inboundSchema;
  /** @deprecated use `ListLeadsResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponseLinks$outboundSchema;
  /** @deprecated use `ListLeadsResponseLinks$Outbound` instead. */
  export type Outbound = ListLeadsResponseLinks$Outbound;
}

export function listLeadsResponseLinksToJSON(
  listLeadsResponseLinks: ListLeadsResponseLinks,
): string {
  return JSON.stringify(
    ListLeadsResponseLinks$outboundSchema.parse(listLeadsResponseLinks),
  );
}

export function listLeadsResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponseLinks' from JSON`,
  );
}

/** @internal */
export const ListLeadsResponse$inboundSchema: z.ZodType<
  ListLeadsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListLeadsResponseData$inboundSchema)),
  meta: z.lazy(() => ListLeadsResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => ListLeadsResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListLeadsResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ListLeadsResponseData$Outbound>;
  meta?: ListLeadsResponseMeta$Outbound | undefined;
  links?: ListLeadsResponseLinks$Outbound | undefined;
};

/** @internal */
export const ListLeadsResponse$outboundSchema: z.ZodType<
  ListLeadsResponse$Outbound,
  z.ZodTypeDef,
  ListLeadsResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListLeadsResponseData$outboundSchema)),
  meta: z.lazy(() => ListLeadsResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => ListLeadsResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLeadsResponse$ {
  /** @deprecated use `ListLeadsResponse$inboundSchema` instead. */
  export const inboundSchema = ListLeadsResponse$inboundSchema;
  /** @deprecated use `ListLeadsResponse$outboundSchema` instead. */
  export const outboundSchema = ListLeadsResponse$outboundSchema;
  /** @deprecated use `ListLeadsResponse$Outbound` instead. */
  export type Outbound = ListLeadsResponse$Outbound;
}

export function listLeadsResponseToJSON(
  listLeadsResponse: ListLeadsResponse,
): string {
  return JSON.stringify(
    ListLeadsResponse$outboundSchema.parse(listLeadsResponse),
  );
}

export function listLeadsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListLeadsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListLeadsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListLeadsResponse' from JSON`,
  );
}
