/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the unique identifier of the contact that was deleted. It serves as a confirmation that the specified contact has been successfully removed from the CRM system. The presence of this object in the response indicates that the deletion operation was completed without errors.
 */
export type DeleteContactResponseUnifiedId = {
  /**
   * The unique identifier of the contact that was deleted. This string value confirms the specific contact that was removed from the CRM system, ensuring that developers can verify the correct resource was affected by the delete operation.
   */
  id: string;
};

/**
 * Contact deleted
 */
export type DeleteContactResponse = {
  /**
   * The HTTP response status code returned by the server, indicating the result of the delete operation. A status code of 200 confirms that the contact was successfully deleted from the CRM system. This integer value is crucial for error handling and confirming the success of the operation.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful operation. This string provides a human-readable confirmation of the operation's outcome, complementing the numeric status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the delete request. This string helps identify which service within the Apideck ecosystem handled the operation, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the delete operation. This string specifies the type of resource affected, ensuring clarity about what was deleted in the context of the API's broader functionality.
   */
  resource: string;
  /**
   * The specific operation performed, in this case, 'delete', indicating that a contact was removed from the CRM. This string helps in logging and auditing by clearly stating the action taken by the API.
   */
  operation: string;
  /**
   * This object contains the unique identifier of the contact that was deleted. It serves as a confirmation that the specified contact has been successfully removed from the CRM system. The presence of this object in the response indicates that the deletion operation was completed without errors.
   */
  data: DeleteContactResponseUnifiedId;
};

/** @internal */
export const DeleteContactResponseUnifiedId$inboundSchema: z.ZodType<
  DeleteContactResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteContactResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const DeleteContactResponseUnifiedId$outboundSchema: z.ZodType<
  DeleteContactResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  DeleteContactResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteContactResponseUnifiedId$ {
  /** @deprecated use `DeleteContactResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = DeleteContactResponseUnifiedId$inboundSchema;
  /** @deprecated use `DeleteContactResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = DeleteContactResponseUnifiedId$outboundSchema;
  /** @deprecated use `DeleteContactResponseUnifiedId$Outbound` instead. */
  export type Outbound = DeleteContactResponseUnifiedId$Outbound;
}

export function deleteContactResponseUnifiedIdToJSON(
  deleteContactResponseUnifiedId: DeleteContactResponseUnifiedId,
): string {
  return JSON.stringify(
    DeleteContactResponseUnifiedId$outboundSchema.parse(
      deleteContactResponseUnifiedId,
    ),
  );
}

export function deleteContactResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<DeleteContactResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteContactResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteContactResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const DeleteContactResponse$inboundSchema: z.ZodType<
  DeleteContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteContactResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type DeleteContactResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: DeleteContactResponseUnifiedId$Outbound;
};

/** @internal */
export const DeleteContactResponse$outboundSchema: z.ZodType<
  DeleteContactResponse$Outbound,
  z.ZodTypeDef,
  DeleteContactResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteContactResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteContactResponse$ {
  /** @deprecated use `DeleteContactResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteContactResponse$inboundSchema;
  /** @deprecated use `DeleteContactResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteContactResponse$outboundSchema;
  /** @deprecated use `DeleteContactResponse$Outbound` instead. */
  export type Outbound = DeleteContactResponse$Outbound;
}

export function deleteContactResponseToJSON(
  deleteContactResponse: DeleteContactResponse,
): string {
  return JSON.stringify(
    DeleteContactResponse$outboundSchema.parse(deleteContactResponse),
  );
}

export function deleteContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteContactResponse' from JSON`,
  );
}
