/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the newly created activity in the CRM system. It serves as a container for the unique identifier and other potential metadata related to the activity. The presence of this object confirms the successful creation of the activity.
 */
export type CreateActivityResponseUnifiedId = {
  /**
   * The unique identifier assigned to the newly created activity within the CRM system. This ID is crucial for referencing the activity in future operations, such as updates or retrievals. It is returned as a string and ensures that each activity can be distinctly identified.
   */
  id: string;
};

/**
 * Activity created
 */
export type CreateActivityResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the POST request to add a new activity, with a successful creation typically returning a 201 status code. It helps developers understand the outcome of their API call.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'Created' for a successful activity addition. It aids in quickly assessing the result of the operation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which service integration was used to add the activity, helping developers track and manage service-specific interactions within the CRM.
   */
  service: string;
  /**
   * The name of the Unified API resource that was affected by the operation. This string specifies the type of resource, such as 'activity', that was created, providing context about the nature of the data involved in the POST request.
   */
  resource: string;
  /**
   * The specific operation that was performed, represented as a string. In this context, it indicates the action taken, such as 'add', to create a new activity in the CRM system. This helps in understanding the type of change made by the API call.
   */
  operation: string;
  /**
   * This object contains the details of the newly created activity in the CRM system. It serves as a container for the unique identifier and other potential metadata related to the activity. The presence of this object confirms the successful creation of the activity.
   */
  data: CreateActivityResponseUnifiedId;
};

/** @internal */
export const CreateActivityResponseUnifiedId$inboundSchema: z.ZodType<
  CreateActivityResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateActivityResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateActivityResponseUnifiedId$outboundSchema: z.ZodType<
  CreateActivityResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateActivityResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityResponseUnifiedId$ {
  /** @deprecated use `CreateActivityResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateActivityResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateActivityResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CreateActivityResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateActivityResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateActivityResponseUnifiedId$Outbound;
}

export function createActivityResponseUnifiedIdToJSON(
  createActivityResponseUnifiedId: CreateActivityResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateActivityResponseUnifiedId$outboundSchema.parse(
      createActivityResponseUnifiedId,
    ),
  );
}

export function createActivityResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateActivityResponse$inboundSchema: z.ZodType<
  CreateActivityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateActivityResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateActivityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateActivityResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateActivityResponse$outboundSchema: z.ZodType<
  CreateActivityResponse$Outbound,
  z.ZodTypeDef,
  CreateActivityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateActivityResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityResponse$ {
  /** @deprecated use `CreateActivityResponse$inboundSchema` instead. */
  export const inboundSchema = CreateActivityResponse$inboundSchema;
  /** @deprecated use `CreateActivityResponse$outboundSchema` instead. */
  export const outboundSchema = CreateActivityResponse$outboundSchema;
  /** @deprecated use `CreateActivityResponse$Outbound` instead. */
  export type Outbound = CreateActivityResponse$Outbound;
}

export function createActivityResponseToJSON(
  createActivityResponse: CreateActivityResponse,
): string {
  return JSON.stringify(
    CreateActivityResponse$outboundSchema.parse(createActivityResponse),
  );
}

export function createActivityResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityResponse' from JSON`,
  );
}
