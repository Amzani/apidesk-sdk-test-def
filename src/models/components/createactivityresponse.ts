/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the newly created activity within the CRM system. It serves as a container for the unique identifier and potentially other metadata related to the activity. The structure is defined by the CRM's schema for activity resources.
 */
export type CreateActivityResponseUnifiedId = {
  /**
   * The unique identifier assigned to the activity that was just created in the CRM. This ID is a string and is used to reference the activity in future operations, such as updates or retrievals. It confirms the successful addition of the activity to the system.
   */
  id: string;
};

/**
 * Activity created
 */
export type CreateActivityResponse = {
  /**
   * The HTTP response status code indicating the result of the POST request to create a new activity. A value of 201 confirms that the activity was successfully added to the CRM system. This integer is crucial for error handling and validation of the operation's success.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'Created' for a successful POST operation. This string provides a human-readable confirmation of the operation's outcome, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the request. This string helps identify which service within the Apideck ecosystem handled the activity creation, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the operation, in this case, the 'activities' resource. This string confirms the specific CRM resource that was affected by the POST request.
   */
  resource: string;
  /**
   * The type of operation performed, specifically 'activitiesAdd' for this POST request. This string indicates the action taken within the CRM system, confirming the creation of a new activity.
   */
  operation: string;
  /**
   * This object contains the details of the newly created activity within the CRM system. It serves as a container for the unique identifier and potentially other metadata related to the activity. The structure is defined by the CRM's schema for activity resources.
   */
  data: CreateActivityResponseUnifiedId;
};

/** @internal */
export const CreateActivityResponseUnifiedId$inboundSchema: z.ZodType<
  CreateActivityResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateActivityResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateActivityResponseUnifiedId$outboundSchema: z.ZodType<
  CreateActivityResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateActivityResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityResponseUnifiedId$ {
  /** @deprecated use `CreateActivityResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateActivityResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateActivityResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CreateActivityResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateActivityResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateActivityResponseUnifiedId$Outbound;
}

export function createActivityResponseUnifiedIdToJSON(
  createActivityResponseUnifiedId: CreateActivityResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateActivityResponseUnifiedId$outboundSchema.parse(
      createActivityResponseUnifiedId,
    ),
  );
}

export function createActivityResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateActivityResponse$inboundSchema: z.ZodType<
  CreateActivityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateActivityResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateActivityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateActivityResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateActivityResponse$outboundSchema: z.ZodType<
  CreateActivityResponse$Outbound,
  z.ZodTypeDef,
  CreateActivityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateActivityResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityResponse$ {
  /** @deprecated use `CreateActivityResponse$inboundSchema` instead. */
  export const inboundSchema = CreateActivityResponse$inboundSchema;
  /** @deprecated use `CreateActivityResponse$outboundSchema` instead. */
  export const outboundSchema = CreateActivityResponse$outboundSchema;
  /** @deprecated use `CreateActivityResponse$Outbound` instead. */
  export type Outbound = CreateActivityResponse$Outbound;
}

export function createActivityResponseToJSON(
  createActivityResponse: CreateActivityResponse,
): string {
  return JSON.stringify(
    CreateActivityResponse$outboundSchema.parse(createActivityResponse),
  );
}

export function createActivityResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityResponse' from JSON`,
  );
}
