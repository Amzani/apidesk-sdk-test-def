/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains metadata about the operation performed, specifically indicating the resource that was affected by the delete operation. It serves as a confirmation that the specified user has been successfully deleted from the CRM system. The object structure is typically empty for delete operations, as no additional data is required beyond the confirmation of deletion.
 */
export type DeleteUserResponseUnifiedId = {
  /**
   * The unique identifier of the user that was deleted from the CRM system. This string value confirms the specific user record that has been removed, ensuring that developers can verify the correct user was deleted. It is crucial for tracking and logging purposes, especially in systems where audit trails are maintained.
   */
  id: string;
};

/**
 * User deleted
 */
export type DeleteUserResponse = {
  /**
   * The HTTP response status code returned by the server, indicating the result of the delete operation. A status code of 200 confirms that the user has been successfully removed from the CRM system. This integer value is crucial for error handling and validation of the operation's success.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, typically 'OK' for a successful delete operation. This string provides a human-readable confirmation of the operation's outcome, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the delete request. This string helps identify which service handled the operation, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the delete operation. This string specifies the type of resource affected, ensuring clarity in multi-resource environments.
   */
  resource: string;
  /**
   * The specific operation performed, in this case, 'delete', indicating that a user record was removed. This string helps in logging and tracking the type of action executed by the API.
   */
  operation: string;
  /**
   * This object contains metadata about the operation performed, specifically indicating the resource that was affected by the delete operation. It serves as a confirmation that the specified user has been successfully deleted from the CRM system. The object structure is typically empty for delete operations, as no additional data is required beyond the confirmation of deletion.
   */
  data: DeleteUserResponseUnifiedId;
};

/** @internal */
export const DeleteUserResponseUnifiedId$inboundSchema: z.ZodType<
  DeleteUserResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteUserResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const DeleteUserResponseUnifiedId$outboundSchema: z.ZodType<
  DeleteUserResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  DeleteUserResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteUserResponseUnifiedId$ {
  /** @deprecated use `DeleteUserResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = DeleteUserResponseUnifiedId$inboundSchema;
  /** @deprecated use `DeleteUserResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = DeleteUserResponseUnifiedId$outboundSchema;
  /** @deprecated use `DeleteUserResponseUnifiedId$Outbound` instead. */
  export type Outbound = DeleteUserResponseUnifiedId$Outbound;
}

export function deleteUserResponseUnifiedIdToJSON(
  deleteUserResponseUnifiedId: DeleteUserResponseUnifiedId,
): string {
  return JSON.stringify(
    DeleteUserResponseUnifiedId$outboundSchema.parse(
      deleteUserResponseUnifiedId,
    ),
  );
}

export function deleteUserResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<DeleteUserResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteUserResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteUserResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const DeleteUserResponse$inboundSchema: z.ZodType<
  DeleteUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteUserResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type DeleteUserResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: DeleteUserResponseUnifiedId$Outbound;
};

/** @internal */
export const DeleteUserResponse$outboundSchema: z.ZodType<
  DeleteUserResponse$Outbound,
  z.ZodTypeDef,
  DeleteUserResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteUserResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteUserResponse$ {
  /** @deprecated use `DeleteUserResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteUserResponse$inboundSchema;
  /** @deprecated use `DeleteUserResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteUserResponse$outboundSchema;
  /** @deprecated use `DeleteUserResponse$Outbound` instead. */
  export type Outbound = DeleteUserResponse$Outbound;
}

export function deleteUserResponseToJSON(
  deleteUserResponse: DeleteUserResponse,
): string {
  return JSON.stringify(
    DeleteUserResponse$outboundSchema.parse(deleteUserResponse),
  );
}

export function deleteUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteUserResponse' from JSON`,
  );
}
