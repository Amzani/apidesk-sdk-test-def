/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the category or nature of the activity, such as 'call', 'meeting', or 'task'. This field is mandatory and helps in classifying the activity for better organization and retrieval within the CRM. The value must be a valid string representing one of the predefined activity types supported by the system.
 */
export const CreateActivityRequestType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * Specifies the category or nature of the activity, such as 'call', 'meeting', or 'task'. This field is mandatory and helps in classifying the activity for better organization and retrieval within the CRM. The value must be a valid string representing one of the predefined activity types supported by the system.
 */
export type CreateActivityRequestType = ClosedEnum<
  typeof CreateActivityRequestType
>;

/**
 * Defines the category or nature of the address, such as 'business' or 'residential'. This field is optional and helps in classifying the address for better organization and retrieval within the CRM system.
 */
export const CreateActivityRequestLocationAddressType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the category or nature of the address, such as 'business' or 'residential'. This field is optional and helps in classifying the address for better organization and retrieval within the CRM system.
 */
export type CreateActivityRequestLocationAddressType = ClosedEnum<
  typeof CreateActivityRequestLocationAddressType
>;

/**
 * An object containing detailed address information for the activity's location. This is optional and should be used when a structured address is necessary for the activity. It enhances the location data by providing specific address components.
 */
export type LocationAddress = {
  /**
   * A unique identifier for the address object within the CRM system. This ID is optional and can be used to reference or update the address details in future operations. It ensures that each address is distinct and easily retrievable.
   */
  id?: string | null | undefined;
  /**
   * Defines the category or nature of the address, such as 'business' or 'residential'. This field is optional and helps in classifying the address for better organization and retrieval within the CRM system.
   */
  type?: CreateActivityRequestLocationAddressType | null | undefined;
  /**
   * The complete address as a single string, used when structured address data is unavailable. This field is optional and provides a fallback for capturing address information in a less detailed format. It is useful for APIs that do not support detailed address components.
   */
  string?: string | null | undefined;
  /**
   * The name of the address associated with the activity. This field is used to identify the specific location where the activity is taking place or is related to. It should be a descriptive name that helps users recognize the address within the CRM system.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, typically including the street number, street name, and any suite or apartment number. This field is crucial for accurately locating the address and should be formatted according to standard postal address conventions.
   */
  line1?: string | null | undefined;
  /**
   * An additional line for the address, often used for supplementary information such as building names or additional location details. This field helps provide a complete address when necessary and should follow standard address formatting.
   */
  line2?: string | null | undefined;
  /**
   * A third line for the address, used for any extra details that do not fit in the first two lines. This field is optional and should be used to ensure the address is fully detailed and recognizable.
   */
  line3?: string | null | undefined;
  /**
   * A fourth line for the address, allowing for further specification of the location if needed. This field is optional and should be used to capture any remaining address details that enhance clarity and precision.
   */
  line4?: string | null | undefined;
  /**
   * Specifies the street number of the location where the activity is taking place. This property is optional and should be a string representing the exact number as it appears in the address. It helps in accurately identifying the location for the CRM activity.
   */
  streetNumber?: string | null | undefined;
  /**
   * Indicates the city where the activity is located. This optional property should be a valid city name and is used to provide geographical context to the activity within the CRM system.
   */
  city?: string | null | undefined;
  /**
   * Represents the state or region where the activity is occurring. This optional field should be a valid state name and helps in further specifying the location details for CRM activities.
   */
  state?: string | null | undefined;
  /**
   * The postal code corresponding to the activity's location. This optional property should be a valid postal code format and aids in pinpointing the exact area for CRM activities.
   */
  postalCode?: string | null | undefined;
  /**
   * Specifies the country code for the activity's location, following the ISO 3166-1 alpha-2 standard. This optional property ensures that the activity is associated with the correct country, facilitating international CRM operations.
   */
  country?: string | null | undefined;
  /**
   * Specifies the latitude coordinate of the address location. This property is used to pinpoint the exact geographical location of the activity, aiding in location-based services and analytics. The value should be a valid latitude in decimal degrees format, ranging from -90.0 to +90.0.
   */
  latitude?: string | null | undefined;
  /**
   * Specifies the longitude coordinate of the address location. This property complements the latitude to provide a full geographical reference for the activity, essential for mapping and spatial analysis. The value should be a valid longitude in decimal degrees format, ranging from -180.0 to +180.0.
   */
  longitude?: string | null | undefined;
  /**
   * Represents the county or sublocality of the address. This field helps in categorizing and organizing activities based on regional divisions, which can be useful for reporting and regional analysis. The value should be a string that accurately reflects the county name.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address. This property is crucial for personalizing interactions and ensuring accurate communication within the CRM activities. The name should be a string that includes both first and last names, if applicable.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title of the contact person at the address. This property is used to address the contact person respectfully in communications, enhancing the professionalism of CRM interactions. Acceptable values include common salutations such as 'Mr.', 'Ms.', 'Dr.', etc.
   */
  salutation?: string | null | undefined;
  /**
   * The contact phone number associated with the location address. This property is used to store and retrieve the primary phone number for communication purposes related to the activity. It should be formatted according to international standards to ensure proper dialing and connectivity.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the location address, used for sending and receiving documents via fax. This property is optional and should be provided if fax communication is relevant to the activity. Ensure the number is formatted correctly to facilitate successful fax transmissions.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the location address, intended for electronic communication regarding the activity. This property should be a valid email format to ensure messages are correctly routed and delivered. It is optional but recommended for efficient communication.
   */
  email?: string | null | undefined;
  /**
   * The website URL related to the location address, providing additional information or resources about the activity. This property should be a valid URL format and is optional, serving as a reference point for further details or contact.
   */
  website?: string | null | undefined;
  /**
   * Additional notes or comments about the location address, offering context or specific details pertinent to the activity. This property is optional and can include any relevant information that aids in understanding or managing the activity.
   */
  notes?: string | null | undefined;
  /**
   * A string representing the version of the location address object. This property is used to detect and manage concurrent updates, ensuring data integrity by preventing conflicts. It should be updated with each modification to the location address.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Defines the display status of the activity, such as 'busy', 'free', or other custom states. This property helps in managing visibility and scheduling within the CRM. Accepts any string that represents a valid display status.
 */
export const ShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
/**
 * Defines the display status of the activity, such as 'busy', 'free', or other custom states. This property helps in managing visibility and scheduling within the CRM. Accepts any string that represents a valid display status.
 */
export type ShowAs = ClosedEnum<typeof ShowAs>;

export type CreateActivityRequestValue6 = {};

export type CreateActivityRequestValue4 = {};

/**
 * The actual data or value stored in the custom field, which can vary in type depending on the field's purpose. This property is optional and should be populated with the relevant information that the custom field is intended to capture.
 */
export type CreateActivityRequestValue =
  | CreateActivityRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateActivityRequestValue6>;

export type CreateActivityRequestCustomFields = {
  /**
   * A mandatory unique identifier for each custom field within the activity. This ID is crucial for distinguishing between different custom fields and must be a valid string that uniquely identifies the field within the context of the activity.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, providing a human-readable label that describes the field's purpose or content. This is optional but recommended for clarity when managing multiple custom fields.
   */
  name?: string | null | undefined;
  /**
   * Additional information or context about the custom field, offering insights into its intended use or any specific details that might be relevant. This field is optional and can be used to provide a more comprehensive understanding of the custom field's role.
   */
  description?: string | null | undefined;
  /**
   * The actual data or value stored in the custom field, which can vary in type depending on the field's purpose. This property is optional and should be populated with the relevant information that the custom field is intended to capture.
   */
  value?:
    | CreateActivityRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateActivityRequestValue6>
    | null
    | undefined;
};

/**
 * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This optional field helps in tracking participation and should be a valid status string recognized by the CRM system.
 */
export const Status = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This optional field helps in tracking participation and should be a valid status string recognized by the CRM system.
 */
export type Status = ClosedEnum<typeof Status>;

export type CreateActivityRequestAttendees = {
  /**
   * The full name of the attendee, combining first, middle, and last names if applicable. This field is optional and should be used when a single string representation of the attendee's name is preferred over separate name fields.
   */
  name?: string | null | undefined;
  /**
   * The first name of the attendee, used to identify them in a more personalized manner. This field is optional and can be used in conjunction with middle and last names for detailed identification.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the attendee, providing additional identification detail. This field is optional and should be included if the attendee's full legal name includes a middle name.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the attendee, essential for formal identification. This field is optional but recommended for clarity and completeness when identifying attendees in the CRM system.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix for the attendee's name, such as Mr., Ms., or Dr. This field is optional and can be used to address attendees formally in communications related to the activity. Ensure the prefix is a valid string if provided.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix for the attendee's name, such as Jr., Sr., or III. This optional field helps in distinguishing individuals with similar names and should be a valid string if used.
   */
  suffix?: string | null | undefined;
  /**
   * The email address of the attendee, used for sending notifications and updates about the activity. This should be a valid email format and is optional unless required by your specific CRM setup.
   */
  emailAddress?: string | null | undefined;
  /**
   * Indicates whether the attendee is the organizer of the activity. This boolean field helps in identifying the primary contact responsible for the activity's coordination. Set to true if the attendee is the organizer, otherwise false.
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This optional field helps in tracking participation and should be a valid status string recognized by the CRM system.
   */
  status?: Status | null | undefined;
};

export type CreateActivityRequestExtendPaths = {
  /**
   * Specifies the JSONPath string where the new value should be applied within the CRM activity data structure. This path must be a valid JSONPath expression, ensuring precise targeting of the data field to be updated or created. Essential for directing the operation to the correct location within the CRM's data hierarchy.
   */
  path: string;
  /**
   * Defines the value to be set at the specified JSONPath within the CRM activity. This can be of any data type, allowing flexibility in the kind of data being added or modified. It is crucial for populating the targeted field with the intended data, thereby enabling accurate activity creation or update.
   */
  value?: any | undefined;
};

export type CreateActivityRequestPassThrough = {
  /**
   * The `service_id` is a mandatory string that identifies the specific service to which the `pass_through` data should be applied. This ensures that the custom data is directed to the correct service, especially in environments with multiple integrations. It must match the service identifier used within the CRM system.
   */
  serviceId: string;
  /**
   * The `operation_id` is an optional string that specifies a particular workflow operation for applying the `pass_through` data. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise targeting of the custom data to specific operations within a service.
   */
  operationId?: string | undefined;
  /**
   * The `extend_object` is an optional object that allows for direct extension by including any additional properties needed for the request. This flexibility enables developers to add custom fields or data structures that are not predefined, facilitating more complex integrations and customizations.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * The `extend_paths` is an optional array of objects designed for structured data modifications using paths. This feature allows developers to specify precise modifications to the data structure, enabling detailed customization and extension of the request to meet specific service requirements.
   */
  extendPaths?: Array<CreateActivityRequestExtendPaths> | undefined;
};

export type CreateActivityRequest = {
  /**
   * Specifies the exact date and time when the activity is scheduled to occur or has occurred. This property should be formatted as an ISO 8601 string (e.g., '2023-10-15T13:45:30Z') to ensure proper parsing and consistency across systems. It helps in organizing and tracking activities chronologically within the CRM.
   */
  activityDatetime?: string | null | undefined;
  /**
   * Indicates the total time span of the activity in seconds. This integer value helps in calculating the length of the activity for scheduling and reporting purposes. It is optional but useful for time management and analytics within the CRM.
   */
  durationSeconds?: number | null | undefined;
  /**
   * Represents the unique identifier of the user associated with the activity. This string should correspond to a valid user ID within the CRM system, linking the activity to a specific user for accountability and tracking purposes.
   */
  userId?: string | null | undefined;
  /**
   * Denotes the unique identifier of the account related to the activity. This string should match an existing account ID in the CRM, facilitating the association of the activity with a particular customer account for better organization and retrieval.
   */
  accountId?: string | null | undefined;
  /**
   * Identifies the unique ID of the contact involved in the activity. This string should be a valid contact ID within the CRM, ensuring that the activity is correctly linked to a specific contact for detailed interaction history and follow-up actions.
   */
  contactId?: string | null | undefined;
  /**
   * The unique identifier for the company associated with this activity. This ID helps link the activity to a specific company within the CRM, facilitating organized tracking and management of company-related interactions. It should be a valid string that corresponds to an existing company record in the CRM.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier for the opportunity linked to this activity. This property allows the activity to be associated with a specific sales opportunity, aiding in the tracking of progress and interactions related to potential deals. Ensure this ID matches an existing opportunity record in the CRM.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier for the lead connected to this activity. Use this property to associate the activity with a particular lead, which helps in managing and monitoring interactions with potential customers. The ID should be a valid string that corresponds to an existing lead record in the CRM.
   */
  leadId?: string | null | undefined;
  /**
   * The unique identifier for the user who owns or is responsible for this activity. This property is used to assign the activity to a specific user, ensuring accountability and proper management of tasks within the CRM. The ID should be a valid string that matches an existing user record.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier for the marketing campaign associated with this activity. This property links the activity to a specific campaign, enabling tracking of campaign-related tasks and interactions. Ensure this ID corresponds to an existing campaign record in the CRM.
   */
  campaignId?: string | null | undefined;
  /**
   * The unique identifier of the case associated with this activity. This property links the activity to a specific case within the CRM, allowing for organized tracking and management of case-related tasks. It should be a valid string that corresponds to an existing case ID in the system.
   */
  caseId?: string | null | undefined;
  /**
   * The unique identifier of the asset associated with this activity. Use this property to connect the activity to a particular asset, facilitating asset management and tracking within the CRM. Ensure the asset ID is a valid string that matches an existing asset in the database.
   */
  assetId?: string | null | undefined;
  /**
   * The unique identifier of the contract related to this activity. This property is used to associate the activity with a specific contract, aiding in the management of contract-related tasks and interactions. The contract ID should be a valid string that corresponds to an existing contract in the CRM.
   */
  contractId?: string | null | undefined;
  /**
   * The unique identifier of the product associated with this activity. This property links the activity to a specific product, which is useful for tracking product-related interactions and tasks. Ensure the product ID is a valid string that matches an existing product in the system.
   */
  productId?: string | null | undefined;
  /**
   * The unique identifier of the solution related to this activity. Use this property to associate the activity with a particular solution, which helps in managing solution-specific tasks and customer interactions. The solution ID should be a valid string that corresponds to an existing solution in the CRM.
   */
  solutionId?: string | null | undefined;
  /**
   * The unique identifier for a custom object associated with the activity. This ID links the activity to a specific custom object within the CRM, allowing for tailored tracking and management. If provided, it must be a valid string that corresponds to an existing custom object ID in the system.
   */
  customObjectId?: string | null | undefined;
  /**
   * Specifies the category or nature of the activity, such as 'call', 'meeting', or 'task'. This field is mandatory and helps in classifying the activity for better organization and retrieval within the CRM. The value must be a valid string representing one of the predefined activity types supported by the system.
   */
  type: CreateActivityRequestType | null;
  /**
   * A brief, descriptive title for the activity that summarizes its purpose or content. This optional field aids in quickly identifying the activity in lists and overviews. If included, it should be a concise string that effectively conveys the essence of the activity.
   */
  title?: string | null | undefined;
  /**
   * A detailed explanation of the activity's purpose, context, and any relevant details. This optional field provides additional context and information that can be useful for users reviewing the activity. It should be a clear and informative string that enhances understanding of the activity's role within the CRM.
   */
  description?: string | null | undefined;
  /**
   * An internal note for additional context or remarks about the activity, visible only to CRM users. This optional field is intended for internal communication and documentation purposes. If used, it should be a string that succinctly captures any extra information or observations related to the activity.
   */
  note?: string | null | undefined;
  /**
   * Specifies the venue or place where the activity will occur. This field is optional and can be left empty if the activity does not have a physical location. It helps in organizing and managing activities by providing a geographical context.
   */
  location?: string | null | undefined;
  /**
   * An object containing detailed address information for the activity's location. This is optional and should be used when a structured address is necessary for the activity. It enhances the location data by providing specific address components.
   */
  locationAddress?: LocationAddress | undefined;
  /**
   * Indicates whether the activity spans the entire day. Set this property to true if the activity does not have specific start and end times, allowing it to be displayed as an all-day event in the CRM calendar.
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Determines if the activity is visible only to the creator or specific users. Set to true to restrict access and maintain confidentiality of the activity details within the CRM system.
   */
  private?: boolean | null | undefined;
  /**
   * Specifies if the activity involves multiple participants. Use this property to categorize the activity as a group event, which may require additional coordination and resources.
   */
  groupEvent?: boolean | null | undefined;
  /**
   * Defines the specific subtype of the group event, providing additional context and categorization. This property helps in organizing and filtering events based on their unique characteristics within the CRM.
   */
  eventSubType?: string | null | undefined;
  /**
   * Specifies the category or nature of the group event associated with the activity. This helps in organizing and filtering activities based on event types within the CRM. Accepts any string value that represents a valid event type.
   */
  groupEventType?: string | null | undefined;
  /**
   * Indicates if the activity is a subordinate or dependent task of another primary activity. Useful for structuring activities hierarchically within the CRM. Accepts a boolean value: true if it is a child activity, false otherwise.
   */
  child?: boolean | null | undefined;
  /**
   * Determines whether the activity is stored in an archived state, making it inactive but retrievable for historical reference. This property accepts a boolean value: true if archived, false if active.
   */
  archived?: boolean | null | undefined;
  /**
   * Specifies if the activity has been marked as deleted, which typically hides it from active views but may still be recoverable. Accepts a boolean value: true if the activity is deleted, false otherwise.
   */
  deleted?: boolean | null | undefined;
  /**
   * Defines the display status of the activity, such as 'busy', 'free', or other custom states. This property helps in managing visibility and scheduling within the CRM. Accepts any string that represents a valid display status.
   */
  showAs?: ShowAs | null | undefined;
  /**
   * Indicates whether the activity has been completed. This property helps in tracking the status of the activity within the CRM system. It accepts a boolean value: `true` if the activity is completed, and `false` otherwise.
   */
  done?: boolean | null | undefined;
  /**
   * Specifies the start date and time for the activity in ISO 8601 format (e.g., '2023-10-05T14:48:00.000Z'). This property is crucial for scheduling and organizing activities within the CRM, ensuring that all tasks are initiated at the correct time.
   */
  startDatetime?: string | null | undefined;
  /**
   * Defines the end date and time for the activity, formatted in ISO 8601 (e.g., '2023-10-05T16:48:00.000Z'). This property is used to determine the duration and completion time of the activity, aiding in time management and reporting within the CRM.
   */
  endDatetime?: string | null | undefined;
  /**
   * Represents the specific date on which the activity is scheduled to occur, formatted as a date string (e.g., '2023-10-05'). This property is essential for daily planning and ensures that activities are logged on the correct day within the CRM system.
   */
  activityDate?: string | null | undefined;
  /**
   * Indicates the final date by which the activity should be completed, formatted as a date string (e.g., '2023-10-05'). This property helps in setting deadlines and ensuring timely completion of activities within the CRM.
   */
  endDate?: string | null | undefined;
  /**
   * Indicates whether the activity is set to repeat at regular intervals. This property is optional and should be set to true if the activity needs to recur, otherwise false. It helps in automating repetitive tasks within the CRM system.
   */
  recurrent?: boolean | undefined;
  /**
   * Specifies the date and time when a reminder for the activity should be triggered. This optional property must be in ISO 8601 format (e.g., '2023-10-15T14:30:00Z') to ensure proper scheduling and timezone handling. It is used to alert users about upcoming activities.
   */
  reminderDatetime?: string | null | undefined;
  /**
   * Determines if a reminder is configured for the activity. This optional property should be true if a reminder is needed, otherwise false. It ensures users are notified about the activity at the specified reminder time.
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The URL link to join the video conference associated with the activity. This optional property should be a valid URL format and is used to facilitate virtual meetings directly from the CRM system.
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * A unique identifier for the video conference session linked to the activity. This optional property helps in managing and referencing specific video conference sessions within the CRM. It should be a valid string that corresponds to the video conferencing service used.
   */
  videoConferenceId?: string | null | undefined;
  /**
   * An array of custom fields associated with the activity, allowing for additional metadata to be stored. Each entry in the array should conform to the structure defined for custom fields, enabling flexible data extension beyond standard fields.
   */
  customFields?: Array<CreateActivityRequestCustomFields> | undefined;
  /**
   * An array of attendee objects representing individuals involved in the activity. Each object should contain detailed information about the attendee, such as their name and contact details. This property is optional but can be used to track who is participating in the activity.
   */
  attendees?: Array<CreateActivityRequestAttendees> | undefined;
  /**
   * The `pass_through` property is used to send custom data or modifications specific to a service when creating or updating resources. It allows developers to include additional, service-specific information that may not be covered by standard fields. This array can contain various elements that tailor the request to meet specific service requirements.
   */
  passThrough?: Array<CreateActivityRequestPassThrough> | undefined;
};

/** @internal */
export const CreateActivityRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateActivityRequestType
> = z.nativeEnum(CreateActivityRequestType);

/** @internal */
export const CreateActivityRequestType$outboundSchema: z.ZodNativeEnum<
  typeof CreateActivityRequestType
> = CreateActivityRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestType$ {
  /** @deprecated use `CreateActivityRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestType$inboundSchema;
  /** @deprecated use `CreateActivityRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestType$outboundSchema;
}

/** @internal */
export const CreateActivityRequestLocationAddressType$inboundSchema:
  z.ZodNativeEnum<typeof CreateActivityRequestLocationAddressType> = z
    .nativeEnum(CreateActivityRequestLocationAddressType);

/** @internal */
export const CreateActivityRequestLocationAddressType$outboundSchema:
  z.ZodNativeEnum<typeof CreateActivityRequestLocationAddressType> =
    CreateActivityRequestLocationAddressType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestLocationAddressType$ {
  /** @deprecated use `CreateActivityRequestLocationAddressType$inboundSchema` instead. */
  export const inboundSchema =
    CreateActivityRequestLocationAddressType$inboundSchema;
  /** @deprecated use `CreateActivityRequestLocationAddressType$outboundSchema` instead. */
  export const outboundSchema =
    CreateActivityRequestLocationAddressType$outboundSchema;
}

/** @internal */
export const LocationAddress$inboundSchema: z.ZodType<
  LocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateActivityRequestLocationAddressType$inboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type LocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const LocationAddress$outboundSchema: z.ZodType<
  LocationAddress$Outbound,
  z.ZodTypeDef,
  LocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateActivityRequestLocationAddressType$outboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationAddress$ {
  /** @deprecated use `LocationAddress$inboundSchema` instead. */
  export const inboundSchema = LocationAddress$inboundSchema;
  /** @deprecated use `LocationAddress$outboundSchema` instead. */
  export const outboundSchema = LocationAddress$outboundSchema;
  /** @deprecated use `LocationAddress$Outbound` instead. */
  export type Outbound = LocationAddress$Outbound;
}

export function locationAddressToJSON(
  locationAddress: LocationAddress,
): string {
  return JSON.stringify(LocationAddress$outboundSchema.parse(locationAddress));
}

export function locationAddressFromJSON(
  jsonString: string,
): SafeParseResult<LocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LocationAddress' from JSON`,
  );
}

/** @internal */
export const ShowAs$inboundSchema: z.ZodNativeEnum<typeof ShowAs> = z
  .nativeEnum(ShowAs);

/** @internal */
export const ShowAs$outboundSchema: z.ZodNativeEnum<typeof ShowAs> =
  ShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShowAs$ {
  /** @deprecated use `ShowAs$inboundSchema` instead. */
  export const inboundSchema = ShowAs$inboundSchema;
  /** @deprecated use `ShowAs$outboundSchema` instead. */
  export const outboundSchema = ShowAs$outboundSchema;
}

/** @internal */
export const CreateActivityRequestValue6$inboundSchema: z.ZodType<
  CreateActivityRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateActivityRequestValue6$Outbound = {};

/** @internal */
export const CreateActivityRequestValue6$outboundSchema: z.ZodType<
  CreateActivityRequestValue6$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestValue6$ {
  /** @deprecated use `CreateActivityRequestValue6$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestValue6$inboundSchema;
  /** @deprecated use `CreateActivityRequestValue6$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestValue6$outboundSchema;
  /** @deprecated use `CreateActivityRequestValue6$Outbound` instead. */
  export type Outbound = CreateActivityRequestValue6$Outbound;
}

export function createActivityRequestValue6ToJSON(
  createActivityRequestValue6: CreateActivityRequestValue6,
): string {
  return JSON.stringify(
    CreateActivityRequestValue6$outboundSchema.parse(
      createActivityRequestValue6,
    ),
  );
}

export function createActivityRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestValue6' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequestValue4$inboundSchema: z.ZodType<
  CreateActivityRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateActivityRequestValue4$Outbound = {};

/** @internal */
export const CreateActivityRequestValue4$outboundSchema: z.ZodType<
  CreateActivityRequestValue4$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestValue4$ {
  /** @deprecated use `CreateActivityRequestValue4$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestValue4$inboundSchema;
  /** @deprecated use `CreateActivityRequestValue4$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestValue4$outboundSchema;
  /** @deprecated use `CreateActivityRequestValue4$Outbound` instead. */
  export type Outbound = CreateActivityRequestValue4$Outbound;
}

export function createActivityRequestValue4ToJSON(
  createActivityRequestValue4: CreateActivityRequestValue4,
): string {
  return JSON.stringify(
    CreateActivityRequestValue4$outboundSchema.parse(
      createActivityRequestValue4,
    ),
  );
}

export function createActivityRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestValue4' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequestValue$inboundSchema: z.ZodType<
  CreateActivityRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateActivityRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateActivityRequestValue6$inboundSchema)),
]);

/** @internal */
export type CreateActivityRequestValue$Outbound =
  | CreateActivityRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateActivityRequestValue6$Outbound>;

/** @internal */
export const CreateActivityRequestValue$outboundSchema: z.ZodType<
  CreateActivityRequestValue$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestValue
> = z.union([
  z.lazy(() => CreateActivityRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateActivityRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestValue$ {
  /** @deprecated use `CreateActivityRequestValue$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestValue$inboundSchema;
  /** @deprecated use `CreateActivityRequestValue$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestValue$outboundSchema;
  /** @deprecated use `CreateActivityRequestValue$Outbound` instead. */
  export type Outbound = CreateActivityRequestValue$Outbound;
}

export function createActivityRequestValueToJSON(
  createActivityRequestValue: CreateActivityRequestValue,
): string {
  return JSON.stringify(
    CreateActivityRequestValue$outboundSchema.parse(createActivityRequestValue),
  );
}

export function createActivityRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestValue' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequestCustomFields$inboundSchema: z.ZodType<
  CreateActivityRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateActivityRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateActivityRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CreateActivityRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | CreateActivityRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateActivityRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateActivityRequestCustomFields$outboundSchema: z.ZodType<
  CreateActivityRequestCustomFields$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateActivityRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateActivityRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestCustomFields$ {
  /** @deprecated use `CreateActivityRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestCustomFields$inboundSchema;
  /** @deprecated use `CreateActivityRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    CreateActivityRequestCustomFields$outboundSchema;
  /** @deprecated use `CreateActivityRequestCustomFields$Outbound` instead. */
  export type Outbound = CreateActivityRequestCustomFields$Outbound;
}

export function createActivityRequestCustomFieldsToJSON(
  createActivityRequestCustomFields: CreateActivityRequestCustomFields,
): string {
  return JSON.stringify(
    CreateActivityRequestCustomFields$outboundSchema.parse(
      createActivityRequestCustomFields,
    ),
  );
}

export function createActivityRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const CreateActivityRequestAttendees$inboundSchema: z.ZodType<
  CreateActivityRequestAttendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(Status$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
  });
});

/** @internal */
export type CreateActivityRequestAttendees$Outbound = {
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const CreateActivityRequestAttendees$outboundSchema: z.ZodType<
  CreateActivityRequestAttendees$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestAttendees
> = z.object({
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(Status$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestAttendees$ {
  /** @deprecated use `CreateActivityRequestAttendees$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestAttendees$inboundSchema;
  /** @deprecated use `CreateActivityRequestAttendees$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestAttendees$outboundSchema;
  /** @deprecated use `CreateActivityRequestAttendees$Outbound` instead. */
  export type Outbound = CreateActivityRequestAttendees$Outbound;
}

export function createActivityRequestAttendeesToJSON(
  createActivityRequestAttendees: CreateActivityRequestAttendees,
): string {
  return JSON.stringify(
    CreateActivityRequestAttendees$outboundSchema.parse(
      createActivityRequestAttendees,
    ),
  );
}

export function createActivityRequestAttendeesFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestAttendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestAttendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestAttendees' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequestExtendPaths$inboundSchema: z.ZodType<
  CreateActivityRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CreateActivityRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CreateActivityRequestExtendPaths$outboundSchema: z.ZodType<
  CreateActivityRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestExtendPaths$ {
  /** @deprecated use `CreateActivityRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestExtendPaths$inboundSchema;
  /** @deprecated use `CreateActivityRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestExtendPaths$outboundSchema;
  /** @deprecated use `CreateActivityRequestExtendPaths$Outbound` instead. */
  export type Outbound = CreateActivityRequestExtendPaths$Outbound;
}

export function createActivityRequestExtendPathsToJSON(
  createActivityRequestExtendPaths: CreateActivityRequestExtendPaths,
): string {
  return JSON.stringify(
    CreateActivityRequestExtendPaths$outboundSchema.parse(
      createActivityRequestExtendPaths,
    ),
  );
}

export function createActivityRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequestPassThrough$inboundSchema: z.ZodType<
  CreateActivityRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => CreateActivityRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CreateActivityRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CreateActivityRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CreateActivityRequestPassThrough$outboundSchema: z.ZodType<
  CreateActivityRequestPassThrough$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => CreateActivityRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestPassThrough$ {
  /** @deprecated use `CreateActivityRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestPassThrough$inboundSchema;
  /** @deprecated use `CreateActivityRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestPassThrough$outboundSchema;
  /** @deprecated use `CreateActivityRequestPassThrough$Outbound` instead. */
  export type Outbound = CreateActivityRequestPassThrough$Outbound;
}

export function createActivityRequestPassThroughToJSON(
  createActivityRequestPassThrough: CreateActivityRequestPassThrough,
): string {
  return JSON.stringify(
    CreateActivityRequestPassThrough$outboundSchema.parse(
      createActivityRequestPassThrough,
    ),
  );
}

export function createActivityRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequest$inboundSchema: z.ZodType<
  CreateActivityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateActivityRequestType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() => LocationAddress$inboundSchema).optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(ShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => CreateActivityRequestCustomFields$inboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => CreateActivityRequestAttendees$inboundSchema))
    .optional(),
  pass_through: z.array(
    z.lazy(() => CreateActivityRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CreateActivityRequest$Outbound = {
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: LocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<CreateActivityRequestCustomFields$Outbound> | undefined;
  attendees?: Array<CreateActivityRequestAttendees$Outbound> | undefined;
  pass_through?: Array<CreateActivityRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const CreateActivityRequest$outboundSchema: z.ZodType<
  CreateActivityRequest$Outbound,
  z.ZodTypeDef,
  CreateActivityRequest
> = z.object({
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(CreateActivityRequestType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() => LocationAddress$outboundSchema).optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(ShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => CreateActivityRequestCustomFields$outboundSchema),
  ).optional(),
  attendees: z.array(
    z.lazy(() => CreateActivityRequestAttendees$outboundSchema),
  ).optional(),
  passThrough: z.array(
    z.lazy(() => CreateActivityRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequest$ {
  /** @deprecated use `CreateActivityRequest$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequest$inboundSchema;
  /** @deprecated use `CreateActivityRequest$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequest$outboundSchema;
  /** @deprecated use `CreateActivityRequest$Outbound` instead. */
  export type Outbound = CreateActivityRequest$Outbound;
}

export function createActivityRequestToJSON(
  createActivityRequest: CreateActivityRequest,
): string {
  return JSON.stringify(
    CreateActivityRequest$outboundSchema.parse(createActivityRequest),
  );
}

export function createActivityRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequest' from JSON`,
  );
}
