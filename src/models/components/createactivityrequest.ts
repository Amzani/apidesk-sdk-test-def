/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This required property defines the category or nature of the activity being added. It is crucial for classifying the activity within the CRM system, ensuring that it is processed and displayed correctly according to its type. The value must be a valid string representing the activity's type.
 */
export const CreateActivityRequestType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * This required property defines the category or nature of the activity being added. It is crucial for classifying the activity within the CRM system, ensuring that it is processed and displayed correctly according to its type. The value must be a valid string representing the activity's type.
 */
export type CreateActivityRequestType = ClosedEnum<
  typeof CreateActivityRequestType
>;

/**
 * Indicates the type of address being provided, such as 'home', 'work', or 'other'. This optional field helps categorize the address, providing context about its relevance to the activity. It should be a descriptive string that clearly defines the address type.
 */
export const CreateActivityRequestLocationAddressType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Indicates the type of address being provided, such as 'home', 'work', or 'other'. This optional field helps categorize the address, providing context about its relevance to the activity. It should be a descriptive string that clearly defines the address type.
 */
export type CreateActivityRequestLocationAddressType = ClosedEnum<
  typeof CreateActivityRequestLocationAddressType
>;

/**
 * An object containing detailed address information for the activity's location. This is optional and can be used to provide structured address data, enhancing the specificity of the location details. It is particularly useful when precise address information is necessary for the activity.
 */
export type LocationAddress = {
  /**
   * A unique identifier for the address within the CRM system. This optional field helps in distinguishing and referencing specific addresses, especially when multiple addresses are involved. It should be a unique string that identifies the address record.
   */
  id?: string | null | undefined;
  /**
   * Indicates the type of address being provided, such as 'home', 'work', or 'other'. This optional field helps categorize the address, providing context about its relevance to the activity. It should be a descriptive string that clearly defines the address type.
   */
  type?: CreateActivityRequestLocationAddressType | null | undefined;
  /**
   * The full address in a single string format. This field is optional and is used when structured address data is not available or necessary. It should be a comprehensive string that includes all relevant address details, ensuring clarity and completeness.
   */
  string?: string | null | undefined;
  /**
   * The name of the address. This field is used to identify the specific location associated with the activity, such as a business or venue name. It is optional and can be left blank if not applicable to the activity being recorded.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address, typically including the street number, street name, and any suite or apartment number. This field is crucial for accurately locating the address where the activity took place. It is optional but recommended for precise address identification.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address, used for additional address information such as building name or floor number. This field supports further detailing of the location and is optional, allowing flexibility in address specification.
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address, providing extra space for any additional address details that do not fit in the previous lines. This field is optional and can be used to ensure complete address information is captured.
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address, offering further capacity for detailed address information. This optional field allows for comprehensive address documentation, ensuring all relevant location details are included.
   */
  line4?: string | null | undefined;
  /**
   * Specifies the street number of the location where the activity is taking place. This field helps in accurately identifying the physical address associated with the activity. It should be a valid string representing the street number, though it is not mandatory to include.
   */
  streetNumber?: string | null | undefined;
  /**
   * Indicates the city where the activity is located. This information is used to geographically categorize the activity within the CRM system. The city name should be a valid string, but it is optional to provide.
   */
  city?: string | null | undefined;
  /**
   * Denotes the state or region where the activity occurs. This property aids in further refining the geographical location of the activity. It should be a valid state name string, although it is not required to be filled.
   */
  state?: string | null | undefined;
  /**
   * Represents the postal code or equivalent for the activity's location. This field is crucial for pinpointing the exact area within a city or region. It should be a valid postal code string, but it is not a mandatory field.
   */
  postalCode?: string | null | undefined;
  /**
   * Specifies the country code of the activity's location, following the ISO 3166-1 alpha-2 standard. This property is essential for identifying the country context of the activity. It should be a valid two-letter country code string, though it is not required to be provided.
   */
  country?: string | null | undefined;
  /**
   * Specifies the latitude of the address where the activity is taking place. This property is used to pinpoint the exact geographical location of the activity, aiding in location-based services and analytics. The value should be a valid latitude coordinate in decimal format.
   */
  latitude?: string | null | undefined;
  /**
   * Specifies the longitude of the address where the activity is taking place. This property complements the latitude to provide precise geographical positioning, essential for mapping and location tracking. The value should be a valid longitude coordinate in decimal format.
   */
  longitude?: string | null | undefined;
  /**
   * Indicates the county or sublocality of the address associated with the activity. This field helps in categorizing and organizing activities based on regional divisions, which can be useful for reporting and analysis. The value should be a valid county name.
   */
  county?: string | null | undefined;
  /**
   * The name of the contact person at the specified address for the activity. This information is crucial for personalizing interactions and ensuring accurate communication with the right individual. The value should be a valid name string.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation for the contact person at the address, such as Mr., Ms., or Dr. This field is used to address the contact person appropriately in communications, enhancing professionalism and respect. The value should be a valid salutation string.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the location address. This property is used to store contact information for follow-up or communication purposes related to the activity. Ensure the phone number is formatted correctly to facilitate seamless communication.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the location address. This property allows for the inclusion of fax contact details, which can be important for certain business communications. Ensure the fax number is correctly formatted to avoid transmission errors.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the location address. This property is crucial for electronic communication and follow-ups related to the activity. Ensure the email address is valid and correctly formatted to prevent delivery issues.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the location address. This property provides a reference to the online presence of the location, which can be useful for additional context or verification. Ensure the URL is complete and correctly formatted to enable proper access.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the location address. This property allows for the inclusion of any extra information or context that may be relevant to the activity. Use this field to capture details that do not fit into other predefined fields.
   */
  notes?: string | null | undefined;
  /**
   * This property is used to manage concurrency by detecting updates to an object and preventing data conflicts. It is a binary value that increments with each update to ensure the activity's data remains consistent and up-to-date. This field is optional and should be included if you want to handle concurrent modifications effectively.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Defines how the activity should be displayed in the CRM interface, such as its status or visual representation. This property allows customization of the activity's appearance to better fit user preferences or organizational standards.
 */
export const ShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
/**
 * Defines how the activity should be displayed in the CRM interface, such as its status or visual representation. This property allows customization of the activity's appearance to better fit user preferences or organizational standards.
 */
export type ShowAs = ClosedEnum<typeof ShowAs>;

export type CreateActivityRequestValue6 = {};

export type CreateActivityRequestValue4 = {};

/**
 * The value assigned to the custom field, representing the actual data or information that the field is meant to capture. This property is optional and can be tailored to fit the specific needs of the activity being recorded.
 */
export type CreateActivityRequestValue =
  | CreateActivityRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateActivityRequestValue6>;

export type CreateActivityRequestCustomFields = {
  /**
   * A mandatory unique identifier for each custom field within the activity. This ID is crucial for distinguishing between different custom fields and ensuring data integrity when managing activities in the CRM.
   */
  id: string | null;
  /**
   * The name of the custom field, providing a human-readable label that describes the field's purpose or content. This property is optional and can be used to enhance the clarity of the data stored in the custom field.
   */
  name?: string | null | undefined;
  /**
   * Additional information about the custom field, offering context or details that explain its use or significance. This optional property helps users understand the role or importance of the custom field within the activity.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field, representing the actual data or information that the field is meant to capture. This property is optional and can be tailored to fit the specific needs of the activity being recorded.
   */
  value?:
    | CreateActivityRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateActivityRequestValue6>
    | null
    | undefined;
};

/**
 * The current status of the attendee in relation to the activity, such as confirmed, tentative, or declined. This optional field helps in tracking the attendee's participation status, which is crucial for planning and resource allocation. It should be a valid status string that reflects the attendee's engagement level.
 */
export const Status = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * The current status of the attendee in relation to the activity, such as confirmed, tentative, or declined. This optional field helps in tracking the attendee's participation status, which is crucial for planning and resource allocation. It should be a valid status string that reflects the attendee's engagement level.
 */
export type Status = ClosedEnum<typeof Status>;

export type CreateActivityRequestAttendees = {
  /**
   * The full name of the attendee, combining first, middle, and last names if applicable. This field is optional and can be used to provide a complete name representation for each attendee in the activity.
   */
  name?: string | null | undefined;
  /**
   * The first name of the attendee. This field is optional and can be used to specify the given name of each attendee involved in the activity.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the attendee, if applicable. This field is optional and can be used to provide additional name details for each attendee in the activity.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the attendee. This field is optional and can be used to specify the family name of each attendee involved in the activity.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the attendee's name, such as Mr., Ms., or Dr. This field is optional and can be used to provide a formal title for the attendee, enhancing the personalization of the activity record. It should be a valid string representing a common prefix.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the attendee's name, such as Jr., Sr., or III. This optional field allows for the inclusion of generational or professional suffixes, adding detail to the attendee's identification within the activity. It should be a valid string representing a common suffix.
   */
  suffix?: string | null | undefined;
  /**
   * The email address of the attendee, used for communication and identification purposes within the CRM activity. This field should contain a valid email format to ensure proper delivery of notifications and updates related to the activity. It is optional but recommended for effective engagement tracking.
   */
  emailAddress?: string | null | undefined;
  /**
   * Indicates whether the attendee is the organizer of the activity. This boolean field helps in identifying the primary contact responsible for the activity's coordination. It is optional and should be set to true if the attendee is the organizer, otherwise false.
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * The current status of the attendee in relation to the activity, such as confirmed, tentative, or declined. This optional field helps in tracking the attendee's participation status, which is crucial for planning and resource allocation. It should be a valid status string that reflects the attendee's engagement level.
   */
  status?: Status | null | undefined;
};

export type CreateActivityRequestExtendPaths = {
  /**
   * Specifies the JSONPath string where the value should be applied within the CRM activity record. This path must be a valid JSONPath expression, ensuring precise targeting of the data structure where the new value will be inserted or updated. Essential for directing the operation to the correct location in the CRM data model.
   */
  path: string;
  /**
   * Defines the value to be set at the specified JSONPath within the CRM activity record. This value can be of any data type, allowing flexibility in what data is added or modified. It is crucial for updating or inserting the desired information at the targeted path in the CRM system.
   */
  value?: any | undefined;
};

export type CreateActivityRequestPassThrough = {
  /**
   * This property specifies the unique identifier for the service to which the pass_through data should be applied. It is required to ensure that the custom data is directed to the correct service integration, facilitating precise modifications or extensions.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that the pass_through data should target. This is particularly useful for operations involving multiple downstream requests, allowing for targeted data application within complex workflows.
   */
  operationId?: string | undefined;
  /**
   * This property allows for direct extension by including any additional properties needed for the operation. It provides flexibility to add custom fields or data structures that are not predefined, enabling tailored modifications to the request.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using paths. This property enables developers to specify precise paths for data extension or modification, allowing for detailed customization of the request structure.
   */
  extendPaths?: Array<CreateActivityRequestExtendPaths> | undefined;
};

export type CreateActivityRequest = {
  /**
   * Specifies the date and time when the activity occurred. This timestamp helps in organizing and tracking activities chronologically within the CRM system. It should be formatted according to ISO 8601 standards to ensure consistency and accuracy.
   */
  activityDatetime?: string | null | undefined;
  /**
   * Indicates the total duration of the activity in seconds. This helps in measuring the length of engagements and can be used for reporting and analysis purposes. Ensure the value is a non-negative integer representing the activity's length accurately.
   */
  durationSeconds?: number | null | undefined;
  /**
   * Identifies the user associated with the activity. This linkage is crucial for attributing activities to specific users, aiding in accountability and performance tracking. The user ID should be a valid identifier within the CRM system.
   */
  userId?: string | null | undefined;
  /**
   * Links the activity to a specific account within the CRM. This association is essential for maintaining a comprehensive record of interactions related to each account. The account ID must be a valid identifier that exists in the CRM database.
   */
  accountId?: string | null | undefined;
  /**
   * Associates the activity with a particular contact. This connection helps in tracking interactions and engagements with individual contacts, enhancing relationship management. The contact ID should be a valid identifier within the CRM system.
   */
  contactId?: string | null | undefined;
  /**
   * The unique identifier for the company associated with this activity. This field allows the activity to be linked to a specific company within the CRM, facilitating better organization and retrieval of company-related interactions. It should be a valid string that corresponds to an existing company ID in the system.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier for the opportunity associated with this activity. This property helps in tracking activities related to specific sales opportunities, enabling more precise management of the sales pipeline. Ensure this is a valid string matching an existing opportunity ID.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with this activity. Use this field to link the activity to a particular lead, which aids in monitoring interactions and engagements with potential clients. It should be a valid string that matches an existing lead ID in the CRM.
   */
  leadId?: string | null | undefined;
  /**
   * The unique identifier for the user who owns this activity. This property designates responsibility and ownership, ensuring that the correct user is associated with the activity for accountability and follow-up. It must be a valid string corresponding to an existing user ID.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier for the campaign associated with this activity. This field links the activity to a specific marketing campaign, allowing for better tracking and analysis of campaign-related interactions. Ensure this is a valid string that matches an existing campaign ID.
   */
  campaignId?: string | null | undefined;
  /**
   * The unique identifier for the case associated with this activity. This property allows you to link the activity to a specific case within the CRM, providing context and relevance to the recorded interaction. It should be a valid string that corresponds to an existing case ID in the system.
   */
  caseId?: string | null | undefined;
  /**
   * The unique identifier for the asset associated with this activity. Use this property to connect the activity to a particular asset, ensuring that all interactions related to the asset are accurately tracked. The asset ID must be a valid string that matches an existing asset in the CRM.
   */
  assetId?: string | null | undefined;
  /**
   * The unique identifier for the contract related to this activity. This property is used to associate the activity with a specific contract, helping to maintain a comprehensive record of all contract-related interactions. Ensure the contract ID is a valid string that corresponds to an existing contract in the CRM.
   */
  contractId?: string | null | undefined;
  /**
   * The unique identifier for the product associated with this activity. This property links the activity to a specific product, allowing for detailed tracking of product-related interactions. The product ID should be a valid string that matches an existing product in the CRM.
   */
  productId?: string | null | undefined;
  /**
   * The unique identifier for the solution related to this activity. Use this property to associate the activity with a particular solution, ensuring that all solution-related interactions are properly documented. The solution ID must be a valid string that corresponds to an existing solution in the CRM.
   */
  solutionId?: string | null | undefined;
  /**
   * This optional property specifies the unique identifier of a custom object associated with the activity. It allows linking the activity to a specific custom object within the CRM, facilitating better organization and retrieval of related records. If not provided, the activity will not be linked to any custom object.
   */
  customObjectId?: string | null | undefined;
  /**
   * This required property defines the category or nature of the activity being added. It is crucial for classifying the activity within the CRM system, ensuring that it is processed and displayed correctly according to its type. The value must be a valid string representing the activity's type.
   */
  type: CreateActivityRequestType | null;
  /**
   * An optional property that provides a brief, descriptive title for the activity. This helps in quickly identifying and summarizing the activity's purpose or content within the CRM. If omitted, the activity will not have a title, which might affect its visibility in lists or reports.
   */
  title?: string | null | undefined;
  /**
   * This optional property offers a detailed explanation of the activity. It is used to provide context and additional information about the activity's purpose or content, aiding users in understanding the specifics of the engagement or interaction recorded.
   */
  description?: string | null | undefined;
  /**
   * An optional internal note field for adding comments or observations about the activity. This is intended for internal use, allowing team members to share insights or additional details that are not meant for external visibility. It helps in maintaining a comprehensive internal record of the activity.
   */
  note?: string | null | undefined;
  /**
   * Specifies the location where the activity takes place. This field is optional and can be used to provide additional context about the activity's setting, which may be relevant for certain types of engagements or interactions. If provided, it should be a descriptive string that accurately represents the location.
   */
  location?: string | null | undefined;
  /**
   * An object containing detailed address information for the activity's location. This is optional and can be used to provide structured address data, enhancing the specificity of the location details. It is particularly useful when precise address information is necessary for the activity.
   */
  locationAddress?: LocationAddress | undefined;
  /**
   * Indicates whether the activity spans the entire day. This boolean flag helps in scheduling and managing activities that do not have specific start and end times, ensuring they are treated as full-day events in the CRM system. Set to true for all-day events, otherwise false.
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Determines the visibility of the activity within the CRM system. When set to true, the activity is marked as private, restricting access to authorized users only. This helps in maintaining confidentiality for sensitive engagements or interactions.
   */
  private?: boolean | null | undefined;
  /**
   * Specifies whether the activity involves multiple participants, categorizing it as a group event. This property is useful for organizing and managing events that require coordination among several attendees. Set to true for group events to ensure proper handling and notifications.
   */
  groupEvent?: boolean | null | undefined;
  /**
   * Defines the specific subtype of the group event, providing additional categorization within the CRM system. This helps in further detailing the nature of the event, allowing for more precise tracking and reporting. This field is optional and should be used to specify the subtype if applicable.
   */
  eventSubType?: string | null | undefined;
  /**
   * Specifies the type of group event associated with the activity. This property helps categorize the activity within the CRM system, aiding in organization and retrieval. It should be a descriptive string that aligns with the event types recognized by the CRM.
   */
  groupEventType?: string | null | undefined;
  /**
   * Indicates whether the activity is a subordinate or dependent activity of another primary activity. This boolean flag helps in structuring activities hierarchically within the CRM, allowing for better management of related tasks and events.
   */
  child?: boolean | null | undefined;
  /**
   * Determines if the activity is archived, meaning it is stored for historical reference and not actively used in current operations. This flag is useful for filtering activities that are no longer active but need to be retained for record-keeping purposes.
   */
  archived?: boolean | null | undefined;
  /**
   * Indicates whether the activity has been marked as deleted, which typically means it is removed from active views but may still exist in the database for recovery or auditing purposes. This flag helps manage the lifecycle of activities within the CRM.
   */
  deleted?: boolean | null | undefined;
  /**
   * Defines how the activity should be displayed in the CRM interface, such as its status or visual representation. This property allows customization of the activity's appearance to better fit user preferences or organizational standards.
   */
  showAs?: ShowAs | null | undefined;
  /**
   * Indicates whether the activity has been completed. This property helps in tracking the status of the activity within the CRM system. It is optional and can be set to true or false based on the completion status of the activity.
   */
  done?: boolean | null | undefined;
  /**
   * Specifies the start date and time for the activity. This timestamp is crucial for scheduling and organizing activities within the CRM. It should be formatted as an ISO 8601 string to ensure proper parsing and handling by the system.
   */
  startDatetime?: string | null | undefined;
  /**
   * Defines the end date and time for the activity. This property is used to determine the duration and completion time of the activity in the CRM. It must be provided in ISO 8601 format to maintain consistency and accuracy in time-related operations.
   */
  endDatetime?: string | null | undefined;
  /**
   * Represents the specific date on which the activity occurs. This field is important for logging and historical tracking of activities in the CRM. It should be formatted as a date string, typically in ISO 8601 format, to ensure compatibility with the system's date handling.
   */
  activityDate?: string | null | undefined;
  /**
   * Indicates the final date by which the activity should be completed. This property helps in setting deadlines and managing timelines within the CRM. It should be formatted as an ISO 8601 date string to ensure proper integration with the system's scheduling features.
   */
  endDate?: string | null | undefined;
  /**
   * Indicates if the activity is set to occur repeatedly over time. This property helps in scheduling recurring engagements within the CRM, ensuring that repeated interactions are automatically logged. Accepts a boolean value where 'true' signifies a recurrent activity.
   */
  recurrent?: boolean | undefined;
  /**
   * Specifies the exact date and time for the activity reminder. This property is crucial for alerting users about upcoming activities, ensuring timely follow-ups. The value must be in a valid date-time format (e.g., ISO 8601).
   */
  reminderDatetime?: string | null | undefined;
  /**
   * Determines whether a reminder is configured for the activity. This boolean property helps in managing notifications for activities, ensuring users are alerted as needed. A value of 'true' indicates that a reminder is set.
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The URL link to join the video conference associated with the activity. This property facilitates virtual meetings by providing a direct link to the conference platform. Ensure the URL is valid and accessible to participants.
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * A unique identifier for the video conference session linked to the activity. This property is used to reference and manage specific video conference instances within the CRM. It should be a valid string that corresponds to the conference platform's ID format.
   */
  videoConferenceId?: string | null | undefined;
  /**
   * An array of custom fields associated with the activity. These fields allow for additional, user-defined data to be attached to the activity, enabling more detailed tracking and categorization within the CRM. This property is optional and can be omitted if no custom fields are needed.
   */
  customFields?: Array<CreateActivityRequestCustomFields> | undefined;
  /**
   * An array of attendees participating in the activity. Each attendee object within the array can include details such as name, first name, middle name, and last name. This property is optional and can be omitted if there are no attendees to add.
   */
  attendees?: Array<CreateActivityRequestAttendees> | undefined;
  /**
   * The pass_through property is used to include custom data or modifications specific to a service when creating or updating resources. It allows developers to pass an array of service-specific configurations that can be applied during the operation. This property is optional and can be omitted if no custom data is needed.
   */
  passThrough?: Array<CreateActivityRequestPassThrough> | undefined;
};

/** @internal */
export const CreateActivityRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateActivityRequestType
> = z.nativeEnum(CreateActivityRequestType);

/** @internal */
export const CreateActivityRequestType$outboundSchema: z.ZodNativeEnum<
  typeof CreateActivityRequestType
> = CreateActivityRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestType$ {
  /** @deprecated use `CreateActivityRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestType$inboundSchema;
  /** @deprecated use `CreateActivityRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestType$outboundSchema;
}

/** @internal */
export const CreateActivityRequestLocationAddressType$inboundSchema:
  z.ZodNativeEnum<typeof CreateActivityRequestLocationAddressType> = z
    .nativeEnum(CreateActivityRequestLocationAddressType);

/** @internal */
export const CreateActivityRequestLocationAddressType$outboundSchema:
  z.ZodNativeEnum<typeof CreateActivityRequestLocationAddressType> =
    CreateActivityRequestLocationAddressType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestLocationAddressType$ {
  /** @deprecated use `CreateActivityRequestLocationAddressType$inboundSchema` instead. */
  export const inboundSchema =
    CreateActivityRequestLocationAddressType$inboundSchema;
  /** @deprecated use `CreateActivityRequestLocationAddressType$outboundSchema` instead. */
  export const outboundSchema =
    CreateActivityRequestLocationAddressType$outboundSchema;
}

/** @internal */
export const LocationAddress$inboundSchema: z.ZodType<
  LocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateActivityRequestLocationAddressType$inboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type LocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const LocationAddress$outboundSchema: z.ZodType<
  LocationAddress$Outbound,
  z.ZodTypeDef,
  LocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateActivityRequestLocationAddressType$outboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationAddress$ {
  /** @deprecated use `LocationAddress$inboundSchema` instead. */
  export const inboundSchema = LocationAddress$inboundSchema;
  /** @deprecated use `LocationAddress$outboundSchema` instead. */
  export const outboundSchema = LocationAddress$outboundSchema;
  /** @deprecated use `LocationAddress$Outbound` instead. */
  export type Outbound = LocationAddress$Outbound;
}

export function locationAddressToJSON(
  locationAddress: LocationAddress,
): string {
  return JSON.stringify(LocationAddress$outboundSchema.parse(locationAddress));
}

export function locationAddressFromJSON(
  jsonString: string,
): SafeParseResult<LocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LocationAddress' from JSON`,
  );
}

/** @internal */
export const ShowAs$inboundSchema: z.ZodNativeEnum<typeof ShowAs> = z
  .nativeEnum(ShowAs);

/** @internal */
export const ShowAs$outboundSchema: z.ZodNativeEnum<typeof ShowAs> =
  ShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShowAs$ {
  /** @deprecated use `ShowAs$inboundSchema` instead. */
  export const inboundSchema = ShowAs$inboundSchema;
  /** @deprecated use `ShowAs$outboundSchema` instead. */
  export const outboundSchema = ShowAs$outboundSchema;
}

/** @internal */
export const CreateActivityRequestValue6$inboundSchema: z.ZodType<
  CreateActivityRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateActivityRequestValue6$Outbound = {};

/** @internal */
export const CreateActivityRequestValue6$outboundSchema: z.ZodType<
  CreateActivityRequestValue6$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestValue6$ {
  /** @deprecated use `CreateActivityRequestValue6$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestValue6$inboundSchema;
  /** @deprecated use `CreateActivityRequestValue6$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestValue6$outboundSchema;
  /** @deprecated use `CreateActivityRequestValue6$Outbound` instead. */
  export type Outbound = CreateActivityRequestValue6$Outbound;
}

export function createActivityRequestValue6ToJSON(
  createActivityRequestValue6: CreateActivityRequestValue6,
): string {
  return JSON.stringify(
    CreateActivityRequestValue6$outboundSchema.parse(
      createActivityRequestValue6,
    ),
  );
}

export function createActivityRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestValue6' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequestValue4$inboundSchema: z.ZodType<
  CreateActivityRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateActivityRequestValue4$Outbound = {};

/** @internal */
export const CreateActivityRequestValue4$outboundSchema: z.ZodType<
  CreateActivityRequestValue4$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestValue4$ {
  /** @deprecated use `CreateActivityRequestValue4$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestValue4$inboundSchema;
  /** @deprecated use `CreateActivityRequestValue4$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestValue4$outboundSchema;
  /** @deprecated use `CreateActivityRequestValue4$Outbound` instead. */
  export type Outbound = CreateActivityRequestValue4$Outbound;
}

export function createActivityRequestValue4ToJSON(
  createActivityRequestValue4: CreateActivityRequestValue4,
): string {
  return JSON.stringify(
    CreateActivityRequestValue4$outboundSchema.parse(
      createActivityRequestValue4,
    ),
  );
}

export function createActivityRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestValue4' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequestValue$inboundSchema: z.ZodType<
  CreateActivityRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateActivityRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateActivityRequestValue6$inboundSchema)),
]);

/** @internal */
export type CreateActivityRequestValue$Outbound =
  | CreateActivityRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateActivityRequestValue6$Outbound>;

/** @internal */
export const CreateActivityRequestValue$outboundSchema: z.ZodType<
  CreateActivityRequestValue$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestValue
> = z.union([
  z.lazy(() => CreateActivityRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateActivityRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestValue$ {
  /** @deprecated use `CreateActivityRequestValue$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestValue$inboundSchema;
  /** @deprecated use `CreateActivityRequestValue$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestValue$outboundSchema;
  /** @deprecated use `CreateActivityRequestValue$Outbound` instead. */
  export type Outbound = CreateActivityRequestValue$Outbound;
}

export function createActivityRequestValueToJSON(
  createActivityRequestValue: CreateActivityRequestValue,
): string {
  return JSON.stringify(
    CreateActivityRequestValue$outboundSchema.parse(createActivityRequestValue),
  );
}

export function createActivityRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestValue' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequestCustomFields$inboundSchema: z.ZodType<
  CreateActivityRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateActivityRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateActivityRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CreateActivityRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | CreateActivityRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateActivityRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateActivityRequestCustomFields$outboundSchema: z.ZodType<
  CreateActivityRequestCustomFields$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateActivityRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateActivityRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestCustomFields$ {
  /** @deprecated use `CreateActivityRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestCustomFields$inboundSchema;
  /** @deprecated use `CreateActivityRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    CreateActivityRequestCustomFields$outboundSchema;
  /** @deprecated use `CreateActivityRequestCustomFields$Outbound` instead. */
  export type Outbound = CreateActivityRequestCustomFields$Outbound;
}

export function createActivityRequestCustomFieldsToJSON(
  createActivityRequestCustomFields: CreateActivityRequestCustomFields,
): string {
  return JSON.stringify(
    CreateActivityRequestCustomFields$outboundSchema.parse(
      createActivityRequestCustomFields,
    ),
  );
}

export function createActivityRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const CreateActivityRequestAttendees$inboundSchema: z.ZodType<
  CreateActivityRequestAttendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(Status$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
  });
});

/** @internal */
export type CreateActivityRequestAttendees$Outbound = {
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const CreateActivityRequestAttendees$outboundSchema: z.ZodType<
  CreateActivityRequestAttendees$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestAttendees
> = z.object({
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(Status$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestAttendees$ {
  /** @deprecated use `CreateActivityRequestAttendees$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestAttendees$inboundSchema;
  /** @deprecated use `CreateActivityRequestAttendees$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestAttendees$outboundSchema;
  /** @deprecated use `CreateActivityRequestAttendees$Outbound` instead. */
  export type Outbound = CreateActivityRequestAttendees$Outbound;
}

export function createActivityRequestAttendeesToJSON(
  createActivityRequestAttendees: CreateActivityRequestAttendees,
): string {
  return JSON.stringify(
    CreateActivityRequestAttendees$outboundSchema.parse(
      createActivityRequestAttendees,
    ),
  );
}

export function createActivityRequestAttendeesFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestAttendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestAttendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestAttendees' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequestExtendPaths$inboundSchema: z.ZodType<
  CreateActivityRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CreateActivityRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CreateActivityRequestExtendPaths$outboundSchema: z.ZodType<
  CreateActivityRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestExtendPaths$ {
  /** @deprecated use `CreateActivityRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestExtendPaths$inboundSchema;
  /** @deprecated use `CreateActivityRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestExtendPaths$outboundSchema;
  /** @deprecated use `CreateActivityRequestExtendPaths$Outbound` instead. */
  export type Outbound = CreateActivityRequestExtendPaths$Outbound;
}

export function createActivityRequestExtendPathsToJSON(
  createActivityRequestExtendPaths: CreateActivityRequestExtendPaths,
): string {
  return JSON.stringify(
    CreateActivityRequestExtendPaths$outboundSchema.parse(
      createActivityRequestExtendPaths,
    ),
  );
}

export function createActivityRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequestPassThrough$inboundSchema: z.ZodType<
  CreateActivityRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => CreateActivityRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CreateActivityRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CreateActivityRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CreateActivityRequestPassThrough$outboundSchema: z.ZodType<
  CreateActivityRequestPassThrough$Outbound,
  z.ZodTypeDef,
  CreateActivityRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => CreateActivityRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequestPassThrough$ {
  /** @deprecated use `CreateActivityRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequestPassThrough$inboundSchema;
  /** @deprecated use `CreateActivityRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequestPassThrough$outboundSchema;
  /** @deprecated use `CreateActivityRequestPassThrough$Outbound` instead. */
  export type Outbound = CreateActivityRequestPassThrough$Outbound;
}

export function createActivityRequestPassThroughToJSON(
  createActivityRequestPassThrough: CreateActivityRequestPassThrough,
): string {
  return JSON.stringify(
    CreateActivityRequestPassThrough$outboundSchema.parse(
      createActivityRequestPassThrough,
    ),
  );
}

export function createActivityRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const CreateActivityRequest$inboundSchema: z.ZodType<
  CreateActivityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateActivityRequestType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() => LocationAddress$inboundSchema).optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(ShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => CreateActivityRequestCustomFields$inboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => CreateActivityRequestAttendees$inboundSchema))
    .optional(),
  pass_through: z.array(
    z.lazy(() => CreateActivityRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CreateActivityRequest$Outbound = {
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: LocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<CreateActivityRequestCustomFields$Outbound> | undefined;
  attendees?: Array<CreateActivityRequestAttendees$Outbound> | undefined;
  pass_through?: Array<CreateActivityRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const CreateActivityRequest$outboundSchema: z.ZodType<
  CreateActivityRequest$Outbound,
  z.ZodTypeDef,
  CreateActivityRequest
> = z.object({
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(CreateActivityRequestType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() => LocationAddress$outboundSchema).optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(ShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => CreateActivityRequestCustomFields$outboundSchema),
  ).optional(),
  attendees: z.array(
    z.lazy(() => CreateActivityRequestAttendees$outboundSchema),
  ).optional(),
  passThrough: z.array(
    z.lazy(() => CreateActivityRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateActivityRequest$ {
  /** @deprecated use `CreateActivityRequest$inboundSchema` instead. */
  export const inboundSchema = CreateActivityRequest$inboundSchema;
  /** @deprecated use `CreateActivityRequest$outboundSchema` instead. */
  export const outboundSchema = CreateActivityRequest$outboundSchema;
  /** @deprecated use `CreateActivityRequest$Outbound` instead. */
  export type Outbound = CreateActivityRequest$Outbound;
}

export function createActivityRequestToJSON(
  createActivityRequest: CreateActivityRequest,
): string {
  return JSON.stringify(
    CreateActivityRequest$outboundSchema.parse(createActivityRequest),
  );
}

export function createActivityRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateActivityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateActivityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateActivityRequest' from JSON`,
  );
}
