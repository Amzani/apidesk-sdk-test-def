/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The 'data' object serves as the primary container for the response payload, encapsulating all relevant information about the newly created activity. This object is always included in the response to provide a structured format for accessing the details of the activity that was added to the CRM system. It ensures that the client can easily parse and utilize the returned data, maintaining consistency across API responses.
 */
export type ActivityCreateResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Activity created
 */
export type ActivityCreateResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the HTTP request, such as 201 for a successful creation of a new activity. It is always included in the response to inform the client about the outcome of their request, helping in error handling and debugging.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'Created' for a 201 status. It is included to give a quick understanding of the request outcome, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the request. This string identifies which service within the Apideck ecosystem handled the activity addition, such as 'pipedrive'. It is crucial for tracking and managing requests across multiple services.
   */
  service: string;
  /**
   * The name of the Unified API resource involved in the operation. This string specifies the type of resource, such as 'activity', that was targeted by the request. It helps in identifying the context of the operation within the broader API framework.
   */
  resource: string;
  /**
   * The specific operation performed by the API, described as a string. This indicates the action taken, such as 'add', and is included to confirm the type of operation executed, ensuring clarity in the response about what was done.
   */
  operation: string;
  /**
   * The 'data' object serves as the primary container for the response payload, encapsulating all relevant information about the newly created activity. This object is always included in the response to provide a structured format for accessing the details of the activity that was added to the CRM system. It ensures that the client can easily parse and utilize the returned data, maintaining consistency across API responses.
   */
  data: ActivityCreateResponseUnifiedId;
};

/** @internal */
export const ActivityCreateResponseUnifiedId$inboundSchema: z.ZodType<
  ActivityCreateResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ActivityCreateResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ActivityCreateResponseUnifiedId$outboundSchema: z.ZodType<
  ActivityCreateResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  ActivityCreateResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCreateResponseUnifiedId$ {
  /** @deprecated use `ActivityCreateResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ActivityCreateResponseUnifiedId$inboundSchema;
  /** @deprecated use `ActivityCreateResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ActivityCreateResponseUnifiedId$outboundSchema;
  /** @deprecated use `ActivityCreateResponseUnifiedId$Outbound` instead. */
  export type Outbound = ActivityCreateResponseUnifiedId$Outbound;
}

export function activityCreateResponseUnifiedIdToJSON(
  activityCreateResponseUnifiedId: ActivityCreateResponseUnifiedId,
): string {
  return JSON.stringify(
    ActivityCreateResponseUnifiedId$outboundSchema.parse(
      activityCreateResponseUnifiedId,
    ),
  );
}

export function activityCreateResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ActivityCreateResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityCreateResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityCreateResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const ActivityCreateResponse$inboundSchema: z.ZodType<
  ActivityCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivityCreateResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ActivityCreateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ActivityCreateResponseUnifiedId$Outbound;
};

/** @internal */
export const ActivityCreateResponse$outboundSchema: z.ZodType<
  ActivityCreateResponse$Outbound,
  z.ZodTypeDef,
  ActivityCreateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivityCreateResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCreateResponse$ {
  /** @deprecated use `ActivityCreateResponse$inboundSchema` instead. */
  export const inboundSchema = ActivityCreateResponse$inboundSchema;
  /** @deprecated use `ActivityCreateResponse$outboundSchema` instead. */
  export const outboundSchema = ActivityCreateResponse$outboundSchema;
  /** @deprecated use `ActivityCreateResponse$Outbound` instead. */
  export type Outbound = ActivityCreateResponse$Outbound;
}

export function activityCreateResponseToJSON(
  activityCreateResponse: ActivityCreateResponse,
): string {
  return JSON.stringify(
    ActivityCreateResponse$outboundSchema.parse(activityCreateResponse),
  );
}

export function activityCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivityCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityCreateResponse' from JSON`,
  );
}
