/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The 'data' object serves as the container for all the information returned by the API after successfully creating a new pipeline. It encapsulates the details of the newly created pipeline, ensuring that the client receives a structured response. This object is always included in the response to confirm the creation and provide access to the pipeline's attributes.
 */
export type PipelineCreateResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Pipeline created
 */
export type PipelineCreateResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the HTTP request, such as 201 for a successful creation of a pipeline. It is crucial for determining the outcome of the operation and handling responses appropriately.
   */
  statusCode: number;
  /**
   * The HTTP response status message accompanying the status code. This string provides a textual representation of the status code, such as 'Created' for a 201 status. It helps in understanding the nature of the response at a glance.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which service, like 'pipedrive', was used in the pipeline creation process. It is essential for tracking and managing integrations within the Unified API framework.
   */
  service: string;
  /**
   * The name of the Unified API resource that was acted upon. This string specifies the type of resource, such as 'pipeline', that the operation targeted. It is important for confirming the specific entity affected by the API call.
   */
  resource: string;
  /**
   * The specific operation performed by the API request. This string describes the action taken, such as 'pipelinesAdd', indicating that a new pipeline was created. It is useful for logging and auditing purposes to track API usage and actions.
   */
  operation: string;
  /**
   * The 'data' object serves as the container for all the information returned by the API after successfully creating a new pipeline. It encapsulates the details of the newly created pipeline, ensuring that the client receives a structured response. This object is always included in the response to confirm the creation and provide access to the pipeline's attributes.
   */
  data: PipelineCreateResponseUnifiedId;
};

/** @internal */
export const PipelineCreateResponseUnifiedId$inboundSchema: z.ZodType<
  PipelineCreateResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PipelineCreateResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const PipelineCreateResponseUnifiedId$outboundSchema: z.ZodType<
  PipelineCreateResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  PipelineCreateResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelineCreateResponseUnifiedId$ {
  /** @deprecated use `PipelineCreateResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = PipelineCreateResponseUnifiedId$inboundSchema;
  /** @deprecated use `PipelineCreateResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = PipelineCreateResponseUnifiedId$outboundSchema;
  /** @deprecated use `PipelineCreateResponseUnifiedId$Outbound` instead. */
  export type Outbound = PipelineCreateResponseUnifiedId$Outbound;
}

export function pipelineCreateResponseUnifiedIdToJSON(
  pipelineCreateResponseUnifiedId: PipelineCreateResponseUnifiedId,
): string {
  return JSON.stringify(
    PipelineCreateResponseUnifiedId$outboundSchema.parse(
      pipelineCreateResponseUnifiedId,
    ),
  );
}

export function pipelineCreateResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<PipelineCreateResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelineCreateResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelineCreateResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const PipelineCreateResponse$inboundSchema: z.ZodType<
  PipelineCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelineCreateResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type PipelineCreateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: PipelineCreateResponseUnifiedId$Outbound;
};

/** @internal */
export const PipelineCreateResponse$outboundSchema: z.ZodType<
  PipelineCreateResponse$Outbound,
  z.ZodTypeDef,
  PipelineCreateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelineCreateResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelineCreateResponse$ {
  /** @deprecated use `PipelineCreateResponse$inboundSchema` instead. */
  export const inboundSchema = PipelineCreateResponse$inboundSchema;
  /** @deprecated use `PipelineCreateResponse$outboundSchema` instead. */
  export const outboundSchema = PipelineCreateResponse$outboundSchema;
  /** @deprecated use `PipelineCreateResponse$Outbound` instead. */
  export type Outbound = PipelineCreateResponse$Outbound;
}

export function pipelineCreateResponseToJSON(
  pipelineCreateResponse: PipelineCreateResponse,
): string {
  return JSON.stringify(
    PipelineCreateResponse$outboundSchema.parse(pipelineCreateResponse),
  );
}

export function pipelineCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<PipelineCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelineCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelineCreateResponse' from JSON`,
  );
}
