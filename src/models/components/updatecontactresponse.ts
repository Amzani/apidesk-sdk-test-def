/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated contact details after a successful PATCH request. It includes all the fields that were modified, ensuring that the contact information is current and accurate. The object serves as the main container for the updated resource data.
 */
export type UpdateContactResponseUnifiedId = {
  /**
   * The unique identifier of the contact that was updated. This ID is crucial for referencing the specific contact record that has been modified in the CRM system. It confirms the successful update of the contact's information.
   */
  id: string;
};

/**
 * Contact updated
 */
export type UpdateContactResponse = {
  /**
   * The HTTP response status code returned by the API. This integer value indicates the result of the PATCH operation, with a 200 status code signifying a successful update of the contact details. It helps in determining the outcome of the request programmatically.
   */
  statusCode: number;
  /**
   * A string representing the HTTP response status message. This provides a textual description of the status code, such as 'OK' for a successful update, aiding in understanding the result of the operation at a glance.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which service integration was used to update the contact, ensuring clarity in multi-service environments.
   */
  service: string;
  /**
   * The name of the unified API resource that was affected by the operation. This string indicates that the contact resource within the CRM was updated, providing context about the type of data modified.
   */
  resource: string;
  /**
   * A string that specifies the operation performed, in this case, 'update'. It confirms that the contact information was successfully modified, aligning with the PATCH request's intent.
   */
  operation: string;
  /**
   * This object contains the updated contact details after a successful PATCH request. It includes all the fields that were modified, ensuring that the contact information is current and accurate. The object serves as the main container for the updated resource data.
   */
  data: UpdateContactResponseUnifiedId;
};

/** @internal */
export const UpdateContactResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateContactResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateContactResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateContactResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateContactResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateContactResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactResponseUnifiedId$ {
  /** @deprecated use `UpdateContactResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateContactResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateContactResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateContactResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateContactResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateContactResponseUnifiedId$Outbound;
}

export function updateContactResponseUnifiedIdToJSON(
  updateContactResponseUnifiedId: UpdateContactResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateContactResponseUnifiedId$outboundSchema.parse(
      updateContactResponseUnifiedId,
    ),
  );
}

export function updateContactResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateContactResponse$inboundSchema: z.ZodType<
  UpdateContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateContactResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateContactResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateContactResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateContactResponse$outboundSchema: z.ZodType<
  UpdateContactResponse$Outbound,
  z.ZodTypeDef,
  UpdateContactResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateContactResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactResponse$ {
  /** @deprecated use `UpdateContactResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateContactResponse$inboundSchema;
  /** @deprecated use `UpdateContactResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateContactResponse$outboundSchema;
  /** @deprecated use `UpdateContactResponse$Outbound` instead. */
  export type Outbound = UpdateContactResponse$Outbound;
}

export function updateContactResponseToJSON(
  updateContactResponse: UpdateContactResponse,
): string {
  return JSON.stringify(
    UpdateContactResponse$outboundSchema.parse(updateContactResponse),
  );
}

export function updateContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactResponse' from JSON`,
  );
}
