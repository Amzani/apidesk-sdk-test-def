/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated contact resource details, including its unique identifier. It confirms the successful modification of the contact's information within the CRM system. The structure of this object aligns with the contact resource schema, ensuring consistency in data representation.
 */
export type UpdateContactResponseUnifiedId = {
  /**
   * The unique identifier of the contact that was updated. This string value serves as a confirmation that the specific contact resource has been successfully modified. It is crucial for tracking and referencing the updated contact within the CRM system.
   */
  id: string;
};

/**
 * Contact updated
 */
export type UpdateContactResponse = {
  /**
   * The HTTP response status code indicating the result of the `contactsUpdate` operation. This integer value reflects whether the update was successful (e.g., 200 for success) or if there were errors (e.g., 4xx for client errors). It is crucial for determining the outcome of the API request.
   */
  statusCode: number;
  /**
   * A string representation of the HTTP response status, such as 'OK' for a successful update. This provides a human-readable status that complements the numeric status code, helping developers quickly understand the result of the operation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the `contactsUpdate` request. This string identifies which service within the Apideck ecosystem handled the update, useful for tracking and logging purposes.
   */
  service: string;
  /**
   * The name of the Unified API resource that was updated, in this case, a contact. This string helps developers confirm the type of resource affected by the operation, ensuring the correct entity was modified.
   */
  resource: string;
  /**
   * The specific operation performed, which in this context is 'update'. This string indicates the action taken on the resource, confirming that the contact details were modified as intended.
   */
  operation: string;
  /**
   * This object contains the updated contact resource details, including its unique identifier. It confirms the successful modification of the contact's information within the CRM system. The structure of this object aligns with the contact resource schema, ensuring consistency in data representation.
   */
  data: UpdateContactResponseUnifiedId;
};

/** @internal */
export const UpdateContactResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateContactResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateContactResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateContactResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateContactResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateContactResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactResponseUnifiedId$ {
  /** @deprecated use `UpdateContactResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateContactResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateContactResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateContactResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateContactResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateContactResponseUnifiedId$Outbound;
}

export function updateContactResponseUnifiedIdToJSON(
  updateContactResponseUnifiedId: UpdateContactResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateContactResponseUnifiedId$outboundSchema.parse(
      updateContactResponseUnifiedId,
    ),
  );
}

export function updateContactResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateContactResponse$inboundSchema: z.ZodType<
  UpdateContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateContactResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateContactResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateContactResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateContactResponse$outboundSchema: z.ZodType<
  UpdateContactResponse$Outbound,
  z.ZodTypeDef,
  UpdateContactResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateContactResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactResponse$ {
  /** @deprecated use `UpdateContactResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateContactResponse$inboundSchema;
  /** @deprecated use `UpdateContactResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateContactResponse$outboundSchema;
  /** @deprecated use `UpdateContactResponse$Outbound` instead. */
  export type Outbound = UpdateContactResponse$Outbound;
}

export function updateContactResponseToJSON(
  updateContactResponse: UpdateContactResponse,
): string {
  return JSON.stringify(
    UpdateContactResponse$outboundSchema.parse(updateContactResponse),
  );
}

export function updateContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactResponse' from JSON`,
  );
}
