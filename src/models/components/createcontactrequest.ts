/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the category or role of the contact within the CRM, such as 'customer', 'vendor', or 'lead'. This optional field helps in organizing and filtering contacts based on their relationship to the business. Ensure the type aligns with predefined categories used in the CRM for consistency.
 */
export const Type = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * Specifies the category or role of the contact within the CRM, such as 'customer', 'vendor', or 'lead'. This optional field helps in organizing and filtering contacts based on their relationship to the business. Ensure the type aligns with predefined categories used in the CRM for consistency.
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * The gender of the contact, which can be used for personalization and demographic analysis. This optional field allows for more customized communication strategies and insights into the contact base.
 */
export const Gender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact, which can be used for personalization and demographic analysis. This optional field allows for more customized communication strategies and insights into the contact base.
 */
export type Gender = ClosedEnum<typeof Gender>;

/**
 * Specifies the type of website, such as 'personal' or 'business', to categorize the website's purpose. This optional field helps in organizing and filtering contacts based on their website types within the CRM.
 */
export const CreateContactRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of website, such as 'personal' or 'business', to categorize the website's purpose. This optional field helps in organizing and filtering contacts based on their website types within the CRM.
 */
export type CreateContactRequestType = ClosedEnum<
  typeof CreateContactRequestType
>;

export type CreateContactRequestWebsites = {
  /**
   * A unique identifier for the website associated with the contact. This ID is used to distinguish between multiple websites linked to the same contact, ensuring accurate data management within the CRM. It should be a valid string if provided, though it is not mandatory for the operation.
   */
  id?: string | null | undefined;
  /**
   * The full URL of the contact's website, which is required to establish a web presence for the contact within the CRM. This field must be a valid URL format, ensuring that it can be accessed and used effectively in CRM operations.
   */
  url: string;
  /**
   * Specifies the type of website, such as 'personal' or 'business', to categorize the website's purpose. This optional field helps in organizing and filtering contacts based on their website types within the CRM.
   */
  type?: CreateContactRequestType | null | undefined;
};

/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in organizing and distinguishing between different types of addresses associated with a contact. If provided, it should be a valid string representing the address type.
 */
export const CreateContactRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in organizing and distinguishing between different types of addresses associated with a contact. If provided, it should be a valid string representing the address type.
 */
export type CreateContactRequestAddressesType = ClosedEnum<
  typeof CreateContactRequestAddressesType
>;

export type CreateContactRequestAddresses = {
  /**
   * A unique identifier for each address linked to the contact. This ID helps in managing and referencing specific addresses within the CRM system, ensuring precise data handling and retrieval.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in organizing and distinguishing between different types of addresses associated with a contact. If provided, it should be a valid string representing the address type.
   */
  type?: CreateContactRequestAddressesType | null | undefined;
  /**
   * Represents the full address in a single string format. This is particularly useful when the API does not support structured address data. It should be a comprehensive string that includes all necessary address details.
   */
  string?: string | null | undefined;
  /**
   * A label or identifier for the address, such as 'Headquarters' or 'Branch Office'. This name helps in easily identifying the address within the CRM system. It should be a descriptive string that clearly indicates the address's purpose or location.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, typically including the street number, street name, and any apartment or suite numbers. This field is essential for accurately locating the address and should be a detailed string.
   */
  line1?: string | null | undefined;
  /**
   * The secondary line of the address, often used for additional information such as building names or floor numbers. This field complements 'line1' and should be used to provide any extra address details that do not fit in the primary line.
   */
  line2?: string | null | undefined;
  /**
   * An additional line for the address, typically used for apartment, suite, or other secondary address information. This field is optional and can be left blank if not applicable. It helps in providing more precise location details for the contact within the CRM system.
   */
  line3?: string | null | undefined;
  /**
   * A supplementary line for the address, often used for extended address details such as building or floor numbers. This optional field enhances the specificity of the contact's address in the CRM, aiding in accurate record-keeping.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the contact's address. This optional field should contain the numeric identifier of the building or house, ensuring precise address identification within the CRM system.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name where the contact resides. This optional field should be a valid city name and is crucial for geographical categorization and location-based operations within the CRM.
   */
  city?: string | null | undefined;
  /**
   * The state or region name associated with the contact's address. This optional field should be a recognized state or region name, facilitating regional segmentation and analysis in the CRM system.
   */
  state?: string | null | undefined;
  /**
   * The postal code for the contact's address, used to identify the specific area within a city or region. This field should be a valid postal code format as per the country's postal system. Including this helps in accurately locating the contact's address within the CRM system.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the contact's address, following the ISO 3166-1 alpha-2 standard. This two-letter code is essential for identifying the country in which the contact resides, ensuring proper international address formatting and integration within the CRM.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the contact's address, used for geographical mapping and location services. This should be a valid latitude value, typically ranging from -90 to 90. Providing this helps in visualizing the contact's location on a map within the CRM.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the contact's address, crucial for geographical mapping and location services. This should be a valid longitude value, typically ranging from -180 to 180. Including this allows for precise mapping of the contact's location in the CRM system.
   */
  longitude?: string | null | undefined;
  /**
   * The county or equivalent sublocality for the contact's address, providing additional granularity to the location details. This field helps in further categorizing the contact's address within larger regions, enhancing the CRM's ability to manage regional data effectively.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address. This field helps identify the primary individual at the specified location and should be a string containing both first and last names, if applicable. It is used to personalize communications and ensure accurate contact management within the CRM.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title of the contact person, such as Mr., Ms., or Dr. This optional field is used to address the contact person formally in communications and should be a string that reflects the appropriate title for the individual.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with the address, used for direct communication with the contact person. This should be a valid string format, including country and area codes if applicable, to ensure successful contact.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the address, allowing for the transmission of documents via fax. This field should be a string formatted correctly to include any necessary country and area codes, ensuring documents are sent to the correct location.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the contact at the address, used for electronic communication. This should be a valid email format string to ensure messages are delivered successfully, facilitating efficient communication within the CRM system.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the contact's address. This field should contain a valid URL format, such as 'https://www.example.com'. It provides additional context about the contact's location and can be used for quick access to their online presence.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the contact's address. This field can include any extra information that might be relevant for understanding the contact's location or specific instructions. It is optional and can be left empty if no additional notes are necessary.
   */
  notes?: string | null | undefined;
  /**
   * A version control string used to track changes to the contact's address information. This field helps prevent data conflicts by ensuring that updates are only applied to the latest version of the address data. It is automatically incremented with each update.
   */
  rowVersion?: string | null | undefined;
};

export type CreateContactRequestSocialLinks = {
  /**
   * A unique identifier for each social media link associated with the contact. This ID is used to distinguish between different social media profiles and is essential for managing and updating specific links within the contact's profile.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media profile associated with the contact. This must be a valid URL format, such as https://www.twitter.com/apideck, and is essential for linking the contact to their social media presence within the CRM system.
   */
  url: string;
  /**
   * Specifies the type of social media platform for the provided URL, such as 'twitter' or 'linkedin'. This helps categorize the social link within the CRM, though it is optional and can be omitted if not applicable.
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number, such as 'mobile', 'home', or 'work'. This optional field categorizes the phone number, aiding in the organization and prioritization of contact methods within the CRM system.
 */
export const CreateContactRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number, such as 'mobile', 'home', or 'work'. This optional field categorizes the phone number, aiding in the organization and prioritization of contact methods within the CRM system.
 */
export type CreateContactRequestPhoneNumbersType = ClosedEnum<
  typeof CreateContactRequestPhoneNumbersType
>;

export type CreateContactRequestPhoneNumbers = {
  /**
   * A unique identifier for each phone number entry associated with the contact. This identifier is used to distinguish between multiple phone numbers and manage them individually within the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, such as '+1' for the United States. This is used to ensure the phone number is formatted correctly for international dialing and is important for maintaining accurate contact information.
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, such as '323'. This optional field helps specify the regional part of the phone number, ensuring accurate dialing and contact identification within the CRM system. It should be a valid area code corresponding to the phone number provided.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number for the contact, required for adding a new contact to the CRM. This field must be a valid phone number format, ensuring the contact can be reached effectively. It serves as a primary communication channel within the CRM.
   */
  number: string;
  /**
   * The extension number for the phone, if applicable. This optional field allows for direct dialing to specific departments or individuals within an organization, enhancing the precision of contact information in the CRM.
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number, such as 'mobile', 'home', or 'work'. This optional field categorizes the phone number, aiding in the organization and prioritization of contact methods within the CRM system.
   */
  type?: CreateContactRequestPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and retrieval. If provided, it should match predefined categories within the CRM system.
 */
export const CreateContactRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and retrieval. If provided, it should match predefined categories within the CRM system.
 */
export type CreateContactRequestEmailsType = ClosedEnum<
  typeof CreateContactRequestEmailsType
>;

export type CreateContactRequestEmails = {
  /**
   * A unique identifier for the email address within the contact's record. This ID is used to distinguish between multiple email addresses associated with a single contact, ensuring accurate updates and retrievals. It should be a valid UUID or a similar unique string format.
   */
  id?: string | null | undefined;
  /**
   * The primary email address for the contact, required for communication purposes. This field must contain a valid email format (e.g., user@example.com) and is essential for identifying the contact within the CRM system.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and retrieval. If provided, it should match predefined categories within the CRM system.
   */
  type?: CreateContactRequestEmailsType | null | undefined;
};

export type CreateContactRequestValue6 = {};

export type CreateContactRequestValue4 = {};

/**
 * The value assigned to the custom field, representing the data or information stored in this field. This property is optional and should match the expected data type for the field's intended use.
 */
export type CreateContactRequestValue =
  | CreateContactRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateContactRequestValue6>;

export type CreateContactRequestCustomFields = {
  /**
   * A unique identifier for the custom field, required to distinguish this field from others within the CRM system. This ID must be a non-empty string and is essential for ensuring that the correct custom field is referenced during contact creation.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, which provides a human-readable label for this field within the CRM. This property is optional but recommended for clarity when managing custom fields.
   */
  name?: string | null | undefined;
  /**
   * Additional information or context about the custom field, helping users understand its purpose and usage. This optional property can enhance the clarity and utility of the custom field within the CRM.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field, representing the data or information stored in this field. This property is optional and should match the expected data type for the field's intended use.
   */
  value?:
    | CreateContactRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateContactRequestValue6>
    | null
    | undefined;
};

export type CreateContactRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the contact data where the new value should be applied. This path must be valid and correctly formatted to ensure the update is applied to the intended data field.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath location within the contact data. This can be of any data type, allowing for flexible updates to the contact's information as required by the operation.
   */
  value?: any | undefined;
};

export type CreateContactRequestPassThrough = {
  /**
   * A mandatory identifier for the service to which the pass_through data should be applied. This ID ensures that the custom data is directed to the correct service, allowing for precise customization and integration with specific service functionalities.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation within the CRM system. This property is useful when the request involves multiple downstream operations, allowing developers to track and manage each operation distinctly. It should be a unique string if used, but is not mandatory for all requests.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows developers to include additional properties directly within the request. This is particularly useful for extending the functionality of the contact addition process without altering the core API structure. The object can contain any key-value pairs as needed.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for making structured modifications to the contact data using specified paths. Each object in the array should define a path and a value, enabling precise updates to nested data structures within the CRM.
   */
  extendPaths?: Array<CreateContactRequestExtendPaths> | undefined;
};

export type CreateContactRequest = {
  /**
   * The full name of the contact to be added to the CRM system. This field is required and must be a non-empty string, as it serves as the primary identifier for the contact within the CRM. Ensure the name accurately reflects the contact's official or preferred designation for effective record-keeping and retrieval.
   */
  name: string | null;
  /**
   * The unique identifier of the user or entity responsible for managing the contact. This optional field helps assign accountability and track interactions with the contact. If provided, it should match an existing owner ID within the CRM system to ensure proper association.
   */
  ownerId?: string | null | undefined;
  /**
   * Specifies the category or role of the contact within the CRM, such as 'customer', 'vendor', or 'lead'. This optional field helps in organizing and filtering contacts based on their relationship to the business. Ensure the type aligns with predefined categories used in the CRM for consistency.
   */
  type?: Type | null | undefined;
  /**
   * The unique identifier of the company associated with the contact. This optional field links the contact to a specific company record within the CRM, facilitating business relationship management. If provided, it should correspond to an existing company ID to ensure accurate association.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company with which the contact is affiliated. This optional field provides a human-readable reference to the company, complementing the company_id. Ensure the company name is accurate and matches the official name used in the CRM for consistency and clarity.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with this contact. This optional field helps link the contact to a specific lead within the CRM, facilitating better tracking and management of potential sales opportunities. If provided, it must be a valid string that corresponds to an existing lead ID in the system.
   */
  leadId?: string | null | undefined;
  /**
   * The first name of the contact person. This field is used to personalize communications and should be a valid string containing only alphabetic characters. While not required, providing a first name enhances the CRM's ability to manage and organize contacts effectively.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the contact, if applicable. This optional field allows for more precise identification of individuals, especially in cases where multiple contacts share the same first and last names. It should be a valid string, enhancing the completeness of the contact's profile.
   */
  middleName?: string | null | undefined;
  /**
   * The last name or surname of the contact. This field is crucial for identifying and sorting contacts within the CRM system. It should be a valid string and, while optional, is highly recommended for maintaining accurate and comprehensive contact records.
   */
  lastName?: string | null | undefined;
  /**
   * An optional prefix for the contact's name, such as Mr., Ms., or Dr. This field can be used to address the contact appropriately in communications and should be a valid string. Including a prefix can enhance the professionalism and personalization of interactions with the contact.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the contact, such as 'Jr.', 'Sr.', or 'III'. This field is optional and can be used to provide additional context to the contact's name, ensuring accurate identification and personalization within the CRM system.
   */
  suffix?: string | null | undefined;
  /**
   * The job title of the contact, such as 'Manager' or 'Director'. This optional field helps categorize the contact's role within their organization, aiding in targeted communication and relationship management.
   */
  title?: string | null | undefined;
  /**
   * The department within the organization where the contact works, such as 'Sales' or 'Engineering'. This optional information can be used to segment contacts by department, facilitating more organized and relevant interactions.
   */
  department?: string | null | undefined;
  /**
   * The preferred language of the contact, specified using the ISO 639-1 code (e.g., 'EN' for English). This optional field helps tailor communications to the contact's language preferences, enhancing engagement and understanding.
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact, which can be used for personalization and demographic analysis. This optional field allows for more customized communication strategies and insights into the contact base.
   */
  gender?: Gender | null | undefined;
  /**
   * The date of birth of the contact, formatted as YYYY-MM-DD. This information can be used for personalizing interactions and sending birthday greetings, enhancing customer relationship management. Ensure the date is valid and follows the specified format.
   */
  birthday?: string | null | undefined;
  /**
   * A base64-encoded string representing the contact's image. This property allows you to upload and store a visual representation of the contact within the CRM. Ensure the string is properly encoded to avoid errors during processing.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The URL linking to the contact's photo, which can be used to display the contact's image in the CRM interface. Ensure the URL is accessible and points to a valid image file to avoid broken links.
   */
  photoUrl?: string | null | undefined;
  /**
   * Indicates the origin of the contact, such as a marketing campaign or referral. This information helps in tracking the effectiveness of different lead generation strategies. Provide a descriptive string that clearly identifies the source.
   */
  leadSource?: string | null | undefined;
  /**
   * The contact's fax number, which can be used for sending documents via fax. Ensure the number is formatted correctly according to international dialing standards to facilitate successful communication.
   */
  fax?: string | null | undefined;
  /**
   * A brief overview or summary about the contact. This field can be used to store additional information that might be relevant for understanding the contact's role or significance within the CRM. It is optional and can be left empty if no description is necessary.
   */
  description?: string | null | undefined;
  /**
   * Represents the financial balance associated with the contact, typically used for accounts or customers with financial transactions. This numeric value can include decimals and should reflect the most recent balance status. It is optional and can be omitted if not applicable to the contact.
   */
  currentBalance?: number | null | undefined;
  /**
   * Indicates the current state or condition of the contact, such as 'active', 'inactive', or 'pending'. This string value helps in categorizing contacts for better management and filtering within the CRM system. It is optional and can be customized based on the CRM's status definitions.
   */
  status?: string | null | undefined;
  /**
   * A boolean flag that specifies whether the contact is currently active within the CRM system. Setting this to 'true' means the contact is active, while 'false' indicates inactivity. This property is optional and helps in managing contact visibility and engagement.
   */
  active?: boolean | null | undefined;
  /**
   * A list of website URLs associated with the contact. This array can include multiple strings, each representing a valid URL, and is useful for linking to the contact's online presence or related resources. It is optional and can be left empty if no websites are associated with the contact.
   */
  websites?: Array<CreateContactRequestWebsites> | undefined;
  /**
   * An array of address objects associated with the contact, allowing multiple addresses to be linked to a single contact. Each address object should contain detailed information about the location, enhancing the contact's profile within the CRM.
   */
  addresses?: Array<CreateContactRequestAddresses> | undefined;
  /**
   * An array of social media links associated with the contact. Each entry in the array should represent a distinct social media profile, providing a comprehensive view of the contact's online presence. This field is optional and can be omitted if no social links are available.
   */
  socialLinks?: Array<CreateContactRequestSocialLinks> | undefined;
  /**
   * An array of phone number objects associated with the contact. Each object within the array can contain details such as the phone number's unique identifier and country code, allowing for comprehensive contact information management.
   */
  phoneNumbers?: Array<CreateContactRequestPhoneNumbers> | undefined;
  /**
   * A list of email addresses associated with the contact. This optional field allows for multiple email entries, facilitating diverse communication channels and ensuring comprehensive contact information within the CRM.
   */
  emails?: Array<CreateContactRequestEmails> | undefined;
  /**
   * The domain part of the contact's email address, used for domain-specific operations or filtering. This field is optional and should be extracted from the email address if needed for specific CRM functionalities.
   */
  emailDomain?: string | null | undefined;
  /**
   * An array of custom fields that allow for additional, user-defined data to be associated with the contact. Each entry in the array should follow a key-value structure, enabling flexible data storage beyond standard contact attributes.
   */
  customFields?: Array<CreateContactRequestCustomFields> | undefined;
  /**
   * A list of tags associated with the contact, used for categorization and easy retrieval within the CRM. This optional array can include multiple tags, each represented as a string, to enhance the organization of contact records.
   */
  tags?: Array<string> | null | undefined;
  /**
   * An array of opportunity identifiers linked to the contact, representing potential business deals or engagements. This property allows the CRM to associate the contact with specific opportunities, facilitating tracking and management of sales processes. Each ID should correspond to an existing opportunity within the CRM.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * An array for passing custom data or structured modifications specific to a service when creating or updating resources. This property allows for flexibility and customization in API requests, enabling the inclusion of service-specific parameters that are not covered by standard fields.
   */
  passThrough?: Array<CreateContactRequestPassThrough> | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Gender$inboundSchema: z.ZodNativeEnum<typeof Gender> = z
  .nativeEnum(Gender);

/** @internal */
export const Gender$outboundSchema: z.ZodNativeEnum<typeof Gender> =
  Gender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Gender$ {
  /** @deprecated use `Gender$inboundSchema` instead. */
  export const inboundSchema = Gender$inboundSchema;
  /** @deprecated use `Gender$outboundSchema` instead. */
  export const outboundSchema = Gender$outboundSchema;
}

/** @internal */
export const CreateContactRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestType
> = z.nativeEnum(CreateContactRequestType);

/** @internal */
export const CreateContactRequestType$outboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestType
> = CreateContactRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestType$ {
  /** @deprecated use `CreateContactRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestType$inboundSchema;
  /** @deprecated use `CreateContactRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestType$outboundSchema;
}

/** @internal */
export const CreateContactRequestWebsites$inboundSchema: z.ZodType<
  CreateContactRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateContactRequestType$inboundSchema).optional(),
});

/** @internal */
export type CreateContactRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CreateContactRequestWebsites$outboundSchema: z.ZodType<
  CreateContactRequestWebsites$Outbound,
  z.ZodTypeDef,
  CreateContactRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateContactRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestWebsites$ {
  /** @deprecated use `CreateContactRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestWebsites$inboundSchema;
  /** @deprecated use `CreateContactRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestWebsites$outboundSchema;
  /** @deprecated use `CreateContactRequestWebsites$Outbound` instead. */
  export type Outbound = CreateContactRequestWebsites$Outbound;
}

export function createContactRequestWebsitesToJSON(
  createContactRequestWebsites: CreateContactRequestWebsites,
): string {
  return JSON.stringify(
    CreateContactRequestWebsites$outboundSchema.parse(
      createContactRequestWebsites,
    ),
  );
}

export function createContactRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestWebsites' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestAddressesType
> = z.nativeEnum(CreateContactRequestAddressesType);

/** @internal */
export const CreateContactRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestAddressesType
> = CreateContactRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestAddressesType$ {
  /** @deprecated use `CreateContactRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestAddressesType$inboundSchema;
  /** @deprecated use `CreateContactRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema =
    CreateContactRequestAddressesType$outboundSchema;
}

/** @internal */
export const CreateContactRequestAddresses$inboundSchema: z.ZodType<
  CreateContactRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateContactRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type CreateContactRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const CreateContactRequestAddresses$outboundSchema: z.ZodType<
  CreateContactRequestAddresses$Outbound,
  z.ZodTypeDef,
  CreateContactRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateContactRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestAddresses$ {
  /** @deprecated use `CreateContactRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestAddresses$inboundSchema;
  /** @deprecated use `CreateContactRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestAddresses$outboundSchema;
  /** @deprecated use `CreateContactRequestAddresses$Outbound` instead. */
  export type Outbound = CreateContactRequestAddresses$Outbound;
}

export function createContactRequestAddressesToJSON(
  createContactRequestAddresses: CreateContactRequestAddresses,
): string {
  return JSON.stringify(
    CreateContactRequestAddresses$outboundSchema.parse(
      createContactRequestAddresses,
    ),
  );
}

export function createContactRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestAddresses' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestSocialLinks$inboundSchema: z.ZodType<
  CreateContactRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateContactRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CreateContactRequestSocialLinks$outboundSchema: z.ZodType<
  CreateContactRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  CreateContactRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestSocialLinks$ {
  /** @deprecated use `CreateContactRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestSocialLinks$inboundSchema;
  /** @deprecated use `CreateContactRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestSocialLinks$outboundSchema;
  /** @deprecated use `CreateContactRequestSocialLinks$Outbound` instead. */
  export type Outbound = CreateContactRequestSocialLinks$Outbound;
}

export function createContactRequestSocialLinksToJSON(
  createContactRequestSocialLinks: CreateContactRequestSocialLinks,
): string {
  return JSON.stringify(
    CreateContactRequestSocialLinks$outboundSchema.parse(
      createContactRequestSocialLinks,
    ),
  );
}

export function createContactRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof CreateContactRequestPhoneNumbersType> = z.nativeEnum(
    CreateContactRequestPhoneNumbersType,
  );

/** @internal */
export const CreateContactRequestPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof CreateContactRequestPhoneNumbersType> =
    CreateContactRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestPhoneNumbersType$ {
  /** @deprecated use `CreateContactRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    CreateContactRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `CreateContactRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    CreateContactRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const CreateContactRequestPhoneNumbers$inboundSchema: z.ZodType<
  CreateContactRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateContactRequestPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type CreateContactRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const CreateContactRequestPhoneNumbers$outboundSchema: z.ZodType<
  CreateContactRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  CreateContactRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateContactRequestPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestPhoneNumbers$ {
  /** @deprecated use `CreateContactRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `CreateContactRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `CreateContactRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = CreateContactRequestPhoneNumbers$Outbound;
}

export function createContactRequestPhoneNumbersToJSON(
  createContactRequestPhoneNumbers: CreateContactRequestPhoneNumbers,
): string {
  return JSON.stringify(
    CreateContactRequestPhoneNumbers$outboundSchema.parse(
      createContactRequestPhoneNumbers,
    ),
  );
}

export function createContactRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestEmailsType
> = z.nativeEnum(CreateContactRequestEmailsType);

/** @internal */
export const CreateContactRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestEmailsType
> = CreateContactRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestEmailsType$ {
  /** @deprecated use `CreateContactRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestEmailsType$inboundSchema;
  /** @deprecated use `CreateContactRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestEmailsType$outboundSchema;
}

/** @internal */
export const CreateContactRequestEmails$inboundSchema: z.ZodType<
  CreateContactRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CreateContactRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type CreateContactRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const CreateContactRequestEmails$outboundSchema: z.ZodType<
  CreateContactRequestEmails$Outbound,
  z.ZodTypeDef,
  CreateContactRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CreateContactRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestEmails$ {
  /** @deprecated use `CreateContactRequestEmails$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestEmails$inboundSchema;
  /** @deprecated use `CreateContactRequestEmails$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestEmails$outboundSchema;
  /** @deprecated use `CreateContactRequestEmails$Outbound` instead. */
  export type Outbound = CreateContactRequestEmails$Outbound;
}

export function createContactRequestEmailsToJSON(
  createContactRequestEmails: CreateContactRequestEmails,
): string {
  return JSON.stringify(
    CreateContactRequestEmails$outboundSchema.parse(createContactRequestEmails),
  );
}

export function createContactRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestEmails' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestValue6$inboundSchema: z.ZodType<
  CreateContactRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateContactRequestValue6$Outbound = {};

/** @internal */
export const CreateContactRequestValue6$outboundSchema: z.ZodType<
  CreateContactRequestValue6$Outbound,
  z.ZodTypeDef,
  CreateContactRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestValue6$ {
  /** @deprecated use `CreateContactRequestValue6$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestValue6$inboundSchema;
  /** @deprecated use `CreateContactRequestValue6$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestValue6$outboundSchema;
  /** @deprecated use `CreateContactRequestValue6$Outbound` instead. */
  export type Outbound = CreateContactRequestValue6$Outbound;
}

export function createContactRequestValue6ToJSON(
  createContactRequestValue6: CreateContactRequestValue6,
): string {
  return JSON.stringify(
    CreateContactRequestValue6$outboundSchema.parse(createContactRequestValue6),
  );
}

export function createContactRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestValue6' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestValue4$inboundSchema: z.ZodType<
  CreateContactRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateContactRequestValue4$Outbound = {};

/** @internal */
export const CreateContactRequestValue4$outboundSchema: z.ZodType<
  CreateContactRequestValue4$Outbound,
  z.ZodTypeDef,
  CreateContactRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestValue4$ {
  /** @deprecated use `CreateContactRequestValue4$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestValue4$inboundSchema;
  /** @deprecated use `CreateContactRequestValue4$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestValue4$outboundSchema;
  /** @deprecated use `CreateContactRequestValue4$Outbound` instead. */
  export type Outbound = CreateContactRequestValue4$Outbound;
}

export function createContactRequestValue4ToJSON(
  createContactRequestValue4: CreateContactRequestValue4,
): string {
  return JSON.stringify(
    CreateContactRequestValue4$outboundSchema.parse(createContactRequestValue4),
  );
}

export function createContactRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestValue4' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestValue$inboundSchema: z.ZodType<
  CreateContactRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateContactRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateContactRequestValue6$inboundSchema)),
]);

/** @internal */
export type CreateContactRequestValue$Outbound =
  | CreateContactRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateContactRequestValue6$Outbound>;

/** @internal */
export const CreateContactRequestValue$outboundSchema: z.ZodType<
  CreateContactRequestValue$Outbound,
  z.ZodTypeDef,
  CreateContactRequestValue
> = z.union([
  z.lazy(() => CreateContactRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateContactRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestValue$ {
  /** @deprecated use `CreateContactRequestValue$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestValue$inboundSchema;
  /** @deprecated use `CreateContactRequestValue$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestValue$outboundSchema;
  /** @deprecated use `CreateContactRequestValue$Outbound` instead. */
  export type Outbound = CreateContactRequestValue$Outbound;
}

export function createContactRequestValueToJSON(
  createContactRequestValue: CreateContactRequestValue,
): string {
  return JSON.stringify(
    CreateContactRequestValue$outboundSchema.parse(createContactRequestValue),
  );
}

export function createContactRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestValue' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestCustomFields$inboundSchema: z.ZodType<
  CreateContactRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateContactRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateContactRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CreateContactRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | CreateContactRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateContactRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateContactRequestCustomFields$outboundSchema: z.ZodType<
  CreateContactRequestCustomFields$Outbound,
  z.ZodTypeDef,
  CreateContactRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateContactRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateContactRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestCustomFields$ {
  /** @deprecated use `CreateContactRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestCustomFields$inboundSchema;
  /** @deprecated use `CreateContactRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestCustomFields$outboundSchema;
  /** @deprecated use `CreateContactRequestCustomFields$Outbound` instead. */
  export type Outbound = CreateContactRequestCustomFields$Outbound;
}

export function createContactRequestCustomFieldsToJSON(
  createContactRequestCustomFields: CreateContactRequestCustomFields,
): string {
  return JSON.stringify(
    CreateContactRequestCustomFields$outboundSchema.parse(
      createContactRequestCustomFields,
    ),
  );
}

export function createContactRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestExtendPaths$inboundSchema: z.ZodType<
  CreateContactRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CreateContactRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CreateContactRequestExtendPaths$outboundSchema: z.ZodType<
  CreateContactRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  CreateContactRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestExtendPaths$ {
  /** @deprecated use `CreateContactRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestExtendPaths$inboundSchema;
  /** @deprecated use `CreateContactRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestExtendPaths$outboundSchema;
  /** @deprecated use `CreateContactRequestExtendPaths$Outbound` instead. */
  export type Outbound = CreateContactRequestExtendPaths$Outbound;
}

export function createContactRequestExtendPathsToJSON(
  createContactRequestExtendPaths: CreateContactRequestExtendPaths,
): string {
  return JSON.stringify(
    CreateContactRequestExtendPaths$outboundSchema.parse(
      createContactRequestExtendPaths,
    ),
  );
}

export function createContactRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestPassThrough$inboundSchema: z.ZodType<
  CreateContactRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => CreateContactRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CreateContactRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CreateContactRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CreateContactRequestPassThrough$outboundSchema: z.ZodType<
  CreateContactRequestPassThrough$Outbound,
  z.ZodTypeDef,
  CreateContactRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => CreateContactRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestPassThrough$ {
  /** @deprecated use `CreateContactRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestPassThrough$inboundSchema;
  /** @deprecated use `CreateContactRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestPassThrough$outboundSchema;
  /** @deprecated use `CreateContactRequestPassThrough$Outbound` instead. */
  export type Outbound = CreateContactRequestPassThrough$Outbound;
}

export function createContactRequestPassThroughToJSON(
  createContactRequestPassThrough: CreateContactRequestPassThrough,
): string {
  return JSON.stringify(
    CreateContactRequestPassThrough$outboundSchema.parse(
      createContactRequestPassThrough,
    ),
  );
}

export function createContactRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const CreateContactRequest$inboundSchema: z.ZodType<
  CreateContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  type: z.nullable(Type$inboundSchema).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(Gender$inboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => CreateContactRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CreateContactRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => CreateContactRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => CreateContactRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => CreateContactRequestEmails$inboundSchema))
    .optional(),
  email_domain: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => CreateContactRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunity_ids: z.array(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => CreateContactRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "company_id": "companyId",
    "company_name": "companyName",
    "lead_id": "leadId",
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "photo_url": "photoUrl",
    "lead_source": "leadSource",
    "current_balance": "currentBalance",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "email_domain": "emailDomain",
    "custom_fields": "customFields",
    "opportunity_ids": "opportunityIds",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CreateContactRequest$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<CreateContactRequestWebsites$Outbound> | undefined;
  addresses?: Array<CreateContactRequestAddresses$Outbound> | undefined;
  social_links?: Array<CreateContactRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<CreateContactRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<CreateContactRequestEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<CreateContactRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<CreateContactRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const CreateContactRequest$outboundSchema: z.ZodType<
  CreateContactRequest$Outbound,
  z.ZodTypeDef,
  CreateContactRequest
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(Type$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(Gender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => CreateContactRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CreateContactRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => CreateContactRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => CreateContactRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => CreateContactRequestEmails$outboundSchema))
    .optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => CreateContactRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => CreateContactRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequest$ {
  /** @deprecated use `CreateContactRequest$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequest$inboundSchema;
  /** @deprecated use `CreateContactRequest$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequest$outboundSchema;
  /** @deprecated use `CreateContactRequest$Outbound` instead. */
  export type Outbound = CreateContactRequest$Outbound;
}

export function createContactRequestToJSON(
  createContactRequest: CreateContactRequest,
): string {
  return JSON.stringify(
    CreateContactRequest$outboundSchema.parse(createContactRequest),
  );
}

export function createContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequest' from JSON`,
  );
}
