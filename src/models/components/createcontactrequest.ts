/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the category or classification of the contact, such as 'customer', 'supplier', or 'partner'. This optional field helps in organizing contacts within the CRM for targeted communication and management strategies.
 */
export const Type = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * Specifies the category or classification of the contact, such as 'customer', 'supplier', or 'partner'. This optional field helps in organizing contacts within the CRM for targeted communication and management strategies.
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * The gender of the contact, which can be used for demographic analysis and personalized communication. This field is optional and should be filled based on the contact's preference or available information.
 */
export const Gender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact, which can be used for demographic analysis and personalized communication. This field is optional and should be filled based on the contact's preference or available information.
 */
export type Gender = ClosedEnum<typeof Gender>;

/**
 * Specifies the type of website associated with the contact, such as personal, business, or social media. This field helps categorize the website for better organization and retrieval within the CRM system. Although optional, providing this information can enhance the contact's profile.
 */
export const CreateContactRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of website associated with the contact, such as personal, business, or social media. This field helps categorize the website for better organization and retrieval within the CRM system. Although optional, providing this information can enhance the contact's profile.
 */
export type CreateContactRequestType = ClosedEnum<
  typeof CreateContactRequestType
>;

export type CreateContactRequestWebsites = {
  /**
   * A unique identifier for the website associated with the contact. This ID is used to distinguish between different websites linked to the contact and is not required when adding a new contact unless you are updating an existing website entry. Ensure the ID is a valid string format if provided.
   */
  id?: string | null | undefined;
  /**
   * The URL of the website associated with the contact. This field is required and must be a valid URL format, as it represents the primary web address for the contact's online presence. It is crucial for linking the contact to their digital footprint within the CRM.
   */
  url: string;
  /**
   * Specifies the type of website associated with the contact, such as personal, business, or social media. This field helps categorize the website for better organization and retrieval within the CRM system. Although optional, providing this information can enhance the contact's profile.
   */
  type?: CreateContactRequestType | null | undefined;
};

/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in organizing and identifying the address type within the CRM system. It is optional and should be a descriptive string that clearly indicates the address's purpose.
 */
export const CreateContactRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in organizing and identifying the address type within the CRM system. It is optional and should be a descriptive string that clearly indicates the address's purpose.
 */
export type CreateContactRequestAddressesType = ClosedEnum<
  typeof CreateContactRequestAddressesType
>;

export type CreateContactRequestAddresses = {
  /**
   * A unique identifier for each address associated with the contact. This ID is used to manage and update specific addresses within the contact's profile. It is not required when adding a new contact unless you are referencing an existing address entry.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in organizing and identifying the address type within the CRM system. It is optional and should be a descriptive string that clearly indicates the address's purpose.
   */
  type?: CreateContactRequestAddressesType | null | undefined;
  /**
   * Represents the full address in a single unstructured string format. This is useful when the address data is not available in a structured format. It is optional and should be a complete address string that can be used for display or processing purposes.
   */
  string?: string | null | undefined;
  /**
   * The label or identifier for the address, such as 'Head Office' or 'Warehouse'. This helps in easily recognizing and managing multiple addresses associated with a contact. It is optional and should be a clear, descriptive name for the address.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, including details like street number, street name, and apartment or suite number. This field is essential for accurately locating the address and is optional. It should be a precise string that forms the first part of the address.
   */
  line1?: string | null | undefined;
  /**
   * The secondary line of the address, often used for additional information such as floor number or building name. This field is optional and should complement the primary address line to provide a complete address.
   */
  line2?: string | null | undefined;
  /**
   * This optional field allows you to specify additional address details beyond the standard address lines, such as apartment or suite numbers. It helps in providing a more precise location for the contact within the CRM system. Ensure that the input is a string that accurately represents the additional address information.
   */
  line3?: string | null | undefined;
  /**
   * Use this optional field to include further address details that do not fit into the previous lines, such as building names or specific landmarks. This enhances the accuracy of the contact's address in the CRM. The input should be a string that clearly describes these additional details.
   */
  line4?: string | null | undefined;
  /**
   * The street number is an optional field that specifies the exact number of the building or house in the address. It is crucial for pinpointing the contact's location within a street. Ensure the street number is provided as a string to maintain consistency in the address format.
   */
  streetNumber?: string | null | undefined;
  /**
   * This field specifies the city where the contact is located, which is essential for geographic identification within the CRM. It should be a valid city name provided as a string to ensure accurate location tracking and management.
   */
  city?: string | null | undefined;
  /**
   * The state field indicates the state or region where the contact resides, playing a key role in regional categorization and management within the CRM. It should be a valid state name entered as a string to ensure proper geographic classification.
   */
  state?: string | null | undefined;
  /**
   * The postal code for the contact's address, used to identify the specific area within a city or region. This field is optional and should be formatted according to the local postal standards of the country specified. It helps in accurately locating the contact's address within the CRM system.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the contact's address, following the ISO 3166-1 alpha-2 standard. This optional field specifies the country where the contact resides and is crucial for international address formatting and validation within the CRM system.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the contact's address, used for geographical mapping and location services. This optional field should be a valid latitude value, helping to pinpoint the contact's exact location on a map within the CRM.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the contact's address, essential for accurate geographical mapping and location-based services. This optional field should be a valid longitude value, allowing the CRM to accurately map the contact's location.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality of the contact's address, providing additional geographical context. This optional field helps in further refining the contact's location details within the CRM, especially useful for regions where counties are a significant administrative division.
   */
  county?: string | null | undefined;
  /**
   * The contact_name property specifies the name of the contact person associated with the address. This field is used to identify the individual at the given address within the CRM system. It is not mandatory, but providing it can help in personalizing communications and ensuring accurate contact management.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation property is used to denote the formal greeting or title of the contact person at the address, such as Mr., Ms., or Dr. This field helps in maintaining a professional tone in communications and is optional. Including a salutation can enhance the personalization of interactions with the contact.
   */
  salutation?: string | null | undefined;
  /**
   * The phone_number property represents the contact's phone number associated with the address. This field is crucial for enabling direct communication with the contact via phone calls. It should be formatted according to international standards to ensure proper connectivity and is optional in the request body.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax property holds the fax number for the contact at the address. Although less commonly used today, this field can be important for businesses that still rely on fax communications. It is optional and should be formatted correctly to ensure successful transmission of documents.
   */
  fax?: string | null | undefined;
  /**
   * The email property specifies the email address of the contact at the address. This field is essential for electronic communications and should be a valid email format to ensure messages are delivered correctly. While optional, providing an email can facilitate efficient and documented communication with the contact.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the contact's address. This field is optional and should be a valid URL format if provided. It helps in linking the contact to their online presence, enhancing the CRM's data richness.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the contact's address. This optional field allows for the inclusion of any extra information or context about the address that may be useful for CRM users.
   */
  notes?: string | null | undefined;
  /**
   * A version control string used to manage updates to the contact's address data. This optional field helps prevent data conflicts by ensuring that updates are based on the most recent version of the address information.
   */
  rowVersion?: string | null | undefined;
};

export type CreateContactRequestSocialLinks = {
  /**
   * A unique identifier for each social media link associated with the contact. This optional field ensures that each social link can be distinctly referenced and managed within the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social link associated with the contact. This field is required and must be a valid URL format, such as https://www.twitter.com/apideck. It helps in linking the contact's social media profiles to their CRM record, facilitating better social engagement tracking.
   */
  url: string;
  /**
   * Specifies the type of social media platform for the provided URL, such as 'twitter'. This optional field helps categorize the social link, enabling more organized social media data management within the CRM.
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number, such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number, aiding in better organization and retrieval of contact information. It should be a descriptive string that accurately represents the phone number's usage context.
 */
export const CreateContactRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number, such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number, aiding in better organization and retrieval of contact information. It should be a descriptive string that accurately represents the phone number's usage context.
 */
export type CreateContactRequestPhoneNumbersType = ClosedEnum<
  typeof CreateContactRequestPhoneNumbersType
>;

export type CreateContactRequestPhoneNumbers = {
  /**
   * A unique identifier for each phone number entry within the contact's phone numbers array. This optional field ensures that each phone number can be distinctly referenced and managed within the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code associated with the phone number, such as '+1' for the United States. This optional field is crucial for ensuring that phone numbers are formatted correctly for international dialing, supporting global communication capabilities.
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323. This optional field helps specify the geographical region associated with the phone number, enhancing the contact's reachability. It should be a valid area code that corresponds to the contact's location.
   */
  areaCode?: string | null | undefined;
  /**
   * The primary phone number for the contact. This field is required and must be a valid phone number format to ensure successful communication with the contact. It serves as a key point of contact within the CRM system.
   */
  number: string;
  /**
   * The extension number for the phone, if applicable. This optional field allows for direct dialing to specific departments or individuals within an organization. It should be a valid extension number that complements the main phone number.
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number, such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number, aiding in better organization and retrieval of contact information. It should be a descriptive string that accurately represents the phone number's usage context.
   */
  type?: CreateContactRequestPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work' or 'personal'. This optional field helps categorize the email address, allowing for better organization and filtering of contact information within the CRM.
 */
export const CreateContactRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work' or 'personal'. This optional field helps categorize the email address, allowing for better organization and filtering of contact information within the CRM.
 */
export type CreateContactRequestEmailsType = ClosedEnum<
  typeof CreateContactRequestEmailsType
>;

export type CreateContactRequestEmails = {
  /**
   * A unique identifier for the email address associated with the contact. This field is optional and can be used to reference or update specific email entries within the contact's email list. It helps in managing multiple email addresses for a single contact efficiently.
   */
  id?: string | null | undefined;
  /**
   * The primary email address for the contact, which is required for creating or updating a contact record. This field must contain a valid email format and serves as a key communication channel for the contact within the CRM system.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work' or 'personal'. This optional field helps categorize the email address, allowing for better organization and filtering of contact information within the CRM.
   */
  type?: CreateContactRequestEmailsType | null | undefined;
};

export type CreateContactRequestValue6 = {};

export type CreateContactRequestValue4 = {};

/**
 * The actual data or value associated with the custom field, representing the specific information you wish to store for the contact. This field is optional and should be formatted as a string to align with the CRM's data handling requirements.
 */
export type CreateContactRequestValue =
  | CreateContactRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateContactRequestValue6>;

export type CreateContactRequestCustomFields = {
  /**
   * The unique identifier for the custom field, essential for distinguishing this field from others within the CRM system. This ID must be a valid string and is required to ensure the correct association of custom data with the contact being added.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, which helps in identifying the purpose or type of data stored in this field. While not mandatory, providing a descriptive name can enhance clarity and organization within the CRM.
   */
  name?: string | null | undefined;
  /**
   * Additional information about the custom field, offering context or details that explain its use or significance. This field is optional but can be useful for documentation and understanding the role of the custom field within the contact's data.
   */
  description?: string | null | undefined;
  /**
   * The actual data or value associated with the custom field, representing the specific information you wish to store for the contact. This field is optional and should be formatted as a string to align with the CRM's data handling requirements.
   */
  value?:
    | CreateContactRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateContactRequestValue6>
    | null
    | undefined;
};

export type CreateContactRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where the value should be applied. This path is crucial for ensuring that modifications are accurately targeted and implemented within the contact's data.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath, which can be of any data type. This flexibility allows developers to insert or update data precisely as needed, ensuring that the contact information is comprehensive and up-to-date.
   */
  value?: any | undefined;
};

export type CreateContactRequestPassThrough = {
  /**
   * A mandatory identifier for the service to which the pass_through data applies. This ensures that the custom data is correctly routed and applied to the intended service integration, maintaining the integrity of service-specific operations.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that this pass-through should apply to. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise tracking and management of each operation within the CRM system.
   */
  operationId?: string | undefined;
  /**
   * A flexible object designed to accommodate any additional properties needed for direct extension. This allows developers to customize the contact creation process by adding extra fields or data points that are not covered by the default schema.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects used for making structured data modifications through specified paths. This feature enables developers to apply precise changes to the contact data structure, facilitating complex updates and integrations.
   */
  extendPaths?: Array<CreateContactRequestExtendPaths> | undefined;
};

export type CreateContactRequest = {
  /**
   * The full name of the contact being added to the CRM. This field is required and must be a valid string representing the contact's complete name. It is essential for identifying the contact within the CRM system and ensuring accurate record-keeping.
   */
  name: string | null;
  /**
   * The unique identifier of the user who owns or is responsible for this contact. This field is optional and can be used to assign the contact to a specific user within the CRM, facilitating better management and accountability.
   */
  ownerId?: string | null | undefined;
  /**
   * Specifies the category or classification of the contact, such as 'customer', 'supplier', or 'partner'. This optional field helps in organizing contacts within the CRM for targeted communication and management strategies.
   */
  type?: Type | null | undefined;
  /**
   * The unique identifier of the company associated with the contact. This optional field links the contact to a specific company within the CRM, aiding in the organization and retrieval of company-related contact information.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company that the contact is associated with. This optional field provides a human-readable reference to the company, complementing the company_id for easier identification and association within the CRM.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with this contact. This field helps link the contact to a specific lead within the CRM, facilitating better tracking and management of lead-related interactions. It should be a valid string that corresponds to an existing lead ID in the system.
   */
  leadId?: string | null | undefined;
  /**
   * The given name of the contact, used for personal identification and communication. This field is optional but recommended for personalized interactions and record-keeping within the CRM. It should be a valid string representing the contact's first name.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the contact, which can be used for more precise identification or formal communication. While not required, including a middle name can help distinguish contacts with common first and last names. It should be a valid string if provided.
   */
  middleName?: string | null | undefined;
  /**
   * The family name or surname of the contact, essential for identifying and organizing contact records. This field is crucial for sorting and searching contacts within the CRM. It should be a valid string representing the contact's last name.
   */
  lastName?: string | null | undefined;
  /**
   * An optional title or honorific for the contact, such as Mr., Ms., or Dr. This field can be used to address the contact appropriately in communications and documentation. It should be a valid string if provided.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the contact's name, such as 'Jr.', 'Sr.', or 'III'. This field is optional and can be used to provide additional context to the contact's full name, aiding in proper identification and personalization within the CRM system.
   */
  suffix?: string | null | undefined;
  /**
   * The job title of the contact, which helps in identifying their role within their organization. This information is optional but can be useful for categorizing contacts and tailoring communication strategies.
   */
  title?: string | null | undefined;
  /**
   * The department within the organization where the contact works. This optional field can help in organizing contacts by their departmental affiliations, facilitating targeted communication and relationship management.
   */
  department?: string | null | undefined;
  /**
   * The preferred language of communication for the contact, specified using the ISO 639-1 language code (e.g., 'EN' for English). This optional field ensures that communications are delivered in the contact's preferred language, enhancing engagement and understanding.
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact, which can be used for demographic analysis and personalized communication. This field is optional and should be filled based on the contact's preference or available information.
   */
  gender?: Gender | null | undefined;
  /**
   * The birthday of the contact, used to store and manage personal information relevant to the contact. This field should be formatted as a date string (e.g., 'YYYY-MM-DD') to ensure consistency and proper handling within the CRM system. Including a contact's birthday can enhance customer relationship management by enabling personalized interactions and reminders.
   */
  birthday?: string | null | undefined;
  /**
   * A base64-encoded string representing the contact's image. This property allows the inclusion of a visual representation of the contact directly within the CRM, facilitating easier identification and personalization. Ensure the image is properly encoded to avoid errors during processing.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The URL pointing to the contact's photo, allowing the CRM to fetch and display the image from an external source. This property is useful for integrating with external image hosting services and should be a valid URL format to ensure proper functionality.
   */
  photoUrl?: string | null | undefined;
  /**
   * Indicates the origin of the contact, such as a marketing campaign or referral. This information helps in tracking the effectiveness of different lead generation strategies and should be a descriptive string that clearly identifies the source.
   */
  leadSource?: string | null | undefined;
  /**
   * The contact's fax number, which can be used for sending documents via fax. This property should be formatted as a string that includes the country code and area code, ensuring it is ready for international dialing if necessary.
   */
  fax?: string | null | undefined;
  /**
   * A brief narrative or explanation about the contact. This field can be used to store additional information that may not fit into other predefined fields, providing context or notes about the contact. It is optional and can be left empty if no additional description is needed.
   */
  description?: string | null | undefined;
  /**
   * Represents the financial balance associated with the contact, typically used in CRM systems that integrate financial data. This field is optional and should be a valid number reflecting the contact's current balance, if applicable.
   */
  currentBalance?: number | null | undefined;
  /**
   * Indicates the current state or condition of the contact within the CRM system. This field helps in categorizing contacts based on their engagement or activity level. It is optional and should be a valid status string that aligns with the CRM's status categories.
   */
  status?: string | null | undefined;
  /**
   * A flag indicating whether the contact is currently active within the CRM system. This boolean value helps in filtering contacts based on their active status, aiding in management and communication strategies. It is optional and defaults to false if not specified.
   */
  active?: boolean | null | undefined;
  /**
   * A list of website URLs associated with the contact. This array can include multiple entries, each representing a different website related to the contact, such as personal, business, or social media sites. It is optional and can be left empty if no websites are associated with the contact.
   */
  websites?: Array<CreateContactRequestWebsites> | undefined;
  /**
   * An array of address objects associated with the contact. Each object within the array should contain detailed information about a specific address, such as street, city, and postal code. This field is optional but can be used to store multiple addresses for comprehensive contact management.
   */
  addresses?: Array<CreateContactRequestAddresses> | undefined;
  /**
   * An array of social media links associated with the contact. This optional field allows for the inclusion of multiple social media profiles, enhancing the contact's profile within the CRM.
   */
  socialLinks?: Array<CreateContactRequestSocialLinks> | undefined;
  /**
   * An array of phone number objects associated with the contact. Each object within the array should contain details like the phone number's unique identifier and country code. This field is optional and allows for multiple contact numbers to be stored, enhancing communication options.
   */
  phoneNumbers?: Array<CreateContactRequestPhoneNumbers> | undefined;
  /**
   * A list of email addresses associated with the contact. This optional array can include multiple email addresses to ensure comprehensive communication options. Each email should be a valid email format to facilitate effective electronic correspondence.
   */
  emails?: Array<CreateContactRequestEmails> | undefined;
  /**
   * Represents the domain part of the contact's email address. This optional field can be used for domain-specific operations or filtering contacts by their email domains, enhancing targeted communication strategies.
   */
  emailDomain?: string | null | undefined;
  /**
   * An array of custom fields that allow for additional, user-defined information to be stored with the contact. This optional property enables flexibility in capturing unique data points that are not covered by standard fields, supporting tailored CRM solutions.
   */
  customFields?: Array<CreateContactRequestCustomFields> | undefined;
  /**
   * An array of tags that can be used to categorize or label the contact for easier retrieval and organization within the CRM. Tags are optional but can significantly enhance the searchability and management of contact records.
   */
  tags?: Array<string> | null | undefined;
  /**
   * An array of opportunity IDs linked to the contact. This property associates the contact with specific sales opportunities, enabling tracking and management of potential deals. Each ID in the array should be a valid string representing an existing opportunity in the CRM.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * An array for passing custom data or structured modifications specific to a service when creating or updating resources. This allows for flexibility in handling service-specific requirements without altering the core API structure.
   */
  passThrough?: Array<CreateContactRequestPassThrough> | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Gender$inboundSchema: z.ZodNativeEnum<typeof Gender> = z
  .nativeEnum(Gender);

/** @internal */
export const Gender$outboundSchema: z.ZodNativeEnum<typeof Gender> =
  Gender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Gender$ {
  /** @deprecated use `Gender$inboundSchema` instead. */
  export const inboundSchema = Gender$inboundSchema;
  /** @deprecated use `Gender$outboundSchema` instead. */
  export const outboundSchema = Gender$outboundSchema;
}

/** @internal */
export const CreateContactRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestType
> = z.nativeEnum(CreateContactRequestType);

/** @internal */
export const CreateContactRequestType$outboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestType
> = CreateContactRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestType$ {
  /** @deprecated use `CreateContactRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestType$inboundSchema;
  /** @deprecated use `CreateContactRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestType$outboundSchema;
}

/** @internal */
export const CreateContactRequestWebsites$inboundSchema: z.ZodType<
  CreateContactRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateContactRequestType$inboundSchema).optional(),
});

/** @internal */
export type CreateContactRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CreateContactRequestWebsites$outboundSchema: z.ZodType<
  CreateContactRequestWebsites$Outbound,
  z.ZodTypeDef,
  CreateContactRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateContactRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestWebsites$ {
  /** @deprecated use `CreateContactRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestWebsites$inboundSchema;
  /** @deprecated use `CreateContactRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestWebsites$outboundSchema;
  /** @deprecated use `CreateContactRequestWebsites$Outbound` instead. */
  export type Outbound = CreateContactRequestWebsites$Outbound;
}

export function createContactRequestWebsitesToJSON(
  createContactRequestWebsites: CreateContactRequestWebsites,
): string {
  return JSON.stringify(
    CreateContactRequestWebsites$outboundSchema.parse(
      createContactRequestWebsites,
    ),
  );
}

export function createContactRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestWebsites' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestAddressesType
> = z.nativeEnum(CreateContactRequestAddressesType);

/** @internal */
export const CreateContactRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestAddressesType
> = CreateContactRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestAddressesType$ {
  /** @deprecated use `CreateContactRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestAddressesType$inboundSchema;
  /** @deprecated use `CreateContactRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema =
    CreateContactRequestAddressesType$outboundSchema;
}

/** @internal */
export const CreateContactRequestAddresses$inboundSchema: z.ZodType<
  CreateContactRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateContactRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type CreateContactRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const CreateContactRequestAddresses$outboundSchema: z.ZodType<
  CreateContactRequestAddresses$Outbound,
  z.ZodTypeDef,
  CreateContactRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateContactRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestAddresses$ {
  /** @deprecated use `CreateContactRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestAddresses$inboundSchema;
  /** @deprecated use `CreateContactRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestAddresses$outboundSchema;
  /** @deprecated use `CreateContactRequestAddresses$Outbound` instead. */
  export type Outbound = CreateContactRequestAddresses$Outbound;
}

export function createContactRequestAddressesToJSON(
  createContactRequestAddresses: CreateContactRequestAddresses,
): string {
  return JSON.stringify(
    CreateContactRequestAddresses$outboundSchema.parse(
      createContactRequestAddresses,
    ),
  );
}

export function createContactRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestAddresses' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestSocialLinks$inboundSchema: z.ZodType<
  CreateContactRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateContactRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CreateContactRequestSocialLinks$outboundSchema: z.ZodType<
  CreateContactRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  CreateContactRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestSocialLinks$ {
  /** @deprecated use `CreateContactRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestSocialLinks$inboundSchema;
  /** @deprecated use `CreateContactRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestSocialLinks$outboundSchema;
  /** @deprecated use `CreateContactRequestSocialLinks$Outbound` instead. */
  export type Outbound = CreateContactRequestSocialLinks$Outbound;
}

export function createContactRequestSocialLinksToJSON(
  createContactRequestSocialLinks: CreateContactRequestSocialLinks,
): string {
  return JSON.stringify(
    CreateContactRequestSocialLinks$outboundSchema.parse(
      createContactRequestSocialLinks,
    ),
  );
}

export function createContactRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof CreateContactRequestPhoneNumbersType> = z.nativeEnum(
    CreateContactRequestPhoneNumbersType,
  );

/** @internal */
export const CreateContactRequestPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof CreateContactRequestPhoneNumbersType> =
    CreateContactRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestPhoneNumbersType$ {
  /** @deprecated use `CreateContactRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    CreateContactRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `CreateContactRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    CreateContactRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const CreateContactRequestPhoneNumbers$inboundSchema: z.ZodType<
  CreateContactRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateContactRequestPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type CreateContactRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const CreateContactRequestPhoneNumbers$outboundSchema: z.ZodType<
  CreateContactRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  CreateContactRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateContactRequestPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestPhoneNumbers$ {
  /** @deprecated use `CreateContactRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `CreateContactRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `CreateContactRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = CreateContactRequestPhoneNumbers$Outbound;
}

export function createContactRequestPhoneNumbersToJSON(
  createContactRequestPhoneNumbers: CreateContactRequestPhoneNumbers,
): string {
  return JSON.stringify(
    CreateContactRequestPhoneNumbers$outboundSchema.parse(
      createContactRequestPhoneNumbers,
    ),
  );
}

export function createContactRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestEmailsType
> = z.nativeEnum(CreateContactRequestEmailsType);

/** @internal */
export const CreateContactRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateContactRequestEmailsType
> = CreateContactRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestEmailsType$ {
  /** @deprecated use `CreateContactRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestEmailsType$inboundSchema;
  /** @deprecated use `CreateContactRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestEmailsType$outboundSchema;
}

/** @internal */
export const CreateContactRequestEmails$inboundSchema: z.ZodType<
  CreateContactRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CreateContactRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type CreateContactRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const CreateContactRequestEmails$outboundSchema: z.ZodType<
  CreateContactRequestEmails$Outbound,
  z.ZodTypeDef,
  CreateContactRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CreateContactRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestEmails$ {
  /** @deprecated use `CreateContactRequestEmails$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestEmails$inboundSchema;
  /** @deprecated use `CreateContactRequestEmails$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestEmails$outboundSchema;
  /** @deprecated use `CreateContactRequestEmails$Outbound` instead. */
  export type Outbound = CreateContactRequestEmails$Outbound;
}

export function createContactRequestEmailsToJSON(
  createContactRequestEmails: CreateContactRequestEmails,
): string {
  return JSON.stringify(
    CreateContactRequestEmails$outboundSchema.parse(createContactRequestEmails),
  );
}

export function createContactRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestEmails' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestValue6$inboundSchema: z.ZodType<
  CreateContactRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateContactRequestValue6$Outbound = {};

/** @internal */
export const CreateContactRequestValue6$outboundSchema: z.ZodType<
  CreateContactRequestValue6$Outbound,
  z.ZodTypeDef,
  CreateContactRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestValue6$ {
  /** @deprecated use `CreateContactRequestValue6$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestValue6$inboundSchema;
  /** @deprecated use `CreateContactRequestValue6$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestValue6$outboundSchema;
  /** @deprecated use `CreateContactRequestValue6$Outbound` instead. */
  export type Outbound = CreateContactRequestValue6$Outbound;
}

export function createContactRequestValue6ToJSON(
  createContactRequestValue6: CreateContactRequestValue6,
): string {
  return JSON.stringify(
    CreateContactRequestValue6$outboundSchema.parse(createContactRequestValue6),
  );
}

export function createContactRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestValue6' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestValue4$inboundSchema: z.ZodType<
  CreateContactRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateContactRequestValue4$Outbound = {};

/** @internal */
export const CreateContactRequestValue4$outboundSchema: z.ZodType<
  CreateContactRequestValue4$Outbound,
  z.ZodTypeDef,
  CreateContactRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestValue4$ {
  /** @deprecated use `CreateContactRequestValue4$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestValue4$inboundSchema;
  /** @deprecated use `CreateContactRequestValue4$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestValue4$outboundSchema;
  /** @deprecated use `CreateContactRequestValue4$Outbound` instead. */
  export type Outbound = CreateContactRequestValue4$Outbound;
}

export function createContactRequestValue4ToJSON(
  createContactRequestValue4: CreateContactRequestValue4,
): string {
  return JSON.stringify(
    CreateContactRequestValue4$outboundSchema.parse(createContactRequestValue4),
  );
}

export function createContactRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestValue4' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestValue$inboundSchema: z.ZodType<
  CreateContactRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateContactRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateContactRequestValue6$inboundSchema)),
]);

/** @internal */
export type CreateContactRequestValue$Outbound =
  | CreateContactRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateContactRequestValue6$Outbound>;

/** @internal */
export const CreateContactRequestValue$outboundSchema: z.ZodType<
  CreateContactRequestValue$Outbound,
  z.ZodTypeDef,
  CreateContactRequestValue
> = z.union([
  z.lazy(() => CreateContactRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateContactRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestValue$ {
  /** @deprecated use `CreateContactRequestValue$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestValue$inboundSchema;
  /** @deprecated use `CreateContactRequestValue$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestValue$outboundSchema;
  /** @deprecated use `CreateContactRequestValue$Outbound` instead. */
  export type Outbound = CreateContactRequestValue$Outbound;
}

export function createContactRequestValueToJSON(
  createContactRequestValue: CreateContactRequestValue,
): string {
  return JSON.stringify(
    CreateContactRequestValue$outboundSchema.parse(createContactRequestValue),
  );
}

export function createContactRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestValue' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestCustomFields$inboundSchema: z.ZodType<
  CreateContactRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateContactRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateContactRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CreateContactRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | CreateContactRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateContactRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateContactRequestCustomFields$outboundSchema: z.ZodType<
  CreateContactRequestCustomFields$Outbound,
  z.ZodTypeDef,
  CreateContactRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateContactRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateContactRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestCustomFields$ {
  /** @deprecated use `CreateContactRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestCustomFields$inboundSchema;
  /** @deprecated use `CreateContactRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestCustomFields$outboundSchema;
  /** @deprecated use `CreateContactRequestCustomFields$Outbound` instead. */
  export type Outbound = CreateContactRequestCustomFields$Outbound;
}

export function createContactRequestCustomFieldsToJSON(
  createContactRequestCustomFields: CreateContactRequestCustomFields,
): string {
  return JSON.stringify(
    CreateContactRequestCustomFields$outboundSchema.parse(
      createContactRequestCustomFields,
    ),
  );
}

export function createContactRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestExtendPaths$inboundSchema: z.ZodType<
  CreateContactRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CreateContactRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CreateContactRequestExtendPaths$outboundSchema: z.ZodType<
  CreateContactRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  CreateContactRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestExtendPaths$ {
  /** @deprecated use `CreateContactRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestExtendPaths$inboundSchema;
  /** @deprecated use `CreateContactRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestExtendPaths$outboundSchema;
  /** @deprecated use `CreateContactRequestExtendPaths$Outbound` instead. */
  export type Outbound = CreateContactRequestExtendPaths$Outbound;
}

export function createContactRequestExtendPathsToJSON(
  createContactRequestExtendPaths: CreateContactRequestExtendPaths,
): string {
  return JSON.stringify(
    CreateContactRequestExtendPaths$outboundSchema.parse(
      createContactRequestExtendPaths,
    ),
  );
}

export function createContactRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const CreateContactRequestPassThrough$inboundSchema: z.ZodType<
  CreateContactRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => CreateContactRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CreateContactRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CreateContactRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CreateContactRequestPassThrough$outboundSchema: z.ZodType<
  CreateContactRequestPassThrough$Outbound,
  z.ZodTypeDef,
  CreateContactRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => CreateContactRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequestPassThrough$ {
  /** @deprecated use `CreateContactRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequestPassThrough$inboundSchema;
  /** @deprecated use `CreateContactRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequestPassThrough$outboundSchema;
  /** @deprecated use `CreateContactRequestPassThrough$Outbound` instead. */
  export type Outbound = CreateContactRequestPassThrough$Outbound;
}

export function createContactRequestPassThroughToJSON(
  createContactRequestPassThrough: CreateContactRequestPassThrough,
): string {
  return JSON.stringify(
    CreateContactRequestPassThrough$outboundSchema.parse(
      createContactRequestPassThrough,
    ),
  );
}

export function createContactRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const CreateContactRequest$inboundSchema: z.ZodType<
  CreateContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  type: z.nullable(Type$inboundSchema).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(Gender$inboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => CreateContactRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CreateContactRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => CreateContactRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => CreateContactRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => CreateContactRequestEmails$inboundSchema))
    .optional(),
  email_domain: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => CreateContactRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunity_ids: z.array(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => CreateContactRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "company_id": "companyId",
    "company_name": "companyName",
    "lead_id": "leadId",
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "photo_url": "photoUrl",
    "lead_source": "leadSource",
    "current_balance": "currentBalance",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "email_domain": "emailDomain",
    "custom_fields": "customFields",
    "opportunity_ids": "opportunityIds",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CreateContactRequest$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<CreateContactRequestWebsites$Outbound> | undefined;
  addresses?: Array<CreateContactRequestAddresses$Outbound> | undefined;
  social_links?: Array<CreateContactRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<CreateContactRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<CreateContactRequestEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<CreateContactRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<CreateContactRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const CreateContactRequest$outboundSchema: z.ZodType<
  CreateContactRequest$Outbound,
  z.ZodTypeDef,
  CreateContactRequest
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(Type$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(Gender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => CreateContactRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CreateContactRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => CreateContactRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => CreateContactRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => CreateContactRequestEmails$outboundSchema))
    .optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => CreateContactRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => CreateContactRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContactRequest$ {
  /** @deprecated use `CreateContactRequest$inboundSchema` instead. */
  export const inboundSchema = CreateContactRequest$inboundSchema;
  /** @deprecated use `CreateContactRequest$outboundSchema` instead. */
  export const outboundSchema = CreateContactRequest$outboundSchema;
  /** @deprecated use `CreateContactRequest$Outbound` instead. */
  export type Outbound = CreateContactRequest$Outbound;
}

export function createContactRequestToJSON(
  createContactRequest: CreateContactRequest,
): string {
  return JSON.stringify(
    CreateContactRequest$outboundSchema.parse(createContactRequest),
  );
}

export function createContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContactRequest' from JSON`,
  );
}
