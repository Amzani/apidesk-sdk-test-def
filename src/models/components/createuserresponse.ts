/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the newly created user in the CRM system. It serves as the main container for the response data, encapsulating all relevant information about the user resource that was successfully added. The object includes a unique identifier that can be used for future reference or operations on this user.
 */
export type CreateUserResponseUnifiedId = {
  /**
   * The unique identifier assigned to the newly created user in the CRM system. This ID is crucial for referencing the user in subsequent operations, such as updates or deletions, and ensures that each user can be distinctly identified within the system.
   */
  id: string;
};

/**
 * User created
 */
export type CreateUserResponse = {
  /**
   * The HTTP response status code returned by the server, indicating the result of the POST request to add a new user. A successful operation will return a 201 status code, confirming that the user has been created successfully.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, providing a human-readable summary of the outcome of the user addition operation. This typically complements the status code by offering a brief description like 'Created' for a successful request.
   */
  status: string;
  /**
   * The unique Apideck identifier for the service provider handling the request. This ID helps in identifying which service within the Apideck ecosystem processed the user addition operation.
   */
  service: string;
  /**
   * The name of the unified API resource that was targeted by the operation. In this context, it refers to the 'users' resource within the CRM system, indicating that the operation was performed on user data.
   */
  resource: string;
  /**
   * The specific operation that was performed, in this case, 'usersAdd'. This indicates that a new user was added to the CRM system, aligning with the POST request made to the endpoint.
   */
  operation: string;
  /**
   * This object contains the details of the newly created user in the CRM system. It serves as the main container for the response data, encapsulating all relevant information about the user resource that was successfully added. The object includes a unique identifier that can be used for future reference or operations on this user.
   */
  data: CreateUserResponseUnifiedId;
};

/** @internal */
export const CreateUserResponseUnifiedId$inboundSchema: z.ZodType<
  CreateUserResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateUserResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateUserResponseUnifiedId$outboundSchema: z.ZodType<
  CreateUserResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateUserResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserResponseUnifiedId$ {
  /** @deprecated use `CreateUserResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateUserResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateUserResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CreateUserResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateUserResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateUserResponseUnifiedId$Outbound;
}

export function createUserResponseUnifiedIdToJSON(
  createUserResponseUnifiedId: CreateUserResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateUserResponseUnifiedId$outboundSchema.parse(
      createUserResponseUnifiedId,
    ),
  );
}

export function createUserResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateUserResponse$inboundSchema: z.ZodType<
  CreateUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateUserResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateUserResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateUserResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateUserResponse$outboundSchema: z.ZodType<
  CreateUserResponse$Outbound,
  z.ZodTypeDef,
  CreateUserResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateUserResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserResponse$ {
  /** @deprecated use `CreateUserResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserResponse$inboundSchema;
  /** @deprecated use `CreateUserResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserResponse$outboundSchema;
  /** @deprecated use `CreateUserResponse$Outbound` instead. */
  export type Outbound = CreateUserResponse$Outbound;
}

export function createUserResponseToJSON(
  createUserResponse: CreateUserResponse,
): string {
  return JSON.stringify(
    CreateUserResponse$outboundSchema.parse(createUserResponse),
  );
}

export function createUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserResponse' from JSON`,
  );
}
