/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the newly created user in the CRM system. It serves as a container for all relevant information about the user, including their unique identifier. The structure is defined by the CRM's user schema and is essential for confirming the successful addition of the user.
 */
export type CreateUserResponseUnifiedId = {
  /**
   * The unique identifier assigned to the newly created user in the CRM. This string is crucial for referencing the user in future operations, such as updates or deletions. It confirms the successful creation of the user and is returned as part of the response to ensure the operation's success.
   */
  id: string;
};

/**
 * User created
 */
export type CreateUserResponse = {
  /**
   * The HTTP response status code indicating the result of the user addition operation. A value of 201 confirms that the user was successfully created in the CRM system. This integer value is crucial for error handling and debugging.
   */
  statusCode: number;
  /**
   * A string representation of the HTTP response status, such as 'Created' for a successful user addition. This provides a human-readable confirmation of the operation's outcome, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for this operation. This string helps identify which service handled the user creation, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource involved in the operation, typically 'user' for this endpoint. This string indicates the type of resource that was affected by the operation, aiding in tracking and logging.
   */
  resource: string;
  /**
   * The specific operation performed, such as 'create' for adding a new user. This string helps developers understand the action taken by the API, which is essential for auditing and monitoring purposes.
   */
  operation: string;
  /**
   * This object contains the details of the newly created user in the CRM system. It serves as a container for all relevant information about the user, including their unique identifier. The structure is defined by the CRM's user schema and is essential for confirming the successful addition of the user.
   */
  data: CreateUserResponseUnifiedId;
};

/** @internal */
export const CreateUserResponseUnifiedId$inboundSchema: z.ZodType<
  CreateUserResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateUserResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateUserResponseUnifiedId$outboundSchema: z.ZodType<
  CreateUserResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateUserResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserResponseUnifiedId$ {
  /** @deprecated use `CreateUserResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateUserResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateUserResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CreateUserResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateUserResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateUserResponseUnifiedId$Outbound;
}

export function createUserResponseUnifiedIdToJSON(
  createUserResponseUnifiedId: CreateUserResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateUserResponseUnifiedId$outboundSchema.parse(
      createUserResponseUnifiedId,
    ),
  );
}

export function createUserResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateUserResponse$inboundSchema: z.ZodType<
  CreateUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateUserResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateUserResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateUserResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateUserResponse$outboundSchema: z.ZodType<
  CreateUserResponse$Outbound,
  z.ZodTypeDef,
  CreateUserResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateUserResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserResponse$ {
  /** @deprecated use `CreateUserResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserResponse$inboundSchema;
  /** @deprecated use `CreateUserResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserResponse$outboundSchema;
  /** @deprecated use `CreateUserResponse$Outbound` instead. */
  export type Outbound = CreateUserResponse$Outbound;
}

export function createUserResponseToJSON(
  createUserResponse: CreateUserResponse,
): string {
  return JSON.stringify(
    CreateUserResponse$outboundSchema.parse(createUserResponse),
  );
}

export function createUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserResponse' from JSON`,
  );
}
