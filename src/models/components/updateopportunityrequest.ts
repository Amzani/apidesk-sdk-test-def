/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the currency type for the opportunity's financial values, adhering to the ISO 4217 standard. This property is optional and should be used when updating monetary fields to ensure consistency in currency representation across the CRM system.
 */
export const UpdateOpportunityRequestCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Specifies the currency type for the opportunity's financial values, adhering to the ISO 4217 standard. This property is optional and should be used when updating monetary fields to ensure consistency in currency representation across the CRM system.
 */
export type UpdateOpportunityRequestCurrency = ClosedEnum<
  typeof UpdateOpportunityRequestCurrency
>;

export type UpdateOpportunityRequestValue6 = {};

export type UpdateOpportunityRequestValue4 = {};

/**
 * The actual data or value associated with the custom field in the opportunity record. This value should align with the field's intended use and format, providing meaningful information that enhances the opportunity's data set.
 */
export type UpdateOpportunityRequestValue =
  | UpdateOpportunityRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateOpportunityRequestValue6>;

export type UpdateOpportunityRequestCustomFields = {
  /**
   * Unique identifier for the custom field. This ID is necessary to specify which custom field is being updated or added, ensuring that the correct data is associated with the opportunity. It must match an existing custom field ID within the CRM system.
   */
  id: string | null;
  /**
   * The name assigned to a custom field within the opportunity record. This field allows users to label and identify custom data points specific to their business needs. It should be a descriptive string that clearly conveys the purpose of the custom field.
   */
  name?: string | null | undefined;
  /**
   * A detailed explanation of the custom field's purpose and usage within the opportunity record. This description helps users understand the context and significance of the custom field, ensuring it is used appropriately within the CRM system.
   */
  description?: string | null | undefined;
  /**
   * The actual data or value associated with the custom field in the opportunity record. This value should align with the field's intended use and format, providing meaningful information that enhances the opportunity's data set.
   */
  value?:
    | UpdateOpportunityRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateOpportunityRequestValue6>
    | null
    | undefined;
};

export type UpdateOpportunityRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the opportunity record where the value should be applied. This path must be valid and correctly formatted to ensure the update is applied to the intended data field.
   */
  path: string;
  /**
   * Specifies the new value to be assigned at the designated path within the opportunity record. This property is essential for updating specific fields of an opportunity, allowing for dynamic modifications based on business needs. The value can be of any data type, ensuring flexibility in updating various field types within the CRM system.
   */
  value?: any | undefined;
};

export type UpdateOpportunityRequestPassThrough = {
  /**
   * The unique identifier for the service to which this pass_through should be applied. This string must match an existing service ID within the CRM system, ensuring the operation targets the correct service for updating the opportunity record.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that this pass_through should be applied to. This is particularly useful when the Unify application makes multiple downstream requests, allowing developers to specify which operation to target.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties within the opportunity record. This object can include any additional fields that need to be updated or added, providing a customizable way to enhance the opportunity data.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. Each object in the array should define a path and the corresponding value to be applied, enabling precise updates to nested data structures within the opportunity record.
   */
  extendPaths?: Array<UpdateOpportunityRequestExtendPaths> | undefined;
};

export type UpdateOpportunityRequest = {
  /**
   * The title or name of the opportunity. This field is required and should be a concise, descriptive label that identifies the opportunity within the CRM system. It helps in quickly recognizing and differentiating between various opportunities in the sales pipeline.
   */
  title: string;
  /**
   * The unique identifier of the primary contact associated with the opportunity. This required field links the opportunity to a specific contact, ensuring that communications and interactions are properly tracked and managed within the CRM.
   */
  primaryContactId: string | null;
  /**
   * A detailed description of the opportunity, providing additional context or notes. This optional field can include any relevant information that helps in understanding the nature and specifics of the opportunity, aiding in better management and tracking.
   */
  description?: string | null | undefined;
  /**
   * The type of the opportunity, such as 'new business' or 'renewal'. This optional field helps categorize the opportunity, allowing for more organized tracking and reporting within the CRM system.
   */
  type?: string | null | undefined;
  /**
   * The monetary value associated with the opportunity, representing its potential revenue. This optional field should be a numeric value that helps in forecasting and analyzing the financial impact of the opportunity on the sales pipeline.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Specifies the currency type for the opportunity's financial values, adhering to the ISO 4217 standard. This property is optional and should be used when updating monetary fields to ensure consistency in currency representation across the CRM system.
   */
  currency?: UpdateOpportunityRequestCurrency | null | undefined;
  /**
   * Represents the likelihood of successfully closing the opportunity, expressed as a percentage from 0 to 100. This optional field helps in forecasting and prioritizing sales efforts based on the probability of winning.
   */
  winProbability?: number | null | undefined;
  /**
   * Denotes the date when the opportunity was finalized, formatted as an ISO 8601 date string. If this field is left null, it indicates that the opportunity is still open and has not yet reached a conclusion.
   */
  closeDate?: RFCDate | null | undefined;
  /**
   * Identifies the specific reason for losing the opportunity using a unique identifier. This optional field is crucial for analyzing lost opportunities and improving future sales strategies.
   */
  lossReasonId?: string | null | undefined;
  /**
   * Provides a textual explanation for why the opportunity was lost. This optional field complements the loss_reason_id by offering a human-readable reason, aiding in qualitative analysis of sales outcomes.
   */
  lossReason?: string | null | undefined;
  /**
   * The unique identifier for the reason an opportunity was won. This optional field should be a valid string that corresponds to a predefined reason in the CRM system. It helps categorize and analyze the factors contributing to successful sales outcomes.
   */
  wonReasonId?: string | null | undefined;
  /**
   * A descriptive explanation of why the opportunity was won. This optional field allows for a textual description that provides context and insights into the factors leading to the opportunity's success, aiding in qualitative analysis.
   */
  wonReason?: string | null | undefined;
  /**
   * The unique identifier for the pipeline associated with the opportunity. This optional field must be a valid string that matches an existing pipeline in the CRM, ensuring the opportunity is tracked within the correct sales process.
   */
  pipelineId?: string | null | undefined;
  /**
   * The unique identifier for the stage within the pipeline where the opportunity currently resides. This optional field should be a valid string that corresponds to a stage in the specified pipeline, helping to accurately reflect the opportunity's progress.
   */
  pipelineStageId?: string | null | undefined;
  /**
   * The unique identifier for the source from which the opportunity originated. This optional field should be a valid string that links to a predefined source in the CRM, enabling tracking of lead origins and effectiveness of different channels.
   */
  sourceId?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with the opportunity. This property is used to link the opportunity to a specific lead within the CRM system, ensuring accurate tracking of sales activities. It should be a valid string that corresponds to an existing lead ID in the system.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead associated with the opportunity. This property helps categorize and track where the lead originated from, such as 'web', 'referral', or 'advertisement'. It should be a descriptive string that accurately reflects the lead's source.
   */
  leadSource?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with the opportunity. This property is essential for linking the opportunity to a specific contact, facilitating personalized communication and follow-up. It must be a valid string matching an existing contact ID in the CRM.
   */
  contactId?: string | null | undefined;
  /**
   * An array of unique identifiers of all contacts associated with the opportunity. This property allows for associating multiple contacts with a single opportunity, enabling comprehensive tracking of all involved parties. Each entry in the array should be a valid contact ID string.
   */
  contactIds?: Array<string> | undefined;
  /**
   * The unique identifier for the company associated with the opportunity. This ID must be a valid string that corresponds to an existing company record in the CRM. It links the opportunity to the correct company, ensuring accurate tracking and management within the sales pipeline.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company linked to the opportunity. This should be the official business name as registered in the CRM. It helps in identifying the company associated with the opportunity, facilitating better organization and retrieval of opportunity records.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier of the user responsible for managing the opportunity. This ID should match a valid user record in the CRM, ensuring that the opportunity is assigned to the correct owner for follow-up and management.
   */
  ownerId?: string | null | undefined;
  /**
   * Indicates the priority level of the opportunity, such as 'High', 'Medium', or 'Low'. This helps in prioritizing tasks and managing the sales pipeline effectively. Ensure the priority level is consistent with the predefined categories in the CRM system.
   */
  priority?: string | null | undefined;
  /**
   * Represents the current status of the opportunity, such as 'Open', 'Closed', or 'In Progress'. This status helps in tracking the opportunity's progress through the sales pipeline. Ensure the status aligns with the CRM's standard status categories.
   */
  status?: string | null | undefined;
  /**
   * The unique identifier of the current status of the opportunity. This property allows you to update the status of the opportunity, reflecting its current stage in the sales pipeline. It should be a valid status ID that exists within the CRM system, ensuring accurate tracking of the opportunity's progress.
   */
  statusId?: string | null | undefined;
  /**
   * An array of tags associated with the opportunity. Tags are used to categorize and filter opportunities, making it easier to manage and search for specific records. Each tag should be a relevant keyword or phrase that aids in identifying the opportunity's characteristics or status.
   */
  tags?: Array<string> | null | undefined;
  /**
   * An array of custom fields that allow for additional, user-defined data to be associated with the opportunity. Custom fields enable the storage of extra information that is not covered by standard fields, providing flexibility to tailor the CRM to specific business needs.
   */
  customFields?: Array<UpdateOpportunityRequestCustomFields> | undefined;
  /**
   * The timestamp indicating when the opportunity's stage was last updated. This information is crucial for tracking the progression of the opportunity through the sales pipeline. The date and time should be in ISO 8601 format to ensure consistency and accuracy.
   */
  stageLastChangedAt?: Date | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or modifications when updating the opportunity record. This property is useful for integrating additional data that may not be covered by standard fields, ensuring flexibility and extensibility in data handling.
   */
  passThrough?: Array<UpdateOpportunityRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateOpportunityRequestCurrency$inboundSchema: z.ZodNativeEnum<
  typeof UpdateOpportunityRequestCurrency
> = z.nativeEnum(UpdateOpportunityRequestCurrency);

/** @internal */
export const UpdateOpportunityRequestCurrency$outboundSchema: z.ZodNativeEnum<
  typeof UpdateOpportunityRequestCurrency
> = UpdateOpportunityRequestCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestCurrency$ {
  /** @deprecated use `UpdateOpportunityRequestCurrency$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityRequestCurrency$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestCurrency$outboundSchema` instead. */
  export const outboundSchema = UpdateOpportunityRequestCurrency$outboundSchema;
}

/** @internal */
export const UpdateOpportunityRequestValue6$inboundSchema: z.ZodType<
  UpdateOpportunityRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateOpportunityRequestValue6$Outbound = {};

/** @internal */
export const UpdateOpportunityRequestValue6$outboundSchema: z.ZodType<
  UpdateOpportunityRequestValue6$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestValue6$ {
  /** @deprecated use `UpdateOpportunityRequestValue6$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityRequestValue6$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue6$outboundSchema` instead. */
  export const outboundSchema = UpdateOpportunityRequestValue6$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue6$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestValue6$Outbound;
}

export function updateOpportunityRequestValue6ToJSON(
  updateOpportunityRequestValue6: UpdateOpportunityRequestValue6,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestValue6$outboundSchema.parse(
      updateOpportunityRequestValue6,
    ),
  );
}

export function updateOpportunityRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOpportunityRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestValue6' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequestValue4$inboundSchema: z.ZodType<
  UpdateOpportunityRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateOpportunityRequestValue4$Outbound = {};

/** @internal */
export const UpdateOpportunityRequestValue4$outboundSchema: z.ZodType<
  UpdateOpportunityRequestValue4$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestValue4$ {
  /** @deprecated use `UpdateOpportunityRequestValue4$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityRequestValue4$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue4$outboundSchema` instead. */
  export const outboundSchema = UpdateOpportunityRequestValue4$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue4$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestValue4$Outbound;
}

export function updateOpportunityRequestValue4ToJSON(
  updateOpportunityRequestValue4: UpdateOpportunityRequestValue4,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestValue4$outboundSchema.parse(
      updateOpportunityRequestValue4,
    ),
  );
}

export function updateOpportunityRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOpportunityRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestValue4' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequestValue$inboundSchema: z.ZodType<
  UpdateOpportunityRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateOpportunityRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateOpportunityRequestValue6$inboundSchema)),
]);

/** @internal */
export type UpdateOpportunityRequestValue$Outbound =
  | UpdateOpportunityRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateOpportunityRequestValue6$Outbound>;

/** @internal */
export const UpdateOpportunityRequestValue$outboundSchema: z.ZodType<
  UpdateOpportunityRequestValue$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestValue
> = z.union([
  z.lazy(() => UpdateOpportunityRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateOpportunityRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestValue$ {
  /** @deprecated use `UpdateOpportunityRequestValue$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityRequestValue$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue$outboundSchema` instead. */
  export const outboundSchema = UpdateOpportunityRequestValue$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestValue$Outbound;
}

export function updateOpportunityRequestValueToJSON(
  updateOpportunityRequestValue: UpdateOpportunityRequestValue,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestValue$outboundSchema.parse(
      updateOpportunityRequestValue,
    ),
  );
}

export function updateOpportunityRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOpportunityRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestValue' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequestCustomFields$inboundSchema: z.ZodType<
  UpdateOpportunityRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateOpportunityRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateOpportunityRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type UpdateOpportunityRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | UpdateOpportunityRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateOpportunityRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateOpportunityRequestCustomFields$outboundSchema: z.ZodType<
  UpdateOpportunityRequestCustomFields$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateOpportunityRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateOpportunityRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestCustomFields$ {
  /** @deprecated use `UpdateOpportunityRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOpportunityRequestCustomFields$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOpportunityRequestCustomFields$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestCustomFields$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestCustomFields$Outbound;
}

export function updateOpportunityRequestCustomFieldsToJSON(
  updateOpportunityRequestCustomFields: UpdateOpportunityRequestCustomFields,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestCustomFields$outboundSchema.parse(
      updateOpportunityRequestCustomFields,
    ),
  );
}

export function updateOpportunityRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOpportunityRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateOpportunityRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateOpportunityRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateOpportunityRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateOpportunityRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestExtendPaths$ {
  /** @deprecated use `UpdateOpportunityRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOpportunityRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOpportunityRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestExtendPaths$Outbound;
}

export function updateOpportunityRequestExtendPathsToJSON(
  updateOpportunityRequestExtendPaths: UpdateOpportunityRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestExtendPaths$outboundSchema.parse(
      updateOpportunityRequestExtendPaths,
    ),
  );
}

export function updateOpportunityRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOpportunityRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequestPassThrough$inboundSchema: z.ZodType<
  UpdateOpportunityRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateOpportunityRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateOpportunityRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?:
    | Array<UpdateOpportunityRequestExtendPaths$Outbound>
    | undefined;
};

/** @internal */
export const UpdateOpportunityRequestPassThrough$outboundSchema: z.ZodType<
  UpdateOpportunityRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateOpportunityRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestPassThrough$ {
  /** @deprecated use `UpdateOpportunityRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOpportunityRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOpportunityRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestPassThrough$Outbound;
}

export function updateOpportunityRequestPassThroughToJSON(
  updateOpportunityRequestPassThrough: UpdateOpportunityRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestPassThrough$outboundSchema.parse(
      updateOpportunityRequestPassThrough,
    ),
  );
}

export function updateOpportunityRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOpportunityRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequest$inboundSchema: z.ZodType<
  UpdateOpportunityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  primary_contact_id: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(UpdateOpportunityRequestCurrency$inboundSchema)
    .optional(),
  win_probability: z.nullable(z.number()).optional(),
  close_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  loss_reason_id: z.nullable(z.string()).optional(),
  loss_reason: z.nullable(z.string()).optional(),
  won_reason_id: z.nullable(z.string()).optional(),
  won_reason: z.nullable(z.string()).optional(),
  pipeline_id: z.nullable(z.string()).optional(),
  pipeline_stage_id: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  contact_ids: z.array(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  status_id: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_fields: z.array(
    z.lazy(() => UpdateOpportunityRequestCustomFields$inboundSchema),
  ).optional(),
  stage_last_changed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => UpdateOpportunityRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "primary_contact_id": "primaryContactId",
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "close_date": "closeDate",
    "loss_reason_id": "lossReasonId",
    "loss_reason": "lossReason",
    "won_reason_id": "wonReasonId",
    "won_reason": "wonReason",
    "pipeline_id": "pipelineId",
    "pipeline_stage_id": "pipelineStageId",
    "source_id": "sourceId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "contact_id": "contactId",
    "contact_ids": "contactIds",
    "company_id": "companyId",
    "company_name": "companyName",
    "owner_id": "ownerId",
    "status_id": "statusId",
    "custom_fields": "customFields",
    "stage_last_changed_at": "stageLastChangedAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateOpportunityRequest$Outbound = {
  title: string;
  primary_contact_id: string | null;
  description?: string | null | undefined;
  type?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  win_probability?: number | null | undefined;
  close_date?: string | null | undefined;
  loss_reason_id?: string | null | undefined;
  loss_reason?: string | null | undefined;
  won_reason_id?: string | null | undefined;
  won_reason?: string | null | undefined;
  pipeline_id?: string | null | undefined;
  pipeline_stage_id?: string | null | undefined;
  source_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  contact_id?: string | null | undefined;
  contact_ids?: Array<string> | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  owner_id?: string | null | undefined;
  priority?: string | null | undefined;
  status?: string | null | undefined;
  status_id?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  custom_fields?:
    | Array<UpdateOpportunityRequestCustomFields$Outbound>
    | undefined;
  stage_last_changed_at?: string | null | undefined;
  pass_through?:
    | Array<UpdateOpportunityRequestPassThrough$Outbound>
    | undefined;
};

/** @internal */
export const UpdateOpportunityRequest$outboundSchema: z.ZodType<
  UpdateOpportunityRequest$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequest
> = z.object({
  title: z.string(),
  primaryContactId: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(UpdateOpportunityRequestCurrency$outboundSchema)
    .optional(),
  winProbability: z.nullable(z.number()).optional(),
  closeDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  lossReasonId: z.nullable(z.string()).optional(),
  lossReason: z.nullable(z.string()).optional(),
  wonReasonId: z.nullable(z.string()).optional(),
  wonReason: z.nullable(z.string()).optional(),
  pipelineId: z.nullable(z.string()).optional(),
  pipelineStageId: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  contactIds: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  statusId: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customFields: z.array(
    z.lazy(() => UpdateOpportunityRequestCustomFields$outboundSchema),
  ).optional(),
  stageLastChangedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  passThrough: z.array(
    z.lazy(() => UpdateOpportunityRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    primaryContactId: "primary_contact_id",
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    closeDate: "close_date",
    lossReasonId: "loss_reason_id",
    lossReason: "loss_reason",
    wonReasonId: "won_reason_id",
    wonReason: "won_reason",
    pipelineId: "pipeline_id",
    pipelineStageId: "pipeline_stage_id",
    sourceId: "source_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    contactId: "contact_id",
    contactIds: "contact_ids",
    companyId: "company_id",
    companyName: "company_name",
    ownerId: "owner_id",
    statusId: "status_id",
    customFields: "custom_fields",
    stageLastChangedAt: "stage_last_changed_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequest$ {
  /** @deprecated use `UpdateOpportunityRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityRequest$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateOpportunityRequest$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequest$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequest$Outbound;
}

export function updateOpportunityRequestToJSON(
  updateOpportunityRequest: UpdateOpportunityRequest,
): string {
  return JSON.stringify(
    UpdateOpportunityRequest$outboundSchema.parse(updateOpportunityRequest),
  );
}

export function updateOpportunityRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOpportunityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequest' from JSON`,
  );
}
