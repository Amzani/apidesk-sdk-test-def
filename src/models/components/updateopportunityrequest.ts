/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

export type UpdateOpportunityRequestValue6 = {};

export type UpdateOpportunityRequestValue4 = {};

/**
 * The value assigned to the custom field for the opportunity. This property holds the actual data or information that the custom field is meant to capture, allowing for tailored data tracking and analysis. Ensure the value aligns with the intended use of the custom field.
 */
export type UpdateOpportunityRequestValue =
  | UpdateOpportunityRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateOpportunityRequestValue6>;

export type UpdateOpportunityRequestCustomFields = {
  /**
   * The custom_fields.id is a required string that uniquely identifies each custom field within the opportunity. It ensures that the correct custom field is targeted for updates or additions, allowing for precise customization of the opportunity record.
   */
  id: string | null;
  /**
   * The name of the custom field associated with the opportunity. This field allows you to specify a unique identifier or label for custom data points, facilitating better organization and retrieval of opportunity-specific information. It should be a descriptive string that clearly conveys the purpose of the custom field.
   */
  name?: string | null | undefined;
  /**
   * A detailed explanation of the custom field's purpose and usage within the opportunity. This description helps clarify the role of the custom field, ensuring that users understand its relevance and how it fits into the overall opportunity data structure. It should provide enough context to guide users in its application.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field for the opportunity. This property holds the actual data or information that the custom field is meant to capture, allowing for tailored data tracking and analysis. Ensure the value aligns with the intended use of the custom field.
   */
  value?:
    | UpdateOpportunityRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateOpportunityRequestValue6>
    | null
    | undefined;
};

export type UpdateOpportunityRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where the value should be applied. This is required for each entry in the extend_paths array to ensure accurate targeting of data modifications.
   */
  path: string;
  /**
   * This property specifies the new value to be set at the designated path within the opportunity record. It is essential for updating specific fields of an opportunity, allowing for dynamic modifications based on the provided path. The value can be of any type, ensuring flexibility in the types of data that can be updated, such as strings, numbers, or objects.
   */
  value?: any | undefined;
};

export type UpdateOpportunityRequestPassThrough = {
  /**
   * The unique identifier for the service to which this pass-through operation should be applied. This field is mandatory and ensures that the update is directed to the correct service integration, facilitating precise modifications within the CRM system.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that this pass-through should target. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for more granular control over the operation's execution.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties. This can be used to add custom fields or data to the opportunity record, providing a way to tailor the CRM data structure to specific business needs.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. This allows for precise updates to nested data structures within the opportunity record, ensuring that changes are applied exactly where needed.
   */
  extendPaths?: Array<UpdateOpportunityRequestExtendPaths> | undefined;
};

export type UpdateOpportunityRequest = {
  /**
   * The title or name of the opportunity. This field is essential for identifying and distinguishing the opportunity within the CRM system. It must be a non-empty string that clearly represents the opportunity's focus or goal.
   */
  title: string;
  /**
   * The unique identifier of the primary contact associated with the opportunity. This ID links the opportunity to a specific contact, facilitating communication and relationship management. It should be a valid string that corresponds to an existing contact in the CRM.
   */
  primaryContactId?: string | null | undefined;
  /**
   * A description of the opportunity, providing additional context or details about its nature and objectives. This optional field can include any relevant information that helps in understanding the opportunity's scope and potential impact.
   */
  description?: string | null | undefined;
  /**
   * The type of the opportunity, categorizing it within the CRM for better organization and tracking. This field helps in filtering and managing opportunities based on their nature or business context. It should be a descriptive string that aligns with the organization's classification system.
   */
  type?: string | null | undefined;
  /**
   * The monetary value associated with the opportunity, representing its financial potential or worth. This numeric field is crucial for forecasting and assessing the opportunity's impact on revenue. It should be a positive number reflecting the expected financial outcome.
   */
  monetaryAmount?: number | null | undefined;
  currency?: Currency | null | undefined;
  /**
   * Represents the likelihood of successfully closing the opportunity, expressed as a percentage. This value helps prioritize opportunities by indicating their potential success rate. It should be a number between 0 and 100, reflecting the confidence level in winning the deal.
   */
  winProbability?: number | null | undefined;
  /**
   * Denotes the date on which the opportunity was or is expected to be closed. This field is crucial for forecasting and tracking the sales pipeline. If left null, it indicates that the opportunity is still open and active.
   */
  closeDate?: RFCDate | null | undefined;
  /**
   * Identifies the specific reason for losing the opportunity using a unique identifier. This aids in analyzing lost opportunities to improve future sales strategies. It should match a predefined loss reason ID in the system.
   */
  lossReasonId?: string | null | undefined;
  /**
   * Describes the reason why the opportunity was lost in a human-readable format. This information is valuable for understanding sales challenges and refining approaches. It complements the loss_reason_id by providing a descriptive context.
   */
  lossReason?: string | null | undefined;
  /**
   * The unique identifier for the reason an opportunity was won. This field helps categorize and analyze successful sales by linking them to predefined reasons. It should be a valid string that corresponds to an existing reason ID in your CRM system.
   */
  wonReasonId?: string | null | undefined;
  /**
   * A descriptive reason explaining why the opportunity was won. This field provides context and insights into the factors contributing to a successful sale. It should be a clear and concise string that accurately reflects the reason for winning the opportunity.
   */
  wonReason?: string | null | undefined;
  /**
   * The unique identifier for the pipeline associated with the opportunity. This field is used to track the opportunity's progress within a specific sales pipeline. Ensure this is a valid string that matches an existing pipeline ID in your CRM.
   */
  pipelineId?: string | null | undefined;
  /**
   * The unique identifier for the stage within the pipeline where the opportunity currently resides. This field helps in tracking the opportunity's current status and progress. It should be a valid string corresponding to a stage ID within the specified pipeline.
   */
  pipelineStageId?: string | null | undefined;
  /**
   * The unique identifier for the source from which the opportunity originated. This field is crucial for understanding and analyzing the origin of sales opportunities. It must be a valid string that matches an existing source ID in your CRM system.
   */
  sourceId?: string | null | undefined;
  /**
   * The lead_id is used to associate the opportunity with a specific lead in the CRM. This identifier helps in tracking the origin of the opportunity and linking it to the corresponding lead record. It should be a valid string that uniquely identifies the lead within the CRM system.
   */
  leadId?: string | null | undefined;
  /**
   * The lead_source indicates the origin of the lead associated with the opportunity, such as a marketing campaign or referral. This information is crucial for analyzing the effectiveness of different lead generation channels. It should be a descriptive string that clearly identifies the source of the lead.
   */
  leadSource?: string | null | undefined;
  /**
   * The contact_id is used to link the opportunity to a specific contact in the CRM. This identifier ensures that the opportunity is associated with the correct individual, facilitating personalized communication and follow-up. It must be a valid string that uniquely identifies the contact within the CRM.
   */
  contactId?: string | null | undefined;
  /**
   * The contact_ids array contains unique identifiers for all contacts associated with the opportunity. This allows for the opportunity to be linked to multiple contacts, enabling comprehensive tracking of all involved parties. Each entry in the array should be a valid string representing a contact's unique ID.
   */
  contactIds?: Array<string> | undefined;
  /**
   * The company_id is used to specify the unique identifier of the company linked to the opportunity being updated. This field helps in associating the opportunity with the correct company record in the CRM. It should be a valid string that matches an existing company ID in the system.
   */
  companyId?: string | null | undefined;
  /**
   * The company_name represents the name of the company associated with the opportunity. This field is used to update or verify the company name linked to the opportunity, ensuring accurate representation in the CRM. It should be a valid string reflecting the company's current name.
   */
  companyName?: string | null | undefined;
  /**
   * The owner_id specifies the unique identifier of the user responsible for managing the opportunity. This field is crucial for assigning or updating the ownership of the opportunity within the CRM, ensuring accountability and proper tracking. It must be a valid string corresponding to an existing user ID.
   */
  ownerId?: string | null | undefined;
  /**
   * The priority field indicates the importance level of the opportunity. This property helps in prioritizing opportunities within the CRM, allowing users to focus on high-priority opportunities first. It should be a valid string that reflects the current priority status of the opportunity.
   */
  priority?: string | null | undefined;
  /**
   * The status field represents the current state of the opportunity in the sales process. This property is essential for tracking the progress and lifecycle of the opportunity within the CRM. It should be a valid string that accurately reflects the opportunity's current status.
   */
  status?: string | null | undefined;
  /**
   * The status_id represents the unique identifier for the current status of the opportunity. It allows you to update the opportunity's status, reflecting its progress in the sales pipeline. This field is optional and should be a valid string that corresponds to an existing status within your CRM system.
   */
  statusId?: string | null | undefined;
  /**
   * The tags property is an array that allows you to associate multiple tags with the opportunity. Tags are useful for categorizing and filtering opportunities based on specific criteria or characteristics. This field is optional and can include any number of string elements representing individual tags.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The custom_fields property is an array that allows you to include additional, user-defined fields for the opportunity. This feature enables customization and extension of the opportunity record to meet specific business needs. Each entry in the array must include a valid custom field identifier and value.
   */
  customFields?: Array<UpdateOpportunityRequestCustomFields> | undefined;
  /**
   * The timestamp indicating when the opportunity's stage was last updated. This property is crucial for tracking the progression of the opportunity through different stages, aiding in historical analysis and reporting. It should be formatted as an ISO 8601 date-time string to ensure consistency and accuracy.
   */
  stageLastChangedAt?: Date | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or modifications when updating the opportunity. This property is useful for passing additional parameters that are not part of the standard API fields, enabling more flexible and tailored integrations. Each element in the array should conform to the expected structure of the target service.
   */
  passThrough?: Array<UpdateOpportunityRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateOpportunityRequestValue6$inboundSchema: z.ZodType<
  UpdateOpportunityRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateOpportunityRequestValue6$Outbound = {};

/** @internal */
export const UpdateOpportunityRequestValue6$outboundSchema: z.ZodType<
  UpdateOpportunityRequestValue6$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestValue6$ {
  /** @deprecated use `UpdateOpportunityRequestValue6$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityRequestValue6$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue6$outboundSchema` instead. */
  export const outboundSchema = UpdateOpportunityRequestValue6$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue6$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestValue6$Outbound;
}

export function updateOpportunityRequestValue6ToJSON(
  updateOpportunityRequestValue6: UpdateOpportunityRequestValue6,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestValue6$outboundSchema.parse(
      updateOpportunityRequestValue6,
    ),
  );
}

export function updateOpportunityRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOpportunityRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestValue6' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequestValue4$inboundSchema: z.ZodType<
  UpdateOpportunityRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateOpportunityRequestValue4$Outbound = {};

/** @internal */
export const UpdateOpportunityRequestValue4$outboundSchema: z.ZodType<
  UpdateOpportunityRequestValue4$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestValue4$ {
  /** @deprecated use `UpdateOpportunityRequestValue4$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityRequestValue4$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue4$outboundSchema` instead. */
  export const outboundSchema = UpdateOpportunityRequestValue4$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue4$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestValue4$Outbound;
}

export function updateOpportunityRequestValue4ToJSON(
  updateOpportunityRequestValue4: UpdateOpportunityRequestValue4,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestValue4$outboundSchema.parse(
      updateOpportunityRequestValue4,
    ),
  );
}

export function updateOpportunityRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOpportunityRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestValue4' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequestValue$inboundSchema: z.ZodType<
  UpdateOpportunityRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateOpportunityRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateOpportunityRequestValue6$inboundSchema)),
]);

/** @internal */
export type UpdateOpportunityRequestValue$Outbound =
  | UpdateOpportunityRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateOpportunityRequestValue6$Outbound>;

/** @internal */
export const UpdateOpportunityRequestValue$outboundSchema: z.ZodType<
  UpdateOpportunityRequestValue$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestValue
> = z.union([
  z.lazy(() => UpdateOpportunityRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateOpportunityRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestValue$ {
  /** @deprecated use `UpdateOpportunityRequestValue$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityRequestValue$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue$outboundSchema` instead. */
  export const outboundSchema = UpdateOpportunityRequestValue$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestValue$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestValue$Outbound;
}

export function updateOpportunityRequestValueToJSON(
  updateOpportunityRequestValue: UpdateOpportunityRequestValue,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestValue$outboundSchema.parse(
      updateOpportunityRequestValue,
    ),
  );
}

export function updateOpportunityRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOpportunityRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestValue' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequestCustomFields$inboundSchema: z.ZodType<
  UpdateOpportunityRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateOpportunityRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateOpportunityRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type UpdateOpportunityRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | UpdateOpportunityRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateOpportunityRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateOpportunityRequestCustomFields$outboundSchema: z.ZodType<
  UpdateOpportunityRequestCustomFields$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateOpportunityRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateOpportunityRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestCustomFields$ {
  /** @deprecated use `UpdateOpportunityRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOpportunityRequestCustomFields$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOpportunityRequestCustomFields$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestCustomFields$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestCustomFields$Outbound;
}

export function updateOpportunityRequestCustomFieldsToJSON(
  updateOpportunityRequestCustomFields: UpdateOpportunityRequestCustomFields,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestCustomFields$outboundSchema.parse(
      updateOpportunityRequestCustomFields,
    ),
  );
}

export function updateOpportunityRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOpportunityRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateOpportunityRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateOpportunityRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateOpportunityRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateOpportunityRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestExtendPaths$ {
  /** @deprecated use `UpdateOpportunityRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOpportunityRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOpportunityRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestExtendPaths$Outbound;
}

export function updateOpportunityRequestExtendPathsToJSON(
  updateOpportunityRequestExtendPaths: UpdateOpportunityRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestExtendPaths$outboundSchema.parse(
      updateOpportunityRequestExtendPaths,
    ),
  );
}

export function updateOpportunityRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOpportunityRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequestPassThrough$inboundSchema: z.ZodType<
  UpdateOpportunityRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateOpportunityRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateOpportunityRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?:
    | Array<UpdateOpportunityRequestExtendPaths$Outbound>
    | undefined;
};

/** @internal */
export const UpdateOpportunityRequestPassThrough$outboundSchema: z.ZodType<
  UpdateOpportunityRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateOpportunityRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequestPassThrough$ {
  /** @deprecated use `UpdateOpportunityRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOpportunityRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOpportunityRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequestPassThrough$Outbound;
}

export function updateOpportunityRequestPassThroughToJSON(
  updateOpportunityRequestPassThrough: UpdateOpportunityRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateOpportunityRequestPassThrough$outboundSchema.parse(
      updateOpportunityRequestPassThrough,
    ),
  );
}

export function updateOpportunityRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOpportunityRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityRequest$inboundSchema: z.ZodType<
  UpdateOpportunityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  primary_contact_id: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  win_probability: z.nullable(z.number()).optional(),
  close_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  loss_reason_id: z.nullable(z.string()).optional(),
  loss_reason: z.nullable(z.string()).optional(),
  won_reason_id: z.nullable(z.string()).optional(),
  won_reason: z.nullable(z.string()).optional(),
  pipeline_id: z.nullable(z.string()).optional(),
  pipeline_stage_id: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  contact_ids: z.array(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  status_id: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_fields: z.array(
    z.lazy(() => UpdateOpportunityRequestCustomFields$inboundSchema),
  ).optional(),
  stage_last_changed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => UpdateOpportunityRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "primary_contact_id": "primaryContactId",
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "close_date": "closeDate",
    "loss_reason_id": "lossReasonId",
    "loss_reason": "lossReason",
    "won_reason_id": "wonReasonId",
    "won_reason": "wonReason",
    "pipeline_id": "pipelineId",
    "pipeline_stage_id": "pipelineStageId",
    "source_id": "sourceId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "contact_id": "contactId",
    "contact_ids": "contactIds",
    "company_id": "companyId",
    "company_name": "companyName",
    "owner_id": "ownerId",
    "status_id": "statusId",
    "custom_fields": "customFields",
    "stage_last_changed_at": "stageLastChangedAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateOpportunityRequest$Outbound = {
  title: string;
  primary_contact_id?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  win_probability?: number | null | undefined;
  close_date?: string | null | undefined;
  loss_reason_id?: string | null | undefined;
  loss_reason?: string | null | undefined;
  won_reason_id?: string | null | undefined;
  won_reason?: string | null | undefined;
  pipeline_id?: string | null | undefined;
  pipeline_stage_id?: string | null | undefined;
  source_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  contact_id?: string | null | undefined;
  contact_ids?: Array<string> | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  owner_id?: string | null | undefined;
  priority?: string | null | undefined;
  status?: string | null | undefined;
  status_id?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  custom_fields?:
    | Array<UpdateOpportunityRequestCustomFields$Outbound>
    | undefined;
  stage_last_changed_at?: string | null | undefined;
  pass_through?:
    | Array<UpdateOpportunityRequestPassThrough$Outbound>
    | undefined;
};

/** @internal */
export const UpdateOpportunityRequest$outboundSchema: z.ZodType<
  UpdateOpportunityRequest$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityRequest
> = z.object({
  title: z.string(),
  primaryContactId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  winProbability: z.nullable(z.number()).optional(),
  closeDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  lossReasonId: z.nullable(z.string()).optional(),
  lossReason: z.nullable(z.string()).optional(),
  wonReasonId: z.nullable(z.string()).optional(),
  wonReason: z.nullable(z.string()).optional(),
  pipelineId: z.nullable(z.string()).optional(),
  pipelineStageId: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  contactIds: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  statusId: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customFields: z.array(
    z.lazy(() => UpdateOpportunityRequestCustomFields$outboundSchema),
  ).optional(),
  stageLastChangedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  passThrough: z.array(
    z.lazy(() => UpdateOpportunityRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    primaryContactId: "primary_contact_id",
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    closeDate: "close_date",
    lossReasonId: "loss_reason_id",
    lossReason: "loss_reason",
    wonReasonId: "won_reason_id",
    wonReason: "won_reason",
    pipelineId: "pipeline_id",
    pipelineStageId: "pipeline_stage_id",
    sourceId: "source_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    contactId: "contact_id",
    contactIds: "contact_ids",
    companyId: "company_id",
    companyName: "company_name",
    ownerId: "owner_id",
    statusId: "status_id",
    customFields: "custom_fields",
    stageLastChangedAt: "stage_last_changed_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityRequest$ {
  /** @deprecated use `UpdateOpportunityRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityRequest$inboundSchema;
  /** @deprecated use `UpdateOpportunityRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateOpportunityRequest$outboundSchema;
  /** @deprecated use `UpdateOpportunityRequest$Outbound` instead. */
  export type Outbound = UpdateOpportunityRequest$Outbound;
}

export function updateOpportunityRequestToJSON(
  updateOpportunityRequest: UpdateOpportunityRequest,
): string {
  return JSON.stringify(
    UpdateOpportunityRequest$outboundSchema.parse(updateOpportunityRequest),
  );
}

export function updateOpportunityRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOpportunityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityRequest' from JSON`,
  );
}
