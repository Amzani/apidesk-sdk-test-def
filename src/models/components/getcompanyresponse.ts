/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The currency code associated with the company's financial transactions, following the ISO 4217 standard. This string helps in understanding the monetary context of the company's operations, ensuring accurate financial reporting and processing.
 */
export const GetCompanyResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * The currency code associated with the company's financial transactions, following the ISO 4217 standard. This string helps in understanding the monetary context of the company's operations, ensuring accurate financial reporting and processing.
 */
export type GetCompanyResponseCurrency = ClosedEnum<
  typeof GetCompanyResponseCurrency
>;

/**
 * The classification of the company's bank account, such as 'savings', 'checking', or 'business'. This indicates the nature of the account and its intended use, which can affect transaction limits and fees.
 */
export const GetCompanyResponseAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The classification of the company's bank account, such as 'savings', 'checking', or 'business'. This indicates the nature of the account and its intended use, which can affect transaction limits and fees.
 */
export type GetCompanyResponseAccountType = ClosedEnum<
  typeof GetCompanyResponseAccountType
>;

/**
 * The currency property indicates the type of currency associated with the company's bank account, following the ISO 4217 standard. It specifies the currency in which transactions are conducted and balances are maintained. This property is part of the response when financial details are requested for the company.
 */
export const GetCompanyResponseDataCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * The currency property indicates the type of currency associated with the company's bank account, following the ISO 4217 standard. It specifies the currency in which transactions are conducted and balances are maintained. This property is part of the response when financial details are requested for the company.
 */
export type GetCompanyResponseDataCurrency = ClosedEnum<
  typeof GetCompanyResponseDataCurrency
>;

export type GetCompanyResponseBankAccounts = {
  /**
   * The name of the bank where the company's account is held. This is part of the bank account details and is used for financial transactions and verifications. The value is a string and may be empty if the bank name is not specified.
   */
  bankName?: string | null | undefined;
  /**
   * The bank account number associated with the company's bank account. This number is unique to each account and is used for transactions and identification purposes. It is typically a string of digits and may vary in length depending on the bank's requirements.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name under which the company's bank account is registered. This is usually the official name of the company or the name of the account holder, and it helps in identifying the account during transactions.
   */
  accountName?: string | null | undefined;
  /**
   * The classification of the company's bank account, such as 'savings', 'checking', or 'business'. This indicates the nature of the account and its intended use, which can affect transaction limits and fees.
   */
  accountType?: GetCompanyResponseAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN) for the company's bank account. This standardized format is used internationally to identify bank accounts across borders, ensuring smooth international transactions. It typically includes the country code, bank code, and account number.
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC), also known as the SWIFT code, for the company's bank account. This code is used to identify the bank in international transactions, ensuring that funds are transferred to the correct financial institution. It is usually 8 or 11 characters long.
   */
  bic?: string | null | undefined;
  /**
   * The routing number is a nine-digit code used to identify a financial institution within the United States. It is essential for processing domestic transfers and payments. This property is included in the response when the company's bank account details are requested.
   */
  routingNumber?: string | null | undefined;
  /**
   * The BSB number is a six-digit code used to identify the branch of a bank or financial institution in Australia or New Zealand. It is crucial for facilitating local transactions and payments. This property appears in the response when the company's bank account details are relevant to these regions.
   */
  bsbNumber?: string | null | undefined;
  /**
   * The branch identifier uniquely identifies a specific branch of a bank or financial institution. It is used to ensure that transactions are routed to the correct branch. This property is part of the response when detailed bank account information is requested for the company.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * The bank code is a unique code assigned to banks or financial institutions by a central authority or banking association within a country. It is used to identify the bank in financial transactions. This property is included in the response when the company's bank account details are needed for processing.
   */
  bankCode?: string | null | undefined;
  /**
   * The currency property indicates the type of currency associated with the company's bank account, following the ISO 4217 standard. It specifies the currency in which transactions are conducted and balances are maintained. This property is part of the response when financial details are requested for the company.
   */
  currency?: GetCompanyResponseDataCurrency | null | undefined;
};

/**
 * A string indicating the type of website, such as 'corporate', 'e-commerce', or 'blog'. This helps categorize the website's purpose or function within the company's digital strategy.
 */
export const GetCompanyResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * A string indicating the type of website, such as 'corporate', 'e-commerce', or 'blog'. This helps categorize the website's purpose or function within the company's digital strategy.
 */
export type GetCompanyResponseType = ClosedEnum<typeof GetCompanyResponseType>;

export type GetCompanyResponseWebsites = {
  /**
   * A unique string identifier for each website entry within the company's website array. This ID is used to distinguish between different websites associated with the company.
   */
  id?: string | null | undefined;
  /**
   * The URL of the company's website, provided as a string. This is a mandatory field and represents the web address where the company's online presence can be accessed.
   */
  url: string;
  /**
   * A string indicating the type of website, such as 'corporate', 'e-commerce', or 'blog'. This helps categorize the website's purpose or function within the company's digital strategy.
   */
  type?: GetCompanyResponseType | null | undefined;
};

/**
 * Indicates the category or purpose of the address, such as 'billing', 'shipping', or 'office'. This helps in identifying the role of the address within the company's operations. The value is expected to be a descriptive string.
 */
export const GetCompanyResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Indicates the category or purpose of the address, such as 'billing', 'shipping', or 'office'. This helps in identifying the role of the address within the company's operations. The value is expected to be a descriptive string.
 */
export type GetCompanyResponseDataType = ClosedEnum<
  typeof GetCompanyResponseDataType
>;

export type GetCompanyResponseAddresses = {
  /**
   * A unique identifier assigned to each address associated with the company. This ID is used to distinguish between different addresses within the company's profile. It is typically a non-empty string when an address is present.
   */
  id?: string | null | undefined;
  /**
   * Indicates the category or purpose of the address, such as 'billing', 'shipping', or 'office'. This helps in identifying the role of the address within the company's operations. The value is expected to be a descriptive string.
   */
  type?: GetCompanyResponseDataType | null | undefined;
  /**
   * Represents the full address as a single string, which may include street, city, state, and postal code. This format is used when structured address components are not available. It provides a complete address in a single field for easy display.
   */
  string?: string | null | undefined;
  /**
   * The designated name or label for the address, which might be used for internal reference or display purposes. This could be a branch name or a specific location identifier within the company.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically containing the street number, street name, and any suite or apartment number. This is a crucial part of the address used for mailing and identification purposes.
   */
  line1?: string | null | undefined;
  /**
   * This property contains the second line of the company's address, which may include additional location details such as suite numbers or building identifiers. It is returned as a string and is optional, meaning it may not be present if the address does not require a second line. This field helps provide a more complete address for mailing or location purposes.
   */
  line2?: string | null | undefined;
  /**
   * This property holds the third line of the company's address, often used for further address details like floor numbers or specific department names. It is an optional string field, included only when necessary to provide additional address information. This enhances the precision of the address in the CRM system.
   */
  line3?: string | null | undefined;
  /**
   * The fourth line of the company's address, used for any extra address information that does not fit in the previous lines. This optional string field is included in the response when additional address details are needed. It ensures comprehensive address data is available for accurate location identification.
   */
  line4?: string | null | undefined;
  /**
   * This property specifies the street number of the company's address, typically representing the building or house number. It is returned as a string and is optional, as some addresses may not have a distinct street number. This field is crucial for pinpointing the exact location of the company.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name where the company is located, provided as a string. This optional field is part of the address details and is essential for identifying the geographical location of the company within the CRM. It helps in categorizing and filtering companies based on their city location.
   */
  city?: string | null | undefined;
  /**
   * The name of the state or region where the company is located. This is part of the company's address details and is returned as a string. It helps in identifying the geographical location of the company within a country.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code associated with the company's address. This string value is used for mail delivery and location identification within the state or region. It is an essential part of the address for logistical purposes.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the company's location, formatted according to the ISO 3166-1 alpha-2 standard. This two-letter string helps in identifying the country in which the company operates, crucial for international operations and compliance.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the company's address, represented as a string. This value is part of the geographical coordinates used to pinpoint the exact location of the company on a map.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the company's address, provided as a string. Along with latitude, this value helps in determining the precise geographical location of the company for mapping and navigation purposes.
   */
  longitude?: string | null | undefined;
  /**
   * This property contains the name of the county or sublocality associated with the company's address. It is typically a string value that helps in identifying the geographical area within a larger region. This information is useful for applications that need to display or process location-specific data.
   */
  county?: string | null | undefined;
  /**
   * The contact_name property holds the full name of the primary contact person at the specified address. This string value is essential for personalizing communications and ensuring that correspondence is directed to the correct individual within the company.
   */
  contactName?: string | null | undefined;
  /**
   * This property represents the salutation or title used for the contact person at the address, such as 'Mr.', 'Ms.', or 'Dr.'. It is a string value that helps in formal communication and is often used in conjunction with the contact name.
   */
  salutation?: string | null | undefined;
  /**
   * The phone_number property contains the primary telephone number associated with the address. This string value is crucial for direct communication and may include country and area codes to ensure proper dialing from different regions.
   */
  phoneNumber?: string | null | undefined;
  /**
   * This property holds the fax number for the address, formatted as a string. Although less commonly used today, it is important for businesses that still rely on fax communications for sending and receiving documents.
   */
  fax?: string | null | undefined;
  /**
   * This property contains the email address associated with the company's address. It is expected to be in a standard email format (e.g., user@example.com) and may be used for communication purposes or as a point of contact. This field is optional and may not be present if the company has not provided an email address.
   */
  email?: string | null | undefined;
  /**
   * This property holds the URL of the company's website linked to the address. The format should be a valid URL (e.g., https://www.example.com) and can be used to direct users to the company's online presence. This field is optional and may not be included if the company does not have a website.
   */
  website?: string | null | undefined;
  /**
   * This property includes any additional notes related to the company's address. It can contain miscellaneous information that might be relevant for understanding the context of the address, such as delivery instructions or historical data. This field is optional and may be empty if no notes are provided.
   */
  notes?: string | null | undefined;
  /**
   * This property represents a binary value used to track changes to the address object, ensuring data integrity by preventing conflicts during updates. It is automatically incremented with each modification to the address, serving as a version control mechanism. This field is optional and primarily used for internal data management processes.
   */
  rowVersion?: string | null | undefined;
};

export type GetCompanyResponseSocialLinks = {
  /**
   * A unique identifier assigned to each social link associated with the company. This identifier is used internally to distinguish between different social links and is not typically displayed to end-users.
   */
  id?: string | null | undefined;
  /**
   * The full URL of the company's social media profile or page. This is a mandatory field and should be a valid URL format, such as 'https://www.twitter.com/apideck'. It allows applications to link directly to the company's social media presence.
   */
  url: string;
  /**
   * Specifies the type of social media platform associated with the URL, such as 'twitter', 'facebook', or 'linkedin'. This helps categorize the social link and can be used to display appropriate icons or labels in user interfaces.
   */
  type?: string | null | undefined;
};

/**
 * This property indicates the type of phone number provided, such as 'mobile', 'landline', or 'fax'. It helps in understanding the nature of the contact method and is optional, allowing flexibility in how phone numbers are categorized in the CRM.
 */
export const GetCompanyResponseDataPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * This property indicates the type of phone number provided, such as 'mobile', 'landline', or 'fax'. It helps in understanding the nature of the contact method and is optional, allowing flexibility in how phone numbers are categorized in the CRM.
 */
export type GetCompanyResponseDataPhoneNumbersType = ClosedEnum<
  typeof GetCompanyResponseDataPhoneNumbersType
>;

export type GetCompanyResponsePhoneNumbers = {
  /**
   * A unique identifier for each phone number associated with the company. This ID is used to manage and reference specific phone numbers within the system, ensuring accurate updates and retrievals.
   */
  id?: string | null | undefined;
  /**
   * This property contains the international dialing code associated with the company's phone number, such as '+1' for the United States. It is used to ensure the phone number can be dialed from outside the country. This field is optional and may not be present if the country code is not specified in the CRM.
   */
  countryCode?: string | null | undefined;
  /**
   * This property represents the area code part of the company's phone number, like '323' for Los Angeles. It helps in identifying the specific geographic region within a country. This field is optional and may be omitted if the area code is not applicable or recorded in the CRM.
   */
  areaCode?: string | null | undefined;
  /**
   * This property holds the main phone number of the company, excluding the country and area codes. It is a required field and must be provided to ensure the phone number is complete and can be used to contact the company directly.
   */
  number: string;
  /**
   * This property specifies the extension number for the company's phone line, which directs calls to a specific department or individual within the organization. It is optional and may not be included if the company does not use extensions.
   */
  extension?: string | null | undefined;
  /**
   * This property indicates the type of phone number provided, such as 'mobile', 'landline', or 'fax'. It helps in understanding the nature of the contact method and is optional, allowing flexibility in how phone numbers are categorized in the CRM.
   */
  type?: GetCompanyResponseDataPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This optional string helps categorize the email addresses for better organization and retrieval in the CRM.
 */
export const GetCompanyResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This optional string helps categorize the email addresses for better organization and retrieval in the CRM.
 */
export type GetCompanyResponseDataEmailsType = ClosedEnum<
  typeof GetCompanyResponseDataEmailsType
>;

export type GetCompanyResponseEmails = {
  /**
   * A unique identifier for each email address associated with the company. This string is used to distinguish between different email entries within the company's email array, facilitating precise data management and updates.
   */
  id?: string | null | undefined;
  /**
   * The actual email address linked to the company. This string is required for each email entry and is used for communication and identification purposes within the CRM system.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work', 'personal', or 'other'. This optional string helps categorize the email addresses for better organization and retrieval in the CRM.
   */
  type?: GetCompanyResponseDataEmailsType | null | undefined;
};

/**
 * An object representing the type of data row, which may include metadata or additional attributes related to the company record. This object is optional and its structure can vary depending on the CRM's configuration and the specific data model used.
 */
export type GetCompanyResponseCompanyRowType = {
  /**
   * A unique identifier representing the type of company record. This string value helps categorize the company within the CRM system, aiding in filtering and organization of company data.
   */
  id?: string | null | undefined;
  /**
   * The name of the company record type, indicating the classification or category of the company within the CRM. This string provides context for understanding the company's role or status in the system.
   */
  name?: string | null | undefined;
};

export type GetCompanyResponseValue6 = {};

export type GetCompanyResponseValue4 = {};

/**
 * The value assigned to the custom field for the company. This string can represent various types of data depending on the custom field's purpose, such as a date, number, or text, providing flexibility in data storage.
 */
export type GetCompanyResponseValue =
  | GetCompanyResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<GetCompanyResponseValue6>;

export type GetCompanyResponseCustomFields = {
  /**
   * A unique identifier for each custom field associated with the company. This string is essential for distinguishing between different custom fields and managing them effectively within the CRM.
   */
  id: string | null;
  /**
   * The name assigned to each custom field, providing a human-readable label for the data it represents. This string helps users identify the purpose or content of the custom field within the company's data structure.
   */
  name?: string | null | undefined;
  /**
   * This property contains additional information about a custom field associated with the company. It is a string that provides context or details that are not covered by standard fields, allowing for more tailored data representation.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field for the company. This string can represent various types of data depending on the custom field's purpose, such as a date, number, or text, providing flexibility in data storage.
   */
  value?:
    | GetCompanyResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<GetCompanyResponseValue6>
    | null
    | undefined;
};

/**
 * An object containing any custom field mappings that have been configured for the company resource. This allows for the inclusion of additional, user-defined data fields that extend the standard company information returned by the API.
 */
export type GetCompanyResponseCustomMappings = {};

export type GetCompanyResponseExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where a value should be applied. This path is essential for precise data manipulation, enabling developers to target specific elements within the company's data.
   */
  path: string;
  /**
   * This property holds the specific value that is set at a designated path within the company's data structure. The value can be of any data type, such as a string, number, object, or array, depending on the context in which it is used. It is crucial for dynamically updating or retrieving nested data fields within the company's record, ensuring flexibility in data management.
   */
  value?: any | undefined;
};

export type GetCompanyResponsePassThrough = {
  /**
   * The unique identifier for the service to which this pass-through operation should be applied. This string is crucial for routing the request to the correct service within the CRM system, ensuring that the company data is fetched from the appropriate source.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that this pass-through should target. This string is particularly useful when the Unify application makes multiple downstream requests, allowing developers to specify which operation the data pertains to.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the inclusion of any additional properties needed to extend the functionality of the pass-through operation. This object can be customized to fit specific requirements, providing a way to enhance the data retrieval process.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. Each object in the array represents a modification instruction, allowing developers to apply changes to the data structure dynamically.
   */
  extendPaths?: Array<GetCompanyResponseExtendPaths> | undefined;
};

/**
 * This object contains all the detailed information about the company retrieved from the CRM. It serves as the main container for the company's data, including identifiers, name, and interaction details. The structure of this object is defined by the fields specified in the request, ensuring that only relevant data is included in the response.
 */
export type GetCompanyResponseData = {
  /**
   * A unique string identifier for the company, used to distinguish it from other companies within the CRM. This ID is crucial for referencing the company in subsequent API calls or database queries. It may not always be present if the 'fields' parameter excludes it.
   */
  id?: string | undefined;
  /**
   * The official name of the company as recorded in the CRM system. This field is always included in the response for active company records and is used for display purposes in user interfaces and reports. It is a mandatory field, ensuring that the company can be easily identified by users.
   */
  name: string | null;
  /**
   * An integer representing the total number of interactions recorded with the company. This count helps in understanding the level of engagement or activity the company has had over time. It may be omitted if not relevant to the requested fields.
   */
  interactionCount?: number | null | undefined;
  /**
   * The unique identifier of the user or entity that owns or manages the company record within the CRM. This ID is used to assign responsibility and track ownership of the company data. It may not be included if the 'fields' parameter does not request it.
   */
  ownerId?: string | null | undefined;
  /**
   * The URL of the company's logo or representative image. This string should be a valid URL format, allowing applications to display the company's image directly from the CRM. Useful for branding and visual identification in user interfaces.
   */
  image?: string | null | undefined;
  /**
   * A textual overview of the company, providing insights into its operations, mission, or services. This string can vary in length and is intended to give users a brief understanding of the company's purpose and activities.
   */
  description?: string | null | undefined;
  /**
   * The company's VAT (Value Added Tax) number, formatted as a string. This identifier is crucial for tax-related processes and compliance, especially in regions where VAT is applicable.
   */
  vatNumber?: string | null | undefined;
  /**
   * The currency code associated with the company's financial transactions, following the ISO 4217 standard. This string helps in understanding the monetary context of the company's operations, ensuring accurate financial reporting and processing.
   */
  currency?: GetCompanyResponseCurrency | null | undefined;
  /**
   * The current operational status of the company, represented as a string. This could indicate whether the company is active, inactive, or in another state, helping users understand the company's current standing within the CRM system.
   */
  status?: string | null | undefined;
  /**
   * The company's fax number, formatted as a string. This may include country and area codes, and is used for sending documents via fax. It is optional and may be null if the company does not use fax communication.
   */
  fax?: string | null | undefined;
  /**
   * The annual revenue of the company, represented as a string. This value typically includes currency symbols and separators, and provides insight into the company's financial performance over the past year. It is optional and may be null if not disclosed.
   */
  annualRevenue?: string | null | undefined;
  /**
   * The total number of employees working at the company, expressed as a string. This figure helps gauge the company's size and operational capacity. It is optional and may be null if the information is not available.
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * The industry sector in which the company operates, provided as a string. This categorization helps in understanding the market context and business environment of the company. It is optional and may be null if not specified.
   */
  industry?: string | null | undefined;
  /**
   * The type of ownership of the company, described as a string. This indicates whether the company is privately held, publicly traded, or another form of ownership. It is optional and may be null if not specified.
   */
  ownership?: string | null | undefined;
  /**
   * The sales tax number uniquely identifies the company for tax purposes within the jurisdiction it operates. It is typically a string of alphanumeric characters and is crucial for tax reporting and compliance. This field may be included in the response if available and relevant to the company's operations.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * The payee number is a unique identifier assigned to the company for tax-related transactions, particularly when the company acts as a payee. It is usually a string of numbers and is important for ensuring accurate tax processing and payments. This field is optional and included if applicable to the company's tax profile.
   */
  payeeNumber?: string | null | undefined;
  /**
   * This field contains either the Australian Business Number (ABN) or the Tax File Number (TFN), depending on the company's registration. The ABN is essential for business operations in Australia, while the TFN is required for tax purposes. The value is a string of digits and is crucial for identifying the company in official records.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * The ABN Branch number is used to identify specific branches of a business that need to account for GST separately from the main entity. It is a string of numbers and is relevant for businesses with multiple operational branches. This field is optional and included if the company has such a branch structure.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) is a nine-digit identifier used to uniquely identify a company registered in Australia. It is formatted as three groups of three digits (e.g., 123 456 789) and is essential for legal and official documentation. This field is included in the response if the company is registered in Australia.
   */
  acn?: string | null | undefined;
  /**
   * The first name of the contact person associated with the company. This is typically used for personalized communication and may be null if not applicable. The value is expected to be a string, potentially empty if the information is not available.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the contact person associated with the company. This field is used in conjunction with the first name for identification and communication purposes. It is returned as a string and may be empty if the last name is not provided.
   */
  lastName?: string | null | undefined;
  /**
   * The unique identifier of the parent company, if applicable. This field helps in understanding the hierarchical structure of companies within the CRM. It is a string and may be null if the company does not have a parent entity.
   */
  parentId?: string | null | undefined;
  /**
   * An array containing details of the company's bank accounts. Each entry in the array represents a separate bank account, providing information such as bank name and account number. This array may be empty if no bank accounts are associated with the company.
   */
  bankAccounts?: Array<GetCompanyResponseBankAccounts> | undefined;
  /**
   * An array containing details of the company's websites. Each entry in the array represents a distinct website associated with the company, providing a structured way to access multiple URLs and their related information.
   */
  websites?: Array<GetCompanyResponseWebsites> | undefined;
  /**
   * An array containing the company's physical addresses. Each entry provides detailed information about a specific location, such as headquarters or branch offices, allowing for comprehensive geographical data representation.
   */
  addresses?: Array<GetCompanyResponseAddresses> | undefined;
  /**
   * This property contains an array of social media links associated with the company. Each entry in the array represents a different social media platform, providing URLs to the company's profiles. This field is optional and may be empty if the company does not have any social media presence.
   */
  socialLinks?: Array<GetCompanyResponseSocialLinks> | undefined;
  /**
   * An array containing the company's phone numbers. Each entry in the array represents a distinct phone number record, which may include details such as type and usage context. This allows applications to display or process multiple contact numbers for the company.
   */
  phoneNumbers?: Array<GetCompanyResponsePhoneNumbers> | undefined;
  /**
   * An array containing the email addresses associated with the company. Each entry in the array is an object that includes details about the email, such as its unique identifier, the email address itself, and its type. This array is optional and may be empty if no email addresses are recorded for the company.
   */
  emails?: Array<GetCompanyResponseEmails> | undefined;
  /**
   * An object representing the type of data row, which may include metadata or additional attributes related to the company record. This object is optional and its structure can vary depending on the CRM's configuration and the specific data model used.
   */
  rowType?: GetCompanyResponseCompanyRowType | undefined;
  /**
   * An array of custom fields associated with the company, allowing for additional, user-defined data to be stored. Each entry in the array represents a specific custom field, providing flexibility in data management.
   */
  customFields?: Array<GetCompanyResponseCustomFields> | undefined;
  /**
   * An array of tags associated with the company, used for categorization or filtering purposes. Each tag is a string that represents a label or keyword relevant to the company, aiding in organization and searchability within the CRM.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Indicates whether the company record is read-only, meaning it cannot be modified through the API. This boolean value helps developers understand the permissions and restrictions associated with the company data.
   */
  readOnly?: boolean | null | undefined;
  /**
   * The timestamp of the most recent activity associated with the company. This is presented in ISO 8601 format (e.g., '2023-10-05T14:48:00Z') and helps track the latest interactions or updates related to the company within the CRM system.
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * Indicates whether the company record has been marked as deleted in the CRM. A value of 'true' means the company is no longer active or visible in standard queries, while 'false' indicates it is still active.
   */
  deleted?: boolean | undefined;
  /**
   * A formal salutation or title associated with a contact person at the company, such as 'Mr', 'Mrs', or 'Dr'. This is useful for personalizing communications and is returned as a string if available.
   */
  salutation?: string | null | undefined;
  /**
   * The birth date of a contact person at the company, formatted as a string in ISO 8601 date format (e.g., 'YYYY-MM-DD'). This information can be used for personalizing interactions or for record-keeping purposes.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * An object containing any custom field mappings that have been configured for the company resource. This allows for the inclusion of additional, user-defined data fields that extend the standard company information returned by the API.
   */
  customMappings?: GetCompanyResponseCustomMappings | null | undefined;
  /**
   * The unique identifier of the user who last updated the company record. This is typically a user ID string that helps track changes and maintain an audit trail within the CRM system. Useful for understanding who made the most recent modifications to the company's data.
   */
  updatedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who initially created the company record. This string value is essential for auditing purposes, allowing you to trace back to the origin of the record within the CRM.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the company record was last updated. This string is formatted in ISO 8601 and is crucial for determining the recency of the data, ensuring that applications display the most current information.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp representing when the company record was originally created. Provided in ISO 8601 format, this helps in understanding the age of the record and tracking its lifecycle within the CRM system.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array that contains service-specific custom data or modifications. This property allows for flexibility in handling additional data that may be required by specific services or integrations, ensuring that all necessary information is passed through during data retrieval.
   */
  passThrough?: Array<GetCompanyResponsePassThrough> | undefined;
};

/**
 * Company
 */
export type GetCompanyResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. A status code of 200 signifies a successful retrieval of the company data. This integer value is crucial for error handling and debugging purposes.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request. This string provides a human-readable status that complements the numerical status code, aiding in quick understanding of the response outcome.
   */
  status: string;
  /**
   * The unique identifier for the service provider within the Apideck ecosystem. This string helps in identifying which service was used to fetch the company data, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the unified API resource that was accessed, in this case, typically 'company'. This string indicates the type of resource returned in the response, aligning with the operation's goal of retrieving company details.
   */
  resource: string;
  /**
   * The specific operation performed by the API, such as 'retrieve' for fetching company details. This string helps in understanding the action taken by the API, providing context to the response data.
   */
  operation: string;
  /**
   * This object contains all the detailed information about the company retrieved from the CRM. It serves as the main container for the company's data, including identifiers, name, and interaction details. The structure of this object is defined by the fields specified in the request, ensuring that only relevant data is included in the response.
   */
  data: GetCompanyResponseData;
};

/** @internal */
export const GetCompanyResponseCurrency$inboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseCurrency
> = z.nativeEnum(GetCompanyResponseCurrency);

/** @internal */
export const GetCompanyResponseCurrency$outboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseCurrency
> = GetCompanyResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseCurrency$ {
  /** @deprecated use `GetCompanyResponseCurrency$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseCurrency$inboundSchema;
  /** @deprecated use `GetCompanyResponseCurrency$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseCurrency$outboundSchema;
}

/** @internal */
export const GetCompanyResponseAccountType$inboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseAccountType
> = z.nativeEnum(GetCompanyResponseAccountType);

/** @internal */
export const GetCompanyResponseAccountType$outboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseAccountType
> = GetCompanyResponseAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseAccountType$ {
  /** @deprecated use `GetCompanyResponseAccountType$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseAccountType$inboundSchema;
  /** @deprecated use `GetCompanyResponseAccountType$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseAccountType$outboundSchema;
}

/** @internal */
export const GetCompanyResponseDataCurrency$inboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseDataCurrency
> = z.nativeEnum(GetCompanyResponseDataCurrency);

/** @internal */
export const GetCompanyResponseDataCurrency$outboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseDataCurrency
> = GetCompanyResponseDataCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseDataCurrency$ {
  /** @deprecated use `GetCompanyResponseDataCurrency$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseDataCurrency$inboundSchema;
  /** @deprecated use `GetCompanyResponseDataCurrency$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseDataCurrency$outboundSchema;
}

/** @internal */
export const GetCompanyResponseBankAccounts$inboundSchema: z.ZodType<
  GetCompanyResponseBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(GetCompanyResponseAccountType$inboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(GetCompanyResponseDataCurrency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type GetCompanyResponseBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const GetCompanyResponseBankAccounts$outboundSchema: z.ZodType<
  GetCompanyResponseBankAccounts$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(GetCompanyResponseAccountType$outboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(GetCompanyResponseDataCurrency$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseBankAccounts$ {
  /** @deprecated use `GetCompanyResponseBankAccounts$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseBankAccounts$inboundSchema;
  /** @deprecated use `GetCompanyResponseBankAccounts$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseBankAccounts$outboundSchema;
  /** @deprecated use `GetCompanyResponseBankAccounts$Outbound` instead. */
  export type Outbound = GetCompanyResponseBankAccounts$Outbound;
}

export function getCompanyResponseBankAccountsToJSON(
  getCompanyResponseBankAccounts: GetCompanyResponseBankAccounts,
): string {
  return JSON.stringify(
    GetCompanyResponseBankAccounts$outboundSchema.parse(
      getCompanyResponseBankAccounts,
    ),
  );
}

export function getCompanyResponseBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseBankAccounts' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseType
> = z.nativeEnum(GetCompanyResponseType);

/** @internal */
export const GetCompanyResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseType
> = GetCompanyResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseType$ {
  /** @deprecated use `GetCompanyResponseType$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseType$inboundSchema;
  /** @deprecated use `GetCompanyResponseType$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseType$outboundSchema;
}

/** @internal */
export const GetCompanyResponseWebsites$inboundSchema: z.ZodType<
  GetCompanyResponseWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(GetCompanyResponseType$inboundSchema).optional(),
});

/** @internal */
export type GetCompanyResponseWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const GetCompanyResponseWebsites$outboundSchema: z.ZodType<
  GetCompanyResponseWebsites$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(GetCompanyResponseType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseWebsites$ {
  /** @deprecated use `GetCompanyResponseWebsites$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseWebsites$inboundSchema;
  /** @deprecated use `GetCompanyResponseWebsites$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseWebsites$outboundSchema;
  /** @deprecated use `GetCompanyResponseWebsites$Outbound` instead. */
  export type Outbound = GetCompanyResponseWebsites$Outbound;
}

export function getCompanyResponseWebsitesToJSON(
  getCompanyResponseWebsites: GetCompanyResponseWebsites,
): string {
  return JSON.stringify(
    GetCompanyResponseWebsites$outboundSchema.parse(getCompanyResponseWebsites),
  );
}

export function getCompanyResponseWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseWebsites' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseDataType
> = z.nativeEnum(GetCompanyResponseDataType);

/** @internal */
export const GetCompanyResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseDataType
> = GetCompanyResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseDataType$ {
  /** @deprecated use `GetCompanyResponseDataType$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseDataType$inboundSchema;
  /** @deprecated use `GetCompanyResponseDataType$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseDataType$outboundSchema;
}

/** @internal */
export const GetCompanyResponseAddresses$inboundSchema: z.ZodType<
  GetCompanyResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(GetCompanyResponseDataType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type GetCompanyResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const GetCompanyResponseAddresses$outboundSchema: z.ZodType<
  GetCompanyResponseAddresses$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(GetCompanyResponseDataType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseAddresses$ {
  /** @deprecated use `GetCompanyResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseAddresses$inboundSchema;
  /** @deprecated use `GetCompanyResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseAddresses$outboundSchema;
  /** @deprecated use `GetCompanyResponseAddresses$Outbound` instead. */
  export type Outbound = GetCompanyResponseAddresses$Outbound;
}

export function getCompanyResponseAddressesToJSON(
  getCompanyResponseAddresses: GetCompanyResponseAddresses,
): string {
  return JSON.stringify(
    GetCompanyResponseAddresses$outboundSchema.parse(
      getCompanyResponseAddresses,
    ),
  );
}

export function getCompanyResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseAddresses' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseSocialLinks$inboundSchema: z.ZodType<
  GetCompanyResponseSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetCompanyResponseSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const GetCompanyResponseSocialLinks$outboundSchema: z.ZodType<
  GetCompanyResponseSocialLinks$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseSocialLinks$ {
  /** @deprecated use `GetCompanyResponseSocialLinks$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseSocialLinks$inboundSchema;
  /** @deprecated use `GetCompanyResponseSocialLinks$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseSocialLinks$outboundSchema;
  /** @deprecated use `GetCompanyResponseSocialLinks$Outbound` instead. */
  export type Outbound = GetCompanyResponseSocialLinks$Outbound;
}

export function getCompanyResponseSocialLinksToJSON(
  getCompanyResponseSocialLinks: GetCompanyResponseSocialLinks,
): string {
  return JSON.stringify(
    GetCompanyResponseSocialLinks$outboundSchema.parse(
      getCompanyResponseSocialLinks,
    ),
  );
}

export function getCompanyResponseSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseSocialLinks' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseDataPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof GetCompanyResponseDataPhoneNumbersType> = z.nativeEnum(
    GetCompanyResponseDataPhoneNumbersType,
  );

/** @internal */
export const GetCompanyResponseDataPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof GetCompanyResponseDataPhoneNumbersType> =
    GetCompanyResponseDataPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseDataPhoneNumbersType$ {
  /** @deprecated use `GetCompanyResponseDataPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    GetCompanyResponseDataPhoneNumbersType$inboundSchema;
  /** @deprecated use `GetCompanyResponseDataPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    GetCompanyResponseDataPhoneNumbersType$outboundSchema;
}

/** @internal */
export const GetCompanyResponsePhoneNumbers$inboundSchema: z.ZodType<
  GetCompanyResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(GetCompanyResponseDataPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type GetCompanyResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const GetCompanyResponsePhoneNumbers$outboundSchema: z.ZodType<
  GetCompanyResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  GetCompanyResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(GetCompanyResponseDataPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponsePhoneNumbers$ {
  /** @deprecated use `GetCompanyResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `GetCompanyResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `GetCompanyResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = GetCompanyResponsePhoneNumbers$Outbound;
}

export function getCompanyResponsePhoneNumbersToJSON(
  getCompanyResponsePhoneNumbers: GetCompanyResponsePhoneNumbers,
): string {
  return JSON.stringify(
    GetCompanyResponsePhoneNumbers$outboundSchema.parse(
      getCompanyResponsePhoneNumbers,
    ),
  );
}

export function getCompanyResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseDataEmailsType
> = z.nativeEnum(GetCompanyResponseDataEmailsType);

/** @internal */
export const GetCompanyResponseDataEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof GetCompanyResponseDataEmailsType
> = GetCompanyResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseDataEmailsType$ {
  /** @deprecated use `GetCompanyResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseDataEmailsType$inboundSchema;
  /** @deprecated use `GetCompanyResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const GetCompanyResponseEmails$inboundSchema: z.ZodType<
  GetCompanyResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(GetCompanyResponseDataEmailsType$inboundSchema).optional(),
});

/** @internal */
export type GetCompanyResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const GetCompanyResponseEmails$outboundSchema: z.ZodType<
  GetCompanyResponseEmails$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(GetCompanyResponseDataEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseEmails$ {
  /** @deprecated use `GetCompanyResponseEmails$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseEmails$inboundSchema;
  /** @deprecated use `GetCompanyResponseEmails$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseEmails$outboundSchema;
  /** @deprecated use `GetCompanyResponseEmails$Outbound` instead. */
  export type Outbound = GetCompanyResponseEmails$Outbound;
}

export function getCompanyResponseEmailsToJSON(
  getCompanyResponseEmails: GetCompanyResponseEmails,
): string {
  return JSON.stringify(
    GetCompanyResponseEmails$outboundSchema.parse(getCompanyResponseEmails),
  );
}

export function getCompanyResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseEmails' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseCompanyRowType$inboundSchema: z.ZodType<
  GetCompanyResponseCompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetCompanyResponseCompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const GetCompanyResponseCompanyRowType$outboundSchema: z.ZodType<
  GetCompanyResponseCompanyRowType$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseCompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseCompanyRowType$ {
  /** @deprecated use `GetCompanyResponseCompanyRowType$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseCompanyRowType$inboundSchema;
  /** @deprecated use `GetCompanyResponseCompanyRowType$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseCompanyRowType$outboundSchema;
  /** @deprecated use `GetCompanyResponseCompanyRowType$Outbound` instead. */
  export type Outbound = GetCompanyResponseCompanyRowType$Outbound;
}

export function getCompanyResponseCompanyRowTypeToJSON(
  getCompanyResponseCompanyRowType: GetCompanyResponseCompanyRowType,
): string {
  return JSON.stringify(
    GetCompanyResponseCompanyRowType$outboundSchema.parse(
      getCompanyResponseCompanyRowType,
    ),
  );
}

export function getCompanyResponseCompanyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseCompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseCompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseCompanyRowType' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseValue6$inboundSchema: z.ZodType<
  GetCompanyResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetCompanyResponseValue6$Outbound = {};

/** @internal */
export const GetCompanyResponseValue6$outboundSchema: z.ZodType<
  GetCompanyResponseValue6$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseValue6$ {
  /** @deprecated use `GetCompanyResponseValue6$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseValue6$inboundSchema;
  /** @deprecated use `GetCompanyResponseValue6$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseValue6$outboundSchema;
  /** @deprecated use `GetCompanyResponseValue6$Outbound` instead. */
  export type Outbound = GetCompanyResponseValue6$Outbound;
}

export function getCompanyResponseValue6ToJSON(
  getCompanyResponseValue6: GetCompanyResponseValue6,
): string {
  return JSON.stringify(
    GetCompanyResponseValue6$outboundSchema.parse(getCompanyResponseValue6),
  );
}

export function getCompanyResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseValue6' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseValue4$inboundSchema: z.ZodType<
  GetCompanyResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetCompanyResponseValue4$Outbound = {};

/** @internal */
export const GetCompanyResponseValue4$outboundSchema: z.ZodType<
  GetCompanyResponseValue4$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseValue4$ {
  /** @deprecated use `GetCompanyResponseValue4$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseValue4$inboundSchema;
  /** @deprecated use `GetCompanyResponseValue4$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseValue4$outboundSchema;
  /** @deprecated use `GetCompanyResponseValue4$Outbound` instead. */
  export type Outbound = GetCompanyResponseValue4$Outbound;
}

export function getCompanyResponseValue4ToJSON(
  getCompanyResponseValue4: GetCompanyResponseValue4,
): string {
  return JSON.stringify(
    GetCompanyResponseValue4$outboundSchema.parse(getCompanyResponseValue4),
  );
}

export function getCompanyResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseValue4' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseValue$inboundSchema: z.ZodType<
  GetCompanyResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetCompanyResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => GetCompanyResponseValue6$inboundSchema)),
]);

/** @internal */
export type GetCompanyResponseValue$Outbound =
  | GetCompanyResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<GetCompanyResponseValue6$Outbound>;

/** @internal */
export const GetCompanyResponseValue$outboundSchema: z.ZodType<
  GetCompanyResponseValue$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseValue
> = z.union([
  z.lazy(() => GetCompanyResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => GetCompanyResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseValue$ {
  /** @deprecated use `GetCompanyResponseValue$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseValue$inboundSchema;
  /** @deprecated use `GetCompanyResponseValue$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseValue$outboundSchema;
  /** @deprecated use `GetCompanyResponseValue$Outbound` instead. */
  export type Outbound = GetCompanyResponseValue$Outbound;
}

export function getCompanyResponseValueToJSON(
  getCompanyResponseValue: GetCompanyResponseValue,
): string {
  return JSON.stringify(
    GetCompanyResponseValue$outboundSchema.parse(getCompanyResponseValue),
  );
}

export function getCompanyResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseValue' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseCustomFields$inboundSchema: z.ZodType<
  GetCompanyResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => GetCompanyResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => GetCompanyResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type GetCompanyResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | GetCompanyResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<GetCompanyResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const GetCompanyResponseCustomFields$outboundSchema: z.ZodType<
  GetCompanyResponseCustomFields$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => GetCompanyResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => GetCompanyResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseCustomFields$ {
  /** @deprecated use `GetCompanyResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseCustomFields$inboundSchema;
  /** @deprecated use `GetCompanyResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseCustomFields$outboundSchema;
  /** @deprecated use `GetCompanyResponseCustomFields$Outbound` instead. */
  export type Outbound = GetCompanyResponseCustomFields$Outbound;
}

export function getCompanyResponseCustomFieldsToJSON(
  getCompanyResponseCustomFields: GetCompanyResponseCustomFields,
): string {
  return JSON.stringify(
    GetCompanyResponseCustomFields$outboundSchema.parse(
      getCompanyResponseCustomFields,
    ),
  );
}

export function getCompanyResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseCustomMappings$inboundSchema: z.ZodType<
  GetCompanyResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetCompanyResponseCustomMappings$Outbound = {};

/** @internal */
export const GetCompanyResponseCustomMappings$outboundSchema: z.ZodType<
  GetCompanyResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseCustomMappings$ {
  /** @deprecated use `GetCompanyResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseCustomMappings$inboundSchema;
  /** @deprecated use `GetCompanyResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseCustomMappings$outboundSchema;
  /** @deprecated use `GetCompanyResponseCustomMappings$Outbound` instead. */
  export type Outbound = GetCompanyResponseCustomMappings$Outbound;
}

export function getCompanyResponseCustomMappingsToJSON(
  getCompanyResponseCustomMappings: GetCompanyResponseCustomMappings,
): string {
  return JSON.stringify(
    GetCompanyResponseCustomMappings$outboundSchema.parse(
      getCompanyResponseCustomMappings,
    ),
  );
}

export function getCompanyResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseExtendPaths$inboundSchema: z.ZodType<
  GetCompanyResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type GetCompanyResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const GetCompanyResponseExtendPaths$outboundSchema: z.ZodType<
  GetCompanyResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseExtendPaths$ {
  /** @deprecated use `GetCompanyResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseExtendPaths$inboundSchema;
  /** @deprecated use `GetCompanyResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseExtendPaths$outboundSchema;
  /** @deprecated use `GetCompanyResponseExtendPaths$Outbound` instead. */
  export type Outbound = GetCompanyResponseExtendPaths$Outbound;
}

export function getCompanyResponseExtendPathsToJSON(
  getCompanyResponseExtendPaths: GetCompanyResponseExtendPaths,
): string {
  return JSON.stringify(
    GetCompanyResponseExtendPaths$outboundSchema.parse(
      getCompanyResponseExtendPaths,
    ),
  );
}

export function getCompanyResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponsePassThrough$inboundSchema: z.ZodType<
  GetCompanyResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => GetCompanyResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type GetCompanyResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<GetCompanyResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const GetCompanyResponsePassThrough$outboundSchema: z.ZodType<
  GetCompanyResponsePassThrough$Outbound,
  z.ZodTypeDef,
  GetCompanyResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => GetCompanyResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponsePassThrough$ {
  /** @deprecated use `GetCompanyResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponsePassThrough$inboundSchema;
  /** @deprecated use `GetCompanyResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponsePassThrough$outboundSchema;
  /** @deprecated use `GetCompanyResponsePassThrough$Outbound` instead. */
  export type Outbound = GetCompanyResponsePassThrough$Outbound;
}

export function getCompanyResponsePassThroughToJSON(
  getCompanyResponsePassThrough: GetCompanyResponsePassThrough,
): string {
  return JSON.stringify(
    GetCompanyResponsePassThrough$outboundSchema.parse(
      getCompanyResponsePassThrough,
    ),
  );
}

export function getCompanyResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseData$inboundSchema: z.ZodType<
  GetCompanyResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  interaction_count: z.nullable(z.number().int()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vat_number: z.nullable(z.string()).optional(),
  currency: z.nullable(GetCompanyResponseCurrency$inboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annual_revenue: z.nullable(z.string()).optional(),
  number_of_employees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  sales_tax_number: z.nullable(z.string()).optional(),
  payee_number: z.nullable(z.string()).optional(),
  abn_or_tfn: z.nullable(z.string()).optional(),
  abn_branch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  parent_id: z.nullable(z.string()).optional(),
  bank_accounts: z.array(
    z.lazy(() => GetCompanyResponseBankAccounts$inboundSchema),
  ).optional(),
  websites: z.array(z.lazy(() => GetCompanyResponseWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => GetCompanyResponseAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => GetCompanyResponseSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => GetCompanyResponsePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => GetCompanyResponseEmails$inboundSchema))
    .optional(),
  row_type: z.lazy(() => GetCompanyResponseCompanyRowType$inboundSchema)
    .optional(),
  custom_fields: z.array(
    z.lazy(() => GetCompanyResponseCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  read_only: z.nullable(z.boolean()).optional(),
  last_activity_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deleted: z.boolean().optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => GetCompanyResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => GetCompanyResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "interaction_count": "interactionCount",
    "owner_id": "ownerId",
    "vat_number": "vatNumber",
    "annual_revenue": "annualRevenue",
    "number_of_employees": "numberOfEmployees",
    "sales_tax_number": "salesTaxNumber",
    "payee_number": "payeeNumber",
    "abn_or_tfn": "abnOrTfn",
    "abn_branch": "abnBranch",
    "first_name": "firstName",
    "last_name": "lastName",
    "parent_id": "parentId",
    "bank_accounts": "bankAccounts",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "row_type": "rowType",
    "custom_fields": "customFields",
    "read_only": "readOnly",
    "last_activity_at": "lastActivityAt",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type GetCompanyResponseData$Outbound = {
  id?: string | undefined;
  name: string | null;
  interaction_count?: number | null | undefined;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  parent_id?: string | null | undefined;
  bank_accounts?: Array<GetCompanyResponseBankAccounts$Outbound> | undefined;
  websites?: Array<GetCompanyResponseWebsites$Outbound> | undefined;
  addresses?: Array<GetCompanyResponseAddresses$Outbound> | undefined;
  social_links?: Array<GetCompanyResponseSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<GetCompanyResponsePhoneNumbers$Outbound> | undefined;
  emails?: Array<GetCompanyResponseEmails$Outbound> | undefined;
  row_type?: GetCompanyResponseCompanyRowType$Outbound | undefined;
  custom_fields?: Array<GetCompanyResponseCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  custom_mappings?:
    | GetCompanyResponseCustomMappings$Outbound
    | null
    | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<GetCompanyResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const GetCompanyResponseData$outboundSchema: z.ZodType<
  GetCompanyResponseData$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseData
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  interactionCount: z.nullable(z.number().int()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(GetCompanyResponseCurrency$outboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annualRevenue: z.nullable(z.string()).optional(),
  numberOfEmployees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  salesTaxNumber: z.nullable(z.string()).optional(),
  payeeNumber: z.nullable(z.string()).optional(),
  abnOrTfn: z.nullable(z.string()).optional(),
  abnBranch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  parentId: z.nullable(z.string()).optional(),
  bankAccounts: z.array(
    z.lazy(() => GetCompanyResponseBankAccounts$outboundSchema),
  ).optional(),
  websites: z.array(z.lazy(() => GetCompanyResponseWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => GetCompanyResponseAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => GetCompanyResponseSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => GetCompanyResponsePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => GetCompanyResponseEmails$outboundSchema))
    .optional(),
  rowType: z.lazy(() => GetCompanyResponseCompanyRowType$outboundSchema)
    .optional(),
  customFields: z.array(
    z.lazy(() => GetCompanyResponseCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  readOnly: z.nullable(z.boolean()).optional(),
  lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  deleted: z.boolean().optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => GetCompanyResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(
    z.lazy(() => GetCompanyResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    interactionCount: "interaction_count",
    ownerId: "owner_id",
    vatNumber: "vat_number",
    annualRevenue: "annual_revenue",
    numberOfEmployees: "number_of_employees",
    salesTaxNumber: "sales_tax_number",
    payeeNumber: "payee_number",
    abnOrTfn: "abn_or_tfn",
    abnBranch: "abn_branch",
    firstName: "first_name",
    lastName: "last_name",
    parentId: "parent_id",
    bankAccounts: "bank_accounts",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    rowType: "row_type",
    customFields: "custom_fields",
    readOnly: "read_only",
    lastActivityAt: "last_activity_at",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseData$ {
  /** @deprecated use `GetCompanyResponseData$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseData$inboundSchema;
  /** @deprecated use `GetCompanyResponseData$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseData$outboundSchema;
  /** @deprecated use `GetCompanyResponseData$Outbound` instead. */
  export type Outbound = GetCompanyResponseData$Outbound;
}

export function getCompanyResponseDataToJSON(
  getCompanyResponseData: GetCompanyResponseData,
): string {
  return JSON.stringify(
    GetCompanyResponseData$outboundSchema.parse(getCompanyResponseData),
  );
}

export function getCompanyResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseData' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponse$inboundSchema: z.ZodType<
  GetCompanyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetCompanyResponseData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetCompanyResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: GetCompanyResponseData$Outbound;
};

/** @internal */
export const GetCompanyResponse$outboundSchema: z.ZodType<
  GetCompanyResponse$Outbound,
  z.ZodTypeDef,
  GetCompanyResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => GetCompanyResponseData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponse$ {
  /** @deprecated use `GetCompanyResponse$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponse$inboundSchema;
  /** @deprecated use `GetCompanyResponse$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponse$outboundSchema;
  /** @deprecated use `GetCompanyResponse$Outbound` instead. */
  export type Outbound = GetCompanyResponse$Outbound;
}

export function getCompanyResponseToJSON(
  getCompanyResponse: GetCompanyResponse,
): string {
  return JSON.stringify(
    GetCompanyResponse$outboundSchema.parse(getCompanyResponse),
  );
}

export function getCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponse' from JSON`,
  );
}
