/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Company,
  Company$inboundSchema,
  Company$Outbound,
  Company$outboundSchema,
} from "./company.js";

/**
 * Company
 */
export type GetCompanyResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the GET request, such as 200 for success or 404 if the company is not found. It helps developers understand the outcome of their API call.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable status message, such as 'OK' for a successful request or 'Not Found' if the company ID does not exist. It complements the status_code by offering a more descriptive explanation of the response.
   */
  status: string;
  /**
   * The unique Apideck identifier for the service provider handling the request. This string helps identify which service within the Apideck ecosystem processed the company data request, ensuring clarity in multi-service environments.
   */
  service: string;
  /**
   * The name of the Unified API resource that was accessed. This string indicates the specific resource type, such as 'companies', that the GET request targeted, helping developers understand the context of the data retrieved.
   */
  resource: string;
  /**
   * The specific operation performed by the API, in this case, a 'GET' request to retrieve company details. This string helps developers track the type of action executed, ensuring they understand the nature of the API interaction.
   */
  operation: string;
  /**
   * This object contains all the detailed information about the company retrieved from the CRM system. It serves as the main container for the company's data, including identifiers, names, and other relevant attributes. The structure of this object is crucial for applications that need to process or display comprehensive company details.
   */
  data: Company;
};

/** @internal */
export const GetCompanyResponse$inboundSchema: z.ZodType<
  GetCompanyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: Company$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetCompanyResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Company$Outbound;
};

/** @internal */
export const GetCompanyResponse$outboundSchema: z.ZodType<
  GetCompanyResponse$Outbound,
  z.ZodTypeDef,
  GetCompanyResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: Company$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponse$ {
  /** @deprecated use `GetCompanyResponse$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponse$inboundSchema;
  /** @deprecated use `GetCompanyResponse$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponse$outboundSchema;
  /** @deprecated use `GetCompanyResponse$Outbound` instead. */
  export type Outbound = GetCompanyResponse$Outbound;
}

export function getCompanyResponseToJSON(
  getCompanyResponse: GetCompanyResponse,
): string {
  return JSON.stringify(
    GetCompanyResponse$outboundSchema.parse(getCompanyResponse),
  );
}

export function getCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponse' from JSON`,
  );
}
