/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The category or classification of the activity, such as 'call', 'meeting', or 'task'. This required field helps in organizing and filtering activities within the CRM, ensuring that users can easily identify and manage different types of interactions. It is crucial for reporting and analytics, as it allows businesses to analyze activity patterns and performance metrics. The type should be selected from predefined categories to maintain consistency across records.
 */
export const ActivityGetResponseType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * The category or classification of the activity, such as 'call', 'meeting', or 'task'. This required field helps in organizing and filtering activities within the CRM, ensuring that users can easily identify and manage different types of interactions. It is crucial for reporting and analytics, as it allows businesses to analyze activity patterns and performance metrics. The type should be selected from predefined categories to maintain consistency across records.
 */
export type ActivityGetResponseType = ClosedEnum<
  typeof ActivityGetResponseType
>;

/**
 * Specifies the type of address, such as 'home', 'work', or 'billing'. This classification helps in organizing and retrieving addresses based on their usage context. It is important for applications that need to differentiate between various address types for operations like shipping or invoicing.
 */
export const ActivityGetResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of address, such as 'home', 'work', or 'billing'. This classification helps in organizing and retrieving addresses based on their usage context. It is important for applications that need to differentiate between various address types for operations like shipping or invoicing.
 */
export type ActivityGetResponseDataType = ClosedEnum<
  typeof ActivityGetResponseDataType
>;

/**
 * The location_address object contains detailed address information for the activity's location. This structured data is useful for integrations that require precise geolocation or mapping services. It is optional and can be used to provide more granular location details beyond a simple string address.
 */
export type ActivityGetResponseLocationAddress = {
  /**
   * A unique identifier for each address within the user's address array. This ID is crucial for distinguishing between different address records, especially when updating or deleting specific addresses. It ensures that each address can be individually referenced and managed within the CRM system, maintaining data integrity and accuracy.
   */
  id?: string | null | undefined;
  /**
   * Specifies the type of address, such as 'home', 'work', or 'billing'. This classification helps in organizing and retrieving addresses based on their usage context. It is important for applications that need to differentiate between various address types for operations like shipping or invoicing.
   */
  type?: ActivityGetResponseDataType | null | undefined;
  /**
   * The full address in a single string format, used when structured address data is not available. This field is essential for APIs that do not support detailed address components, allowing for a flexible representation of address information. It is particularly useful for quick data entry and display purposes.
   */
  string?: string | null | undefined;
  /**
   * A descriptive name for the address, often used to label or identify the address within the user's profile. This can include names like 'Headquarters', 'Main Office', or 'John's Apartment', providing a human-readable identifier that simplifies address management and selection within the CRM.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * The name of the city associated with the user's address. This field is used to specify the city where the user resides or is located. It is important for geographical identification and can be used for location-based services or analytics. Ensure the city name is spelled correctly to maintain data accuracy and integrity within the CRM system.
   */
  city?: string | null | undefined;
  /**
   * The name of the state or region associated with the user's address. This field helps in identifying the specific administrative area within a country where the user is located. It is crucial for regional segmentation and can aid in compliance with local regulations. Ensure the state name is accurate to facilitate proper data management and reporting.
   */
  state?: string | null | undefined;
  /**
   * The postal code or equivalent for the user's address. This field is essential for precise location identification and is often used in mailing and shipping processes. It can also be used for demographic analysis and service eligibility checks. Ensure the postal code is valid and corresponds to the correct city and state to avoid errors in data processing.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the user's address, following the ISO 3166-1 alpha-2 standard. This field is vital for internationalization and ensures that the user's location is correctly identified on a global scale. It supports cross-border operations and compliance with international standards. Ensure the country code is accurate to maintain consistency in global data management.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the user's address. This field provides the geographical latitude, which is used in mapping and location-based services. It is important for applications that require precise geolocation, such as delivery services or geographic analysis. Ensure the latitude is accurate to enhance the reliability of location-dependent operations.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, representing the east-west position on the Earth's surface. This value is crucial for geolocation services and mapping functionalities within the CRM, enabling precise location tracking and integration with geographic information systems. It should be a valid string representation of a decimal degree, typically ranging from -180.0 to 180.0.
   */
  longitude?: string | null | undefined;
  /**
   * This field captures the sublocality or county of the address, providing additional geographic context. It is particularly useful for regional segmentation and analysis, allowing for more granular data categorization and reporting. The county name should be accurately spelled to ensure consistency across records.
   */
  county?: string | null | undefined;
  /**
   * The full name of the primary contact person associated with the address. This information is vital for personalized communication and relationship management within the CRM. It should include both first and last names, and be kept up-to-date to reflect any changes in contact personnel.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as Mr., Ms., Dr., etc. This field enhances formal communication and is important for maintaining professional etiquette in correspondence. It should be chosen based on the contact's preference and cultural norms.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with the address, used for direct communication with the contact person. This number should be formatted according to international standards to ensure it can be dialed from any location. It is essential for timely and effective communication, especially in customer service scenarios.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the user's address. This field allows for the inclusion of traditional communication methods, which may be necessary for certain business transactions or legal documentation. While not commonly used in modern digital communications, maintaining a fax number can be crucial for businesses that still rely on this method. Ensure the number is formatted correctly to avoid transmission errors.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the user's address, serving as a primary mode of digital communication. This field is essential for sending notifications, updates, and other important information directly to the user. It should be a valid email format to ensure successful delivery and communication. Keeping this information up-to-date is vital for maintaining effective contact with the user.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the user's address, providing a digital point of reference or contact. This can be used to direct users to a personal or business website, offering more information or services. Ensure the URL is complete and correctly formatted to facilitate seamless access. This field supports the user's digital presence and connectivity.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the user's address, offering space for any extra information that might be relevant but does not fit into other predefined fields. This could include special delivery instructions, historical data, or personal preferences. These notes can be crucial for personalized service and ensuring all relevant details are captured.
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to track changes to the user's address object, ensuring data integrity and preventing update conflicts. This field is automatically incremented with each update, allowing the system to detect concurrent modifications and manage them appropriately. It is crucial for maintaining accurate and consistent data across the CRM system, especially in environments with multiple users accessing the same records.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Defines the status or visibility of the activity in calendar views, such as 'busy', 'free', or 'tentative'. This property helps in managing time effectively by indicating how the activity should be displayed to users and integrated services. It is essential for scheduling and availability management, ensuring that overlapping activities are handled appropriately.
 */
export const ActivityGetResponseShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
/**
 * Defines the status or visibility of the activity in calendar views, such as 'busy', 'free', or 'tentative'. This property helps in managing time effectively by indicating how the activity should be displayed to users and integrated services. It is essential for scheduling and availability management, ensuring that overlapping activities are handled appropriately.
 */
export type ActivityGetResponseShowAs = ClosedEnum<
  typeof ActivityGetResponseShowAs
>;

export type ActivityGetResponseValue6 = {};

export type ActivityGetResponseValue4 = {};

/**
 * The value assigned to a custom field within the opportunity record. Custom fields allow for additional, user-defined data to be stored, providing flexibility to tailor the CRM to specific business needs. This field is optional and can be used to capture unique attributes or metrics relevant to the opportunity that are not covered by standard fields.
 */
export type ActivityGetResponseValue =
  | ActivityGetResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivityGetResponseValue6>;

export type ActivityGetResponseCustomFields = {
  /**
   * Unique identifier for the custom field. This ID is essential for distinguishing each custom field within the opportunity's data structure. It ensures that each field can be individually accessed, updated, or removed as needed. The ID must be unique within the context of the opportunity to prevent data conflicts and maintain data integrity.
   */
  id: string | null;
  /**
   * Name of the custom field. This name serves as a label for the custom field, providing a human-readable identifier that describes the field's purpose or content. While not required, including a name can improve clarity and usability, especially when multiple custom fields are present. It should be concise yet descriptive enough to convey the field's role in the opportunity's data.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field. This description offers additional context or details about the custom field's intended use or significance. It can include guidelines on what type of data should be entered or how the field relates to the overall sales process. Providing a description is optional but can enhance understanding and proper utilization of the custom field by users.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to a custom field within the opportunity record. Custom fields allow for additional, user-defined data to be stored, providing flexibility to tailor the CRM to specific business needs. This field is optional and can be used to capture unique attributes or metrics relevant to the opportunity that are not covered by standard fields.
   */
  value?:
    | ActivityGetResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivityGetResponseValue6>
    | null
    | undefined;
};

/**
 * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This status helps track participation and engagement levels, allowing for better planning and resource allocation. It is essential for real-time updates and ensuring that all stakeholders are informed of the attendee's intentions.
 */
export const ActivityGetResponseStatus = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This status helps track participation and engagement levels, allowing for better planning and resource allocation. It is essential for real-time updates and ensuring that all stakeholders are informed of the attendee's intentions.
 */
export type ActivityGetResponseStatus = ClosedEnum<
  typeof ActivityGetResponseStatus
>;

export type ActivityGetResponseAttendees = {
  /**
   * A unique identifier assigned to each attendee associated with the activity. This ID is crucial for distinguishing between different participants, especially in activities involving multiple attendees. It ensures accurate tracking and management of participant data within the CRM, facilitating seamless integration and synchronization across various services. While not mandatory, providing attendee IDs enhances the precision of activity records.
   */
  id?: string | null | undefined;
  /**
   * The full name of the attendee, combining first, middle, and last names if applicable. This field is used to identify the attendee in a comprehensive manner within the CRM activity record. It is particularly useful for display purposes and when searching for specific attendees in the system. While not required, providing the full name ensures clarity and reduces ambiguity, especially in organizations with large numbers of participants.
   */
  name?: string | null | undefined;
  /**
   * The first name of the attendee, which serves as the initial part of the attendee's full name. This field is essential for personalizing communications and ensuring accurate identification of individuals in the CRM. It is commonly used in scenarios where informal or first-name basis interactions are preferred. Although not mandatory, including the first name enhances the granularity of attendee data.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the attendee, which can be included to provide a more complete identification of the individual. This field is particularly useful in distinguishing between attendees with similar first and last names, thereby enhancing the accuracy of the CRM records. While optional, it is beneficial in contexts where full legal names are required or preferred.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the attendee, which is a critical component of the attendee's full name. This field is crucial for formal identification and sorting of attendees within the CRM system. It is especially important in professional settings where last names are used for official documentation and correspondence. Including the last name ensures that records are maintained with precision and professionalism.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the attendee, such as Mr., Ms., Dr., etc., which provides additional context about the attendee's title or honorific. This field is useful for formal communications and when addressing attendees in a manner that respects their professional or personal titles. While not required, including a prefix can enhance the professionalism of interactions and records within the CRM.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the attendee's name, such as Jr., Sr., or III. This field is used to accurately reflect the attendee's full name in the CRM system, ensuring proper identification and personalization in communications. While not required, including a suffix can help distinguish between individuals with similar names, particularly in formal or legal contexts.
   */
  suffix?: string | null | undefined;
  /**
   * The email address of the attendee, which serves as a primary contact method and identifier within the CRM. This field is crucial for sending notifications, updates, and invitations related to the activity. It must be a valid email format to ensure successful communication and integration with email services.
   */
  emailAddress?: string | null | undefined;
  /**
   * A boolean flag indicating whether the attendee is the organizer of the activity. This distinction is important for assigning roles and responsibilities within the CRM, as organizers typically have additional permissions and duties, such as managing the attendee list and scheduling. This field helps in filtering and reporting on activities led by specific individuals.
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This status helps track participation and engagement levels, allowing for better planning and resource allocation. It is essential for real-time updates and ensuring that all stakeholders are informed of the attendee's intentions.
   */
  status?: ActivityGetResponseStatus | null | undefined;
  /**
   * The unique identifier for a user associated with the attendee, linking them to their CRM profile. This ID is used to synchronize data across different systems and ensure that updates to the attendee's information are reflected in their user profile. It is particularly useful in environments with multiple users and integrations, facilitating seamless data management.
   */
  userId?: string | null | undefined;
  /**
   * The unique identifier for a contact associated with the activity. This ID links the activity to a specific contact within the CRM, enabling users to track interactions and engagements with that contact. It is crucial for maintaining accurate records of who is involved in each activity, facilitating better customer relationship management. Typically, this ID is generated by the CRM system and should be used consistently to avoid discrepancies.
   */
  contactId?: string | null | undefined;
  /**
   * The timestamp indicating the most recent update to the attendee's information, formatted according to the ISO 8601 standard (e.g., '2023-03-15T13:45:30Z'). This field helps in tracking changes over time, ensuring that the latest information is available for each attendee. It is particularly useful for auditing purposes and for systems that rely on the most current data to trigger workflows or notifications.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp marking when the attendee was initially created in the system, formatted in ISO 8601 (e.g., '2023-03-15T13:45:30Z'). This information is essential for understanding the timeline of interactions and for historical data analysis. It provides context on how long an attendee has been associated with an activity, which can be valuable for reporting and trend analysis.
   */
  createdAt?: Date | null | undefined;
};

/**
 * An object containing custom field mappings that have been configured for this resource. These mappings allow for the extension of standard data fields to accommodate unique business requirements or integrations. This property is particularly useful for organizations that need to align CRM data with other systems or custom workflows, ensuring that all necessary information is captured and utilized effectively.
 */
export type ActivityGetResponseCustomMappings = {};

export type ActivityGetResponseExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the user record where the value should be applied. This is essential for making precise updates to nested fields, ensuring that changes are made only to the intended parts of the data structure. The path must be valid and correspond to an existing field within the user record.
   */
  path: string;
  /**
   * This property represents the specific value that you wish to assign to a designated path within the user record. It can be of any data type, such as a string, number, boolean, or object, depending on the field being updated. The flexibility of this property allows for a wide range of updates, from simple text changes to complex data structures. In the context of the `usersUpdate` operation, this property is crucial for specifying the exact data modification you intend to make, ensuring that only the targeted fields are altered without affecting other data. Proper validation should be applied to ensure the value is compatible with the field's expected data type and business rules. Common use cases include updating user contact information, preferences, or custom attributes specific to your CRM's schema.
   */
  value?: any | undefined;
};

export type ActivityGetResponsePassThrough = {
  /**
   * The unique identifier for the specific service to which this pass_through should be applied. This is crucial for directing the update operation to the correct service within the CRM system, ensuring that the modifications are executed in the appropriate context. It must be a valid service ID that corresponds to an active service integration, and it is required for the operation to proceed.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation within the CRM system to which this pass_through should be applied. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise targeting and execution of specific operations. If provided, it should match an existing operation ID to ensure correct processing.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the inclusion of any additional properties needed for direct extension of the user record. This can be used to add custom fields or metadata that are not part of the standard user schema, providing a way to tailor the user data to specific business needs. The structure of this object should align with the CRM's data model to ensure compatibility.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications via specified paths. This allows for precise updates to nested data structures within the user record, enabling complex modifications without altering unrelated data. Each object in the array should define a clear path and value to be applied, ensuring targeted updates.
   */
  extendPaths?: Array<ActivityGetResponseExtendPaths> | undefined;
};

/**
 * The main container object that holds all the detailed information about the specific CRM activity retrieved by the operation. This object is always included in the response to encapsulate all related properties of the activity, ensuring a structured and organized data format for easy access and manipulation.
 */
export type ActivityGetResponseData = {
  /**
   * The unique identifier of the activity within the CRM system. This ID is crucial for pinpointing the exact activity record that needs to be updated. It ensures that the correct record is modified, maintaining data integrity across the CRM. Although not required in the request body, it is essential in the path parameter to identify the specific activity being targeted for updates.
   */
  id?: string | undefined;
  /**
   * The identifier assigned by a third-party API to the original entity. This ID is used to map and synchronize the activity record between the CRM and external systems, ensuring that updates are accurately reflected across all integrated platforms. It is particularly useful in environments with multiple integrations, helping to maintain consistency and traceability of records.
   */
  downstreamId?: string | null | undefined;
  /**
   * The specific date and time when the activity occurred, formatted as an ISO 8601 string. This timestamp is vital for chronological tracking and reporting within the CRM, allowing users to view and analyze activities in a time-sequenced manner. Accurate datetime entries help in maintaining a reliable activity log, which is essential for performance analysis and historical data review.
   */
  activityDatetime?: string | null | undefined;
  /**
   * The total duration of the activity measured in seconds. This metric is important for assessing the time spent on specific activities, aiding in productivity analysis and resource allocation. It allows users to quantify the length of engagements or tasks, providing insights into time management and operational efficiency.
   */
  durationSeconds?: number | null | undefined;
  /**
   * The unique identifier of the user associated with the activity. This ID links the activity to a specific user within the CRM, facilitating user-specific tracking and accountability. It is essential for attributing activities to the correct personnel, enabling personalized performance metrics and ensuring accurate user activity logs.
   */
  userId?: string | null | undefined;
  /**
   * The account related to the activity. This property specifies the unique identifier of the account associated with the activity being updated. It is crucial for linking the activity to the correct account within the CRM, ensuring that all interactions and updates are accurately recorded under the appropriate account. This helps in maintaining a comprehensive view of all activities related to a specific account, facilitating better customer relationship management. Although not required, providing this ID can enhance the precision of activity tracking.
   */
  accountId?: string | null | undefined;
  /**
   * The contact related to the activity. This field represents the unique identifier of the contact person associated with the activity. Including this ID helps in associating the activity with a specific individual, which is essential for personalizing interactions and maintaining detailed records of communications with contacts. This can be particularly useful in scenarios where activities are directly linked to customer interactions, such as meetings or calls. While optional, it is recommended to include this ID for more granular tracking of contact-related activities.
   */
  contactId?: string | null | undefined;
  /**
   * The company related to the activity. This property holds the unique identifier for the company involved in the activity. It is used to associate the activity with a particular company, which is vital for tracking business interactions and engagements at the organizational level. This linkage supports strategic account management by providing insights into company-specific activities and trends. Although not mandatory, specifying this ID can improve the accuracy of company-related activity records.
   */
  companyId?: string | null | undefined;
  /**
   * The opportunity related to the activity. This field contains the unique identifier for the sales opportunity linked to the activity. Associating an activity with an opportunity is important for sales tracking and pipeline management, as it allows teams to monitor progress and interactions related to specific sales deals. This can aid in forecasting and strategizing sales efforts. While this field is optional, including it can enhance the visibility of opportunity-related activities within the CRM.
   */
  opportunityId?: string | null | undefined;
  /**
   * The lead related to the activity. This property specifies the unique identifier of the lead associated with the activity. Linking activities to leads is crucial for lead management and nurturing processes, as it helps track interactions and engagements with potential customers. This can be particularly beneficial in understanding the journey of a lead through the sales funnel. Although not required, providing this ID can improve the tracking and management of lead-related activities.
   */
  leadId?: string | null | undefined;
  /**
   * The unique identifier of the user or team responsible for managing the activity. This field is crucial for assigning accountability and ensuring that the right personnel are notified of updates or changes to the activity. It helps in tracking who is responsible for the activity's progress and completion. Typically, this ID corresponds to a user or team within the CRM system, and it must be valid and existing within the system to ensure proper assignment.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier of the marketing or sales campaign associated with the activity. This linkage is essential for tracking the performance and impact of specific campaigns on various activities. By associating an activity with a campaign, businesses can analyze the effectiveness of their marketing strategies and make informed decisions. The campaign ID should be valid and correspond to an existing campaign within the CRM.
   */
  campaignId?: string | null | undefined;
  /**
   * The unique identifier of the customer service or support case related to the activity. This association is important for maintaining a comprehensive view of customer interactions and ensuring that all activities related to a specific case are documented. It aids in providing context to the activity, allowing for better customer service and resolution tracking. The case ID must be valid and linked to an existing case in the CRM.
   */
  caseId?: string | null | undefined;
  /**
   * The unique identifier of the asset involved in the activity. This could refer to any physical or digital asset that is relevant to the activity's execution or outcome. Associating an activity with an asset helps in asset management and tracking, ensuring that all interactions involving the asset are recorded. The asset ID should be valid and correspond to an existing asset within the CRM system.
   */
  assetId?: string | null | undefined;
  /**
   * The unique identifier of the contract associated with the activity. This is vital for linking activities to specific contractual agreements, ensuring that all actions taken are in compliance with contractual obligations. It helps in monitoring contract performance and adherence, providing a clear audit trail of activities related to the contract. The contract ID must be valid and linked to an existing contract in the CRM.
   */
  contractId?: string | null | undefined;
  /**
   * The unique identifier of the product associated with the activity. This field links the activity to a specific product within the CRM, allowing for detailed tracking and reporting on product-related interactions. It is optional but highly useful for businesses that need to monitor activities related to specific products, such as sales calls or product demonstrations. This ID should match an existing product record in the CRM to ensure accurate association.
   */
  productId?: string | null | undefined;
  /**
   * The unique identifier of the solution associated with the activity. This property connects the activity to a particular solution offered by the business, facilitating the tracking of solution-specific engagements. It is optional and is particularly beneficial for organizations that offer multiple solutions and need to track activities like solution presentations or customer feedback sessions. Ensure this ID corresponds to an existing solution record in the CRM for proper linkage.
   */
  solutionId?: string | null | undefined;
  /**
   * The unique identifier for a custom object related to the activity. This field allows for the association of the activity with a custom object, which can be defined by the user to fit specific business needs. It is optional and provides flexibility for businesses to track activities linked to non-standard CRM entities, such as events or campaigns. The ID should match a custom object record in the CRM to maintain data integrity.
   */
  customObjectId?: string | null | undefined;
  /**
   * The category or classification of the activity, such as 'call', 'meeting', or 'task'. This required field helps in organizing and filtering activities within the CRM, ensuring that users can easily identify and manage different types of interactions. It is crucial for reporting and analytics, as it allows businesses to analyze activity patterns and performance metrics. The type should be selected from predefined categories to maintain consistency across records.
   */
  type: ActivityGetResponseType | null;
  /**
   * A brief, descriptive title for the activity, summarizing its purpose or content. This optional field aids in quickly identifying the activity within lists and reports, providing a snapshot of what the activity entails. While not mandatory, a well-crafted title enhances clarity and communication among team members, especially in collaborative environments. It should be concise yet informative, reflecting the core objective of the activity.
   */
  title?: string | null | undefined;
  /**
   * The description provides a detailed overview of the activity, capturing essential information that helps in understanding the purpose and context of the activity within the CRM. This field is optional but highly recommended for clarity and record-keeping, as it aids team members in quickly grasping the nature of the activity without needing additional context.
   */
  description?: string | null | undefined;
  /**
   * This internal note serves as a private annotation for the activity, allowing team members to add insights, reminders, or any relevant information that should not be visible to external parties. While optional, it is useful for internal communication and ensuring that all team members are aligned on the specifics of the activity.
   */
  note?: string | null | undefined;
  /**
   * The location specifies where the activity is scheduled to take place, providing logistical details that are crucial for planning and coordination. This field can include physical addresses or virtual meeting links, depending on the nature of the activity. It is optional but beneficial for ensuring participants know where to be or how to connect.
   */
  location?: string | null | undefined;
  /**
   * The location_address object contains detailed address information for the activity's location. This structured data is useful for integrations that require precise geolocation or mapping services. It is optional and can be used to provide more granular location details beyond a simple string address.
   */
  locationAddress?: ActivityGetResponseLocationAddress | undefined;
  /**
   * A boolean flag indicating whether the activity spans the entire day. When set to true, the activity is considered an all-day event, which means it does not have specific start and end times. This is particularly useful for events like holidays or full-day conferences, where precise timing is not necessary. It helps in organizing and displaying activities in a calendar view without time constraints.
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * This boolean property specifies whether the activity is marked as private, restricting visibility to authorized users only. When set to true, the activity details are hidden from general view, ensuring confidentiality and privacy. This is particularly important for sensitive meetings or activities that should not be publicly accessible within the CRM system.
   */
  private?: boolean | null | undefined;
  /**
   * Indicates whether the activity is classified as a group event. This property is used to determine if the activity involves multiple participants or is part of a larger event series. Setting this to true can help in organizing and managing events that require coordination among several team members or departments. It is particularly useful in scenarios where activities need to be grouped for reporting or scheduling purposes.
   */
  groupEvent?: boolean | null | undefined;
  /**
   * Specifies the sub-type of the group event, providing additional categorization within the broader event type. This property allows for more granular classification of events, which can be beneficial for detailed reporting and analysis. For example, within a 'Meeting' event type, sub-types could include 'Client Meeting', 'Team Meeting', etc. This helps in filtering and identifying specific kinds of events within the CRM.
   */
  eventSubType?: string | null | undefined;
  /**
   * Defines the primary type of the group event, serving as a top-level categorization. This property is essential for organizing events into major categories such as 'Meeting', 'Conference', or 'Workshop'. It aids in the systematic arrangement and retrieval of event records, ensuring that users can easily navigate and manage different types of activities within the CRM.
   */
  groupEventType?: string | null | undefined;
  /**
   * Indicates whether the activity is a subordinate or dependent activity linked to a parent activity. This property is crucial for establishing hierarchical relationships between activities, allowing users to track dependencies and manage workflows effectively. It is particularly useful in project management scenarios where tasks are often nested within larger projects.
   */
  child?: boolean | null | undefined;
  /**
   * Determines whether the activity has been archived, meaning it is no longer active but retained for historical reference. Archiving activities helps in decluttering the active records while preserving important historical data for future audits or reviews. This property is useful for maintaining a clean and efficient CRM environment by segregating active and inactive records.
   */
  archived?: boolean | null | undefined;
  /**
   * Indicates whether the activity record is marked as deleted within the CRM system. This flag is crucial for maintaining data integrity and ensuring that only active records are processed in subsequent operations. Setting this to true does not permanently remove the record but marks it for exclusion from active views and reports. Commonly used in scenarios where soft deletion is preferred over permanent removal.
   */
  deleted?: boolean | null | undefined;
  /**
   * Defines the status or visibility of the activity in calendar views, such as 'busy', 'free', or 'tentative'. This property helps in managing time effectively by indicating how the activity should be displayed to users and integrated services. It is essential for scheduling and availability management, ensuring that overlapping activities are handled appropriately.
   */
  showAs?: ActivityGetResponseShowAs | null | undefined;
  /**
   * Specifies whether the activity has been completed. This property is vital for tracking progress and updating the status of tasks within the CRM. Marking an activity as done can trigger workflows or notifications, ensuring that all stakeholders are informed of the completion. It is commonly used in task management and reporting to reflect the current state of activities.
   */
  done?: boolean | null | undefined;
  /**
   * Represents the scheduled start date and time for the activity, formatted in ISO 8601. This timestamp is critical for planning and coordinating activities, ensuring that all participants are aware of when the activity is set to begin. It is used in conjunction with end_datetime to define the duration of the activity and is essential for calendar synchronization and reminders.
   */
  startDatetime?: string | null | undefined;
  /**
   * Denotes the scheduled end date and time for the activity, formatted in ISO 8601. This property is important for determining the duration and completion of the activity, helping to manage time allocations and resource planning. It works alongside start_datetime to provide a complete timeframe for the activity, facilitating accurate scheduling and conflict resolution in calendar applications.
   */
  endDatetime?: string | null | undefined;
  /**
   * Specifies the total time span of the activity in minutes. This field is essential for scheduling and time management within the CRM, allowing users to allocate appropriate time slots for activities. It helps in tracking the time spent on various tasks, ensuring efficient resource utilization. Typically, this value should be a positive integer, reflecting the actual duration of the activity.
   */
  durationMinutes?: number | null | undefined;
  /**
   * Denotes the specific date on which the activity is scheduled to occur. This field is crucial for chronological organization within the CRM, enabling users to plan and review activities based on their scheduled dates. The date should be formatted according to the ISO 8601 standard (YYYY-MM-DD) to ensure consistency and compatibility across systems. It is particularly useful for generating reports and timelines of activities.
   */
  activityDate?: string | null | undefined;
  /**
   * Indicates the concluding date of the activity, which is particularly relevant for activities spanning multiple days. This field helps in defining the timeframe of an activity, ensuring that all related tasks and follow-ups are completed within the specified period. The date should adhere to the ISO 8601 format (YYYY-MM-DD) to maintain uniformity. It is often used in conjunction with the activity_date to define the start and end of an activity.
   */
  endDate?: string | null | undefined;
  /**
   * A boolean flag that specifies whether the activity is part of a recurring series. This property is vital for activities that repeat over a period, such as weekly meetings or monthly reviews. Setting this to true indicates that the activity will occur regularly, which helps in automating scheduling and reminders. It is important for maintaining consistency in recurring tasks and ensuring that they are not overlooked.
   */
  recurrent?: boolean | undefined;
  /**
   * Specifies the exact date and time when a reminder for the activity should be triggered. This field is essential for alerting users about upcoming activities, ensuring that they are prepared and can manage their time effectively. The datetime should be formatted according to the ISO 8601 standard (YYYY-MM-DDTHH:MM:SSZ) to ensure precision and interoperability. It is particularly useful for time-sensitive activities where timely reminders are critical.
   */
  reminderDatetime?: string | null | undefined;
  /**
   * Indicates whether a reminder has been configured for this activity. This boolean flag is crucial for ensuring timely follow-ups and notifications within the CRM system. If set to true, it implies that a reminder is active, helping users to stay on top of their scheduled tasks and commitments. This property is optional and can be omitted if reminders are not applicable to the activity being updated.
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The web address link to join the video conference associated with this activity. This URL is essential for facilitating virtual meetings and ensuring that all participants have access to the correct online meeting space. It should be a valid URL format and is particularly useful for activities involving remote collaboration or client meetings. This field is optional and can be left blank if no video conference is linked to the activity.
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * A unique identifier for the video conference session linked to this activity. This ID is used to distinguish between different video conference sessions and is important for integration with video conferencing tools. It should be a valid identifier as per the video conferencing service's specifications. This property is optional and should be provided if a video conference is part of the activity.
   */
  videoConferenceId?: string | null | undefined;
  /**
   * An array of custom fields that provide additional, user-defined data points for the activity. These fields allow for greater flexibility and customization, enabling users to capture specific information that is not covered by standard fields. Each entry in the array should adhere to the format defined by the CRM system. This property is optional and can be used to tailor the activity record to specific business needs.
   */
  customFields?: Array<ActivityGetResponseCustomFields> | undefined;
  /**
   * A list of individuals or entities that are associated with the CRM activity as participants or stakeholders. This array is included when there are attendees linked to the activity, providing a comprehensive view of all parties involved, which can be crucial for coordination, follow-ups, or reporting purposes.
   */
  attendees?: Array<ActivityGetResponseAttendees> | undefined;
  /**
   * An object containing custom field mappings that have been configured for this resource. These mappings allow for the extension of standard data fields to accommodate unique business requirements or integrations. This property is particularly useful for organizations that need to align CRM data with other systems or custom workflows, ensuring that all necessary information is captured and utilized effectively.
   */
  customMappings?: ActivityGetResponseCustomMappings | null | undefined;
  /**
   * The identifier of the user who last made changes to the activity record. This field is important for accountability and tracking purposes, allowing organizations to see who is responsible for updates. It can be used in audit logs and reports to ensure transparency and traceability of changes within the CRM system. Typically, this would be the user's ID or username as recognized by the CRM.
   */
  updatedBy?: string | null | undefined;
  /**
   * The identifier of the user who originally created the activity record. This field is crucial for tracking the origin of the activity within the CRM system, providing accountability and traceability. It helps in auditing and understanding who initiated the activity, which can be important for compliance and historical data analysis. Typically, this would be a user ID or username that is unique within the system.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the activity record was last modified. This field is essential for maintaining an accurate history of changes to the activity, allowing users to see the most recent updates. It is typically formatted in ISO 8601 format (e.g., '2023-10-01T12:00:00Z') and is automatically updated by the system whenever a change is made to the activity. This helps in synchronizing data across different systems and ensuring that users are always viewing the most current information.
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp representing when the activity was initially created in the CRM. This field is important for understanding the lifecycle of the activity and for chronological sorting of records. It is usually stored in ISO 8601 format and remains unchanged once set. Knowing the creation date can help in reporting and analyzing the time taken for activities to progress through various stages.
   */
  createdAt?: string | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or structured modifications when updating the activity record. This property is particularly useful for integrating with third-party services that require additional parameters not covered by standard fields. It enables flexibility and customization in handling unique business requirements or workflows that involve multiple systems. Each entry in the array can represent a different set of data or instructions tailored to specific services.
   */
  passThrough?: Array<ActivityGetResponsePassThrough> | undefined;
};

/**
 * Activity
 */
export type ActivityGetResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the GET request made to retrieve CRM activity details. A status code of 200 signifies a successful operation, confirming that the requested activity data has been fetched correctly. This property is always included in the response to inform the client about the outcome of their request.
   */
  statusCode: number;
  /**
   * The HTTP response status message accompanying the status code. This string provides a textual representation of the status code, such as 'OK' for a 200 status. It helps in understanding the nature of the response at a glance and is included in every response to offer a human-readable status of the request outcome.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the request. This string uniquely identifies which service within the Apideck ecosystem handled the CRM activity retrieval. It is crucial when multiple services are integrated, ensuring that the response is correctly attributed to the right service provider.
   */
  service: string;
  /**
   * The name of the unified API resource that was accessed. This string indicates the specific resource within the Apideck platform that corresponds to the CRM activity data requested. It helps in identifying the type of resource being interacted with, ensuring clarity in multi-resource environments.
   */
  resource: string;
  /**
   * The specific operation performed during the API request. This string describes the action taken, such as 'retrieve' for fetching CRM activity details. It provides context about what was done in response to the request, aiding in understanding the sequence of operations within the API interaction.
   */
  operation: string;
  /**
   * The main container object that holds all the detailed information about the specific CRM activity retrieved by the operation. This object is always included in the response to encapsulate all related properties of the activity, ensuring a structured and organized data format for easy access and manipulation.
   */
  data: ActivityGetResponseData;
};

/** @internal */
export const ActivityGetResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ActivityGetResponseType
> = z.nativeEnum(ActivityGetResponseType);

/** @internal */
export const ActivityGetResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ActivityGetResponseType
> = ActivityGetResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseType$ {
  /** @deprecated use `ActivityGetResponseType$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseType$inboundSchema;
  /** @deprecated use `ActivityGetResponseType$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseType$outboundSchema;
}

/** @internal */
export const ActivityGetResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof ActivityGetResponseDataType
> = z.nativeEnum(ActivityGetResponseDataType);

/** @internal */
export const ActivityGetResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof ActivityGetResponseDataType
> = ActivityGetResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseDataType$ {
  /** @deprecated use `ActivityGetResponseDataType$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseDataType$inboundSchema;
  /** @deprecated use `ActivityGetResponseDataType$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseDataType$outboundSchema;
}

/** @internal */
export const ActivityGetResponseLocationAddress$inboundSchema: z.ZodType<
  ActivityGetResponseLocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivityGetResponseDataType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ActivityGetResponseLocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ActivityGetResponseLocationAddress$outboundSchema: z.ZodType<
  ActivityGetResponseLocationAddress$Outbound,
  z.ZodTypeDef,
  ActivityGetResponseLocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivityGetResponseDataType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseLocationAddress$ {
  /** @deprecated use `ActivityGetResponseLocationAddress$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseLocationAddress$inboundSchema;
  /** @deprecated use `ActivityGetResponseLocationAddress$outboundSchema` instead. */
  export const outboundSchema =
    ActivityGetResponseLocationAddress$outboundSchema;
  /** @deprecated use `ActivityGetResponseLocationAddress$Outbound` instead. */
  export type Outbound = ActivityGetResponseLocationAddress$Outbound;
}

export function activityGetResponseLocationAddressToJSON(
  activityGetResponseLocationAddress: ActivityGetResponseLocationAddress,
): string {
  return JSON.stringify(
    ActivityGetResponseLocationAddress$outboundSchema.parse(
      activityGetResponseLocationAddress,
    ),
  );
}

export function activityGetResponseLocationAddressFromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponseLocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivityGetResponseLocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponseLocationAddress' from JSON`,
  );
}

/** @internal */
export const ActivityGetResponseShowAs$inboundSchema: z.ZodNativeEnum<
  typeof ActivityGetResponseShowAs
> = z.nativeEnum(ActivityGetResponseShowAs);

/** @internal */
export const ActivityGetResponseShowAs$outboundSchema: z.ZodNativeEnum<
  typeof ActivityGetResponseShowAs
> = ActivityGetResponseShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseShowAs$ {
  /** @deprecated use `ActivityGetResponseShowAs$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseShowAs$inboundSchema;
  /** @deprecated use `ActivityGetResponseShowAs$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseShowAs$outboundSchema;
}

/** @internal */
export const ActivityGetResponseValue6$inboundSchema: z.ZodType<
  ActivityGetResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivityGetResponseValue6$Outbound = {};

/** @internal */
export const ActivityGetResponseValue6$outboundSchema: z.ZodType<
  ActivityGetResponseValue6$Outbound,
  z.ZodTypeDef,
  ActivityGetResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseValue6$ {
  /** @deprecated use `ActivityGetResponseValue6$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseValue6$inboundSchema;
  /** @deprecated use `ActivityGetResponseValue6$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseValue6$outboundSchema;
  /** @deprecated use `ActivityGetResponseValue6$Outbound` instead. */
  export type Outbound = ActivityGetResponseValue6$Outbound;
}

export function activityGetResponseValue6ToJSON(
  activityGetResponseValue6: ActivityGetResponseValue6,
): string {
  return JSON.stringify(
    ActivityGetResponseValue6$outboundSchema.parse(activityGetResponseValue6),
  );
}

export function activityGetResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityGetResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponseValue6' from JSON`,
  );
}

/** @internal */
export const ActivityGetResponseValue4$inboundSchema: z.ZodType<
  ActivityGetResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivityGetResponseValue4$Outbound = {};

/** @internal */
export const ActivityGetResponseValue4$outboundSchema: z.ZodType<
  ActivityGetResponseValue4$Outbound,
  z.ZodTypeDef,
  ActivityGetResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseValue4$ {
  /** @deprecated use `ActivityGetResponseValue4$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseValue4$inboundSchema;
  /** @deprecated use `ActivityGetResponseValue4$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseValue4$outboundSchema;
  /** @deprecated use `ActivityGetResponseValue4$Outbound` instead. */
  export type Outbound = ActivityGetResponseValue4$Outbound;
}

export function activityGetResponseValue4ToJSON(
  activityGetResponseValue4: ActivityGetResponseValue4,
): string {
  return JSON.stringify(
    ActivityGetResponseValue4$outboundSchema.parse(activityGetResponseValue4),
  );
}

export function activityGetResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityGetResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponseValue4' from JSON`,
  );
}

/** @internal */
export const ActivityGetResponseValue$inboundSchema: z.ZodType<
  ActivityGetResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivityGetResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivityGetResponseValue6$inboundSchema)),
]);

/** @internal */
export type ActivityGetResponseValue$Outbound =
  | ActivityGetResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivityGetResponseValue6$Outbound>;

/** @internal */
export const ActivityGetResponseValue$outboundSchema: z.ZodType<
  ActivityGetResponseValue$Outbound,
  z.ZodTypeDef,
  ActivityGetResponseValue
> = z.union([
  z.lazy(() => ActivityGetResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivityGetResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseValue$ {
  /** @deprecated use `ActivityGetResponseValue$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseValue$inboundSchema;
  /** @deprecated use `ActivityGetResponseValue$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseValue$outboundSchema;
  /** @deprecated use `ActivityGetResponseValue$Outbound` instead. */
  export type Outbound = ActivityGetResponseValue$Outbound;
}

export function activityGetResponseValueToJSON(
  activityGetResponseValue: ActivityGetResponseValue,
): string {
  return JSON.stringify(
    ActivityGetResponseValue$outboundSchema.parse(activityGetResponseValue),
  );
}

export function activityGetResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityGetResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponseValue' from JSON`,
  );
}

/** @internal */
export const ActivityGetResponseCustomFields$inboundSchema: z.ZodType<
  ActivityGetResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivityGetResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivityGetResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ActivityGetResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ActivityGetResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivityGetResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ActivityGetResponseCustomFields$outboundSchema: z.ZodType<
  ActivityGetResponseCustomFields$Outbound,
  z.ZodTypeDef,
  ActivityGetResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivityGetResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivityGetResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseCustomFields$ {
  /** @deprecated use `ActivityGetResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseCustomFields$inboundSchema;
  /** @deprecated use `ActivityGetResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseCustomFields$outboundSchema;
  /** @deprecated use `ActivityGetResponseCustomFields$Outbound` instead. */
  export type Outbound = ActivityGetResponseCustomFields$Outbound;
}

export function activityGetResponseCustomFieldsToJSON(
  activityGetResponseCustomFields: ActivityGetResponseCustomFields,
): string {
  return JSON.stringify(
    ActivityGetResponseCustomFields$outboundSchema.parse(
      activityGetResponseCustomFields,
    ),
  );
}

export function activityGetResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityGetResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const ActivityGetResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof ActivityGetResponseStatus
> = z.nativeEnum(ActivityGetResponseStatus);

/** @internal */
export const ActivityGetResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof ActivityGetResponseStatus
> = ActivityGetResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseStatus$ {
  /** @deprecated use `ActivityGetResponseStatus$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseStatus$inboundSchema;
  /** @deprecated use `ActivityGetResponseStatus$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseStatus$outboundSchema;
}

/** @internal */
export const ActivityGetResponseAttendees$inboundSchema: z.ZodType<
  ActivityGetResponseAttendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ActivityGetResponseStatus$inboundSchema).optional(),
  user_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
    "user_id": "userId",
    "contact_id": "contactId",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
  });
});

/** @internal */
export type ActivityGetResponseAttendees$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
  user_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const ActivityGetResponseAttendees$outboundSchema: z.ZodType<
  ActivityGetResponseAttendees$Outbound,
  z.ZodTypeDef,
  ActivityGetResponseAttendees
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ActivityGetResponseStatus$outboundSchema).optional(),
  userId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
    userId: "user_id",
    contactId: "contact_id",
    updatedAt: "updated_at",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseAttendees$ {
  /** @deprecated use `ActivityGetResponseAttendees$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseAttendees$inboundSchema;
  /** @deprecated use `ActivityGetResponseAttendees$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseAttendees$outboundSchema;
  /** @deprecated use `ActivityGetResponseAttendees$Outbound` instead. */
  export type Outbound = ActivityGetResponseAttendees$Outbound;
}

export function activityGetResponseAttendeesToJSON(
  activityGetResponseAttendees: ActivityGetResponseAttendees,
): string {
  return JSON.stringify(
    ActivityGetResponseAttendees$outboundSchema.parse(
      activityGetResponseAttendees,
    ),
  );
}

export function activityGetResponseAttendeesFromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponseAttendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityGetResponseAttendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponseAttendees' from JSON`,
  );
}

/** @internal */
export const ActivityGetResponseCustomMappings$inboundSchema: z.ZodType<
  ActivityGetResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivityGetResponseCustomMappings$Outbound = {};

/** @internal */
export const ActivityGetResponseCustomMappings$outboundSchema: z.ZodType<
  ActivityGetResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  ActivityGetResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseCustomMappings$ {
  /** @deprecated use `ActivityGetResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseCustomMappings$inboundSchema;
  /** @deprecated use `ActivityGetResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    ActivityGetResponseCustomMappings$outboundSchema;
  /** @deprecated use `ActivityGetResponseCustomMappings$Outbound` instead. */
  export type Outbound = ActivityGetResponseCustomMappings$Outbound;
}

export function activityGetResponseCustomMappingsToJSON(
  activityGetResponseCustomMappings: ActivityGetResponseCustomMappings,
): string {
  return JSON.stringify(
    ActivityGetResponseCustomMappings$outboundSchema.parse(
      activityGetResponseCustomMappings,
    ),
  );
}

export function activityGetResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityGetResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const ActivityGetResponseExtendPaths$inboundSchema: z.ZodType<
  ActivityGetResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ActivityGetResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ActivityGetResponseExtendPaths$outboundSchema: z.ZodType<
  ActivityGetResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ActivityGetResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseExtendPaths$ {
  /** @deprecated use `ActivityGetResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseExtendPaths$inboundSchema;
  /** @deprecated use `ActivityGetResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseExtendPaths$outboundSchema;
  /** @deprecated use `ActivityGetResponseExtendPaths$Outbound` instead. */
  export type Outbound = ActivityGetResponseExtendPaths$Outbound;
}

export function activityGetResponseExtendPathsToJSON(
  activityGetResponseExtendPaths: ActivityGetResponseExtendPaths,
): string {
  return JSON.stringify(
    ActivityGetResponseExtendPaths$outboundSchema.parse(
      activityGetResponseExtendPaths,
    ),
  );
}

export function activityGetResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityGetResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ActivityGetResponsePassThrough$inboundSchema: z.ZodType<
  ActivityGetResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ActivityGetResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ActivityGetResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ActivityGetResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ActivityGetResponsePassThrough$outboundSchema: z.ZodType<
  ActivityGetResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ActivityGetResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ActivityGetResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponsePassThrough$ {
  /** @deprecated use `ActivityGetResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponsePassThrough$inboundSchema;
  /** @deprecated use `ActivityGetResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponsePassThrough$outboundSchema;
  /** @deprecated use `ActivityGetResponsePassThrough$Outbound` instead. */
  export type Outbound = ActivityGetResponsePassThrough$Outbound;
}

export function activityGetResponsePassThroughToJSON(
  activityGetResponsePassThrough: ActivityGetResponsePassThrough,
): string {
  return JSON.stringify(
    ActivityGetResponsePassThrough$outboundSchema.parse(
      activityGetResponsePassThrough,
    ),
  );
}

export function activityGetResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityGetResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ActivityGetResponseData$inboundSchema: z.ZodType<
  ActivityGetResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  downstream_id: z.nullable(z.string()).optional(),
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivityGetResponseType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() =>
    ActivityGetResponseLocationAddress$inboundSchema
  ).optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(ActivityGetResponseShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  duration_minutes: z.nullable(z.number().int()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => ActivityGetResponseCustomFields$inboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => ActivityGetResponseAttendees$inboundSchema))
    .optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ActivityGetResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => ActivityGetResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "downstream_id": "downstreamId",
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "duration_minutes": "durationMinutes",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ActivityGetResponseData$Outbound = {
  id?: string | undefined;
  downstream_id?: string | null | undefined;
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: ActivityGetResponseLocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  duration_minutes?: number | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<ActivityGetResponseCustomFields$Outbound> | undefined;
  attendees?: Array<ActivityGetResponseAttendees$Outbound> | undefined;
  custom_mappings?:
    | ActivityGetResponseCustomMappings$Outbound
    | null
    | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ActivityGetResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const ActivityGetResponseData$outboundSchema: z.ZodType<
  ActivityGetResponseData$Outbound,
  z.ZodTypeDef,
  ActivityGetResponseData
> = z.object({
  id: z.string().optional(),
  downstreamId: z.nullable(z.string()).optional(),
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(ActivityGetResponseType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() =>
    ActivityGetResponseLocationAddress$outboundSchema
  ).optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(ActivityGetResponseShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  durationMinutes: z.nullable(z.number().int()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => ActivityGetResponseCustomFields$outboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => ActivityGetResponseAttendees$outboundSchema))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => ActivityGetResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => ActivityGetResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    downstreamId: "downstream_id",
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    durationMinutes: "duration_minutes",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponseData$ {
  /** @deprecated use `ActivityGetResponseData$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponseData$inboundSchema;
  /** @deprecated use `ActivityGetResponseData$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponseData$outboundSchema;
  /** @deprecated use `ActivityGetResponseData$Outbound` instead. */
  export type Outbound = ActivityGetResponseData$Outbound;
}

export function activityGetResponseDataToJSON(
  activityGetResponseData: ActivityGetResponseData,
): string {
  return JSON.stringify(
    ActivityGetResponseData$outboundSchema.parse(activityGetResponseData),
  );
}

export function activityGetResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityGetResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponseData' from JSON`,
  );
}

/** @internal */
export const ActivityGetResponse$inboundSchema: z.ZodType<
  ActivityGetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivityGetResponseData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ActivityGetResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ActivityGetResponseData$Outbound;
};

/** @internal */
export const ActivityGetResponse$outboundSchema: z.ZodType<
  ActivityGetResponse$Outbound,
  z.ZodTypeDef,
  ActivityGetResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivityGetResponseData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityGetResponse$ {
  /** @deprecated use `ActivityGetResponse$inboundSchema` instead. */
  export const inboundSchema = ActivityGetResponse$inboundSchema;
  /** @deprecated use `ActivityGetResponse$outboundSchema` instead. */
  export const outboundSchema = ActivityGetResponse$outboundSchema;
  /** @deprecated use `ActivityGetResponse$Outbound` instead. */
  export type Outbound = ActivityGetResponse$Outbound;
}

export function activityGetResponseToJSON(
  activityGetResponse: ActivityGetResponse,
): string {
  return JSON.stringify(
    ActivityGetResponse$outboundSchema.parse(activityGetResponse),
  );
}

export function activityGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivityGetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityGetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityGetResponse' from JSON`,
  );
}
