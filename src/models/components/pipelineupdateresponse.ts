/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated details of the pipeline after a successful PATCH operation. It encapsulates all the fields that were modified, reflecting the current state of the pipeline in the CRM system. This object is always included in the response to provide a comprehensive view of the pipeline's updated data.
 */
export type PipelineUpdateResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Pipeline updated
 */
export type PipelineUpdateResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the PATCH operation on the pipeline. A status code of 200 signifies a successful update, while other codes may indicate errors or issues with the request, such as a 404 if the pipeline ID does not exist.
   */
  statusCode: number;
  /**
   * The HTTP response status message accompanying the status code. This string provides a textual representation of the status code, such as 'OK' for a successful request. It helps in understanding the outcome of the operation in a human-readable format.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which third-party service (e.g., Pipedrive) the pipeline update was performed on, especially useful when multiple integrations are in use.
   */
  service: string;
  /**
   * The name of the unified API resource that was targeted by the operation. This string specifies the type of resource, such as 'pipeline', that was updated, helping to confirm the exact resource affected by the PATCH request.
   */
  resource: string;
  /**
   * The specific operation that was performed, in this case, 'pipelinesUpdate'. This string confirms the action taken by the API, ensuring that the intended update operation was executed on the specified pipeline.
   */
  operation: string;
  /**
   * This object contains the updated details of the pipeline after a successful PATCH operation. It encapsulates all the fields that were modified, reflecting the current state of the pipeline in the CRM system. This object is always included in the response to provide a comprehensive view of the pipeline's updated data.
   */
  data: PipelineUpdateResponseUnifiedId;
};

/** @internal */
export const PipelineUpdateResponseUnifiedId$inboundSchema: z.ZodType<
  PipelineUpdateResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PipelineUpdateResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const PipelineUpdateResponseUnifiedId$outboundSchema: z.ZodType<
  PipelineUpdateResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  PipelineUpdateResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelineUpdateResponseUnifiedId$ {
  /** @deprecated use `PipelineUpdateResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = PipelineUpdateResponseUnifiedId$inboundSchema;
  /** @deprecated use `PipelineUpdateResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = PipelineUpdateResponseUnifiedId$outboundSchema;
  /** @deprecated use `PipelineUpdateResponseUnifiedId$Outbound` instead. */
  export type Outbound = PipelineUpdateResponseUnifiedId$Outbound;
}

export function pipelineUpdateResponseUnifiedIdToJSON(
  pipelineUpdateResponseUnifiedId: PipelineUpdateResponseUnifiedId,
): string {
  return JSON.stringify(
    PipelineUpdateResponseUnifiedId$outboundSchema.parse(
      pipelineUpdateResponseUnifiedId,
    ),
  );
}

export function pipelineUpdateResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<PipelineUpdateResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelineUpdateResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelineUpdateResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const PipelineUpdateResponse$inboundSchema: z.ZodType<
  PipelineUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelineUpdateResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type PipelineUpdateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: PipelineUpdateResponseUnifiedId$Outbound;
};

/** @internal */
export const PipelineUpdateResponse$outboundSchema: z.ZodType<
  PipelineUpdateResponse$Outbound,
  z.ZodTypeDef,
  PipelineUpdateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelineUpdateResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelineUpdateResponse$ {
  /** @deprecated use `PipelineUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = PipelineUpdateResponse$inboundSchema;
  /** @deprecated use `PipelineUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = PipelineUpdateResponse$outboundSchema;
  /** @deprecated use `PipelineUpdateResponse$Outbound` instead. */
  export type Outbound = PipelineUpdateResponse$Outbound;
}

export function pipelineUpdateResponseToJSON(
  pipelineUpdateResponse: PipelineUpdateResponse,
): string {
  return JSON.stringify(
    PipelineUpdateResponse$outboundSchema.parse(pipelineUpdateResponse),
  );
}

export function pipelineUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<PipelineUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelineUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelineUpdateResponse' from JSON`,
  );
}
