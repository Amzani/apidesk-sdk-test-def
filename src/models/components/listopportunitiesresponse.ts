/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Denotes the currency in which the monetary amount is expressed, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This string value ensures that the financial data is accurately interpreted across different regions and is essential for international business operations.
 */
export const ListOpportunitiesResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Denotes the currency in which the monetary amount is expressed, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This string value ensures that the financial data is accurately interpreted across different regions and is essential for international business operations.
 */
export type ListOpportunitiesResponseCurrency = ClosedEnum<
  typeof ListOpportunitiesResponseCurrency
>;

export type ListOpportunitiesResponseValue6 = {};

export type ListOpportunitiesResponseValue4 = {};

/**
 * The value assigned to a custom field for an opportunity, represented as a string. This property holds specific data that can vary depending on the custom field's purpose, such as a numeric value, text, or other relevant information. It is optional and may be empty if no value is set.
 */
export type ListOpportunitiesResponseValue =
  | ListOpportunitiesResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListOpportunitiesResponseValue6>;

export type ListOpportunitiesResponseCustomFields = {
  /**
   * A unique string identifier for each custom field within the opportunity. This ID is essential for referencing and managing specific custom fields programmatically.
   */
  id: string | null;
  /**
   * The display name of the custom field, provided as a string. This name is used to identify the custom field in user interfaces and reports, making it easier for users to understand the purpose of the field.
   */
  name?: string | null | undefined;
  /**
   * This property contains additional information about a custom field associated with an opportunity. It is a string that provides context or details that are not covered by standard fields, allowing for more tailored data representation. This field is optional and may be empty if no extra information is provided.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to a custom field for an opportunity, represented as a string. This property holds specific data that can vary depending on the custom field's purpose, such as a numeric value, text, or other relevant information. It is optional and may be empty if no value is set.
   */
  value?:
    | ListOpportunitiesResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListOpportunitiesResponseValue6>
    | null
    | undefined;
};

/**
 * An object containing custom mappings configured on the resource, if any. This allows for flexibility in data representation and integration with other systems. Developers can use this to access additional, non-standard fields that have been tailored to specific business needs.
 */
export type ListOpportunitiesResponseCustomMappings = {};

export type ListOpportunitiesResponseExtendPaths = {
  /**
   * This property specifies the JSONPath string that indicates where a particular value should be applied within the data structure. It is a required field that ensures the correct placement of values, facilitating accurate data manipulation and integration processes.
   */
  path: string;
  /**
   * This property represents the value to be set at the specified JSONPath within the data structure. It can be of any data type, providing flexibility in the types of data that can be integrated or modified. This is essential for developers who need to apply diverse data updates or extensions.
   */
  value?: any | undefined;
};

export type ListOpportunitiesResponsePassThrough = {
  /**
   * A string identifier for the service to which the pass_through data should be applied. This ensures that the custom data is correctly routed and processed by the intended service, facilitating seamless integration and operation across different platforms.
   */
  serviceId: string;
  /**
   * This property contains an optional identifier for a specific workflow operation within the CRM system. It is a string that helps in associating the pass-through data with a particular operation, especially useful when multiple downstream requests are involved in a Unify call. This allows developers to track and manage operations more effectively.
   */
  operationId?: string | undefined;
  /**
   * This property is an object that allows for the direct extension of data with any additional properties. It provides flexibility in adding custom fields or data points to the response, enabling developers to tailor the CRM data to specific needs or integrations.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property is an array of objects designed for structured data modifications using specified paths. Each object within the array defines a path and a value, allowing precise updates or extensions to the CRM data structure. This feature is particularly useful for developers needing to apply complex data transformations or integrations.
   */
  extendPaths?: Array<ListOpportunitiesResponseExtendPaths> | undefined;
};

export type ListOpportunitiesResponseData = {
  /**
   * A unique identifier for each opportunity within the CRM system. This string is used to distinguish and reference individual opportunities, facilitating operations such as updates or detailed queries on specific opportunities.
   */
  id?: string | undefined;
  /**
   * The title or name of the opportunity, which serves as a brief descriptor or label for the sales opportunity. This string is crucial for identifying and differentiating opportunities in lists and reports.
   */
  title: string;
  /**
   * The unique identifier of the primary contact associated with the opportunity. This string links the opportunity to a specific contact, enabling users to quickly access contact details and maintain relationships.
   */
  primaryContactId: string | null;
  /**
   * A textual description of the opportunity, providing additional context or details about the sales opportunity. This optional field can include information such as the opportunity's background, objectives, or any relevant notes.
   */
  description?: string | null | undefined;
  /**
   * Specifies the category or classification of the opportunity within the CRM system. This string value helps in organizing and filtering opportunities based on their type, such as 'New Business', 'Renewal', or 'Upsell'. It is optional and may not be present for all opportunities.
   */
  type?: string | null | undefined;
  /**
   * Represents the total financial value associated with the opportunity, expressed as a numerical amount. This value is crucial for assessing the potential revenue impact of the opportunity and is typically used in financial forecasting and reporting.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Denotes the currency in which the monetary amount is expressed, following the ISO 4217 standard (e.g., 'USD' for US Dollars). This string value ensures that the financial data is accurately interpreted across different regions and is essential for international business operations.
   */
  currency?: ListOpportunitiesResponseCurrency | null | undefined;
  /**
   * Indicates the likelihood of successfully closing the opportunity, represented as a percentage from 0 to 100. This numerical value helps sales teams prioritize efforts by focusing on opportunities with higher chances of success.
   */
  winProbability?: number | null | undefined;
  /**
   * Calculates the potential revenue expected from the opportunity, factoring in the win probability. This number is used for revenue projections and strategic planning, providing insights into future financial performance.
   */
  expectedRevenue?: number | null | undefined;
  /**
   * The actual closing date for the opportunity, formatted as a string in ISO 8601 date format (YYYY-MM-DD). If this field is null, it indicates that the opportunity is still open and has not been closed yet. This property helps users track when deals are finalized, aiding in sales forecasting and analysis.
   */
  closeDate?: RFCDate | null | undefined;
  /**
   * A unique string identifier representing the specific reason why an opportunity was lost. This ID is used to categorize and analyze lost opportunities, allowing users to identify patterns or common reasons for lost deals. It is essential for generating reports and improving sales strategies.
   */
  lossReasonId?: string | null | undefined;
  /**
   * A descriptive string explaining why the opportunity was lost. This field provides context and insights into the factors that led to the loss of a deal, which can be used for training and improving future sales approaches. It complements the loss_reason_id by offering a human-readable explanation.
   */
  lossReason?: string | null | undefined;
  /**
   * A unique string identifier for the reason why an opportunity was won. This ID helps categorize successful deals, enabling users to analyze winning strategies and replicate successful tactics in future opportunities. It is crucial for understanding what contributes to successful sales outcomes.
   */
  wonReasonId?: string | null | undefined;
  /**
   * A descriptive string detailing the reason why the opportunity was won. This information provides valuable insights into the factors that contributed to closing the deal successfully, which can be leveraged to enhance sales techniques and strategies. It works alongside the won_reason_id to offer a comprehensive understanding of successful sales.
   */
  wonReason?: string | null | undefined;
  /**
   * The unique identifier for the pipeline that this opportunity is part of. This ID is a string and helps in categorizing opportunities within specific sales processes. It is useful for filtering and organizing opportunities based on their respective pipelines.
   */
  pipelineId?: string | null | undefined;
  /**
   * The unique identifier for the stage within the pipeline where the opportunity currently resides. This string value is crucial for tracking the progress of an opportunity through the sales funnel, allowing for precise management and forecasting.
   */
  pipelineStageId?: string | null | undefined;
  /**
   * The unique identifier for the origin of the opportunity, represented as a string. This ID helps in tracing back the opportunity to its initial source, which is essential for analyzing lead generation effectiveness and strategy.
   */
  sourceId?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with this opportunity, provided as a string. This ID links the opportunity to its originating lead, facilitating detailed tracking and management of sales prospects.
   */
  leadId?: string | null | undefined;
  /**
   * The origin or method through which the lead associated with this opportunity was acquired, expressed as a string. Understanding the lead source is vital for evaluating the effectiveness of different marketing channels and strategies.
   */
  leadSource?: string | null | undefined;
  /**
   * A unique string identifier representing the contact associated with this opportunity. This ID is used to link the opportunity to a specific contact within the CRM system, facilitating easy reference and management of related contact information.
   */
  contactId?: string | null | undefined;
  /**
   * An array containing unique string identifiers for all contacts linked to this opportunity. This allows for the association of multiple contacts with a single opportunity, enabling comprehensive tracking of all involved parties.
   */
  contactIds?: Array<string> | undefined;
  /**
   * A unique string identifier for the company associated with the opportunity. This ID helps in linking the opportunity to a specific company, ensuring accurate tracking and management of company-related opportunities.
   */
  companyId?: string | null | undefined;
  /**
   * The official name of the company associated with the opportunity, represented as a string. This name is used for display purposes and helps users identify the company involved in the opportunity within the CRM system.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier of the user who owns the opportunity. This ID is a string that links the opportunity to a specific user within the CRM system, allowing for tracking and management of sales responsibilities.
   */
  ownerId?: string | null | undefined;
  /**
   * The priority level of the opportunity, represented as a string. This indicates the importance or urgency of the opportunity, helping users prioritize their sales efforts effectively.
   */
  priority?: string | null | undefined;
  /**
   * The current status of the opportunity, provided as a string. This reflects the stage of the sales process the opportunity is in, such as 'Open', 'Closed', or 'In Progress', aiding in sales pipeline management.
   */
  status?: string | null | undefined;
  /**
   * The unique identifier of the current status of the opportunity, given as a string. This ID helps in programmatically distinguishing between different statuses within the CRM system.
   */
  statusId?: string | null | undefined;
  /**
   * An array of tags associated with the opportunity. Tags are used to categorize and filter opportunities, enabling users to organize and retrieve opportunities based on specific criteria.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The total number of interactions recorded for this opportunity. This numeric value helps in assessing the level of engagement and activity related to the opportunity, providing insights into customer interest and sales efforts.
   */
  interactionCount?: number | null | undefined;
  /**
   * A collection of custom fields associated with the opportunity, allowing for additional, user-defined data to be stored. Each entry in the array represents a custom field object, which can include various attributes such as id and name.
   */
  customFields?: Array<ListOpportunitiesResponseCustomFields> | undefined;
  /**
   * This property records the date and time when the opportunity's stage was last updated, formatted as an ISO 8601 string. It helps track the progress of an opportunity through different stages, providing insights into the sales process timeline. This field is optional and may be null if the stage has not changed.
   */
  stageLastChangedAt?: Date | null | undefined;
  /**
   * The timestamp of the most recent activity related to the opportunity, formatted as an ISO 8601 string. This property is crucial for understanding the recency of interactions or updates, aiding in prioritizing opportunities based on activity levels. It is optional and may be null if no activities have been recorded.
   */
  lastActivityAt?: string | null | undefined;
  /**
   * A boolean flag indicating whether the opportunity has been marked as deleted. This property helps in filtering out inactive or removed opportunities from active lists, ensuring data integrity and relevance. It is optional and defaults to false if not explicitly set.
   */
  deleted?: boolean | undefined;
  /**
   * The date and time when the stage of the opportunity was last changed. This timestamp is formatted as an ISO 8601 string, allowing developers to track the progression of opportunities over time. It is useful for understanding the timeline of sales processes and identifying any delays or accelerations in the sales pipeline.
   */
  dateStageChanged?: Date | null | undefined;
  /**
   * The date and time when the opportunity was last contacted, formatted as an ISO 8601 string. This information helps in managing follow-ups and ensuring timely communication with potential clients. It is crucial for maintaining engagement and moving opportunities through the sales funnel.
   */
  dateLastContacted?: Date | null | undefined;
  /**
   * The date and time when the lead associated with the opportunity was created, provided as an ISO 8601 string. This property helps in understanding the lifecycle of an opportunity from its inception. It is essential for analyzing lead generation effectiveness and tracking the duration from lead creation to opportunity conversion.
   */
  dateLeadCreated?: Date | null | undefined;
  /**
   * An object containing custom mappings configured on the resource, if any. This allows for flexibility in data representation and integration with other systems. Developers can use this to access additional, non-standard fields that have been tailored to specific business needs.
   */
  customMappings?: ListOpportunitiesResponseCustomMappings | null | undefined;
  /**
   * The unique identifier of the user who last updated the opportunity, typically represented as a UUID. This helps in auditing changes and understanding who is responsible for the latest modifications. It is important for maintaining accountability and tracking user interactions with the CRM system.
   */
  updatedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who created the opportunity. This is typically a user ID string that links the opportunity to its creator within the CRM system. It helps in tracking and auditing who initiated the opportunity, providing accountability and traceability.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the opportunity was last updated, formatted as an ISO 8601 string. This timestamp is crucial for understanding the recency of changes to the opportunity, allowing users to manage and prioritize opportunities based on the latest information.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the opportunity was created, provided in ISO 8601 format. This information is essential for tracking the lifecycle of an opportunity from its inception, helping users analyze the duration and progress of sales opportunities.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array containing service-specific custom data or structured modifications that can be passed in the request body when creating or updating resources. This feature allows for flexible integration with various services by accommodating unique data requirements.
   */
  passThrough?: Array<ListOpportunitiesResponsePassThrough> | undefined;
};

/**
 * Holds the cursors used for paginating through the list of opportunities. This object includes pointers to navigate to different pages, facilitating seamless data retrieval across multiple requests.
 */
export type ListOpportunitiesResponseCursors = {
  /**
   * A string cursor that allows navigation to the previous page of results. This is particularly useful for users who need to review earlier data entries in the paginated list of opportunities.
   */
  previous?: string | null | undefined;
  /**
   * A string cursor representing the current page of results. It is essential for tracking the current position within the paginated data set, ensuring continuity in data retrieval processes.
   */
  current?: string | null | undefined;
  /**
   * A string representing the cursor used to fetch the next set of results in a paginated response. This is essential for navigating through large datasets efficiently, ensuring that developers can continue retrieving additional opportunities beyond the current page.
   */
  next?: string | null | undefined;
};

/**
 * Contains metadata about the response, including pagination details and cursors for navigating through pages of results. This object helps in understanding the context of the data returned and managing large datasets efficiently.
 */
export type ListOpportunitiesResponseMeta = {
  /**
   * Indicates the total number of opportunity records included in the current page of the response. This integer value helps in assessing the volume of data retrieved per request and is useful for pagination control.
   */
  itemsOnPage?: number | undefined;
  /**
   * Holds the cursors used for paginating through the list of opportunities. This object includes pointers to navigate to different pages, facilitating seamless data retrieval across multiple requests.
   */
  cursors?: ListOpportunitiesResponseCursors | undefined;
};

/**
 * An object containing URLs that facilitate navigation between different pages of the API response. This includes links to the current, previous, and next pages, aiding in seamless data traversal and integration.
 */
export type ListOpportunitiesResponseLinks = {
  /**
   * A URL string pointing to the previous page of results in the paginated API response. This link is crucial for users who need to review or process earlier data entries.
   */
  previous?: string | null | undefined;
  /**
   * A URL string that directs to the current page of results in the API response. This ensures that users can easily refresh or revisit the current dataset without losing their place in the pagination sequence.
   */
  current?: string | undefined;
  /**
   * A URL string that provides access to the next page of results in the paginated API response. This link is vital for users to continue exploring additional opportunities beyond the current dataset.
   */
  next?: string | null | undefined;
};

/**
 * Opportunities
 */
export type ListOpportunitiesResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value helps determine if the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is crucial for error handling and debugging.
   */
  statusCode: number;
  /**
   * A brief textual representation of the HTTP response status. This string provides a human-readable status message, such as 'OK' for successful requests or 'Not Found' for errors, complementing the status_code for easier interpretation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the opportunities data is retrieved. This string uniquely identifies the service within the Apideck ecosystem, ensuring the correct integration and data source are used.
   */
  service: string;
  /**
   * The name of the Unified API resource being accessed, in this case, 'opportunities'. This string indicates the specific type of data returned by the API, helping developers understand the context of the response.
   */
  resource: string;
  /**
   * The specific operation performed by the API, represented as a string. For this endpoint, it typically indicates a 'GET' operation, reflecting the retrieval of opportunities data from the CRM system.
   */
  operation: string;
  /**
   * An array containing all the opportunity objects retrieved from the CRM system. Each element in the array represents a distinct sales opportunity, providing a comprehensive view of potential deals. This array is essential for iterating over and analyzing multiple opportunities at once.
   */
  data: Array<ListOpportunitiesResponseData>;
  /**
   * Contains metadata about the response, including pagination details and cursors for navigating through pages of results. This object helps in understanding the context of the data returned and managing large datasets efficiently.
   */
  meta?: ListOpportunitiesResponseMeta | undefined;
  /**
   * An object containing URLs that facilitate navigation between different pages of the API response. This includes links to the current, previous, and next pages, aiding in seamless data traversal and integration.
   */
  links?: ListOpportunitiesResponseLinks | undefined;
};

/** @internal */
export const ListOpportunitiesResponseCurrency$inboundSchema: z.ZodNativeEnum<
  typeof ListOpportunitiesResponseCurrency
> = z.nativeEnum(ListOpportunitiesResponseCurrency);

/** @internal */
export const ListOpportunitiesResponseCurrency$outboundSchema: z.ZodNativeEnum<
  typeof ListOpportunitiesResponseCurrency
> = ListOpportunitiesResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseCurrency$ {
  /** @deprecated use `ListOpportunitiesResponseCurrency$inboundSchema` instead. */
  export const inboundSchema = ListOpportunitiesResponseCurrency$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseCurrency$outboundSchema` instead. */
  export const outboundSchema =
    ListOpportunitiesResponseCurrency$outboundSchema;
}

/** @internal */
export const ListOpportunitiesResponseValue6$inboundSchema: z.ZodType<
  ListOpportunitiesResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListOpportunitiesResponseValue6$Outbound = {};

/** @internal */
export const ListOpportunitiesResponseValue6$outboundSchema: z.ZodType<
  ListOpportunitiesResponseValue6$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseValue6$ {
  /** @deprecated use `ListOpportunitiesResponseValue6$inboundSchema` instead. */
  export const inboundSchema = ListOpportunitiesResponseValue6$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseValue6$outboundSchema` instead. */
  export const outboundSchema = ListOpportunitiesResponseValue6$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponseValue6$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponseValue6$Outbound;
}

export function listOpportunitiesResponseValue6ToJSON(
  listOpportunitiesResponseValue6: ListOpportunitiesResponseValue6,
): string {
  return JSON.stringify(
    ListOpportunitiesResponseValue6$outboundSchema.parse(
      listOpportunitiesResponseValue6,
    ),
  );
}

export function listOpportunitiesResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOpportunitiesResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponseValue6' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponseValue4$inboundSchema: z.ZodType<
  ListOpportunitiesResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListOpportunitiesResponseValue4$Outbound = {};

/** @internal */
export const ListOpportunitiesResponseValue4$outboundSchema: z.ZodType<
  ListOpportunitiesResponseValue4$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseValue4$ {
  /** @deprecated use `ListOpportunitiesResponseValue4$inboundSchema` instead. */
  export const inboundSchema = ListOpportunitiesResponseValue4$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseValue4$outboundSchema` instead. */
  export const outboundSchema = ListOpportunitiesResponseValue4$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponseValue4$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponseValue4$Outbound;
}

export function listOpportunitiesResponseValue4ToJSON(
  listOpportunitiesResponseValue4: ListOpportunitiesResponseValue4,
): string {
  return JSON.stringify(
    ListOpportunitiesResponseValue4$outboundSchema.parse(
      listOpportunitiesResponseValue4,
    ),
  );
}

export function listOpportunitiesResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOpportunitiesResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponseValue4' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponseValue$inboundSchema: z.ZodType<
  ListOpportunitiesResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListOpportunitiesResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListOpportunitiesResponseValue6$inboundSchema)),
]);

/** @internal */
export type ListOpportunitiesResponseValue$Outbound =
  | ListOpportunitiesResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListOpportunitiesResponseValue6$Outbound>;

/** @internal */
export const ListOpportunitiesResponseValue$outboundSchema: z.ZodType<
  ListOpportunitiesResponseValue$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponseValue
> = z.union([
  z.lazy(() => ListOpportunitiesResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListOpportunitiesResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseValue$ {
  /** @deprecated use `ListOpportunitiesResponseValue$inboundSchema` instead. */
  export const inboundSchema = ListOpportunitiesResponseValue$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseValue$outboundSchema` instead. */
  export const outboundSchema = ListOpportunitiesResponseValue$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponseValue$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponseValue$Outbound;
}

export function listOpportunitiesResponseValueToJSON(
  listOpportunitiesResponseValue: ListOpportunitiesResponseValue,
): string {
  return JSON.stringify(
    ListOpportunitiesResponseValue$outboundSchema.parse(
      listOpportunitiesResponseValue,
    ),
  );
}

export function listOpportunitiesResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOpportunitiesResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponseValue' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponseCustomFields$inboundSchema: z.ZodType<
  ListOpportunitiesResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListOpportunitiesResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListOpportunitiesResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ListOpportunitiesResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ListOpportunitiesResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListOpportunitiesResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ListOpportunitiesResponseCustomFields$outboundSchema: z.ZodType<
  ListOpportunitiesResponseCustomFields$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListOpportunitiesResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListOpportunitiesResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseCustomFields$ {
  /** @deprecated use `ListOpportunitiesResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema =
    ListOpportunitiesResponseCustomFields$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    ListOpportunitiesResponseCustomFields$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponseCustomFields$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponseCustomFields$Outbound;
}

export function listOpportunitiesResponseCustomFieldsToJSON(
  listOpportunitiesResponseCustomFields: ListOpportunitiesResponseCustomFields,
): string {
  return JSON.stringify(
    ListOpportunitiesResponseCustomFields$outboundSchema.parse(
      listOpportunitiesResponseCustomFields,
    ),
  );
}

export function listOpportunitiesResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListOpportunitiesResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponseCustomMappings$inboundSchema: z.ZodType<
  ListOpportunitiesResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListOpportunitiesResponseCustomMappings$Outbound = {};

/** @internal */
export const ListOpportunitiesResponseCustomMappings$outboundSchema: z.ZodType<
  ListOpportunitiesResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseCustomMappings$ {
  /** @deprecated use `ListOpportunitiesResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema =
    ListOpportunitiesResponseCustomMappings$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    ListOpportunitiesResponseCustomMappings$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponseCustomMappings$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponseCustomMappings$Outbound;
}

export function listOpportunitiesResponseCustomMappingsToJSON(
  listOpportunitiesResponseCustomMappings:
    ListOpportunitiesResponseCustomMappings,
): string {
  return JSON.stringify(
    ListOpportunitiesResponseCustomMappings$outboundSchema.parse(
      listOpportunitiesResponseCustomMappings,
    ),
  );
}

export function listOpportunitiesResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<
  ListOpportunitiesResponseCustomMappings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListOpportunitiesResponseCustomMappings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListOpportunitiesResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponseExtendPaths$inboundSchema: z.ZodType<
  ListOpportunitiesResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListOpportunitiesResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListOpportunitiesResponseExtendPaths$outboundSchema: z.ZodType<
  ListOpportunitiesResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseExtendPaths$ {
  /** @deprecated use `ListOpportunitiesResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema =
    ListOpportunitiesResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema =
    ListOpportunitiesResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponseExtendPaths$Outbound;
}

export function listOpportunitiesResponseExtendPathsToJSON(
  listOpportunitiesResponseExtendPaths: ListOpportunitiesResponseExtendPaths,
): string {
  return JSON.stringify(
    ListOpportunitiesResponseExtendPaths$outboundSchema.parse(
      listOpportunitiesResponseExtendPaths,
    ),
  );
}

export function listOpportunitiesResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListOpportunitiesResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponsePassThrough$inboundSchema: z.ZodType<
  ListOpportunitiesResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListOpportunitiesResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListOpportunitiesResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?:
    | Array<ListOpportunitiesResponseExtendPaths$Outbound>
    | undefined;
};

/** @internal */
export const ListOpportunitiesResponsePassThrough$outboundSchema: z.ZodType<
  ListOpportunitiesResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListOpportunitiesResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponsePassThrough$ {
  /** @deprecated use `ListOpportunitiesResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema =
    ListOpportunitiesResponsePassThrough$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema =
    ListOpportunitiesResponsePassThrough$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponsePassThrough$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponsePassThrough$Outbound;
}

export function listOpportunitiesResponsePassThroughToJSON(
  listOpportunitiesResponsePassThrough: ListOpportunitiesResponsePassThrough,
): string {
  return JSON.stringify(
    ListOpportunitiesResponsePassThrough$outboundSchema.parse(
      listOpportunitiesResponsePassThrough,
    ),
  );
}

export function listOpportunitiesResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListOpportunitiesResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponseData$inboundSchema: z.ZodType<
  ListOpportunitiesResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.string(),
  primary_contact_id: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(ListOpportunitiesResponseCurrency$inboundSchema)
    .optional(),
  win_probability: z.nullable(z.number()).optional(),
  expected_revenue: z.nullable(z.number()).optional(),
  close_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  loss_reason_id: z.nullable(z.string()).optional(),
  loss_reason: z.nullable(z.string()).optional(),
  won_reason_id: z.nullable(z.string()).optional(),
  won_reason: z.nullable(z.string()).optional(),
  pipeline_id: z.nullable(z.string()).optional(),
  pipeline_stage_id: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  contact_ids: z.array(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  status_id: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  interaction_count: z.nullable(z.number()).optional(),
  custom_fields: z.array(
    z.lazy(() => ListOpportunitiesResponseCustomFields$inboundSchema),
  ).optional(),
  stage_last_changed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_activity_at: z.nullable(z.string()).optional(),
  deleted: z.boolean().optional(),
  date_stage_changed: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_last_contacted: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_lead_created: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ListOpportunitiesResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => ListOpportunitiesResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "primary_contact_id": "primaryContactId",
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "expected_revenue": "expectedRevenue",
    "close_date": "closeDate",
    "loss_reason_id": "lossReasonId",
    "loss_reason": "lossReason",
    "won_reason_id": "wonReasonId",
    "won_reason": "wonReason",
    "pipeline_id": "pipelineId",
    "pipeline_stage_id": "pipelineStageId",
    "source_id": "sourceId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "contact_id": "contactId",
    "contact_ids": "contactIds",
    "company_id": "companyId",
    "company_name": "companyName",
    "owner_id": "ownerId",
    "status_id": "statusId",
    "interaction_count": "interactionCount",
    "custom_fields": "customFields",
    "stage_last_changed_at": "stageLastChangedAt",
    "last_activity_at": "lastActivityAt",
    "date_stage_changed": "dateStageChanged",
    "date_last_contacted": "dateLastContacted",
    "date_lead_created": "dateLeadCreated",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ListOpportunitiesResponseData$Outbound = {
  id?: string | undefined;
  title: string;
  primary_contact_id: string | null;
  description?: string | null | undefined;
  type?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  win_probability?: number | null | undefined;
  expected_revenue?: number | null | undefined;
  close_date?: string | null | undefined;
  loss_reason_id?: string | null | undefined;
  loss_reason?: string | null | undefined;
  won_reason_id?: string | null | undefined;
  won_reason?: string | null | undefined;
  pipeline_id?: string | null | undefined;
  pipeline_stage_id?: string | null | undefined;
  source_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  contact_id?: string | null | undefined;
  contact_ids?: Array<string> | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  owner_id?: string | null | undefined;
  priority?: string | null | undefined;
  status?: string | null | undefined;
  status_id?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  interaction_count?: number | null | undefined;
  custom_fields?:
    | Array<ListOpportunitiesResponseCustomFields$Outbound>
    | undefined;
  stage_last_changed_at?: string | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  date_stage_changed?: string | null | undefined;
  date_last_contacted?: string | null | undefined;
  date_lead_created?: string | null | undefined;
  custom_mappings?:
    | ListOpportunitiesResponseCustomMappings$Outbound
    | null
    | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?:
    | Array<ListOpportunitiesResponsePassThrough$Outbound>
    | undefined;
};

/** @internal */
export const ListOpportunitiesResponseData$outboundSchema: z.ZodType<
  ListOpportunitiesResponseData$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponseData
> = z.object({
  id: z.string().optional(),
  title: z.string(),
  primaryContactId: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(ListOpportunitiesResponseCurrency$outboundSchema)
    .optional(),
  winProbability: z.nullable(z.number()).optional(),
  expectedRevenue: z.nullable(z.number()).optional(),
  closeDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  lossReasonId: z.nullable(z.string()).optional(),
  lossReason: z.nullable(z.string()).optional(),
  wonReasonId: z.nullable(z.string()).optional(),
  wonReason: z.nullable(z.string()).optional(),
  pipelineId: z.nullable(z.string()).optional(),
  pipelineStageId: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  contactIds: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  statusId: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  interactionCount: z.nullable(z.number()).optional(),
  customFields: z.array(
    z.lazy(() => ListOpportunitiesResponseCustomFields$outboundSchema),
  ).optional(),
  stageLastChangedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  lastActivityAt: z.nullable(z.string()).optional(),
  deleted: z.boolean().optional(),
  dateStageChanged: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  dateLastContacted: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  dateLeadCreated: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => ListOpportunitiesResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(
    z.lazy(() => ListOpportunitiesResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    primaryContactId: "primary_contact_id",
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    expectedRevenue: "expected_revenue",
    closeDate: "close_date",
    lossReasonId: "loss_reason_id",
    lossReason: "loss_reason",
    wonReasonId: "won_reason_id",
    wonReason: "won_reason",
    pipelineId: "pipeline_id",
    pipelineStageId: "pipeline_stage_id",
    sourceId: "source_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    contactId: "contact_id",
    contactIds: "contact_ids",
    companyId: "company_id",
    companyName: "company_name",
    ownerId: "owner_id",
    statusId: "status_id",
    interactionCount: "interaction_count",
    customFields: "custom_fields",
    stageLastChangedAt: "stage_last_changed_at",
    lastActivityAt: "last_activity_at",
    dateStageChanged: "date_stage_changed",
    dateLastContacted: "date_last_contacted",
    dateLeadCreated: "date_lead_created",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseData$ {
  /** @deprecated use `ListOpportunitiesResponseData$inboundSchema` instead. */
  export const inboundSchema = ListOpportunitiesResponseData$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseData$outboundSchema` instead. */
  export const outboundSchema = ListOpportunitiesResponseData$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponseData$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponseData$Outbound;
}

export function listOpportunitiesResponseDataToJSON(
  listOpportunitiesResponseData: ListOpportunitiesResponseData,
): string {
  return JSON.stringify(
    ListOpportunitiesResponseData$outboundSchema.parse(
      listOpportunitiesResponseData,
    ),
  );
}

export function listOpportunitiesResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOpportunitiesResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponseData' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponseCursors$inboundSchema: z.ZodType<
  ListOpportunitiesResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListOpportunitiesResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListOpportunitiesResponseCursors$outboundSchema: z.ZodType<
  ListOpportunitiesResponseCursors$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseCursors$ {
  /** @deprecated use `ListOpportunitiesResponseCursors$inboundSchema` instead. */
  export const inboundSchema = ListOpportunitiesResponseCursors$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseCursors$outboundSchema` instead. */
  export const outboundSchema = ListOpportunitiesResponseCursors$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponseCursors$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponseCursors$Outbound;
}

export function listOpportunitiesResponseCursorsToJSON(
  listOpportunitiesResponseCursors: ListOpportunitiesResponseCursors,
): string {
  return JSON.stringify(
    ListOpportunitiesResponseCursors$outboundSchema.parse(
      listOpportunitiesResponseCursors,
    ),
  );
}

export function listOpportunitiesResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOpportunitiesResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponseCursors' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponseMeta$inboundSchema: z.ZodType<
  ListOpportunitiesResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ListOpportunitiesResponseCursors$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ListOpportunitiesResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ListOpportunitiesResponseCursors$Outbound | undefined;
};

/** @internal */
export const ListOpportunitiesResponseMeta$outboundSchema: z.ZodType<
  ListOpportunitiesResponseMeta$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ListOpportunitiesResponseCursors$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseMeta$ {
  /** @deprecated use `ListOpportunitiesResponseMeta$inboundSchema` instead. */
  export const inboundSchema = ListOpportunitiesResponseMeta$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseMeta$outboundSchema` instead. */
  export const outboundSchema = ListOpportunitiesResponseMeta$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponseMeta$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponseMeta$Outbound;
}

export function listOpportunitiesResponseMetaToJSON(
  listOpportunitiesResponseMeta: ListOpportunitiesResponseMeta,
): string {
  return JSON.stringify(
    ListOpportunitiesResponseMeta$outboundSchema.parse(
      listOpportunitiesResponseMeta,
    ),
  );
}

export function listOpportunitiesResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOpportunitiesResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponseMeta' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponseLinks$inboundSchema: z.ZodType<
  ListOpportunitiesResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListOpportunitiesResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListOpportunitiesResponseLinks$outboundSchema: z.ZodType<
  ListOpportunitiesResponseLinks$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponseLinks$ {
  /** @deprecated use `ListOpportunitiesResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ListOpportunitiesResponseLinks$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ListOpportunitiesResponseLinks$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponseLinks$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponseLinks$Outbound;
}

export function listOpportunitiesResponseLinksToJSON(
  listOpportunitiesResponseLinks: ListOpportunitiesResponseLinks,
): string {
  return JSON.stringify(
    ListOpportunitiesResponseLinks$outboundSchema.parse(
      listOpportunitiesResponseLinks,
    ),
  );
}

export function listOpportunitiesResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOpportunitiesResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponseLinks' from JSON`,
  );
}

/** @internal */
export const ListOpportunitiesResponse$inboundSchema: z.ZodType<
  ListOpportunitiesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListOpportunitiesResponseData$inboundSchema)),
  meta: z.lazy(() => ListOpportunitiesResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => ListOpportunitiesResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListOpportunitiesResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ListOpportunitiesResponseData$Outbound>;
  meta?: ListOpportunitiesResponseMeta$Outbound | undefined;
  links?: ListOpportunitiesResponseLinks$Outbound | undefined;
};

/** @internal */
export const ListOpportunitiesResponse$outboundSchema: z.ZodType<
  ListOpportunitiesResponse$Outbound,
  z.ZodTypeDef,
  ListOpportunitiesResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListOpportunitiesResponseData$outboundSchema)),
  meta: z.lazy(() => ListOpportunitiesResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => ListOpportunitiesResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOpportunitiesResponse$ {
  /** @deprecated use `ListOpportunitiesResponse$inboundSchema` instead. */
  export const inboundSchema = ListOpportunitiesResponse$inboundSchema;
  /** @deprecated use `ListOpportunitiesResponse$outboundSchema` instead. */
  export const outboundSchema = ListOpportunitiesResponse$outboundSchema;
  /** @deprecated use `ListOpportunitiesResponse$Outbound` instead. */
  export type Outbound = ListOpportunitiesResponse$Outbound;
}

export function listOpportunitiesResponseToJSON(
  listOpportunitiesResponse: ListOpportunitiesResponse,
): string {
  return JSON.stringify(
    ListOpportunitiesResponse$outboundSchema.parse(listOpportunitiesResponse),
  );
}

export function listOpportunitiesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListOpportunitiesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOpportunitiesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOpportunitiesResponse' from JSON`,
  );
}
