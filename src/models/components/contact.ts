/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the type or category of the contact, such as 'individual' or 'organization'. This classification helps in organizing contacts and applying specific business logic based on the contact type. The type is represented as a string and may influence how the contact is handled in various CRM processes.
 */
export const ContactType = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * Specifies the type or category of the contact, such as 'individual' or 'organization'. This classification helps in organizing contacts and applying specific business logic based on the contact type. The type is represented as a string and may influence how the contact is handled in various CRM processes.
 */
export type ContactType = ClosedEnum<typeof ContactType>;

/**
 * The gender of the contact, which may be used for personalized communication or demographic analysis. This field is optional and can include values such as 'male', 'female', or other gender identities.
 */
export const ContactGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact, which may be used for personalized communication or demographic analysis. This field is optional and can include values such as 'male', 'female', or other gender identities.
 */
export type ContactGender = ClosedEnum<typeof ContactGender>;

/**
 * Specifies the type of website associated with the contact, such as personal, business, or social media. This categorization helps in understanding the nature and purpose of each website link provided.
 */
export const ContactWebsitesType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of website associated with the contact, such as personal, business, or social media. This categorization helps in understanding the nature and purpose of each website link provided.
 */
export type ContactWebsitesType = ClosedEnum<typeof ContactWebsitesType>;

export type ContactWebsites = {
  /**
   * A unique identifier for each website associated with the contact. This ID is used to distinguish between different website entries and is crucial for managing and referencing specific websites in the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The URL of the website associated with the contact. This field is required and must contain a valid web address, serving as a direct link to the contact's online resource or profile.
   */
  url: string;
  /**
   * Specifies the type of website associated with the contact, such as personal, business, or social media. This categorization helps in understanding the nature and purpose of each website link provided.
   */
  type?: ContactWebsitesType | null | undefined;
};

/**
 * Specifies the type of address, such as 'home', 'work', or 'billing'. This helps categorize the address for better organization and retrieval, ensuring that the correct address type is used for the appropriate context.
 */
export const ContactAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of address, such as 'home', 'work', or 'billing'. This helps categorize the address for better organization and retrieval, ensuring that the correct address type is used for the appropriate context.
 */
export type ContactAddressesType = ClosedEnum<typeof ContactAddressesType>;

export type ContactAddresses = {
  /**
   * A unique identifier for each address associated with the contact. This ID is used to distinguish between different addresses and is essential for operations that require specific address manipulation or retrieval.
   */
  id?: string | null | undefined;
  /**
   * Specifies the type of address, such as 'home', 'work', or 'billing'. This helps categorize the address for better organization and retrieval, ensuring that the correct address type is used for the appropriate context.
   */
  type?: ContactAddressesType | null | undefined;
  /**
   * A complete address in a single string format, used when structured address data is not available. This field provides a straightforward representation of the address, useful for display purposes or when integration with systems that do not require detailed address components.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address, which could be a designation like 'Headquarters' or 'Branch Office'. This helps in identifying the purpose or location of the address within the context of the contact's information.
   */
  name?: string | null | undefined;
  /**
   * The first line of the contact's address, typically including the street number, street name, and any apartment or suite number. This field helps identify the primary location details of the contact's address.
   */
  line1?: string | null | undefined;
  /**
   * The second line of the contact's address, often used for additional address information such as building name or floor number. This field provides supplementary location details that complement the primary address line.
   */
  line2?: string | null | undefined;
  /**
   * The third line of the contact's address, which can be used for further address details if needed. This field allows for extended address information beyond the standard lines.
   */
  line3?: string | null | undefined;
  /**
   * The fourth line of the contact's address, available for any additional address information that does not fit in the previous lines. This field ensures comprehensive address coverage for complex locations.
   */
  line4?: string | null | undefined;
  /**
   * The specific street number of the contact's address, indicating the exact location on the street. This field is crucial for pinpointing the contact's physical address within a street.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name associated with the contact's address. This field provides the specific city location for the contact, aiding in geographical identification and segmentation. The value is expected to be a string representing the city's name.
   */
  city?: string | null | undefined;
  /**
   * The state or region name where the contact resides. This property helps in identifying the broader geographical area within a country, useful for regional analysis and reporting. The value should be a string representing the state's name.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code for the contact's address. This field is crucial for precise location identification and mailing purposes. The value is a string that represents the postal code format used in the contact's country.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the contact's address, following the ISO 3166-1 alpha-2 standard. This two-letter code identifies the country, facilitating internationalization and localization processes. The value is expected to be a string containing the country code.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the contact's address. This geographical coordinate specifies the north-south position, aiding in mapping and location-based services. The value should be a string representing the latitude in decimal degrees.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, represented as a string. This value is part of the geographical data for the contact's address, useful for mapping and location-based services.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality associated with the contact's address. This field provides additional geographical context, helping to specify the location more precisely within broader regions.
   */
  county?: string | null | undefined;
  /**
   * The name of the contact person associated with this address. This information is crucial for identifying the primary individual at the location, facilitating direct communication.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as 'Mr.', 'Ms.', or 'Dr.'. This field helps in addressing the contact appropriately in communications.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the address, formatted as a string. This contact detail is essential for reaching out to the contact person directly via telephone.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the contact's address. This field contains the fax number in a standard string format, allowing for communication via fax. It is optional and may not be present if the contact does not have a fax number listed.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the contact's address. This property holds the email in a standard string format, used for electronic communication with the contact. It is optional and may be absent if no email is provided for the address.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the contact's address. This field contains the website link in a string format, providing a way to access the contact's online presence. It is optional and may not be included if no website is specified.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the contact's address. This field is a string that can include any extra information or comments about the address. It is optional and may be empty if no notes are provided.
   */
  notes?: string | null | undefined;
  /**
   * A string representing the row version of the contact's address data. This binary value is used to track changes and prevent data conflicts by incrementing with each update to the address. It is optional and primarily used for concurrency control in data management.
   */
  rowVersion?: string | null | undefined;
};

export type ContactSocialLinks = {
  /**
   * A unique identifier for each social media link associated with the contact. This ID is used to distinguish between different social media profiles within the contact's data.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media profile associated with the contact, such as a Twitter or LinkedIn profile link. This field is essential for directing users to the contact's social media presence.
   */
  url: string;
  /**
   * Specifies the type of social media platform for the link, such as 'twitter' or 'linkedin'. This helps in categorizing and displaying the social media links appropriately.
   */
  type?: string | null | undefined;
};

/**
 * Specifies the category of the phone number, such as 'home', 'work', or 'mobile'. This helps in identifying the context in which the phone number is used, aiding in better organization and retrieval of contact information.
 */
export const ContactPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category of the phone number, such as 'home', 'work', or 'mobile'. This helps in identifying the context in which the phone number is used, aiding in better organization and retrieval of contact information.
 */
export type ContactPhoneNumbersType = ClosedEnum<
  typeof ContactPhoneNumbersType
>;

export type ContactPhoneNumbers = {
  /**
   * A unique identifier assigned to each phone number associated with the contact. This ID is used to distinguish between different phone numbers within the contact's record. It is not required for fetching contact details but can be useful for operations that involve specific phone numbers.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, represented as a string (e.g., '+1' for the United States). This code is essential for making international calls and is part of the complete phone number format returned in the contact's details.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code for the phone number, typically used within a country to route calls to specific geographic areas (e.g., '323' for Los Angeles). This code is part of the full phone number structure provided in the contact's information.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number associated with the contact, excluding any country or area codes. This is a required field and represents the core part of the contact's phone number, necessary for dialing within the local area.
   */
  number: string;
  /**
   * An optional extension number that can be dialed after the main phone number to reach a specific person or department within an organization. This field is included in the contact's phone details if applicable.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the category of the phone number, such as 'home', 'work', or 'mobile'. This helps in identifying the context in which the phone number is used, aiding in better organization and retrieval of contact information.
   */
  type?: ContactPhoneNumbersType | null | undefined;
};

/**
 * Indicates the type of email address, such as 'personal', 'work', or 'other'. This classification helps in understanding the context of the email address and organizing contact information effectively.
 */
export const ContactEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Indicates the type of email address, such as 'personal', 'work', or 'other'. This classification helps in understanding the context of the email address and organizing contact information effectively.
 */
export type ContactEmailsType = ClosedEnum<typeof ContactEmailsType>;

export type ContactEmails = {
  /**
   * A unique identifier assigned to each email address associated with the contact. This ID is crucial for distinguishing between multiple email addresses and managing them individually within the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The actual email address of the contact. This field is essential for communication purposes and is required to ensure that the contact can be reached via email.
   */
  email: string | null;
  /**
   * Indicates the type of email address, such as 'personal', 'work', or 'other'. This classification helps in understanding the context of the email address and organizing contact information effectively.
   */
  type?: ContactEmailsType | null | undefined;
};

export type ContactValue6 = {};

export type ContactValue4 = {};

/**
 * Contains the value of a custom field associated with the contact. This field allows for additional, user-defined information to be stored and retrieved, enhancing the flexibility of the contact's data profile. The format of this value can vary depending on the custom field's configuration.
 */
export type ContactValue =
  | ContactValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ContactValue6>;

export type ContactCustomFields = {
  /**
   * A unique identifier for each custom field within the contact's data. This string value is mandatory and ensures that each custom field can be distinctly referenced and managed within the CRM system.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, providing a human-readable label for the data it represents. This optional string helps users identify the purpose or content of the custom field within the contact's profile.
   */
  name?: string | null | undefined;
  /**
   * A descriptive text providing more information about the custom field's purpose or usage. This optional string can include details that clarify the context or intended use of the custom field, enhancing understanding for users managing contact data.
   */
  description?: string | null | undefined;
  /**
   * Contains the value of a custom field associated with the contact. This field allows for additional, user-defined information to be stored and retrieved, enhancing the flexibility of the contact's data profile. The format of this value can vary depending on the custom field's configuration.
   */
  value?:
    | ContactValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ContactValue6>
    | null
    | undefined;
};

/**
 * An object containing any custom mappings configured for the contact resource. This field includes additional, user-defined data mappings that extend the standard contact information, allowing for tailored data integration and processing. The structure of this object depends on the specific custom mappings set up in the CRM.
 */
export type ContactCustomMappings = {};

export type ContactExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the contact's data structure where the modification should be applied. This path is crucial for accurately targeting the data element that needs to be updated or extended.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath location, which can be of any data type. This value represents the new data or modification that will be applied to the contact's record, ensuring the data is updated as intended.
   */
  value?: any | undefined;
};

export type ContactPassThrough = {
  /**
   * A string identifier for the service to which the pass_through data should be applied. This is required to ensure that the custom data is directed to the correct service for processing.
   */
  serviceId: string;
  /**
   * An optional string identifier for a specific workflow operation that the pass_through data should be applied to. This is particularly useful for operations involving multiple downstream requests, ensuring the correct application of custom data.
   */
  operationId?: string | undefined;
  /**
   * An object that allows for the direct extension of properties, enabling the inclusion of any additional data needed for the operation. This flexibility supports the customization of requests to meet specific service requirements.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array containing objects that define structured data modifications using specific paths. Each object in the array represents a modification instruction, detailing where and how data should be altered within the contact's record.
   */
  extendPaths?: Array<ContactExtendPaths> | undefined;
};

/**
 * This object contains all the detailed information about the contact retrieved from the CRM system. It serves as the main container for the contact's attributes, ensuring that all related data is organized under this single property. The structure of this object allows for easy access and manipulation of the contact's details within your application.
 */
export type Contact = {
  /**
   * A unique identifier assigned to the contact within the CRM system. This ID is crucial for referencing the contact in future API calls or database queries, ensuring that operations are performed on the correct contact record. The format is typically a string of alphanumeric characters.
   */
  id?: string | undefined;
  /**
   * The full name of the contact as stored in the CRM system. This field is essential for identifying the contact in user interfaces and reports, providing a human-readable reference to the contact's identity. The name is expected to be a string containing both first and last names.
   */
  name: string | null;
  /**
   * The identifier of the user or entity that owns or manages the contact within the CRM system. This field helps in assigning responsibility and tracking who is accountable for the contact's information and interactions. The owner ID is typically a string that matches the ID format used for users or entities in the system.
   */
  ownerId?: string | null | undefined;
  /**
   * Specifies the type or category of the contact, such as 'individual' or 'organization'. This classification helps in organizing contacts and applying specific business logic based on the contact type. The type is represented as a string and may influence how the contact is handled in various CRM processes.
   */
  type?: ContactType | null | undefined;
  /**
   * The unique identifier for the company associated with the contact. This ID is used to link the contact to their respective company within the CRM system, allowing for easy retrieval and management of company-related information.
   */
  companyId?: string | null | undefined;
  /**
   * The full name of the company that the contact is associated with. This field provides a human-readable reference to the company, facilitating easier identification and understanding of the contact's business affiliations.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with the contact. This ID helps in tracking the contact's origin or potential business opportunity within the CRM system, aiding in lead management and follow-up processes.
   */
  leadId?: string | null | undefined;
  /**
   * The first name of the contact person. This field is used to personalize communications and manage contact records effectively within the CRM system.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the contact person, if available. This field can be used for more precise identification and personalization of the contact within the CRM system.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the contact, representing the family name or surname. This field is part of the contact's personal identification details and is typically used in formal communications and documentation. It is returned as a string and may be used to sort or filter contacts within the CRM system.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the contact, such as 'Mr.', 'Ms.', or 'Dr.'. This field provides additional context to the contact's name, often used in formal address or correspondence. It is returned as a string and can be used to personalize communications.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the contact, such as 'Jr.', 'Sr.', or 'III'. This field adds further distinction to the contact's name, often indicating generational or professional titles. It is returned as a string and can be included in formal documentation or identification.
   */
  suffix?: string | null | undefined;
  /**
   * The job title of the contact, indicating their professional role or position within their organization. This field helps identify the contact's responsibilities and authority level, and is returned as a string. It can be used to tailor communications or understand the contact's role in business interactions.
   */
  title?: string | null | undefined;
  /**
   * The department within the organization where the contact works. This field provides insight into the contact's area of expertise or responsibility, and is returned as a string. It can be useful for routing communications or understanding the organizational structure.
   */
  department?: string | null | undefined;
  /**
   * The language code representing the contact's preferred language, formatted according to ISO 639-1 standards. This helps in localizing communication with the contact, such as 'EN' for English in the United States.
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact, which may be used for personalized communication or demographic analysis. This field is optional and can include values such as 'male', 'female', or other gender identities.
   */
  gender?: ContactGender | null | undefined;
  /**
   * The contact's date of birth, formatted as a string. This information can be used for age verification, birthday greetings, or demographic insights. The format typically follows the 'YYYY-MM-DD' standard.
   */
  birthday?: string | null | undefined;
  /**
   * A string containing the URL or path to the contact's image. This can be used to display the contact's picture in user interfaces or reports. The field is optional and may be empty if no image is available.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The URL pointing to the contact's photo, which can be used to visually represent the contact in applications or reports. This field provides a direct link to the image file hosted online.
   */
  photoUrl?: string | null | undefined;
  /**
   * Indicates the origin from which the contact was acquired, such as a marketing campaign, referral, or direct inquiry. This information helps in understanding the contact's background and tailoring communication strategies. The value is expected to be a descriptive string that identifies the source.
   */
  leadSource?: string | null | undefined;
  /**
   * Contains the fax number associated with the contact, formatted as a string. This field is useful for businesses that still utilize fax communication and need to store this information for sending or receiving documents.
   */
  fax?: string | null | undefined;
  /**
   * Provides a textual description or notes about the contact, which may include personal preferences, important dates, or other relevant information. This field is a string and can be used to store additional context about the contact that may not fit into other predefined fields.
   */
  description?: string | null | undefined;
  /**
   * Represents the current financial balance associated with the contact, typically in the context of outstanding invoices or credits. This numeric value helps in financial tracking and management within the CRM system.
   */
  currentBalance?: number | null | undefined;
  /**
   * Denotes the current state or condition of the contact within the CRM system, such as active, inactive, or pending. This status helps in determining the level of engagement or the next steps in managing the contact relationship.
   */
  status?: string | null | undefined;
  /**
   * Indicates whether the contact is currently active within the CRM system. A value of 'true' means the contact is active, while 'false' indicates they are inactive. This status can affect how the contact is displayed or interacted with in the application.
   */
  active?: boolean | null | undefined;
  /**
   * A list of websites associated with the contact. Each entry in the array represents a website object containing details such as the URL and type. This allows for multiple websites to be linked to a single contact, providing a comprehensive view of their online presence.
   */
  websites?: Array<ContactWebsites> | undefined;
  /**
   * An array containing all the addresses associated with the contact. Each entry in the array represents a distinct address object, providing comprehensive address details for the contact. This allows for multiple addresses to be linked to a single contact, reflecting real-world scenarios where a contact might have more than one address.
   */
  addresses?: Array<ContactAddresses> | undefined;
  /**
   * An array containing the social media links associated with the contact. Each element in the array represents a distinct social media profile, providing URLs and types for easy integration and display.
   */
  socialLinks?: Array<ContactSocialLinks> | undefined;
  /**
   * An array of phone numbers associated with the contact. Each entry in the array represents a different phone number, allowing for multiple contact methods to be stored and accessed.
   */
  phoneNumbers?: Array<ContactPhoneNumbers> | undefined;
  /**
   * An array containing the email addresses associated with the contact. Each entry in the array provides detailed information about a specific email, including its unique identifier and type, facilitating comprehensive contact management.
   */
  emails?: Array<ContactEmails> | undefined;
  /**
   * The email domain associated with the contact's primary email address. This string value represents the domain part of the email, such as 'example.com', and is useful for categorizing or filtering contacts based on their email provider. This field is optional and may not be present if the email domain is not specified.
   */
  emailDomain?: string | null | undefined;
  /**
   * An array containing custom fields associated with the contact. Each entry in the array represents a specific custom field, allowing for additional, user-defined information to be stored alongside standard contact details. This field is optional and can be used to extend the contact's data model with organization-specific attributes.
   */
  customFields?: Array<ContactCustomFields> | undefined;
  /**
   * An array of tags associated with the contact. Tags are used to categorize and organize contacts within the CRM system, allowing for easier filtering and segmentation. Each tag is represented as a string within the array.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The date and time when the first call was made to or from the contact. This timestamp helps track the initial point of telephonic interaction with the contact, formatted as an ISO 8601 string.
   */
  firstCallAt?: Date | null | undefined;
  /**
   * The date and time when the first email was sent to or received from the contact. This information is crucial for understanding the timeline of email communications, formatted as an ISO 8601 string.
   */
  firstEmailAt?: Date | null | undefined;
  /**
   * The date and time when the contact last engaged in any activity within the CRM system. This timestamp helps track the most recent interaction or update related to the contact, aiding in activity monitoring and engagement analysis. The format is typically ISO 8601, such as '2023-10-05T14:48:00Z'.
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * An object containing any custom mappings configured for the contact resource. This field includes additional, user-defined data mappings that extend the standard contact information, allowing for tailored data integration and processing. The structure of this object depends on the specific custom mappings set up in the CRM.
   */
  customMappings?: ContactCustomMappings | null | undefined;
  /**
   * The date and time when the contact's information was last updated in the CRM system. This timestamp is crucial for understanding the recency of the data and ensuring that the most current information is being used. The format follows ISO 8601 standards, such as '2023-10-05T14:48:00Z'.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the contact was initially created in the CRM system. This timestamp provides historical context about the contact's entry into the system, useful for tracking the duration of the contact's presence. The format is ISO 8601, like '2023-10-05T14:48:00Z'.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array of identifiers representing opportunities associated with the contact. Each ID corresponds to a specific opportunity record in the CRM, linking the contact to potential or ongoing business engagements. This array facilitates the tracking and management of opportunities related to the contact.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or modifications when creating or updating resources. This property is optional and can be used to pass additional information that may be required by specific services.
   */
  passThrough?: Array<ContactPassThrough> | undefined;
};

/** @internal */
export const ContactType$inboundSchema: z.ZodNativeEnum<typeof ContactType> = z
  .nativeEnum(ContactType);

/** @internal */
export const ContactType$outboundSchema: z.ZodNativeEnum<typeof ContactType> =
  ContactType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactType$ {
  /** @deprecated use `ContactType$inboundSchema` instead. */
  export const inboundSchema = ContactType$inboundSchema;
  /** @deprecated use `ContactType$outboundSchema` instead. */
  export const outboundSchema = ContactType$outboundSchema;
}

/** @internal */
export const ContactGender$inboundSchema: z.ZodNativeEnum<
  typeof ContactGender
> = z.nativeEnum(ContactGender);

/** @internal */
export const ContactGender$outboundSchema: z.ZodNativeEnum<
  typeof ContactGender
> = ContactGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactGender$ {
  /** @deprecated use `ContactGender$inboundSchema` instead. */
  export const inboundSchema = ContactGender$inboundSchema;
  /** @deprecated use `ContactGender$outboundSchema` instead. */
  export const outboundSchema = ContactGender$outboundSchema;
}

/** @internal */
export const ContactWebsitesType$inboundSchema: z.ZodNativeEnum<
  typeof ContactWebsitesType
> = z.nativeEnum(ContactWebsitesType);

/** @internal */
export const ContactWebsitesType$outboundSchema: z.ZodNativeEnum<
  typeof ContactWebsitesType
> = ContactWebsitesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactWebsitesType$ {
  /** @deprecated use `ContactWebsitesType$inboundSchema` instead. */
  export const inboundSchema = ContactWebsitesType$inboundSchema;
  /** @deprecated use `ContactWebsitesType$outboundSchema` instead. */
  export const outboundSchema = ContactWebsitesType$outboundSchema;
}

/** @internal */
export const ContactWebsites$inboundSchema: z.ZodType<
  ContactWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ContactWebsitesType$inboundSchema).optional(),
});

/** @internal */
export type ContactWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ContactWebsites$outboundSchema: z.ZodType<
  ContactWebsites$Outbound,
  z.ZodTypeDef,
  ContactWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ContactWebsitesType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactWebsites$ {
  /** @deprecated use `ContactWebsites$inboundSchema` instead. */
  export const inboundSchema = ContactWebsites$inboundSchema;
  /** @deprecated use `ContactWebsites$outboundSchema` instead. */
  export const outboundSchema = ContactWebsites$outboundSchema;
  /** @deprecated use `ContactWebsites$Outbound` instead. */
  export type Outbound = ContactWebsites$Outbound;
}

export function contactWebsitesToJSON(
  contactWebsites: ContactWebsites,
): string {
  return JSON.stringify(ContactWebsites$outboundSchema.parse(contactWebsites));
}

export function contactWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<ContactWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactWebsites' from JSON`,
  );
}

/** @internal */
export const ContactAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof ContactAddressesType
> = z.nativeEnum(ContactAddressesType);

/** @internal */
export const ContactAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof ContactAddressesType
> = ContactAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactAddressesType$ {
  /** @deprecated use `ContactAddressesType$inboundSchema` instead. */
  export const inboundSchema = ContactAddressesType$inboundSchema;
  /** @deprecated use `ContactAddressesType$outboundSchema` instead. */
  export const outboundSchema = ContactAddressesType$outboundSchema;
}

/** @internal */
export const ContactAddresses$inboundSchema: z.ZodType<
  ContactAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ContactAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ContactAddresses$outboundSchema: z.ZodType<
  ContactAddresses$Outbound,
  z.ZodTypeDef,
  ContactAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactAddresses$ {
  /** @deprecated use `ContactAddresses$inboundSchema` instead. */
  export const inboundSchema = ContactAddresses$inboundSchema;
  /** @deprecated use `ContactAddresses$outboundSchema` instead. */
  export const outboundSchema = ContactAddresses$outboundSchema;
  /** @deprecated use `ContactAddresses$Outbound` instead. */
  export type Outbound = ContactAddresses$Outbound;
}

export function contactAddressesToJSON(
  contactAddresses: ContactAddresses,
): string {
  return JSON.stringify(
    ContactAddresses$outboundSchema.parse(contactAddresses),
  );
}

export function contactAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ContactAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactAddresses' from JSON`,
  );
}

/** @internal */
export const ContactSocialLinks$inboundSchema: z.ZodType<
  ContactSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type ContactSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ContactSocialLinks$outboundSchema: z.ZodType<
  ContactSocialLinks$Outbound,
  z.ZodTypeDef,
  ContactSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactSocialLinks$ {
  /** @deprecated use `ContactSocialLinks$inboundSchema` instead. */
  export const inboundSchema = ContactSocialLinks$inboundSchema;
  /** @deprecated use `ContactSocialLinks$outboundSchema` instead. */
  export const outboundSchema = ContactSocialLinks$outboundSchema;
  /** @deprecated use `ContactSocialLinks$Outbound` instead. */
  export type Outbound = ContactSocialLinks$Outbound;
}

export function contactSocialLinksToJSON(
  contactSocialLinks: ContactSocialLinks,
): string {
  return JSON.stringify(
    ContactSocialLinks$outboundSchema.parse(contactSocialLinks),
  );
}

export function contactSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<ContactSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactSocialLinks' from JSON`,
  );
}

/** @internal */
export const ContactPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof ContactPhoneNumbersType
> = z.nativeEnum(ContactPhoneNumbersType);

/** @internal */
export const ContactPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof ContactPhoneNumbersType
> = ContactPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactPhoneNumbersType$ {
  /** @deprecated use `ContactPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = ContactPhoneNumbersType$inboundSchema;
  /** @deprecated use `ContactPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema = ContactPhoneNumbersType$outboundSchema;
}

/** @internal */
export const ContactPhoneNumbers$inboundSchema: z.ZodType<
  ContactPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ContactPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ContactPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ContactPhoneNumbers$outboundSchema: z.ZodType<
  ContactPhoneNumbers$Outbound,
  z.ZodTypeDef,
  ContactPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ContactPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactPhoneNumbers$ {
  /** @deprecated use `ContactPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ContactPhoneNumbers$inboundSchema;
  /** @deprecated use `ContactPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = ContactPhoneNumbers$outboundSchema;
  /** @deprecated use `ContactPhoneNumbers$Outbound` instead. */
  export type Outbound = ContactPhoneNumbers$Outbound;
}

export function contactPhoneNumbersToJSON(
  contactPhoneNumbers: ContactPhoneNumbers,
): string {
  return JSON.stringify(
    ContactPhoneNumbers$outboundSchema.parse(contactPhoneNumbers),
  );
}

export function contactPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ContactPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ContactEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof ContactEmailsType
> = z.nativeEnum(ContactEmailsType);

/** @internal */
export const ContactEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof ContactEmailsType
> = ContactEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactEmailsType$ {
  /** @deprecated use `ContactEmailsType$inboundSchema` instead. */
  export const inboundSchema = ContactEmailsType$inboundSchema;
  /** @deprecated use `ContactEmailsType$outboundSchema` instead. */
  export const outboundSchema = ContactEmailsType$outboundSchema;
}

/** @internal */
export const ContactEmails$inboundSchema: z.ZodType<
  ContactEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ContactEmailsType$inboundSchema).optional(),
});

/** @internal */
export type ContactEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ContactEmails$outboundSchema: z.ZodType<
  ContactEmails$Outbound,
  z.ZodTypeDef,
  ContactEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ContactEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactEmails$ {
  /** @deprecated use `ContactEmails$inboundSchema` instead. */
  export const inboundSchema = ContactEmails$inboundSchema;
  /** @deprecated use `ContactEmails$outboundSchema` instead. */
  export const outboundSchema = ContactEmails$outboundSchema;
  /** @deprecated use `ContactEmails$Outbound` instead. */
  export type Outbound = ContactEmails$Outbound;
}

export function contactEmailsToJSON(contactEmails: ContactEmails): string {
  return JSON.stringify(ContactEmails$outboundSchema.parse(contactEmails));
}

export function contactEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ContactEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactEmails' from JSON`,
  );
}

/** @internal */
export const ContactValue6$inboundSchema: z.ZodType<
  ContactValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactValue6$Outbound = {};

/** @internal */
export const ContactValue6$outboundSchema: z.ZodType<
  ContactValue6$Outbound,
  z.ZodTypeDef,
  ContactValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactValue6$ {
  /** @deprecated use `ContactValue6$inboundSchema` instead. */
  export const inboundSchema = ContactValue6$inboundSchema;
  /** @deprecated use `ContactValue6$outboundSchema` instead. */
  export const outboundSchema = ContactValue6$outboundSchema;
  /** @deprecated use `ContactValue6$Outbound` instead. */
  export type Outbound = ContactValue6$Outbound;
}

export function contactValue6ToJSON(contactValue6: ContactValue6): string {
  return JSON.stringify(ContactValue6$outboundSchema.parse(contactValue6));
}

export function contactValue6FromJSON(
  jsonString: string,
): SafeParseResult<ContactValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactValue6' from JSON`,
  );
}

/** @internal */
export const ContactValue4$inboundSchema: z.ZodType<
  ContactValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactValue4$Outbound = {};

/** @internal */
export const ContactValue4$outboundSchema: z.ZodType<
  ContactValue4$Outbound,
  z.ZodTypeDef,
  ContactValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactValue4$ {
  /** @deprecated use `ContactValue4$inboundSchema` instead. */
  export const inboundSchema = ContactValue4$inboundSchema;
  /** @deprecated use `ContactValue4$outboundSchema` instead. */
  export const outboundSchema = ContactValue4$outboundSchema;
  /** @deprecated use `ContactValue4$Outbound` instead. */
  export type Outbound = ContactValue4$Outbound;
}

export function contactValue4ToJSON(contactValue4: ContactValue4): string {
  return JSON.stringify(ContactValue4$outboundSchema.parse(contactValue4));
}

export function contactValue4FromJSON(
  jsonString: string,
): SafeParseResult<ContactValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactValue4' from JSON`,
  );
}

/** @internal */
export const ContactValue$inboundSchema: z.ZodType<
  ContactValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContactValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ContactValue6$inboundSchema)),
]);

/** @internal */
export type ContactValue$Outbound =
  | ContactValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ContactValue6$Outbound>;

/** @internal */
export const ContactValue$outboundSchema: z.ZodType<
  ContactValue$Outbound,
  z.ZodTypeDef,
  ContactValue
> = z.union([
  z.lazy(() => ContactValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ContactValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactValue$ {
  /** @deprecated use `ContactValue$inboundSchema` instead. */
  export const inboundSchema = ContactValue$inboundSchema;
  /** @deprecated use `ContactValue$outboundSchema` instead. */
  export const outboundSchema = ContactValue$outboundSchema;
  /** @deprecated use `ContactValue$Outbound` instead. */
  export type Outbound = ContactValue$Outbound;
}

export function contactValueToJSON(contactValue: ContactValue): string {
  return JSON.stringify(ContactValue$outboundSchema.parse(contactValue));
}

export function contactValueFromJSON(
  jsonString: string,
): SafeParseResult<ContactValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactValue' from JSON`,
  );
}

/** @internal */
export const ContactCustomFields$inboundSchema: z.ZodType<
  ContactCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ContactValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ContactValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ContactCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ContactValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ContactValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ContactCustomFields$outboundSchema: z.ZodType<
  ContactCustomFields$Outbound,
  z.ZodTypeDef,
  ContactCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ContactValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ContactValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactCustomFields$ {
  /** @deprecated use `ContactCustomFields$inboundSchema` instead. */
  export const inboundSchema = ContactCustomFields$inboundSchema;
  /** @deprecated use `ContactCustomFields$outboundSchema` instead. */
  export const outboundSchema = ContactCustomFields$outboundSchema;
  /** @deprecated use `ContactCustomFields$Outbound` instead. */
  export type Outbound = ContactCustomFields$Outbound;
}

export function contactCustomFieldsToJSON(
  contactCustomFields: ContactCustomFields,
): string {
  return JSON.stringify(
    ContactCustomFields$outboundSchema.parse(contactCustomFields),
  );
}

export function contactCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ContactCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactCustomFields' from JSON`,
  );
}

/** @internal */
export const ContactCustomMappings$inboundSchema: z.ZodType<
  ContactCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactCustomMappings$Outbound = {};

/** @internal */
export const ContactCustomMappings$outboundSchema: z.ZodType<
  ContactCustomMappings$Outbound,
  z.ZodTypeDef,
  ContactCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactCustomMappings$ {
  /** @deprecated use `ContactCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ContactCustomMappings$inboundSchema;
  /** @deprecated use `ContactCustomMappings$outboundSchema` instead. */
  export const outboundSchema = ContactCustomMappings$outboundSchema;
  /** @deprecated use `ContactCustomMappings$Outbound` instead. */
  export type Outbound = ContactCustomMappings$Outbound;
}

export function contactCustomMappingsToJSON(
  contactCustomMappings: ContactCustomMappings,
): string {
  return JSON.stringify(
    ContactCustomMappings$outboundSchema.parse(contactCustomMappings),
  );
}

export function contactCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ContactCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactCustomMappings' from JSON`,
  );
}

/** @internal */
export const ContactExtendPaths$inboundSchema: z.ZodType<
  ContactExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ContactExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ContactExtendPaths$outboundSchema: z.ZodType<
  ContactExtendPaths$Outbound,
  z.ZodTypeDef,
  ContactExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactExtendPaths$ {
  /** @deprecated use `ContactExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ContactExtendPaths$inboundSchema;
  /** @deprecated use `ContactExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ContactExtendPaths$outboundSchema;
  /** @deprecated use `ContactExtendPaths$Outbound` instead. */
  export type Outbound = ContactExtendPaths$Outbound;
}

export function contactExtendPathsToJSON(
  contactExtendPaths: ContactExtendPaths,
): string {
  return JSON.stringify(
    ContactExtendPaths$outboundSchema.parse(contactExtendPaths),
  );
}

export function contactExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ContactExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactExtendPaths' from JSON`,
  );
}

/** @internal */
export const ContactPassThrough$inboundSchema: z.ZodType<
  ContactPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ContactExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ContactPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ContactExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ContactPassThrough$outboundSchema: z.ZodType<
  ContactPassThrough$Outbound,
  z.ZodTypeDef,
  ContactPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ContactExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactPassThrough$ {
  /** @deprecated use `ContactPassThrough$inboundSchema` instead. */
  export const inboundSchema = ContactPassThrough$inboundSchema;
  /** @deprecated use `ContactPassThrough$outboundSchema` instead. */
  export const outboundSchema = ContactPassThrough$outboundSchema;
  /** @deprecated use `ContactPassThrough$Outbound` instead. */
  export type Outbound = ContactPassThrough$Outbound;
}

export function contactPassThroughToJSON(
  contactPassThrough: ContactPassThrough,
): string {
  return JSON.stringify(
    ContactPassThrough$outboundSchema.parse(contactPassThrough),
  );
}

export function contactPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ContactPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactPassThrough' from JSON`,
  );
}

/** @internal */
export const Contact$inboundSchema: z.ZodType<Contact, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    name: z.nullable(z.string()),
    owner_id: z.nullable(z.string()).optional(),
    type: z.nullable(ContactType$inboundSchema).optional(),
    company_id: z.nullable(z.string()).optional(),
    company_name: z.nullable(z.string()).optional(),
    lead_id: z.nullable(z.string()).optional(),
    first_name: z.nullable(z.string()).optional(),
    middle_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    prefix: z.nullable(z.string()).optional(),
    suffix: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    department: z.nullable(z.string()).optional(),
    language: z.nullable(z.string()).optional(),
    gender: z.nullable(ContactGender$inboundSchema).optional(),
    birthday: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    photo_url: z.nullable(z.string()).optional(),
    lead_source: z.nullable(z.string()).optional(),
    fax: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    current_balance: z.nullable(z.number()).optional(),
    status: z.nullable(z.string()).optional(),
    active: z.nullable(z.boolean()).optional(),
    websites: z.array(z.lazy(() => ContactWebsites$inboundSchema)).optional(),
    addresses: z.array(z.lazy(() => ContactAddresses$inboundSchema)).optional(),
    social_links: z.array(z.lazy(() => ContactSocialLinks$inboundSchema))
      .optional(),
    phone_numbers: z.array(z.lazy(() => ContactPhoneNumbers$inboundSchema))
      .optional(),
    emails: z.array(z.lazy(() => ContactEmails$inboundSchema)).optional(),
    email_domain: z.nullable(z.string()).optional(),
    custom_fields: z.array(z.lazy(() => ContactCustomFields$inboundSchema))
      .optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    first_call_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    first_email_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    last_activity_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    custom_mappings: z.nullable(
      z.lazy(() => ContactCustomMappings$inboundSchema),
    ).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    opportunity_ids: z.array(z.string()).optional(),
    pass_through: z.array(z.lazy(() => ContactPassThrough$inboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "owner_id": "ownerId",
      "company_id": "companyId",
      "company_name": "companyName",
      "lead_id": "leadId",
      "first_name": "firstName",
      "middle_name": "middleName",
      "last_name": "lastName",
      "photo_url": "photoUrl",
      "lead_source": "leadSource",
      "current_balance": "currentBalance",
      "social_links": "socialLinks",
      "phone_numbers": "phoneNumbers",
      "email_domain": "emailDomain",
      "custom_fields": "customFields",
      "first_call_at": "firstCallAt",
      "first_email_at": "firstEmailAt",
      "last_activity_at": "lastActivityAt",
      "custom_mappings": "customMappings",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "opportunity_ids": "opportunityIds",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type Contact$Outbound = {
  id?: string | undefined;
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<ContactWebsites$Outbound> | undefined;
  addresses?: Array<ContactAddresses$Outbound> | undefined;
  social_links?: Array<ContactSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<ContactPhoneNumbers$Outbound> | undefined;
  emails?: Array<ContactEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<ContactCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  first_call_at?: string | null | undefined;
  first_email_at?: string | null | undefined;
  last_activity_at?: string | null | undefined;
  custom_mappings?: ContactCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<ContactPassThrough$Outbound> | undefined;
};

/** @internal */
export const Contact$outboundSchema: z.ZodType<
  Contact$Outbound,
  z.ZodTypeDef,
  Contact
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(ContactType$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(ContactGender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ContactWebsites$outboundSchema)).optional(),
  addresses: z.array(z.lazy(() => ContactAddresses$outboundSchema)).optional(),
  socialLinks: z.array(z.lazy(() => ContactSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => ContactPhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => ContactEmails$outboundSchema)).optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(z.lazy(() => ContactCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  firstCallAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  firstEmailAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  customMappings: z.nullable(z.lazy(() => ContactCustomMappings$outboundSchema))
    .optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(z.lazy(() => ContactPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    firstCallAt: "first_call_at",
    firstEmailAt: "first_email_at",
    lastActivityAt: "last_activity_at",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contact$ {
  /** @deprecated use `Contact$inboundSchema` instead. */
  export const inboundSchema = Contact$inboundSchema;
  /** @deprecated use `Contact$outboundSchema` instead. */
  export const outboundSchema = Contact$outboundSchema;
  /** @deprecated use `Contact$Outbound` instead. */
  export type Outbound = Contact$Outbound;
}

export function contactToJSON(contact: Contact): string {
  return JSON.stringify(Contact$outboundSchema.parse(contact));
}

export function contactFromJSON(
  jsonString: string,
): SafeParseResult<Contact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contact' from JSON`,
  );
}
