/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LeadsFilter = {
  /**
   * Filters leads by their full name, allowing retrieval of specific lead records. Useful for narrowing down results to leads with a particular name.
   */
  name?: string | undefined;
  /**
   * Filters leads by their first name, helping to locate specific individuals within the CRM data. Ideal for searches where the first name is known.
   */
  firstName?: string | undefined;
  /**
   * Filters leads by their last name, aiding in the identification of specific leads. Useful when the last name is a key identifier.
   */
  lastName?: string | undefined;
  /**
   * Filter leads based on their email address. This parameter allows you to narrow down the results to leads with a specific email, facilitating targeted data retrieval.
   */
  email?: string | undefined;
  /**
   * Filter leads by their phone number. Use this parameter to retrieve leads associated with a particular phone number, enabling precise data filtering.
   */
  phoneNumber?: string | undefined;
};

/** @internal */
export const LeadsFilter$inboundSchema: z.ZodType<
  LeadsFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone_number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type LeadsFilter$Outbound = {
  name?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone_number?: string | undefined;
};

/** @internal */
export const LeadsFilter$outboundSchema: z.ZodType<
  LeadsFilter$Outbound,
  z.ZodTypeDef,
  LeadsFilter
> = z.object({
  name: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phoneNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsFilter$ {
  /** @deprecated use `LeadsFilter$inboundSchema` instead. */
  export const inboundSchema = LeadsFilter$inboundSchema;
  /** @deprecated use `LeadsFilter$outboundSchema` instead. */
  export const outboundSchema = LeadsFilter$outboundSchema;
  /** @deprecated use `LeadsFilter$Outbound` instead. */
  export type Outbound = LeadsFilter$Outbound;
}

export function leadsFilterToJSON(leadsFilter: LeadsFilter): string {
  return JSON.stringify(LeadsFilter$outboundSchema.parse(leadsFilter));
}

export function leadsFilterFromJSON(
  jsonString: string,
): SafeParseResult<LeadsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsFilter' from JSON`,
  );
}
