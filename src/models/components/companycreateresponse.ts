/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Company created
 */
export type CompanyCreateResponse = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: UnifiedId;
};

/** @internal */
export const UnifiedId$inboundSchema: z.ZodType<
  UnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UnifiedId$outboundSchema: z.ZodType<
  UnifiedId$Outbound,
  z.ZodTypeDef,
  UnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedId$ {
  /** @deprecated use `UnifiedId$inboundSchema` instead. */
  export const inboundSchema = UnifiedId$inboundSchema;
  /** @deprecated use `UnifiedId$outboundSchema` instead. */
  export const outboundSchema = UnifiedId$outboundSchema;
  /** @deprecated use `UnifiedId$Outbound` instead. */
  export type Outbound = UnifiedId$Outbound;
}

export function unifiedIdToJSON(unifiedId: UnifiedId): string {
  return JSON.stringify(UnifiedId$outboundSchema.parse(unifiedId));
}

export function unifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedId' from JSON`,
  );
}

/** @internal */
export const CompanyCreateResponse$inboundSchema: z.ZodType<
  CompanyCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CompanyCreateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UnifiedId$Outbound;
};

/** @internal */
export const CompanyCreateResponse$outboundSchema: z.ZodType<
  CompanyCreateResponse$Outbound,
  z.ZodTypeDef,
  CompanyCreateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyCreateResponse$ {
  /** @deprecated use `CompanyCreateResponse$inboundSchema` instead. */
  export const inboundSchema = CompanyCreateResponse$inboundSchema;
  /** @deprecated use `CompanyCreateResponse$outboundSchema` instead. */
  export const outboundSchema = CompanyCreateResponse$outboundSchema;
  /** @deprecated use `CompanyCreateResponse$Outbound` instead. */
  export type Outbound = CompanyCreateResponse$Outbound;
}

export function companyCreateResponseToJSON(
  companyCreateResponse: CompanyCreateResponse,
): string {
  return JSON.stringify(
    CompanyCreateResponse$outboundSchema.parse(companyCreateResponse),
  );
}

export function companyCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompanyCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyCreateResponse' from JSON`,
  );
}
