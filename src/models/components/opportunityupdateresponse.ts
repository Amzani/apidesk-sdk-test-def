/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The 'data' object serves as the primary container for the response payload, encapsulating all relevant information about the updated opportunity record. This object is always included in the response to ensure that the client receives a comprehensive view of the changes made to the opportunity. It acts as a wrapper for all specific fields that have been modified or are relevant to the update operation.
 */
export type OpportunityUpdateResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Opportunity updated
 */
export type OpportunityUpdateResponse = {
  /**
   * The HTTP response status code indicating the result of the PATCH operation. This integer value signifies whether the update request was successful (e.g., 200 for success) or if there was an error (e.g., 4xx for client errors or 5xx for server errors). It is always included in the response to inform the client of the outcome of their request.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'OK' for a successful update or 'Bad Request' for an error. It complements the status code by offering a more descriptive context of the response outcome.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in processing the request. This string identifies which service within the Apideck ecosystem handled the opportunity update, especially useful when multiple services are integrated. It is included to help track and manage service-specific operations.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the operation. This string indicates the specific resource type, such as 'opportunity', that was updated. It helps in understanding the context of the operation within the broader API ecosystem.
   */
  resource: string;
  /**
   * The specific operation that was performed on the resource. This string details the action taken, such as 'update', and is included to confirm the type of operation executed on the opportunity record. It provides clarity on what change was attempted or completed.
   */
  operation: string;
  /**
   * The 'data' object serves as the primary container for the response payload, encapsulating all relevant information about the updated opportunity record. This object is always included in the response to ensure that the client receives a comprehensive view of the changes made to the opportunity. It acts as a wrapper for all specific fields that have been modified or are relevant to the update operation.
   */
  data: OpportunityUpdateResponseUnifiedId;
};

/** @internal */
export const OpportunityUpdateResponseUnifiedId$inboundSchema: z.ZodType<
  OpportunityUpdateResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type OpportunityUpdateResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const OpportunityUpdateResponseUnifiedId$outboundSchema: z.ZodType<
  OpportunityUpdateResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  OpportunityUpdateResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityUpdateResponseUnifiedId$ {
  /** @deprecated use `OpportunityUpdateResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = OpportunityUpdateResponseUnifiedId$inboundSchema;
  /** @deprecated use `OpportunityUpdateResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema =
    OpportunityUpdateResponseUnifiedId$outboundSchema;
  /** @deprecated use `OpportunityUpdateResponseUnifiedId$Outbound` instead. */
  export type Outbound = OpportunityUpdateResponseUnifiedId$Outbound;
}

export function opportunityUpdateResponseUnifiedIdToJSON(
  opportunityUpdateResponseUnifiedId: OpportunityUpdateResponseUnifiedId,
): string {
  return JSON.stringify(
    OpportunityUpdateResponseUnifiedId$outboundSchema.parse(
      opportunityUpdateResponseUnifiedId,
    ),
  );
}

export function opportunityUpdateResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityUpdateResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunityUpdateResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityUpdateResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const OpportunityUpdateResponse$inboundSchema: z.ZodType<
  OpportunityUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunityUpdateResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type OpportunityUpdateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: OpportunityUpdateResponseUnifiedId$Outbound;
};

/** @internal */
export const OpportunityUpdateResponse$outboundSchema: z.ZodType<
  OpportunityUpdateResponse$Outbound,
  z.ZodTypeDef,
  OpportunityUpdateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunityUpdateResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityUpdateResponse$ {
  /** @deprecated use `OpportunityUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = OpportunityUpdateResponse$inboundSchema;
  /** @deprecated use `OpportunityUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = OpportunityUpdateResponse$outboundSchema;
  /** @deprecated use `OpportunityUpdateResponse$Outbound` instead. */
  export type Outbound = OpportunityUpdateResponse$Outbound;
}

export function opportunityUpdateResponseToJSON(
  opportunityUpdateResponse: OpportunityUpdateResponse,
): string {
  return JSON.stringify(
    OpportunityUpdateResponse$outboundSchema.parse(opportunityUpdateResponse),
  );
}

export function opportunityUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityUpdateResponse' from JSON`,
  );
}
