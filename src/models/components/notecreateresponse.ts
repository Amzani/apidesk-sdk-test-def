/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The 'data' object serves as the primary container for the response payload, encapsulating all relevant information about the newly created note. This object is always included in the response to provide a structured format for accessing the note's details, ensuring consistency and ease of data handling for API consumers.
 */
export type NoteCreateResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Note created
 */
export type NoteCreateResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the HTTP request, with a 201 status code specifically denoting that the note has been successfully created in the CRM system. It is always included in the response to inform the client of the outcome of their request.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'Created' for a 201 status code, helping developers understand the result of their API call at a glance. It is always included to complement the status code with a descriptive message.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used in the operation. This string uniquely identifies the third-party service (e.g., Salesforce, HubSpot) that the note is associated with, ensuring that the note is correctly linked to the appropriate CRM service. It is always included to specify the service context of the operation.
   */
  service: string;
  /**
   * The name of the Unified API resource involved in the operation. This string indicates the specific type of resource, such as 'notes', that the operation pertains to, helping to categorize and identify the nature of the API request and response. It is always included to clarify the resource context of the operation.
   */
  resource: string;
  /**
   * The specific operation performed by the API request. This string describes the action taken, such as 'notesAdd', providing clarity on what the API call was intended to achieve. It is always included to document the exact operation executed, aiding in tracking and debugging API interactions.
   */
  operation: string;
  /**
   * The 'data' object serves as the primary container for the response payload, encapsulating all relevant information about the newly created note. This object is always included in the response to provide a structured format for accessing the note's details, ensuring consistency and ease of data handling for API consumers.
   */
  data: NoteCreateResponseUnifiedId;
};

/** @internal */
export const NoteCreateResponseUnifiedId$inboundSchema: z.ZodType<
  NoteCreateResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type NoteCreateResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const NoteCreateResponseUnifiedId$outboundSchema: z.ZodType<
  NoteCreateResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  NoteCreateResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NoteCreateResponseUnifiedId$ {
  /** @deprecated use `NoteCreateResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = NoteCreateResponseUnifiedId$inboundSchema;
  /** @deprecated use `NoteCreateResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = NoteCreateResponseUnifiedId$outboundSchema;
  /** @deprecated use `NoteCreateResponseUnifiedId$Outbound` instead. */
  export type Outbound = NoteCreateResponseUnifiedId$Outbound;
}

export function noteCreateResponseUnifiedIdToJSON(
  noteCreateResponseUnifiedId: NoteCreateResponseUnifiedId,
): string {
  return JSON.stringify(
    NoteCreateResponseUnifiedId$outboundSchema.parse(
      noteCreateResponseUnifiedId,
    ),
  );
}

export function noteCreateResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<NoteCreateResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NoteCreateResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NoteCreateResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const NoteCreateResponse$inboundSchema: z.ZodType<
  NoteCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => NoteCreateResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type NoteCreateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: NoteCreateResponseUnifiedId$Outbound;
};

/** @internal */
export const NoteCreateResponse$outboundSchema: z.ZodType<
  NoteCreateResponse$Outbound,
  z.ZodTypeDef,
  NoteCreateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => NoteCreateResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NoteCreateResponse$ {
  /** @deprecated use `NoteCreateResponse$inboundSchema` instead. */
  export const inboundSchema = NoteCreateResponse$inboundSchema;
  /** @deprecated use `NoteCreateResponse$outboundSchema` instead. */
  export const outboundSchema = NoteCreateResponse$outboundSchema;
  /** @deprecated use `NoteCreateResponse$Outbound` instead. */
  export type Outbound = NoteCreateResponse$Outbound;
}

export function noteCreateResponseToJSON(
  noteCreateResponse: NoteCreateResponse,
): string {
  return JSON.stringify(
    NoteCreateResponse$outboundSchema.parse(noteCreateResponse),
  );
}

export function noteCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<NoteCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NoteCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NoteCreateResponse' from JSON`,
  );
}
