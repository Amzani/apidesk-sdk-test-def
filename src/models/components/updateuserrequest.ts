/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the category of the address, such as 'home' or 'work'. This helps in organizing and differentiating between multiple addresses associated with a user. Ensure the type is a valid string that accurately represents the address's purpose.
 */
export const UpdateUserRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the address, such as 'home' or 'work'. This helps in organizing and differentiating between multiple addresses associated with a user. Ensure the type is a valid string that accurately represents the address's purpose.
 */
export type UpdateUserRequestType = ClosedEnum<typeof UpdateUserRequestType>;

export type UpdateUserRequestAddresses = {
  /**
   * A unique identifier for the address within the user's record. This ID is used to specify which address to update when modifying user information. It must be a valid string that corresponds to an existing address entry in the user's profile.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category of the address, such as 'home' or 'work'. This helps in organizing and differentiating between multiple addresses associated with a user. Ensure the type is a valid string that accurately represents the address's purpose.
   */
  type?: UpdateUserRequestType | null | undefined;
  /**
   * The complete address in a single string format, used when structured address data is unavailable. This field should contain all necessary address details in a readable format. It is crucial for APIs that do not support detailed address components.
   */
  string?: string | null | undefined;
  /**
   * The designated name for the address, which can be used to identify it easily within the user's profile. This name should be a clear and concise string that reflects the address's identity or purpose.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, including details like street number, street name, and apartment or suite number. This field is essential for accurately locating the address and should be formatted as a clear and complete string.
   */
  line1?: string | null | undefined;
  /**
   * This optional field allows you to specify additional address details, such as apartment or suite numbers, to ensure precise location information for the user. It is used to complement the primary address line and enhance the accuracy of the user's address record in the CRM system.
   */
  line2?: string | null | undefined;
  /**
   * An optional field for further address details, such as building or floor information, to provide a more comprehensive address for the user. This field helps in capturing detailed location data, which can be crucial for certain CRM functionalities.
   */
  line3?: string | null | undefined;
  /**
   * This field is used to add any additional address information that doesn't fit into the previous lines, such as landmarks or specific delivery instructions. It is optional and helps in ensuring that the user's address is as detailed as necessary for CRM operations.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the user's address, which is crucial for identifying the exact location of the address. This field should contain only the numeric part of the street address and is optional for updates where the street number remains unchanged.
   */
  streetNumber?: string | null | undefined;
  /**
   * Specifies the city name for the user's address, which is essential for geographic identification and routing within the CRM system. This field should contain a valid city name and is optional if the city information does not need updating.
   */
  city?: string | null | undefined;
  /**
   * The 'state' field specifies the name of the state associated with the user's address. This information is used to accurately locate the user within a specific region. Ensure the state name is correctly spelled to facilitate precise geographical identification.
   */
  state?: string | null | undefined;
  /**
   * The 'postal_code' field represents the zip code or equivalent for the user's address. It is crucial for pinpointing the exact location for mailing and service delivery purposes. Ensure the postal code follows the standard format for the respective country to avoid errors in address validation.
   */
  postalCode?: string | null | undefined;
  /**
   * The 'country' field requires the ISO 3166-1 alpha-2 code representing the user's country. This code is essential for international address standardization and ensures compatibility with global systems. Make sure to provide a valid two-letter country code to prevent issues in processing the address.
   */
  country?: string | null | undefined;
  /**
   * The 'latitude' field indicates the geographical latitude of the user's address. This value is used for mapping and location-based services, ensuring accurate placement on a map. Provide a valid latitude coordinate, typically in decimal degrees, to enable precise geolocation.
   */
  latitude?: string | null | undefined;
  /**
   * The 'longitude' field specifies the geographical longitude of the user's address. It is used in conjunction with latitude to accurately map the user's location. Ensure the longitude is provided in decimal degrees format for correct geospatial representation.
   */
  longitude?: string | null | undefined;
  /**
   * Specifies the county or sublocality for the address. This field is used to provide additional geographical context to the user's address, which can be important for regional identification and service delivery. Ensure the county name is correctly spelled to avoid discrepancies in user records.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address. This field is crucial for identifying the primary individual responsible for communications or transactions at this location. Ensure the name is accurate and formatted correctly to facilitate effective correspondence.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as Mr., Ms., or Dr. This field helps in maintaining a professional tone in communications and should be chosen based on the contact's preference or title. Ensure the salutation is appropriate and respectful.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with the address. This number is essential for direct communication and should be formatted according to international standards to ensure connectivity. Verify the number for accuracy to prevent communication issues.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the address, used for sending and receiving documents. Although less common today, this field can be important for businesses that still rely on fax communications. Ensure the number is correct and operational if used.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the user's address. This field is used to update the user's contact email in the CRM system, ensuring communication can be directed appropriately. It should be a valid email format to ensure successful delivery of messages.
   */
  email?: string | null | undefined;
  /**
   * The website URL linked to the user's address. This property allows you to update or add a website for the user, providing a reference to their online presence. Ensure the URL is correctly formatted to enable proper linking.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the user's address. This field can be used to store supplementary information or comments about the address, aiding in detailed record-keeping. There are no specific format requirements for this field.
   */
  notes?: string | null | undefined;
  /**
   * A version control string used to manage concurrent updates to the user's address record. This binary value is incremented with each update, helping to prevent data conflicts by ensuring that changes are based on the latest version of the data.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Specifies the category of the phone number, such as 'home', 'work', or 'mobile'. This helps in identifying the context in which the phone number is used, ensuring accurate communication channels are maintained. It is optional and can be left blank if the type is not specified.
 */
export const UpdateUserRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category of the phone number, such as 'home', 'work', or 'mobile'. This helps in identifying the context in which the phone number is used, ensuring accurate communication channels are maintained. It is optional and can be left blank if the type is not specified.
 */
export type UpdateUserRequestPhoneNumbersType = ClosedEnum<
  typeof UpdateUserRequestPhoneNumbersType
>;

export type UpdateUserRequestPhoneNumbers = {
  /**
   * This property represents the unique identifier for a phone number associated with the user. It is used to specify which phone number record should be updated within the user's profile. Although not required, providing this ID ensures that the correct phone number entry is modified, especially when multiple numbers exist.
   */
  id?: string | null | undefined;
  /**
   * The country code for the phone number, such as '+1' for the United States, is used to ensure the phone number is formatted correctly for international dialing. This property is optional but recommended for maintaining consistency and accuracy in phone number records.
   */
  countryCode?: string | null | undefined;
  /**
   * This property specifies the area code of the phone number, like '323' for Los Angeles. Including the area code helps in accurately identifying the geographical region associated with the phone number. It is optional but useful for detailed regional information.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number to be updated, excluding the country and area codes. This field is required and must be provided to ensure the user's contact information is accurately updated in the CRM system.
   */
  number: string;
  /**
   * The extension number for the phone, if applicable, allows for direct dialing to specific departments or individuals within an organization. This property is optional and should be included if the phone system uses extensions.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the category of the phone number, such as 'home', 'work', or 'mobile'. This helps in identifying the context in which the phone number is used, ensuring accurate communication channels are maintained. It is optional and can be left blank if the type is not specified.
   */
  type?: UpdateUserRequestPhoneNumbersType | null | undefined;
};

/**
 * Defines the type of email address, such as 'personal', 'work', or 'other'. This classification helps in organizing and prioritizing email communications based on their intended use. It is optional and can be omitted if the type is not relevant.
 */
export const UpdateUserRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the type of email address, such as 'personal', 'work', or 'other'. This classification helps in organizing and prioritizing email communications based on their intended use. It is optional and can be omitted if the type is not relevant.
 */
export type UpdateUserRequestEmailsType = ClosedEnum<
  typeof UpdateUserRequestEmailsType
>;

export type UpdateUserRequestEmails = {
  /**
   * A unique identifier for each email address within the user's email array. This ID is used to distinguish between different email entries, especially when updating or removing specific emails. It is optional and primarily used for operations that require precise targeting of email records.
   */
  id?: string | null | undefined;
  /**
   * The actual email address of the user that needs to be updated or added. This field is required for each email object in the array and must be a valid email format to ensure proper communication and record-keeping.
   */
  email: string | null;
  /**
   * Defines the type of email address, such as 'personal', 'work', or 'other'. This classification helps in organizing and prioritizing email communications based on their intended use. It is optional and can be omitted if the type is not relevant.
   */
  type?: UpdateUserRequestEmailsType | null | undefined;
};

export type UpdateUserRequestExtendPaths = {
  /**
   * This property specifies the JSONPath string that identifies the location within the user record where the update should be applied. It is crucial for pinpointing the exact field that needs modification, ensuring that only the intended data is altered. The path must be a valid JSONPath expression to accurately navigate the user record structure.
   */
  path: string;
  /**
   * This property represents the new value to be set at the specified JSONPath within the user record. It allows for flexible updates, as the value can be of any data type, depending on the field being modified. Ensure that the value is compatible with the field's expected data type to prevent errors during the update process.
   */
  value?: any | undefined;
};

export type UpdateUserRequestPassThrough = {
  /**
   * This property specifies the unique identifier for the service where the pass_through modifications should be applied. It is essential for directing the custom data to the correct service, ensuring that the updates are processed accurately. This field is required and must be a valid service identifier.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that the pass_through data should target. This is particularly useful for operations involving multiple downstream requests, allowing precise control over which operation the data affects. If used, it should match the intended operation's ID.
   */
  operationId?: string | undefined;
  /**
   * This property allows for direct extension by including any additional properties needed for the update. It provides a flexible structure to accommodate various data types and custom fields, facilitating comprehensive updates without predefined constraints.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for making structured data modifications using specific paths. This property enables precise updates to nested fields or complex data structures, ensuring that changes are applied exactly where needed within the user record.
   */
  extendPaths?: Array<UpdateUserRequestExtendPaths> | undefined;
};

export type UpdateUserRequest = {
  /**
   * The parent_id property is used to specify the identifier of the parent user in the CRM system. This field is optional and should be provided if the user being updated is associated with a parent user account. It helps in maintaining hierarchical relationships between users within the CRM.
   */
  parentId?: string | null | undefined;
  /**
   * The username property represents the unique identifier for the user within the CRM system. This field is optional but should be unique across the system to ensure proper identification and authentication of the user. It is crucial for login and user management operations.
   */
  username?: string | null | undefined;
  /**
   * The first_name property is used to update the user's first name in the CRM system. This field is optional and should contain the given name of the user. It is important for personalizing user interactions and communications.
   */
  firstName?: string | null | undefined;
  /**
   * The last_name property is used to update the user's last name in the CRM system. This field is optional and should contain the family name of the user. It is essential for identifying users and maintaining accurate records.
   */
  lastName?: string | null | undefined;
  /**
   * The title property is used to specify the user's job title within the CRM system. This field is optional and should reflect the user's professional designation. It is useful for organizational hierarchy and role-based access control.
   */
  title?: string | null | undefined;
  /**
   * Specifies the division within the organization where the user is currently assigned. This field helps categorize users into broader organizational units, such as regions or teams, and is used to update the user's division information in the CRM. It is optional and should be a valid string representing the division name.
   */
  division?: string | null | undefined;
  /**
   * Indicates the department within the organization where the user is currently assigned. This field is deprecated in favor of using department_id and department_name for more precise identification. It remains optional and should be a valid string representing the department name if used.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * Represents the name of the company associated with the user. This field is used to update or verify the user's company affiliation within the CRM system. It is optional and should be a valid string containing the company's name.
   */
  companyName?: string | null | undefined;
  /**
   * A unique identifier assigned to the user within the company, such as an Employee Number or ID. This field is crucial for distinguishing between users and ensuring accurate updates to user records. It is optional and should be a valid string representing the user's unique employee identifier.
   */
  employeeNumber?: string | null | undefined;
  /**
   * Provides additional information or context about the user record being updated. This field can be used to include notes or descriptions that aid in understanding the user's role or status within the organization. It is optional and should be a valid string containing descriptive text.
   */
  description?: string | null | undefined;
  /**
   * The URL of the user's avatar image. This property allows you to update the user's profile picture in the CRM system. Ensure the URL is accessible and points to a valid image file format such as JPEG or PNG.
   */
  image?: string | null | undefined;
  /**
   * The language preference for the user, specified using the ISO 639-1 language code. This setting helps tailor the user's experience by displaying content in their preferred language. For example, use 'EN' for English.
   */
  language?: string | null | undefined;
  /**
   * The current status of the user within the CRM system. This field is used to manage user activity and access, such as 'active' or 'inactive'. Ensure the status aligns with the user's role and permissions.
   */
  status?: string | null | undefined;
  /**
   * The user's password for accessing the CRM system. This field should be updated with a secure, strong password to maintain account security. Follow best practices for password complexity and storage.
   */
  password?: string | null | undefined;
  /**
   * A list of addresses associated with the user. This array can include multiple address objects, each detailing specific location information such as street, city, and postal code. Use this to update or add new addresses for the user.
   */
  addresses?: Array<UpdateUserRequestAddresses> | undefined;
  /**
   * An array of phone numbers associated with the user. This property allows you to update or add multiple contact numbers for the user, ensuring comprehensive contact information is maintained. Each phone number should be formatted according to international standards for consistency.
   */
  phoneNumbers?: Array<UpdateUserRequestPhoneNumbers> | undefined;
  /**
   * A collection of email objects that represent the user's email addresses to be updated. Each object within the array must include at least the 'email' field, and can optionally include 'id' and 'type'. This array is mandatory and ensures that all relevant email information is captured and updated in the user record.
   */
  emails: Array<UpdateUserRequestEmails>;
  /**
   * The pass_through property is used to include custom data or specific modifications when updating user records. This allows for flexibility in handling service-specific requirements or extensions within the request body. It is not mandatory, but when used, it should be structured according to the service's needs.
   */
  passThrough?: Array<UpdateUserRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateUserRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestType
> = z.nativeEnum(UpdateUserRequestType);

/** @internal */
export const UpdateUserRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestType
> = UpdateUserRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestType$ {
  /** @deprecated use `UpdateUserRequestType$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestType$inboundSchema;
  /** @deprecated use `UpdateUserRequestType$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestType$outboundSchema;
}

/** @internal */
export const UpdateUserRequestAddresses$inboundSchema: z.ZodType<
  UpdateUserRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateUserRequestType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UpdateUserRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UpdateUserRequestAddresses$outboundSchema: z.ZodType<
  UpdateUserRequestAddresses$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateUserRequestType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestAddresses$ {
  /** @deprecated use `UpdateUserRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestAddresses$inboundSchema;
  /** @deprecated use `UpdateUserRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestAddresses$outboundSchema;
  /** @deprecated use `UpdateUserRequestAddresses$Outbound` instead. */
  export type Outbound = UpdateUserRequestAddresses$Outbound;
}

export function updateUserRequestAddressesToJSON(
  updateUserRequestAddresses: UpdateUserRequestAddresses,
): string {
  return JSON.stringify(
    UpdateUserRequestAddresses$outboundSchema.parse(updateUserRequestAddresses),
  );
}

export function updateUserRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestAddresses' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequestPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestPhoneNumbersType
> = z.nativeEnum(UpdateUserRequestPhoneNumbersType);

/** @internal */
export const UpdateUserRequestPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestPhoneNumbersType
> = UpdateUserRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestPhoneNumbersType$ {
  /** @deprecated use `UpdateUserRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `UpdateUserRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateUserRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const UpdateUserRequestPhoneNumbers$inboundSchema: z.ZodType<
  UpdateUserRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateUserRequestPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UpdateUserRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateUserRequestPhoneNumbers$outboundSchema: z.ZodType<
  UpdateUserRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateUserRequestPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestPhoneNumbers$ {
  /** @deprecated use `UpdateUserRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `UpdateUserRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `UpdateUserRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = UpdateUserRequestPhoneNumbers$Outbound;
}

export function updateUserRequestPhoneNumbersToJSON(
  updateUserRequestPhoneNumbers: UpdateUserRequestPhoneNumbers,
): string {
  return JSON.stringify(
    UpdateUserRequestPhoneNumbers$outboundSchema.parse(
      updateUserRequestPhoneNumbers,
    ),
  );
}

export function updateUserRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestEmailsType
> = z.nativeEnum(UpdateUserRequestEmailsType);

/** @internal */
export const UpdateUserRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestEmailsType
> = UpdateUserRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestEmailsType$ {
  /** @deprecated use `UpdateUserRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestEmailsType$inboundSchema;
  /** @deprecated use `UpdateUserRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestEmailsType$outboundSchema;
}

/** @internal */
export const UpdateUserRequestEmails$inboundSchema: z.ZodType<
  UpdateUserRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateUserRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type UpdateUserRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateUserRequestEmails$outboundSchema: z.ZodType<
  UpdateUserRequestEmails$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateUserRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestEmails$ {
  /** @deprecated use `UpdateUserRequestEmails$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestEmails$inboundSchema;
  /** @deprecated use `UpdateUserRequestEmails$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestEmails$outboundSchema;
  /** @deprecated use `UpdateUserRequestEmails$Outbound` instead. */
  export type Outbound = UpdateUserRequestEmails$Outbound;
}

export function updateUserRequestEmailsToJSON(
  updateUserRequestEmails: UpdateUserRequestEmails,
): string {
  return JSON.stringify(
    UpdateUserRequestEmails$outboundSchema.parse(updateUserRequestEmails),
  );
}

export function updateUserRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestEmails' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateUserRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateUserRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateUserRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateUserRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestExtendPaths$ {
  /** @deprecated use `UpdateUserRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateUserRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateUserRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateUserRequestExtendPaths$Outbound;
}

export function updateUserRequestExtendPathsToJSON(
  updateUserRequestExtendPaths: UpdateUserRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateUserRequestExtendPaths$outboundSchema.parse(
      updateUserRequestExtendPaths,
    ),
  );
}

export function updateUserRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequestPassThrough$inboundSchema: z.ZodType<
  UpdateUserRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateUserRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateUserRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateUserRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateUserRequestPassThrough$outboundSchema: z.ZodType<
  UpdateUserRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateUserRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestPassThrough$ {
  /** @deprecated use `UpdateUserRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateUserRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateUserRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateUserRequestPassThrough$Outbound;
}

export function updateUserRequestPassThroughToJSON(
  updateUserRequestPassThrough: UpdateUserRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateUserRequestPassThrough$outboundSchema.parse(
      updateUserRequestPassThrough,
    ),
  );
}

export function updateUserRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequest$inboundSchema: z.ZodType<
  UpdateUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  parent_id: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employee_number: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UpdateUserRequestAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => UpdateUserRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateUserRequestEmails$inboundSchema)),
  pass_through: z.array(
    z.lazy(() => UpdateUserRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "first_name": "firstName",
    "last_name": "lastName",
    "company_name": "companyName",
    "employee_number": "employeeNumber",
    "phone_numbers": "phoneNumbers",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateUserRequest$Outbound = {
  parent_id?: string | null | undefined;
  username?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  title?: string | null | undefined;
  division?: string | null | undefined;
  department?: string | null | undefined;
  company_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  password?: string | null | undefined;
  addresses?: Array<UpdateUserRequestAddresses$Outbound> | undefined;
  phone_numbers?: Array<UpdateUserRequestPhoneNumbers$Outbound> | undefined;
  emails: Array<UpdateUserRequestEmails$Outbound>;
  pass_through?: Array<UpdateUserRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateUserRequest$outboundSchema: z.ZodType<
  UpdateUserRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserRequest
> = z.object({
  parentId: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UpdateUserRequestAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => UpdateUserRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateUserRequestEmails$outboundSchema)),
  passThrough: z.array(
    z.lazy(() => UpdateUserRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    firstName: "first_name",
    lastName: "last_name",
    companyName: "company_name",
    employeeNumber: "employee_number",
    phoneNumbers: "phone_numbers",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequest$ {
  /** @deprecated use `UpdateUserRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequest$inboundSchema;
  /** @deprecated use `UpdateUserRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequest$outboundSchema;
  /** @deprecated use `UpdateUserRequest$Outbound` instead. */
  export type Outbound = UpdateUserRequest$Outbound;
}

export function updateUserRequestToJSON(
  updateUserRequest: UpdateUserRequest,
): string {
  return JSON.stringify(
    UpdateUserRequest$outboundSchema.parse(updateUserRequest),
  );
}

export function updateUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequest' from JSON`,
  );
}
