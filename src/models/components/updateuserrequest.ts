/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in organizing and differentiating between multiple addresses associated with a user. The value should be a valid string that matches predefined address types in the CRM.
 */
export const UpdateUserRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in organizing and differentiating between multiple addresses associated with a user. The value should be a valid string that matches predefined address types in the CRM.
 */
export type UpdateUserRequestType = ClosedEnum<typeof UpdateUserRequestType>;

export type UpdateUserRequestAddresses = {
  /**
   * A unique identifier for the address within the user's record. This ID is used to specify which address is being updated or referenced. It should be a valid string that uniquely identifies an address entry in the CRM system.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in organizing and differentiating between multiple addresses associated with a user. The value should be a valid string that matches predefined address types in the CRM.
   */
  type?: UpdateUserRequestType | null | undefined;
  /**
   * Represents the full address as a single string, useful when structured address data is unavailable. This field should contain the complete address details in a format that is understandable and usable for mailing or location purposes.
   */
  string?: string | null | undefined;
  /**
   * The label or name associated with the address, such as 'Headquarters' or 'Branch Office'. This helps in identifying the purpose or location of the address within the user's record. It should be a descriptive string that clearly indicates the address's role or significance.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically including the street number, street name, and any apartment or suite number. This field is crucial for ensuring accurate delivery and location identification. It should be a clear and complete string that forms the primary part of the address.
   */
  line1?: string | null | undefined;
  /**
   * An additional address line used for specifying apartment, suite, unit, building, floor, etc. This field is optional and should be used to provide more detailed location information if necessary. It helps ensure accurate delivery and location identification within the CRM system.
   */
  line2?: string | null | undefined;
  /**
   * A supplementary address line for further details beyond line 2, such as landmarks or additional instructions. This optional field allows for enhanced address specificity, aiding in precise user location tracking and record-keeping within the CRM.
   */
  line3?: string | null | undefined;
  /**
   * An extra address line for any additional address information not covered in previous lines. This optional field supports comprehensive address documentation, ensuring all relevant location details are captured for user records.
   */
  line4?: string | null | undefined;
  /**
   * The specific street number of the user's address. This optional field should be a numeric or alphanumeric string that identifies the exact location on a street, crucial for precise address identification and user record accuracy in the CRM.
   */
  streetNumber?: string | null | undefined;
  /**
   * The name of the city where the user resides. This optional field should be a valid city name, contributing to the overall address structure and ensuring accurate geographical data within the CRM system.
   */
  city?: string | null | undefined;
  /**
   * Specifies the state or region within the address being updated. This property is optional and should be a valid state name or abbreviation. It helps in accurately locating the user's address within the CRM system.
   */
  state?: string | null | undefined;
  /**
   * Represents the postal code or ZIP code for the address. This optional property should follow the standard postal format for the country specified. It is crucial for ensuring precise delivery and location services.
   */
  postalCode?: string | null | undefined;
  /**
   * Indicates the country of the address using the ISO 3166-1 alpha-2 code. This optional property must be a valid two-letter country code, ensuring international address standardization within the CRM.
   */
  country?: string | null | undefined;
  /**
   * Defines the latitude coordinate of the address location. This optional property should be a valid latitude value, aiding in geographical mapping and location-based services within the CRM.
   */
  latitude?: string | null | undefined;
  /**
   * Specifies the longitude coordinate of the address location. This optional property should be a valid longitude value, supporting geographical mapping and enhancing location-based functionalities in the CRM.
   */
  longitude?: string | null | undefined;
  /**
   * Specifies the county or sublocality for the address, aiding in precise geographical identification. This field is optional and should be a valid string representing the county name. It helps in ensuring the address details are comprehensive and accurate for user records.
   */
  county?: string | null | undefined;
  /**
   * Denotes the name of the primary contact person associated with the address. This optional field should be a valid string containing the full name of the contact. It is useful for personalizing communications and ensuring accurate contact information is maintained within the CRM.
   */
  contactName?: string | null | undefined;
  /**
   * Represents the salutation or title of the contact person at the address, such as Mr., Ms., or Dr. This optional field should be a valid string and helps in formalizing communications and maintaining respectful interactions with contacts.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the address, used for direct communication. This optional field should be a valid string formatted according to international standards, ensuring that contact can be made efficiently and accurately.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the address, facilitating document transmission. This optional field should be a valid string formatted correctly to ensure successful fax communications. It is particularly useful for businesses that still rely on fax for document exchange.
   */
  fax?: string | null | undefined;
  /**
   * The primary email address associated with the user's address record. This field should be a valid email format, ensuring that communications can be accurately directed to the user. It plays a crucial role in maintaining contact information within the CRM system.
   */
  email?: string | null | undefined;
  /**
   * The official website URL linked to the user's address record. This should be a valid URL format, providing a direct link to the user's online presence or business site. It helps in associating digital footprints with the user's CRM profile.
   */
  website?: string | null | undefined;
  /**
   * Additional notes or comments related to the user's address. This field can include any extra information that might be relevant for understanding the context of the address, such as delivery instructions or historical data.
   */
  notes?: string | null | undefined;
  /**
   * A concurrency control token used to manage updates to the user's address record. This binary value is automatically incremented with each update, helping to prevent data conflicts by ensuring that changes are based on the most recent version of the data.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used, aiding in better communication management within the CRM system. If provided, it should be a valid string representing the phone type.
 */
export const UpdateUserRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used, aiding in better communication management within the CRM system. If provided, it should be a valid string representing the phone type.
 */
export type UpdateUserRequestPhoneNumbersType = ClosedEnum<
  typeof UpdateUserRequestPhoneNumbersType
>;

export type UpdateUserRequestPhoneNumbers = {
  /**
   * A unique identifier for the phone number entry within the user's record. This ID is used to specify which phone number to update when multiple numbers exist. It must be a valid string that uniquely identifies the phone number in the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code associated with the phone number, such as '+1' for the United States. This code is crucial for ensuring the phone number is correctly formatted for international dialing. It should be a valid string representing the country code.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code for the phone number, such as '323' for Los Angeles. This code helps in identifying the specific geographic area of the phone number. It should be a valid string that matches the area's dialing code.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number to be updated, excluding the country and area codes. This is a mandatory field and must be a valid string representing the user's phone number. It is essential for ensuring accurate contact information within the CRM.
   */
  number: string;
  /**
   * An optional extension number for the phone line, used in cases where direct dialing to a specific line is needed. This should be a valid string if provided, and it helps in routing calls directly to the intended recipient within an organization.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used, aiding in better communication management within the CRM system. If provided, it should be a valid string representing the phone type.
   */
  type?: UpdateUserRequestPhoneNumbersType | null | undefined;
};

/**
 * Defines the type of email address, such as 'work', 'personal', or 'other'. This categorization helps in organizing and prioritizing email communications within the CRM system. If specified, it should be a valid string representing the email type.
 */
export const UpdateUserRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the type of email address, such as 'work', 'personal', or 'other'. This categorization helps in organizing and prioritizing email communications within the CRM system. If specified, it should be a valid string representing the email type.
 */
export type UpdateUserRequestEmailsType = ClosedEnum<
  typeof UpdateUserRequestEmailsType
>;

export type UpdateUserRequestEmails = {
  /**
   * A unique identifier for each email address object within the emails array. This ID is used to distinguish between different email entries, especially useful when updating or removing specific email addresses. It should be a valid string if provided.
   */
  id?: string | null | undefined;
  /**
   * The actual email address of the user, which must be a valid email format. This field is essential for identifying the user's primary contact method and is required for each email object within the emails array. It ensures that the CRM system can send communications to the correct address.
   */
  email: string | null;
  /**
   * Defines the type of email address, such as 'work', 'personal', or 'other'. This categorization helps in organizing and prioritizing email communications within the CRM system. If specified, it should be a valid string representing the email type.
   */
  type?: UpdateUserRequestEmailsType | null | undefined;
};

export type UpdateUserRequestExtendPaths = {
  /**
   * Specifies the JSONPath string where the update should be applied within the user record. This path must be a valid JSONPath expression, ensuring precise targeting of the data field to be updated. It is crucial for directing the update operation to the correct location in the user data structure.
   */
  path: string;
  /**
   * Defines the new value to be set at the specified JSONPath within the user record. This value can be of any data type, including string, number, object, or array, depending on the field being updated. It is essential for applying the desired changes to the user data accurately.
   */
  value?: any | undefined;
};

export type UpdateUserRequestPassThrough = {
  /**
   * This property specifies the unique identifier for the service to which the pass_through data should be applied. It is mandatory and must be a valid string that corresponds to an existing service ID, ensuring that the data is directed to the correct service during the update operation.
   */
  serviceId: string;
  /**
   * An optional property that identifies a specific workflow operation for which the pass_through data is intended. This is particularly useful in scenarios where multiple downstream requests are made, allowing developers to target the pass_through data to the appropriate operation. It should be a valid string if used.
   */
  operationId?: string | undefined;
  /**
   * This property allows for the direct extension of the request with any additional properties needed for the update. It is an optional object that can include various key-value pairs, providing flexibility to accommodate custom data requirements specific to the user's needs.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An optional array of objects used for making structured data modifications via specified paths. This property enables developers to define precise changes to the user record, facilitating complex updates that require detailed path-based modifications. Each object in the array should be well-structured to reflect the intended changes.
   */
  extendPaths?: Array<UpdateUserRequestExtendPaths> | undefined;
};

export type UpdateUserRequest = {
  /**
   * The parent user ID associated with the user being updated. This property is used to establish or modify hierarchical relationships between users within the CRM system. It should be a valid string representing an existing user ID, if applicable, to ensure proper linkage.
   */
  parentId?: string | null | undefined;
  /**
   * The unique username assigned to the user. This property is crucial for user identification and authentication within the CRM system. It must be a unique string, ensuring no duplication across the system, and is used to log in and access user-specific data.
   */
  username?: string | null | undefined;
  /**
   * The first name of the user being updated. This property is used for personal identification and communication purposes within the CRM. It should be a valid string containing only alphabetic characters, reflecting the user's given name.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the user being updated. This property is essential for identifying and addressing users formally within the CRM. It should be a valid string containing only alphabetic characters, representing the user's family name.
   */
  lastName?: string | null | undefined;
  /**
   * The professional job title of the user. This property helps in defining the user's role and responsibilities within the organization as recorded in the CRM. It should be a descriptive string that accurately reflects the user's position or role.
   */
  title?: string | null | undefined;
  /**
   * Specifies the division within the organization where the user is currently assigned. This can represent a collection of departments, teams, or regions. It is optional and should be a valid string that accurately reflects the user's current organizational division.
   */
  division?: string | null | undefined;
  /**
   * Indicates the department where the user is currently working. This field is deprecated in favor of using 'department_id' and 'department_name' for more precise identification. It remains optional and should be a valid string if used.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * Represents the name of the company associated with the user. This optional field should be a valid string that matches the company's official name as recognized in the CRM system.
   */
  companyName?: string | null | undefined;
  /**
   * A unique identifier assigned to the user within the company, such as an Employee Number, ID, or Code. This optional field should be a valid string that uniquely identifies the user in the company's records.
   */
  employeeNumber?: string | null | undefined;
  /**
   * Provides additional information or context about the user record being updated. This optional field should be a valid string that offers a clear description of the user's role or status within the organization.
   */
  description?: string | null | undefined;
  /**
   * The URL of the user's avatar image. This should be a valid URL pointing to an image file that represents the user's profile picture. It helps personalize the user's profile within the CRM system, enhancing user recognition and engagement.
   */
  image?: string | null | undefined;
  /**
   * The language preference for the user, specified using a two-letter ISO 639-1 code (e.g., 'EN' for English). This setting determines the language in which the user will receive communications and interface elements, ensuring a personalized user experience.
   */
  language?: string | null | undefined;
  /**
   * The current status of the user account, which could include values such as 'active', 'inactive', or 'suspended'. This property is crucial for managing user access and permissions within the CRM system, allowing administrators to control user activity effectively.
   */
  status?: string | null | undefined;
  /**
   * The user's password for accessing the CRM system. It must be a secure string that complies with the system's password policy, which may include requirements for length, complexity, and special characters. This property is essential for user authentication and security.
   */
  password?: string | null | undefined;
  /**
   * A list of addresses associated with the user, where each address is represented as an object containing details like street, city, and postal code. This property is used to store multiple user locations, which can be important for contact and service delivery purposes.
   */
  addresses?: Array<UpdateUserRequestAddresses> | undefined;
  /**
   * A list of phone numbers associated with the user, allowing for multiple contact numbers to be stored. Each entry should be a valid phone number format, facilitating direct communication with the user through various channels.
   */
  phoneNumbers?: Array<UpdateUserRequestPhoneNumbers> | undefined;
  /**
   * An array containing email objects that represent the user's email addresses. Each object within the array must include at least the 'email' field, ensuring that the user has at least one valid email address associated with their record. This is crucial for maintaining contact information and ensuring communication channels are up-to-date.
   */
  emails: Array<UpdateUserRequestEmails>;
  /**
   * The pass_through property is used to send custom, service-specific data or structured modifications when updating user records. It allows developers to include additional information that may be required by specific services, ensuring flexibility and extensibility in API requests. This property is optional and should be formatted as an array.
   */
  passThrough?: Array<UpdateUserRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateUserRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestType
> = z.nativeEnum(UpdateUserRequestType);

/** @internal */
export const UpdateUserRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestType
> = UpdateUserRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestType$ {
  /** @deprecated use `UpdateUserRequestType$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestType$inboundSchema;
  /** @deprecated use `UpdateUserRequestType$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestType$outboundSchema;
}

/** @internal */
export const UpdateUserRequestAddresses$inboundSchema: z.ZodType<
  UpdateUserRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateUserRequestType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UpdateUserRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UpdateUserRequestAddresses$outboundSchema: z.ZodType<
  UpdateUserRequestAddresses$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateUserRequestType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestAddresses$ {
  /** @deprecated use `UpdateUserRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestAddresses$inboundSchema;
  /** @deprecated use `UpdateUserRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestAddresses$outboundSchema;
  /** @deprecated use `UpdateUserRequestAddresses$Outbound` instead. */
  export type Outbound = UpdateUserRequestAddresses$Outbound;
}

export function updateUserRequestAddressesToJSON(
  updateUserRequestAddresses: UpdateUserRequestAddresses,
): string {
  return JSON.stringify(
    UpdateUserRequestAddresses$outboundSchema.parse(updateUserRequestAddresses),
  );
}

export function updateUserRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestAddresses' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequestPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestPhoneNumbersType
> = z.nativeEnum(UpdateUserRequestPhoneNumbersType);

/** @internal */
export const UpdateUserRequestPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestPhoneNumbersType
> = UpdateUserRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestPhoneNumbersType$ {
  /** @deprecated use `UpdateUserRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `UpdateUserRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateUserRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const UpdateUserRequestPhoneNumbers$inboundSchema: z.ZodType<
  UpdateUserRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateUserRequestPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UpdateUserRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateUserRequestPhoneNumbers$outboundSchema: z.ZodType<
  UpdateUserRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateUserRequestPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestPhoneNumbers$ {
  /** @deprecated use `UpdateUserRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `UpdateUserRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `UpdateUserRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = UpdateUserRequestPhoneNumbers$Outbound;
}

export function updateUserRequestPhoneNumbersToJSON(
  updateUserRequestPhoneNumbers: UpdateUserRequestPhoneNumbers,
): string {
  return JSON.stringify(
    UpdateUserRequestPhoneNumbers$outboundSchema.parse(
      updateUserRequestPhoneNumbers,
    ),
  );
}

export function updateUserRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestEmailsType
> = z.nativeEnum(UpdateUserRequestEmailsType);

/** @internal */
export const UpdateUserRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRequestEmailsType
> = UpdateUserRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestEmailsType$ {
  /** @deprecated use `UpdateUserRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestEmailsType$inboundSchema;
  /** @deprecated use `UpdateUserRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestEmailsType$outboundSchema;
}

/** @internal */
export const UpdateUserRequestEmails$inboundSchema: z.ZodType<
  UpdateUserRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateUserRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type UpdateUserRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateUserRequestEmails$outboundSchema: z.ZodType<
  UpdateUserRequestEmails$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateUserRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestEmails$ {
  /** @deprecated use `UpdateUserRequestEmails$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestEmails$inboundSchema;
  /** @deprecated use `UpdateUserRequestEmails$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestEmails$outboundSchema;
  /** @deprecated use `UpdateUserRequestEmails$Outbound` instead. */
  export type Outbound = UpdateUserRequestEmails$Outbound;
}

export function updateUserRequestEmailsToJSON(
  updateUserRequestEmails: UpdateUserRequestEmails,
): string {
  return JSON.stringify(
    UpdateUserRequestEmails$outboundSchema.parse(updateUserRequestEmails),
  );
}

export function updateUserRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestEmails' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateUserRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateUserRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateUserRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateUserRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestExtendPaths$ {
  /** @deprecated use `UpdateUserRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateUserRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateUserRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateUserRequestExtendPaths$Outbound;
}

export function updateUserRequestExtendPathsToJSON(
  updateUserRequestExtendPaths: UpdateUserRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateUserRequestExtendPaths$outboundSchema.parse(
      updateUserRequestExtendPaths,
    ),
  );
}

export function updateUserRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequestPassThrough$inboundSchema: z.ZodType<
  UpdateUserRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateUserRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateUserRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateUserRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateUserRequestPassThrough$outboundSchema: z.ZodType<
  UpdateUserRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateUserRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestPassThrough$ {
  /** @deprecated use `UpdateUserRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateUserRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateUserRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateUserRequestPassThrough$Outbound;
}

export function updateUserRequestPassThroughToJSON(
  updateUserRequestPassThrough: UpdateUserRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateUserRequestPassThrough$outboundSchema.parse(
      updateUserRequestPassThrough,
    ),
  );
}

export function updateUserRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequest$inboundSchema: z.ZodType<
  UpdateUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  parent_id: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employee_number: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UpdateUserRequestAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => UpdateUserRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateUserRequestEmails$inboundSchema)),
  pass_through: z.array(
    z.lazy(() => UpdateUserRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "first_name": "firstName",
    "last_name": "lastName",
    "company_name": "companyName",
    "employee_number": "employeeNumber",
    "phone_numbers": "phoneNumbers",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateUserRequest$Outbound = {
  parent_id?: string | null | undefined;
  username?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  title?: string | null | undefined;
  division?: string | null | undefined;
  department?: string | null | undefined;
  company_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  password?: string | null | undefined;
  addresses?: Array<UpdateUserRequestAddresses$Outbound> | undefined;
  phone_numbers?: Array<UpdateUserRequestPhoneNumbers$Outbound> | undefined;
  emails: Array<UpdateUserRequestEmails$Outbound>;
  pass_through?: Array<UpdateUserRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateUserRequest$outboundSchema: z.ZodType<
  UpdateUserRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserRequest
> = z.object({
  parentId: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UpdateUserRequestAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => UpdateUserRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateUserRequestEmails$outboundSchema)),
  passThrough: z.array(
    z.lazy(() => UpdateUserRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    firstName: "first_name",
    lastName: "last_name",
    companyName: "company_name",
    employeeNumber: "employee_number",
    phoneNumbers: "phone_numbers",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequest$ {
  /** @deprecated use `UpdateUserRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequest$inboundSchema;
  /** @deprecated use `UpdateUserRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequest$outboundSchema;
  /** @deprecated use `UpdateUserRequest$Outbound` instead. */
  export type Outbound = UpdateUserRequest$Outbound;
}

export function updateUserRequestToJSON(
  updateUserRequest: UpdateUserRequest,
): string {
  return JSON.stringify(
    UpdateUserRequest$outboundSchema.parse(updateUserRequest),
  );
}

export function updateUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequest' from JSON`,
  );
}
