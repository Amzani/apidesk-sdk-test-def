/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * Specifies the type of bank account, such as checking or savings. This information helps in categorizing the account for financial operations. Ensure the account type is correctly specified to align with the bank's classification.
 */
export const UpdateCompanyRequestAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * Specifies the type of bank account, such as checking or savings. This information helps in categorizing the account for financial operations. Ensure the account type is correctly specified to align with the bank's classification.
 */
export type UpdateCompanyRequestAccountType = ClosedEnum<
  typeof UpdateCompanyRequestAccountType
>;

export type UpdateCompanyRequestBankAccounts = {
  /**
   * The name of the bank where the company's account is held. This field is used to identify the financial institution associated with the account. Ensure the bank name is accurately spelled to avoid processing errors.
   */
  bankName?: string | null | undefined;
  /**
   * The unique number assigned to the company's bank account. This number is crucial for identifying the specific account for transactions and updates. Ensure the account number is entered correctly to prevent transaction failures.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name under which the company's bank account is registered. This is typically the official name used during the account opening process. Ensure the account name matches the bank's records to facilitate smooth transactions.
   */
  accountName?: string | null | undefined;
  /**
   * Specifies the type of bank account, such as checking or savings. This information helps in categorizing the account for financial operations. Ensure the account type is correctly specified to align with the bank's classification.
   */
  accountType?: UpdateCompanyRequestAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN) used for international transactions. This standardized format is essential for cross-border payments and must be entered accurately to ensure successful transactions.
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC) is used to uniquely identify a bank during international transactions. This code is essential for ensuring that funds are transferred to the correct financial institution. It must be a valid BIC format to facilitate accurate cross-border payments.
   */
  bic?: string | null | undefined;
  /**
   * The routing number is a nine-digit code used to identify a financial institution within the United States. This property is crucial for processing domestic transactions accurately. Ensure the routing number is valid to avoid transaction errors.
   */
  routingNumber?: string | null | undefined;
  /**
   * The BSB number is a six-digit code used to identify the branch of an Australian or New Zealand bank. This property is necessary for directing payments to the correct branch. It must be a valid BSB format to ensure proper transaction routing.
   */
  bsbNumber?: string | null | undefined;
  /**
   * The branch identifier uniquely identifies a specific branch of a bank or financial institution. This property helps in routing transactions to the correct branch, especially in regions where branch-specific codes are used. Ensure it is correctly formatted to facilitate accurate processing.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * The bank code is assigned by a central authority to identify banks within a country. This property is used to ensure that transactions are directed to the correct bank. It must be a valid code as per the country's banking regulations to prevent misrouting of funds.
   */
  bankCode?: string | null | undefined;
  currency?: Currency | null | undefined;
};

/**
 * Describes the type of website associated with the company, such as 'official', 'blog', or 'support'. This field helps categorize the website's purpose and is optional, allowing for more detailed classification of the company's web resources.
 */
export const UpdateCompanyRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Describes the type of website associated with the company, such as 'official', 'blog', or 'support'. This field helps categorize the website's purpose and is optional, allowing for more detailed classification of the company's web resources.
 */
export type UpdateCompanyRequestType = ClosedEnum<
  typeof UpdateCompanyRequestType
>;

export type UpdateCompanyRequestWebsites = {
  /**
   * A unique identifier for each website entry in the company's list of websites. This ID is used to distinguish between different websites and is crucial when updating or removing specific website entries. It is optional and typically auto-generated by the system.
   */
  id?: string | null | undefined;
  /**
   * The URL of the company's website. This field is required and must be a valid URL format, ensuring that it correctly links to the intended web page. It is essential for updating the company's online presence information.
   */
  url: string;
  /**
   * Describes the type of website associated with the company, such as 'official', 'blog', or 'support'. This field helps categorize the website's purpose and is optional, allowing for more detailed classification of the company's web resources.
   */
  type?: UpdateCompanyRequestType | null | undefined;
};

/**
 * Specifies the type of address, such as 'billing' or 'shipping'. This helps categorize the address within the company's records, allowing for more organized data management and retrieval.
 */
export const UpdateCompanyRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of address, such as 'billing' or 'shipping'. This helps categorize the address within the company's records, allowing for more organized data management and retrieval.
 */
export type UpdateCompanyRequestAddressesType = ClosedEnum<
  typeof UpdateCompanyRequestAddressesType
>;

export type UpdateCompanyRequestAddresses = {
  /**
   * A unique identifier for each address within the company's address list. This ID is used to specify which address record should be updated, ensuring the correct address is modified without affecting others.
   */
  id?: string | null | undefined;
  /**
   * Specifies the type of address, such as 'billing' or 'shipping'. This helps categorize the address within the company's records, allowing for more organized data management and retrieval.
   */
  type?: UpdateCompanyRequestAddressesType | null | undefined;
  /**
   * The full address in a single string format, used when structured address data is unavailable. This field ensures that address information can still be captured and utilized even if it lacks detailed segmentation.
   */
  string?: string | null | undefined;
  /**
   * A descriptive name for the address, such as 'Headquarters' or 'Warehouse'. This name helps identify the purpose or location of the address within the company's operations, aiding in quick recognition and reference.
   */
  name?: string | null | undefined;
  /**
   * The primary address line for the company, typically including the street number, street name, and any suite or apartment numbers. This field is used to specify the main part of the address for accurate location identification. Ensure the input is a valid string representing the first line of the address.
   */
  line1?: string | null | undefined;
  /**
   * An additional address line for the company, often used for supplementary information such as building names or additional location details. This field supports the primary address line by providing extra context or clarification. Input should be a valid string if additional address details are necessary.
   */
  line2?: string | null | undefined;
  /**
   * A tertiary address line for the company, used for further address details that do not fit in the primary or secondary lines. This field allows for comprehensive address information, ensuring all relevant details are captured. Input should be a valid string if further address specification is needed.
   */
  line3?: string | null | undefined;
  /**
   * A quaternary address line for the company, providing space for any remaining address information. This field ensures that all possible address components are included, supporting detailed location data. Input should be a valid string if additional address information is required.
   */
  line4?: string | null | undefined;
  /**
   * The specific street number of the company's address, crucial for precise location identification. This field is part of the primary address line but can be specified separately for clarity. Ensure the input is a valid string representing the street number.
   */
  streetNumber?: string | null | undefined;
  /**
   * Specifies the city name for the company's address. This field is used to update the city information of the company's location, ensuring accurate geographical data in the CRM. The city name should be a valid string representing the company's location.
   */
  city?: string | null | undefined;
  /**
   * Indicates the state or region for the company's address. This property updates the state information, helping to maintain precise regional data for the company in the CRM. The state name should be a valid string corresponding to the company's location.
   */
  state?: string | null | undefined;
  /**
   * Represents the postal code for the company's address. This field updates the postal code, which is crucial for accurate mail delivery and location identification in the CRM. The postal code should be a valid string that matches the format used in the company's country.
   */
  postalCode?: string | null | undefined;
  /**
   * Defines the country code for the company's address, following the ISO 3166-1 alpha-2 standard. This property updates the country information, ensuring the company's address is internationally recognized and correctly formatted in the CRM. The country code must be a valid two-letter string as per the ISO standard.
   */
  country?: string | null | undefined;
  /**
   * Specifies the latitude coordinate for the company's address. This field updates the geographical latitude, which is essential for mapping and location services within the CRM. The latitude should be a valid string representing the geographical coordinate of the company's location.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the company's address. This property is used to specify the east-west position of the address on the Earth's surface. It should be a valid string representation of a longitude value, typically ranging from -180 to 180 degrees, to ensure accurate geolocation.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality associated with the company's address. This field helps in identifying the specific administrative region within a state or province where the company is located. It should be a valid string that accurately represents the county name for proper regional classification.
   */
  county?: string | null | undefined;
  /**
   * The full name of the primary contact person at the company's address. This property is crucial for identifying the individual responsible for communications or transactions at this location. It should be a valid string containing the contact's first and last name for effective correspondence.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the company's address. This field is used to address the contact person respectfully and appropriately in communications. It should be a valid string such as 'Mr.', 'Ms.', or 'Dr.', reflecting the contact's preferred title.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the company's address. This property is essential for direct communication with the company at this location. It should be a valid string formatted according to international or local standards, including country and area codes if applicable, to ensure successful contact.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the company's address. This field allows you to update or add a fax number for the company, which can be used for sending and receiving documents. Ensure the fax number is formatted correctly according to international standards if applicable.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the company's address. Use this field to update or specify the primary email contact for the company, ensuring it is a valid email format. This email can be used for official communications and notifications.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the company's address. This field is used to update or provide the company's official website, which should be a valid URL format. It helps in directing users to the company's online presence.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the company's address. This field allows you to include any extra information or comments about the address that might be relevant for record-keeping or future reference. It can be used to store miscellaneous details that do not fit into other fields.
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to the address object and prevent data conflicts. This field is crucial for concurrency control, as it is incremented with each update to ensure that changes are not overwritten by simultaneous operations. It helps maintain data integrity during updates.
   */
  rowVersion?: string | null | undefined;
};

export type UpdateCompanyRequestSocialLinks = {
  /**
   * A unique identifier for each social link object within the array. This ID is used to distinguish between different social media profiles and is crucial for updating or removing specific links. It is optional and should be provided if you need to update a specific social link.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media profile associated with the company. This field is required for each social link object and must be a valid URL format, such as https://www.twitter.com/apideck. It ensures that the correct link is updated or added to the company's profile.
   */
  url: string;
  /**
   * Specifies the type of social media platform for the link, such as 'twitter' or 'linkedin'. This helps categorize the social link and is optional, but recommended for clarity and organization of the company's social media profiles.
   */
  type?: string | null | undefined;
};

/**
 * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in identifying the context in which the phone number is used within the company record. It is optional and should be a descriptive string that aligns with the company's contact management strategy.
 */
export const UpdateCompanyRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in identifying the context in which the phone number is used within the company record. It is optional and should be a descriptive string that aligns with the company's contact management strategy.
 */
export type UpdateCompanyRequestPhoneNumbersType = ClosedEnum<
  typeof UpdateCompanyRequestPhoneNumbersType
>;

export type UpdateCompanyRequestPhoneNumbers = {
  /**
   * This property represents the unique identifier for a phone number associated with the company. It is used to specify which phone number record should be updated or referenced within the company's contact information. Although not required, providing this ID ensures precise updates to existing phone numbers.
   */
  id?: string | null | undefined;
  /**
   * The country code for the phone number, such as '+1' for the United States, is used to ensure the phone number is dialed correctly from international locations. This field helps maintain the global accessibility of the company's contact information. It should be formatted as a string with the '+' symbol followed by the country code digits.
   */
  countryCode?: string | null | undefined;
  /**
   * This property specifies the area code of the phone number, such as '323' for Los Angeles. It is crucial for routing calls to the correct geographic region within a country. The area code should be provided as a string of digits without any additional symbols or spaces.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number associated with the company, excluding the country and area codes. This is a required field and must be provided to ensure the company can be contacted directly. The number should be formatted as a string of digits, representing the local part of the phone number.
   */
  number: string;
  /**
   * The extension number for the phone line, if applicable, allows callers to reach a specific department or individual within the company. This field is optional and should be formatted as a string of digits, appended to the main phone number when dialing internally.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in identifying the context in which the phone number is used within the company record. It is optional and should be a descriptive string that aligns with the company's contact management strategy.
   */
  type?: UpdateCompanyRequestPhoneNumbersType | null | undefined;
};

/**
 * Defines the role or category of the email address, such as 'primary', 'secondary', or 'billing'. This helps in organizing and prioritizing email communications with the company. It is optional and should be a string that reflects the email's purpose.
 */
export const UpdateCompanyRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the role or category of the email address, such as 'primary', 'secondary', or 'billing'. This helps in organizing and prioritizing email communications with the company. It is optional and should be a string that reflects the email's purpose.
 */
export type UpdateCompanyRequestEmailsType = ClosedEnum<
  typeof UpdateCompanyRequestEmailsType
>;

export type UpdateCompanyRequestEmails = {
  /**
   * A unique identifier for each email address entry within the emails array. This ID is used to distinguish between different email records, especially when updating or removing specific emails. It should be a unique string that ensures precise identification of email entries.
   */
  id?: string | null | undefined;
  /**
   * The actual email address used for communication with the company. This field is required and must be a valid email format to ensure successful delivery of messages. It is crucial for maintaining accurate contact information within the CRM.
   */
  email: string | null;
  /**
   * Defines the role or category of the email address, such as 'primary', 'secondary', or 'billing'. This helps in organizing and prioritizing email communications with the company. It is optional and should be a string that reflects the email's purpose.
   */
  type?: UpdateCompanyRequestEmailsType | null | undefined;
};

/**
 * This object represents the type of company record being updated. It is used to categorize the company within the CRM system, allowing for better organization and retrieval of company data. The object should include relevant identifiers and names that define the company's classification.
 */
export type UpdateCompanyRequestCompanyRowType = {
  /**
   * The unique identifier for the row type of the company. This ID is used to specify the exact category or classification of the company within the CRM, ensuring that updates are applied to the correct type. It must be a valid string that corresponds to an existing row type in the system.
   */
  id?: string | null | undefined;
  /**
   * The name of the row type for the company. This field is used to provide a human-readable label for the company's classification, aiding in the identification and management of company records. It should be a descriptive string that accurately reflects the company's category.
   */
  name?: string | null | undefined;
};

export type UpdateCompanyRequestValue6 = {};

export type UpdateCompanyRequestValue4 = {};

/**
 * The value assigned to the custom field for the company record. This property holds the actual data or information that the custom field is meant to capture. It should be formatted according to the data type expected by the custom field's definition.
 */
export type UpdateCompanyRequestValue =
  | UpdateCompanyRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateCompanyRequestValue6>;

export type UpdateCompanyRequestCustomFields = {
  /**
   * Unique identifier for the custom field. This ID is crucial for distinguishing each custom field within the company's data, ensuring that updates are applied to the correct field. It must be a valid string that uniquely identifies the custom field in the CRM.
   */
  id: string | null;
  /**
   * The name of the custom field you wish to update for the company record. This field allows you to specify a unique identifier for custom data associated with the company. It should be a string that clearly represents the custom field's purpose within the CRM.
   */
  name?: string | null | undefined;
  /**
   * A detailed description of the custom field, providing additional context or information about its use. This helps in understanding the purpose and application of the custom field within the company's CRM record. It should be a descriptive string that clarifies the custom field's role.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field for the company record. This property holds the actual data or information that the custom field is meant to capture. It should be formatted according to the data type expected by the custom field's definition.
   */
  value?:
    | UpdateCompanyRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateCompanyRequestValue6>
    | null
    | undefined;
};

export type UpdateCompanyRequestExtendPaths = {
  /**
   * A required JSONPath string that indicates the specific location within the data structure where the update should be applied. This path must be valid and correctly formatted to ensure the value is set accurately at the desired location.
   */
  path: string;
  /**
   * The required value to be set at the specified JSONPath. This can be of any data type, allowing for flexible updates to the data structure. Ensure the value is compatible with the target location's expected data type.
   */
  value?: any | undefined;
};

export type UpdateCompanyRequestPassThrough = {
  /**
   * A unique identifier for the service to which the pass_through data should be applied. This field is required to ensure that the custom data is correctly associated with the intended service during the update process.
   */
  serviceId: string;
  /**
   * This optional field allows you to specify a unique identifier for a workflow operation. It is particularly useful when the API call involves multiple downstream requests, helping to track and manage these operations effectively. Ensure the identifier is unique within the context of your operations to avoid conflicts.
   */
  operationId?: string | undefined;
  /**
   * This property allows you to include additional fields or data that are not explicitly defined in the API schema. It provides flexibility for extending the request with custom properties as needed. Ensure that the object structure aligns with your specific data requirements.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects used to specify structured data modifications. Each object in the array should define a path and a value, allowing precise updates to nested data structures. This is essential for making targeted changes without altering the entire object.
   */
  extendPaths?: Array<UpdateCompanyRequestExtendPaths> | undefined;
};

export type UpdateCompanyRequest = {
  /**
   * The name of the company to be updated. This field is required and must be a non-empty string, as it identifies the company within the CRM system. Ensure the name accurately reflects the company's current identity for consistency across records.
   */
  name: string | null;
  /**
   * The unique identifier of the user who owns or manages the company record. This field is optional and can be used to assign or update the ownership of the company within the CRM. It should be a valid user ID that exists in the system.
   */
  ownerId?: string | null | undefined;
  /**
   * The URL of the company's image or logo. This optional field allows you to update the visual representation of the company in the CRM. Ensure the URL is accessible and points to a valid image file.
   */
  image?: string | null | undefined;
  /**
   * A brief overview or summary of the company. This optional field can be used to provide additional context or information about the company's operations, mission, or values. It should be concise yet informative to aid in understanding the company's profile.
   */
  description?: string | null | undefined;
  /**
   * The company's VAT (Value Added Tax) number, used for tax identification purposes. This optional field should contain a valid VAT number format as per the company's country regulations. It helps in ensuring compliance with tax reporting requirements.
   */
  vatNumber?: string | null | undefined;
  currency?: Currency | null | undefined;
  /**
   * Defines the current operational status of the company within the CRM. This field helps in categorizing the company for reporting and operational purposes. Ensure the status reflects the company's current state to maintain accurate records.
   */
  status?: string | null | undefined;
  /**
   * The fax number associated with the company, used for sending and receiving documents via fax. This field should contain a valid fax number format, allowing for seamless communication through traditional fax methods. Update this field if the company's fax number changes.
   */
  fax?: string | null | undefined;
  /**
   * Represents the total annual revenue generated by the company, expressed as a string. This information is crucial for financial analysis and reporting within the CRM. Ensure the value is updated to reflect the most recent fiscal year for accurate financial tracking.
   */
  annualRevenue?: string | null | undefined;
  /**
   * Indicates the total number of employees working at the company. This field is important for understanding the company's size and operational capacity. Update this number to reflect any changes in the workforce, ensuring accurate company profiling.
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * Specifies the business sector or category the company operates within. This field helps categorize the company for better organization and reporting within the CRM. It should be a descriptive string that accurately reflects the company's primary industry.
   */
  industry?: string | null | undefined;
  /**
   * Defines the ownership structure of the company, such as private, public, or government-owned. This information is crucial for understanding the company's governance and legal framework. It should be a string that clearly indicates the type of ownership.
   */
  ownership?: string | null | undefined;
  /**
   * A unique identifier assigned to the company for tax reporting purposes. This number is essential for compliance with tax regulations and should be formatted according to the relevant tax authority's standards. It must be a valid string that represents the company's sales tax registration.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * A unique identifier used for tax-related transactions involving the company as a payee. This number is necessary for ensuring accurate tax reporting and should comply with the format specified by the tax authority. It must be a valid string that identifies the company as a payee.
   */
  payeeNumber?: string | null | undefined;
  /**
   * The Australian Business Number (ABN) or Tax File Number (TFN) required for business operations and tax purposes in Australia. This identifier is crucial for legal and tax compliance and should be a valid number as per Australian regulations. It must be a string that accurately represents either the ABN or TFN.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * Specifies the ABN Branch for the company, which is necessary if a segment of the business needs to handle GST separately from the main entity. This field is optional and should be formatted as a string representing the branch identifier. It helps in distinguishing different GST accounting units within the same company.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) uniquely identifies the company in Australia. It must be a nine-digit number formatted as XXX XXX XXX, where the last digit is a check digit. This field is optional but crucial for legal and administrative purposes when updating company records.
   */
  acn?: string | null | undefined;
  /**
   * Represents the first name of a contact person associated with the company. This field is optional and should be a string. It is used to personalize communications and identify key contacts within the company record.
   */
  firstName?: string | null | undefined;
  /**
   * Denotes the last name of a contact person linked to the company. This optional field should be a string and is essential for identifying and addressing individuals in company communications and records.
   */
  lastName?: string | null | undefined;
  /**
   * Contains a list of bank accounts associated with the company. This optional field should be an array of bank account objects, each detailing account-specific information. It is used to manage and update financial details related to the company.
   */
  bankAccounts?: Array<UpdateCompanyRequestBankAccounts> | undefined;
  /**
   * A list of websites associated with the company. Each entry in the array should represent a distinct website, allowing for multiple URLs to be linked to the company profile. This field is optional and can be used to update or add new websites to the company's record.
   */
  websites?: Array<UpdateCompanyRequestWebsites> | undefined;
  /**
   * An array of address objects associated with the company. Each object within the array represents a distinct address record that can be updated or added. This property allows you to manage multiple addresses for a single company, ensuring comprehensive location data is maintained.
   */
  addresses?: Array<UpdateCompanyRequestAddresses> | undefined;
  /**
   * An array of social link objects associated with the company. Each object should contain details about a specific social media profile, helping to maintain a comprehensive online presence for the company. This property is optional and can be omitted if no updates to social links are needed.
   */
  socialLinks?: Array<UpdateCompanyRequestSocialLinks> | undefined;
  /**
   * An array of phone number objects associated with the company. Each object should contain details about a specific contact number, facilitating communication with the company. This property is optional and can be omitted if no updates to phone numbers are needed.
   */
  phoneNumbers?: Array<UpdateCompanyRequestPhoneNumbers> | undefined;
  /**
   * A collection of email objects associated with the company. Each object within the array should represent a distinct email address used for communication with the company. This array is optional but should be included if there are multiple email contacts to update.
   */
  emails?: Array<UpdateCompanyRequestEmails> | undefined;
  /**
   * This object represents the type of company record being updated. It is used to categorize the company within the CRM system, allowing for better organization and retrieval of company data. The object should include relevant identifiers and names that define the company's classification.
   */
  rowType?: UpdateCompanyRequestCompanyRowType | undefined;
  /**
   * An array of custom fields associated with the company. These fields allow for the extension of company data with additional, user-defined attributes, enabling more tailored data management. Each entry in the array should conform to the structure defined for custom fields.
   */
  customFields?: Array<UpdateCompanyRequestCustomFields> | undefined;
  /**
   * An array of tags associated with the company record, used for categorization or filtering purposes. Tags help in organizing and retrieving company records based on specific criteria or themes. Each tag should be a string that represents a meaningful label for the company.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Indicates whether the company record is read-only. This property is used to determine if the company data can be modified. If set to true, the company record cannot be updated, ensuring data integrity for certain records.
   */
  readOnly?: boolean | null | undefined;
  /**
   * A formal salutation for the contact person associated with the company, such as 'Mr' or 'Mrs'. This field is used to personalize communications and should be a valid salutation string.
   */
  salutation?: string | null | undefined;
  /**
   * The date of birth of the contact person in the company, formatted as a string. This information can be used for personalized interactions and should follow the standard date format (e.g., YYYY-MM-DD).
   */
  birthday?: RFCDate | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or modifications when updating a company record. This property is useful for passing additional information that may not be covered by standard fields.
   */
  passThrough?: Array<UpdateCompanyRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateCompanyRequestAccountType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestAccountType
> = z.nativeEnum(UpdateCompanyRequestAccountType);

/** @internal */
export const UpdateCompanyRequestAccountType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestAccountType
> = UpdateCompanyRequestAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestAccountType$ {
  /** @deprecated use `UpdateCompanyRequestAccountType$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestAccountType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestAccountType$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestAccountType$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestBankAccounts$inboundSchema: z.ZodType<
  UpdateCompanyRequestBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(UpdateCompanyRequestAccountType$inboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type UpdateCompanyRequestBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestBankAccounts$outboundSchema: z.ZodType<
  UpdateCompanyRequestBankAccounts$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(UpdateCompanyRequestAccountType$outboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestBankAccounts$ {
  /** @deprecated use `UpdateCompanyRequestBankAccounts$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestBankAccounts$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestBankAccounts$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestBankAccounts$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestBankAccounts$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestBankAccounts$Outbound;
}

export function updateCompanyRequestBankAccountsToJSON(
  updateCompanyRequestBankAccounts: UpdateCompanyRequestBankAccounts,
): string {
  return JSON.stringify(
    UpdateCompanyRequestBankAccounts$outboundSchema.parse(
      updateCompanyRequestBankAccounts,
    ),
  );
}

export function updateCompanyRequestBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestBankAccounts' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestType
> = z.nativeEnum(UpdateCompanyRequestType);

/** @internal */
export const UpdateCompanyRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestType
> = UpdateCompanyRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestType$ {
  /** @deprecated use `UpdateCompanyRequestType$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestType$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestType$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestWebsites$inboundSchema: z.ZodType<
  UpdateCompanyRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateCompanyRequestType$inboundSchema).optional(),
});

/** @internal */
export type UpdateCompanyRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestWebsites$outboundSchema: z.ZodType<
  UpdateCompanyRequestWebsites$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateCompanyRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestWebsites$ {
  /** @deprecated use `UpdateCompanyRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestWebsites$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestWebsites$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestWebsites$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestWebsites$Outbound;
}

export function updateCompanyRequestWebsitesToJSON(
  updateCompanyRequestWebsites: UpdateCompanyRequestWebsites,
): string {
  return JSON.stringify(
    UpdateCompanyRequestWebsites$outboundSchema.parse(
      updateCompanyRequestWebsites,
    ),
  );
}

export function updateCompanyRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestWebsites' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestAddressesType
> = z.nativeEnum(UpdateCompanyRequestAddressesType);

/** @internal */
export const UpdateCompanyRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestAddressesType
> = UpdateCompanyRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestAddressesType$ {
  /** @deprecated use `UpdateCompanyRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestAddressesType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCompanyRequestAddressesType$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestAddresses$inboundSchema: z.ZodType<
  UpdateCompanyRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateCompanyRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UpdateCompanyRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestAddresses$outboundSchema: z.ZodType<
  UpdateCompanyRequestAddresses$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateCompanyRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestAddresses$ {
  /** @deprecated use `UpdateCompanyRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestAddresses$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestAddresses$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestAddresses$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestAddresses$Outbound;
}

export function updateCompanyRequestAddressesToJSON(
  updateCompanyRequestAddresses: UpdateCompanyRequestAddresses,
): string {
  return JSON.stringify(
    UpdateCompanyRequestAddresses$outboundSchema.parse(
      updateCompanyRequestAddresses,
    ),
  );
}

export function updateCompanyRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestAddresses' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestSocialLinks$inboundSchema: z.ZodType<
  UpdateCompanyRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateCompanyRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestSocialLinks$outboundSchema: z.ZodType<
  UpdateCompanyRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestSocialLinks$ {
  /** @deprecated use `UpdateCompanyRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestSocialLinks$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestSocialLinks$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestSocialLinks$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestSocialLinks$Outbound;
}

export function updateCompanyRequestSocialLinksToJSON(
  updateCompanyRequestSocialLinks: UpdateCompanyRequestSocialLinks,
): string {
  return JSON.stringify(
    UpdateCompanyRequestSocialLinks$outboundSchema.parse(
      updateCompanyRequestSocialLinks,
    ),
  );
}

export function updateCompanyRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateCompanyRequestPhoneNumbersType> = z.nativeEnum(
    UpdateCompanyRequestPhoneNumbersType,
  );

/** @internal */
export const UpdateCompanyRequestPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateCompanyRequestPhoneNumbersType> =
    UpdateCompanyRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestPhoneNumbersType$ {
  /** @deprecated use `UpdateCompanyRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCompanyRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCompanyRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestPhoneNumbers$inboundSchema: z.ZodType<
  UpdateCompanyRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateCompanyRequestPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UpdateCompanyRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestPhoneNumbers$outboundSchema: z.ZodType<
  UpdateCompanyRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateCompanyRequestPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestPhoneNumbers$ {
  /** @deprecated use `UpdateCompanyRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestPhoneNumbers$Outbound;
}

export function updateCompanyRequestPhoneNumbersToJSON(
  updateCompanyRequestPhoneNumbers: UpdateCompanyRequestPhoneNumbers,
): string {
  return JSON.stringify(
    UpdateCompanyRequestPhoneNumbers$outboundSchema.parse(
      updateCompanyRequestPhoneNumbers,
    ),
  );
}

export function updateCompanyRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestEmailsType
> = z.nativeEnum(UpdateCompanyRequestEmailsType);

/** @internal */
export const UpdateCompanyRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestEmailsType
> = UpdateCompanyRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestEmailsType$ {
  /** @deprecated use `UpdateCompanyRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestEmailsType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestEmailsType$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestEmails$inboundSchema: z.ZodType<
  UpdateCompanyRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateCompanyRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type UpdateCompanyRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestEmails$outboundSchema: z.ZodType<
  UpdateCompanyRequestEmails$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateCompanyRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestEmails$ {
  /** @deprecated use `UpdateCompanyRequestEmails$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestEmails$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestEmails$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestEmails$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestEmails$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestEmails$Outbound;
}

export function updateCompanyRequestEmailsToJSON(
  updateCompanyRequestEmails: UpdateCompanyRequestEmails,
): string {
  return JSON.stringify(
    UpdateCompanyRequestEmails$outboundSchema.parse(updateCompanyRequestEmails),
  );
}

export function updateCompanyRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestEmails' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestCompanyRowType$inboundSchema: z.ZodType<
  UpdateCompanyRequestCompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateCompanyRequestCompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestCompanyRowType$outboundSchema: z.ZodType<
  UpdateCompanyRequestCompanyRowType$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestCompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestCompanyRowType$ {
  /** @deprecated use `UpdateCompanyRequestCompanyRowType$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestCompanyRowType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestCompanyRowType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCompanyRequestCompanyRowType$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestCompanyRowType$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestCompanyRowType$Outbound;
}

export function updateCompanyRequestCompanyRowTypeToJSON(
  updateCompanyRequestCompanyRowType: UpdateCompanyRequestCompanyRowType,
): string {
  return JSON.stringify(
    UpdateCompanyRequestCompanyRowType$outboundSchema.parse(
      updateCompanyRequestCompanyRowType,
    ),
  );
}

export function updateCompanyRequestCompanyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestCompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateCompanyRequestCompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestCompanyRowType' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestValue6$inboundSchema: z.ZodType<
  UpdateCompanyRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateCompanyRequestValue6$Outbound = {};

/** @internal */
export const UpdateCompanyRequestValue6$outboundSchema: z.ZodType<
  UpdateCompanyRequestValue6$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestValue6$ {
  /** @deprecated use `UpdateCompanyRequestValue6$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestValue6$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestValue6$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestValue6$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestValue6$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestValue6$Outbound;
}

export function updateCompanyRequestValue6ToJSON(
  updateCompanyRequestValue6: UpdateCompanyRequestValue6,
): string {
  return JSON.stringify(
    UpdateCompanyRequestValue6$outboundSchema.parse(updateCompanyRequestValue6),
  );
}

export function updateCompanyRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestValue6' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestValue4$inboundSchema: z.ZodType<
  UpdateCompanyRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateCompanyRequestValue4$Outbound = {};

/** @internal */
export const UpdateCompanyRequestValue4$outboundSchema: z.ZodType<
  UpdateCompanyRequestValue4$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestValue4$ {
  /** @deprecated use `UpdateCompanyRequestValue4$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestValue4$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestValue4$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestValue4$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestValue4$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestValue4$Outbound;
}

export function updateCompanyRequestValue4ToJSON(
  updateCompanyRequestValue4: UpdateCompanyRequestValue4,
): string {
  return JSON.stringify(
    UpdateCompanyRequestValue4$outboundSchema.parse(updateCompanyRequestValue4),
  );
}

export function updateCompanyRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestValue4' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestValue$inboundSchema: z.ZodType<
  UpdateCompanyRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateCompanyRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateCompanyRequestValue6$inboundSchema)),
]);

/** @internal */
export type UpdateCompanyRequestValue$Outbound =
  | UpdateCompanyRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateCompanyRequestValue6$Outbound>;

/** @internal */
export const UpdateCompanyRequestValue$outboundSchema: z.ZodType<
  UpdateCompanyRequestValue$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestValue
> = z.union([
  z.lazy(() => UpdateCompanyRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateCompanyRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestValue$ {
  /** @deprecated use `UpdateCompanyRequestValue$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestValue$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestValue$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestValue$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestValue$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestValue$Outbound;
}

export function updateCompanyRequestValueToJSON(
  updateCompanyRequestValue: UpdateCompanyRequestValue,
): string {
  return JSON.stringify(
    UpdateCompanyRequestValue$outboundSchema.parse(updateCompanyRequestValue),
  );
}

export function updateCompanyRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestValue' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestCustomFields$inboundSchema: z.ZodType<
  UpdateCompanyRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateCompanyRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateCompanyRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type UpdateCompanyRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | UpdateCompanyRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateCompanyRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateCompanyRequestCustomFields$outboundSchema: z.ZodType<
  UpdateCompanyRequestCustomFields$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateCompanyRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateCompanyRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestCustomFields$ {
  /** @deprecated use `UpdateCompanyRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestCustomFields$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestCustomFields$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestCustomFields$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestCustomFields$Outbound;
}

export function updateCompanyRequestCustomFieldsToJSON(
  updateCompanyRequestCustomFields: UpdateCompanyRequestCustomFields,
): string {
  return JSON.stringify(
    UpdateCompanyRequestCustomFields$outboundSchema.parse(
      updateCompanyRequestCustomFields,
    ),
  );
}

export function updateCompanyRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateCompanyRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateCompanyRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateCompanyRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateCompanyRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestExtendPaths$ {
  /** @deprecated use `UpdateCompanyRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestExtendPaths$Outbound;
}

export function updateCompanyRequestExtendPathsToJSON(
  updateCompanyRequestExtendPaths: UpdateCompanyRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateCompanyRequestExtendPaths$outboundSchema.parse(
      updateCompanyRequestExtendPaths,
    ),
  );
}

export function updateCompanyRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestPassThrough$inboundSchema: z.ZodType<
  UpdateCompanyRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateCompanyRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateCompanyRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateCompanyRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateCompanyRequestPassThrough$outboundSchema: z.ZodType<
  UpdateCompanyRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateCompanyRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestPassThrough$ {
  /** @deprecated use `UpdateCompanyRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestPassThrough$Outbound;
}

export function updateCompanyRequestPassThroughToJSON(
  updateCompanyRequestPassThrough: UpdateCompanyRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateCompanyRequestPassThrough$outboundSchema.parse(
      updateCompanyRequestPassThrough,
    ),
  );
}

export function updateCompanyRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequest$inboundSchema: z.ZodType<
  UpdateCompanyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vat_number: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annual_revenue: z.nullable(z.string()).optional(),
  number_of_employees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  sales_tax_number: z.nullable(z.string()).optional(),
  payee_number: z.nullable(z.string()).optional(),
  abn_or_tfn: z.nullable(z.string()).optional(),
  abn_branch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  bank_accounts: z.array(
    z.lazy(() => UpdateCompanyRequestBankAccounts$inboundSchema),
  ).optional(),
  websites: z.array(z.lazy(() => UpdateCompanyRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateCompanyRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => UpdateCompanyRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => UpdateCompanyRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateCompanyRequestEmails$inboundSchema))
    .optional(),
  row_type: z.lazy(() => UpdateCompanyRequestCompanyRowType$inboundSchema)
    .optional(),
  custom_fields: z.array(
    z.lazy(() => UpdateCompanyRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  read_only: z.nullable(z.boolean()).optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  pass_through: z.array(
    z.lazy(() => UpdateCompanyRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "vat_number": "vatNumber",
    "annual_revenue": "annualRevenue",
    "number_of_employees": "numberOfEmployees",
    "sales_tax_number": "salesTaxNumber",
    "payee_number": "payeeNumber",
    "abn_or_tfn": "abnOrTfn",
    "abn_branch": "abnBranch",
    "first_name": "firstName",
    "last_name": "lastName",
    "bank_accounts": "bankAccounts",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "row_type": "rowType",
    "custom_fields": "customFields",
    "read_only": "readOnly",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateCompanyRequest$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  bank_accounts?: Array<UpdateCompanyRequestBankAccounts$Outbound> | undefined;
  websites?: Array<UpdateCompanyRequestWebsites$Outbound> | undefined;
  addresses?: Array<UpdateCompanyRequestAddresses$Outbound> | undefined;
  social_links?: Array<UpdateCompanyRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<UpdateCompanyRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<UpdateCompanyRequestEmails$Outbound> | undefined;
  row_type?: UpdateCompanyRequestCompanyRowType$Outbound | undefined;
  custom_fields?: Array<UpdateCompanyRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  pass_through?: Array<UpdateCompanyRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateCompanyRequest$outboundSchema: z.ZodType<
  UpdateCompanyRequest$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequest
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annualRevenue: z.nullable(z.string()).optional(),
  numberOfEmployees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  salesTaxNumber: z.nullable(z.string()).optional(),
  payeeNumber: z.nullable(z.string()).optional(),
  abnOrTfn: z.nullable(z.string()).optional(),
  abnBranch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  bankAccounts: z.array(
    z.lazy(() => UpdateCompanyRequestBankAccounts$outboundSchema),
  ).optional(),
  websites: z.array(z.lazy(() => UpdateCompanyRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateCompanyRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => UpdateCompanyRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => UpdateCompanyRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateCompanyRequestEmails$outboundSchema))
    .optional(),
  rowType: z.lazy(() => UpdateCompanyRequestCompanyRowType$outboundSchema)
    .optional(),
  customFields: z.array(
    z.lazy(() => UpdateCompanyRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  readOnly: z.nullable(z.boolean()).optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  passThrough: z.array(
    z.lazy(() => UpdateCompanyRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    vatNumber: "vat_number",
    annualRevenue: "annual_revenue",
    numberOfEmployees: "number_of_employees",
    salesTaxNumber: "sales_tax_number",
    payeeNumber: "payee_number",
    abnOrTfn: "abn_or_tfn",
    abnBranch: "abn_branch",
    firstName: "first_name",
    lastName: "last_name",
    bankAccounts: "bank_accounts",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    rowType: "row_type",
    customFields: "custom_fields",
    readOnly: "read_only",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequest$ {
  /** @deprecated use `UpdateCompanyRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequest$inboundSchema;
  /** @deprecated use `UpdateCompanyRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequest$outboundSchema;
  /** @deprecated use `UpdateCompanyRequest$Outbound` instead. */
  export type Outbound = UpdateCompanyRequest$Outbound;
}

export function updateCompanyRequestToJSON(
  updateCompanyRequest: UpdateCompanyRequest,
): string {
  return JSON.stringify(
    UpdateCompanyRequest$outboundSchema.parse(updateCompanyRequest),
  );
}

export function updateCompanyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequest' from JSON`,
  );
}
