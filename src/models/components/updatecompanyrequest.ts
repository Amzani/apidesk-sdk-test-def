/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the currency type associated with financial transactions or records for the company. It should be a valid ISO 4217 currency code, such as 'USD' for US Dollars. This property helps ensure that all monetary values are accurately represented in the company's preferred currency format.
 */
export const UpdateCompanyRequestCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Specifies the currency type associated with financial transactions or records for the company. It should be a valid ISO 4217 currency code, such as 'USD' for US Dollars. This property helps ensure that all monetary values are accurately represented in the company's preferred currency format.
 */
export type UpdateCompanyRequestCurrency = ClosedEnum<
  typeof UpdateCompanyRequestCurrency
>;

/**
 * The classification of the company's bank account, such as 'savings', 'checking', or 'business'. This property helps categorize the account for financial management purposes and should reflect the account type as recognized by the bank. It is used to update the company's financial profile in the CRM.
 */
export const UpdateCompanyRequestAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The classification of the company's bank account, such as 'savings', 'checking', or 'business'. This property helps categorize the account for financial management purposes and should reflect the account type as recognized by the bank. It is used to update the company's financial profile in the CRM.
 */
export type UpdateCompanyRequestAccountType = ClosedEnum<
  typeof UpdateCompanyRequestAccountType
>;

/**
 * Specifies the currency type for the bank account associated with the company. Must be a valid ISO 4217 currency code, such as 'USD' for US Dollar or 'EUR' for Euro. This property helps ensure financial data is accurately represented in the correct currency format.
 */
export const UpdateCompanyRequestBankAccountsCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Specifies the currency type for the bank account associated with the company. Must be a valid ISO 4217 currency code, such as 'USD' for US Dollar or 'EUR' for Euro. This property helps ensure financial data is accurately represented in the correct currency format.
 */
export type UpdateCompanyRequestBankAccountsCurrency = ClosedEnum<
  typeof UpdateCompanyRequestBankAccountsCurrency
>;

export type UpdateCompanyRequestBankAccounts = {
  /**
   * The name of the bank where the company's account is held. This property helps identify the financial institution associated with the account and should be a valid bank name. It is used to update the company's banking details in the CRM system.
   */
  bankName?: string | null | undefined;
  /**
   * The unique number assigned to the company's bank account. This property is crucial for identifying the specific account within the bank and should be formatted according to the bank's standards. It is used to ensure accurate financial transactions and record-keeping in the CRM.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name under which the company's bank account is registered. This property is used to verify the account holder's identity and should match the name on the bank's records. It is essential for maintaining accurate and consistent banking information in the CRM.
   */
  accountName?: string | null | undefined;
  /**
   * The classification of the company's bank account, such as 'savings', 'checking', or 'business'. This property helps categorize the account for financial management purposes and should reflect the account type as recognized by the bank. It is used to update the company's financial profile in the CRM.
   */
  accountType?: UpdateCompanyRequestAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN) for the company's bank account. This property is used for international transactions and must comply with the IBAN format standards. It is essential for ensuring the company can engage in cross-border financial activities through the CRM.
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC) is used to uniquely identify a bank during international transactions. It must be a valid BIC format, typically 8 or 11 characters long, consisting of letters and numbers. This property is optional but can be included to ensure precise identification of the bank in cross-border updates.
   */
  bic?: string | null | undefined;
  /**
   * The routing number is a nine-digit code used to identify a financial institution within the United States. It is essential for processing domestic transactions and must adhere to the standard nine-digit format. Including this property helps ensure that updates to the company's bank account details are accurately processed within the U.S. banking system.
   */
  routingNumber?: string | null | undefined;
  /**
   * The BSB number is a six-digit code used to identify a specific branch of a bank in Australia or New Zealand. It is crucial for routing transactions to the correct branch and must be formatted as a six-digit numeric code. This property is optional but can be included to facilitate accurate financial transactions in these regions.
   */
  bsbNumber?: string | null | undefined;
  /**
   * The branch identifier uniquely identifies a specific branch of a bank or financial institution. It is used to direct transactions to the correct branch and should be formatted according to the bank's standards. Including this property can help ensure that updates to the company's banking details are accurately applied to the intended branch.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * The bank code is assigned by a central authority to identify banks within a country. It is used in conjunction with other identifiers to ensure accurate processing of transactions and must comply with the country's banking standards. This property is optional but can be included to enhance the precision of bank-related updates in the CRM system.
   */
  bankCode?: string | null | undefined;
  /**
   * Specifies the currency type for the bank account associated with the company. Must be a valid ISO 4217 currency code, such as 'USD' for US Dollar or 'EUR' for Euro. This property helps ensure financial data is accurately represented in the correct currency format.
   */
  currency?: UpdateCompanyRequestBankAccountsCurrency | null | undefined;
};

/**
 * Defines the category or purpose of the website, such as 'corporate', 'e-commerce', or 'blog'. This helps categorize the company's online resources and provides context for the website's role in the company's digital strategy.
 */
export const UpdateCompanyRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Defines the category or purpose of the website, such as 'corporate', 'e-commerce', or 'blog'. This helps categorize the company's online resources and provides context for the website's role in the company's digital strategy.
 */
export type UpdateCompanyRequestType = ClosedEnum<
  typeof UpdateCompanyRequestType
>;

export type UpdateCompanyRequestWebsites = {
  /**
   * A unique identifier for each website entry within the company's list of websites. This ID is used to distinguish between different websites and manage them individually within the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The full URL of the company's website, which must be a valid and reachable web address. This property is essential for linking the company's online presence to its CRM record, ensuring accurate and accessible web information.
   */
  url: string;
  /**
   * Defines the category or purpose of the website, such as 'corporate', 'e-commerce', or 'blog'. This helps categorize the company's online resources and provides context for the website's role in the company's digital strategy.
   */
  type?: UpdateCompanyRequestType | null | undefined;
};

/**
 * Specifies the type of address, such as 'billing', 'shipping', or 'office'. This helps categorize the address within the company's records. The value should be a string that matches predefined address types in the CRM system.
 */
export const UpdateCompanyRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of address, such as 'billing', 'shipping', or 'office'. This helps categorize the address within the company's records. The value should be a string that matches predefined address types in the CRM system.
 */
export type UpdateCompanyRequestAddressesType = ClosedEnum<
  typeof UpdateCompanyRequestAddressesType
>;

export type UpdateCompanyRequestAddresses = {
  /**
   * A unique identifier for each address within the addresses array. This ID is used to specify which existing address record should be updated. It must be a valid string that corresponds to an existing address in the CRM system.
   */
  id?: string | null | undefined;
  /**
   * Specifies the type of address, such as 'billing', 'shipping', or 'office'. This helps categorize the address within the company's records. The value should be a string that matches predefined address types in the CRM system.
   */
  type?: UpdateCompanyRequestAddressesType | null | undefined;
  /**
   * The full address in a single string format. This is useful for APIs that do not support structured address data. It should be a comprehensive address string that includes street, city, state, and postal code.
   */
  string?: string | null | undefined;
  /**
   * A descriptive name for the address, such as 'Headquarters' or 'Main Office'. This helps identify the address within the company's records. The name should be a clear and concise string that reflects the address's purpose or location.
   */
  name?: string | null | undefined;
  /**
   * The primary address line, typically including the street number, street name, and any suite or apartment number. This field helps identify the main location of the company and should be formatted as a standard address line.
   */
  line1?: string | null | undefined;
  /**
   * An additional address line for supplementary information such as building name or floor number. This field is optional and can be used to provide more detailed location data if necessary.
   */
  line2?: string | null | undefined;
  /**
   * A third address line for any extra details that do not fit in the first two lines. This is optional and typically used for extended address information.
   */
  line3?: string | null | undefined;
  /**
   * A fourth address line for further address details, often used for complex addresses. This field is optional and should be used only if additional address information is needed.
   */
  line4?: string | null | undefined;
  /**
   * The specific street number of the company's address. This field is part of the primary address line and is crucial for precise location identification. It should be a numeric or alphanumeric string as per local address conventions.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name associated with the company's address. This property is used to update the city information of a company's address in the CRM. It should be a valid city name and is optional, allowing for partial updates to the address.
   */
  city?: string | null | undefined;
  /**
   * The state or region name for the company's address. This property updates the state information in the CRM and should be a valid state name. It is optional, enabling updates without requiring all address fields.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code for the company's address. This property updates the postal code in the CRM and should follow the standard postal format for the respective country. It is optional, allowing for selective updates.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the company's address, following the ISO 3166-1 alpha-2 standard. This property updates the country information in the CRM and must be a valid two-letter country code. It is optional, supporting partial address updates.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the company's address. This property updates the geographical latitude in the CRM and should be a valid latitude value. It is optional, allowing for updates to geographical data without altering other address details.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the company's address, used for geolocation purposes. This should be a valid string representation of a longitude value, typically ranging from -180 to 180. Including this helps in mapping and location-based services within the CRM.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality associated with the company's address. This field is optional and can be used to provide more detailed location information, which may be useful for regional analysis or reporting within the CRM.
   */
  county?: string | null | undefined;
  /**
   * The full name of the primary contact person at the specified address. This optional field helps identify the main point of contact for communications and correspondence related to the company.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title (e.g., Mr., Ms., Dr.) of the contact person at the address. This optional field is used to personalize communications and should match the contact's preferred form of address.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the company's address, used for direct communication. This should be a valid phone number format, including country code if applicable, to ensure successful contact with the company.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the company's address. This optional field should be a valid fax number format, allowing for efficient communication with the company via fax. It helps maintain comprehensive contact details within the CRM system.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the company's address. This optional field must be a valid email format, ensuring that electronic communications can be accurately directed to the company. It supports maintaining up-to-date contact information in the CRM.
   */
  email?: string | null | undefined;
  /**
   * The website URL for the company's address. This optional field should be a valid URL, providing a direct link to the company's online presence. It enhances the CRM's ability to store comprehensive company profiles.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the company's address. This optional field allows for the inclusion of any extra information that might be relevant to the company's location or contact details, aiding in detailed record-keeping within the CRM.
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to track changes to the address object and prevent data conflicts. This optional field is incremented with each update, ensuring that the most recent version of the address is maintained in the CRM, thus supporting data integrity during updates.
   */
  rowVersion?: string | null | undefined;
};

export type UpdateCompanyRequestSocialLinks = {
  /**
   * A unique identifier for each social link entry. This ID is used to distinguish between different social media links associated with the company, facilitating updates and management of these links.
   */
  id?: string | null | undefined;
  /**
   * The full URL of the company's social media profile. This must be a valid URL format, such as https://www.twitter.com/apideck, and is essential for linking to the company's social media presence.
   */
  url: string;
  /**
   * Specifies the type of social media platform, such as 'twitter' or 'linkedin'. This helps categorize the social link and is useful for filtering or displaying specific types of social media connections.
   */
  type?: string | null | undefined;
};

/**
 * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in identifying the context in which the phone number is used within the company's contact information. It is optional and should be a valid string representing the type of phone number.
 */
export const UpdateCompanyRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in identifying the context in which the phone number is used within the company's contact information. It is optional and should be a valid string representing the type of phone number.
 */
export type UpdateCompanyRequestPhoneNumbersType = ClosedEnum<
  typeof UpdateCompanyRequestPhoneNumbersType
>;

export type UpdateCompanyRequestPhoneNumbers = {
  /**
   * This property represents the unique identifier for a specific phone number associated with the company. It is used to distinguish between different phone numbers when updating company records. Although not required, providing this ID helps ensure that the correct phone number is updated in the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The country code for the phone number, such as '+1' for the United States. This property is used to specify the international dialing code, ensuring the phone number is formatted correctly for international calls. It is optional but recommended for clarity and accuracy in global communications.
   */
  countryCode?: string | null | undefined;
  /**
   * This property specifies the area code of the phone number, such as '323' for Los Angeles. It helps in identifying the geographic region associated with the phone number. While optional, including the area code ensures the phone number is complete and correctly formatted for regional dialing.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number associated with the company, excluding country and area codes. This property is required and must be a valid string of digits, as it is essential for contacting the company directly. It forms the core part of the phone number used in CRM records.
   */
  number: string;
  /**
   * An optional property that specifies the extension number for the phone line, if applicable. This is used to direct calls to a specific department or individual within the company. Including an extension can facilitate more efficient communication within large organizations.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the category of the phone number, such as 'work', 'home', or 'mobile'. This helps in identifying the context in which the phone number is used within the company's contact information. It is optional and should be a valid string representing the type of phone number.
   */
  type?: UpdateCompanyRequestPhoneNumbersType | null | undefined;
};

/**
 * Defines the nature of the email address, such as 'work', 'personal', or 'support'. This classification helps in organizing and managing email communications based on their intended use. It is optional and should be a valid string indicating the email type.
 */
export const UpdateCompanyRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the nature of the email address, such as 'work', 'personal', or 'support'. This classification helps in organizing and managing email communications based on their intended use. It is optional and should be a valid string indicating the email type.
 */
export type UpdateCompanyRequestEmailsType = ClosedEnum<
  typeof UpdateCompanyRequestEmailsType
>;

export type UpdateCompanyRequestEmails = {
  /**
   * A unique identifier for each email address object within the emails array. This ID is used to distinguish between different email entries and is particularly useful for updates or deletions of specific email records. It should be a valid string, though it is not mandatory to include.
   */
  id?: string | null | undefined;
  /**
   * The actual email address used for company communications. This field is required and must be a valid email format, ensuring that messages can be correctly routed to the intended recipient. It is crucial for maintaining accurate contact information within the CRM.
   */
  email: string | null;
  /**
   * Defines the nature of the email address, such as 'work', 'personal', or 'support'. This classification helps in organizing and managing email communications based on their intended use. It is optional and should be a valid string indicating the email type.
   */
  type?: UpdateCompanyRequestEmailsType | null | undefined;
};

/**
 * An object representing the type of the company record being updated. This property allows you to specify additional attributes related to the company's classification or category. It is optional and can be omitted if no changes to the company type are needed.
 */
export type UpdateCompanyRequestCompanyRowType = {
  /**
   * The unique identifier for the specific type of company. This string should match an existing type ID within the CRM system, allowing you to update the company's classification. It is optional and only necessary if you are changing the company type.
   */
  id?: string | null | undefined;
  /**
   * The name of the company type. This string provides a human-readable label for the company classification, which can be updated to reflect changes in the company's business category. It is optional and should be used in conjunction with 'row_type.id' if updating the type.
   */
  name?: string | null | undefined;
};

export type Value6 = {};

export type Value4 = {};

/**
 * The specific data or information stored in the custom field for the company record. This value can vary based on the custom field's purpose and should be formatted according to the field's requirements.
 */
export type UpdateCompanyRequestValue =
  | Value4
  | string
  | number
  | boolean
  | Array<string>
  | Array<Value6>;

export type UpdateCompanyRequestCustomFields = {
  /**
   * A mandatory unique identifier for each custom field within the array. This string ensures that each custom field is distinctly recognized within the CRM, facilitating precise updates and data management. It must be provided for each custom field entry to ensure proper identification and update.
   */
  id: string | null;
  /**
   * The name assigned to a custom field within the company record. This field allows for additional, user-defined data to be associated with the company, enhancing the flexibility of data management. It should be a descriptive string that clearly identifies the custom field's purpose.
   */
  name?: string | null | undefined;
  /**
   * A detailed explanation of the custom field's purpose and usage within the company record. This description helps users understand the context and relevance of the custom field, ensuring accurate data entry and retrieval.
   */
  description?: string | null | undefined;
  /**
   * The specific data or information stored in the custom field for the company record. This value can vary based on the custom field's purpose and should be formatted according to the field's requirements.
   */
  value?:
    | Value4
    | string
    | number
    | boolean
    | Array<string>
    | Array<Value6>
    | null
    | undefined;
};

export type UpdateCompanyRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where the value should be applied. This is crucial for targeting specific fields in nested objects, ensuring that updates are accurately placed.
   */
  path: string;
  /**
   * The value to be set at the specified path, which can be of any data type. This flexibility allows for a wide range of updates, from simple data replacements to complex object modifications, depending on the needs of the operation.
   */
  value?: any | undefined;
};

export type UpdateCompanyRequestPassThrough = {
  /**
   * Identifies the specific service to which the pass_through data applies. This string must match the service ID used in your integration setup, ensuring that the custom data is correctly routed and applied to the intended service. It is a mandatory field within the pass_through array.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that this pass-through should be applied to. Useful for Unify calls involving multiple downstream requests, allowing precise targeting of operations within complex workflows.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties. This can be used to add custom fields or additional data to the company record, enabling tailored modifications to meet specific business needs.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. This allows developers to apply changes to nested data structures within the company record, facilitating precise updates without altering unrelated data.
   */
  extendPaths?: Array<UpdateCompanyRequestExtendPaths> | undefined;
};

export type UpdateCompanyRequest = {
  /**
   * The official registered name of the company to be updated. This field is required and must be a non-empty string that accurately reflects the company's legal name. It is crucial for identifying the company within the CRM system and ensuring all updates are applied to the correct entity.
   */
  name: string | null;
  /**
   * The unique identifier of the user who owns or manages the company record. This field is optional and can be used to assign or update the ownership of the company within the CRM. It should be a valid user ID that exists in the system.
   */
  ownerId?: string | null | undefined;
  /**
   * The URL of the company's logo or representative image. This optional field allows you to update the visual representation of the company in the CRM. The URL should point to a valid image file accessible over the internet.
   */
  image?: string | null | undefined;
  /**
   * A brief overview or summary of the company's activities, mission, or services. This optional field can be used to provide additional context about the company within the CRM. It should be concise yet informative, enhancing the company's profile.
   */
  description?: string | null | undefined;
  /**
   * The company's VAT (Value Added Tax) number, used for tax identification purposes. This optional field should contain a valid VAT number if applicable, ensuring compliance with tax regulations. It helps in financial transactions and reporting within the CRM.
   */
  vatNumber?: string | null | undefined;
  /**
   * Specifies the currency type associated with financial transactions or records for the company. It should be a valid ISO 4217 currency code, such as 'USD' for US Dollars. This property helps ensure that all monetary values are accurately represented in the company's preferred currency format.
   */
  currency?: UpdateCompanyRequestCurrency | null | undefined;
  /**
   * Represents the current operational status of the company, such as 'active', 'inactive', or 'pending'. This property is used to track and manage the company's lifecycle within the CRM system, aiding in filtering and reporting processes.
   */
  status?: string | null | undefined;
  /**
   * The company's fax number, formatted as a string. This property allows for the inclusion of traditional communication methods in the company's contact information, supporting comprehensive contact management.
   */
  fax?: string | null | undefined;
  /**
   * Indicates the company's annual revenue, typically represented as a numeric string. This property is crucial for financial analysis and reporting, helping to assess the company's market position and growth potential.
   */
  annualRevenue?: string | null | undefined;
  /**
   * Denotes the total number of employees working at the company, expressed as a numeric string. This information is valuable for understanding the company's size and operational capacity, and it supports workforce-related analytics.
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * Specifies the sector or field in which the company operates, such as technology, healthcare, or finance. This property helps categorize the company within the CRM for better organization and reporting. It should be a valid string that accurately reflects the company's primary business activity.
   */
  industry?: string | null | undefined;
  /**
   * Indicates the type of ownership structure of the company, such as private, public, or government-owned. This information is crucial for understanding the company's legal and operational framework within the CRM. The value should be a valid string representing the ownership type.
   */
  ownership?: string | null | undefined;
  /**
   * A unique identifier assigned to the company for tax reporting purposes. This number is essential for compliance with tax regulations and should be formatted according to the relevant tax authority's standards. It helps ensure accurate tax-related transactions and reporting within the CRM.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * A unique identifier used to recognize a payee for tax purposes, ensuring proper tax processing and compliance. This number should be formatted as per the applicable tax authority's guidelines. It is used within the CRM to manage financial transactions related to the company.
   */
  payeeNumber?: string | null | undefined;
  /**
   * The Australian Business Number (ABN) or Tax File Number (TFN) required for businesses operating in Australia. This identifier is crucial for tax and business operations within the country and must be formatted correctly according to Australian standards. It ensures the company is recognized legally and for tax purposes within the CRM.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * Specifies the ABN Branch, also known as a GST Branch, for the company. This is used when a part of the business needs to account for GST separately from its parent entity. Ensure this is a valid branch identifier if applicable.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) for the company, formatted as XXX XXX XXX. This nine-digit number is essential for identifying registered companies in Australia and must include the correct check digit.
   */
  acn?: string | null | undefined;
  /**
   * The first name of the primary contact person for the company. This is used for personalization and communication purposes within the CRM system. Ensure it is a valid string without special characters.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the primary contact person for the company. It complements the first name for identification and communication within the CRM. Ensure it is a valid string without special characters.
   */
  lastName?: string | null | undefined;
  /**
   * An array of bank account details associated with the company. Each entry should include necessary banking information to facilitate transactions and financial tracking. Ensure all bank account entries are valid and formatted correctly.
   */
  bankAccounts?: Array<UpdateCompanyRequestBankAccounts> | undefined;
  /**
   * A list of websites associated with the company, allowing multiple URLs to be linked to a single company record. Each entry in the array should include details such as the website's URL and type, facilitating comprehensive online presence management.
   */
  websites?: Array<UpdateCompanyRequestWebsites> | undefined;
  /**
   * An array of address objects associated with the company. Each object within the array represents a distinct address related to the company, such as headquarters or branch locations. This property is optional and can be used to update multiple addresses simultaneously.
   */
  addresses?: Array<UpdateCompanyRequestAddresses> | undefined;
  /**
   * An array of social link objects associated with the company. Each object should contain details such as the URL and type of social media platform. This property allows the CRM to store and update the company's social media presence.
   */
  socialLinks?: Array<UpdateCompanyRequestSocialLinks> | undefined;
  /**
   * An array of phone number objects for the company. Each object should include details like the phone number and type (e.g., mobile, landline). This property is used to update and maintain the company's contact information within the CRM.
   */
  phoneNumbers?: Array<UpdateCompanyRequestPhoneNumbers> | undefined;
  /**
   * A collection of email objects associated with the company. Each object within the array should represent a distinct email address used for communication purposes. This array is optional but should be provided if there are multiple email contacts for the company.
   */
  emails?: Array<UpdateCompanyRequestEmails> | undefined;
  /**
   * An object representing the type of the company record being updated. This property allows you to specify additional attributes related to the company's classification or category. It is optional and can be omitted if no changes to the company type are needed.
   */
  rowType?: UpdateCompanyRequestCompanyRowType | undefined;
  /**
   * An array of custom fields that can be used to store additional information specific to the company. Each entry in the array represents a custom field object, allowing for flexible data storage beyond standard fields. This property is optional and can be used to tailor the company record to specific business needs.
   */
  customFields?: Array<UpdateCompanyRequestCustomFields> | undefined;
  /**
   * A collection of tags associated with the company record. Tags are used to categorize and organize companies within the CRM, facilitating easier search and filtering. Each tag should be a relevant keyword or phrase.
   */
  tags?: Array<string> | null | undefined;
  /**
   * Indicates whether the company record is immutable. When set to true, the company data cannot be modified, ensuring data integrity for records that should remain unchanged. Use this property to protect sensitive or finalized company information from being altered.
   */
  readOnly?: boolean | null | undefined;
  /**
   * Specifies a formal greeting or title for a contact person associated with the company, such as 'Mr', 'Mrs', or 'Dr'. This property helps in personalizing communications and should be a valid string representing a common salutation. It is optional and can be omitted if not applicable.
   */
  salutation?: string | null | undefined;
  /**
   * Represents the birth date of a contact person linked to the company, formatted as a string in 'YYYY-MM-DD'. This information can be used for personalizing interactions or for record-keeping purposes. Ensure the date is accurate and follows the specified format.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * Allows the inclusion of custom data or specific modifications that are unique to certain services when updating company records. This property accepts an array of objects, each containing service-specific information, enabling flexible and tailored data handling for different integrations.
   */
  passThrough?: Array<UpdateCompanyRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateCompanyRequestCurrency$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestCurrency
> = z.nativeEnum(UpdateCompanyRequestCurrency);

/** @internal */
export const UpdateCompanyRequestCurrency$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestCurrency
> = UpdateCompanyRequestCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestCurrency$ {
  /** @deprecated use `UpdateCompanyRequestCurrency$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestCurrency$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestCurrency$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestCurrency$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestAccountType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestAccountType
> = z.nativeEnum(UpdateCompanyRequestAccountType);

/** @internal */
export const UpdateCompanyRequestAccountType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestAccountType
> = UpdateCompanyRequestAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestAccountType$ {
  /** @deprecated use `UpdateCompanyRequestAccountType$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestAccountType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestAccountType$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestAccountType$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestBankAccountsCurrency$inboundSchema:
  z.ZodNativeEnum<typeof UpdateCompanyRequestBankAccountsCurrency> = z
    .nativeEnum(UpdateCompanyRequestBankAccountsCurrency);

/** @internal */
export const UpdateCompanyRequestBankAccountsCurrency$outboundSchema:
  z.ZodNativeEnum<typeof UpdateCompanyRequestBankAccountsCurrency> =
    UpdateCompanyRequestBankAccountsCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestBankAccountsCurrency$ {
  /** @deprecated use `UpdateCompanyRequestBankAccountsCurrency$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCompanyRequestBankAccountsCurrency$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestBankAccountsCurrency$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCompanyRequestBankAccountsCurrency$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestBankAccounts$inboundSchema: z.ZodType<
  UpdateCompanyRequestBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(UpdateCompanyRequestAccountType$inboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(UpdateCompanyRequestBankAccountsCurrency$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type UpdateCompanyRequestBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestBankAccounts$outboundSchema: z.ZodType<
  UpdateCompanyRequestBankAccounts$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(UpdateCompanyRequestAccountType$outboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(UpdateCompanyRequestBankAccountsCurrency$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestBankAccounts$ {
  /** @deprecated use `UpdateCompanyRequestBankAccounts$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestBankAccounts$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestBankAccounts$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestBankAccounts$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestBankAccounts$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestBankAccounts$Outbound;
}

export function updateCompanyRequestBankAccountsToJSON(
  updateCompanyRequestBankAccounts: UpdateCompanyRequestBankAccounts,
): string {
  return JSON.stringify(
    UpdateCompanyRequestBankAccounts$outboundSchema.parse(
      updateCompanyRequestBankAccounts,
    ),
  );
}

export function updateCompanyRequestBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestBankAccounts' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestType
> = z.nativeEnum(UpdateCompanyRequestType);

/** @internal */
export const UpdateCompanyRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestType
> = UpdateCompanyRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestType$ {
  /** @deprecated use `UpdateCompanyRequestType$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestType$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestType$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestWebsites$inboundSchema: z.ZodType<
  UpdateCompanyRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateCompanyRequestType$inboundSchema).optional(),
});

/** @internal */
export type UpdateCompanyRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestWebsites$outboundSchema: z.ZodType<
  UpdateCompanyRequestWebsites$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateCompanyRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestWebsites$ {
  /** @deprecated use `UpdateCompanyRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestWebsites$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestWebsites$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestWebsites$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestWebsites$Outbound;
}

export function updateCompanyRequestWebsitesToJSON(
  updateCompanyRequestWebsites: UpdateCompanyRequestWebsites,
): string {
  return JSON.stringify(
    UpdateCompanyRequestWebsites$outboundSchema.parse(
      updateCompanyRequestWebsites,
    ),
  );
}

export function updateCompanyRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestWebsites' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestAddressesType
> = z.nativeEnum(UpdateCompanyRequestAddressesType);

/** @internal */
export const UpdateCompanyRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestAddressesType
> = UpdateCompanyRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestAddressesType$ {
  /** @deprecated use `UpdateCompanyRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestAddressesType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCompanyRequestAddressesType$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestAddresses$inboundSchema: z.ZodType<
  UpdateCompanyRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateCompanyRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UpdateCompanyRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestAddresses$outboundSchema: z.ZodType<
  UpdateCompanyRequestAddresses$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateCompanyRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestAddresses$ {
  /** @deprecated use `UpdateCompanyRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestAddresses$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestAddresses$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestAddresses$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestAddresses$Outbound;
}

export function updateCompanyRequestAddressesToJSON(
  updateCompanyRequestAddresses: UpdateCompanyRequestAddresses,
): string {
  return JSON.stringify(
    UpdateCompanyRequestAddresses$outboundSchema.parse(
      updateCompanyRequestAddresses,
    ),
  );
}

export function updateCompanyRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestAddresses' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestSocialLinks$inboundSchema: z.ZodType<
  UpdateCompanyRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateCompanyRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestSocialLinks$outboundSchema: z.ZodType<
  UpdateCompanyRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestSocialLinks$ {
  /** @deprecated use `UpdateCompanyRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestSocialLinks$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestSocialLinks$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestSocialLinks$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestSocialLinks$Outbound;
}

export function updateCompanyRequestSocialLinksToJSON(
  updateCompanyRequestSocialLinks: UpdateCompanyRequestSocialLinks,
): string {
  return JSON.stringify(
    UpdateCompanyRequestSocialLinks$outboundSchema.parse(
      updateCompanyRequestSocialLinks,
    ),
  );
}

export function updateCompanyRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateCompanyRequestPhoneNumbersType> = z.nativeEnum(
    UpdateCompanyRequestPhoneNumbersType,
  );

/** @internal */
export const UpdateCompanyRequestPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateCompanyRequestPhoneNumbersType> =
    UpdateCompanyRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestPhoneNumbersType$ {
  /** @deprecated use `UpdateCompanyRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCompanyRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCompanyRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestPhoneNumbers$inboundSchema: z.ZodType<
  UpdateCompanyRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateCompanyRequestPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UpdateCompanyRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestPhoneNumbers$outboundSchema: z.ZodType<
  UpdateCompanyRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateCompanyRequestPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestPhoneNumbers$ {
  /** @deprecated use `UpdateCompanyRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestPhoneNumbers$Outbound;
}

export function updateCompanyRequestPhoneNumbersToJSON(
  updateCompanyRequestPhoneNumbers: UpdateCompanyRequestPhoneNumbers,
): string {
  return JSON.stringify(
    UpdateCompanyRequestPhoneNumbers$outboundSchema.parse(
      updateCompanyRequestPhoneNumbers,
    ),
  );
}

export function updateCompanyRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestEmailsType
> = z.nativeEnum(UpdateCompanyRequestEmailsType);

/** @internal */
export const UpdateCompanyRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCompanyRequestEmailsType
> = UpdateCompanyRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestEmailsType$ {
  /** @deprecated use `UpdateCompanyRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestEmailsType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestEmailsType$outboundSchema;
}

/** @internal */
export const UpdateCompanyRequestEmails$inboundSchema: z.ZodType<
  UpdateCompanyRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateCompanyRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type UpdateCompanyRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestEmails$outboundSchema: z.ZodType<
  UpdateCompanyRequestEmails$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateCompanyRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestEmails$ {
  /** @deprecated use `UpdateCompanyRequestEmails$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestEmails$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestEmails$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestEmails$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestEmails$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestEmails$Outbound;
}

export function updateCompanyRequestEmailsToJSON(
  updateCompanyRequestEmails: UpdateCompanyRequestEmails,
): string {
  return JSON.stringify(
    UpdateCompanyRequestEmails$outboundSchema.parse(updateCompanyRequestEmails),
  );
}

export function updateCompanyRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestEmails' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestCompanyRowType$inboundSchema: z.ZodType<
  UpdateCompanyRequestCompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateCompanyRequestCompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const UpdateCompanyRequestCompanyRowType$outboundSchema: z.ZodType<
  UpdateCompanyRequestCompanyRowType$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestCompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestCompanyRowType$ {
  /** @deprecated use `UpdateCompanyRequestCompanyRowType$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestCompanyRowType$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestCompanyRowType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCompanyRequestCompanyRowType$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestCompanyRowType$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestCompanyRowType$Outbound;
}

export function updateCompanyRequestCompanyRowTypeToJSON(
  updateCompanyRequestCompanyRowType: UpdateCompanyRequestCompanyRowType,
): string {
  return JSON.stringify(
    UpdateCompanyRequestCompanyRowType$outboundSchema.parse(
      updateCompanyRequestCompanyRowType,
    ),
  );
}

export function updateCompanyRequestCompanyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestCompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateCompanyRequestCompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestCompanyRowType' from JSON`,
  );
}

/** @internal */
export const Value6$inboundSchema: z.ZodType<Value6, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value6$Outbound = {};

/** @internal */
export const Value6$outboundSchema: z.ZodType<
  Value6$Outbound,
  z.ZodTypeDef,
  Value6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value6$ {
  /** @deprecated use `Value6$inboundSchema` instead. */
  export const inboundSchema = Value6$inboundSchema;
  /** @deprecated use `Value6$outboundSchema` instead. */
  export const outboundSchema = Value6$outboundSchema;
  /** @deprecated use `Value6$Outbound` instead. */
  export type Outbound = Value6$Outbound;
}

export function value6ToJSON(value6: Value6): string {
  return JSON.stringify(Value6$outboundSchema.parse(value6));
}

export function value6FromJSON(
  jsonString: string,
): SafeParseResult<Value6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value6' from JSON`,
  );
}

/** @internal */
export const Value4$inboundSchema: z.ZodType<Value4, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value4$Outbound = {};

/** @internal */
export const Value4$outboundSchema: z.ZodType<
  Value4$Outbound,
  z.ZodTypeDef,
  Value4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value4$ {
  /** @deprecated use `Value4$inboundSchema` instead. */
  export const inboundSchema = Value4$inboundSchema;
  /** @deprecated use `Value4$outboundSchema` instead. */
  export const outboundSchema = Value4$outboundSchema;
  /** @deprecated use `Value4$Outbound` instead. */
  export type Outbound = Value4$Outbound;
}

export function value4ToJSON(value4: Value4): string {
  return JSON.stringify(Value4$outboundSchema.parse(value4));
}

export function value4FromJSON(
  jsonString: string,
): SafeParseResult<Value4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value4' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestValue$inboundSchema: z.ZodType<
  UpdateCompanyRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Value4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Value6$inboundSchema)),
]);

/** @internal */
export type UpdateCompanyRequestValue$Outbound =
  | Value4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<Value6$Outbound>;

/** @internal */
export const UpdateCompanyRequestValue$outboundSchema: z.ZodType<
  UpdateCompanyRequestValue$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestValue
> = z.union([
  z.lazy(() => Value4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Value6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestValue$ {
  /** @deprecated use `UpdateCompanyRequestValue$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestValue$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestValue$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestValue$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestValue$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestValue$Outbound;
}

export function updateCompanyRequestValueToJSON(
  updateCompanyRequestValue: UpdateCompanyRequestValue,
): string {
  return JSON.stringify(
    UpdateCompanyRequestValue$outboundSchema.parse(updateCompanyRequestValue),
  );
}

export function updateCompanyRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestValue' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestCustomFields$inboundSchema: z.ZodType<
  UpdateCompanyRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Value4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Value6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type UpdateCompanyRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | Value4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<Value6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateCompanyRequestCustomFields$outboundSchema: z.ZodType<
  UpdateCompanyRequestCustomFields$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Value4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Value6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestCustomFields$ {
  /** @deprecated use `UpdateCompanyRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestCustomFields$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestCustomFields$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestCustomFields$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestCustomFields$Outbound;
}

export function updateCompanyRequestCustomFieldsToJSON(
  updateCompanyRequestCustomFields: UpdateCompanyRequestCustomFields,
): string {
  return JSON.stringify(
    UpdateCompanyRequestCustomFields$outboundSchema.parse(
      updateCompanyRequestCustomFields,
    ),
  );
}

export function updateCompanyRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateCompanyRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateCompanyRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateCompanyRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateCompanyRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestExtendPaths$ {
  /** @deprecated use `UpdateCompanyRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestExtendPaths$Outbound;
}

export function updateCompanyRequestExtendPathsToJSON(
  updateCompanyRequestExtendPaths: UpdateCompanyRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateCompanyRequestExtendPaths$outboundSchema.parse(
      updateCompanyRequestExtendPaths,
    ),
  );
}

export function updateCompanyRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequestPassThrough$inboundSchema: z.ZodType<
  UpdateCompanyRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateCompanyRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateCompanyRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateCompanyRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateCompanyRequestPassThrough$outboundSchema: z.ZodType<
  UpdateCompanyRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateCompanyRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequestPassThrough$ {
  /** @deprecated use `UpdateCompanyRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateCompanyRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateCompanyRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateCompanyRequestPassThrough$Outbound;
}

export function updateCompanyRequestPassThroughToJSON(
  updateCompanyRequestPassThrough: UpdateCompanyRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateCompanyRequestPassThrough$outboundSchema.parse(
      updateCompanyRequestPassThrough,
    ),
  );
}

export function updateCompanyRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateCompanyRequest$inboundSchema: z.ZodType<
  UpdateCompanyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vat_number: z.nullable(z.string()).optional(),
  currency: z.nullable(UpdateCompanyRequestCurrency$inboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annual_revenue: z.nullable(z.string()).optional(),
  number_of_employees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  sales_tax_number: z.nullable(z.string()).optional(),
  payee_number: z.nullable(z.string()).optional(),
  abn_or_tfn: z.nullable(z.string()).optional(),
  abn_branch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  bank_accounts: z.array(
    z.lazy(() => UpdateCompanyRequestBankAccounts$inboundSchema),
  ).optional(),
  websites: z.array(z.lazy(() => UpdateCompanyRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateCompanyRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => UpdateCompanyRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => UpdateCompanyRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateCompanyRequestEmails$inboundSchema))
    .optional(),
  row_type: z.lazy(() => UpdateCompanyRequestCompanyRowType$inboundSchema)
    .optional(),
  custom_fields: z.array(
    z.lazy(() => UpdateCompanyRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  read_only: z.nullable(z.boolean()).optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  pass_through: z.array(
    z.lazy(() => UpdateCompanyRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "vat_number": "vatNumber",
    "annual_revenue": "annualRevenue",
    "number_of_employees": "numberOfEmployees",
    "sales_tax_number": "salesTaxNumber",
    "payee_number": "payeeNumber",
    "abn_or_tfn": "abnOrTfn",
    "abn_branch": "abnBranch",
    "first_name": "firstName",
    "last_name": "lastName",
    "bank_accounts": "bankAccounts",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "row_type": "rowType",
    "custom_fields": "customFields",
    "read_only": "readOnly",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateCompanyRequest$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  bank_accounts?: Array<UpdateCompanyRequestBankAccounts$Outbound> | undefined;
  websites?: Array<UpdateCompanyRequestWebsites$Outbound> | undefined;
  addresses?: Array<UpdateCompanyRequestAddresses$Outbound> | undefined;
  social_links?: Array<UpdateCompanyRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<UpdateCompanyRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<UpdateCompanyRequestEmails$Outbound> | undefined;
  row_type?: UpdateCompanyRequestCompanyRowType$Outbound | undefined;
  custom_fields?: Array<UpdateCompanyRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  pass_through?: Array<UpdateCompanyRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateCompanyRequest$outboundSchema: z.ZodType<
  UpdateCompanyRequest$Outbound,
  z.ZodTypeDef,
  UpdateCompanyRequest
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(UpdateCompanyRequestCurrency$outboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annualRevenue: z.nullable(z.string()).optional(),
  numberOfEmployees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  salesTaxNumber: z.nullable(z.string()).optional(),
  payeeNumber: z.nullable(z.string()).optional(),
  abnOrTfn: z.nullable(z.string()).optional(),
  abnBranch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  bankAccounts: z.array(
    z.lazy(() => UpdateCompanyRequestBankAccounts$outboundSchema),
  ).optional(),
  websites: z.array(z.lazy(() => UpdateCompanyRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateCompanyRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => UpdateCompanyRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => UpdateCompanyRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateCompanyRequestEmails$outboundSchema))
    .optional(),
  rowType: z.lazy(() => UpdateCompanyRequestCompanyRowType$outboundSchema)
    .optional(),
  customFields: z.array(
    z.lazy(() => UpdateCompanyRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  readOnly: z.nullable(z.boolean()).optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  passThrough: z.array(
    z.lazy(() => UpdateCompanyRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    vatNumber: "vat_number",
    annualRevenue: "annual_revenue",
    numberOfEmployees: "number_of_employees",
    salesTaxNumber: "sales_tax_number",
    payeeNumber: "payee_number",
    abnOrTfn: "abn_or_tfn",
    abnBranch: "abn_branch",
    firstName: "first_name",
    lastName: "last_name",
    bankAccounts: "bank_accounts",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    rowType: "row_type",
    customFields: "custom_fields",
    readOnly: "read_only",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCompanyRequest$ {
  /** @deprecated use `UpdateCompanyRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCompanyRequest$inboundSchema;
  /** @deprecated use `UpdateCompanyRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCompanyRequest$outboundSchema;
  /** @deprecated use `UpdateCompanyRequest$Outbound` instead. */
  export type Outbound = UpdateCompanyRequest$Outbound;
}

export function updateCompanyRequestToJSON(
  updateCompanyRequest: UpdateCompanyRequest,
): string {
  return JSON.stringify(
    UpdateCompanyRequest$outboundSchema.parse(updateCompanyRequest),
  );
}

export function updateCompanyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCompanyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCompanyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCompanyRequest' from JSON`,
  );
}
