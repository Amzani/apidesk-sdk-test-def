/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the newly created opportunity within the CRM system. It serves as the main container for the response data, encapsulating all relevant information about the opportunity, including its unique identifier. This structure is essential for accessing the specific attributes of the opportunity that was just added.
 */
export type CreateOpportunityResponseUnifiedId = {
  /**
   * The unique identifier assigned to the opportunity that has just been created. This ID is crucial for referencing the opportunity in future operations, such as updates or queries, and ensures that each opportunity can be distinctly identified within the CRM system.
   */
  id: string;
};

/**
 * Opportunity created
 */
export type CreateOpportunityResponse = {
  /**
   * The HTTP response status code returned by the server, indicating the result of the POST request to create a new opportunity. A status code of 201 signifies that the opportunity was successfully created. This code helps in identifying the outcome of the operation.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'Created' for a successful POST request. This provides a human-readable confirmation of the operation's result, complementing the numerical status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the request. This identifier helps in tracking which service integration was used to create the opportunity, especially useful when multiple integrations are involved.
   */
  service: string;
  /**
   * The name of the Unified API resource that was acted upon, in this case, 'opportunities'. It indicates the type of resource that was created or modified, helping developers understand the context of the operation.
   */
  resource: string;
  /**
   * The specific operation performed by the API, such as 'create' for this POST request. This field clarifies the action taken on the resource, ensuring developers know what change was made to the CRM system.
   */
  operation: string;
  /**
   * This object contains the details of the newly created opportunity within the CRM system. It serves as the main container for the response data, encapsulating all relevant information about the opportunity, including its unique identifier. This structure is essential for accessing the specific attributes of the opportunity that was just added.
   */
  data: CreateOpportunityResponseUnifiedId;
};

/** @internal */
export const CreateOpportunityResponseUnifiedId$inboundSchema: z.ZodType<
  CreateOpportunityResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateOpportunityResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateOpportunityResponseUnifiedId$outboundSchema: z.ZodType<
  CreateOpportunityResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateOpportunityResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOpportunityResponseUnifiedId$ {
  /** @deprecated use `CreateOpportunityResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateOpportunityResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateOpportunityResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema =
    CreateOpportunityResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateOpportunityResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateOpportunityResponseUnifiedId$Outbound;
}

export function createOpportunityResponseUnifiedIdToJSON(
  createOpportunityResponseUnifiedId: CreateOpportunityResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateOpportunityResponseUnifiedId$outboundSchema.parse(
      createOpportunityResponseUnifiedId,
    ),
  );
}

export function createOpportunityResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateOpportunityResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOpportunityResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOpportunityResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateOpportunityResponse$inboundSchema: z.ZodType<
  CreateOpportunityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateOpportunityResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateOpportunityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateOpportunityResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateOpportunityResponse$outboundSchema: z.ZodType<
  CreateOpportunityResponse$Outbound,
  z.ZodTypeDef,
  CreateOpportunityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateOpportunityResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOpportunityResponse$ {
  /** @deprecated use `CreateOpportunityResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOpportunityResponse$inboundSchema;
  /** @deprecated use `CreateOpportunityResponse$outboundSchema` instead. */
  export const outboundSchema = CreateOpportunityResponse$outboundSchema;
  /** @deprecated use `CreateOpportunityResponse$Outbound` instead. */
  export type Outbound = CreateOpportunityResponse$Outbound;
}

export function createOpportunityResponseToJSON(
  createOpportunityResponse: CreateOpportunityResponse,
): string {
  return JSON.stringify(
    CreateOpportunityResponse$outboundSchema.parse(createOpportunityResponse),
  );
}

export function createOpportunityResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOpportunityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOpportunityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOpportunityResponse' from JSON`,
  );
}
