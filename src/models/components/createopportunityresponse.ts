/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the newly created opportunity within the CRM system. It serves as a container for all relevant information about the opportunity, including its unique identifier. The structure of this object is designed to encapsulate all necessary data for confirming the successful creation of the opportunity.
 */
export type CreateOpportunityResponseUnifiedId = {
  /**
   * The unique identifier assigned to the opportunity that was just created. This ID is a string that serves as the primary reference for the opportunity within the CRM, allowing for easy retrieval and management in future operations. It confirms the successful addition of the opportunity to the system.
   */
  id: string;
};

/**
 * Opportunity created
 */
export type CreateOpportunityResponse = {
  /**
   * The HTTP response status code indicating the result of the POST request to create a new opportunity. A successful creation will return a 201 status code, confirming that the opportunity has been added to the CRM system. This integer value is crucial for error handling and confirming successful operations.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'Created' for a successful POST operation. This string provides a human-readable confirmation of the operation's outcome, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the request. This string identifies which service within the Apideck ecosystem handled the opportunity creation, useful for tracking and auditing purposes.
   */
  service: string;
  /**
   * The name of the Unified API resource involved in the operation, typically 'opportunities' for this endpoint. This string helps developers understand which resource was affected by the POST request, aligning with the CRM's data structure.
   */
  resource: string;
  /**
   * The specific operation performed, such as 'create' for this POST request. This string clarifies the action taken on the resource, ensuring developers can easily identify the type of operation executed.
   */
  operation: string;
  /**
   * This object contains the details of the newly created opportunity within the CRM system. It serves as a container for all relevant information about the opportunity, including its unique identifier. The structure of this object is designed to encapsulate all necessary data for confirming the successful creation of the opportunity.
   */
  data: CreateOpportunityResponseUnifiedId;
};

/** @internal */
export const CreateOpportunityResponseUnifiedId$inboundSchema: z.ZodType<
  CreateOpportunityResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateOpportunityResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateOpportunityResponseUnifiedId$outboundSchema: z.ZodType<
  CreateOpportunityResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateOpportunityResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOpportunityResponseUnifiedId$ {
  /** @deprecated use `CreateOpportunityResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateOpportunityResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateOpportunityResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema =
    CreateOpportunityResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateOpportunityResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateOpportunityResponseUnifiedId$Outbound;
}

export function createOpportunityResponseUnifiedIdToJSON(
  createOpportunityResponseUnifiedId: CreateOpportunityResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateOpportunityResponseUnifiedId$outboundSchema.parse(
      createOpportunityResponseUnifiedId,
    ),
  );
}

export function createOpportunityResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateOpportunityResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateOpportunityResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOpportunityResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateOpportunityResponse$inboundSchema: z.ZodType<
  CreateOpportunityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateOpportunityResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateOpportunityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateOpportunityResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateOpportunityResponse$outboundSchema: z.ZodType<
  CreateOpportunityResponse$Outbound,
  z.ZodTypeDef,
  CreateOpportunityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateOpportunityResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOpportunityResponse$ {
  /** @deprecated use `CreateOpportunityResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOpportunityResponse$inboundSchema;
  /** @deprecated use `CreateOpportunityResponse$outboundSchema` instead. */
  export const outboundSchema = CreateOpportunityResponse$outboundSchema;
  /** @deprecated use `CreateOpportunityResponse$Outbound` instead. */
  export type Outbound = CreateOpportunityResponse$Outbound;
}

export function createOpportunityResponseToJSON(
  createOpportunityResponse: CreateOpportunityResponse,
): string {
  return JSON.stringify(
    CreateOpportunityResponse$outboundSchema.parse(createOpportunityResponse),
  );
}

export function createOpportunityResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOpportunityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOpportunityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOpportunityResponse' from JSON`,
  );
}
