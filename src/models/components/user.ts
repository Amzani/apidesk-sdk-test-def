/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the type of address, such as 'home', 'work', or 'billing'. This helps categorize the address for better organization and retrieval within the CRM system. Understanding the address type is crucial for context-specific operations or communications.
 */
export const UserType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of address, such as 'home', 'work', or 'billing'. This helps categorize the address for better organization and retrieval within the CRM system. Understanding the address type is crucial for context-specific operations or communications.
 */
export type UserType = ClosedEnum<typeof UserType>;

export type UserAddresses = {
  /**
   * A unique identifier for each address entry within the user's address list. This ID is used to distinguish between different addresses and is essential for operations that require specific address manipulation or retrieval.
   */
  id?: string | null | undefined;
  /**
   * Specifies the type of address, such as 'home', 'work', or 'billing'. This helps categorize the address for better organization and retrieval within the CRM system. Understanding the address type is crucial for context-specific operations or communications.
   */
  type?: UserType | null | undefined;
  /**
   * Represents the full address in a single string format, which may be used when structured address data is unavailable. This field provides a complete address description that can be used for display or basic processing needs.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address entry, typically used to identify the location or recipient. This could be a business name, a department, or an individual's name, providing context for the address within the CRM system. Useful for distinguishing between multiple addresses linked to a user.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, including details such as street number, street name, and apartment or suite number. This field is essential for pinpointing the exact location and is a critical component of the address structure in the CRM system.
   */
  line1?: string | null | undefined;
  /**
   * An additional line for the address, often used for supplementary information like building name or floor number. This field helps provide a more complete address when necessary, ensuring accurate delivery and location identification.
   */
  line2?: string | null | undefined;
  /**
   * A tertiary line for the address, which can be used for further details such as landmarks or specific instructions. This optional field enhances the address's precision and utility within the CRM system.
   */
  line3?: string | null | undefined;
  /**
   * A fourth line for the address, allowing for even more detailed information if required. This field supports complex address structures, ensuring all necessary details are captured for effective communication and logistics.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the user's address. This field contains the numeric part of the address, which is typically used to identify the specific location on a street. It is optional and may not be present if the address does not include a street number.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name where the user resides. This field provides the name of the city as part of the user's address, helping to locate the user's geographical area. It is optional and may not be included if the city information is not available.
   */
  city?: string | null | undefined;
  /**
   * The state or region name associated with the user's address. This field indicates the state or administrative region, which is part of the user's full address. It is optional and may be omitted if the state information is not applicable or available.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code for the user's address. This field contains the code used for mail delivery purposes, helping to identify the user's specific area within a city or region. It is optional and may not be present if the postal code is not provided.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the user's address, formatted according to ISO 3166-1 alpha-2 standards. This field specifies the country in which the user is located, using a two-letter code. It is optional and may not be included if the country information is not specified.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the user's address, represented as a string. This value is used to pinpoint the geographical location of the address on a map, aiding in location-based services and analyses.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the user's address, represented as a string. This value complements the latitude to provide a precise geographical location, essential for mapping and navigation purposes.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality associated with the user's address. This field provides additional geographical context, which can be useful for regional analysis or localization of services.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the user's address. This information is crucial for personalizing communications and ensuring accurate delivery of services or correspondence.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the user's address, such as 'Mr.', 'Ms.', or 'Dr.'. This field helps in maintaining formal communication and addressing the contact appropriately.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the user's address. This string value represents the primary contact number for reaching the user at this specific address. It is optional and may not be present if not provided in the user's profile.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the user's address. This property holds the fax contact information, allowing for document transmission to this address. It is an optional field and may be absent if not applicable.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the user's address. This string value is used for electronic communication and is part of the user's contact details for this address. It is optional and may not be included if not specified.
   */
  email?: string | null | undefined;
  /**
   * The website URL related to the user's address. This property provides a link to the user's online presence or business site associated with this address. It is optional and may be omitted if not relevant.
   */
  website?: string | null | undefined;
  /**
   * Additional notes regarding the user's address. This field can contain any extra information or comments about the address, offering context or details that are not covered by other fields. It is optional and may be left empty if no notes are provided.
   */
  notes?: string | null | undefined;
  /**
   * The 'row_version' is a string that represents a binary value used to track changes to a user's address record in the CRM system. This value is automatically incremented with each update to ensure data integrity and prevent conflicts during concurrent modifications. It is crucial for developers to use this property when implementing update operations to verify that the data being modified is the most recent version.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This string helps categorize the phone number for better organization and retrieval within the CRM system. It is optional and may vary based on user input.
 */
export const UserPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This string helps categorize the phone number for better organization and retrieval within the CRM system. It is optional and may vary based on user input.
 */
export type UserPhoneNumbersType = ClosedEnum<typeof UserPhoneNumbersType>;

export type UserPhoneNumbers = {
  /**
   * A unique identifier for each phone number associated with the user. This ID is used to distinguish between different phone numbers in the user's profile.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, such as '+1' for the United States. This code is essential for making international calls and is part of the complete phone number format.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional code that specifies the geographic area of the phone number, such as '323' for Los Angeles. This code is used in conjunction with the country code and local number to complete the dialing sequence.
   */
  areaCode?: string | null | undefined;
  /**
   * The primary phone number associated with the user in the CRM system. This string value is required and typically follows international or local formatting standards, depending on the user's location. It is crucial for contact and communication purposes within CRM applications.
   */
  number: string;
  /**
   * An optional string representing the phone number extension, which is used to direct calls to a specific department or individual within an organization. This field is not always present and is typically used in corporate or multi-line phone systems.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the type of phone number, such as 'mobile', 'home', or 'work'. This string helps categorize the phone number for better organization and retrieval within the CRM system. It is optional and may vary based on user input.
   */
  type?: UserPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address provided, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and retrieval within the CRM system. The value is optional and can be customized based on user needs.
 */
export const UserEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address provided, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and retrieval within the CRM system. The value is optional and can be customized based on user needs.
 */
export type UserEmailsType = ClosedEnum<typeof UserEmailsType>;

export type UserEmails = {
  /**
   * A unique identifier for each email address within the user's email array. This string is used to distinguish between different email entries and is crucial for managing and updating email information in the CRM system.
   */
  id?: string | null | undefined;
  /**
   * The primary email address associated with the user. This field is mandatory and is used for communication and identification purposes within the CRM system. The format is a standard email address (e.g., user@example.com).
   */
  email: string | null;
  /**
   * Specifies the type of email address provided, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and retrieval within the CRM system. The value is optional and can be customized based on user needs.
   */
  type?: UserEmailsType | null | undefined;
};

/**
 * Contains any custom mappings configured for the user resource. This object includes additional fields that are not part of the standard user schema, allowing for extended customization and integration with other systems. It is optional and only present if custom mappings are set up.
 */
export type UserCustomMappings = {};

export type UserExtendPaths = {
  /**
   * This property contains a JSONPath string that specifies the exact location within the user's data structure where a particular value should be applied. It is essential for pinpointing the precise path in the JSON object, ensuring that the correct data is retrieved or manipulated during the operation. This path is crucial for developers to accurately target specific data points within the user's details.
   */
  path: string;
  /**
   * This property holds the value that is to be set at the specified JSONPath within the user's data structure. The value can be of any data type, allowing flexibility in the kind of data that can be inserted or updated. This is particularly useful for developers who need to customize or extend user data within the CRM system, ensuring that the correct information is applied at the designated path.
   */
  value?: any | undefined;
};

export type UserPassThrough = {
  /**
   * A mandatory string identifier for the specific service to which the pass_through data should be applied. This ensures that the custom data is directed to the correct service, facilitating precise modifications or extensions in the service's operations.
   */
  serviceId: string;
  /**
   * An optional string identifier for a specific workflow operation that the pass_through data should target. This is particularly useful in scenarios where a single request triggers multiple downstream operations, allowing for targeted data application.
   */
  operationId?: string | undefined;
  /**
   * An object that allows for direct extension by including any additional properties needed for the request. This flexibility supports custom extensions and modifications, enabling developers to adapt the request to specific requirements or service capabilities.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specific paths. This allows developers to define precise changes or extensions to the data structure, facilitating complex integrations and customizations within the service.
   */
  extendPaths?: Array<UserExtendPaths> | undefined;
};

/**
 * This object contains all the detailed information about the user retrieved from the CRM system. It serves as the primary container for user-specific data, including identifiers, names, and other relevant attributes. This structure ensures that all user-related information is organized and accessible in a single, cohesive format.
 */
export type User = {
  /**
   * The unique identifier for the user within the CRM system. This ID is used to distinguish the user from others and is essential for operations that require user-specific data retrieval or manipulation. It is typically a string of alphanumeric characters.
   */
  id?: string | undefined;
  /**
   * The identifier of the parent user, if applicable, within the CRM system. This field is used to establish hierarchical relationships between users, such as managers and subordinates. It is a string value that links the user to their parent entity.
   */
  parentId?: string | null | undefined;
  /**
   * The username assigned to the user for login and identification purposes within the CRM system. This string value is unique to each user and is used for authentication and user management processes.
   */
  username?: string | null | undefined;
  /**
   * The first name of the user as recorded in the CRM system. This string value is used for personalization and identification in user interfaces and communications. It is part of the user's basic profile information.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the user in the CRM system. This field provides the user's family name, which is typically used for identification and personalization purposes within the application. It is returned as a string and may be used in conjunction with other name fields to display the user's full name.
   */
  lastName?: string | null | undefined;
  /**
   * The job title of the user within their organization. This string field indicates the user's professional role or position, which can be useful for understanding their responsibilities and hierarchy in the company. It helps in categorizing users based on their job functions.
   */
  title?: string | null | undefined;
  /**
   * The division within the organization where the user is currently assigned. This string field represents a larger organizational unit that may encompass multiple departments, teams, or regions, providing context about the user's work environment and reporting structure.
   */
  division?: string | null | undefined;
  /**
   * The department where the user is currently working. This field is deprecated in favor of 'department_id' and 'department_name' but still provides information about the user's specific area of work within the organization. It is a string value that helps in identifying the user's departmental affiliation.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * The name of the company the user is associated with. This string field provides the official name of the user's employer, which is essential for identifying the organization in CRM records and reports. It helps in linking the user to their respective company profile.
   */
  companyName?: string | null | undefined;
  /**
   * A unique identifier assigned to each employee within the company. This string value serves as an Employee Number, Employee ID, or Employee Code, facilitating the identification and management of user records in the CRM system. It is not mandatory for every user record.
   */
  employeeNumber?: string | null | undefined;
  /**
   * A textual description providing additional context or information about the user object. This field can be used to store notes or other relevant details that help in understanding the user's role or status within the CRM system.
   */
  description?: string | null | undefined;
  /**
   * The URL pointing to the user's avatar image. This string should be a valid URL format and is used to visually represent the user within the CRM interface, enhancing user recognition and personalization.
   */
  image?: string | null | undefined;
  /**
   * The language preference of the user, represented by a language code compliant with ISO 639-1 standards. For example, 'EN' for English. This helps in localizing content and communications for the user within the CRM system.
   */
  language?: string | null | undefined;
  /**
   * The current status of the user within the CRM system. This string indicates whether the user is active, inactive, or in another state, affecting their accessibility and interaction with the CRM features.
   */
  status?: string | null | undefined;
  /**
   * An array containing the user's addresses, which may include multiple entries if the user has more than one address. Each entry in the array provides detailed information about a specific address associated with the user. This field is optional and may be empty if no addresses are recorded.
   */
  addresses?: Array<UserAddresses> | undefined;
  /**
   * An array containing the user's phone numbers, each represented as an object with detailed information such as ID, country code, and area code. This allows for multiple contact numbers to be associated with a single user.
   */
  phoneNumbers?: Array<UserPhoneNumbers> | undefined;
  /**
   * An array containing the user's email addresses, each represented as an object. This collection is essential for electronic communication and is required to ensure that the user can be contacted via email. The array may include multiple email addresses to accommodate different contact preferences.
   */
  emails: Array<UserEmails>;
  /**
   * Contains any custom mappings configured for the user resource. This object includes additional fields that are not part of the standard user schema, allowing for extended customization and integration with other systems. It is optional and only present if custom mappings are set up.
   */
  customMappings?: UserCustomMappings | null | undefined;
  /**
   * The timestamp indicating when the user's information was last updated in the CRM system. This is useful for tracking changes and ensuring data accuracy. The format follows the ISO 8601 standard (e.g., '2023-10-01T12:00:00Z').
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp indicating when the user record was initially created in the CRM system. This helps in auditing and understanding the lifecycle of the user data. The format follows the ISO 8601 standard (e.g., '2023-10-01T12:00:00Z').
   */
  createdAt?: string | null | undefined;
  /**
   * This property contains an array of service-specific custom data or structured modifications that can be passed in the request body. It is used to tailor requests when creating or updating resources, allowing for flexible integration with various services. The array format enables multiple entries, each potentially targeting different aspects of the service interaction.
   */
  passThrough?: Array<UserPassThrough> | undefined;
};

/** @internal */
export const UserType$inboundSchema: z.ZodNativeEnum<typeof UserType> = z
  .nativeEnum(UserType);

/** @internal */
export const UserType$outboundSchema: z.ZodNativeEnum<typeof UserType> =
  UserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserType$ {
  /** @deprecated use `UserType$inboundSchema` instead. */
  export const inboundSchema = UserType$inboundSchema;
  /** @deprecated use `UserType$outboundSchema` instead. */
  export const outboundSchema = UserType$outboundSchema;
}

/** @internal */
export const UserAddresses$inboundSchema: z.ZodType<
  UserAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UserType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UserAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UserAddresses$outboundSchema: z.ZodType<
  UserAddresses$Outbound,
  z.ZodTypeDef,
  UserAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UserType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserAddresses$ {
  /** @deprecated use `UserAddresses$inboundSchema` instead. */
  export const inboundSchema = UserAddresses$inboundSchema;
  /** @deprecated use `UserAddresses$outboundSchema` instead. */
  export const outboundSchema = UserAddresses$outboundSchema;
  /** @deprecated use `UserAddresses$Outbound` instead. */
  export type Outbound = UserAddresses$Outbound;
}

export function userAddressesToJSON(userAddresses: UserAddresses): string {
  return JSON.stringify(UserAddresses$outboundSchema.parse(userAddresses));
}

export function userAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UserAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserAddresses' from JSON`,
  );
}

/** @internal */
export const UserPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof UserPhoneNumbersType
> = z.nativeEnum(UserPhoneNumbersType);

/** @internal */
export const UserPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof UserPhoneNumbersType
> = UserPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserPhoneNumbersType$ {
  /** @deprecated use `UserPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = UserPhoneNumbersType$inboundSchema;
  /** @deprecated use `UserPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema = UserPhoneNumbersType$outboundSchema;
}

/** @internal */
export const UserPhoneNumbers$inboundSchema: z.ZodType<
  UserPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UserPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UserPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UserPhoneNumbers$outboundSchema: z.ZodType<
  UserPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UserPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UserPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserPhoneNumbers$ {
  /** @deprecated use `UserPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UserPhoneNumbers$inboundSchema;
  /** @deprecated use `UserPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UserPhoneNumbers$outboundSchema;
  /** @deprecated use `UserPhoneNumbers$Outbound` instead. */
  export type Outbound = UserPhoneNumbers$Outbound;
}

export function userPhoneNumbersToJSON(
  userPhoneNumbers: UserPhoneNumbers,
): string {
  return JSON.stringify(
    UserPhoneNumbers$outboundSchema.parse(userPhoneNumbers),
  );
}

export function userPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UserPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UserEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof UserEmailsType
> = z.nativeEnum(UserEmailsType);

/** @internal */
export const UserEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof UserEmailsType
> = UserEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserEmailsType$ {
  /** @deprecated use `UserEmailsType$inboundSchema` instead. */
  export const inboundSchema = UserEmailsType$inboundSchema;
  /** @deprecated use `UserEmailsType$outboundSchema` instead. */
  export const outboundSchema = UserEmailsType$outboundSchema;
}

/** @internal */
export const UserEmails$inboundSchema: z.ZodType<
  UserEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UserEmailsType$inboundSchema).optional(),
});

/** @internal */
export type UserEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UserEmails$outboundSchema: z.ZodType<
  UserEmails$Outbound,
  z.ZodTypeDef,
  UserEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UserEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserEmails$ {
  /** @deprecated use `UserEmails$inboundSchema` instead. */
  export const inboundSchema = UserEmails$inboundSchema;
  /** @deprecated use `UserEmails$outboundSchema` instead. */
  export const outboundSchema = UserEmails$outboundSchema;
  /** @deprecated use `UserEmails$Outbound` instead. */
  export type Outbound = UserEmails$Outbound;
}

export function userEmailsToJSON(userEmails: UserEmails): string {
  return JSON.stringify(UserEmails$outboundSchema.parse(userEmails));
}

export function userEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UserEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserEmails' from JSON`,
  );
}

/** @internal */
export const UserCustomMappings$inboundSchema: z.ZodType<
  UserCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UserCustomMappings$Outbound = {};

/** @internal */
export const UserCustomMappings$outboundSchema: z.ZodType<
  UserCustomMappings$Outbound,
  z.ZodTypeDef,
  UserCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserCustomMappings$ {
  /** @deprecated use `UserCustomMappings$inboundSchema` instead. */
  export const inboundSchema = UserCustomMappings$inboundSchema;
  /** @deprecated use `UserCustomMappings$outboundSchema` instead. */
  export const outboundSchema = UserCustomMappings$outboundSchema;
  /** @deprecated use `UserCustomMappings$Outbound` instead. */
  export type Outbound = UserCustomMappings$Outbound;
}

export function userCustomMappingsToJSON(
  userCustomMappings: UserCustomMappings,
): string {
  return JSON.stringify(
    UserCustomMappings$outboundSchema.parse(userCustomMappings),
  );
}

export function userCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<UserCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserCustomMappings' from JSON`,
  );
}

/** @internal */
export const UserExtendPaths$inboundSchema: z.ZodType<
  UserExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UserExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UserExtendPaths$outboundSchema: z.ZodType<
  UserExtendPaths$Outbound,
  z.ZodTypeDef,
  UserExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserExtendPaths$ {
  /** @deprecated use `UserExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UserExtendPaths$inboundSchema;
  /** @deprecated use `UserExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UserExtendPaths$outboundSchema;
  /** @deprecated use `UserExtendPaths$Outbound` instead. */
  export type Outbound = UserExtendPaths$Outbound;
}

export function userExtendPathsToJSON(
  userExtendPaths: UserExtendPaths,
): string {
  return JSON.stringify(UserExtendPaths$outboundSchema.parse(userExtendPaths));
}

export function userExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UserExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserExtendPaths' from JSON`,
  );
}

/** @internal */
export const UserPassThrough$inboundSchema: z.ZodType<
  UserPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => UserExtendPaths$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UserPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UserExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UserPassThrough$outboundSchema: z.ZodType<
  UserPassThrough$Outbound,
  z.ZodTypeDef,
  UserPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => UserExtendPaths$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserPassThrough$ {
  /** @deprecated use `UserPassThrough$inboundSchema` instead. */
  export const inboundSchema = UserPassThrough$inboundSchema;
  /** @deprecated use `UserPassThrough$outboundSchema` instead. */
  export const outboundSchema = UserPassThrough$outboundSchema;
  /** @deprecated use `UserPassThrough$Outbound` instead. */
  export type Outbound = UserPassThrough$Outbound;
}

export function userPassThroughToJSON(
  userPassThrough: UserPassThrough,
): string {
  return JSON.stringify(UserPassThrough$outboundSchema.parse(userPassThrough));
}

export function userPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UserPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserPassThrough' from JSON`,
  );
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    parent_id: z.nullable(z.string()).optional(),
    username: z.nullable(z.string()).optional(),
    first_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    division: z.nullable(z.string()).optional(),
    department: z.nullable(z.string()).optional(),
    company_name: z.nullable(z.string()).optional(),
    employee_number: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    language: z.nullable(z.string()).optional(),
    status: z.nullable(z.string()).optional(),
    addresses: z.array(z.lazy(() => UserAddresses$inboundSchema)).optional(),
    phone_numbers: z.array(z.lazy(() => UserPhoneNumbers$inboundSchema))
      .optional(),
    emails: z.array(z.lazy(() => UserEmails$inboundSchema)),
    custom_mappings: z.nullable(z.lazy(() => UserCustomMappings$inboundSchema))
      .optional(),
    updated_at: z.nullable(z.string()).optional(),
    created_at: z.nullable(z.string()).optional(),
    pass_through: z.array(z.lazy(() => UserPassThrough$inboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "parent_id": "parentId",
      "first_name": "firstName",
      "last_name": "lastName",
      "company_name": "companyName",
      "employee_number": "employeeNumber",
      "phone_numbers": "phoneNumbers",
      "custom_mappings": "customMappings",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type User$Outbound = {
  id?: string | undefined;
  parent_id?: string | null | undefined;
  username?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  title?: string | null | undefined;
  division?: string | null | undefined;
  department?: string | null | undefined;
  company_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  addresses?: Array<UserAddresses$Outbound> | undefined;
  phone_numbers?: Array<UserPhoneNumbers$Outbound> | undefined;
  emails: Array<UserEmails$Outbound>;
  custom_mappings?: UserCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<UserPassThrough$Outbound> | undefined;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    id: z.string().optional(),
    parentId: z.nullable(z.string()).optional(),
    username: z.nullable(z.string()).optional(),
    firstName: z.nullable(z.string()).optional(),
    lastName: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    division: z.nullable(z.string()).optional(),
    department: z.nullable(z.string()).optional(),
    companyName: z.nullable(z.string()).optional(),
    employeeNumber: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    language: z.nullable(z.string()).optional(),
    status: z.nullable(z.string()).optional(),
    addresses: z.array(z.lazy(() => UserAddresses$outboundSchema)).optional(),
    phoneNumbers: z.array(z.lazy(() => UserPhoneNumbers$outboundSchema))
      .optional(),
    emails: z.array(z.lazy(() => UserEmails$outboundSchema)),
    customMappings: z.nullable(z.lazy(() => UserCustomMappings$outboundSchema))
      .optional(),
    updatedAt: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string()).optional(),
    passThrough: z.array(z.lazy(() => UserPassThrough$outboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      parentId: "parent_id",
      firstName: "first_name",
      lastName: "last_name",
      companyName: "company_name",
      employeeNumber: "employee_number",
      phoneNumbers: "phone_numbers",
      customMappings: "custom_mappings",
      updatedAt: "updated_at",
      createdAt: "created_at",
      passThrough: "pass_through",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}
