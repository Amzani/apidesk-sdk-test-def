/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The root object containing all the updated company details. This object encapsulates the entire set of fields that have been modified as a result of the PATCH operation. It is always included in the response to confirm the successful update of the company record, reflecting the latest state of the company data in the CRM system.
 */
export type CompanyUpdateResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Company updated
 */
export type CompanyUpdateResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the `companiesUpdate` operation. A status code of 200 signifies a successful update of the company record, while other codes may indicate errors or issues that occurred during the request processing. This code is crucial for determining the outcome of the API call and for debugging purposes.
   */
  statusCode: number;
  /**
   * The HTTP response status message accompanying the status code. This string provides a textual representation of the status code, such as 'OK' for a successful request or 'Bad Request' for an error. It offers a human-readable explanation of the response outcome, aiding developers in understanding the result of the `companiesUpdate` operation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which third-party service or integration was targeted by the `companiesUpdate` request, such as 'pipedrive'. It is included to specify the context of the operation, especially when multiple services are integrated within the same application.
   */
  service: string;
  /**
   * The name of the unified API resource that was accessed or modified. This string indicates the specific resource type, such as 'company', that the `companiesUpdate` operation interacted with. It helps in identifying the nature of the resource being updated and is essential for logging and tracking API usage.
   */
  resource: string;
  /**
   * The specific operation performed by the API call. This string describes the action taken, such as 'update', in the context of the `companiesUpdate` operation. It provides clarity on what change was attempted or completed, assisting in auditing and understanding the sequence of API interactions.
   */
  operation: string;
  /**
   * The root object containing all the updated company details. This object encapsulates the entire set of fields that have been modified as a result of the PATCH operation. It is always included in the response to confirm the successful update of the company record, reflecting the latest state of the company data in the CRM system.
   */
  data: CompanyUpdateResponseUnifiedId;
};

/** @internal */
export const CompanyUpdateResponseUnifiedId$inboundSchema: z.ZodType<
  CompanyUpdateResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CompanyUpdateResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CompanyUpdateResponseUnifiedId$outboundSchema: z.ZodType<
  CompanyUpdateResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CompanyUpdateResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyUpdateResponseUnifiedId$ {
  /** @deprecated use `CompanyUpdateResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CompanyUpdateResponseUnifiedId$inboundSchema;
  /** @deprecated use `CompanyUpdateResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CompanyUpdateResponseUnifiedId$outboundSchema;
  /** @deprecated use `CompanyUpdateResponseUnifiedId$Outbound` instead. */
  export type Outbound = CompanyUpdateResponseUnifiedId$Outbound;
}

export function companyUpdateResponseUnifiedIdToJSON(
  companyUpdateResponseUnifiedId: CompanyUpdateResponseUnifiedId,
): string {
  return JSON.stringify(
    CompanyUpdateResponseUnifiedId$outboundSchema.parse(
      companyUpdateResponseUnifiedId,
    ),
  );
}

export function companyUpdateResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CompanyUpdateResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyUpdateResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyUpdateResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CompanyUpdateResponse$inboundSchema: z.ZodType<
  CompanyUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CompanyUpdateResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CompanyUpdateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CompanyUpdateResponseUnifiedId$Outbound;
};

/** @internal */
export const CompanyUpdateResponse$outboundSchema: z.ZodType<
  CompanyUpdateResponse$Outbound,
  z.ZodTypeDef,
  CompanyUpdateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CompanyUpdateResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyUpdateResponse$ {
  /** @deprecated use `CompanyUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = CompanyUpdateResponse$inboundSchema;
  /** @deprecated use `CompanyUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = CompanyUpdateResponse$outboundSchema;
  /** @deprecated use `CompanyUpdateResponse$Outbound` instead. */
  export type Outbound = CompanyUpdateResponse$Outbound;
}

export function companyUpdateResponseToJSON(
  companyUpdateResponse: CompanyUpdateResponse,
): string {
  return JSON.stringify(
    CompanyUpdateResponse$outboundSchema.parse(companyUpdateResponse),
  );
}

export function companyUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompanyUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyUpdateResponse' from JSON`,
  );
}
