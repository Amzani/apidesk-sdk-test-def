/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of activity being recorded, represented as a string. This field is mandatory and indicates the nature of the activity, such as a call, meeting, or task, providing essential context for understanding the activity's purpose within the CRM.
 */
export const ListActivitiesResponseType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * The type of activity being recorded, represented as a string. This field is mandatory and indicates the nature of the activity, such as a call, meeting, or task, providing essential context for understanding the activity's purpose within the CRM.
 */
export type ListActivitiesResponseType = ClosedEnum<
  typeof ListActivitiesResponseType
>;

/**
 * Indicates the category or classification of the address, such as 'home', 'work', or 'billing'. This helps in organizing and filtering addresses based on their intended use within CRM activities.
 */
export const ListActivitiesResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Indicates the category or classification of the address, such as 'home', 'work', or 'billing'. This helps in organizing and filtering addresses based on their intended use within CRM activities.
 */
export type ListActivitiesResponseDataType = ClosedEnum<
  typeof ListActivitiesResponseDataType
>;

/**
 * An object containing detailed address information for the activity's location. This optional field may include components such as street address, city, state, and postal code, providing a comprehensive view of the activity's physical location.
 */
export type ListActivitiesResponseLocationAddress = {
  /**
   * A unique identifier assigned to the address within the CRM system. This ID is used to reference the specific address in various operations and integrations. It is typically a non-empty string when an address is present in the response.
   */
  id?: string | null | undefined;
  /**
   * Indicates the category or classification of the address, such as 'home', 'work', or 'billing'. This helps in organizing and filtering addresses based on their intended use within CRM activities.
   */
  type?: ListActivitiesResponseDataType | null | undefined;
  /**
   * A complete, unstructured representation of the address as a single string. This format is useful when APIs do not provide detailed address components, allowing for a straightforward display or search of the address information.
   */
  string?: string | null | undefined;
  /**
   * The designated name or label for the address, which might be used for easy identification or reference within the CRM. This could be a name like 'Headquarters' or 'Main Office'.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically including the street number, street name, and any suite or apartment numbers. This is a key component of the address used for mailing and location identification.
   */
  line1?: string | null | undefined;
  /**
   * This property contains the second line of the address, typically used for additional address details such as apartment, suite, or unit numbers. It is returned as a string and may be empty if not applicable. This field helps in providing a complete address for CRM activities.
   */
  line2?: string | null | undefined;
  /**
   * This property holds the third line of the address, which can be used for further address details if needed. It is a string and may be empty if not used. This field is part of the detailed address information associated with CRM activities.
   */
  line3?: string | null | undefined;
  /**
   * This property represents the fourth line of the address, allowing for additional address information beyond the standard lines. It is a string and may be empty if not utilized. This field is included to ensure comprehensive address data in CRM activities.
   */
  line4?: string | null | undefined;
  /**
   * This property specifies the street number of the address, which is a crucial part of the location details. It is returned as a string and is essential for identifying the exact location in CRM activities.
   */
  streetNumber?: string | null | undefined;
  /**
   * This property contains the name of the city where the address is located. It is returned as a string and is a key component of the address information in CRM activities, helping to identify the geographical area of the activity.
   */
  city?: string | null | undefined;
  /**
   * The full name of the state or region where the activity took place. This string value helps in identifying the geographical area associated with the CRM activity, aiding in location-based analysis and reporting.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code corresponding to the location of the activity. This string value is crucial for pinpointing the exact area within a state or city, facilitating precise location tracking and demographic analysis.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the location where the activity occurred, formatted according to the ISO 3166-1 alpha-2 standard. This two-letter string is essential for identifying the country in international contexts and ensuring compliance with global data standards.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the activity's location, represented as a string. This value is used in conjunction with longitude to map the exact geographical point of the activity, supporting geospatial analysis and visualization.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the activity's location, provided as a string. Together with latitude, this value specifies the precise geographical location of the activity, enabling detailed mapping and spatial data integration.
   */
  longitude?: string | null | undefined;
  /**
   * This property contains the name of the county or sublocality associated with the address. It is a string value that helps in identifying the specific regional area within a larger city or town. This information is useful for geographical categorization and analysis of CRM activities.
   */
  county?: string | null | undefined;
  /**
   * This property holds the full name of the contact person associated with the address. It is a string value and is crucial for personalizing communications and managing interactions with specific individuals in CRM activities.
   */
  contactName?: string | null | undefined;
  /**
   * This property contains the salutation or title (e.g., Mr., Ms., Dr.) of the contact person at the address. It is a string value that aids in formal communication and personalization in CRM activities.
   */
  salutation?: string | null | undefined;
  /**
   * This property provides the phone number associated with the address. It is a string value formatted according to international standards, enabling direct communication with the contact person for CRM activities.
   */
  phoneNumber?: string | null | undefined;
  /**
   * This property contains the fax number associated with the address. It is a string value that allows for sending documents via fax, which can be important for certain business communications in CRM activities.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the location. This is typically used for communication purposes and is returned as a string. It may be null if no email is provided for the location.
   */
  email?: string | null | undefined;
  /**
   * The website URL for the location, provided as a string. This can be used to access more information about the location online. It may be null if no website is specified.
   */
  website?: string | null | undefined;
  /**
   * Additional notes or comments about the location, stored as a string. This field can include any extra information that might be relevant to the location's context. It may be empty if no notes are provided.
   */
  notes?: string | null | undefined;
  /**
   * A string representing the binary value used to detect updates to the location object and prevent data conflicts. This value is incremented with each update, ensuring data integrity during synchronization processes.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Represents the display status of the activity, such as 'busy' or 'free'. This string value helps in visualizing the activity's impact on scheduling and availability within the CRM interface.
 */
export const ListActivitiesResponseShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
/**
 * Represents the display status of the activity, such as 'busy' or 'free'. This string value helps in visualizing the activity's impact on scheduling and availability within the CRM interface.
 */
export type ListActivitiesResponseShowAs = ClosedEnum<
  typeof ListActivitiesResponseShowAs
>;

export type ListActivitiesResponseValue6 = {};

export type ListActivitiesResponseValue4 = {};

/**
 * The actual data or content stored in the custom field, which can vary in type depending on the field's configuration. This property holds the value associated with the custom field, allowing users to access specific information relevant to CRM activities.
 */
export type ListActivitiesResponseValue =
  | ListActivitiesResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListActivitiesResponseValue6>;

export type ListActivitiesResponseCustomFields = {
  /**
   * A unique identifier assigned to each custom field within the CRM activities. This string value is essential for distinguishing between different custom fields and is always present in the response to ensure accurate data mapping and retrieval.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, represented as a string. This property provides a human-readable label for the custom field, aiding in the identification and understanding of its purpose within the CRM activities.
   */
  name?: string | null | undefined;
  /**
   * A detailed explanation or additional information about the custom field, provided as a string. This description helps users understand the context and intended use of the custom field within the CRM activities.
   */
  description?: string | null | undefined;
  /**
   * The actual data or content stored in the custom field, which can vary in type depending on the field's configuration. This property holds the value associated with the custom field, allowing users to access specific information relevant to CRM activities.
   */
  value?:
    | ListActivitiesResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListActivitiesResponseValue6>
    | null
    | undefined;
};

/**
 * The status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This field provides insight into the attendee's participation level and is essential for managing attendance and follow-ups.
 */
export const ListActivitiesResponseStatus = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * The status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This field provides insight into the attendee's participation level and is essential for managing attendance and follow-ups.
 */
export type ListActivitiesResponseStatus = ClosedEnum<
  typeof ListActivitiesResponseStatus
>;

export type Attendees = {
  /**
   * A unique identifier assigned to each attendee within the CRM system. This string value is used to distinguish individual attendees across various activities and integrations. It is essential for tracking and managing attendee-specific data in applications.
   */
  id?: string | null | undefined;
  /**
   * The full name of the attendee, combining first, middle, and last names if available. This string is used for display purposes in user interfaces and reports, providing a complete identification of the attendee involved in the activity.
   */
  name?: string | null | undefined;
  /**
   * The first name of the attendee as recorded in the CRM. This string is part of the attendee's full name and is often used in personalized communications and user interfaces.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the attendee, if available, as stored in the CRM. This string is optional and may be used in formal communications or for distinguishing between attendees with similar names.
   */
  middleName?: string | null | undefined;
  /**
   * The last name or surname of the attendee, as recorded in the CRM. This string is crucial for identifying the attendee in records and communications, especially in formal contexts.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the attendee, such as 'Mr.', 'Ms.', or 'Dr.', which is used to address the attendee formally. This field is optional and may be empty if no prefix is applicable or provided. It helps in personalizing communication within CRM activities.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the attendee, such as 'Jr.', 'Sr.', or 'III', which is used to denote generational titles or professional designations. This optional field may be empty if no suffix is applicable or provided, aiding in formal identification within CRM activities.
   */
  suffix?: string | null | undefined;
  /**
   * The email address of the attendee, formatted as a standard email string (e.g., 'example@domain.com'). This field is crucial for sending notifications and updates related to the CRM activity and may be empty if not provided.
   */
  emailAddress?: string | null | undefined;
  /**
   * A boolean value indicating whether the attendee is the organizer of the activity. This field is 'true' if the attendee is the organizer, otherwise 'false'. It helps in identifying the primary contact responsible for the activity.
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * The status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'declined'. This field provides insight into the attendee's participation level and is essential for managing attendance and follow-ups.
   */
  status?: ListActivitiesResponseStatus | null | undefined;
  /**
   * A unique identifier representing a user associated with the activity. This string value helps in linking the activity to a specific user within the CRM system, facilitating user-specific activity tracking and management.
   */
  userId?: string | null | undefined;
  /**
   * A unique identifier for a contact associated with the activity. This string value is used to connect the activity to a particular contact, enabling detailed tracking of interactions with specific contacts in the CRM.
   */
  contactId?: string | null | undefined;
  /**
   * The timestamp indicating when the attendee's information was last updated, formatted in ISO 8601. This helps in tracking changes and ensuring the data reflects the most recent updates in the CRM system.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp indicating when the attendee's record was initially created, formatted in ISO 8601. This provides a historical reference for when the attendee was first added to the CRM system.
   */
  createdAt?: Date | null | undefined;
};

/**
 * An object containing custom mappings configured for the resource. This is included when specific custom configurations are applied, allowing developers to access and utilize tailored data mappings within the CRM activities.
 */
export type ListActivitiesResponseCustomMappings = {};

export type ListActivitiesResponseExtendPaths = {
  /**
   * This property contains a JSONPath string that specifies the exact location within the data structure where a value should be applied. It is a required field within each object in the extend_paths array, ensuring precise targeting of data modifications. The path must be a valid JSONPath expression.
   */
  path: string;
  /**
   * This property holds the value to be set at a specified path within the data structure. It can be of any data type, allowing flexibility in the kind of data that can be passed through. This is crucial for customizing the API response to include additional data as needed by the application.
   */
  value?: any | undefined;
};

export type ListActivitiesResponsePassThrough = {
  /**
   * This property contains the unique identifier for the service to which the pass-through operation should be applied. It is a mandatory field and is expected to be a non-empty string. This identifier is crucial for routing the pass-through request to the correct service within the CRM ecosystem.
   */
  serviceId: string;
  /**
   * This optional property specifies the identifier for a particular workflow operation that the pass-through should target. It is useful in scenarios where multiple downstream requests are made, allowing for precise control over which operation the pass-through affects. The value is a string and can be omitted if not applicable.
   */
  operationId?: string | undefined;
  /**
   * This property is an object designed to allow direct extension with any additional properties needed for the pass-through operation. It provides flexibility by enabling developers to include custom data structures as required by specific use cases. The object can be empty or populated with key-value pairs as needed.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property is an array of objects, each representing a structured data modification path. It allows developers to specify multiple JSONPath strings for applying changes to the data structure. This feature is particularly useful for complex data transformations within the pass-through operation.
   */
  extendPaths?: Array<ListActivitiesResponseExtendPaths> | undefined;
};

export type ListActivitiesResponseData = {
  /**
   * The unique identifier for each activity within the CRM system. This string is used to distinguish each activity record from others, facilitating precise data retrieval and manipulation. It is optional and may not be present for all activities.
   */
  id?: string | undefined;
  /**
   * The identifier assigned by a third-party API to the original entity related to the activity. This string helps in mapping and correlating activities across different systems, ensuring consistency and traceability in data integration processes.
   */
  downstreamId?: string | null | undefined;
  /**
   * The date and time when the activity occurred, formatted as an ISO 8601 string. This timestamp is crucial for chronological sorting and filtering of activities, enabling developers to analyze customer interactions over time.
   */
  activityDatetime?: string | null | undefined;
  /**
   * The length of time the activity lasted, measured in seconds. This integer value provides insight into the duration of customer interactions, which can be used for performance analysis and reporting purposes.
   */
  durationSeconds?: number | null | undefined;
  /**
   * The unique identifier for the user associated with this activity. This string value links the activity to a specific user within the CRM system, allowing developers to track and manage user-specific interactions. It is optional and may not be present if the activity is not user-specific.
   */
  userId?: string | null | undefined;
  /**
   * The unique identifier for the account associated with this activity. This string value helps in associating the activity with a particular account, facilitating account-level tracking and analysis. It is optional and may not be present if the activity is not account-specific.
   */
  accountId?: string | null | undefined;
  /**
   * The unique identifier for the contact associated with this activity. This string value is used to link the activity to a specific contact, enabling detailed tracking of interactions at the contact level. It is optional and may not be present if the activity is not contact-specific.
   */
  contactId?: string | null | undefined;
  /**
   * The unique identifier for the company associated with this activity. This string value connects the activity to a specific company, allowing for company-level interaction analysis and management. It is optional and may not be present if the activity is not company-specific.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier for the opportunity associated with this activity. This string value links the activity to a specific sales opportunity, aiding in the tracking and management of opportunity-related interactions. It is optional and may not be present if the activity is not opportunity-specific.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with this activity. This string value links the activity to a specific lead within the CRM, allowing developers to track interactions and engagements related to that lead. It is optional and may be null if the activity is not linked to a lead.
   */
  leadId?: string | null | undefined;
  /**
   * The unique identifier for the user or entity that owns this activity. This string value helps in determining who is responsible for the activity, facilitating assignment and accountability within the CRM system. It is optional and may be null if no specific owner is assigned.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier for the marketing campaign associated with this activity. This string value connects the activity to a specific campaign, enabling developers to analyze campaign performance and related interactions. It is optional and may be null if the activity is not linked to a campaign.
   */
  campaignId?: string | null | undefined;
  /**
   * The unique identifier for the case associated with this activity. This string value ties the activity to a particular case, which is useful for tracking case-related interactions and resolutions within the CRM. It is optional and may be null if the activity is not linked to a case.
   */
  caseId?: string | null | undefined;
  /**
   * The unique identifier for the asset associated with this activity. This string value links the activity to a specific asset, allowing developers to manage and track asset-related interactions and activities. It is optional and may be null if the activity is not linked to an asset.
   */
  assetId?: string | null | undefined;
  /**
   * The unique identifier for the contract associated with this activity. This ID is a string and may be used to link the activity to specific contract details within the CRM. It is optional and may not be present if the activity is not related to a contract.
   */
  contractId?: string | null | undefined;
  /**
   * The unique identifier for the product associated with this activity. This string value helps in tracking which product the activity pertains to, facilitating product-specific analysis and management. It is optional and may be absent if the activity does not involve a product.
   */
  productId?: string | null | undefined;
  /**
   * The unique identifier for the solution linked to this activity. This string allows developers to connect the activity with specific solutions offered, aiding in solution-based reporting and insights. It is optional and may not be included if the activity is unrelated to a solution.
   */
  solutionId?: string | null | undefined;
  /**
   * The unique identifier for a custom object associated with this activity. This string is used to reference custom objects that are part of the CRM, enabling tailored data management and retrieval. It is optional and may not be present if the activity does not involve a custom object.
   */
  customObjectId?: string | null | undefined;
  /**
   * The type of activity being recorded, represented as a string. This field is mandatory and indicates the nature of the activity, such as a call, meeting, or task, providing essential context for understanding the activity's purpose within the CRM.
   */
  type: ListActivitiesResponseType | null;
  /**
   * The title of the activity, representing a brief and concise summary of the activity's purpose or subject. This string is optional and can be used to quickly identify the activity in lists or overviews.
   */
  title?: string | null | undefined;
  /**
   * A detailed description of the activity, providing additional context and information about what the activity entails. This optional string helps users understand the specifics of the activity beyond its title.
   */
  description?: string | null | undefined;
  /**
   * An internal note about the activity, intended for use within the organization to capture additional insights or comments that are not meant for external audiences. This optional string can be used for internal documentation or reminders.
   */
  note?: string | null | undefined;
  /**
   * The location of the activity, specified as a string. This optional field indicates where the activity is taking place, which can be a physical address or a virtual location such as an online meeting link.
   */
  location?: string | null | undefined;
  /**
   * An object containing detailed address information for the activity's location. This optional field may include components such as street address, city, state, and postal code, providing a comprehensive view of the activity's physical location.
   */
  locationAddress?: ListActivitiesResponseLocationAddress | undefined;
  /**
   * A boolean value indicating whether the activity spans the entire day. If true, the activity is considered an all-day event, otherwise, it has specific start and end times.
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Indicates whether the activity is private, meaning it is not visible to other users except those with explicit permissions. This boolean value helps in managing access control within the CRM, ensuring sensitive information is only accessible to authorized personnel.
   */
  private?: boolean | null | undefined;
  /**
   * Specifies if the activity is a group event, which involves multiple participants or attendees. This boolean flag helps in distinguishing between individual and collaborative activities within the CRM system.
   */
  groupEvent?: boolean | null | undefined;
  /**
   * Represents the specific sub-category of the group event, providing additional context about the nature of the event. This string value aids in filtering and organizing events based on their sub-types, enhancing the ability to analyze event data.
   */
  eventSubType?: string | null | undefined;
  /**
   * Denotes the main category of the group event, offering a broad classification that helps in identifying the type of group interactions. This string value is crucial for sorting and managing events within the CRM.
   */
  groupEventType?: string | null | undefined;
  /**
   * Indicates whether the activity is a subordinate or dependent activity linked to a parent activity. This boolean value is useful for understanding hierarchical relationships between activities, facilitating better organization and tracking of related tasks.
   */
  child?: boolean | null | undefined;
  /**
   * Indicates whether the activity is archived. This boolean value helps in filtering activities that are no longer active or needed for immediate reference. Useful for managing historical data within the CRM.
   */
  archived?: boolean | null | undefined;
  /**
   * Indicates whether the activity has been deleted. This boolean value is crucial for understanding the current state of an activity, especially when synchronizing or cleaning up data across systems.
   */
  deleted?: boolean | null | undefined;
  /**
   * Represents the display status of the activity, such as 'busy' or 'free'. This string value helps in visualizing the activity's impact on scheduling and availability within the CRM interface.
   */
  showAs?: ListActivitiesResponseShowAs | null | undefined;
  /**
   * Indicates whether the activity is completed. This boolean value is essential for tracking progress and managing task workflows within the CRM, allowing users to focus on pending activities.
   */
  done?: boolean | null | undefined;
  /**
   * The start date and time of the activity in ISO 8601 format. This string value is critical for scheduling and chronological organization of activities, ensuring accurate timeline management within the CRM.
   */
  startDatetime?: string | null | undefined;
  /**
   * The end date and time of the activity, represented in ISO 8601 format. This property indicates when the activity is scheduled to conclude, providing a precise timestamp that can be used for scheduling and time management within CRM applications.
   */
  endDatetime?: string | null | undefined;
  /**
   * The duration of the activity in minutes, indicating the total time span from start to finish. This integer value helps in calculating time allocation and resource management for CRM activities.
   */
  durationMinutes?: number | null | undefined;
  /**
   * The date on which the activity is scheduled or took place, formatted as a string in ISO 8601 date format. This property is essential for tracking and organizing activities chronologically within the CRM system.
   */
  activityDate?: string | null | undefined;
  /**
   * The end date of the activity, provided as a string in ISO 8601 date format. This property specifies the final day of the activity, useful for activities spanning multiple days and for generating reports.
   */
  endDate?: string | null | undefined;
  /**
   * A boolean value indicating whether the activity is recurrent. If true, the activity repeats according to a defined schedule, which is crucial for managing ongoing customer interactions and planning future engagements.
   */
  recurrent?: boolean | undefined;
  /**
   * The reminder_datetime property contains the specific date and time when a reminder is scheduled to occur. It is formatted as a string in ISO 8601 format, allowing for precise scheduling and integration with calendar applications. This property is optional and may not be present if no reminder is set for the activity.
   */
  reminderDatetime?: string | null | undefined;
  /**
   * The reminder_set property indicates whether a reminder has been configured for the activity. It returns a boolean value: 'true' if a reminder is set, and 'false' otherwise. This property helps users quickly determine if they need to take action regarding reminders for specific activities.
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The video_conference_url property provides the web address for accessing a video conference associated with the activity. It is a string formatted as a URL, enabling users to join meetings directly from the CRM interface. This property is optional and will be included only if a video conference is linked to the activity.
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * The video_conference_id property contains the unique identifier for a video conference linked to the activity. It is a string that serves as a reference for managing and retrieving specific video conference details. This property is optional and is present only when a video conference is associated with the activity.
   */
  videoConferenceId?: string | null | undefined;
  /**
   * The custom_fields property is an array that holds additional, user-defined data fields related to the activity. These fields allow for customization and extension of the standard activity data model, enabling users to store and retrieve bespoke information pertinent to their specific use cases. This property is optional and can vary in structure depending on the user's configuration.
   */
  customFields?: Array<ListActivitiesResponseCustomFields> | undefined;
  /**
   * An array containing details of individuals or entities participating in the CRM activity. Each element in the array represents an attendee, providing information such as names and roles, which is crucial for understanding the participants involved in the activity.
   */
  attendees?: Array<Attendees> | undefined;
  /**
   * An object containing custom mappings configured for the resource. This is included when specific custom configurations are applied, allowing developers to access and utilize tailored data mappings within the CRM activities.
   */
  customMappings?: ListActivitiesResponseCustomMappings | null | undefined;
  /**
   * The identifier or username of the user who last modified the activity record. This information is useful for tracking changes and understanding who is responsible for the latest updates. The value is returned as a string and may vary depending on the CRM system's user identification method.
   */
  updatedBy?: string | null | undefined;
  /**
   * The identifier or username of the user who originally created the activity record. This property helps in auditing and understanding the origin of the activity. It is returned as a string and reflects the user information at the time of creation.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the activity was last updated. This is crucial for synchronization and ensuring the data is current. The format is typically ISO 8601, providing a precise date and time.
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp indicating when the activity was initially created. This helps in tracking the lifecycle of the activity. The format is usually ISO 8601, ensuring a standardized date and time representation.
   */
  createdAt?: string | null | undefined;
  /**
   * An array containing service-specific custom data or modifications that were included in the request. This property allows for flexibility and customization when interacting with different CRM systems. The structure of the array elements can vary based on the specific requirements of the service being integrated.
   */
  passThrough?: Array<ListActivitiesResponsePassThrough> | undefined;
};

/**
 * The 'cursors' object within the 'meta' section provides navigational aids for paginating through large sets of data. It includes pointers to move to previous or next pages, facilitating efficient data retrieval across multiple API requests.
 */
export type ListActivitiesResponseCursors = {
  /**
   * This string property serves as a pointer to the previous page of results in the paginated API response. It is used to retrieve the preceding set of data, enabling backward navigation through the dataset.
   */
  previous?: string | null | undefined;
  /**
   * The 'current' cursor represents the position in the dataset for the current page of results. It is a string value used to fetch the current set of activities when making subsequent API calls. This cursor is essential for maintaining the state of pagination in the CRM activities list.
   */
  current?: string | null | undefined;
  /**
   * The 'next' cursor is a string that indicates the position in the dataset for the next page of results. It is used to retrieve the subsequent set of activities in a paginated response, ensuring smooth navigation through large datasets.
   */
  next?: string | null | undefined;
};

/**
 * The 'meta' object contains metadata about the API response, providing additional context and information about the data returned. It typically includes pagination details and other relevant metadata that help in understanding the scope and limits of the response.
 */
export type ListActivitiesResponseMeta = {
  /**
   * This property indicates the number of items included in the current page of the response data. It is an integer value that helps developers understand the volume of data returned in a single API call, aiding in pagination and data management strategies.
   */
  itemsOnPage?: number | undefined;
  /**
   * The 'cursors' object within the 'meta' section provides navigational aids for paginating through large sets of data. It includes pointers to move to previous or next pages, facilitating efficient data retrieval across multiple API requests.
   */
  cursors?: ListActivitiesResponseCursors | undefined;
};

/**
 * The 'links' object contains URLs for navigating between pages of results in the API response. It includes links to the current and previous pages, facilitating easy access to different parts of the dataset.
 */
export type ListActivitiesResponseLinks = {
  /**
   * The 'previous' link is a URL string that directs to the previous page of results in the dataset. It is used to navigate backward in the paginated list of CRM activities, allowing users to revisit earlier data.
   */
  previous?: string | null | undefined;
  /**
   * The 'current' link is a URL string pointing to the current page of results. It provides a direct reference to the current set of CRM activities being viewed, ensuring users can easily reload or share the current data view.
   */
  current?: string | undefined;
  /**
   * This property contains the URL link to the next page of results in the paginated response. It is a string formatted as a URL, and it is used to retrieve the subsequent set of CRM activities when navigating through multiple pages of data. This property is optional and will be present only if there is a next page available in the dataset.
   */
  next?: string | null | undefined;
};

/**
 * Activities
 */
export type ListActivitiesResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value helps determine whether the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is crucial for error handling and debugging in client applications.
   */
  statusCode: number;
  /**
   * A string representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for an error. This provides a human-readable status message that complements the status code, aiding in quick understanding of the response outcome.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the CRM activities are retrieved. This string identifier is essential for distinguishing between different service providers integrated with the Apideck platform, ensuring that the data source is correctly identified in the response.
   */
  service: string;
  /**
   * The name of the unified API resource that was accessed, such as 'activities'. This string value helps developers understand which specific resource the operation was performed on, facilitating better organization and management of API interactions.
   */
  resource: string;
  /**
   * The specific operation that was performed, represented as a string. For this GET request, it typically indicates the retrieval of data, helping developers track the type of action executed by the API call.
   */
  operation: string;
  /**
   * An array containing a list of CRM activities. Each element in the array represents a single activity record, providing detailed information about customer interactions. This array is the primary container for the activity data returned by the API, allowing developers to iterate over and process each activity individually.
   */
  data: Array<ListActivitiesResponseData>;
  /**
   * The 'meta' object contains metadata about the API response, providing additional context and information about the data returned. It typically includes pagination details and other relevant metadata that help in understanding the scope and limits of the response.
   */
  meta?: ListActivitiesResponseMeta | undefined;
  /**
   * The 'links' object contains URLs for navigating between pages of results in the API response. It includes links to the current and previous pages, facilitating easy access to different parts of the dataset.
   */
  links?: ListActivitiesResponseLinks | undefined;
};

/** @internal */
export const ListActivitiesResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseType
> = z.nativeEnum(ListActivitiesResponseType);

/** @internal */
export const ListActivitiesResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseType
> = ListActivitiesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseType$ {
  /** @deprecated use `ListActivitiesResponseType$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseType$inboundSchema;
  /** @deprecated use `ListActivitiesResponseType$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseType$outboundSchema;
}

/** @internal */
export const ListActivitiesResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseDataType
> = z.nativeEnum(ListActivitiesResponseDataType);

/** @internal */
export const ListActivitiesResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseDataType
> = ListActivitiesResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseDataType$ {
  /** @deprecated use `ListActivitiesResponseDataType$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseDataType$inboundSchema;
  /** @deprecated use `ListActivitiesResponseDataType$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseDataType$outboundSchema;
}

/** @internal */
export const ListActivitiesResponseLocationAddress$inboundSchema: z.ZodType<
  ListActivitiesResponseLocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListActivitiesResponseDataType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ListActivitiesResponseLocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ListActivitiesResponseLocationAddress$outboundSchema: z.ZodType<
  ListActivitiesResponseLocationAddress$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseLocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListActivitiesResponseDataType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseLocationAddress$ {
  /** @deprecated use `ListActivitiesResponseLocationAddress$inboundSchema` instead. */
  export const inboundSchema =
    ListActivitiesResponseLocationAddress$inboundSchema;
  /** @deprecated use `ListActivitiesResponseLocationAddress$outboundSchema` instead. */
  export const outboundSchema =
    ListActivitiesResponseLocationAddress$outboundSchema;
  /** @deprecated use `ListActivitiesResponseLocationAddress$Outbound` instead. */
  export type Outbound = ListActivitiesResponseLocationAddress$Outbound;
}

export function listActivitiesResponseLocationAddressToJSON(
  listActivitiesResponseLocationAddress: ListActivitiesResponseLocationAddress,
): string {
  return JSON.stringify(
    ListActivitiesResponseLocationAddress$outboundSchema.parse(
      listActivitiesResponseLocationAddress,
    ),
  );
}

export function listActivitiesResponseLocationAddressFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseLocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListActivitiesResponseLocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseLocationAddress' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseShowAs$inboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseShowAs
> = z.nativeEnum(ListActivitiesResponseShowAs);

/** @internal */
export const ListActivitiesResponseShowAs$outboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseShowAs
> = ListActivitiesResponseShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseShowAs$ {
  /** @deprecated use `ListActivitiesResponseShowAs$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseShowAs$inboundSchema;
  /** @deprecated use `ListActivitiesResponseShowAs$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseShowAs$outboundSchema;
}

/** @internal */
export const ListActivitiesResponseValue6$inboundSchema: z.ZodType<
  ListActivitiesResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListActivitiesResponseValue6$Outbound = {};

/** @internal */
export const ListActivitiesResponseValue6$outboundSchema: z.ZodType<
  ListActivitiesResponseValue6$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseValue6$ {
  /** @deprecated use `ListActivitiesResponseValue6$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseValue6$inboundSchema;
  /** @deprecated use `ListActivitiesResponseValue6$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseValue6$outboundSchema;
  /** @deprecated use `ListActivitiesResponseValue6$Outbound` instead. */
  export type Outbound = ListActivitiesResponseValue6$Outbound;
}

export function listActivitiesResponseValue6ToJSON(
  listActivitiesResponseValue6: ListActivitiesResponseValue6,
): string {
  return JSON.stringify(
    ListActivitiesResponseValue6$outboundSchema.parse(
      listActivitiesResponseValue6,
    ),
  );
}

export function listActivitiesResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseValue6' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseValue4$inboundSchema: z.ZodType<
  ListActivitiesResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListActivitiesResponseValue4$Outbound = {};

/** @internal */
export const ListActivitiesResponseValue4$outboundSchema: z.ZodType<
  ListActivitiesResponseValue4$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseValue4$ {
  /** @deprecated use `ListActivitiesResponseValue4$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseValue4$inboundSchema;
  /** @deprecated use `ListActivitiesResponseValue4$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseValue4$outboundSchema;
  /** @deprecated use `ListActivitiesResponseValue4$Outbound` instead. */
  export type Outbound = ListActivitiesResponseValue4$Outbound;
}

export function listActivitiesResponseValue4ToJSON(
  listActivitiesResponseValue4: ListActivitiesResponseValue4,
): string {
  return JSON.stringify(
    ListActivitiesResponseValue4$outboundSchema.parse(
      listActivitiesResponseValue4,
    ),
  );
}

export function listActivitiesResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseValue4' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseValue$inboundSchema: z.ZodType<
  ListActivitiesResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListActivitiesResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListActivitiesResponseValue6$inboundSchema)),
]);

/** @internal */
export type ListActivitiesResponseValue$Outbound =
  | ListActivitiesResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListActivitiesResponseValue6$Outbound>;

/** @internal */
export const ListActivitiesResponseValue$outboundSchema: z.ZodType<
  ListActivitiesResponseValue$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseValue
> = z.union([
  z.lazy(() => ListActivitiesResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListActivitiesResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseValue$ {
  /** @deprecated use `ListActivitiesResponseValue$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseValue$inboundSchema;
  /** @deprecated use `ListActivitiesResponseValue$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseValue$outboundSchema;
  /** @deprecated use `ListActivitiesResponseValue$Outbound` instead. */
  export type Outbound = ListActivitiesResponseValue$Outbound;
}

export function listActivitiesResponseValueToJSON(
  listActivitiesResponseValue: ListActivitiesResponseValue,
): string {
  return JSON.stringify(
    ListActivitiesResponseValue$outboundSchema.parse(
      listActivitiesResponseValue,
    ),
  );
}

export function listActivitiesResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseValue' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseCustomFields$inboundSchema: z.ZodType<
  ListActivitiesResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListActivitiesResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListActivitiesResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ListActivitiesResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ListActivitiesResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListActivitiesResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ListActivitiesResponseCustomFields$outboundSchema: z.ZodType<
  ListActivitiesResponseCustomFields$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListActivitiesResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListActivitiesResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseCustomFields$ {
  /** @deprecated use `ListActivitiesResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseCustomFields$inboundSchema;
  /** @deprecated use `ListActivitiesResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    ListActivitiesResponseCustomFields$outboundSchema;
  /** @deprecated use `ListActivitiesResponseCustomFields$Outbound` instead. */
  export type Outbound = ListActivitiesResponseCustomFields$Outbound;
}

export function listActivitiesResponseCustomFieldsToJSON(
  listActivitiesResponseCustomFields: ListActivitiesResponseCustomFields,
): string {
  return JSON.stringify(
    ListActivitiesResponseCustomFields$outboundSchema.parse(
      listActivitiesResponseCustomFields,
    ),
  );
}

export function listActivitiesResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListActivitiesResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseStatus
> = z.nativeEnum(ListActivitiesResponseStatus);

/** @internal */
export const ListActivitiesResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseStatus
> = ListActivitiesResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseStatus$ {
  /** @deprecated use `ListActivitiesResponseStatus$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseStatus$inboundSchema;
  /** @deprecated use `ListActivitiesResponseStatus$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseStatus$outboundSchema;
}

/** @internal */
export const Attendees$inboundSchema: z.ZodType<
  Attendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ListActivitiesResponseStatus$inboundSchema).optional(),
  user_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
    "user_id": "userId",
    "contact_id": "contactId",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
  });
});

/** @internal */
export type Attendees$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
  user_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const Attendees$outboundSchema: z.ZodType<
  Attendees$Outbound,
  z.ZodTypeDef,
  Attendees
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ListActivitiesResponseStatus$outboundSchema).optional(),
  userId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
    userId: "user_id",
    contactId: "contact_id",
    updatedAt: "updated_at",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attendees$ {
  /** @deprecated use `Attendees$inboundSchema` instead. */
  export const inboundSchema = Attendees$inboundSchema;
  /** @deprecated use `Attendees$outboundSchema` instead. */
  export const outboundSchema = Attendees$outboundSchema;
  /** @deprecated use `Attendees$Outbound` instead. */
  export type Outbound = Attendees$Outbound;
}

export function attendeesToJSON(attendees: Attendees): string {
  return JSON.stringify(Attendees$outboundSchema.parse(attendees));
}

export function attendeesFromJSON(
  jsonString: string,
): SafeParseResult<Attendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attendees' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseCustomMappings$inboundSchema: z.ZodType<
  ListActivitiesResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListActivitiesResponseCustomMappings$Outbound = {};

/** @internal */
export const ListActivitiesResponseCustomMappings$outboundSchema: z.ZodType<
  ListActivitiesResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseCustomMappings$ {
  /** @deprecated use `ListActivitiesResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema =
    ListActivitiesResponseCustomMappings$inboundSchema;
  /** @deprecated use `ListActivitiesResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    ListActivitiesResponseCustomMappings$outboundSchema;
  /** @deprecated use `ListActivitiesResponseCustomMappings$Outbound` instead. */
  export type Outbound = ListActivitiesResponseCustomMappings$Outbound;
}

export function listActivitiesResponseCustomMappingsToJSON(
  listActivitiesResponseCustomMappings: ListActivitiesResponseCustomMappings,
): string {
  return JSON.stringify(
    ListActivitiesResponseCustomMappings$outboundSchema.parse(
      listActivitiesResponseCustomMappings,
    ),
  );
}

export function listActivitiesResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListActivitiesResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseExtendPaths$inboundSchema: z.ZodType<
  ListActivitiesResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListActivitiesResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListActivitiesResponseExtendPaths$outboundSchema: z.ZodType<
  ListActivitiesResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseExtendPaths$ {
  /** @deprecated use `ListActivitiesResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListActivitiesResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema =
    ListActivitiesResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListActivitiesResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListActivitiesResponseExtendPaths$Outbound;
}

export function listActivitiesResponseExtendPathsToJSON(
  listActivitiesResponseExtendPaths: ListActivitiesResponseExtendPaths,
): string {
  return JSON.stringify(
    ListActivitiesResponseExtendPaths$outboundSchema.parse(
      listActivitiesResponseExtendPaths,
    ),
  );
}

export function listActivitiesResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponsePassThrough$inboundSchema: z.ZodType<
  ListActivitiesResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListActivitiesResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListActivitiesResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListActivitiesResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListActivitiesResponsePassThrough$outboundSchema: z.ZodType<
  ListActivitiesResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListActivitiesResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponsePassThrough$ {
  /** @deprecated use `ListActivitiesResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponsePassThrough$inboundSchema;
  /** @deprecated use `ListActivitiesResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema =
    ListActivitiesResponsePassThrough$outboundSchema;
  /** @deprecated use `ListActivitiesResponsePassThrough$Outbound` instead. */
  export type Outbound = ListActivitiesResponsePassThrough$Outbound;
}

export function listActivitiesResponsePassThroughToJSON(
  listActivitiesResponsePassThrough: ListActivitiesResponsePassThrough,
): string {
  return JSON.stringify(
    ListActivitiesResponsePassThrough$outboundSchema.parse(
      listActivitiesResponsePassThrough,
    ),
  );
}

export function listActivitiesResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseData$inboundSchema: z.ZodType<
  ListActivitiesResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  downstream_id: z.nullable(z.string()).optional(),
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(ListActivitiesResponseType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() =>
    ListActivitiesResponseLocationAddress$inboundSchema
  ).optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(ListActivitiesResponseShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  duration_minutes: z.nullable(z.number().int()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => ListActivitiesResponseCustomFields$inboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => Attendees$inboundSchema)).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ListActivitiesResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => ListActivitiesResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "downstream_id": "downstreamId",
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "duration_minutes": "durationMinutes",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ListActivitiesResponseData$Outbound = {
  id?: string | undefined;
  downstream_id?: string | null | undefined;
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: ListActivitiesResponseLocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  duration_minutes?: number | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?:
    | Array<ListActivitiesResponseCustomFields$Outbound>
    | undefined;
  attendees?: Array<Attendees$Outbound> | undefined;
  custom_mappings?:
    | ListActivitiesResponseCustomMappings$Outbound
    | null
    | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ListActivitiesResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const ListActivitiesResponseData$outboundSchema: z.ZodType<
  ListActivitiesResponseData$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseData
> = z.object({
  id: z.string().optional(),
  downstreamId: z.nullable(z.string()).optional(),
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(ListActivitiesResponseType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() =>
    ListActivitiesResponseLocationAddress$outboundSchema
  ).optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(ListActivitiesResponseShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  durationMinutes: z.nullable(z.number().int()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => ListActivitiesResponseCustomFields$outboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => Attendees$outboundSchema)).optional(),
  customMappings: z.nullable(
    z.lazy(() => ListActivitiesResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => ListActivitiesResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    downstreamId: "downstream_id",
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    durationMinutes: "duration_minutes",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseData$ {
  /** @deprecated use `ListActivitiesResponseData$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseData$inboundSchema;
  /** @deprecated use `ListActivitiesResponseData$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseData$outboundSchema;
  /** @deprecated use `ListActivitiesResponseData$Outbound` instead. */
  export type Outbound = ListActivitiesResponseData$Outbound;
}

export function listActivitiesResponseDataToJSON(
  listActivitiesResponseData: ListActivitiesResponseData,
): string {
  return JSON.stringify(
    ListActivitiesResponseData$outboundSchema.parse(listActivitiesResponseData),
  );
}

export function listActivitiesResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseData' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseCursors$inboundSchema: z.ZodType<
  ListActivitiesResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListActivitiesResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListActivitiesResponseCursors$outboundSchema: z.ZodType<
  ListActivitiesResponseCursors$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseCursors$ {
  /** @deprecated use `ListActivitiesResponseCursors$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseCursors$inboundSchema;
  /** @deprecated use `ListActivitiesResponseCursors$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseCursors$outboundSchema;
  /** @deprecated use `ListActivitiesResponseCursors$Outbound` instead. */
  export type Outbound = ListActivitiesResponseCursors$Outbound;
}

export function listActivitiesResponseCursorsToJSON(
  listActivitiesResponseCursors: ListActivitiesResponseCursors,
): string {
  return JSON.stringify(
    ListActivitiesResponseCursors$outboundSchema.parse(
      listActivitiesResponseCursors,
    ),
  );
}

export function listActivitiesResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseCursors' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseMeta$inboundSchema: z.ZodType<
  ListActivitiesResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ListActivitiesResponseCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ListActivitiesResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ListActivitiesResponseCursors$Outbound | undefined;
};

/** @internal */
export const ListActivitiesResponseMeta$outboundSchema: z.ZodType<
  ListActivitiesResponseMeta$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ListActivitiesResponseCursors$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseMeta$ {
  /** @deprecated use `ListActivitiesResponseMeta$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseMeta$inboundSchema;
  /** @deprecated use `ListActivitiesResponseMeta$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseMeta$outboundSchema;
  /** @deprecated use `ListActivitiesResponseMeta$Outbound` instead. */
  export type Outbound = ListActivitiesResponseMeta$Outbound;
}

export function listActivitiesResponseMetaToJSON(
  listActivitiesResponseMeta: ListActivitiesResponseMeta,
): string {
  return JSON.stringify(
    ListActivitiesResponseMeta$outboundSchema.parse(listActivitiesResponseMeta),
  );
}

export function listActivitiesResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseMeta' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseLinks$inboundSchema: z.ZodType<
  ListActivitiesResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListActivitiesResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListActivitiesResponseLinks$outboundSchema: z.ZodType<
  ListActivitiesResponseLinks$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseLinks$ {
  /** @deprecated use `ListActivitiesResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseLinks$inboundSchema;
  /** @deprecated use `ListActivitiesResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseLinks$outboundSchema;
  /** @deprecated use `ListActivitiesResponseLinks$Outbound` instead. */
  export type Outbound = ListActivitiesResponseLinks$Outbound;
}

export function listActivitiesResponseLinksToJSON(
  listActivitiesResponseLinks: ListActivitiesResponseLinks,
): string {
  return JSON.stringify(
    ListActivitiesResponseLinks$outboundSchema.parse(
      listActivitiesResponseLinks,
    ),
  );
}

export function listActivitiesResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseLinks' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponse$inboundSchema: z.ZodType<
  ListActivitiesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListActivitiesResponseData$inboundSchema)),
  meta: z.lazy(() => ListActivitiesResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => ListActivitiesResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListActivitiesResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ListActivitiesResponseData$Outbound>;
  meta?: ListActivitiesResponseMeta$Outbound | undefined;
  links?: ListActivitiesResponseLinks$Outbound | undefined;
};

/** @internal */
export const ListActivitiesResponse$outboundSchema: z.ZodType<
  ListActivitiesResponse$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListActivitiesResponseData$outboundSchema)),
  meta: z.lazy(() => ListActivitiesResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => ListActivitiesResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponse$ {
  /** @deprecated use `ListActivitiesResponse$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponse$inboundSchema;
  /** @deprecated use `ListActivitiesResponse$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponse$outboundSchema;
  /** @deprecated use `ListActivitiesResponse$Outbound` instead. */
  export type Outbound = ListActivitiesResponse$Outbound;
}

export function listActivitiesResponseToJSON(
  listActivitiesResponse: ListActivitiesResponse,
): string {
  return JSON.stringify(
    ListActivitiesResponse$outboundSchema.parse(listActivitiesResponse),
  );
}

export function listActivitiesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponse' from JSON`,
  );
}
