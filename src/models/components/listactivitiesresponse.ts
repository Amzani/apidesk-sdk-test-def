/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The category or nature of the activity, indicating what type of action or event it represents within the CRM. This property is crucial for understanding the context and purpose of the activity, and it is required for processing and categorizing activities. The format is a string, and it may correspond to predefined activity types within the CRM system.
 */
export const ListActivitiesResponseType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * The category or nature of the activity, indicating what type of action or event it represents within the CRM. This property is crucial for understanding the context and purpose of the activity, and it is required for processing and categorizing activities. The format is a string, and it may correspond to predefined activity types within the CRM system.
 */
export type ListActivitiesResponseType = ClosedEnum<
  typeof ListActivitiesResponseType
>;

/**
 * Specifies the category or classification of the address, such as 'home', 'work', or 'billing'. This helps in organizing and filtering addresses based on their intended use within the CRM activities. The value is expected to be a string that describes the address type.
 */
export const ListActivitiesResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category or classification of the address, such as 'home', 'work', or 'billing'. This helps in organizing and filtering addresses based on their intended use within the CRM activities. The value is expected to be a string that describes the address type.
 */
export type ListActivitiesResponseDataType = ClosedEnum<
  typeof ListActivitiesResponseDataType
>;

/**
 * An object containing detailed address information for the activity's location, including components such as street, city, state, and postal code. This structured data is crucial for precise location identification and navigation.
 */
export type ListActivitiesResponseLocationAddress = {
  /**
   * A unique identifier assigned to the address within the CRM system. This ID is used to reference the specific address in operations and integrations, ensuring accurate data management. The format is typically a string of alphanumeric characters.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category or classification of the address, such as 'home', 'work', or 'billing'. This helps in organizing and filtering addresses based on their intended use within the CRM activities. The value is expected to be a string that describes the address type.
   */
  type?: ListActivitiesResponseDataType | null | undefined;
  /**
   * Represents the full address as a single string, useful when structured address components are not available. This field provides a complete address description in a free-text format, facilitating easy display and search operations.
   */
  string?: string | null | undefined;
  /**
   * The designated name or label for the address, which can be used for identification or reference purposes. This might include names like 'Headquarters' or 'Branch Office', aiding in quick recognition within CRM activities.
   */
  name?: string | null | undefined;
  /**
   * Contains the primary line of the address, including details such as street number, street name, and apartment or suite number. This field is crucial for pinpointing the exact location and is formatted as a string for easy integration and display.
   */
  line1?: string | null | undefined;
  /**
   * This field contains the second line of the address, typically used for apartment numbers, suite numbers, or additional address information. It is optional and may be left blank if not applicable. This property helps in providing a complete and precise address for CRM activities.
   */
  line2?: string | null | undefined;
  /**
   * This field holds the third line of the address, which can be used for further address details such as building names or additional location identifiers. It is optional and enhances the specificity of the address in CRM activities when needed.
   */
  line3?: string | null | undefined;
  /**
   * This field represents the fourth line of the address, allowing for even more detailed address information if necessary. It is optional and can be used to capture any extra address details that do not fit in the previous lines, aiding in precise location identification for CRM activities.
   */
  line4?: string | null | undefined;
  /**
   * This property specifies the street number of the address, which is a crucial part of the location information. It is typically a numeric value but can include letters or special characters as needed. This field is essential for identifying the exact location of CRM activities.
   */
  streetNumber?: string | null | undefined;
  /**
   * This field contains the name of the city where the address is located. It is a key component of the address structure, helping to identify the geographical area of CRM activities. This property is important for regional categorization and analysis.
   */
  city?: string | null | undefined;
  /**
   * The state or region part of the address associated with the CRM activity. This field provides geographical context and is useful for location-based filtering or analysis. The value is expected to be a string representing the full name or abbreviation of the state.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code corresponding to the address of the CRM activity. This field helps in pinpointing the exact location and is crucial for mailing or delivery purposes. The value should be a string formatted according to the local postal system.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the address, following the ISO 3166-1 alpha-2 standard. This two-letter code identifies the country associated with the CRM activity, aiding in international data categorization and processing.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the address, indicating its north-south position on the Earth's surface. This value is a string representing the decimal degrees format, essential for mapping and geolocation services.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, indicating its east-west position on the Earth's surface. This value is a string in decimal degrees format, used for precise geolocation and mapping applications.
   */
  longitude?: string | null | undefined;
  /**
   * This field contains the name of the county or sublocality associated with the address. It helps in identifying the specific regional area within a larger city or town, which can be crucial for location-based services or regional analysis.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address. This information is used to identify the primary individual responsible for communications or transactions at this location.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as Mr., Ms., or Dr. This field helps in personalizing communications and maintaining formal address protocols.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with the address, formatted as a string. This number is used for direct communication with the contact person or organization at the specified location.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the address, provided as a string. This field is used for sending and receiving documents via fax, which may still be relevant for certain business communications.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the location. This field contains the primary contact email for the address, formatted as a standard email string (e.g., user@example.com). It is useful for direct communication related to the CRM activity's location.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the location. This property holds the web address for the location, formatted as a standard URL (e.g., https://www.example.com). It provides additional online information about the location relevant to the CRM activity.
   */
  website?: string | null | undefined;
  /**
   * Additional notes or comments about the location. This field can include any extra information or context that may be relevant to the CRM activity's location, formatted as a plain text string.
   */
  notes?: string | null | undefined;
  /**
   * A version identifier for the location data, used to detect updates and prevent data conflicts. This binary string is incremented with each update to ensure data integrity and synchronization in the CRM system.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Represents the display status of the activity in the CRM interface. This string value can be used to customize how the activity is presented to users, such as 'busy', 'free', or other status indicators.
 */
export const ListActivitiesResponseShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
/**
 * Represents the display status of the activity in the CRM interface. This string value can be used to customize how the activity is presented to users, such as 'busy', 'free', or other status indicators.
 */
export type ListActivitiesResponseShowAs = ClosedEnum<
  typeof ListActivitiesResponseShowAs
>;

export type ListActivitiesResponseValue6 = {};

export type ListActivitiesResponseValue4 = {};

/**
 * The actual data or content stored in the custom field, which can vary in format depending on the field's purpose. This optional value is crucial for capturing specific information related to CRM activities.
 */
export type ListActivitiesResponseValue =
  | ListActivitiesResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListActivitiesResponseValue6>;

export type ListActivitiesResponseCustomFields = {
  /**
   * A unique identifier assigned to each custom field within the CRM activities. This string value is essential for distinguishing between different custom fields and is used to reference specific fields in operations or integrations.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, providing a human-readable label that describes its purpose or content. This optional string helps users identify the field's role within the CRM activities.
   */
  name?: string | null | undefined;
  /**
   * A detailed explanation or additional information about the custom field, offering context or usage guidelines. This optional string can help users understand the field's significance or how it should be used within CRM activities.
   */
  description?: string | null | undefined;
  /**
   * The actual data or content stored in the custom field, which can vary in format depending on the field's purpose. This optional value is crucial for capturing specific information related to CRM activities.
   */
  value?:
    | ListActivitiesResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListActivitiesResponseValue6>
    | null
    | undefined;
};

/**
 * The current participation status of the attendee in the activity, such as confirmed, tentative, or declined. This field helps in managing and tracking attendee responses and is optional in the response.
 */
export const ListActivitiesResponseStatus = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * The current participation status of the attendee in the activity, such as confirmed, tentative, or declined. This field helps in managing and tracking attendee responses and is optional in the response.
 */
export type ListActivitiesResponseStatus = ClosedEnum<
  typeof ListActivitiesResponseStatus
>;

export type ListActivitiesResponseAttendees = {
  /**
   * A unique identifier assigned to each attendee, represented as a string. This ID is used to distinguish individual attendees within the CRM activities data, facilitating tracking and management of participant information.
   */
  id?: string | null | undefined;
  /**
   * The full name of the attendee, combining first, middle, and last names into a single string. This property provides a complete reference to the attendee's identity as recorded in the CRM activities.
   */
  name?: string | null | undefined;
  /**
   * The first name of the attendee, stored as a string. This property is part of the attendee's full identity and is used in CRM activities to personalize interactions and records.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the attendee, represented as a string. This optional property adds additional detail to the attendee's identity within the CRM activities, if available.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the attendee, stored as a string. This property completes the attendee's identity profile in CRM activities, aiding in accurate identification and record-keeping.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the attendee's name, such as Mr., Ms., or Dr. This field helps in addressing the attendee appropriately in communications and is optional in the response.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the attendee's name, like Jr., Sr., or III. This field is used to provide additional context to the attendee's name and is optional in the response.
   */
  suffix?: string | null | undefined;
  /**
   * The email address of the attendee, used for sending notifications and updates related to the activity. This field is optional and should be in a standard email format.
   */
  emailAddress?: string | null | undefined;
  /**
   * A boolean value indicating whether the attendee is the organizer of the activity. If true, this attendee has organizing privileges and responsibilities for the event.
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * The current participation status of the attendee in the activity, such as confirmed, tentative, or declined. This field helps in managing and tracking attendee responses and is optional in the response.
   */
  status?: ListActivitiesResponseStatus | null | undefined;
  /**
   * The unique identifier for a user associated with the activity. This ID is used to link the activity to a specific user within the CRM system, facilitating user-specific tracking and management. The format is a string, typically a UUID or similar unique string identifier.
   */
  userId?: string | null | undefined;
  /**
   * The unique identifier for a contact associated with the activity. This ID helps in linking the activity to a specific contact, allowing for detailed contact-related activity tracking within the CRM. The format is a string, usually a UUID or similar unique string identifier.
   */
  contactId?: string | null | undefined;
  /**
   * The timestamp indicating when the attendee's information was last updated. This is formatted in ISO 8601, providing a standardized date and time representation, crucial for synchronization and data consistency checks.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp indicating when the attendee's information was initially created. Formatted in ISO 8601, this provides a precise creation date and time, essential for historical data tracking and auditing purposes.
   */
  createdAt?: Date | null | undefined;
};

/**
 * An object containing custom mappings configured for the resource. This property includes any additional, user-defined fields or mappings that extend the standard data model, allowing for tailored data representation and integration within the CRM system.
 */
export type ListActivitiesResponseCustomMappings = {};

export type ListActivitiesResponseExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where a value should be applied. This precise targeting allows for efficient and accurate data modifications, ensuring that changes are made only where intended.
   */
  path: string;
  /**
   * This property holds the value to be set at a specified path within the CRM activities data structure. It can be of any data type, allowing flexibility in the type of data that can be stored or manipulated. This is crucial for developers looking to dynamically update or extend CRM activity records.
   */
  value?: any | undefined;
};

export type ListActivitiesResponsePassThrough = {
  /**
   * A unique identifier representing the specific service to which this pass-through operation should be applied. This ID is crucial for routing the request to the correct service within the CRM system, ensuring accurate data processing and integration.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that this pass-through should target. This is particularly useful in scenarios where multiple downstream requests are made, allowing for precise tracking and management of each operation within the CRM.
   */
  operationId?: string | undefined;
  /**
   * An object that allows for the inclusion of additional properties, enabling direct extension of the data structure. This flexibility supports custom data enhancements and integrations tailored to specific CRM needs.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. Each object in the array defines a path and corresponding modifications, facilitating targeted updates within the CRM data structure.
   */
  extendPaths?: Array<ListActivitiesResponseExtendPaths> | undefined;
};

export type ListActivitiesResponseData = {
  /**
   * A unique identifier for each activity within the CRM system. This ID is used to distinguish and reference individual activities in subsequent operations or data processing tasks.
   */
  id?: string | undefined;
  /**
   * The identifier assigned to the activity by the third-party API from which the original entity data is sourced. This ID helps in tracking and correlating activities across different systems and platforms.
   */
  downstreamId?: string | null | undefined;
  /**
   * The specific date and time when the activity occurred, formatted as a string. This timestamp is crucial for chronological sorting and filtering of activities within the CRM.
   */
  activityDatetime?: string | null | undefined;
  /**
   * The total duration of the activity measured in seconds. This numeric value is useful for analyzing the time spent on activities and can aid in performance assessments and reporting.
   */
  durationSeconds?: number | null | undefined;
  /**
   * The unique identifier of the user associated with this activity. This string value links the activity to a specific user within the CRM, allowing for tracking and management of user-related interactions.
   */
  userId?: string | null | undefined;
  /**
   * The unique identifier of the account associated with this activity. This string value connects the activity to a particular account, facilitating the organization and retrieval of account-specific activities within the CRM.
   */
  accountId?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with this activity. This string value ties the activity to a specific contact, enabling detailed tracking of interactions with individual contacts in the CRM.
   */
  contactId?: string | null | undefined;
  /**
   * The unique identifier of the company associated with this activity. This string value links the activity to a specific company, aiding in the management and analysis of company-related activities within the CRM.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier of the opportunity associated with this activity. This string value connects the activity to a particular sales opportunity, supporting the tracking and evaluation of opportunity-related interactions in the CRM.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with this activity. This ID helps in linking the activity to a specific lead within the CRM system, facilitating tracking and management of interactions related to that lead. The format is typically a string of alphanumeric characters.
   */
  leadId?: string | null | undefined;
  /**
   * The unique identifier for the user or entity that owns this activity. This ID is crucial for assigning responsibility and tracking who is managing or has initiated the activity within the CRM. It is usually represented as a string of alphanumeric characters.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier for the marketing campaign associated with this activity. This ID allows the activity to be linked to a specific campaign, aiding in the analysis and management of campaign-related tasks and outcomes. The format is generally a string of alphanumeric characters.
   */
  campaignId?: string | null | undefined;
  /**
   * The unique identifier for the case associated with this activity. This ID is used to connect the activity to a particular case, which is essential for tracking case-related actions and resolutions within the CRM. It is typically formatted as a string of alphanumeric characters.
   */
  caseId?: string | null | undefined;
  /**
   * The unique identifier for the asset related to this activity. This ID helps in associating the activity with a specific asset, which is important for managing asset-related tasks and records within the CRM. The format is usually a string of alphanumeric characters.
   */
  assetId?: string | null | undefined;
  /**
   * The unique identifier for the contract associated with this activity. This ID helps link the activity to a specific contract within the CRM, allowing for detailed tracking and management of contract-related activities. The format is a string, typically a UUID or similar unique string identifier.
   */
  contractId?: string | null | undefined;
  /**
   * The unique identifier for the product associated with this activity. This property allows developers to connect the activity to a specific product, facilitating product-related activity tracking within the CRM. The value is expected to be a string, often formatted as a UUID.
   */
  productId?: string | null | undefined;
  /**
   * The unique identifier for the solution linked to this activity. This ID is used to associate the activity with a particular solution, enabling solution-specific activity management in the CRM. The format is a string, usually a UUID or another unique identifier.
   */
  solutionId?: string | null | undefined;
  /**
   * The unique identifier for a custom object related to this activity. This property allows for the association of the activity with custom objects defined in the CRM, supporting flexible and customized activity tracking. The format is a string, typically a UUID or similar unique identifier.
   */
  customObjectId?: string | null | undefined;
  /**
   * The category or nature of the activity, indicating what type of action or event it represents within the CRM. This property is crucial for understanding the context and purpose of the activity, and it is required for processing and categorizing activities. The format is a string, and it may correspond to predefined activity types within the CRM system.
   */
  type: ListActivitiesResponseType | null;
  /**
   * The title of the activity, representing a brief and clear summary of the activity's purpose or subject. This field helps users quickly identify the nature of the activity within the CRM system. It is typically a short text string.
   */
  title?: string | null | undefined;
  /**
   * A detailed description of the activity, providing additional context and information about what the activity entails. This field is useful for understanding the specifics and objectives of the activity, and it is usually a longer text string.
   */
  description?: string | null | undefined;
  /**
   * An internal note about the activity, intended for use by CRM users to record additional insights or comments that are not visible to external parties. This field is typically used for internal communication and documentation purposes.
   */
  note?: string | null | undefined;
  /**
   * The location where the activity is scheduled to take place, which can be a physical address or a virtual meeting link. This field helps in organizing and planning logistics related to the activity.
   */
  location?: string | null | undefined;
  /**
   * An object containing detailed address information for the activity's location, including components such as street, city, state, and postal code. This structured data is crucial for precise location identification and navigation.
   */
  locationAddress?: ListActivitiesResponseLocationAddress | undefined;
  /**
   * Indicates whether the activity spans the entire day. This boolean value is true if the activity is an all-day event, and false otherwise, helping to schedule and manage CRM activities effectively.
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Indicates whether the activity is private, meaning it is only visible to certain users or groups within the CRM system. This boolean value helps manage access control and privacy settings for CRM activities.
   */
  private?: boolean | null | undefined;
  /**
   * Specifies if the activity is a group event, which involves multiple participants or attendees. This boolean value helps in categorizing activities that are collaborative in nature.
   */
  groupEvent?: boolean | null | undefined;
  /**
   * Defines the specific sub-type of a group event, providing additional categorization within broader event types. This string value helps in identifying the nature of the group event more precisely.
   */
  eventSubType?: string | null | undefined;
  /**
   * Describes the main type of the group event, offering a high-level categorization of the activity. This string value is crucial for understanding the general purpose or theme of the event.
   */
  groupEventType?: string | null | undefined;
  /**
   * Indicates whether the activity is a subordinate or dependent activity linked to a parent activity. This boolean value is useful for understanding hierarchical relationships between activities in the CRM.
   */
  child?: boolean | null | undefined;
  /**
   * Indicates whether the activity has been archived in the CRM system. An archived activity is typically not active but retained for historical reference. This boolean value helps in filtering activities based on their archival status.
   */
  archived?: boolean | null | undefined;
  /**
   * Indicates whether the activity has been marked as deleted in the CRM system. A deleted activity is usually not visible in standard queries unless specifically requested. This boolean value assists in managing the lifecycle of activities.
   */
  deleted?: boolean | null | undefined;
  /**
   * Represents the display status of the activity in the CRM interface. This string value can be used to customize how the activity is presented to users, such as 'busy', 'free', or other status indicators.
   */
  showAs?: ListActivitiesResponseShowAs | null | undefined;
  /**
   * Indicates whether the activity has been completed. A 'true' value signifies that the activity is finished, while 'false' means it is still pending. This boolean is crucial for tracking the progress of activities within the CRM.
   */
  done?: boolean | null | undefined;
  /**
   * The date and time when the activity is scheduled to start, formatted as an ISO 8601 string. This timestamp is essential for scheduling and chronological sorting of activities in the CRM system.
   */
  startDatetime?: string | null | undefined;
  /**
   * The end date and time of the activity, formatted as an ISO 8601 string. This property indicates when the activity is scheduled to conclude, providing a precise endpoint for time-based operations within the CRM.
   */
  endDatetime?: string | null | undefined;
  /**
   * The duration of the activity measured in minutes. This integer value helps in calculating the total time spent on the activity, useful for time tracking and reporting purposes.
   */
  durationMinutes?: number | null | undefined;
  /**
   * The date on which the activity is scheduled or occurred, formatted as an ISO 8601 date string. This property is essential for organizing and filtering activities based on specific dates within the CRM.
   */
  activityDate?: string | null | undefined;
  /**
   * The end date of the activity, formatted as an ISO 8601 date string. It specifies the final day of the activity, which is crucial for understanding the activity's timeline and scheduling.
   */
  endDate?: string | null | undefined;
  /**
   * A boolean value indicating whether the activity is recurrent. If true, the activity repeats according to a defined schedule, which is important for managing ongoing tasks and events in the CRM.
   */
  recurrent?: boolean | undefined;
  /**
   * The date and time when the reminder is scheduled to trigger. This property is formatted as an ISO 8601 string, providing precise scheduling information for CRM activities. It helps users keep track of important dates and times associated with their activities.
   */
  reminderDatetime?: string | null | undefined;
  /**
   * Indicates whether a reminder has been set for the activity. This boolean value helps determine if users have opted to receive notifications for this particular activity, aiding in personal time management and task prioritization.
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The web address for accessing the video conference associated with the activity. This URL is crucial for participants to join the meeting and is typically formatted as a standard web link.
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * A unique identifier for the video conference linked to the activity. This ID is used to distinguish between different video conferences and is essential for managing and referencing specific meetings within the CRM system.
   */
  videoConferenceId?: string | null | undefined;
  /**
   * An array containing custom fields associated with the activity. These fields allow for additional, user-defined data to be stored and retrieved, providing flexibility in how activities are documented and managed within the CRM.
   */
  customFields?: Array<ListActivitiesResponseCustomFields> | undefined;
  /**
   * A list of individuals or entities participating in the CRM activity. This optional array contains details about each attendee, such as names or roles, and is used to track involvement in the activity.
   */
  attendees?: Array<ListActivitiesResponseAttendees> | undefined;
  /**
   * An object containing custom mappings configured for the resource. This property includes any additional, user-defined fields or mappings that extend the standard data model, allowing for tailored data representation and integration within the CRM system.
   */
  customMappings?: ListActivitiesResponseCustomMappings | null | undefined;
  /**
   * The identifier of the user who last modified the activity record. This field helps track changes and maintain an audit trail within the CRM system. It is typically a user ID or username.
   */
  updatedBy?: string | null | undefined;
  /**
   * The identifier of the user who originally created the activity record. This information is crucial for understanding the origin of the data and maintaining accountability. It is usually represented as a user ID or username.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp indicating when the activity was last modified. This field is formatted as an ISO 8601 date-time string, providing precise information for synchronization and auditing purposes.
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp indicating when the activity was initially created. It is formatted as an ISO 8601 date-time string, which is essential for tracking the lifecycle of the activity within the CRM system.
   */
  createdAt?: string | null | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or structured modifications. This property is used when creating or updating resources, enabling flexibility and customization in handling CRM activities.
   */
  passThrough?: Array<ListActivitiesResponsePassThrough> | undefined;
};

/**
 * The 'meta.cursors' object provides cursors for navigating through paginated API results. It includes pointers to the previous and next pages, facilitating seamless data traversal and efficient data retrieval in applications that require browsing through multiple pages of CRM activities.
 */
export type ListActivitiesResponseCursors = {
  /**
   * This string cursor allows navigation to the previous page of results in a paginated API response. It is essential for implementing backward navigation in applications that need to traverse CRM activity data across multiple pages, ensuring a smooth user experience.
   */
  previous?: string | null | undefined;
  /**
   * The 'current' cursor provides a reference point for the current page of results in the API response. It is a string that can be used to retrieve the same set of results in subsequent API calls, ensuring consistency in data retrieval.
   */
  current?: string | null | undefined;
  /**
   * The 'next' cursor is a string that indicates the reference point for the next page of results in the API response. It is used for pagination, allowing developers to efficiently navigate through large sets of data by fetching the subsequent page of results.
   */
  next?: string | null | undefined;
};

/**
 * The 'meta' object contains metadata about the response, providing additional context and information about the data returned. This can include pagination details, cursors, and other relevant metadata that aids in understanding the structure and limits of the response data.
 */
export type ListActivitiesResponseMeta = {
  /**
   * This integer indicates the number of activity items included in the current page of the response. It helps developers understand the volume of data retrieved in a single API call, which is particularly useful for managing large datasets and implementing pagination logic.
   */
  itemsOnPage?: number | undefined;
  /**
   * The 'meta.cursors' object provides cursors for navigating through paginated API results. It includes pointers to the previous and next pages, facilitating seamless data traversal and efficient data retrieval in applications that require browsing through multiple pages of CRM activities.
   */
  cursors?: ListActivitiesResponseCursors | undefined;
};

/**
 * The 'links' object contains URLs that facilitate navigation between different pages of results in the API response. It includes links to the current, previous, and next pages, helping developers manage data pagination effectively.
 */
export type ListActivitiesResponseLinks = {
  /**
   * The 'previous' link is a URL string that directs to the previous page of results in the API response. It is part of the pagination mechanism, enabling backward navigation through the dataset.
   */
  previous?: string | null | undefined;
  /**
   * The 'current' link is a URL string that points to the current page of results in the API response. It ensures that developers can easily access the current dataset being viewed or processed.
   */
  current?: string | undefined;
  /**
   * This property contains the URL link to the next page of results in the paginated response. It is a string formatted as a URL, and is used to retrieve subsequent pages of CRM activities when navigating through large datasets. This link is particularly useful for implementing pagination in applications that consume the API, allowing for efficient data retrieval without overloading the system with too much data at once.
   */
  next?: string | null | undefined;
};

/**
 * Activities
 */
export type ListActivitiesResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value helps determine if the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is essential for error handling and debugging in client applications.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable status message corresponding to the status code, such as 'OK' for a successful request or 'Not Found' for a missing resource. It aids in understanding the outcome of the API call at a glance.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the CRM activities are retrieved. This string uniquely identifies the third-party service integrated with the Apideck platform, facilitating multi-service management and data aggregation.
   */
  service: string;
  /**
   * The name of the unified API resource accessed by this operation. This string indicates the specific CRM resource type, such as 'activities', that the API call interacts with, ensuring developers understand the context of the data returned.
   */
  resource: string;
  /**
   * The specific operation performed by the API request, represented as a string. This field indicates the action taken, such as 'fetch' or 'retrieve', helping developers track the type of request made and its purpose within the CRM system.
   */
  operation: string;
  /**
   * An array containing all the CRM activities retrieved by the API call. Each element in the array represents a single activity with its associated details, facilitating comprehensive data management and integration within CRM systems.
   */
  data: Array<ListActivitiesResponseData>;
  /**
   * The 'meta' object contains metadata about the response, providing additional context and information about the data returned. This can include pagination details, cursors, and other relevant metadata that aids in understanding the structure and limits of the response data.
   */
  meta?: ListActivitiesResponseMeta | undefined;
  /**
   * The 'links' object contains URLs that facilitate navigation between different pages of results in the API response. It includes links to the current, previous, and next pages, helping developers manage data pagination effectively.
   */
  links?: ListActivitiesResponseLinks | undefined;
};

/** @internal */
export const ListActivitiesResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseType
> = z.nativeEnum(ListActivitiesResponseType);

/** @internal */
export const ListActivitiesResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseType
> = ListActivitiesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseType$ {
  /** @deprecated use `ListActivitiesResponseType$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseType$inboundSchema;
  /** @deprecated use `ListActivitiesResponseType$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseType$outboundSchema;
}

/** @internal */
export const ListActivitiesResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseDataType
> = z.nativeEnum(ListActivitiesResponseDataType);

/** @internal */
export const ListActivitiesResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseDataType
> = ListActivitiesResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseDataType$ {
  /** @deprecated use `ListActivitiesResponseDataType$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseDataType$inboundSchema;
  /** @deprecated use `ListActivitiesResponseDataType$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseDataType$outboundSchema;
}

/** @internal */
export const ListActivitiesResponseLocationAddress$inboundSchema: z.ZodType<
  ListActivitiesResponseLocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListActivitiesResponseDataType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ListActivitiesResponseLocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ListActivitiesResponseLocationAddress$outboundSchema: z.ZodType<
  ListActivitiesResponseLocationAddress$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseLocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListActivitiesResponseDataType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseLocationAddress$ {
  /** @deprecated use `ListActivitiesResponseLocationAddress$inboundSchema` instead. */
  export const inboundSchema =
    ListActivitiesResponseLocationAddress$inboundSchema;
  /** @deprecated use `ListActivitiesResponseLocationAddress$outboundSchema` instead. */
  export const outboundSchema =
    ListActivitiesResponseLocationAddress$outboundSchema;
  /** @deprecated use `ListActivitiesResponseLocationAddress$Outbound` instead. */
  export type Outbound = ListActivitiesResponseLocationAddress$Outbound;
}

export function listActivitiesResponseLocationAddressToJSON(
  listActivitiesResponseLocationAddress: ListActivitiesResponseLocationAddress,
): string {
  return JSON.stringify(
    ListActivitiesResponseLocationAddress$outboundSchema.parse(
      listActivitiesResponseLocationAddress,
    ),
  );
}

export function listActivitiesResponseLocationAddressFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseLocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListActivitiesResponseLocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseLocationAddress' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseShowAs$inboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseShowAs
> = z.nativeEnum(ListActivitiesResponseShowAs);

/** @internal */
export const ListActivitiesResponseShowAs$outboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseShowAs
> = ListActivitiesResponseShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseShowAs$ {
  /** @deprecated use `ListActivitiesResponseShowAs$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseShowAs$inboundSchema;
  /** @deprecated use `ListActivitiesResponseShowAs$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseShowAs$outboundSchema;
}

/** @internal */
export const ListActivitiesResponseValue6$inboundSchema: z.ZodType<
  ListActivitiesResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListActivitiesResponseValue6$Outbound = {};

/** @internal */
export const ListActivitiesResponseValue6$outboundSchema: z.ZodType<
  ListActivitiesResponseValue6$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseValue6$ {
  /** @deprecated use `ListActivitiesResponseValue6$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseValue6$inboundSchema;
  /** @deprecated use `ListActivitiesResponseValue6$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseValue6$outboundSchema;
  /** @deprecated use `ListActivitiesResponseValue6$Outbound` instead. */
  export type Outbound = ListActivitiesResponseValue6$Outbound;
}

export function listActivitiesResponseValue6ToJSON(
  listActivitiesResponseValue6: ListActivitiesResponseValue6,
): string {
  return JSON.stringify(
    ListActivitiesResponseValue6$outboundSchema.parse(
      listActivitiesResponseValue6,
    ),
  );
}

export function listActivitiesResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseValue6' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseValue4$inboundSchema: z.ZodType<
  ListActivitiesResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListActivitiesResponseValue4$Outbound = {};

/** @internal */
export const ListActivitiesResponseValue4$outboundSchema: z.ZodType<
  ListActivitiesResponseValue4$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseValue4$ {
  /** @deprecated use `ListActivitiesResponseValue4$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseValue4$inboundSchema;
  /** @deprecated use `ListActivitiesResponseValue4$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseValue4$outboundSchema;
  /** @deprecated use `ListActivitiesResponseValue4$Outbound` instead. */
  export type Outbound = ListActivitiesResponseValue4$Outbound;
}

export function listActivitiesResponseValue4ToJSON(
  listActivitiesResponseValue4: ListActivitiesResponseValue4,
): string {
  return JSON.stringify(
    ListActivitiesResponseValue4$outboundSchema.parse(
      listActivitiesResponseValue4,
    ),
  );
}

export function listActivitiesResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseValue4' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseValue$inboundSchema: z.ZodType<
  ListActivitiesResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListActivitiesResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListActivitiesResponseValue6$inboundSchema)),
]);

/** @internal */
export type ListActivitiesResponseValue$Outbound =
  | ListActivitiesResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListActivitiesResponseValue6$Outbound>;

/** @internal */
export const ListActivitiesResponseValue$outboundSchema: z.ZodType<
  ListActivitiesResponseValue$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseValue
> = z.union([
  z.lazy(() => ListActivitiesResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListActivitiesResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseValue$ {
  /** @deprecated use `ListActivitiesResponseValue$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseValue$inboundSchema;
  /** @deprecated use `ListActivitiesResponseValue$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseValue$outboundSchema;
  /** @deprecated use `ListActivitiesResponseValue$Outbound` instead. */
  export type Outbound = ListActivitiesResponseValue$Outbound;
}

export function listActivitiesResponseValueToJSON(
  listActivitiesResponseValue: ListActivitiesResponseValue,
): string {
  return JSON.stringify(
    ListActivitiesResponseValue$outboundSchema.parse(
      listActivitiesResponseValue,
    ),
  );
}

export function listActivitiesResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseValue' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseCustomFields$inboundSchema: z.ZodType<
  ListActivitiesResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListActivitiesResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListActivitiesResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ListActivitiesResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ListActivitiesResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListActivitiesResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ListActivitiesResponseCustomFields$outboundSchema: z.ZodType<
  ListActivitiesResponseCustomFields$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListActivitiesResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListActivitiesResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseCustomFields$ {
  /** @deprecated use `ListActivitiesResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseCustomFields$inboundSchema;
  /** @deprecated use `ListActivitiesResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    ListActivitiesResponseCustomFields$outboundSchema;
  /** @deprecated use `ListActivitiesResponseCustomFields$Outbound` instead. */
  export type Outbound = ListActivitiesResponseCustomFields$Outbound;
}

export function listActivitiesResponseCustomFieldsToJSON(
  listActivitiesResponseCustomFields: ListActivitiesResponseCustomFields,
): string {
  return JSON.stringify(
    ListActivitiesResponseCustomFields$outboundSchema.parse(
      listActivitiesResponseCustomFields,
    ),
  );
}

export function listActivitiesResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListActivitiesResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseStatus
> = z.nativeEnum(ListActivitiesResponseStatus);

/** @internal */
export const ListActivitiesResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListActivitiesResponseStatus
> = ListActivitiesResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseStatus$ {
  /** @deprecated use `ListActivitiesResponseStatus$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseStatus$inboundSchema;
  /** @deprecated use `ListActivitiesResponseStatus$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseStatus$outboundSchema;
}

/** @internal */
export const ListActivitiesResponseAttendees$inboundSchema: z.ZodType<
  ListActivitiesResponseAttendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ListActivitiesResponseStatus$inboundSchema).optional(),
  user_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
    "user_id": "userId",
    "contact_id": "contactId",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
  });
});

/** @internal */
export type ListActivitiesResponseAttendees$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
  user_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const ListActivitiesResponseAttendees$outboundSchema: z.ZodType<
  ListActivitiesResponseAttendees$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseAttendees
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ListActivitiesResponseStatus$outboundSchema).optional(),
  userId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
    userId: "user_id",
    contactId: "contact_id",
    updatedAt: "updated_at",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseAttendees$ {
  /** @deprecated use `ListActivitiesResponseAttendees$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseAttendees$inboundSchema;
  /** @deprecated use `ListActivitiesResponseAttendees$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseAttendees$outboundSchema;
  /** @deprecated use `ListActivitiesResponseAttendees$Outbound` instead. */
  export type Outbound = ListActivitiesResponseAttendees$Outbound;
}

export function listActivitiesResponseAttendeesToJSON(
  listActivitiesResponseAttendees: ListActivitiesResponseAttendees,
): string {
  return JSON.stringify(
    ListActivitiesResponseAttendees$outboundSchema.parse(
      listActivitiesResponseAttendees,
    ),
  );
}

export function listActivitiesResponseAttendeesFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseAttendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseAttendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseAttendees' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseCustomMappings$inboundSchema: z.ZodType<
  ListActivitiesResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListActivitiesResponseCustomMappings$Outbound = {};

/** @internal */
export const ListActivitiesResponseCustomMappings$outboundSchema: z.ZodType<
  ListActivitiesResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseCustomMappings$ {
  /** @deprecated use `ListActivitiesResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema =
    ListActivitiesResponseCustomMappings$inboundSchema;
  /** @deprecated use `ListActivitiesResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    ListActivitiesResponseCustomMappings$outboundSchema;
  /** @deprecated use `ListActivitiesResponseCustomMappings$Outbound` instead. */
  export type Outbound = ListActivitiesResponseCustomMappings$Outbound;
}

export function listActivitiesResponseCustomMappingsToJSON(
  listActivitiesResponseCustomMappings: ListActivitiesResponseCustomMappings,
): string {
  return JSON.stringify(
    ListActivitiesResponseCustomMappings$outboundSchema.parse(
      listActivitiesResponseCustomMappings,
    ),
  );
}

export function listActivitiesResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListActivitiesResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseExtendPaths$inboundSchema: z.ZodType<
  ListActivitiesResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListActivitiesResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListActivitiesResponseExtendPaths$outboundSchema: z.ZodType<
  ListActivitiesResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseExtendPaths$ {
  /** @deprecated use `ListActivitiesResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListActivitiesResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema =
    ListActivitiesResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListActivitiesResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListActivitiesResponseExtendPaths$Outbound;
}

export function listActivitiesResponseExtendPathsToJSON(
  listActivitiesResponseExtendPaths: ListActivitiesResponseExtendPaths,
): string {
  return JSON.stringify(
    ListActivitiesResponseExtendPaths$outboundSchema.parse(
      listActivitiesResponseExtendPaths,
    ),
  );
}

export function listActivitiesResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponsePassThrough$inboundSchema: z.ZodType<
  ListActivitiesResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListActivitiesResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListActivitiesResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListActivitiesResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListActivitiesResponsePassThrough$outboundSchema: z.ZodType<
  ListActivitiesResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListActivitiesResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponsePassThrough$ {
  /** @deprecated use `ListActivitiesResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponsePassThrough$inboundSchema;
  /** @deprecated use `ListActivitiesResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema =
    ListActivitiesResponsePassThrough$outboundSchema;
  /** @deprecated use `ListActivitiesResponsePassThrough$Outbound` instead. */
  export type Outbound = ListActivitiesResponsePassThrough$Outbound;
}

export function listActivitiesResponsePassThroughToJSON(
  listActivitiesResponsePassThrough: ListActivitiesResponsePassThrough,
): string {
  return JSON.stringify(
    ListActivitiesResponsePassThrough$outboundSchema.parse(
      listActivitiesResponsePassThrough,
    ),
  );
}

export function listActivitiesResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseData$inboundSchema: z.ZodType<
  ListActivitiesResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  downstream_id: z.nullable(z.string()).optional(),
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(ListActivitiesResponseType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() =>
    ListActivitiesResponseLocationAddress$inboundSchema
  ).optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(ListActivitiesResponseShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  duration_minutes: z.nullable(z.number().int()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => ListActivitiesResponseCustomFields$inboundSchema),
  ).optional(),
  attendees: z.array(
    z.lazy(() => ListActivitiesResponseAttendees$inboundSchema),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ListActivitiesResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => ListActivitiesResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "downstream_id": "downstreamId",
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "duration_minutes": "durationMinutes",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ListActivitiesResponseData$Outbound = {
  id?: string | undefined;
  downstream_id?: string | null | undefined;
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: ListActivitiesResponseLocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  duration_minutes?: number | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?:
    | Array<ListActivitiesResponseCustomFields$Outbound>
    | undefined;
  attendees?: Array<ListActivitiesResponseAttendees$Outbound> | undefined;
  custom_mappings?:
    | ListActivitiesResponseCustomMappings$Outbound
    | null
    | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ListActivitiesResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const ListActivitiesResponseData$outboundSchema: z.ZodType<
  ListActivitiesResponseData$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseData
> = z.object({
  id: z.string().optional(),
  downstreamId: z.nullable(z.string()).optional(),
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(ListActivitiesResponseType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() =>
    ListActivitiesResponseLocationAddress$outboundSchema
  ).optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(ListActivitiesResponseShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  durationMinutes: z.nullable(z.number().int()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => ListActivitiesResponseCustomFields$outboundSchema),
  ).optional(),
  attendees: z.array(
    z.lazy(() => ListActivitiesResponseAttendees$outboundSchema),
  ).optional(),
  customMappings: z.nullable(
    z.lazy(() => ListActivitiesResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => ListActivitiesResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    downstreamId: "downstream_id",
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    durationMinutes: "duration_minutes",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseData$ {
  /** @deprecated use `ListActivitiesResponseData$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseData$inboundSchema;
  /** @deprecated use `ListActivitiesResponseData$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseData$outboundSchema;
  /** @deprecated use `ListActivitiesResponseData$Outbound` instead. */
  export type Outbound = ListActivitiesResponseData$Outbound;
}

export function listActivitiesResponseDataToJSON(
  listActivitiesResponseData: ListActivitiesResponseData,
): string {
  return JSON.stringify(
    ListActivitiesResponseData$outboundSchema.parse(listActivitiesResponseData),
  );
}

export function listActivitiesResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseData' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseCursors$inboundSchema: z.ZodType<
  ListActivitiesResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListActivitiesResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListActivitiesResponseCursors$outboundSchema: z.ZodType<
  ListActivitiesResponseCursors$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseCursors$ {
  /** @deprecated use `ListActivitiesResponseCursors$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseCursors$inboundSchema;
  /** @deprecated use `ListActivitiesResponseCursors$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseCursors$outboundSchema;
  /** @deprecated use `ListActivitiesResponseCursors$Outbound` instead. */
  export type Outbound = ListActivitiesResponseCursors$Outbound;
}

export function listActivitiesResponseCursorsToJSON(
  listActivitiesResponseCursors: ListActivitiesResponseCursors,
): string {
  return JSON.stringify(
    ListActivitiesResponseCursors$outboundSchema.parse(
      listActivitiesResponseCursors,
    ),
  );
}

export function listActivitiesResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseCursors' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseMeta$inboundSchema: z.ZodType<
  ListActivitiesResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ListActivitiesResponseCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ListActivitiesResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ListActivitiesResponseCursors$Outbound | undefined;
};

/** @internal */
export const ListActivitiesResponseMeta$outboundSchema: z.ZodType<
  ListActivitiesResponseMeta$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ListActivitiesResponseCursors$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseMeta$ {
  /** @deprecated use `ListActivitiesResponseMeta$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseMeta$inboundSchema;
  /** @deprecated use `ListActivitiesResponseMeta$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseMeta$outboundSchema;
  /** @deprecated use `ListActivitiesResponseMeta$Outbound` instead. */
  export type Outbound = ListActivitiesResponseMeta$Outbound;
}

export function listActivitiesResponseMetaToJSON(
  listActivitiesResponseMeta: ListActivitiesResponseMeta,
): string {
  return JSON.stringify(
    ListActivitiesResponseMeta$outboundSchema.parse(listActivitiesResponseMeta),
  );
}

export function listActivitiesResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseMeta' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponseLinks$inboundSchema: z.ZodType<
  ListActivitiesResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListActivitiesResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListActivitiesResponseLinks$outboundSchema: z.ZodType<
  ListActivitiesResponseLinks$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponseLinks$ {
  /** @deprecated use `ListActivitiesResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponseLinks$inboundSchema;
  /** @deprecated use `ListActivitiesResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponseLinks$outboundSchema;
  /** @deprecated use `ListActivitiesResponseLinks$Outbound` instead. */
  export type Outbound = ListActivitiesResponseLinks$Outbound;
}

export function listActivitiesResponseLinksToJSON(
  listActivitiesResponseLinks: ListActivitiesResponseLinks,
): string {
  return JSON.stringify(
    ListActivitiesResponseLinks$outboundSchema.parse(
      listActivitiesResponseLinks,
    ),
  );
}

export function listActivitiesResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponseLinks' from JSON`,
  );
}

/** @internal */
export const ListActivitiesResponse$inboundSchema: z.ZodType<
  ListActivitiesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListActivitiesResponseData$inboundSchema)),
  meta: z.lazy(() => ListActivitiesResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => ListActivitiesResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListActivitiesResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ListActivitiesResponseData$Outbound>;
  meta?: ListActivitiesResponseMeta$Outbound | undefined;
  links?: ListActivitiesResponseLinks$Outbound | undefined;
};

/** @internal */
export const ListActivitiesResponse$outboundSchema: z.ZodType<
  ListActivitiesResponse$Outbound,
  z.ZodTypeDef,
  ListActivitiesResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListActivitiesResponseData$outboundSchema)),
  meta: z.lazy(() => ListActivitiesResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => ListActivitiesResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListActivitiesResponse$ {
  /** @deprecated use `ListActivitiesResponse$inboundSchema` instead. */
  export const inboundSchema = ListActivitiesResponse$inboundSchema;
  /** @deprecated use `ListActivitiesResponse$outboundSchema` instead. */
  export const outboundSchema = ListActivitiesResponse$outboundSchema;
  /** @deprecated use `ListActivitiesResponse$Outbound` instead. */
  export type Outbound = ListActivitiesResponse$Outbound;
}

export function listActivitiesResponseToJSON(
  listActivitiesResponse: ListActivitiesResponse,
): string {
  return JSON.stringify(
    ListActivitiesResponse$outboundSchema.parse(listActivitiesResponse),
  );
}

export function listActivitiesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListActivitiesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListActivitiesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListActivitiesResponse' from JSON`,
  );
}
