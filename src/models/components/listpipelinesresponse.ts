/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The currency associated with the pipeline, represented as a three-letter ISO 4217 code. This indicates the currency context for any monetary values related to the pipeline, ensuring accurate financial reporting and analysis.
 */
export const ListPipelinesResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * The currency associated with the pipeline, represented as a three-letter ISO 4217 code. This indicates the currency context for any monetary values related to the pipeline, ensuring accurate financial reporting and analysis.
 */
export type ListPipelinesResponseCurrency = ClosedEnum<
  typeof ListPipelinesResponseCurrency
>;

export type Stages = {
  /**
   * The unique identifier for each stage within the pipeline. This string value is essential for referencing specific stages when managing or analyzing pipeline data, ensuring precise tracking and updates.
   */
  id?: string | null | undefined;
  /**
   * The name of the pipeline stage, representing a specific phase in the sales process. This is a string value that helps identify and differentiate stages within a pipeline, aiding in the organization and tracking of sales opportunities.
   */
  name?: string | null | undefined;
  /**
   * The value associated with the pipeline stage, typically representing a monetary amount or other quantifiable metric. This string value is used to assess the potential worth of opportunities at this stage, providing insights into the sales pipeline's financial aspects.
   */
  value?: string | null | undefined;
  /**
   * An integer representing the likelihood of successfully closing an opportunity at this pipeline stage, expressed as a percentage between 0 and 100. This probability helps prioritize efforts and forecast sales outcomes based on historical data and current trends.
   */
  winProbability?: number | null | undefined;
  /**
   * An integer indicating the sequence in which the pipeline stage appears within the user interface. This order is crucial for visualizing the sales process flow, ensuring stages are presented logically and intuitively to users.
   */
  displayOrder?: number | null | undefined;
};

export type ListPipelinesResponseExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the pipeline data where the modification value should be applied. This path is crucial for accurately targeting and updating specific data fields within the CRM pipelines.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath within the pipeline data. This can be of any data type, depending on the context of the modification, and is used to update or extend the existing data structure.
   */
  value?: any | undefined;
};

export type ListPipelinesResponsePassThrough = {
  /**
   * A mandatory string identifier for the service that the pass_through data should be applied to. This ensures that the custom data is directed to the correct service within the CRM ecosystem.
   */
  serviceId: string;
  /**
   * An optional string identifier for a specific workflow operation that the pass_through data should target. This is particularly useful for complex operations involving multiple downstream requests, ensuring precise data application.
   */
  operationId?: string | undefined;
  /**
   * An object that allows for the direct extension of properties, enabling the inclusion of additional, custom attributes as needed. This flexibility supports tailored data structures for specific CRM service requirements.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array containing objects that define structured data modifications using specified paths. Each object in the array represents a modification operation that can be applied to the pipeline data, allowing for dynamic data transformation and extension.
   */
  extendPaths?: Array<ListPipelinesResponseExtendPaths> | undefined;
};

export type ListPipelinesResponseData = {
  /**
   * The unique identifier for each pipeline within the CRM. This string is used to distinguish between different pipelines and is essential for operations that require specific pipeline references, such as updates or deletions.
   */
  id?: string | undefined;
  /**
   * The name assigned to the pipeline, which is used to identify it within the CRM system. This string is required and serves as a key reference point for users when managing and analyzing sales processes.
   */
  name: string;
  /**
   * The currency associated with the pipeline, represented as a three-letter ISO 4217 code. This indicates the currency context for any monetary values related to the pipeline, ensuring accurate financial reporting and analysis.
   */
  currency?: ListPipelinesResponseCurrency | null | undefined;
  /**
   * A boolean value indicating whether the pipeline is archived. If true, the pipeline is no longer active and is stored for historical reference, helping users manage current and past sales processes effectively.
   */
  archived?: boolean | undefined;
  /**
   * Indicates whether the pipeline is currently active. This boolean value helps determine if the pipeline is operational and should be considered in sales process analyses. It is useful for filtering pipelines based on their active status.
   */
  active?: boolean | undefined;
  /**
   * Specifies the order in which the pipeline appears in the user interface. This integer value is used to organize pipelines visually, ensuring that they are displayed in a logical sequence according to business priorities or workflow stages.
   */
  displayOrder?: number | null | undefined;
  /**
   * Indicates if the pipeline has win probability calculations enabled. This boolean value is crucial for sales forecasting, as it allows users to assess the likelihood of closing deals within this pipeline.
   */
  winProbabilityEnabled?: boolean | undefined;
  /**
   * An array containing the stages of the pipeline. Each element in the array represents a distinct stage within the pipeline, detailing the progression of sales opportunities from initiation to closure.
   */
  stages?: Array<Stages> | undefined;
  /**
   * A timestamp indicating when the pipeline data was last modified, formatted as an ISO 8601 string. This information is vital for tracking changes and ensuring data accuracy and currency within the CRM system.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The timestamp indicating when the pipeline was initially created in the CRM system. This is formatted as an ISO 8601 string, providing precise date and time details. It helps users track the age and history of the pipeline within the CRM.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array that holds custom data or modifications specific to the service, which can be included in requests when creating or updating resources. This allows for flexible data handling and integration with various CRM services.
   */
  passThrough?: Array<ListPipelinesResponsePassThrough> | undefined;
};

/**
 * An object containing cursors that facilitate navigation through paginated API results. This includes cursors for moving to previous, current, or next pages, enabling efficient data retrieval in large datasets.
 */
export type ListPipelinesResponseCursors = {
  /**
   * A string representing the cursor used to access the previous page of results. This is useful for navigating backward through paginated data sets in the API response.
   */
  previous?: string | null | undefined;
  /**
   * A string indicating the cursor for the current page of results. This helps in maintaining the current position within the paginated data set when making subsequent API calls.
   */
  current?: string | null | undefined;
  /**
   * A string that serves as the cursor for the next page of results. This allows forward navigation through the paginated data, facilitating seamless data access in the API response.
   */
  next?: string | null | undefined;
};

/**
 * An object containing metadata about the response, such as pagination details and other relevant information. This metadata helps in understanding the context of the data returned and managing subsequent API requests efficiently.
 */
export type ListPipelinesResponseMeta = {
  /**
   * The number of pipeline items included in the current page of the response data. This integer value aids in understanding the volume of data retrieved and is useful for implementing pagination logic in client applications.
   */
  itemsOnPage?: number | undefined;
  /**
   * An object containing cursors that facilitate navigation through paginated API results. This includes cursors for moving to previous, current, or next pages, enabling efficient data retrieval in large datasets.
   */
  cursors?: ListPipelinesResponseCursors | undefined;
};

/**
 * An object containing URLs that provide direct links to navigate between pages of results. These links are part of the pagination mechanism, ensuring easy access to previous or next pages in the API response.
 */
export type ListPipelinesResponseLinks = {
  /**
   * A URL string that provides a direct link to the previous page of results in the paginated response. This is useful for navigating backward through the list of CRM pipelines when multiple pages of data are available. If there is no previous page, this property may be null or omitted.
   */
  previous?: string | null | undefined;
  /**
   * A URL string representing the current page of results in the paginated response. This link is useful for refreshing or reloading the current set of CRM pipeline data. It ensures that developers can easily access the current view without recalculating the request parameters.
   */
  current?: string | undefined;
  /**
   * A URL string that provides a direct link to the next page of results in the paginated response. This is essential for navigating forward through the list of CRM pipelines when more data is available beyond the current page. If there is no next page, this property may be null or omitted.
   */
  next?: string | null | undefined;
};

/**
 * Pipelines
 */
export type ListPipelinesResponse = {
  /**
   * The HTTP response status code indicating the result of the GET request. This integer value helps determine if the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is essential for error handling and debugging.
   */
  statusCode: number;
  /**
   * A string representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for an unsuccessful one. This provides a human-readable status that complements the status_code, aiding in quick understanding of the response outcome.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the CRM pipelines data is retrieved. This string uniquely identifies the service within the Apideck ecosystem, ensuring that the data source is clear and traceable.
   */
  service: string;
  /**
   * The name of the Unified API resource, specifically indicating the type of data being accessed, such as 'pipelines'. This string helps developers understand the context of the data returned and aligns with the resource structure of the API.
   */
  resource: string;
  /**
   * The specific operation performed by the API, in this case, 'pipelinesAll', which signifies the retrieval of all CRM pipelines. This string helps in identifying the action taken and is useful for logging and tracking API usage.
   */
  operation: string;
  /**
   * An array containing all the pipeline objects retrieved from the CRM. Each object in the array represents a distinct pipeline with its own set of attributes, such as ID, name, currency, and archived status. This array is the main component of the response, providing a comprehensive view of all pipelines available in the CRM.
   */
  data: Array<ListPipelinesResponseData>;
  /**
   * An object containing metadata about the response, such as pagination details and other relevant information. This metadata helps in understanding the context of the data returned and managing subsequent API requests efficiently.
   */
  meta?: ListPipelinesResponseMeta | undefined;
  /**
   * An object containing URLs that provide direct links to navigate between pages of results. These links are part of the pagination mechanism, ensuring easy access to previous or next pages in the API response.
   */
  links?: ListPipelinesResponseLinks | undefined;
};

/** @internal */
export const ListPipelinesResponseCurrency$inboundSchema: z.ZodNativeEnum<
  typeof ListPipelinesResponseCurrency
> = z.nativeEnum(ListPipelinesResponseCurrency);

/** @internal */
export const ListPipelinesResponseCurrency$outboundSchema: z.ZodNativeEnum<
  typeof ListPipelinesResponseCurrency
> = ListPipelinesResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseCurrency$ {
  /** @deprecated use `ListPipelinesResponseCurrency$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseCurrency$inboundSchema;
  /** @deprecated use `ListPipelinesResponseCurrency$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseCurrency$outboundSchema;
}

/** @internal */
export const Stages$inboundSchema: z.ZodType<Stages, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
    win_probability: z.nullable(z.number().int()).optional(),
    display_order: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "win_probability": "winProbability",
      "display_order": "displayOrder",
    });
  });

/** @internal */
export type Stages$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  value?: string | null | undefined;
  win_probability?: number | null | undefined;
  display_order?: number | null | undefined;
};

/** @internal */
export const Stages$outboundSchema: z.ZodType<
  Stages$Outbound,
  z.ZodTypeDef,
  Stages
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  winProbability: z.nullable(z.number().int()).optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    winProbability: "win_probability",
    displayOrder: "display_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stages$ {
  /** @deprecated use `Stages$inboundSchema` instead. */
  export const inboundSchema = Stages$inboundSchema;
  /** @deprecated use `Stages$outboundSchema` instead. */
  export const outboundSchema = Stages$outboundSchema;
  /** @deprecated use `Stages$Outbound` instead. */
  export type Outbound = Stages$Outbound;
}

export function stagesToJSON(stages: Stages): string {
  return JSON.stringify(Stages$outboundSchema.parse(stages));
}

export function stagesFromJSON(
  jsonString: string,
): SafeParseResult<Stages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stages' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponseExtendPaths$inboundSchema: z.ZodType<
  ListPipelinesResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListPipelinesResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListPipelinesResponseExtendPaths$outboundSchema: z.ZodType<
  ListPipelinesResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseExtendPaths$ {
  /** @deprecated use `ListPipelinesResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListPipelinesResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListPipelinesResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListPipelinesResponseExtendPaths$Outbound;
}

export function listPipelinesResponseExtendPathsToJSON(
  listPipelinesResponseExtendPaths: ListPipelinesResponseExtendPaths,
): string {
  return JSON.stringify(
    ListPipelinesResponseExtendPaths$outboundSchema.parse(
      listPipelinesResponseExtendPaths,
    ),
  );
}

export function listPipelinesResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponsePassThrough$inboundSchema: z.ZodType<
  ListPipelinesResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListPipelinesResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListPipelinesResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListPipelinesResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListPipelinesResponsePassThrough$outboundSchema: z.ZodType<
  ListPipelinesResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListPipelinesResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponsePassThrough$ {
  /** @deprecated use `ListPipelinesResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponsePassThrough$inboundSchema;
  /** @deprecated use `ListPipelinesResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponsePassThrough$outboundSchema;
  /** @deprecated use `ListPipelinesResponsePassThrough$Outbound` instead. */
  export type Outbound = ListPipelinesResponsePassThrough$Outbound;
}

export function listPipelinesResponsePassThroughToJSON(
  listPipelinesResponsePassThrough: ListPipelinesResponsePassThrough,
): string {
  return JSON.stringify(
    ListPipelinesResponsePassThrough$outboundSchema.parse(
      listPipelinesResponsePassThrough,
    ),
  );
}

export function listPipelinesResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponseData$inboundSchema: z.ZodType<
  ListPipelinesResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(ListPipelinesResponseCurrency$inboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  display_order: z.nullable(z.number().int()).optional(),
  win_probability_enabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => Stages$inboundSchema)).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => ListPipelinesResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_order": "displayOrder",
    "win_probability_enabled": "winProbabilityEnabled",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ListPipelinesResponseData$Outbound = {
  id?: string | undefined;
  name: string;
  currency?: string | null | undefined;
  archived?: boolean | undefined;
  active?: boolean | undefined;
  display_order?: number | null | undefined;
  win_probability_enabled?: boolean | undefined;
  stages?: Array<Stages$Outbound> | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ListPipelinesResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const ListPipelinesResponseData$outboundSchema: z.ZodType<
  ListPipelinesResponseData$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponseData
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(ListPipelinesResponseCurrency$outboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
  winProbabilityEnabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => Stages$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(
    z.lazy(() => ListPipelinesResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    displayOrder: "display_order",
    winProbabilityEnabled: "win_probability_enabled",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseData$ {
  /** @deprecated use `ListPipelinesResponseData$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseData$inboundSchema;
  /** @deprecated use `ListPipelinesResponseData$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseData$outboundSchema;
  /** @deprecated use `ListPipelinesResponseData$Outbound` instead. */
  export type Outbound = ListPipelinesResponseData$Outbound;
}

export function listPipelinesResponseDataToJSON(
  listPipelinesResponseData: ListPipelinesResponseData,
): string {
  return JSON.stringify(
    ListPipelinesResponseData$outboundSchema.parse(listPipelinesResponseData),
  );
}

export function listPipelinesResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponseData' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponseCursors$inboundSchema: z.ZodType<
  ListPipelinesResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListPipelinesResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListPipelinesResponseCursors$outboundSchema: z.ZodType<
  ListPipelinesResponseCursors$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseCursors$ {
  /** @deprecated use `ListPipelinesResponseCursors$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseCursors$inboundSchema;
  /** @deprecated use `ListPipelinesResponseCursors$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseCursors$outboundSchema;
  /** @deprecated use `ListPipelinesResponseCursors$Outbound` instead. */
  export type Outbound = ListPipelinesResponseCursors$Outbound;
}

export function listPipelinesResponseCursorsToJSON(
  listPipelinesResponseCursors: ListPipelinesResponseCursors,
): string {
  return JSON.stringify(
    ListPipelinesResponseCursors$outboundSchema.parse(
      listPipelinesResponseCursors,
    ),
  );
}

export function listPipelinesResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponseCursors' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponseMeta$inboundSchema: z.ZodType<
  ListPipelinesResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ListPipelinesResponseCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ListPipelinesResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ListPipelinesResponseCursors$Outbound | undefined;
};

/** @internal */
export const ListPipelinesResponseMeta$outboundSchema: z.ZodType<
  ListPipelinesResponseMeta$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ListPipelinesResponseCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseMeta$ {
  /** @deprecated use `ListPipelinesResponseMeta$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseMeta$inboundSchema;
  /** @deprecated use `ListPipelinesResponseMeta$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseMeta$outboundSchema;
  /** @deprecated use `ListPipelinesResponseMeta$Outbound` instead. */
  export type Outbound = ListPipelinesResponseMeta$Outbound;
}

export function listPipelinesResponseMetaToJSON(
  listPipelinesResponseMeta: ListPipelinesResponseMeta,
): string {
  return JSON.stringify(
    ListPipelinesResponseMeta$outboundSchema.parse(listPipelinesResponseMeta),
  );
}

export function listPipelinesResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponseMeta' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponseLinks$inboundSchema: z.ZodType<
  ListPipelinesResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListPipelinesResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListPipelinesResponseLinks$outboundSchema: z.ZodType<
  ListPipelinesResponseLinks$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseLinks$ {
  /** @deprecated use `ListPipelinesResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseLinks$inboundSchema;
  /** @deprecated use `ListPipelinesResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseLinks$outboundSchema;
  /** @deprecated use `ListPipelinesResponseLinks$Outbound` instead. */
  export type Outbound = ListPipelinesResponseLinks$Outbound;
}

export function listPipelinesResponseLinksToJSON(
  listPipelinesResponseLinks: ListPipelinesResponseLinks,
): string {
  return JSON.stringify(
    ListPipelinesResponseLinks$outboundSchema.parse(listPipelinesResponseLinks),
  );
}

export function listPipelinesResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponseLinks' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponse$inboundSchema: z.ZodType<
  ListPipelinesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListPipelinesResponseData$inboundSchema)),
  meta: z.lazy(() => ListPipelinesResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => ListPipelinesResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListPipelinesResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ListPipelinesResponseData$Outbound>;
  meta?: ListPipelinesResponseMeta$Outbound | undefined;
  links?: ListPipelinesResponseLinks$Outbound | undefined;
};

/** @internal */
export const ListPipelinesResponse$outboundSchema: z.ZodType<
  ListPipelinesResponse$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListPipelinesResponseData$outboundSchema)),
  meta: z.lazy(() => ListPipelinesResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => ListPipelinesResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponse$ {
  /** @deprecated use `ListPipelinesResponse$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponse$inboundSchema;
  /** @deprecated use `ListPipelinesResponse$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponse$outboundSchema;
  /** @deprecated use `ListPipelinesResponse$Outbound` instead. */
  export type Outbound = ListPipelinesResponse$Outbound;
}

export function listPipelinesResponseToJSON(
  listPipelinesResponse: ListPipelinesResponse,
): string {
  return JSON.stringify(
    ListPipelinesResponse$outboundSchema.parse(listPipelinesResponse),
  );
}

export function listPipelinesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponse' from JSON`,
  );
}
