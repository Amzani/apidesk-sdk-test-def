/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

export type Stages = {
  /**
   * The unique identifier for each stage within the pipeline. This string value is essential for referencing specific stages when managing or analyzing pipeline data. It ensures that each stage can be distinctly identified and manipulated as needed.
   */
  id?: string | null | undefined;
  /**
   * The name of the pipeline stage, representing a specific phase within the sales or project pipeline. This string value helps identify the stage's purpose and position within the overall pipeline structure, aiding in tracking and management of opportunities.
   */
  name?: string | null | undefined;
  /**
   * The unique identifier or code associated with the pipeline stage. This string value is used to reference the stage programmatically within integrations or when analyzing pipeline data.
   */
  value?: string | null | undefined;
  /**
   * An integer representing the likelihood of successfully closing an opportunity at this stage of the pipeline. The value ranges from 0 to 100, indicating the percentage probability of a win, which is crucial for forecasting and decision-making processes.
   */
  winProbability?: number | null | undefined;
  /**
   * An integer that specifies the sequence in which the pipeline stage appears in the user interface. This order helps users visually navigate through the stages, ensuring a logical progression of opportunities within the pipeline.
   */
  displayOrder?: number | null | undefined;
};

export type ListPipelinesResponseExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where a value should be applied. This path is crucial for pinpointing the data element that needs modification, ensuring precise data manipulation within the pipeline response.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath, which can be of any data type. This flexibility allows developers to insert or update data within the pipeline response, tailoring the output to meet specific application requirements.
   */
  value?: any | undefined;
};

export type ListPipelinesResponsePassThrough = {
  /**
   * The 'service_id' within the 'pass_through' array identifies the specific service to which the custom data or modifications should be applied. This ensures that the correct service processes the additional data, facilitating seamless integration.
   */
  serviceId: string;
  /**
   * The 'operation_id' is an optional identifier used within the 'pass_through' array to specify a particular workflow operation for applying the custom data. This is especially useful in scenarios where multiple downstream requests are made, ensuring the correct operation is targeted.
   */
  operationId?: string | undefined;
  /**
   * The 'extend_object' is a flexible object within the 'pass_through' array that allows for the direct extension of properties. Developers can use this to add any additional fields or data structures needed to meet specific service requirements.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * This property contains an array of objects that define structured data modifications using specified paths. Each object in the array represents a modification operation, allowing developers to dynamically alter data structures within the pipeline response. This is particularly useful for customizing the data output to fit specific integration needs.
   */
  extendPaths?: Array<ListPipelinesResponseExtendPaths> | undefined;
};

export type ListPipelinesResponseData = {
  /**
   * The unique identifier for each pipeline within the CRM system. This ID is used to reference and manage individual pipelines, allowing developers to perform operations like updates or deletions on specific pipelines.
   */
  id?: string | undefined;
  /**
   * The name assigned to the pipeline, which helps in identifying and differentiating it from other pipelines. This field is crucial for users to understand the purpose or focus of the pipeline within the CRM context.
   */
  name: string;
  currency?: Currency | null | undefined;
  /**
   * A boolean flag indicating whether the pipeline is archived. Archived pipelines are typically not active but are retained for historical reference or record-keeping purposes.
   */
  archived?: boolean | undefined;
  /**
   * Indicates whether the pipeline is currently active. This boolean value helps determine if the pipeline is operational and should be considered in analyses or integrations. An active pipeline is one that is in use and can process data.
   */
  active?: boolean | undefined;
  /**
   * Specifies the order in which the pipeline appears in the user interface. This integer value is used to organize multiple pipelines, ensuring they are displayed in a logical sequence for users. A lower number typically means a higher priority in the display order.
   */
  displayOrder?: number | null | undefined;
  /**
   * Indicates if the pipeline has the win probability feature enabled. This boolean value shows whether the pipeline can calculate and display the likelihood of winning deals at various stages. It is useful for sales forecasting and strategic planning.
   */
  winProbabilityEnabled?: boolean | undefined;
  /**
   * An array containing the stages of the pipeline. Each element in the array represents a distinct phase within the pipeline, detailing the progression of deals from start to finish. This structure is crucial for understanding the workflow and managing the sales process effectively.
   */
  stages?: Array<Stages> | undefined;
  /**
   * A timestamp indicating when the pipeline data was last modified. This string is formatted in ISO 8601 and is essential for synchronization and ensuring that the most current data is being used in analyses and integrations.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The 'created_at' field records the exact date and time when the pipeline object was initially created in the CRM system. This timestamp is crucial for tracking the age and history of the pipeline data. It is formatted as an ISO 8601 string, such as '2023-10-01T12:00:00Z'.
   */
  createdAt?: Date | null | undefined;
  /**
   * The 'pass_through' property is an array that allows developers to include custom data or make structured modifications specific to a service when creating or updating resources. This feature is particularly useful for integrating unique service requirements into the pipeline data.
   */
  passThrough?: Array<ListPipelinesResponsePassThrough> | undefined;
};

/**
 * This object contains cursors that help navigate through paginated API results. It includes pointers to move to previous, current, or next pages, facilitating seamless data retrieval across multiple pages. Useful for handling large datasets by breaking them into manageable chunks.
 */
export type ListPipelinesResponseCursors = {
  /**
   * A string cursor that allows navigation to the previous page of results in a paginated API response. This is particularly useful when reviewing or iterating over data that spans multiple pages, enabling backward traversal.
   */
  previous?: string | null | undefined;
  /**
   * A string cursor representing the current page in a paginated API response. It helps maintain the current position within the dataset, ensuring continuity in data processing or display.
   */
  current?: string | null | undefined;
  /**
   * A string cursor used to navigate to the next page of results in a paginated API response. This facilitates forward movement through a dataset, allowing access to subsequent data entries efficiently.
   */
  next?: string | null | undefined;
};

/**
 * An object containing metadata about the response, such as pagination details and other contextual information. This metadata helps developers understand the scope and limits of the data returned, facilitating efficient data handling and navigation.
 */
export type ListPipelinesResponseMeta = {
  /**
   * Indicates the number of items included in the current page of the response data. This property is essential for managing pagination, allowing developers to efficiently process and display data across multiple pages.
   */
  itemsOnPage?: number | undefined;
  /**
   * This object contains cursors that help navigate through paginated API results. It includes pointers to move to previous, current, or next pages, facilitating seamless data retrieval across multiple pages. Useful for handling large datasets by breaking them into manageable chunks.
   */
  cursors?: ListPipelinesResponseCursors | undefined;
};

/**
 * This object contains hyperlinks for navigating between pages in a paginated API response. It provides direct links to previous or next pages, enhancing user experience by simplifying navigation through large datasets.
 */
export type ListPipelinesResponseLinks = {
  /**
   * This property contains the URL link to navigate to the previous page of the pipeline data results. It is used for pagination purposes, allowing developers to retrieve the preceding set of pipeline records if available. The format is a standard URL string, and it is included in the response when there is a previous page to access.
   */
  previous?: string | null | undefined;
  /**
   * This property provides the URL link to the current page of the pipeline data results. It serves as a reference to the current set of pipeline records being viewed or processed. The value is a standard URL string, ensuring developers can easily access the current page of data within the pagination sequence.
   */
  current?: string | undefined;
  /**
   * This property contains the URL link to navigate to the next page of the pipeline data results. It facilitates pagination by allowing developers to access the subsequent set of pipeline records if more data is available. The format is a standard URL string, and it is included in the response when there is a next page to access.
   */
  next?: string | null | undefined;
};

/**
 * Pipelines
 */
export type ListPipelinesResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the GET request to the '/crm/pipelines' endpoint, such as 200 for success or 404 for not found. It helps developers understand the outcome of their API call.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable status message, such as 'OK' for a successful request, complementing the 'status_code' to give a clearer understanding of the response.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the CRM pipeline data is fetched. This string uniquely identifies the service within the Apideck ecosystem, ensuring developers know the source of the data.
   */
  service: string;
  /**
   * The name of the Unified API resource that was accessed. This string indicates the specific resource within the CRM system, helping developers understand which part of the API was queried.
   */
  resource: string;
  /**
   * The specific operation that was performed during the API call. This string describes the action taken, such as 'fetch' or 'retrieve', providing context about what the API request was intended to do.
   */
  operation: string;
  /**
   * An array containing the list of CRM pipelines associated with the specified consumer. Each element in the array represents a pipeline object with detailed information such as ID, name, currency, and archived status. This array is the primary container for the pipeline data returned by the 'pipelinesAll' operation.
   */
  data: Array<ListPipelinesResponseData>;
  /**
   * An object containing metadata about the response, such as pagination details and other contextual information. This metadata helps developers understand the scope and limits of the data returned, facilitating efficient data handling and navigation.
   */
  meta?: ListPipelinesResponseMeta | undefined;
  /**
   * This object contains hyperlinks for navigating between pages in a paginated API response. It provides direct links to previous or next pages, enhancing user experience by simplifying navigation through large datasets.
   */
  links?: ListPipelinesResponseLinks | undefined;
};

/** @internal */
export const Stages$inboundSchema: z.ZodType<Stages, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
    win_probability: z.nullable(z.number().int()).optional(),
    display_order: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "win_probability": "winProbability",
      "display_order": "displayOrder",
    });
  });

/** @internal */
export type Stages$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  value?: string | null | undefined;
  win_probability?: number | null | undefined;
  display_order?: number | null | undefined;
};

/** @internal */
export const Stages$outboundSchema: z.ZodType<
  Stages$Outbound,
  z.ZodTypeDef,
  Stages
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  winProbability: z.nullable(z.number().int()).optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    winProbability: "win_probability",
    displayOrder: "display_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stages$ {
  /** @deprecated use `Stages$inboundSchema` instead. */
  export const inboundSchema = Stages$inboundSchema;
  /** @deprecated use `Stages$outboundSchema` instead. */
  export const outboundSchema = Stages$outboundSchema;
  /** @deprecated use `Stages$Outbound` instead. */
  export type Outbound = Stages$Outbound;
}

export function stagesToJSON(stages: Stages): string {
  return JSON.stringify(Stages$outboundSchema.parse(stages));
}

export function stagesFromJSON(
  jsonString: string,
): SafeParseResult<Stages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stages' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponseExtendPaths$inboundSchema: z.ZodType<
  ListPipelinesResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListPipelinesResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListPipelinesResponseExtendPaths$outboundSchema: z.ZodType<
  ListPipelinesResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseExtendPaths$ {
  /** @deprecated use `ListPipelinesResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListPipelinesResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListPipelinesResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListPipelinesResponseExtendPaths$Outbound;
}

export function listPipelinesResponseExtendPathsToJSON(
  listPipelinesResponseExtendPaths: ListPipelinesResponseExtendPaths,
): string {
  return JSON.stringify(
    ListPipelinesResponseExtendPaths$outboundSchema.parse(
      listPipelinesResponseExtendPaths,
    ),
  );
}

export function listPipelinesResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponsePassThrough$inboundSchema: z.ZodType<
  ListPipelinesResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListPipelinesResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListPipelinesResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListPipelinesResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListPipelinesResponsePassThrough$outboundSchema: z.ZodType<
  ListPipelinesResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListPipelinesResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponsePassThrough$ {
  /** @deprecated use `ListPipelinesResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponsePassThrough$inboundSchema;
  /** @deprecated use `ListPipelinesResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponsePassThrough$outboundSchema;
  /** @deprecated use `ListPipelinesResponsePassThrough$Outbound` instead. */
  export type Outbound = ListPipelinesResponsePassThrough$Outbound;
}

export function listPipelinesResponsePassThroughToJSON(
  listPipelinesResponsePassThrough: ListPipelinesResponsePassThrough,
): string {
  return JSON.stringify(
    ListPipelinesResponsePassThrough$outboundSchema.parse(
      listPipelinesResponsePassThrough,
    ),
  );
}

export function listPipelinesResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponseData$inboundSchema: z.ZodType<
  ListPipelinesResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  display_order: z.nullable(z.number().int()).optional(),
  win_probability_enabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => Stages$inboundSchema)).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => ListPipelinesResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_order": "displayOrder",
    "win_probability_enabled": "winProbabilityEnabled",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ListPipelinesResponseData$Outbound = {
  id?: string | undefined;
  name: string;
  currency?: string | null | undefined;
  archived?: boolean | undefined;
  active?: boolean | undefined;
  display_order?: number | null | undefined;
  win_probability_enabled?: boolean | undefined;
  stages?: Array<Stages$Outbound> | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ListPipelinesResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const ListPipelinesResponseData$outboundSchema: z.ZodType<
  ListPipelinesResponseData$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponseData
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
  winProbabilityEnabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => Stages$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(
    z.lazy(() => ListPipelinesResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    displayOrder: "display_order",
    winProbabilityEnabled: "win_probability_enabled",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseData$ {
  /** @deprecated use `ListPipelinesResponseData$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseData$inboundSchema;
  /** @deprecated use `ListPipelinesResponseData$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseData$outboundSchema;
  /** @deprecated use `ListPipelinesResponseData$Outbound` instead. */
  export type Outbound = ListPipelinesResponseData$Outbound;
}

export function listPipelinesResponseDataToJSON(
  listPipelinesResponseData: ListPipelinesResponseData,
): string {
  return JSON.stringify(
    ListPipelinesResponseData$outboundSchema.parse(listPipelinesResponseData),
  );
}

export function listPipelinesResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponseData' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponseCursors$inboundSchema: z.ZodType<
  ListPipelinesResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListPipelinesResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListPipelinesResponseCursors$outboundSchema: z.ZodType<
  ListPipelinesResponseCursors$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseCursors$ {
  /** @deprecated use `ListPipelinesResponseCursors$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseCursors$inboundSchema;
  /** @deprecated use `ListPipelinesResponseCursors$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseCursors$outboundSchema;
  /** @deprecated use `ListPipelinesResponseCursors$Outbound` instead. */
  export type Outbound = ListPipelinesResponseCursors$Outbound;
}

export function listPipelinesResponseCursorsToJSON(
  listPipelinesResponseCursors: ListPipelinesResponseCursors,
): string {
  return JSON.stringify(
    ListPipelinesResponseCursors$outboundSchema.parse(
      listPipelinesResponseCursors,
    ),
  );
}

export function listPipelinesResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponseCursors' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponseMeta$inboundSchema: z.ZodType<
  ListPipelinesResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ListPipelinesResponseCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ListPipelinesResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ListPipelinesResponseCursors$Outbound | undefined;
};

/** @internal */
export const ListPipelinesResponseMeta$outboundSchema: z.ZodType<
  ListPipelinesResponseMeta$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ListPipelinesResponseCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseMeta$ {
  /** @deprecated use `ListPipelinesResponseMeta$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseMeta$inboundSchema;
  /** @deprecated use `ListPipelinesResponseMeta$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseMeta$outboundSchema;
  /** @deprecated use `ListPipelinesResponseMeta$Outbound` instead. */
  export type Outbound = ListPipelinesResponseMeta$Outbound;
}

export function listPipelinesResponseMetaToJSON(
  listPipelinesResponseMeta: ListPipelinesResponseMeta,
): string {
  return JSON.stringify(
    ListPipelinesResponseMeta$outboundSchema.parse(listPipelinesResponseMeta),
  );
}

export function listPipelinesResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponseMeta' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponseLinks$inboundSchema: z.ZodType<
  ListPipelinesResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListPipelinesResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListPipelinesResponseLinks$outboundSchema: z.ZodType<
  ListPipelinesResponseLinks$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseLinks$ {
  /** @deprecated use `ListPipelinesResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponseLinks$inboundSchema;
  /** @deprecated use `ListPipelinesResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponseLinks$outboundSchema;
  /** @deprecated use `ListPipelinesResponseLinks$Outbound` instead. */
  export type Outbound = ListPipelinesResponseLinks$Outbound;
}

export function listPipelinesResponseLinksToJSON(
  listPipelinesResponseLinks: ListPipelinesResponseLinks,
): string {
  return JSON.stringify(
    ListPipelinesResponseLinks$outboundSchema.parse(listPipelinesResponseLinks),
  );
}

export function listPipelinesResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponseLinks' from JSON`,
  );
}

/** @internal */
export const ListPipelinesResponse$inboundSchema: z.ZodType<
  ListPipelinesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListPipelinesResponseData$inboundSchema)),
  meta: z.lazy(() => ListPipelinesResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => ListPipelinesResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListPipelinesResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ListPipelinesResponseData$Outbound>;
  meta?: ListPipelinesResponseMeta$Outbound | undefined;
  links?: ListPipelinesResponseLinks$Outbound | undefined;
};

/** @internal */
export const ListPipelinesResponse$outboundSchema: z.ZodType<
  ListPipelinesResponse$Outbound,
  z.ZodTypeDef,
  ListPipelinesResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListPipelinesResponseData$outboundSchema)),
  meta: z.lazy(() => ListPipelinesResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => ListPipelinesResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponse$ {
  /** @deprecated use `ListPipelinesResponse$inboundSchema` instead. */
  export const inboundSchema = ListPipelinesResponse$inboundSchema;
  /** @deprecated use `ListPipelinesResponse$outboundSchema` instead. */
  export const outboundSchema = ListPipelinesResponse$outboundSchema;
  /** @deprecated use `ListPipelinesResponse$Outbound` instead. */
  export type Outbound = ListPipelinesResponse$Outbound;
}

export function listPipelinesResponseToJSON(
  listPipelinesResponse: ListPipelinesResponse,
): string {
  return JSON.stringify(
    ListPipelinesResponse$outboundSchema.parse(listPipelinesResponse),
  );
}

export function listPipelinesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPipelinesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPipelinesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPipelinesResponse' from JSON`,
  );
}
