/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated lead information after a successful PATCH request. It includes all the fields that were modified, confirming the changes made to the lead's record in the CRM. The structure of this object reflects the lead's data model, ensuring consistency with the CRM's schema.
 */
export type UpdateLeadResponseUnifiedId = {
  /**
   * The unique identifier of the lead that was updated. This ID confirms which specific lead record in the CRM has been modified, ensuring that the correct resource was targeted by the PATCH operation. It is essential for tracking and referencing the updated lead within the system.
   */
  id: string;
};

/**
 * Lead updated
 */
export type UpdateLeadResponse = {
  /**
   * The HTTP response status code indicating the result of the PATCH request. A status code of 200 confirms that the lead information was successfully updated. This code is crucial for error handling and understanding the outcome of the operation.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This property provides a human-readable status message, such as 'OK', which corresponds to the status code and helps in quickly understanding the result of the operation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the request. This identifier is essential for tracking which service integration handled the lead update, especially when multiple services are involved.
   */
  service: string;
  /**
   * The name of the unified API resource that was affected by the operation. In this context, it refers to the 'lead' resource, indicating that the lead's data was the target of the update operation.
   */
  resource: string;
  /**
   * The specific operation performed on the resource, in this case, 'update'. This property confirms the type of action executed, ensuring that the correct modification was applied to the lead's data.
   */
  operation: string;
  /**
   * This object contains the updated lead information after a successful PATCH request. It includes all the fields that were modified, confirming the changes made to the lead's record in the CRM. The structure of this object reflects the lead's data model, ensuring consistency with the CRM's schema.
   */
  data: UpdateLeadResponseUnifiedId;
};

/** @internal */
export const UpdateLeadResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateLeadResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateLeadResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateLeadResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateLeadResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateLeadResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadResponseUnifiedId$ {
  /** @deprecated use `UpdateLeadResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateLeadResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateLeadResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateLeadResponseUnifiedId$Outbound;
}

export function updateLeadResponseUnifiedIdToJSON(
  updateLeadResponseUnifiedId: UpdateLeadResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateLeadResponseUnifiedId$outboundSchema.parse(
      updateLeadResponseUnifiedId,
    ),
  );
}

export function updateLeadResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateLeadResponse$inboundSchema: z.ZodType<
  UpdateLeadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateLeadResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateLeadResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateLeadResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateLeadResponse$outboundSchema: z.ZodType<
  UpdateLeadResponse$Outbound,
  z.ZodTypeDef,
  UpdateLeadResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateLeadResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadResponse$ {
  /** @deprecated use `UpdateLeadResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadResponse$inboundSchema;
  /** @deprecated use `UpdateLeadResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadResponse$outboundSchema;
  /** @deprecated use `UpdateLeadResponse$Outbound` instead. */
  export type Outbound = UpdateLeadResponse$Outbound;
}

export function updateLeadResponseToJSON(
  updateLeadResponse: UpdateLeadResponse,
): string {
  return JSON.stringify(
    UpdateLeadResponse$outboundSchema.parse(updateLeadResponse),
  );
}

export function updateLeadResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadResponse' from JSON`,
  );
}
