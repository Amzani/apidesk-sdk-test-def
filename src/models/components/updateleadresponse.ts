/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated lead resource, reflecting all changes made during the PATCH operation. It includes all relevant lead details, ensuring that the returned data accurately represents the current state of the lead in the CRM system. The structure of this object aligns with the lead resource schema used throughout the API.
 */
export type UpdateLeadResponseUnifiedId = {
  /**
   * The unique identifier of the lead resource that was updated. This string value confirms the specific lead record that has been modified, allowing developers to verify the successful application of changes. It serves as a reference point for any subsequent operations on this lead.
   */
  id: string;
};

/**
 * Lead updated
 */
export type UpdateLeadResponse = {
  /**
   * The HTTP response status code indicating the result of the PATCH operation. A value of 200 confirms that the lead record was successfully updated. This integer is crucial for error handling and confirming successful requests.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful update. This string provides a human-readable confirmation of the operation's outcome, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the update request. This string helps identify which service handled the operation, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the unified API resource that was updated, typically 'lead'. This string confirms the type of resource affected by the operation, ensuring developers can verify the correct entity was modified.
   */
  resource: string;
  /**
   * The specific operation performed, such as 'update', indicating the action taken on the lead resource. This string helps developers understand the nature of the request processed by the API.
   */
  operation: string;
  /**
   * This object contains the updated lead resource, reflecting all changes made during the PATCH operation. It includes all relevant lead details, ensuring that the returned data accurately represents the current state of the lead in the CRM system. The structure of this object aligns with the lead resource schema used throughout the API.
   */
  data: UpdateLeadResponseUnifiedId;
};

/** @internal */
export const UpdateLeadResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateLeadResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateLeadResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateLeadResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateLeadResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateLeadResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadResponseUnifiedId$ {
  /** @deprecated use `UpdateLeadResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateLeadResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateLeadResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateLeadResponseUnifiedId$Outbound;
}

export function updateLeadResponseUnifiedIdToJSON(
  updateLeadResponseUnifiedId: UpdateLeadResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateLeadResponseUnifiedId$outboundSchema.parse(
      updateLeadResponseUnifiedId,
    ),
  );
}

export function updateLeadResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateLeadResponse$inboundSchema: z.ZodType<
  UpdateLeadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateLeadResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateLeadResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateLeadResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateLeadResponse$outboundSchema: z.ZodType<
  UpdateLeadResponse$Outbound,
  z.ZodTypeDef,
  UpdateLeadResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateLeadResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLeadResponse$ {
  /** @deprecated use `UpdateLeadResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateLeadResponse$inboundSchema;
  /** @deprecated use `UpdateLeadResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateLeadResponse$outboundSchema;
  /** @deprecated use `UpdateLeadResponse$Outbound` instead. */
  export type Outbound = UpdateLeadResponse$Outbound;
}

export function updateLeadResponseToJSON(
  updateLeadResponse: UpdateLeadResponse,
): string {
  return JSON.stringify(
    UpdateLeadResponse$outboundSchema.parse(updateLeadResponse),
  );
}

export function updateLeadResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLeadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLeadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLeadResponse' from JSON`,
  );
}
