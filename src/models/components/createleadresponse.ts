/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the lead that was successfully created. It serves as the main container for the response data, encapsulating all relevant information about the new lead entry in the CRM system. The structure of this object is crucial for accessing specific attributes like the lead's unique identifier.
 */
export type CreateLeadResponseUnifiedId = {
  /**
   * The unique identifier assigned to the newly created lead in the CRM system. This ID is essential for referencing the lead in future operations, such as updates or retrievals, and ensures that each lead can be distinctly identified within the database.
   */
  id: string;
};

/**
 * Lead created
 */
export type CreateLeadResponse = {
  /**
   * The HTTP response status code returned by the API. This integer value indicates the result of the POST request to add a new lead, with a successful creation typically returning a 201 status code. It helps developers understand the outcome of their API call.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable status message corresponding to the status code, such as 'Created' for a successful lead addition. It aids in quickly identifying the result of the operation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for this operation. This string identifies which service integration was utilized when adding the new lead, helping developers track and manage service-specific operations.
   */
  service: string;
  /**
   * The name of the unified API resource involved in the operation. This string specifies the type of resource that was affected, in this case, a 'lead', providing context about the nature of the operation performed.
   */
  resource: string;
  /**
   * The specific operation performed by the API. This string indicates the action taken, such as 'create', reflecting the addition of a new lead to the CRM system. It helps developers understand the nature of the API call made.
   */
  operation: string;
  /**
   * This object contains the details of the lead that was successfully created. It serves as the main container for the response data, encapsulating all relevant information about the new lead entry in the CRM system. The structure of this object is crucial for accessing specific attributes like the lead's unique identifier.
   */
  data: CreateLeadResponseUnifiedId;
};

/** @internal */
export const CreateLeadResponseUnifiedId$inboundSchema: z.ZodType<
  CreateLeadResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateLeadResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateLeadResponseUnifiedId$outboundSchema: z.ZodType<
  CreateLeadResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateLeadResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadResponseUnifiedId$ {
  /** @deprecated use `CreateLeadResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateLeadResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateLeadResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CreateLeadResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateLeadResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateLeadResponseUnifiedId$Outbound;
}

export function createLeadResponseUnifiedIdToJSON(
  createLeadResponseUnifiedId: CreateLeadResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateLeadResponseUnifiedId$outboundSchema.parse(
      createLeadResponseUnifiedId,
    ),
  );
}

export function createLeadResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateLeadResponse$inboundSchema: z.ZodType<
  CreateLeadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateLeadResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateLeadResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateLeadResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateLeadResponse$outboundSchema: z.ZodType<
  CreateLeadResponse$Outbound,
  z.ZodTypeDef,
  CreateLeadResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateLeadResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadResponse$ {
  /** @deprecated use `CreateLeadResponse$inboundSchema` instead. */
  export const inboundSchema = CreateLeadResponse$inboundSchema;
  /** @deprecated use `CreateLeadResponse$outboundSchema` instead. */
  export const outboundSchema = CreateLeadResponse$outboundSchema;
  /** @deprecated use `CreateLeadResponse$Outbound` instead. */
  export type Outbound = CreateLeadResponse$Outbound;
}

export function createLeadResponseToJSON(
  createLeadResponse: CreateLeadResponse,
): string {
  return JSON.stringify(
    CreateLeadResponse$outboundSchema.parse(createLeadResponse),
  );
}

export function createLeadResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadResponse' from JSON`,
  );
}
