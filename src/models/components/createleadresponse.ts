/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the newly created lead, including its unique identifier. It serves as the main container for the response data, confirming the successful addition of the lead to the CRM system. The structure of this object is crucial for further processing or integration steps.
 */
export type CreateLeadResponseUnifiedId = {
  /**
   * The unique identifier assigned to the newly created lead in the CRM system. This string value is essential for referencing the lead in subsequent operations, such as updates or retrievals. It confirms the successful creation of the lead and is used to track and manage the lead within the CRM.
   */
  id: string;
};

/**
 * Lead created
 */
export type CreateLeadResponse = {
  /**
   * The HTTP response status code indicating the result of the lead creation operation. A value of 201 confirms that the lead was successfully added to the CRM system. This integer is crucial for error handling and confirming successful operations.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'Created' for a successful lead addition. This string provides a human-readable confirmation of the operation's outcome, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for this operation. This string identifies which service within the Apideck ecosystem processed the lead addition, essential for tracking and integration purposes.
   */
  service: string;
  /**
   * The name of the Unified API resource involved in the operation, typically 'lead' for this endpoint. This string helps developers understand the context of the API call and the type of resource affected.
   */
  resource: string;
  /**
   * The specific operation performed, such as 'create' for adding a new lead. This string indicates the action taken by the API, providing clarity on the operation's intent and result.
   */
  operation: string;
  /**
   * This object contains the details of the newly created lead, including its unique identifier. It serves as the main container for the response data, confirming the successful addition of the lead to the CRM system. The structure of this object is crucial for further processing or integration steps.
   */
  data: CreateLeadResponseUnifiedId;
};

/** @internal */
export const CreateLeadResponseUnifiedId$inboundSchema: z.ZodType<
  CreateLeadResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateLeadResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CreateLeadResponseUnifiedId$outboundSchema: z.ZodType<
  CreateLeadResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  CreateLeadResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadResponseUnifiedId$ {
  /** @deprecated use `CreateLeadResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CreateLeadResponseUnifiedId$inboundSchema;
  /** @deprecated use `CreateLeadResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CreateLeadResponseUnifiedId$outboundSchema;
  /** @deprecated use `CreateLeadResponseUnifiedId$Outbound` instead. */
  export type Outbound = CreateLeadResponseUnifiedId$Outbound;
}

export function createLeadResponseUnifiedIdToJSON(
  createLeadResponseUnifiedId: CreateLeadResponseUnifiedId,
): string {
  return JSON.stringify(
    CreateLeadResponseUnifiedId$outboundSchema.parse(
      createLeadResponseUnifiedId,
    ),
  );
}

export function createLeadResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateLeadResponse$inboundSchema: z.ZodType<
  CreateLeadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateLeadResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateLeadResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CreateLeadResponseUnifiedId$Outbound;
};

/** @internal */
export const CreateLeadResponse$outboundSchema: z.ZodType<
  CreateLeadResponse$Outbound,
  z.ZodTypeDef,
  CreateLeadResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CreateLeadResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadResponse$ {
  /** @deprecated use `CreateLeadResponse$inboundSchema` instead. */
  export const inboundSchema = CreateLeadResponse$inboundSchema;
  /** @deprecated use `CreateLeadResponse$outboundSchema` instead. */
  export const outboundSchema = CreateLeadResponse$outboundSchema;
  /** @deprecated use `CreateLeadResponse$Outbound` instead. */
  export type Outbound = CreateLeadResponse$Outbound;
}

export function createLeadResponseToJSON(
  createLeadResponse: CreateLeadResponse,
): string {
  return JSON.stringify(
    CreateLeadResponse$outboundSchema.parse(createLeadResponse),
  );
}

export function createLeadResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadResponse' from JSON`,
  );
}
