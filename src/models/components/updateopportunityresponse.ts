/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated details of the opportunity record within the CRM. It includes all relevant fields that were modified during the update operation, ensuring the CRM reflects the most current sales information. The structure of this object aligns with the opportunity resource schema used in the CRM system.
 */
export type UpdateOpportunityResponseUnifiedId = {
  /**
   * The unique identifier of the opportunity record that was updated. This string value confirms the specific resource that has been modified, allowing developers to verify the successful update of the opportunity within the CRM. It is crucial for tracking changes and maintaining data integrity in the sales pipeline.
   */
  id: string;
};

/**
 * Opportunity updated
 */
export type UpdateOpportunityResponse = {
  /**
   * The HTTP response status code indicating the result of the `opportunitiesUpdate` operation. A status code of 200 confirms that the opportunity record was successfully updated. This integer value helps developers understand the outcome of their API request.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful update. This string provides a human-readable confirmation of the operation's result, complementing the numeric status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the `opportunitiesUpdate` operation. This string identifies which service handled the request, useful for tracking and logging purposes in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource that was updated, typically 'opportunity'. This string helps developers confirm the specific type of resource that was modified in the CRM system.
   */
  resource: string;
  /**
   * The specific operation performed, in this case, 'update'. This string indicates the action taken on the opportunity resource, helping developers verify the intended modification was executed.
   */
  operation: string;
  /**
   * This object contains the updated details of the opportunity record within the CRM. It includes all relevant fields that were modified during the update operation, ensuring the CRM reflects the most current sales information. The structure of this object aligns with the opportunity resource schema used in the CRM system.
   */
  data: UpdateOpportunityResponseUnifiedId;
};

/** @internal */
export const UpdateOpportunityResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateOpportunityResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateOpportunityResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateOpportunityResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateOpportunityResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityResponseUnifiedId$ {
  /** @deprecated use `UpdateOpportunityResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateOpportunityResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOpportunityResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateOpportunityResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateOpportunityResponseUnifiedId$Outbound;
}

export function updateOpportunityResponseUnifiedIdToJSON(
  updateOpportunityResponseUnifiedId: UpdateOpportunityResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateOpportunityResponseUnifiedId$outboundSchema.parse(
      updateOpportunityResponseUnifiedId,
    ),
  );
}

export function updateOpportunityResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOpportunityResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateOpportunityResponse$inboundSchema: z.ZodType<
  UpdateOpportunityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateOpportunityResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateOpportunityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateOpportunityResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateOpportunityResponse$outboundSchema: z.ZodType<
  UpdateOpportunityResponse$Outbound,
  z.ZodTypeDef,
  UpdateOpportunityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateOpportunityResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOpportunityResponse$ {
  /** @deprecated use `UpdateOpportunityResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateOpportunityResponse$inboundSchema;
  /** @deprecated use `UpdateOpportunityResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateOpportunityResponse$outboundSchema;
  /** @deprecated use `UpdateOpportunityResponse$Outbound` instead. */
  export type Outbound = UpdateOpportunityResponse$Outbound;
}

export function updateOpportunityResponseToJSON(
  updateOpportunityResponse: UpdateOpportunityResponse,
): string {
  return JSON.stringify(
    UpdateOpportunityResponse$outboundSchema.parse(updateOpportunityResponse),
  );
}

export function updateOpportunityResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOpportunityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOpportunityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOpportunityResponse' from JSON`,
  );
}
