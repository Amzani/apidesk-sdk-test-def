/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The 'data' object encapsulates the entire response payload for the newly created opportunity. It contains all relevant details about the opportunity that has been successfully added to the CRM system. This object is always included in the response to provide a structured format for accessing the opportunity's attributes.
 */
export type OpportunityCreateResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Opportunity created
 */
export type OpportunityCreateResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the POST request to create a new opportunity. A status code of 201 signifies successful creation, confirming that the opportunity has been added to the CRM. This property is always included in the response to inform the client of the request's outcome.
   */
  statusCode: number;
  /**
   * The HTTP response status message accompanying the status code. This string provides a textual representation of the status code, such as 'Created' for a 201 status. It offers a human-readable explanation of the response outcome, helping developers understand the result of their API request. This property is always included in the response.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for this operation. This string identifies which third-party service (e.g., Pipedrive) the opportunity was added to, especially useful when multiple integrations are active. It ensures that the response is correctly associated with the intended service provider, providing clarity in multi-service environments.
   */
  service: string;
  /**
   * The name of the unified API resource involved in the operation. This string indicates the specific resource type, such as 'opportunity', that was targeted by the POST request. It helps in identifying the context of the operation within the broader API ecosystem, ensuring that the response aligns with the expected resource type.
   */
  resource: string;
  /**
   * The specific operation performed by the API, represented as a string. In this context, it denotes the 'opportunitiesAdd' operation, confirming the action taken by the API. This property helps in tracking and logging the type of operation executed, providing transparency and traceability for API consumers.
   */
  operation: string;
  /**
   * The 'data' object encapsulates the entire response payload for the newly created opportunity. It contains all relevant details about the opportunity that has been successfully added to the CRM system. This object is always included in the response to provide a structured format for accessing the opportunity's attributes.
   */
  data: OpportunityCreateResponseUnifiedId;
};

/** @internal */
export const OpportunityCreateResponseUnifiedId$inboundSchema: z.ZodType<
  OpportunityCreateResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type OpportunityCreateResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const OpportunityCreateResponseUnifiedId$outboundSchema: z.ZodType<
  OpportunityCreateResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  OpportunityCreateResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityCreateResponseUnifiedId$ {
  /** @deprecated use `OpportunityCreateResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = OpportunityCreateResponseUnifiedId$inboundSchema;
  /** @deprecated use `OpportunityCreateResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema =
    OpportunityCreateResponseUnifiedId$outboundSchema;
  /** @deprecated use `OpportunityCreateResponseUnifiedId$Outbound` instead. */
  export type Outbound = OpportunityCreateResponseUnifiedId$Outbound;
}

export function opportunityCreateResponseUnifiedIdToJSON(
  opportunityCreateResponseUnifiedId: OpportunityCreateResponseUnifiedId,
): string {
  return JSON.stringify(
    OpportunityCreateResponseUnifiedId$outboundSchema.parse(
      opportunityCreateResponseUnifiedId,
    ),
  );
}

export function opportunityCreateResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityCreateResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunityCreateResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityCreateResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const OpportunityCreateResponse$inboundSchema: z.ZodType<
  OpportunityCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunityCreateResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type OpportunityCreateResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: OpportunityCreateResponseUnifiedId$Outbound;
};

/** @internal */
export const OpportunityCreateResponse$outboundSchema: z.ZodType<
  OpportunityCreateResponse$Outbound,
  z.ZodTypeDef,
  OpportunityCreateResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunityCreateResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunityCreateResponse$ {
  /** @deprecated use `OpportunityCreateResponse$inboundSchema` instead. */
  export const inboundSchema = OpportunityCreateResponse$inboundSchema;
  /** @deprecated use `OpportunityCreateResponse$outboundSchema` instead. */
  export const outboundSchema = OpportunityCreateResponse$outboundSchema;
  /** @deprecated use `OpportunityCreateResponse$Outbound` instead. */
  export type Outbound = OpportunityCreateResponse$Outbound;
}

export function opportunityCreateResponseToJSON(
  opportunityCreateResponse: OpportunityCreateResponse,
): string {
  return JSON.stringify(
    OpportunityCreateResponse$outboundSchema.parse(opportunityCreateResponse),
  );
}

export function opportunityCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<OpportunityCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunityCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunityCreateResponse' from JSON`,
  );
}
