/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The root object in the response body that encapsulates all relevant data pertaining to the deletion operation. This object is always included in the response to confirm the operation's success and to provide any additional metadata or information related to the deleted activity. It serves as a container for specific details about the resource that was targeted by the delete request.
 */
export type ActivityDeleteResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Activity deleted
 */
export type ActivityDeleteResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the DELETE operation, with a 200 status code signifying that the activity was successfully deleted from the CRM. It is always included in the response to inform the client of the operation's outcome.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'OK' for a successful deletion. It is included to offer clarity on the operation's result, complementing the numeric status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which third-party service (e.g., Pipedrive) was targeted by the DELETE request, especially useful when multiple integrations are active. It is always included to specify the context of the operation.
   */
  service: string;
  /**
   * The name of the Unified API resource that was affected by the operation. This string indicates the type of resource, such as 'activity', that was deleted. It is included to confirm the specific resource type involved in the DELETE operation.
   */
  resource: string;
  /**
   * The specific operation performed by the API, in this case, 'delete'. This string confirms the action taken on the resource, ensuring clarity about the operation executed. It is always included to document the nature of the request processed.
   */
  operation: string;
  /**
   * The root object in the response body that encapsulates all relevant data pertaining to the deletion operation. This object is always included in the response to confirm the operation's success and to provide any additional metadata or information related to the deleted activity. It serves as a container for specific details about the resource that was targeted by the delete request.
   */
  data: ActivityDeleteResponseUnifiedId;
};

/** @internal */
export const ActivityDeleteResponseUnifiedId$inboundSchema: z.ZodType<
  ActivityDeleteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ActivityDeleteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ActivityDeleteResponseUnifiedId$outboundSchema: z.ZodType<
  ActivityDeleteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  ActivityDeleteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityDeleteResponseUnifiedId$ {
  /** @deprecated use `ActivityDeleteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ActivityDeleteResponseUnifiedId$inboundSchema;
  /** @deprecated use `ActivityDeleteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ActivityDeleteResponseUnifiedId$outboundSchema;
  /** @deprecated use `ActivityDeleteResponseUnifiedId$Outbound` instead. */
  export type Outbound = ActivityDeleteResponseUnifiedId$Outbound;
}

export function activityDeleteResponseUnifiedIdToJSON(
  activityDeleteResponseUnifiedId: ActivityDeleteResponseUnifiedId,
): string {
  return JSON.stringify(
    ActivityDeleteResponseUnifiedId$outboundSchema.parse(
      activityDeleteResponseUnifiedId,
    ),
  );
}

export function activityDeleteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ActivityDeleteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityDeleteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityDeleteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const ActivityDeleteResponse$inboundSchema: z.ZodType<
  ActivityDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivityDeleteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ActivityDeleteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ActivityDeleteResponseUnifiedId$Outbound;
};

/** @internal */
export const ActivityDeleteResponse$outboundSchema: z.ZodType<
  ActivityDeleteResponse$Outbound,
  z.ZodTypeDef,
  ActivityDeleteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivityDeleteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityDeleteResponse$ {
  /** @deprecated use `ActivityDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = ActivityDeleteResponse$inboundSchema;
  /** @deprecated use `ActivityDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = ActivityDeleteResponse$outboundSchema;
  /** @deprecated use `ActivityDeleteResponse$Outbound` instead. */
  export type Outbound = ActivityDeleteResponse$Outbound;
}

export function activityDeleteResponseToJSON(
  activityDeleteResponse: ActivityDeleteResponse,
): string {
  return JSON.stringify(
    ActivityDeleteResponse$outboundSchema.parse(activityDeleteResponse),
  );
}

export function activityDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivityDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityDeleteResponse' from JSON`,
  );
}
