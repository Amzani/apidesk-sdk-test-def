/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the category or nature of the activity being updated. This required field helps classify the activity within the CRM, ensuring it is processed and displayed correctly. It must be a valid string that accurately represents the activity type.
 */
export const UpdateActivityRequestType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * Specifies the category or nature of the activity being updated. This required field helps classify the activity within the CRM, ensuring it is processed and displayed correctly. It must be a valid string that accurately represents the activity type.
 */
export type UpdateActivityRequestType = ClosedEnum<
  typeof UpdateActivityRequestType
>;

/**
 * Indicates the type of address, such as 'billing' or 'shipping'. This optional field helps categorize the address within the CRM, ensuring that the correct address type is used for the activity.
 */
export const UpdateActivityRequestLocationAddressType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Indicates the type of address, such as 'billing' or 'shipping'. This optional field helps categorize the address within the CRM, ensuring that the correct address type is used for the activity.
 */
export type UpdateActivityRequestLocationAddressType = ClosedEnum<
  typeof UpdateActivityRequestLocationAddressType
>;

/**
 * An object containing detailed address information for the activity's location. This optional field allows for a structured representation of the address, which can be useful for integrations that require precise location data.
 */
export type UpdateActivityRequestLocationAddress = {
  /**
   * A unique identifier for the address associated with the activity. This optional field is used to reference specific address records within the CRM, facilitating updates or retrievals of address data.
   */
  id?: string | null | undefined;
  /**
   * Indicates the type of address, such as 'billing' or 'shipping'. This optional field helps categorize the address within the CRM, ensuring that the correct address type is used for the activity.
   */
  type?: UpdateActivityRequestLocationAddressType | null | undefined;
  /**
   * The full address in a single string format. This field is optional and is particularly useful when the API does not support structured address data, allowing for a complete address to be provided in a simple format.
   */
  string?: string | null | undefined;
  /**
   * The name of the address associated with the activity. This field is used to identify or label the location where the activity takes place. It should be a descriptive name that helps users recognize the address easily within the CRM system.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, typically including the street number, street name, and any apartment or suite number. This field is crucial for accurately locating the activity's venue and should be formatted according to standard postal address conventions.
   */
  line1?: string | null | undefined;
  /**
   * An additional line for the address, often used for supplementary information such as building name or floor number. This field helps provide a complete and precise address for the activity location, ensuring accurate delivery and navigation.
   */
  line2?: string | null | undefined;
  /**
   * A third line for the address, which can be used for any extra details that do not fit in the first two lines. This field supports comprehensive address descriptions, enhancing the clarity and specificity of the activity's location.
   */
  line3?: string | null | undefined;
  /**
   * A fourth line for the address, allowing for additional address details if necessary. This field ensures that all relevant location information can be captured, facilitating precise identification of the activity's venue.
   */
  line4?: string | null | undefined;
  /**
   * Specifies the street number of the activity's location. This property is used to update the street number in the CRM activity record, ensuring accurate address details. It should be a valid string representing the street number.
   */
  streetNumber?: string | null | undefined;
  /**
   * Indicates the city where the activity is located. This property updates the city name in the CRM activity record, helping to maintain precise location information. It should be a valid city name string.
   */
  city?: string | null | undefined;
  /**
   * Represents the state or region of the activity's location. Use this property to update the state name in the CRM activity record, ensuring the address is complete and accurate. It should be a valid state name string.
   */
  state?: string | null | undefined;
  /**
   * Defines the postal code for the activity's location. This property updates the postal code in the CRM activity record, which is crucial for precise geographic identification. It should be a valid postal code string.
   */
  postalCode?: string | null | undefined;
  /**
   * Specifies the country code for the activity's location, following the ISO 3166-1 alpha-2 standard. This property updates the country information in the CRM activity record, ensuring international address accuracy. It must be a valid two-letter country code.
   */
  country?: string | null | undefined;
  /**
   * Specifies the latitude coordinate of the activity's location. This property is used to accurately place the activity on a map, which can be crucial for location-based services or analytics. The value should be a valid latitude string, typically in decimal degrees format.
   */
  latitude?: string | null | undefined;
  /**
   * Specifies the longitude coordinate of the activity's location. This property complements the latitude to provide a precise geographical point for the activity. Ensure the value is a valid longitude string, usually in decimal degrees format.
   */
  longitude?: string | null | undefined;
  /**
   * Represents the county or sublocality of the activity's location. This field helps in categorizing or filtering activities based on regional divisions, which can be useful for reporting or analysis. The value should be a string that accurately reflects the county name.
   */
  county?: string | null | undefined;
  /**
   * The name of the primary contact person associated with the activity's location. This information is essential for personalizing communications or for logistical purposes when coordinating activities. The value should be a string containing the full name of the contact.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title of the contact person at the activity's location. This field is used to address the contact person respectfully in communications. The value should be a string such as 'Mr.', 'Ms.', or 'Dr.', depending on the appropriate title for the individual.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the activity's location. This field allows you to update the contact number for the location, ensuring accurate communication details are maintained. It should be formatted according to international standards to avoid any discrepancies.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number for the activity's location. Use this field to update the fax contact information, which can be crucial for businesses that still rely on fax communication. Ensure the number is correctly formatted to facilitate proper transmission.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the activity's location. This property is used to update the email contact, allowing for electronic communication with the location. It must be a valid email format to ensure messages are correctly delivered.
   */
  email?: string | null | undefined;
  /**
   * The website URL for the activity's location. This field is used to update the web address, providing a direct link to the location's online presence. Ensure the URL is complete and valid to facilitate easy access.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the activity's location. This field allows you to include any extra information or comments that might be relevant to the location. It can be used to store miscellaneous details that do not fit into other fields.
   */
  notes?: string | null | undefined;
  /**
   * The 'row_version' is a concurrency control token used to manage updates to the activity record. It ensures that updates do not overwrite changes made by others by checking this version before applying new changes. This string should be updated with each modification to maintain data integrity.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Defines how the activity should be visually represented or categorized in the CRM interface. This property allows users to set a display status that can affect how the activity is perceived or prioritized by users.
 */
export const UpdateActivityRequestShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
/**
 * Defines how the activity should be visually represented or categorized in the CRM interface. This property allows users to set a display status that can affect how the activity is perceived or prioritized by users.
 */
export type UpdateActivityRequestShowAs = ClosedEnum<
  typeof UpdateActivityRequestShowAs
>;

export type UpdateActivityRequestValue6 = {};

export type UpdateActivityRequestValue4 = {};

/**
 * The value assigned to the custom field, representing the actual data or information it holds. This property is optional and can be used to update the content of the custom field as needed, ensuring the activity record reflects the most current and relevant information.
 */
export type UpdateActivityRequestValue =
  | UpdateActivityRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateActivityRequestValue6>;

export type UpdateActivityRequestCustomFields = {
  /**
   * The unique identifier for each custom field within the activity. This ID is required to ensure that the correct custom field is being referenced and updated. It must be a valid string that uniquely identifies the custom field in the context of the activity.
   */
  id: string | null;
  /**
   * The name of the custom field, which serves as a label or identifier for the data it holds. This property is optional and can be used to provide a human-readable name for the custom field, aiding in its identification and use within the CRM.
   */
  name?: string | null | undefined;
  /**
   * Additional information or context about the custom field. This optional property can be used to describe the purpose or usage of the custom field, helping users understand its role within the activity record.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field, representing the actual data or information it holds. This property is optional and can be used to update the content of the custom field as needed, ensuring the activity record reflects the most current and relevant information.
   */
  value?:
    | UpdateActivityRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateActivityRequestValue6>
    | null
    | undefined;
};

/**
 * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'cancelled'. This field helps track the attendee's participation status and is important for planning and resource allocation. Ensure the status accurately reflects the attendee's commitment to the activity.
 */
export const UpdateActivityRequestStatus = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'cancelled'. This field helps track the attendee's participation status and is important for planning and resource allocation. Ensure the status accurately reflects the attendee's commitment to the activity.
 */
export type UpdateActivityRequestStatus = ClosedEnum<
  typeof UpdateActivityRequestStatus
>;

export type UpdateActivityRequestAttendees = {
  /**
   * The full name of the attendee. This field is used to identify the attendee in a human-readable format and should be a concatenation of first, middle, and last names if applicable. It is optional but recommended for clarity when listing attendees.
   */
  name?: string | null | undefined;
  /**
   * The first name of the attendee. This field is part of the attendee's full name and is used for personal identification within the activity. It is optional but can be used to personalize communications or records.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the attendee. This optional field can be included to provide a more complete identification of the attendee, especially in cases where middle names are commonly used for differentiation.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the attendee. This field is essential for identifying the attendee within the activity and is typically used in conjunction with the first name. It is optional but important for distinguishing between attendees with similar first names.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the attendee's name, such as 'Mr.', 'Ms.', or 'Dr.'. This field is optional and can be used to address attendees formally in communications related to the activity. Ensure the prefix is appropriate for the attendee's title or preference.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the attendee's name, such as 'Jr.', 'Sr.', or 'III'. This optional field can be used to distinguish attendees with similar names or to respect personal naming conventions. Ensure the suffix accurately reflects the attendee's designation.
   */
  suffix?: string | null | undefined;
  /**
   * The email address of the attendee, used for sending notifications and updates about the activity. This field should contain a valid email format and is crucial for ensuring the attendee receives all relevant communications. It is optional but recommended for effective engagement.
   */
  emailAddress?: string | null | undefined;
  /**
   * Indicates whether the attendee is the organizer of the activity. This boolean field helps identify the primary contact responsible for managing the activity. Set to 'true' if the attendee is the organizer, otherwise 'false'.
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * The current status of the attendee in relation to the activity, such as 'confirmed', 'tentative', or 'cancelled'. This field helps track the attendee's participation status and is important for planning and resource allocation. Ensure the status accurately reflects the attendee's commitment to the activity.
   */
  status?: UpdateActivityRequestStatus | null | undefined;
};

export type UpdateActivityRequestExtendPaths = {
  /**
   * Specifies the JSONPath string where the update should be applied within the activity record. This path must be a valid JSONPath expression, ensuring precise targeting of the field to be updated. Essential for directing the update operation to the correct location in the activity data structure.
   */
  path: string;
  /**
   * Defines the new value to be set at the specified JSONPath within the activity record. This value can be of any data type, allowing flexibility in updating various fields such as strings, numbers, or objects. Critical for applying the desired changes to the activity record, ensuring the data reflects the latest information.
   */
  value?: any | undefined;
};

export type UpdateActivityRequestPassThrough = {
  /**
   * This property specifies the unique identifier for the service to which the pass_through data should be applied. It is required to ensure that the custom data is directed to the correct service, facilitating precise updates in multi-service environments.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation that the pass_through data should target. This is particularly useful when the update involves multiple downstream requests, allowing for targeted modifications within a unified operation.
   */
  operationId?: string | undefined;
  /**
   * This property allows for the direct extension of the request body with any additional properties needed for the update. It provides a flexible structure to include extra data that may not be predefined, supporting custom extensions to the activity record.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects used for making structured data modifications via specific paths. This property enables precise updates to nested data structures within the activity record, allowing for detailed customization of the update process.
   */
  extendPaths?: Array<UpdateActivityRequestExtendPaths> | undefined;
};

export type UpdateActivityRequest = {
  /**
   * Specifies the date and time when the activity occurred. This property is used to update the timestamp of the activity in the CRM, ensuring accurate chronological tracking. The format should be a valid date-time string, typically in ISO 8601 format, to ensure consistency and proper parsing by the system.
   */
  activityDatetime?: string | null | undefined;
  /**
   * Indicates the total duration of the activity in seconds. This property helps in tracking the length of the activity, which can be useful for reporting and analysis purposes. Ensure the value is a non-negative integer representing the duration accurately.
   */
  durationSeconds?: number | null | undefined;
  /**
   * Identifies the user associated with the activity. This property links the activity to a specific user in the CRM, facilitating user-specific tracking and management. The value should be a valid user identifier within the system.
   */
  userId?: string | null | undefined;
  /**
   * Specifies the account related to the activity. This property is used to associate the activity with a particular account in the CRM, aiding in account-specific activity tracking. The value must be a valid account identifier recognized by the system.
   */
  accountId?: string | null | undefined;
  /**
   * Denotes the contact associated with the activity. This property links the activity to a specific contact, which is essential for maintaining accurate contact-related records in the CRM. The value should be a valid contact identifier within the system.
   */
  contactId?: string | null | undefined;
  /**
   * The unique identifier for the company associated with this activity. This field allows you to link the activity to a specific company within the CRM, facilitating better tracking and management of company-related interactions. Ensure the ID corresponds to an existing company record in the CRM.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier for the opportunity linked to this activity. Use this field to associate the activity with a particular sales opportunity, aiding in the management and tracking of opportunity-related tasks and communications. The ID should match an existing opportunity record in the CRM.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with this activity. This property is used to connect the activity to a specific lead, helping in organizing and monitoring lead-related activities. Ensure the ID is valid and corresponds to an existing lead in the CRM.
   */
  leadId?: string | null | undefined;
  /**
   * The unique identifier for the user who owns this activity. This field designates responsibility for the activity, allowing for clear assignment and accountability within the CRM. The ID should correspond to a valid user in the system.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier for the campaign related to this activity. Use this property to link the activity to a specific marketing campaign, which helps in tracking the effectiveness and engagement of campaign-related efforts. Ensure the ID matches an existing campaign in the CRM.
   */
  campaignId?: string | null | undefined;
  /**
   * The unique identifier for the case associated with this activity. This property allows you to link the activity to a specific case within the CRM, facilitating better tracking and management of related tasks. Ensure the case ID is a valid string that corresponds to an existing case record.
   */
  caseId?: string | null | undefined;
  /**
   * The unique identifier for the asset associated with this activity. Use this property to connect the activity to a particular asset, enabling detailed asset management and tracking within the CRM. The asset ID should be a valid string that matches an existing asset record.
   */
  assetId?: string | null | undefined;
  /**
   * The unique identifier for the contract related to this activity. This property is used to associate the activity with a specific contract, aiding in the management and monitoring of contract-related activities. Ensure the contract ID is a valid string that corresponds to an existing contract record.
   */
  contractId?: string | null | undefined;
  /**
   * The unique identifier for the product associated with this activity. This property links the activity to a specific product, which helps in tracking product-related interactions and updates within the CRM. The product ID must be a valid string that corresponds to an existing product record.
   */
  productId?: string | null | undefined;
  /**
   * The unique identifier for the solution related to this activity. Use this property to associate the activity with a particular solution, facilitating better management of solution-related tasks and updates. The solution ID should be a valid string that matches an existing solution record.
   */
  solutionId?: string | null | undefined;
  /**
   * The unique identifier for a custom object associated with the activity. This field allows you to link the activity to a specific custom object within the CRM, providing context and relevance to the activity record. It must be a valid string that corresponds to an existing custom object ID in the system.
   */
  customObjectId?: string | null | undefined;
  /**
   * Specifies the category or nature of the activity being updated. This required field helps classify the activity within the CRM, ensuring it is processed and displayed correctly. It must be a valid string that accurately represents the activity type.
   */
  type: UpdateActivityRequestType | null;
  /**
   * The title or name of the activity, providing a brief summary of its purpose. This optional field helps users quickly identify the activity in the CRM. It should be a concise string that effectively conveys the main focus of the activity.
   */
  title?: string | null | undefined;
  /**
   * A detailed explanation of the activity, offering more context and information. This optional field allows users to understand the specifics and objectives of the activity. It should be a clear and informative string that elaborates on the activity's purpose.
   */
  description?: string | null | undefined;
  /**
   * An internal note for additional context or remarks about the activity. This optional field is intended for internal use, providing insights or comments that are not visible to external users. It should be a string that captures any supplementary information relevant to the activity.
   */
  note?: string | null | undefined;
  /**
   * Specifies the location where the activity is taking place. This field is optional and can be used to provide additional context about the activity's venue or setting. It helps in identifying the geographical context of the activity within the CRM.
   */
  location?: string | null | undefined;
  /**
   * An object containing detailed address information for the activity's location. This optional field allows for a structured representation of the address, which can be useful for integrations that require precise location data.
   */
  locationAddress?: UpdateActivityRequestLocationAddress | undefined;
  /**
   * Indicates if the activity spans the entire day without a specific start or end time. This boolean flag helps in scheduling and displaying the activity as an all-day event in the CRM calendar. Set to 'true' for all-day events, otherwise 'false'.
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Determines the visibility of the activity within the CRM. When set to 'true', the activity is marked as private, restricting access to authorized users only. Use this flag to control who can view the activity details.
   */
  private?: boolean | null | undefined;
  /**
   * Specifies whether the activity involves multiple participants, classifying it as a group event. This boolean value helps in organizing and managing group activities within the CRM. Set to 'true' for group events, otherwise 'false'.
   */
  groupEvent?: boolean | null | undefined;
  /**
   * Defines the specific subcategory of the group event, providing additional context and classification. This string helps in further categorizing the event type for better organization and reporting within the CRM.
   */
  eventSubType?: string | null | undefined;
  /**
   * Specifies the category or nature of the group event associated with the activity. This property helps in classifying the activity for better organization and retrieval within the CRM. It should be a descriptive string that accurately represents the event type.
   */
  groupEventType?: string | null | undefined;
  /**
   * Indicates whether the activity is a subordinate or dependent event within a larger activity structure. This property is useful for organizing activities hierarchically, allowing for better management of related tasks or events.
   */
  child?: boolean | null | undefined;
  /**
   * Determines if the activity is stored in an archive state, meaning it is no longer active but retained for historical reference. This property is crucial for managing the lifecycle of activities, ensuring that only current and relevant activities are prominently displayed.
   */
  archived?: boolean | null | undefined;
  /**
   * Specifies whether the activity has been marked as deleted, effectively removing it from active records while potentially retaining it for recovery or audit purposes. This property is essential for maintaining data integrity and managing the visibility of activities within the CRM.
   */
  deleted?: boolean | null | undefined;
  /**
   * Defines how the activity should be visually represented or categorized in the CRM interface. This property allows users to set a display status that can affect how the activity is perceived or prioritized by users.
   */
  showAs?: UpdateActivityRequestShowAs | null | undefined;
  /**
   * Indicates whether the activity has been completed. This property is optional and should be set to true if the activity is finished, or false if it is still ongoing. It helps in tracking the status of activities within the CRM, ensuring accurate record-keeping and follow-up actions.
   */
  done?: boolean | null | undefined;
  /**
   * Specifies the start date and time of the activity in ISO 8601 format (e.g., '2023-10-15T08:00:00Z'). This optional field helps define when the activity begins, allowing for precise scheduling and time management within the CRM.
   */
  startDatetime?: string | null | undefined;
  /**
   * Defines the end date and time of the activity in ISO 8601 format (e.g., '2023-10-15T10:00:00Z'). This optional property is crucial for determining the duration of the activity and ensuring that it fits within the planned schedule.
   */
  endDatetime?: string | null | undefined;
  /**
   * Represents the specific date of the activity in ISO 8601 format (e.g., '2023-10-15'). This optional field is used to log the activity's occurrence date, which is essential for chronological tracking and reporting within the CRM.
   */
  activityDate?: string | null | undefined;
  /**
   * Indicates the end date of the activity in ISO 8601 format (e.g., '2023-10-15'). This optional property is used to specify when the activity concludes, which is important for managing timelines and ensuring activities are completed as scheduled.
   */
  endDate?: string | null | undefined;
  /**
   * Indicates if the activity is set to repeat over time. This property helps in managing recurring tasks or events within the CRM, ensuring that repeated activities are tracked without manual re-entry. Set this to true if the activity should recur, otherwise false.
   */
  recurrent?: boolean | undefined;
  /**
   * Specifies the date and time when a reminder for the activity should be triggered. This property is crucial for alerting users about upcoming tasks or meetings. The value must be in a valid date-time format (e.g., ISO 8601) to ensure proper scheduling.
   */
  reminderDatetime?: string | null | undefined;
  /**
   * Determines whether a reminder is activated for the activity. Use this property to enable or disable notifications for the activity, helping users stay informed about important tasks. Set to true to activate the reminder, otherwise false.
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The web address for accessing the video conference associated with the activity. This property allows users to join meetings directly from the CRM, facilitating seamless virtual collaboration. Ensure the URL is valid and accessible to participants.
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * A unique identifier for the video conference linked to the activity. This ID is used to manage and reference the specific video meeting within the CRM system. It should be a valid string that corresponds to the video conference service being used.
   */
  videoConferenceId?: string | null | undefined;
  /**
   * An array of custom fields associated with the activity. Each entry in this array allows you to specify additional, user-defined data that can be used to tailor the activity record to specific needs or business logic. This property is optional and can be omitted if no custom fields are needed for the update.
   */
  customFields?: Array<UpdateActivityRequestCustomFields> | undefined;
  /**
   * An array of attendees associated with the activity. Each attendee object within the array can include details such as name, first name, middle name, and last name. This property allows you to update the list of participants for the activity, ensuring accurate tracking of who is involved.
   */
  attendees?: Array<UpdateActivityRequestAttendees> | undefined;
  /**
   * The pass_through property is used to include service-specific custom data or structured modifications when updating an activity record. This allows for flexibility in handling unique service requirements or additional data that needs to be passed along with the update request. It is not mandatory to include this property unless specific service modifications are needed.
   */
  passThrough?: Array<UpdateActivityRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateActivityRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestType
> = z.nativeEnum(UpdateActivityRequestType);

/** @internal */
export const UpdateActivityRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestType
> = UpdateActivityRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestType$ {
  /** @deprecated use `UpdateActivityRequestType$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestType$inboundSchema;
  /** @deprecated use `UpdateActivityRequestType$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestType$outboundSchema;
}

/** @internal */
export const UpdateActivityRequestLocationAddressType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateActivityRequestLocationAddressType> = z
    .nativeEnum(UpdateActivityRequestLocationAddressType);

/** @internal */
export const UpdateActivityRequestLocationAddressType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateActivityRequestLocationAddressType> =
    UpdateActivityRequestLocationAddressType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestLocationAddressType$ {
  /** @deprecated use `UpdateActivityRequestLocationAddressType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateActivityRequestLocationAddressType$inboundSchema;
  /** @deprecated use `UpdateActivityRequestLocationAddressType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateActivityRequestLocationAddressType$outboundSchema;
}

/** @internal */
export const UpdateActivityRequestLocationAddress$inboundSchema: z.ZodType<
  UpdateActivityRequestLocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateActivityRequestLocationAddressType$inboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UpdateActivityRequestLocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UpdateActivityRequestLocationAddress$outboundSchema: z.ZodType<
  UpdateActivityRequestLocationAddress$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestLocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateActivityRequestLocationAddressType$outboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestLocationAddress$ {
  /** @deprecated use `UpdateActivityRequestLocationAddress$inboundSchema` instead. */
  export const inboundSchema =
    UpdateActivityRequestLocationAddress$inboundSchema;
  /** @deprecated use `UpdateActivityRequestLocationAddress$outboundSchema` instead. */
  export const outboundSchema =
    UpdateActivityRequestLocationAddress$outboundSchema;
  /** @deprecated use `UpdateActivityRequestLocationAddress$Outbound` instead. */
  export type Outbound = UpdateActivityRequestLocationAddress$Outbound;
}

export function updateActivityRequestLocationAddressToJSON(
  updateActivityRequestLocationAddress: UpdateActivityRequestLocationAddress,
): string {
  return JSON.stringify(
    UpdateActivityRequestLocationAddress$outboundSchema.parse(
      updateActivityRequestLocationAddress,
    ),
  );
}

export function updateActivityRequestLocationAddressFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestLocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateActivityRequestLocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestLocationAddress' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestShowAs$inboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestShowAs
> = z.nativeEnum(UpdateActivityRequestShowAs);

/** @internal */
export const UpdateActivityRequestShowAs$outboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestShowAs
> = UpdateActivityRequestShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestShowAs$ {
  /** @deprecated use `UpdateActivityRequestShowAs$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestShowAs$inboundSchema;
  /** @deprecated use `UpdateActivityRequestShowAs$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestShowAs$outboundSchema;
}

/** @internal */
export const UpdateActivityRequestValue6$inboundSchema: z.ZodType<
  UpdateActivityRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateActivityRequestValue6$Outbound = {};

/** @internal */
export const UpdateActivityRequestValue6$outboundSchema: z.ZodType<
  UpdateActivityRequestValue6$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestValue6$ {
  /** @deprecated use `UpdateActivityRequestValue6$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestValue6$inboundSchema;
  /** @deprecated use `UpdateActivityRequestValue6$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestValue6$outboundSchema;
  /** @deprecated use `UpdateActivityRequestValue6$Outbound` instead. */
  export type Outbound = UpdateActivityRequestValue6$Outbound;
}

export function updateActivityRequestValue6ToJSON(
  updateActivityRequestValue6: UpdateActivityRequestValue6,
): string {
  return JSON.stringify(
    UpdateActivityRequestValue6$outboundSchema.parse(
      updateActivityRequestValue6,
    ),
  );
}

export function updateActivityRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestValue6' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestValue4$inboundSchema: z.ZodType<
  UpdateActivityRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateActivityRequestValue4$Outbound = {};

/** @internal */
export const UpdateActivityRequestValue4$outboundSchema: z.ZodType<
  UpdateActivityRequestValue4$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestValue4$ {
  /** @deprecated use `UpdateActivityRequestValue4$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestValue4$inboundSchema;
  /** @deprecated use `UpdateActivityRequestValue4$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestValue4$outboundSchema;
  /** @deprecated use `UpdateActivityRequestValue4$Outbound` instead. */
  export type Outbound = UpdateActivityRequestValue4$Outbound;
}

export function updateActivityRequestValue4ToJSON(
  updateActivityRequestValue4: UpdateActivityRequestValue4,
): string {
  return JSON.stringify(
    UpdateActivityRequestValue4$outboundSchema.parse(
      updateActivityRequestValue4,
    ),
  );
}

export function updateActivityRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestValue4' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestValue$inboundSchema: z.ZodType<
  UpdateActivityRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateActivityRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateActivityRequestValue6$inboundSchema)),
]);

/** @internal */
export type UpdateActivityRequestValue$Outbound =
  | UpdateActivityRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateActivityRequestValue6$Outbound>;

/** @internal */
export const UpdateActivityRequestValue$outboundSchema: z.ZodType<
  UpdateActivityRequestValue$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestValue
> = z.union([
  z.lazy(() => UpdateActivityRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateActivityRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestValue$ {
  /** @deprecated use `UpdateActivityRequestValue$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestValue$inboundSchema;
  /** @deprecated use `UpdateActivityRequestValue$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestValue$outboundSchema;
  /** @deprecated use `UpdateActivityRequestValue$Outbound` instead. */
  export type Outbound = UpdateActivityRequestValue$Outbound;
}

export function updateActivityRequestValueToJSON(
  updateActivityRequestValue: UpdateActivityRequestValue,
): string {
  return JSON.stringify(
    UpdateActivityRequestValue$outboundSchema.parse(updateActivityRequestValue),
  );
}

export function updateActivityRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestValue' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestCustomFields$inboundSchema: z.ZodType<
  UpdateActivityRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateActivityRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateActivityRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type UpdateActivityRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | UpdateActivityRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateActivityRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateActivityRequestCustomFields$outboundSchema: z.ZodType<
  UpdateActivityRequestCustomFields$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateActivityRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateActivityRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestCustomFields$ {
  /** @deprecated use `UpdateActivityRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestCustomFields$inboundSchema;
  /** @deprecated use `UpdateActivityRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    UpdateActivityRequestCustomFields$outboundSchema;
  /** @deprecated use `UpdateActivityRequestCustomFields$Outbound` instead. */
  export type Outbound = UpdateActivityRequestCustomFields$Outbound;
}

export function updateActivityRequestCustomFieldsToJSON(
  updateActivityRequestCustomFields: UpdateActivityRequestCustomFields,
): string {
  return JSON.stringify(
    UpdateActivityRequestCustomFields$outboundSchema.parse(
      updateActivityRequestCustomFields,
    ),
  );
}

export function updateActivityRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestStatus
> = z.nativeEnum(UpdateActivityRequestStatus);

/** @internal */
export const UpdateActivityRequestStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestStatus
> = UpdateActivityRequestStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestStatus$ {
  /** @deprecated use `UpdateActivityRequestStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestStatus$inboundSchema;
  /** @deprecated use `UpdateActivityRequestStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestStatus$outboundSchema;
}

/** @internal */
export const UpdateActivityRequestAttendees$inboundSchema: z.ZodType<
  UpdateActivityRequestAttendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(UpdateActivityRequestStatus$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
  });
});

/** @internal */
export type UpdateActivityRequestAttendees$Outbound = {
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const UpdateActivityRequestAttendees$outboundSchema: z.ZodType<
  UpdateActivityRequestAttendees$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestAttendees
> = z.object({
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(UpdateActivityRequestStatus$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestAttendees$ {
  /** @deprecated use `UpdateActivityRequestAttendees$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestAttendees$inboundSchema;
  /** @deprecated use `UpdateActivityRequestAttendees$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestAttendees$outboundSchema;
  /** @deprecated use `UpdateActivityRequestAttendees$Outbound` instead. */
  export type Outbound = UpdateActivityRequestAttendees$Outbound;
}

export function updateActivityRequestAttendeesToJSON(
  updateActivityRequestAttendees: UpdateActivityRequestAttendees,
): string {
  return JSON.stringify(
    UpdateActivityRequestAttendees$outboundSchema.parse(
      updateActivityRequestAttendees,
    ),
  );
}

export function updateActivityRequestAttendeesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestAttendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestAttendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestAttendees' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateActivityRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateActivityRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateActivityRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateActivityRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestExtendPaths$ {
  /** @deprecated use `UpdateActivityRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateActivityRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateActivityRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateActivityRequestExtendPaths$Outbound;
}

export function updateActivityRequestExtendPathsToJSON(
  updateActivityRequestExtendPaths: UpdateActivityRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateActivityRequestExtendPaths$outboundSchema.parse(
      updateActivityRequestExtendPaths,
    ),
  );
}

export function updateActivityRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestPassThrough$inboundSchema: z.ZodType<
  UpdateActivityRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateActivityRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateActivityRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateActivityRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateActivityRequestPassThrough$outboundSchema: z.ZodType<
  UpdateActivityRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateActivityRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestPassThrough$ {
  /** @deprecated use `UpdateActivityRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateActivityRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateActivityRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateActivityRequestPassThrough$Outbound;
}

export function updateActivityRequestPassThroughToJSON(
  updateActivityRequestPassThrough: UpdateActivityRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateActivityRequestPassThrough$outboundSchema.parse(
      updateActivityRequestPassThrough,
    ),
  );
}

export function updateActivityRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequest$inboundSchema: z.ZodType<
  UpdateActivityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateActivityRequestType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() =>
    UpdateActivityRequestLocationAddress$inboundSchema
  ).optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(UpdateActivityRequestShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => UpdateActivityRequestCustomFields$inboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => UpdateActivityRequestAttendees$inboundSchema))
    .optional(),
  pass_through: z.array(
    z.lazy(() => UpdateActivityRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateActivityRequest$Outbound = {
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: UpdateActivityRequestLocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<UpdateActivityRequestCustomFields$Outbound> | undefined;
  attendees?: Array<UpdateActivityRequestAttendees$Outbound> | undefined;
  pass_through?: Array<UpdateActivityRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateActivityRequest$outboundSchema: z.ZodType<
  UpdateActivityRequest$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequest
> = z.object({
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateActivityRequestType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() =>
    UpdateActivityRequestLocationAddress$outboundSchema
  ).optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(UpdateActivityRequestShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => UpdateActivityRequestCustomFields$outboundSchema),
  ).optional(),
  attendees: z.array(
    z.lazy(() => UpdateActivityRequestAttendees$outboundSchema),
  ).optional(),
  passThrough: z.array(
    z.lazy(() => UpdateActivityRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequest$ {
  /** @deprecated use `UpdateActivityRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequest$inboundSchema;
  /** @deprecated use `UpdateActivityRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequest$outboundSchema;
  /** @deprecated use `UpdateActivityRequest$Outbound` instead. */
  export type Outbound = UpdateActivityRequest$Outbound;
}

export function updateActivityRequestToJSON(
  updateActivityRequest: UpdateActivityRequest,
): string {
  return JSON.stringify(
    UpdateActivityRequest$outboundSchema.parse(updateActivityRequest),
  );
}

export function updateActivityRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequest' from JSON`,
  );
}
