/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the category or nature of the activity, such as 'meeting', 'call', or 'task'. This field is mandatory and helps in classifying the activity for better tracking and reporting within the CRM. Ensure the type is a valid string that matches predefined activity types in the system.
 */
export const UpdateActivityRequestType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * Specifies the category or nature of the activity, such as 'meeting', 'call', or 'task'. This field is mandatory and helps in classifying the activity for better tracking and reporting within the CRM. Ensure the type is a valid string that matches predefined activity types in the system.
 */
export type UpdateActivityRequestType = ClosedEnum<
  typeof UpdateActivityRequestType
>;

/**
 * Indicates the category or nature of the address, such as 'business' or 'residential'. This helps in classifying the address type for better organization and retrieval within the CRM system.
 */
export const UpdateActivityRequestLocationAddressType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Indicates the category or nature of the address, such as 'business' or 'residential'. This helps in classifying the address type for better organization and retrieval within the CRM system.
 */
export type UpdateActivityRequestLocationAddressType = ClosedEnum<
  typeof UpdateActivityRequestLocationAddressType
>;

/**
 * An object containing detailed address information for the activity's location. This is useful for activities that require precise geographical data, such as meetings or events. It allows for structured address data to be stored and retrieved within the CRM.
 */
export type UpdateActivityRequestLocationAddress = {
  /**
   * A unique identifier for the specific address entry associated with the activity. This ID is used to reference and manage address records within the CRM, ensuring accurate linkage between activities and their locations.
   */
  id?: string | null | undefined;
  /**
   * Indicates the category or nature of the address, such as 'business' or 'residential'. This helps in classifying the address type for better organization and retrieval within the CRM system.
   */
  type?: UpdateActivityRequestLocationAddressType | null | undefined;
  /**
   * A comprehensive address string that provides the full address details in a single line. This is particularly useful when APIs do not support structured address formats, ensuring that all necessary location information is captured.
   */
  string?: string | null | undefined;
  /**
   * The name of the address location, used to identify the specific address associated with the activity. This field is optional and can include any descriptive name that helps distinguish this address from others. It should be a string that provides meaningful context within the CRM system.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, typically including the street number, street name, and any suite or apartment number. This field is optional but should be formatted as a string that accurately represents the first line of the address for the activity. It is crucial for ensuring precise location details within the CRM.
   */
  line1?: string | null | undefined;
  /**
   * An additional line for the address, often used for supplementary information such as building names or secondary address details. This optional field should be a string that complements the primary address line, providing further clarity and specificity for the activity's location.
   */
  line2?: string | null | undefined;
  /**
   * A third line for the address, allowing for extra details that may not fit in the first two lines. This optional field should be a string that adds further context to the address, ensuring comprehensive location information for the activity within the CRM.
   */
  line3?: string | null | undefined;
  /**
   * A fourth line for the address, used for any additional address information necessary for complete clarity. This optional field should be a string that provides any remaining details needed to fully describe the activity's location, supporting thorough record-keeping in the CRM.
   */
  line4?: string | null | undefined;
  /**
   * Specifies the street number of the activity's location. This property is used to update the address details of an activity, ensuring accurate location information in the CRM. It should be a string representing the numeric or alphanumeric identifier of the building.
   */
  streetNumber?: string | null | undefined;
  /**
   * Indicates the city where the activity is located. This property helps in updating the geographical details of an activity, which is crucial for location-based services and reporting within the CRM. The city name should be a valid string representing the locality.
   */
  city?: string | null | undefined;
  /**
   * Denotes the state or region of the activity's location. This property is essential for refining the address details of an activity, aiding in regional categorization and analysis within the CRM. The state name should be a valid string corresponding to the administrative division.
   */
  state?: string | null | undefined;
  /**
   * Represents the postal code or ZIP code of the activity's location. This property is used to enhance the precision of the address in the CRM, facilitating accurate mail delivery and location-based analytics. The postal code should be a valid string following the local postal format.
   */
  postalCode?: string | null | undefined;
  /**
   * Specifies the country code of the activity's location, following the ISO 3166-1 alpha-2 standard. This property is crucial for international address standardization and ensures that the activity's location is correctly identified globally within the CRM. The country code must be a two-letter string as per the ISO standard.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the activity's location. This property is used to specify the geographical latitude for mapping and location-based services. It should be a valid string representation of a decimal number, typically ranging from -90.0 to 90.0, to ensure accurate geolocation.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the activity's location. This property is essential for defining the geographical longitude, which works in conjunction with latitude for precise mapping. It should be a valid string representation of a decimal number, usually ranging from -180.0 to 180.0, to ensure accurate geolocation.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality associated with the activity's location. This property helps in identifying the specific administrative region within a broader geographical area. It should be a string that accurately reflects the county name, aiding in regional categorization and reporting.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person at the specified location. This property is used to identify the primary individual associated with the activity's address, facilitating communication and coordination. It should be a string containing the contact's first and last name, ensuring clarity in identification.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title of the contact person at the location. This property is used to address the contact person appropriately in communications, reflecting their preferred title such as Mr., Ms., Dr., etc. It should be a string that accurately represents the contact's salutation, enhancing professionalism in interactions.
   */
  salutation?: string | null | undefined;
  /**
   * The contact phone number associated with the activity's location. This field is optional and should be formatted according to international standards to ensure proper communication. It helps in maintaining direct contact details for the location within the CRM system.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number for the activity's location, allowing for alternative communication methods. This optional field should be formatted correctly to ensure successful fax transmissions. It supports the CRM's ability to store comprehensive contact information for each location.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the activity's location, used for electronic communication. This optional field must be a valid email format to facilitate accurate and efficient correspondence. It ensures that email communications are directed to the correct location contact.
   */
  email?: string | null | undefined;
  /**
   * The website URL for the activity's location, providing a digital point of reference. This optional field should be a valid URL format, allowing users to access more information about the location online. It enhances the CRM's data by linking to external resources.
   */
  website?: string | null | undefined;
  /**
   * Additional notes or comments about the activity's location, offering context or special instructions. This optional field allows for free-form text, enabling users to include any relevant information that doesn't fit into other structured fields. It enriches the CRM record with personalized insights.
   */
  notes?: string | null | undefined;
  /**
   * The `location_address.row_version` is a concurrency control token used to manage updates to the activity's location address. It ensures that updates do not overwrite changes made by others, by requiring the latest version of the object. This string should be the current version value of the location address to prevent data conflicts during the update process.
   */
  rowVersion?: string | null | undefined;
};

/**
 * Defines how the activity should be displayed in terms of status or availability, such as 'busy' or 'free'. This property helps in visualizing the activity's impact on scheduling and availability within the CRM. Accepts any valid string that represents a display status.
 */
export const UpdateActivityRequestShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
/**
 * Defines how the activity should be displayed in terms of status or availability, such as 'busy' or 'free'. This property helps in visualizing the activity's impact on scheduling and availability within the CRM. Accepts any valid string that represents a display status.
 */
export type UpdateActivityRequestShowAs = ClosedEnum<
  typeof UpdateActivityRequestShowAs
>;

export type UpdateActivityRequestValue6 = {};

export type UpdateActivityRequestValue4 = {};

/**
 * The actual data or value stored in the custom field, which can vary based on the field's intended use. This field is optional and should be formatted according to the data type expected by the custom field's definition.
 */
export type UpdateActivityRequestValue =
  | UpdateActivityRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateActivityRequestValue6>;

export type UpdateActivityRequestCustomFields = {
  /**
   * A unique identifier for each custom field within the activity. This ID is essential for distinguishing between different custom fields and must be a valid string that uniquely identifies the field within the CRM system.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, providing a human-readable label that describes the field's purpose. This is optional but recommended for clarity when managing multiple custom fields.
   */
  name?: string | null | undefined;
  /**
   * A detailed explanation of what the custom field represents or how it should be used. This optional field helps provide context and guidance for users interacting with the custom field.
   */
  description?: string | null | undefined;
  /**
   * The actual data or value stored in the custom field, which can vary based on the field's intended use. This field is optional and should be formatted according to the data type expected by the custom field's definition.
   */
  value?:
    | UpdateActivityRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateActivityRequestValue6>
    | null
    | undefined;
};

/**
 * The current status of the attendee in relation to the activity, such as confirmed, tentative, or declined. This optional field helps track the attendee's participation status, aiding in the management and coordination of the activity within the CRM. Ensure the status is a valid string reflecting the attendee's current state.
 */
export const UpdateActivityRequestStatus = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * The current status of the attendee in relation to the activity, such as confirmed, tentative, or declined. This optional field helps track the attendee's participation status, aiding in the management and coordination of the activity within the CRM. Ensure the status is a valid string reflecting the attendee's current state.
 */
export type UpdateActivityRequestStatus = ClosedEnum<
  typeof UpdateActivityRequestStatus
>;

export type UpdateActivityRequestAttendees = {
  /**
   * The full name of the attendee, combining first, middle, and last names if applicable. This field is used to identify the attendee within the activity and should be a non-empty string. It helps in personalizing communication and ensuring the correct individual is associated with the activity.
   */
  name?: string | null | undefined;
  /**
   * The first name of the attendee, used for personal identification within the activity. This field should be a non-empty string and is essential for addressing the attendee correctly in communications and records.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the attendee, which can be included for more precise identification. This field is optional and can be left empty if not applicable. It helps in distinguishing individuals with similar first and last names.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the attendee, crucial for identifying the individual in the activity records. This field should be a non-empty string and is used in conjunction with the first name to ensure accurate identification and communication.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix for the attendee's name, such as Mr., Ms., or Dr. This field is optional and can be used to provide a formal title for the attendee, enhancing the personalization of communication within the CRM. Ensure the prefix is a valid string if provided.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix for the attendee's name, such as Jr., Sr., or III. This optional field allows for the inclusion of generational or professional titles, ensuring accurate representation of the attendee's full name in the CRM. If used, the suffix should be a valid string.
   */
  suffix?: string | null | undefined;
  /**
   * The email address of the attendee, used for communication and identification purposes within the CRM. This optional field should be a valid email format to ensure successful delivery of notifications and updates related to the activity.
   */
  emailAddress?: string | null | undefined;
  /**
   * Indicates whether the attendee is the organizer of the activity. This boolean field helps in identifying the primary contact responsible for the activity, which can influence permissions and notifications within the CRM. Set to true if the attendee is the organizer, otherwise false.
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * The current status of the attendee in relation to the activity, such as confirmed, tentative, or declined. This optional field helps track the attendee's participation status, aiding in the management and coordination of the activity within the CRM. Ensure the status is a valid string reflecting the attendee's current state.
   */
  status?: UpdateActivityRequestStatus | null | undefined;
};

export type UpdateActivityRequestExtendPaths = {
  /**
   * This property specifies the JSONPath string that indicates the exact location within the activity record where the new value should be applied. It is crucial for pinpointing the precise field to update, ensuring that changes are made accurately within the CRM system. The path must be a valid JSONPath expression, and it is required for the operation to succeed.
   */
  path: string;
  /**
   * This property represents the new value to be set at the specified JSONPath within the activity record. It can be of any data type, depending on the field being updated, allowing for flexible modifications to the activity's details. This value is essential for the update operation, as it defines the new state of the targeted field.
   */
  value?: any | undefined;
};

export type UpdateActivityRequestPassThrough = {
  /**
   * A mandatory string that uniquely identifies the service to which the pass_through data should be applied. This ensures that the custom data is directed to the correct service within the CRM's integrated environment.
   */
  serviceId: string;
  /**
   * An optional string identifier for a specific workflow operation that the pass_through data should target. This is particularly useful for operations involving multiple downstream requests, allowing precise control over where the data is applied.
   */
  operationId?: string | undefined;
  /**
   * An optional object that allows for the direct extension of properties. This can include any additional fields that need to be added to the activity record, providing flexibility in how the record is updated.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An optional array of objects used for structured data modifications via specific paths. This allows developers to specify precise changes to the activity record, ensuring that updates are applied exactly as intended.
   */
  extendPaths?: Array<UpdateActivityRequestExtendPaths> | undefined;
};

export type UpdateActivityRequest = {
  /**
   * Specifies the exact date and time when the activity occurred or is scheduled to occur. This property should be formatted as an ISO 8601 string (e.g., '2023-10-15T13:45:30Z') to ensure consistency and proper parsing. It helps in tracking and organizing activities chronologically within the CRM system.
   */
  activityDatetime?: string | null | undefined;
  /**
   * Indicates the total duration of the activity in seconds. This integer value helps in calculating time spent on activities, which can be useful for reporting and analysis purposes. Ensure the value is a non-negative integer to accurately reflect the activity's length.
   */
  durationSeconds?: number | null | undefined;
  /**
   * Represents the unique identifier of the user associated with the activity. This string should match the user's ID within the CRM system, linking the activity to the correct user for accountability and tracking purposes. It is crucial for assigning responsibility and managing user-specific activity logs.
   */
  userId?: string | null | undefined;
  /**
   * Denotes the unique identifier of the account related to the activity. This string should correspond to an existing account ID in the CRM, ensuring the activity is correctly associated with the relevant account. It aids in maintaining accurate records of account interactions and activities.
   */
  accountId?: string | null | undefined;
  /**
   * Specifies the unique identifier of the contact associated with the activity. This string must match a contact ID within the CRM to link the activity to the appropriate contact. It is essential for tracking interactions and maintaining comprehensive contact histories.
   */
  contactId?: string | null | undefined;
  /**
   * The unique identifier for the company associated with the activity. This property allows the activity to be linked to a specific company within the CRM, facilitating organization and retrieval of company-related activities. It should be a valid string that corresponds to an existing company record in the CRM.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier for the opportunity associated with the activity. This property is used to connect the activity to a specific sales opportunity, helping track progress and updates related to that opportunity. Ensure it is a valid string that matches an existing opportunity record in the CRM.
   */
  opportunityId?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with the activity. This property links the activity to a particular lead, enabling tracking of interactions and updates pertinent to that lead. It should be a valid string that corresponds to an existing lead record in the CRM.
   */
  leadId?: string | null | undefined;
  /**
   * The unique identifier for the user who owns or is responsible for the activity. This property designates the activity's owner, ensuring accountability and proper assignment within the CRM. It must be a valid string that matches an existing user record in the CRM.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier for the campaign associated with the activity. This property connects the activity to a specific marketing campaign, allowing for tracking and analysis of campaign-related activities. Ensure it is a valid string that corresponds to an existing campaign record in the CRM.
   */
  campaignId?: string | null | undefined;
  /**
   * The unique identifier for the case associated with this activity. This property allows you to link the activity to a specific case within the CRM, facilitating better tracking and management of related tasks. Ensure the ID corresponds to an existing case record.
   */
  caseId?: string | null | undefined;
  /**
   * The unique identifier for the asset associated with this activity. Use this property to connect the activity to a particular asset, enabling detailed asset management and tracking within the CRM. The ID should match an existing asset record.
   */
  assetId?: string | null | undefined;
  /**
   * The unique identifier for the contract related to this activity. This property is used to associate the activity with a specific contract, ensuring that all contract-related activities are easily accessible and manageable. The ID must correspond to an existing contract record.
   */
  contractId?: string | null | undefined;
  /**
   * The unique identifier for the product associated with this activity. By specifying this property, you can link the activity to a particular product, aiding in product-related activity tracking and analysis. Ensure the ID matches an existing product record.
   */
  productId?: string | null | undefined;
  /**
   * The unique identifier for the solution related to this activity. This property helps in associating the activity with a specific solution, which is crucial for managing solution-related tasks and updates within the CRM. The ID should correspond to an existing solution record.
   */
  solutionId?: string | null | undefined;
  /**
   * The unique identifier for a custom object associated with the activity. This optional field allows you to link the activity to a specific custom object within the CRM, facilitating better organization and retrieval of related data. Ensure the ID corresponds to an existing custom object in the system.
   */
  customObjectId?: string | null | undefined;
  /**
   * Specifies the category or nature of the activity, such as 'meeting', 'call', or 'task'. This field is mandatory and helps in classifying the activity for better tracking and reporting within the CRM. Ensure the type is a valid string that matches predefined activity types in the system.
   */
  type: UpdateActivityRequestType | null;
  /**
   * A brief, descriptive title for the activity that summarizes its purpose or content. This optional field aids in quickly identifying the activity in lists and reports. The title should be concise yet informative, typically under 100 characters.
   */
  title?: string | null | undefined;
  /**
   * A detailed explanation or summary of the activity, providing context and specifics about what the activity entails. This optional field can include any relevant information that helps in understanding the activity's scope and objectives. There are no strict format requirements, but clarity and completeness are encouraged.
   */
  description?: string | null | undefined;
  /**
   * An internal note for additional context or remarks about the activity, visible only to CRM users. This optional field is useful for adding personal observations or reminders that do not need to be shared with external parties. Notes should be concise and relevant to the activity's context.
   */
  note?: string | null | undefined;
  /**
   * Specifies the venue or place where the activity is scheduled to occur. This field can be left empty if the activity does not have a physical location. It helps users identify the geographical context of the activity within the CRM system.
   */
  location?: string | null | undefined;
  /**
   * An object containing detailed address information for the activity's location. This is useful for activities that require precise geographical data, such as meetings or events. It allows for structured address data to be stored and retrieved within the CRM.
   */
  locationAddress?: UpdateActivityRequestLocationAddress | undefined;
  /**
   * The `all_day_event` property indicates whether the activity spans the entire day. Set this to `true` if the activity does not have specific start and end times, ensuring it is treated as an all-day event in the CRM system. This helps in scheduling and calendar management within the CRM.
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * The `private` property specifies if the activity is confidential and should be restricted from general visibility. When set to `true`, the activity will only be accessible to authorized users, maintaining privacy and security of sensitive information.
   */
  private?: boolean | null | undefined;
  /**
   * The `group_event` property determines if the activity involves multiple participants. Set this to `true` for events that include more than one attendee, facilitating group scheduling and coordination within the CRM.
   */
  groupEvent?: boolean | null | undefined;
  /**
   * The `event_sub_type` specifies the detailed classification of the group event. Use this to provide additional context about the nature of the event, such as 'meeting', 'workshop', or 'conference', enhancing the CRM's ability to categorize and manage events effectively.
   */
  eventSubType?: string | null | undefined;
  /**
   * Specifies the type of group event associated with the activity. This property helps categorize the activity within the CRM, allowing for better organization and retrieval. Accepts any valid string that represents a predefined group event type.
   */
  groupEventType?: string | null | undefined;
  /**
   * Indicates whether the activity is a subordinate or dependent of another activity. This boolean flag helps in structuring activities hierarchically within the CRM. Set to true if the activity is a child activity, otherwise false.
   */
  child?: boolean | null | undefined;
  /**
   * Determines if the activity is archived, meaning it is no longer active but retained for historical reference. This property is useful for filtering out inactive activities in queries. Set to true to archive the activity, otherwise false.
   */
  archived?: boolean | null | undefined;
  /**
   * Indicates whether the activity has been marked as deleted. This flag helps manage the lifecycle of activities, allowing them to be excluded from active views without permanent removal. Set to true to mark the activity as deleted, otherwise false.
   */
  deleted?: boolean | null | undefined;
  /**
   * Defines how the activity should be displayed in terms of status or availability, such as 'busy' or 'free'. This property helps in visualizing the activity's impact on scheduling and availability within the CRM. Accepts any valid string that represents a display status.
   */
  showAs?: UpdateActivityRequestShowAs | null | undefined;
  /**
   * Indicates whether the activity has been completed. This property is optional and should be set to true if the activity is finished, or false if it is still ongoing. It helps in tracking the status of activities within the CRM system, ensuring accurate reporting and follow-up actions.
   */
  done?: boolean | null | undefined;
  /**
   * Specifies the start date and time of the activity in ISO 8601 format (e.g., '2023-10-05T14:48:00.000Z'). This optional property helps in scheduling and organizing activities, allowing users to see when an activity is set to begin. It is crucial for time management and planning within the CRM.
   */
  startDatetime?: string | null | undefined;
  /**
   * Defines the end date and time of the activity, formatted in ISO 8601 (e.g., '2023-10-05T16:48:00.000Z'). This optional property is used to mark when an activity is expected to conclude, aiding in the management of time slots and resource allocation within the CRM system.
   */
  endDatetime?: string | null | undefined;
  /**
   * Represents the specific date on which the activity occurs, formatted as a date string (e.g., '2023-10-05'). This optional property is useful for activities that span multiple days or for setting a general date without specific start or end times. It helps in organizing and filtering activities by date within the CRM.
   */
  activityDate?: string | null | undefined;
  /**
   * Indicates the final date of the activity, formatted as a date string (e.g., '2023-10-05'). This optional property is particularly useful for activities that extend over multiple days, providing a clear endpoint for the activity's duration. It assists in planning and tracking long-term activities within the CRM.
   */
  endDate?: string | null | undefined;
  /**
   * Indicates whether the activity is set to repeat at regular intervals. This property helps in managing recurring tasks or events within the CRM, ensuring that repeated activities are automatically scheduled. Accepts a boolean value: true if the activity is recurrent, false otherwise.
   */
  recurrent?: boolean | undefined;
  /**
   * Specifies the date and time when a reminder for the activity should be triggered. This property is crucial for alerting users about upcoming activities. The value must be in ISO 8601 format (e.g., '2023-10-15T14:30:00Z') to ensure proper scheduling and time zone handling.
   */
  reminderDatetime?: string | null | undefined;
  /**
   * Determines whether a reminder is activated for the activity. This property allows users to enable or disable reminders, helping them manage notifications for important tasks. Accepts a boolean value: true to set a reminder, false to disable it.
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The URL link to join the video conference associated with the activity. This property facilitates virtual meetings by providing a direct link to the conference platform. Ensure the URL is valid and accessible to all intended participants.
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * A unique identifier for the video conference session linked to the activity. This property is used to reference the specific video conference, aiding in organization and retrieval of meeting details. It should be a valid string that matches the conference provider's ID format.
   */
  videoConferenceId?: string | null | undefined;
  /**
   * An array of custom fields associated with the activity. Each entry in the array represents a specific custom field that can store additional information relevant to the activity. This allows for flexible data storage tailored to specific business needs.
   */
  customFields?: Array<UpdateActivityRequestCustomFields> | undefined;
  /**
   * An array of attendee objects representing individuals participating in the activity. Each object should include detailed information about the attendee, such as their name and contact details. This property allows you to update the list of participants for the activity, ensuring accurate tracking and communication.
   */
  attendees?: Array<UpdateActivityRequestAttendees> | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or structured modifications when updating an activity record. This property is optional and can be used to pass additional data that may be required by specific services integrated with the CRM.
   */
  passThrough?: Array<UpdateActivityRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateActivityRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestType
> = z.nativeEnum(UpdateActivityRequestType);

/** @internal */
export const UpdateActivityRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestType
> = UpdateActivityRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestType$ {
  /** @deprecated use `UpdateActivityRequestType$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestType$inboundSchema;
  /** @deprecated use `UpdateActivityRequestType$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestType$outboundSchema;
}

/** @internal */
export const UpdateActivityRequestLocationAddressType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateActivityRequestLocationAddressType> = z
    .nativeEnum(UpdateActivityRequestLocationAddressType);

/** @internal */
export const UpdateActivityRequestLocationAddressType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateActivityRequestLocationAddressType> =
    UpdateActivityRequestLocationAddressType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestLocationAddressType$ {
  /** @deprecated use `UpdateActivityRequestLocationAddressType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateActivityRequestLocationAddressType$inboundSchema;
  /** @deprecated use `UpdateActivityRequestLocationAddressType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateActivityRequestLocationAddressType$outboundSchema;
}

/** @internal */
export const UpdateActivityRequestLocationAddress$inboundSchema: z.ZodType<
  UpdateActivityRequestLocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateActivityRequestLocationAddressType$inboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UpdateActivityRequestLocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UpdateActivityRequestLocationAddress$outboundSchema: z.ZodType<
  UpdateActivityRequestLocationAddress$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestLocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateActivityRequestLocationAddressType$outboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestLocationAddress$ {
  /** @deprecated use `UpdateActivityRequestLocationAddress$inboundSchema` instead. */
  export const inboundSchema =
    UpdateActivityRequestLocationAddress$inboundSchema;
  /** @deprecated use `UpdateActivityRequestLocationAddress$outboundSchema` instead. */
  export const outboundSchema =
    UpdateActivityRequestLocationAddress$outboundSchema;
  /** @deprecated use `UpdateActivityRequestLocationAddress$Outbound` instead. */
  export type Outbound = UpdateActivityRequestLocationAddress$Outbound;
}

export function updateActivityRequestLocationAddressToJSON(
  updateActivityRequestLocationAddress: UpdateActivityRequestLocationAddress,
): string {
  return JSON.stringify(
    UpdateActivityRequestLocationAddress$outboundSchema.parse(
      updateActivityRequestLocationAddress,
    ),
  );
}

export function updateActivityRequestLocationAddressFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestLocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateActivityRequestLocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestLocationAddress' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestShowAs$inboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestShowAs
> = z.nativeEnum(UpdateActivityRequestShowAs);

/** @internal */
export const UpdateActivityRequestShowAs$outboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestShowAs
> = UpdateActivityRequestShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestShowAs$ {
  /** @deprecated use `UpdateActivityRequestShowAs$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestShowAs$inboundSchema;
  /** @deprecated use `UpdateActivityRequestShowAs$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestShowAs$outboundSchema;
}

/** @internal */
export const UpdateActivityRequestValue6$inboundSchema: z.ZodType<
  UpdateActivityRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateActivityRequestValue6$Outbound = {};

/** @internal */
export const UpdateActivityRequestValue6$outboundSchema: z.ZodType<
  UpdateActivityRequestValue6$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestValue6$ {
  /** @deprecated use `UpdateActivityRequestValue6$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestValue6$inboundSchema;
  /** @deprecated use `UpdateActivityRequestValue6$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestValue6$outboundSchema;
  /** @deprecated use `UpdateActivityRequestValue6$Outbound` instead. */
  export type Outbound = UpdateActivityRequestValue6$Outbound;
}

export function updateActivityRequestValue6ToJSON(
  updateActivityRequestValue6: UpdateActivityRequestValue6,
): string {
  return JSON.stringify(
    UpdateActivityRequestValue6$outboundSchema.parse(
      updateActivityRequestValue6,
    ),
  );
}

export function updateActivityRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestValue6' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestValue4$inboundSchema: z.ZodType<
  UpdateActivityRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateActivityRequestValue4$Outbound = {};

/** @internal */
export const UpdateActivityRequestValue4$outboundSchema: z.ZodType<
  UpdateActivityRequestValue4$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestValue4$ {
  /** @deprecated use `UpdateActivityRequestValue4$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestValue4$inboundSchema;
  /** @deprecated use `UpdateActivityRequestValue4$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestValue4$outboundSchema;
  /** @deprecated use `UpdateActivityRequestValue4$Outbound` instead. */
  export type Outbound = UpdateActivityRequestValue4$Outbound;
}

export function updateActivityRequestValue4ToJSON(
  updateActivityRequestValue4: UpdateActivityRequestValue4,
): string {
  return JSON.stringify(
    UpdateActivityRequestValue4$outboundSchema.parse(
      updateActivityRequestValue4,
    ),
  );
}

export function updateActivityRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestValue4' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestValue$inboundSchema: z.ZodType<
  UpdateActivityRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateActivityRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateActivityRequestValue6$inboundSchema)),
]);

/** @internal */
export type UpdateActivityRequestValue$Outbound =
  | UpdateActivityRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateActivityRequestValue6$Outbound>;

/** @internal */
export const UpdateActivityRequestValue$outboundSchema: z.ZodType<
  UpdateActivityRequestValue$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestValue
> = z.union([
  z.lazy(() => UpdateActivityRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateActivityRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestValue$ {
  /** @deprecated use `UpdateActivityRequestValue$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestValue$inboundSchema;
  /** @deprecated use `UpdateActivityRequestValue$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestValue$outboundSchema;
  /** @deprecated use `UpdateActivityRequestValue$Outbound` instead. */
  export type Outbound = UpdateActivityRequestValue$Outbound;
}

export function updateActivityRequestValueToJSON(
  updateActivityRequestValue: UpdateActivityRequestValue,
): string {
  return JSON.stringify(
    UpdateActivityRequestValue$outboundSchema.parse(updateActivityRequestValue),
  );
}

export function updateActivityRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestValue' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestCustomFields$inboundSchema: z.ZodType<
  UpdateActivityRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateActivityRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateActivityRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type UpdateActivityRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | UpdateActivityRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateActivityRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateActivityRequestCustomFields$outboundSchema: z.ZodType<
  UpdateActivityRequestCustomFields$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateActivityRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateActivityRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestCustomFields$ {
  /** @deprecated use `UpdateActivityRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestCustomFields$inboundSchema;
  /** @deprecated use `UpdateActivityRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    UpdateActivityRequestCustomFields$outboundSchema;
  /** @deprecated use `UpdateActivityRequestCustomFields$Outbound` instead. */
  export type Outbound = UpdateActivityRequestCustomFields$Outbound;
}

export function updateActivityRequestCustomFieldsToJSON(
  updateActivityRequestCustomFields: UpdateActivityRequestCustomFields,
): string {
  return JSON.stringify(
    UpdateActivityRequestCustomFields$outboundSchema.parse(
      updateActivityRequestCustomFields,
    ),
  );
}

export function updateActivityRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestStatus
> = z.nativeEnum(UpdateActivityRequestStatus);

/** @internal */
export const UpdateActivityRequestStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateActivityRequestStatus
> = UpdateActivityRequestStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestStatus$ {
  /** @deprecated use `UpdateActivityRequestStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestStatus$inboundSchema;
  /** @deprecated use `UpdateActivityRequestStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestStatus$outboundSchema;
}

/** @internal */
export const UpdateActivityRequestAttendees$inboundSchema: z.ZodType<
  UpdateActivityRequestAttendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(UpdateActivityRequestStatus$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
  });
});

/** @internal */
export type UpdateActivityRequestAttendees$Outbound = {
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const UpdateActivityRequestAttendees$outboundSchema: z.ZodType<
  UpdateActivityRequestAttendees$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestAttendees
> = z.object({
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(UpdateActivityRequestStatus$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestAttendees$ {
  /** @deprecated use `UpdateActivityRequestAttendees$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestAttendees$inboundSchema;
  /** @deprecated use `UpdateActivityRequestAttendees$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestAttendees$outboundSchema;
  /** @deprecated use `UpdateActivityRequestAttendees$Outbound` instead. */
  export type Outbound = UpdateActivityRequestAttendees$Outbound;
}

export function updateActivityRequestAttendeesToJSON(
  updateActivityRequestAttendees: UpdateActivityRequestAttendees,
): string {
  return JSON.stringify(
    UpdateActivityRequestAttendees$outboundSchema.parse(
      updateActivityRequestAttendees,
    ),
  );
}

export function updateActivityRequestAttendeesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestAttendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestAttendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestAttendees' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateActivityRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateActivityRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateActivityRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateActivityRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestExtendPaths$ {
  /** @deprecated use `UpdateActivityRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateActivityRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateActivityRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateActivityRequestExtendPaths$Outbound;
}

export function updateActivityRequestExtendPathsToJSON(
  updateActivityRequestExtendPaths: UpdateActivityRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateActivityRequestExtendPaths$outboundSchema.parse(
      updateActivityRequestExtendPaths,
    ),
  );
}

export function updateActivityRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequestPassThrough$inboundSchema: z.ZodType<
  UpdateActivityRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateActivityRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateActivityRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateActivityRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateActivityRequestPassThrough$outboundSchema: z.ZodType<
  UpdateActivityRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateActivityRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequestPassThrough$ {
  /** @deprecated use `UpdateActivityRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateActivityRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateActivityRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateActivityRequestPassThrough$Outbound;
}

export function updateActivityRequestPassThroughToJSON(
  updateActivityRequestPassThrough: UpdateActivityRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateActivityRequestPassThrough$outboundSchema.parse(
      updateActivityRequestPassThrough,
    ),
  );
}

export function updateActivityRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateActivityRequest$inboundSchema: z.ZodType<
  UpdateActivityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateActivityRequestType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() =>
    UpdateActivityRequestLocationAddress$inboundSchema
  ).optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(UpdateActivityRequestShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => UpdateActivityRequestCustomFields$inboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => UpdateActivityRequestAttendees$inboundSchema))
    .optional(),
  pass_through: z.array(
    z.lazy(() => UpdateActivityRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateActivityRequest$Outbound = {
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: UpdateActivityRequestLocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<UpdateActivityRequestCustomFields$Outbound> | undefined;
  attendees?: Array<UpdateActivityRequestAttendees$Outbound> | undefined;
  pass_through?: Array<UpdateActivityRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateActivityRequest$outboundSchema: z.ZodType<
  UpdateActivityRequest$Outbound,
  z.ZodTypeDef,
  UpdateActivityRequest
> = z.object({
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateActivityRequestType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() =>
    UpdateActivityRequestLocationAddress$outboundSchema
  ).optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(UpdateActivityRequestShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => UpdateActivityRequestCustomFields$outboundSchema),
  ).optional(),
  attendees: z.array(
    z.lazy(() => UpdateActivityRequestAttendees$outboundSchema),
  ).optional(),
  passThrough: z.array(
    z.lazy(() => UpdateActivityRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityRequest$ {
  /** @deprecated use `UpdateActivityRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityRequest$inboundSchema;
  /** @deprecated use `UpdateActivityRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityRequest$outboundSchema;
  /** @deprecated use `UpdateActivityRequest$Outbound` instead. */
  export type Outbound = UpdateActivityRequest$Outbound;
}

export function updateActivityRequestToJSON(
  updateActivityRequest: UpdateActivityRequest,
): string {
  return JSON.stringify(
    UpdateActivityRequest$outboundSchema.parse(updateActivityRequest),
  );
}

export function updateActivityRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityRequest' from JSON`,
  );
}
