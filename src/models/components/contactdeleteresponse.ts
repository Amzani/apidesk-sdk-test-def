/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The root object containing the response data for the delete operation. This object encapsulates all relevant information returned by the API after a contact has been successfully deleted. It is always included in the response to confirm the operation's success and to provide any additional metadata or status information related to the deletion process.
 */
export type ContactDeleteResponseUnifiedId = {
  /**
   * The 'data.id' field represents the unique identifier of the user resource that has been updated. This identifier is crucial for confirming that the correct user record was modified. It is always included in the response to ensure that the client can verify the specific user record that was affected by the update operation.
   */
  id: string;
};

/**
 * Contact deleted
 */
export type ContactDeleteResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the delete operation, with a 200 status code signifying successful deletion of the contact. It is always included in the response to inform the client of the outcome of their request.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable explanation of the status code, such as 'OK' for a successful operation. It is included to give a clear understanding of the operation's result.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which service handled the request, especially useful when multiple integrations are in use. It is always included to specify the source of the response.
   */
  service: string;
  /**
   * The name of the Unified API resource that was targeted by the operation. This string indicates the type of resource, such as 'contact', that the delete operation was performed on. It is included to confirm the specific resource affected by the request.
   */
  resource: string;
  /**
   * The specific operation that was performed, in this case, 'delete'. This string confirms the action taken on the resource, ensuring clarity about what was executed as a result of the API call. It is always included to document the operation type.
   */
  operation: string;
  /**
   * The root object containing the response data for the delete operation. This object encapsulates all relevant information returned by the API after a contact has been successfully deleted. It is always included in the response to confirm the operation's success and to provide any additional metadata or status information related to the deletion process.
   */
  data: ContactDeleteResponseUnifiedId;
};

/** @internal */
export const ContactDeleteResponseUnifiedId$inboundSchema: z.ZodType<
  ContactDeleteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ContactDeleteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ContactDeleteResponseUnifiedId$outboundSchema: z.ZodType<
  ContactDeleteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  ContactDeleteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactDeleteResponseUnifiedId$ {
  /** @deprecated use `ContactDeleteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ContactDeleteResponseUnifiedId$inboundSchema;
  /** @deprecated use `ContactDeleteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ContactDeleteResponseUnifiedId$outboundSchema;
  /** @deprecated use `ContactDeleteResponseUnifiedId$Outbound` instead. */
  export type Outbound = ContactDeleteResponseUnifiedId$Outbound;
}

export function contactDeleteResponseUnifiedIdToJSON(
  contactDeleteResponseUnifiedId: ContactDeleteResponseUnifiedId,
): string {
  return JSON.stringify(
    ContactDeleteResponseUnifiedId$outboundSchema.parse(
      contactDeleteResponseUnifiedId,
    ),
  );
}

export function contactDeleteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ContactDeleteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactDeleteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactDeleteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const ContactDeleteResponse$inboundSchema: z.ZodType<
  ContactDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactDeleteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ContactDeleteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ContactDeleteResponseUnifiedId$Outbound;
};

/** @internal */
export const ContactDeleteResponse$outboundSchema: z.ZodType<
  ContactDeleteResponse$Outbound,
  z.ZodTypeDef,
  ContactDeleteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactDeleteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactDeleteResponse$ {
  /** @deprecated use `ContactDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = ContactDeleteResponse$inboundSchema;
  /** @deprecated use `ContactDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = ContactDeleteResponse$outboundSchema;
  /** @deprecated use `ContactDeleteResponse$Outbound` instead. */
  export type Outbound = ContactDeleteResponse$Outbound;
}

export function contactDeleteResponseToJSON(
  contactDeleteResponse: ContactDeleteResponse,
): string {
  return JSON.stringify(
    ContactDeleteResponse$outboundSchema.parse(contactDeleteResponse),
  );
}

export function contactDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactDeleteResponse' from JSON`,
  );
}
