/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the category or classification of the contact. This optional field helps in organizing contacts based on their type, such as 'customer', 'supplier', or 'partner', enhancing the CRM's ability to filter and manage contacts effectively.
 */
export const UpdateContactRequestType = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * Specifies the category or classification of the contact. This optional field helps in organizing contacts based on their type, such as 'customer', 'supplier', or 'partner', enhancing the CRM's ability to filter and manage contacts effectively.
 */
export type UpdateContactRequestType = ClosedEnum<
  typeof UpdateContactRequestType
>;

/**
 * The gender of the contact, which may be used for demographic analysis or personalized communication. This field is optional and should be provided only if relevant and necessary for the context of the CRM operations.
 */
export const UpdateContactRequestGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact, which may be used for demographic analysis or personalized communication. This field is optional and should be provided only if relevant and necessary for the context of the CRM operations.
 */
export type UpdateContactRequestGender = ClosedEnum<
  typeof UpdateContactRequestGender
>;

/**
 * Specifies the type of website, such as personal or business, associated with the contact. This optional field helps categorize the website for better organization and retrieval of contact information. Providing this detail enhances the context and usability of the contact's web data.
 */
export const UpdateContactRequestWebsitesType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of website, such as personal or business, associated with the contact. This optional field helps categorize the website for better organization and retrieval of contact information. Providing this detail enhances the context and usability of the contact's web data.
 */
export type UpdateContactRequestWebsitesType = ClosedEnum<
  typeof UpdateContactRequestWebsitesType
>;

export type UpdateContactRequestWebsites = {
  /**
   * This property represents the unique identifier for a website associated with the contact. It is used to specify which website entry to update when modifying contact details. Although not required, providing this ID ensures that the correct website record is targeted for updates.
   */
  id?: string | null | undefined;
  /**
   * The URL of the website associated with the contact. This field is required and must be a valid URL format. It is essential for updating or adding a website link to the contact's information, ensuring accurate and accessible web presence details.
   */
  url: string;
  /**
   * Specifies the type of website, such as personal or business, associated with the contact. This optional field helps categorize the website for better organization and retrieval of contact information. Providing this detail enhances the context and usability of the contact's web data.
   */
  type?: UpdateContactRequestWebsitesType | null | undefined;
};

/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the contact's profile. Ensure the type is a valid string that accurately reflects the address's role.
 */
export const UpdateContactRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the contact's profile. Ensure the type is a valid string that accurately reflects the address's role.
 */
export type UpdateContactRequestAddressesType = ClosedEnum<
  typeof UpdateContactRequestAddressesType
>;

export type UpdateContactRequestAddresses = {
  /**
   * The unique identifier for an address associated with the contact. This ID is used to specify which address entry to update, ensuring precise modifications to the contact's address details. It is not required but is crucial for targeting specific address records.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the contact's profile. Ensure the type is a valid string that accurately reflects the address's role.
   */
  type?: UpdateContactRequestAddressesType | null | undefined;
  /**
   * Represents the full address in a single string format, useful when structured address data is unavailable. This field should contain the complete address details as a single line, ensuring clarity and completeness for address identification.
   */
  string?: string | null | undefined;
  /**
   * Denotes the label or identifier for the address, such as 'Headquarters' or 'Branch Office'. This name helps in easily recognizing and managing multiple addresses associated with a contact. It should be a descriptive string that provides context to the address's significance.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, including details like street number, street name, and apartment or suite number. This field is essential for pinpointing the exact location and should be formatted as a clear, concise string.
   */
  line1?: string | null | undefined;
  /**
   * Additional address information, such as floor, building, or PO Box, that complements the primary address line. This optional field provides extra details to ensure accurate delivery or identification of the location.
   */
  line2?: string | null | undefined;
  /**
   * This optional field allows you to specify additional address details beyond the standard street address, such as a suite or apartment number. It helps in providing a more precise location for the contact, ensuring accurate delivery and correspondence. Use this field if the contact's address includes more than two lines of information.
   */
  line3?: string | null | undefined;
  /**
   * An optional field for further address details, such as building or floor information, which can be crucial for large complexes or specific delivery instructions. This field supports the inclusion of comprehensive address data, enhancing the accuracy of the contact's location information.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the contact's address, which is essential for identifying the exact location on a street. This field should contain only the numeric part of the address, ensuring precise geolocation and navigation.
   */
  streetNumber?: string | null | undefined;
  /**
   * Specifies the city where the contact is located, which is a critical part of the address for regional identification and mail delivery. Ensure this field contains the correct city name to facilitate accurate contact management and communication.
   */
  city?: string | null | undefined;
  /**
   * Indicates the state or province of the contact's address, which is necessary for regional sorting and legal jurisdiction purposes. This field should be filled with the official state name to ensure proper address validation and processing.
   */
  state?: string | null | undefined;
  /**
   * The postal code for the contact's address, used to identify the specific area or region. This field helps in accurately locating the contact's address for delivery or correspondence purposes. Ensure the postal code is formatted correctly according to the local postal system.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the contact's address, following the ISO 3166-1 alpha-2 standard. This code is essential for identifying the country in which the contact resides, ensuring proper international communication and compliance. It must be a valid two-letter country code.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the contact's address, used for geographical mapping and location services. This value helps in pinpointing the exact location of the address on a map. Ensure the latitude is a valid decimal number representing the geographical latitude.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the contact's address, crucial for geographical mapping and navigation purposes. This value allows for precise location tracking of the address on a map. Ensure the longitude is a valid decimal number representing the geographical longitude.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality of the contact's address, providing additional granularity for location identification. This field is useful for regional segmentation and local governance purposes. Include the full name of the county or sublocality as recognized locally.
   */
  county?: string | null | undefined;
  /**
   * The name of the contact person associated with the address. This field is used to identify the individual at the specified address and is crucial for personalizing communications and ensuring accurate contact management. It should be a valid string representing the full name or preferred name of the contact.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation for the contact person at the address, such as Mr., Mrs., or Dr. This field helps in addressing the contact appropriately in communications and should be a valid string that reflects the contact's preferred title.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the address, used for direct communication with the contact. This field should contain a valid phone number format, including country code if applicable, to ensure successful contact.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the address, used for sending documents via fax. This field should be a valid fax number format, including any necessary country and area codes, to ensure documents are sent correctly.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the address, used for electronic communication with the contact. This field must be a valid email format to ensure messages are delivered successfully and is essential for maintaining digital correspondence.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the contact's address. This field allows you to update or add a website link relevant to the contact's location. Ensure the URL is correctly formatted to avoid errors during the update process.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the contact's address. Use this field to include any extra information or comments that may be useful for understanding the context of the address. This can help in providing personalized service or remembering specific details about the contact.
   */
  notes?: string | null | undefined;
  /**
   * A version control string used to manage updates to the contact's address. This field helps prevent data conflicts by ensuring that updates are only applied if the row version matches the current version in the database. It is automatically incremented with each update, so ensure you provide the latest version when making changes.
   */
  rowVersion?: string | null | undefined;
};

export type UpdateContactRequestSocialLinks = {
  /**
   * The unique identifier for a specific social media link within the contact's profile. This ID is used to reference and update specific social links, ensuring precise modifications without affecting other entries. It must be a valid identifier that corresponds to an existing social link.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media profile associated with the contact. This field is required and must be a valid URL format, such as https://www.twitter.com/apideck. It helps in linking the contact's social presence to their CRM profile, ensuring comprehensive contact information.
   */
  url: string;
  /**
   * Specifies the type of social media platform for the provided URL, such as 'twitter' or 'linkedin'. This field is optional but helps categorize the social link, enhancing the organization of contact information within the CRM.
   */
  type?: string | null | undefined;
};

/**
 * Indicates the type of phone number provided, such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number for better organization and context within the CRM. Ensure the type is specified as a valid string to aid in contact management.
 */
export const UpdateContactRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Indicates the type of phone number provided, such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number for better organization and context within the CRM. Ensure the type is specified as a valid string to aid in contact management.
 */
export type UpdateContactRequestPhoneNumbersType = ClosedEnum<
  typeof UpdateContactRequestPhoneNumbersType
>;

export type UpdateContactRequestPhoneNumbers = {
  /**
   * A unique identifier for each phone number associated with the contact. This field is optional and is used to distinguish between different phone numbers, especially when updating or managing multiple numbers for a single contact.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, such as '+1' for the United States. This field is optional and should be included to ensure the phone number is correctly formatted for international dialing, enhancing the accuracy of contact information.
   */
  countryCode?: string | null | undefined;
  /**
   * Specifies the area code for the contact's phone number, which is essential for correctly routing calls to the appropriate geographic region. This field is optional but recommended for ensuring accurate dialing and contact identification. The area code should be a valid string representing the regional code, such as '323'.
   */
  areaCode?: string | null | undefined;
  /**
   * The primary phone number for the contact, which is required for direct communication. This field must be a valid phone number string, excluding the area code and extension, and is crucial for identifying the contact's main line of communication. Ensure the number is formatted correctly to facilitate successful calls.
   */
  number: string;
  /**
   * An optional extension for the contact's phone number, used to direct calls to a specific department or individual within an organization. This field should be a valid string representing the extension number, enhancing the precision of call routing within larger organizations.
   */
  extension?: string | null | undefined;
  /**
   * Indicates the type of phone number provided, such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number for better organization and context within the CRM. Ensure the type is specified as a valid string to aid in contact management.
   */
  type?: UpdateContactRequestPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address being updated, such as 'work' or 'personal'. This field helps categorize the email address within the contact's profile, although it is optional. Providing this information can enhance the organization and retrieval of contact details.
 */
export const UpdateContactRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address being updated, such as 'work' or 'personal'. This field helps categorize the email address within the contact's profile, although it is optional. Providing this information can enhance the organization and retrieval of contact details.
 */
export type UpdateContactRequestEmailsType = ClosedEnum<
  typeof UpdateContactRequestEmailsType
>;

export type UpdateContactRequestEmails = {
  /**
   * This property represents the unique identifier for an email address associated with the contact. It is used to specify which email address record should be updated within the contact's information. Although not required, providing this ID ensures that the correct email entry is modified, especially when multiple emails are associated with a single contact.
   */
  id?: string | null | undefined;
  /**
   * The primary email address for the contact that you wish to update. This field is required and must be a valid email format, ensuring that the contact's email information is accurate and up-to-date. It is crucial for communication and identification purposes within the CRM.
   */
  email: string | null;
  /**
   * Specifies the type of email address being updated, such as 'work' or 'personal'. This field helps categorize the email address within the contact's profile, although it is optional. Providing this information can enhance the organization and retrieval of contact details.
   */
  type?: UpdateContactRequestEmailsType | null | undefined;
};

export type UpdateContactRequestValue6 = {};

export type UpdateContactRequestValue4 = {};

/**
 * The value assigned to the custom field for the contact. This optional field is used to store specific data related to the custom field, which can be utilized for personalized contact management.
 */
export type UpdateContactRequestValue =
  | UpdateContactRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateContactRequestValue6>;

export type UpdateContactRequestCustomFields = {
  /**
   * The unique identifier for the custom field that you wish to update. This ID is required to specify which custom field in the contact's record should be modified. Ensure that this ID corresponds to an existing custom field within the contact's data.
   */
  id: string | null;
  /**
   * The name of the custom field that you want to update or add to the contact's record. This field is optional and can be used to provide a descriptive label for the custom field, enhancing the clarity of the contact's information.
   */
  name?: string | null | undefined;
  /**
   * Additional information or details about the custom field. This optional field allows you to provide context or notes regarding the custom field's purpose or usage within the contact's record.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field for the contact. This optional field is used to store specific data related to the custom field, which can be utilized for personalized contact management.
   */
  value?:
    | UpdateContactRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateContactRequestValue6>
    | null
    | undefined;
};

export type UpdateContactRequestExtendPaths = {
  /**
   * A required JSONPath string that specifies the exact location within the contact data where the update should be applied. This path is crucial for directing the API to the correct data point for modification, ensuring accurate updates.
   */
  path: string;
  /**
   * The required value to be set at the specified JSONPath. This property can be of any type, allowing for flexible updates to the contact data, depending on the nature of the modification needed.
   */
  value?: any | undefined;
};

export type UpdateContactRequestPassThrough = {
  /**
   * A mandatory identifier for the service to which the pass_through data applies. This ensures that the custom data is correctly routed and processed by the intended service, maintaining the integrity and specificity of the update operation.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation. This property is used to apply the pass-through to a particular operation, especially useful when multiple downstream requests are involved in Unify calls. It helps in tracking and managing the operation context effectively.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties. This property is used to include additional data that may not be explicitly defined in the API schema, enabling custom modifications and extensions as needed.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using paths. This property allows you to specify multiple JSONPath strings and corresponding values to update specific parts of the contact data, facilitating precise and targeted updates.
   */
  extendPaths?: Array<UpdateContactRequestExtendPaths> | undefined;
};

export type UpdateContactRequest = {
  /**
   * The full name of the contact to be updated. This field is required and must contain the complete name as it should appear in the CRM. It is essential for identifying and managing the contact within the system.
   */
  name: string | null;
  /**
   * The unique identifier of the user who owns the contact. This field is optional and can be used to assign or reassign ownership of the contact to a specific user within the CRM, facilitating better management and accountability.
   */
  ownerId?: string | null | undefined;
  /**
   * Specifies the category or classification of the contact. This optional field helps in organizing contacts based on their type, such as 'customer', 'supplier', or 'partner', enhancing the CRM's ability to filter and manage contacts effectively.
   */
  type?: UpdateContactRequestType | null | undefined;
  /**
   * The unique identifier of the company associated with the contact. This optional field links the contact to a specific company within the CRM, ensuring that all interactions and data are correctly attributed to the right organization.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company that the contact is associated with. This optional field provides a human-readable reference to the company, complementing the company_id and aiding in the identification and management of the contact's organizational affiliations.
   */
  companyName?: string | null | undefined;
  /**
   * The lead_id property is used to associate the contact with a specific lead within the CRM. This linkage helps in tracking the contact's origin and potential sales opportunities. It should be a valid string that uniquely identifies the lead, if applicable.
   */
  leadId?: string | null | undefined;
  /**
   * The first_name property represents the given name of the contact. This field is essential for personalizing communications and ensuring accurate identification of the contact within the CRM. It should be a valid string containing the contact's first name.
   */
  firstName?: string | null | undefined;
  /**
   * The middle_name property holds the middle name of the contact, if available. Including a middle name can help in distinguishing contacts with common first and last names. It should be a valid string representing the contact's middle name.
   */
  middleName?: string | null | undefined;
  /**
   * The last_name property specifies the family name or surname of the contact. This field is crucial for identifying and organizing contacts within the CRM. It should be a valid string containing the contact's last name.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix property is used to denote titles or honorifics associated with the contact, such as Mr., Ms., or Dr. This field can enhance the formality and accuracy of communications. It should be a valid string representing the contact's prefix.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the contact, such as 'Jr.', 'Sr.', or 'III'. This field is used to provide additional identification or distinction for the contact's name. It is optional and should be included only if relevant to the contact's full name.
   */
  suffix?: string | null | undefined;
  /**
   * The job title of the contact within their organization. This field helps identify the contact's role and responsibilities, which can be crucial for understanding their position in business communications. It is optional and should accurately reflect the contact's current job title.
   */
  title?: string | null | undefined;
  /**
   * The department within the organization where the contact works. This information is useful for directing communications and understanding the contact's area of expertise or responsibility. It is optional and should be specified if it helps in categorizing the contact's professional context.
   */
  department?: string | null | undefined;
  /**
   * The preferred language of communication for the contact, specified using the ISO 639-1 language code (e.g., 'EN' for English). This field ensures that communications are conducted in the contact's preferred language, enhancing clarity and engagement. It is optional but recommended for international contacts.
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact, which may be used for demographic analysis or personalized communication. This field is optional and should be provided only if relevant and necessary for the context of the CRM operations.
   */
  gender?: UpdateContactRequestGender | null | undefined;
  /**
   * The birthday of the contact. This field allows you to update the contact's date of birth, which can be used for personalized communications and age verification. The date should be formatted as YYYY-MM-DD to ensure proper processing and storage.
   */
  birthday?: string | null | undefined;
  /**
   * A base64 encoded string representing the contact's image. This field is used to update the contact's profile picture directly in the CRM. Ensure the image is properly encoded to avoid errors during the update process.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The URL of the contact's photo. This field allows you to link to an externally hosted image, providing a visual representation of the contact in the CRM. Ensure the URL is accessible and points to a valid image file.
   */
  photoUrl?: string | null | undefined;
  /**
   * The lead source of the contact. This field helps track where the contact originated from, aiding in marketing analysis and strategy. It should be a descriptive string that identifies the source accurately.
   */
  leadSource?: string | null | undefined;
  /**
   * The fax number of the contact. This field is used to update or add a fax number for the contact, facilitating communication through traditional fax methods. Ensure the number is formatted correctly according to international dialing standards.
   */
  fax?: string | null | undefined;
  /**
   * A brief overview or additional notes about the contact. This field allows you to provide context or specific details that may be relevant for customer relationship management. It is optional and can be updated to reflect any changes in the contact's information or status.
   */
  description?: string | null | undefined;
  /**
   * Represents the financial balance associated with the contact. This field is useful for tracking outstanding amounts or credits related to the contact. Ensure the value is a valid number reflecting the current balance status.
   */
  currentBalance?: number | null | undefined;
  /**
   * Indicates the current operational state of the contact within the CRM. This field helps in categorizing contacts based on their engagement or activity level. It should be a valid string that accurately reflects the contact's status.
   */
  status?: string | null | undefined;
  /**
   * A flag indicating whether the contact is currently active. This boolean value helps in filtering contacts that are actively engaged or available for communication. Set to true if the contact is active, otherwise false.
   */
  active?: boolean | null | undefined;
  /**
   * A list of websites associated with the contact. This array can include multiple URLs that are relevant to the contact's online presence or business operations. Each entry should be a valid URL format to ensure proper linkage.
   */
  websites?: Array<UpdateContactRequestWebsites> | undefined;
  /**
   * An array of address objects associated with the contact. Each object within the array can contain detailed address information to be updated. This field allows for comprehensive management of multiple addresses linked to a single contact.
   */
  addresses?: Array<UpdateContactRequestAddresses> | undefined;
  /**
   * An array of social media links associated with the contact. This field allows you to update or add multiple social media profiles, enhancing the contact's profile with relevant online presence information. Each entry in the array should be a valid social media link object.
   */
  socialLinks?: Array<UpdateContactRequestSocialLinks> | undefined;
  /**
   * An array of phone number objects associated with the contact. Each object within the array can contain details such as the phone number's unique ID and country code. This field is optional and allows for multiple phone numbers to be linked to a single contact, providing flexibility in contact methods.
   */
  phoneNumbers?: Array<UpdateContactRequestPhoneNumbers> | undefined;
  /**
   * A list of email addresses associated with the contact, allowing for multiple points of electronic communication. This optional array can include various email addresses, enhancing the contact's accessibility and ensuring comprehensive communication options. Each email should be a valid email format to ensure deliverability.
   */
  emails?: Array<UpdateContactRequestEmails> | undefined;
  /**
   * Indicates the domain part of the email address, which can be used for validation or categorization purposes. This optional field helps in filtering or organizing contacts based on their email domains, aiding in targeted communication strategies.
   */
  emailDomain?: string | null | undefined;
  /**
   * An array of custom fields that allow you to include additional, user-defined information about the contact. This field is optional and flexible, enabling the storage of extra data that may not fit into predefined fields, thus enhancing the contact's profile with personalized details.
   */
  customFields?: Array<UpdateContactRequestCustomFields> | undefined;
  /**
   * A list of tags associated with the contact. This optional array allows you to categorize or label the contact with relevant keywords, facilitating easier search and organization within the CRM.
   */
  tags?: Array<string> | null | undefined;
  /**
   * An array of opportunity IDs linked to the contact. This property allows you to associate the contact with specific sales opportunities, facilitating better tracking and management of potential deals. Each ID in the array should correspond to an existing opportunity within the CRM.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * The pass_through property is used to send custom data or modifications specific to a service when updating contact information. This allows for flexibility in handling service-specific requirements without altering the core API structure. Each entry should be structured according to the service's specifications.
   */
  passThrough?: Array<UpdateContactRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateContactRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestType
> = z.nativeEnum(UpdateContactRequestType);

/** @internal */
export const UpdateContactRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestType
> = UpdateContactRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestType$ {
  /** @deprecated use `UpdateContactRequestType$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestType$inboundSchema;
  /** @deprecated use `UpdateContactRequestType$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestType$outboundSchema;
}

/** @internal */
export const UpdateContactRequestGender$inboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestGender
> = z.nativeEnum(UpdateContactRequestGender);

/** @internal */
export const UpdateContactRequestGender$outboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestGender
> = UpdateContactRequestGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestGender$ {
  /** @deprecated use `UpdateContactRequestGender$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestGender$inboundSchema;
  /** @deprecated use `UpdateContactRequestGender$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestGender$outboundSchema;
}

/** @internal */
export const UpdateContactRequestWebsitesType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestWebsitesType
> = z.nativeEnum(UpdateContactRequestWebsitesType);

/** @internal */
export const UpdateContactRequestWebsitesType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestWebsitesType
> = UpdateContactRequestWebsitesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestWebsitesType$ {
  /** @deprecated use `UpdateContactRequestWebsitesType$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestWebsitesType$inboundSchema;
  /** @deprecated use `UpdateContactRequestWebsitesType$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestWebsitesType$outboundSchema;
}

/** @internal */
export const UpdateContactRequestWebsites$inboundSchema: z.ZodType<
  UpdateContactRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateContactRequestWebsitesType$inboundSchema).optional(),
});

/** @internal */
export type UpdateContactRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateContactRequestWebsites$outboundSchema: z.ZodType<
  UpdateContactRequestWebsites$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateContactRequestWebsitesType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestWebsites$ {
  /** @deprecated use `UpdateContactRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestWebsites$inboundSchema;
  /** @deprecated use `UpdateContactRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestWebsites$outboundSchema;
  /** @deprecated use `UpdateContactRequestWebsites$Outbound` instead. */
  export type Outbound = UpdateContactRequestWebsites$Outbound;
}

export function updateContactRequestWebsitesToJSON(
  updateContactRequestWebsites: UpdateContactRequestWebsites,
): string {
  return JSON.stringify(
    UpdateContactRequestWebsites$outboundSchema.parse(
      updateContactRequestWebsites,
    ),
  );
}

export function updateContactRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestWebsites' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestAddressesType
> = z.nativeEnum(UpdateContactRequestAddressesType);

/** @internal */
export const UpdateContactRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestAddressesType
> = UpdateContactRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestAddressesType$ {
  /** @deprecated use `UpdateContactRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestAddressesType$inboundSchema;
  /** @deprecated use `UpdateContactRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateContactRequestAddressesType$outboundSchema;
}

/** @internal */
export const UpdateContactRequestAddresses$inboundSchema: z.ZodType<
  UpdateContactRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UpdateContactRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UpdateContactRequestAddresses$outboundSchema: z.ZodType<
  UpdateContactRequestAddresses$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestAddresses$ {
  /** @deprecated use `UpdateContactRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestAddresses$inboundSchema;
  /** @deprecated use `UpdateContactRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestAddresses$outboundSchema;
  /** @deprecated use `UpdateContactRequestAddresses$Outbound` instead. */
  export type Outbound = UpdateContactRequestAddresses$Outbound;
}

export function updateContactRequestAddressesToJSON(
  updateContactRequestAddresses: UpdateContactRequestAddresses,
): string {
  return JSON.stringify(
    UpdateContactRequestAddresses$outboundSchema.parse(
      updateContactRequestAddresses,
    ),
  );
}

export function updateContactRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestAddresses' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestSocialLinks$inboundSchema: z.ZodType<
  UpdateContactRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateContactRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateContactRequestSocialLinks$outboundSchema: z.ZodType<
  UpdateContactRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestSocialLinks$ {
  /** @deprecated use `UpdateContactRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestSocialLinks$inboundSchema;
  /** @deprecated use `UpdateContactRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestSocialLinks$outboundSchema;
  /** @deprecated use `UpdateContactRequestSocialLinks$Outbound` instead. */
  export type Outbound = UpdateContactRequestSocialLinks$Outbound;
}

export function updateContactRequestSocialLinksToJSON(
  updateContactRequestSocialLinks: UpdateContactRequestSocialLinks,
): string {
  return JSON.stringify(
    UpdateContactRequestSocialLinks$outboundSchema.parse(
      updateContactRequestSocialLinks,
    ),
  );
}

export function updateContactRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateContactRequestPhoneNumbersType> = z.nativeEnum(
    UpdateContactRequestPhoneNumbersType,
  );

/** @internal */
export const UpdateContactRequestPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateContactRequestPhoneNumbersType> =
    UpdateContactRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestPhoneNumbersType$ {
  /** @deprecated use `UpdateContactRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateContactRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `UpdateContactRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateContactRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const UpdateContactRequestPhoneNumbers$inboundSchema: z.ZodType<
  UpdateContactRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UpdateContactRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateContactRequestPhoneNumbers$outboundSchema: z.ZodType<
  UpdateContactRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestPhoneNumbers$ {
  /** @deprecated use `UpdateContactRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `UpdateContactRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `UpdateContactRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = UpdateContactRequestPhoneNumbers$Outbound;
}

export function updateContactRequestPhoneNumbersToJSON(
  updateContactRequestPhoneNumbers: UpdateContactRequestPhoneNumbers,
): string {
  return JSON.stringify(
    UpdateContactRequestPhoneNumbers$outboundSchema.parse(
      updateContactRequestPhoneNumbers,
    ),
  );
}

export function updateContactRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestEmailsType
> = z.nativeEnum(UpdateContactRequestEmailsType);

/** @internal */
export const UpdateContactRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestEmailsType
> = UpdateContactRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestEmailsType$ {
  /** @deprecated use `UpdateContactRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestEmailsType$inboundSchema;
  /** @deprecated use `UpdateContactRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestEmailsType$outboundSchema;
}

/** @internal */
export const UpdateContactRequestEmails$inboundSchema: z.ZodType<
  UpdateContactRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateContactRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type UpdateContactRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateContactRequestEmails$outboundSchema: z.ZodType<
  UpdateContactRequestEmails$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateContactRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestEmails$ {
  /** @deprecated use `UpdateContactRequestEmails$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestEmails$inboundSchema;
  /** @deprecated use `UpdateContactRequestEmails$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestEmails$outboundSchema;
  /** @deprecated use `UpdateContactRequestEmails$Outbound` instead. */
  export type Outbound = UpdateContactRequestEmails$Outbound;
}

export function updateContactRequestEmailsToJSON(
  updateContactRequestEmails: UpdateContactRequestEmails,
): string {
  return JSON.stringify(
    UpdateContactRequestEmails$outboundSchema.parse(updateContactRequestEmails),
  );
}

export function updateContactRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestEmails' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestValue6$inboundSchema: z.ZodType<
  UpdateContactRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateContactRequestValue6$Outbound = {};

/** @internal */
export const UpdateContactRequestValue6$outboundSchema: z.ZodType<
  UpdateContactRequestValue6$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestValue6$ {
  /** @deprecated use `UpdateContactRequestValue6$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestValue6$inboundSchema;
  /** @deprecated use `UpdateContactRequestValue6$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestValue6$outboundSchema;
  /** @deprecated use `UpdateContactRequestValue6$Outbound` instead. */
  export type Outbound = UpdateContactRequestValue6$Outbound;
}

export function updateContactRequestValue6ToJSON(
  updateContactRequestValue6: UpdateContactRequestValue6,
): string {
  return JSON.stringify(
    UpdateContactRequestValue6$outboundSchema.parse(updateContactRequestValue6),
  );
}

export function updateContactRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestValue6' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestValue4$inboundSchema: z.ZodType<
  UpdateContactRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateContactRequestValue4$Outbound = {};

/** @internal */
export const UpdateContactRequestValue4$outboundSchema: z.ZodType<
  UpdateContactRequestValue4$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestValue4$ {
  /** @deprecated use `UpdateContactRequestValue4$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestValue4$inboundSchema;
  /** @deprecated use `UpdateContactRequestValue4$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestValue4$outboundSchema;
  /** @deprecated use `UpdateContactRequestValue4$Outbound` instead. */
  export type Outbound = UpdateContactRequestValue4$Outbound;
}

export function updateContactRequestValue4ToJSON(
  updateContactRequestValue4: UpdateContactRequestValue4,
): string {
  return JSON.stringify(
    UpdateContactRequestValue4$outboundSchema.parse(updateContactRequestValue4),
  );
}

export function updateContactRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestValue4' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestValue$inboundSchema: z.ZodType<
  UpdateContactRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateContactRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateContactRequestValue6$inboundSchema)),
]);

/** @internal */
export type UpdateContactRequestValue$Outbound =
  | UpdateContactRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateContactRequestValue6$Outbound>;

/** @internal */
export const UpdateContactRequestValue$outboundSchema: z.ZodType<
  UpdateContactRequestValue$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestValue
> = z.union([
  z.lazy(() => UpdateContactRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateContactRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestValue$ {
  /** @deprecated use `UpdateContactRequestValue$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestValue$inboundSchema;
  /** @deprecated use `UpdateContactRequestValue$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestValue$outboundSchema;
  /** @deprecated use `UpdateContactRequestValue$Outbound` instead. */
  export type Outbound = UpdateContactRequestValue$Outbound;
}

export function updateContactRequestValueToJSON(
  updateContactRequestValue: UpdateContactRequestValue,
): string {
  return JSON.stringify(
    UpdateContactRequestValue$outboundSchema.parse(updateContactRequestValue),
  );
}

export function updateContactRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestValue' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestCustomFields$inboundSchema: z.ZodType<
  UpdateContactRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateContactRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateContactRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type UpdateContactRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | UpdateContactRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateContactRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateContactRequestCustomFields$outboundSchema: z.ZodType<
  UpdateContactRequestCustomFields$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateContactRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateContactRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestCustomFields$ {
  /** @deprecated use `UpdateContactRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestCustomFields$inboundSchema;
  /** @deprecated use `UpdateContactRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestCustomFields$outboundSchema;
  /** @deprecated use `UpdateContactRequestCustomFields$Outbound` instead. */
  export type Outbound = UpdateContactRequestCustomFields$Outbound;
}

export function updateContactRequestCustomFieldsToJSON(
  updateContactRequestCustomFields: UpdateContactRequestCustomFields,
): string {
  return JSON.stringify(
    UpdateContactRequestCustomFields$outboundSchema.parse(
      updateContactRequestCustomFields,
    ),
  );
}

export function updateContactRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateContactRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateContactRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateContactRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateContactRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestExtendPaths$ {
  /** @deprecated use `UpdateContactRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateContactRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateContactRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateContactRequestExtendPaths$Outbound;
}

export function updateContactRequestExtendPathsToJSON(
  updateContactRequestExtendPaths: UpdateContactRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateContactRequestExtendPaths$outboundSchema.parse(
      updateContactRequestExtendPaths,
    ),
  );
}

export function updateContactRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestPassThrough$inboundSchema: z.ZodType<
  UpdateContactRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateContactRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateContactRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateContactRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateContactRequestPassThrough$outboundSchema: z.ZodType<
  UpdateContactRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateContactRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestPassThrough$ {
  /** @deprecated use `UpdateContactRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateContactRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateContactRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateContactRequestPassThrough$Outbound;
}

export function updateContactRequestPassThroughToJSON(
  updateContactRequestPassThrough: UpdateContactRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateContactRequestPassThrough$outboundSchema.parse(
      updateContactRequestPassThrough,
    ),
  );
}

export function updateContactRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequest$inboundSchema: z.ZodType<
  UpdateContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestType$inboundSchema).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(UpdateContactRequestGender$inboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => UpdateContactRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateContactRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => UpdateContactRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => UpdateContactRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateContactRequestEmails$inboundSchema))
    .optional(),
  email_domain: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => UpdateContactRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunity_ids: z.array(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => UpdateContactRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "company_id": "companyId",
    "company_name": "companyName",
    "lead_id": "leadId",
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "photo_url": "photoUrl",
    "lead_source": "leadSource",
    "current_balance": "currentBalance",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "email_domain": "emailDomain",
    "custom_fields": "customFields",
    "opportunity_ids": "opportunityIds",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateContactRequest$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<UpdateContactRequestWebsites$Outbound> | undefined;
  addresses?: Array<UpdateContactRequestAddresses$Outbound> | undefined;
  social_links?: Array<UpdateContactRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<UpdateContactRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<UpdateContactRequestEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<UpdateContactRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<UpdateContactRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateContactRequest$outboundSchema: z.ZodType<
  UpdateContactRequest$Outbound,
  z.ZodTypeDef,
  UpdateContactRequest
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestType$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(UpdateContactRequestGender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => UpdateContactRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateContactRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => UpdateContactRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => UpdateContactRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateContactRequestEmails$outboundSchema))
    .optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => UpdateContactRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => UpdateContactRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequest$ {
  /** @deprecated use `UpdateContactRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequest$inboundSchema;
  /** @deprecated use `UpdateContactRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequest$outboundSchema;
  /** @deprecated use `UpdateContactRequest$Outbound` instead. */
  export type Outbound = UpdateContactRequest$Outbound;
}

export function updateContactRequestToJSON(
  updateContactRequest: UpdateContactRequest,
): string {
  return JSON.stringify(
    UpdateContactRequest$outboundSchema.parse(updateContactRequest),
  );
}

export function updateContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequest' from JSON`,
  );
}
