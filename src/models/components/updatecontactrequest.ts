/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the category or classification of the contact, such as 'customer', 'supplier', or 'partner'. This optional field aids in organizing contacts within the CRM for targeted communication and reporting.
 */
export const UpdateContactRequestType = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * Specifies the category or classification of the contact, such as 'customer', 'supplier', or 'partner'. This optional field aids in organizing contacts within the CRM for targeted communication and reporting.
 */
export type UpdateContactRequestType = ClosedEnum<
  typeof UpdateContactRequestType
>;

/**
 * The gender of the contact, which can be used for demographic analysis and personalized communication. This optional field should be a string value, typically 'Male', 'Female', or other gender identities as applicable. Providing this information can help tailor interactions and improve user experience.
 */
export const UpdateContactRequestGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact, which can be used for demographic analysis and personalized communication. This optional field should be a string value, typically 'Male', 'Female', or other gender identities as applicable. Providing this information can help tailor interactions and improve user experience.
 */
export type UpdateContactRequestGender = ClosedEnum<
  typeof UpdateContactRequestGender
>;

/**
 * Specifies the type of website associated with the contact, such as 'personal', 'business', or 'portfolio'. This optional field helps categorize the website, providing context and clarity about its purpose. It should be a descriptive string that accurately reflects the website's nature.
 */
export const UpdateContactRequestWebsitesType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of website associated with the contact, such as 'personal', 'business', or 'portfolio'. This optional field helps categorize the website, providing context and clarity about its purpose. It should be a descriptive string that accurately reflects the website's nature.
 */
export type UpdateContactRequestWebsitesType = ClosedEnum<
  typeof UpdateContactRequestWebsitesType
>;

export type UpdateContactRequestWebsites = {
  /**
   * A unique identifier for the website associated with the contact. This ID is used to distinguish between multiple websites linked to the same contact, ensuring accurate updates to the correct website entry. It should be a valid string that uniquely identifies a website within the contact's profile.
   */
  id?: string | null | undefined;
  /**
   * The URL of the website associated with the contact. This field is mandatory and must be a valid URL format, ensuring that the contact's website information is correctly updated and accessible. It plays a crucial role in maintaining accurate and up-to-date web presence details for the contact.
   */
  url: string;
  /**
   * Specifies the type of website associated with the contact, such as 'personal', 'business', or 'portfolio'. This optional field helps categorize the website, providing context and clarity about its purpose. It should be a descriptive string that accurately reflects the website's nature.
   */
  type?: UpdateContactRequestWebsitesType | null | undefined;
};

/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the contact's profile. It should be a valid string that clearly indicates the address type.
 */
export const UpdateContactRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the contact's profile. It should be a valid string that clearly indicates the address type.
 */
export type UpdateContactRequestAddressesType = ClosedEnum<
  typeof UpdateContactRequestAddressesType
>;

export type UpdateContactRequestAddresses = {
  /**
   * A unique identifier for each address associated with the contact. This ID ensures that updates are applied to the correct address entry within the contact's profile. It should be a valid string that uniquely identifies an address, supporting precise modifications.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category of the address, such as 'home', 'work', or 'billing'. This helps in identifying the purpose of the address within the contact's profile. It should be a valid string that clearly indicates the address type.
   */
  type?: UpdateContactRequestAddressesType | null | undefined;
  /**
   * Represents the complete address in a single string format. This is particularly useful when the API does not support structured address data. Ensure the address is formatted correctly to include all necessary details like street, city, and postal code.
   */
  string?: string | null | undefined;
  /**
   * The label or identifier for the address, often used to distinguish between multiple addresses associated with a contact. This should be a descriptive string that provides context, such as 'Headquarters' or 'Branch Office'.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, including details like street number, street name, and apartment or suite number. This field is essential for accurately locating the address and should be a well-formatted string.
   */
  line1?: string | null | undefined;
  /**
   * The secondary line of the address, used for additional information such as building name or floor number. This field complements 'line1' and should be used to provide any extra address details necessary for precise location identification.
   */
  line2?: string | null | undefined;
  /**
   * This field represents the third line of the contact's address, often used for additional address details such as apartment or suite numbers. It is optional and should be a string if provided. Including this information helps ensure accurate delivery and location identification within the CRM system.
   */
  line3?: string | null | undefined;
  /**
   * This field represents the fourth line of the contact's address, typically used for any extra address information that doesn't fit in the previous lines. It is optional and should be a string if provided. This field supports detailed address specifications, enhancing the precision of contact location data.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the contact's address, indicating the specific building or location on a street. This field is optional and should be a string. Providing the street number is crucial for pinpointing the exact location of the contact within the CRM system.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name where the contact resides, used to identify the geographical area of the contact. This field is optional and should be a string. Including the city name helps in organizing contacts based on their location, facilitating regional data analysis and communication.
   */
  city?: string | null | undefined;
  /**
   * The state or region name associated with the contact's address, providing a broader geographical context. This field is optional and should be a string. Including the state information aids in categorizing contacts by region, which is useful for targeted marketing and compliance with regional regulations.
   */
  state?: string | null | undefined;
  /**
   * The postal code associated with the contact's address. This field is optional and should be a valid postal code format for the specified country. It helps in accurately locating the contact's address within the CRM system.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the contact's address, following the ISO 3166-1 alpha-2 standard. This optional field ensures that the address is correctly associated with a specific country, aiding in international data consistency and validation.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the contact's address. This optional field should be a valid latitude value, aiding in geolocation services and mapping the contact's precise location within the CRM.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the contact's address. This optional field should be a valid longitude value, which, along with latitude, helps in pinpointing the contact's exact location for mapping and location-based services.
   */
  longitude?: string | null | undefined;
  /**
   * The county or equivalent sublocality for the contact's address. This optional field provides additional granularity to the address, useful for regional segmentation and detailed location analysis within the CRM.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address. This field is optional and should be a string that accurately represents the individual's name for identification purposes within the CRM system. It helps in personalizing communication and ensuring the correct contact is updated.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as 'Mr.', 'Ms.', or 'Dr.'. This optional field helps in formal communication and should be a string that aligns with the contact's preferred title.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with the address. This optional field should be a valid string format, including country code if applicable, to ensure accurate and effective communication with the contact.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the address, provided as an optional string. This field is useful for contacts who prefer or require fax communication, and should be formatted correctly to ensure successful transmission.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the contact at the address. This optional field must be a valid email format to facilitate electronic communication and ensure messages are delivered correctly to the intended recipient.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the contact's address. This field should contain a valid URL format, including the protocol (e.g., https://). It helps in providing additional context or contact method for the address being updated.
   */
  website?: string | null | undefined;
  /**
   * Additional notes or comments related to the contact's address. This field can be used to store any extra information that might be relevant for understanding or managing the address details. It supports text input without specific format constraints.
   */
  notes?: string | null | undefined;
  /**
   * A concurrency control token used to manage updates to the contact's address. This string value is automatically incremented with each update to prevent data conflicts, ensuring that changes are not overwritten unintentionally.
   */
  rowVersion?: string | null | undefined;
};

export type UpdateContactRequestSocialLinks = {
  /**
   * The unique identifier for a specific social media link within the contact's profile. This ID is used to reference and manage individual social links, ensuring precise updates and retrievals.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media profile associated with the contact. This must be a valid URL format, such as https://www.twitter.com/apideck, and is essential for linking the contact to their social presence. This property ensures that social links are accurately updated within the CRM.
   */
  url: string;
  /**
   * Specifies the type of social media platform for the URL provided, such as 'twitter' or 'linkedin'. This optional field helps categorize the social link, allowing for better organization and retrieval of social media information within the CRM.
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number, such as 'mobile', 'home', or 'work'. This property helps categorize the phone number for better organization and understanding of the contact's communication preferences. It should be a descriptive string that accurately reflects the phone number's usage context.
 */
export const UpdateContactRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number, such as 'mobile', 'home', or 'work'. This property helps categorize the phone number for better organization and understanding of the contact's communication preferences. It should be a descriptive string that accurately reflects the phone number's usage context.
 */
export type UpdateContactRequestPhoneNumbersType = ClosedEnum<
  typeof UpdateContactRequestPhoneNumbersType
>;

export type UpdateContactRequestPhoneNumbers = {
  /**
   * A unique identifier for each phone number associated with the contact. This identifier is used to distinguish between different phone numbers, facilitating updates and management of contact information within the CRM.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, such as '+1' for the United States. This field is important for ensuring that phone numbers are formatted correctly and can be dialed internationally, supporting global communication needs.
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323. This property is used to specify the regional code associated with the phone number, ensuring accurate dialing and identification of the contact's location. It should be a valid area code that corresponds to the contact's geographical region.
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number of the contact, excluding the area code and extension. This is a required field and must be a valid phone number format to ensure successful communication with the contact. It is crucial for identifying and reaching the contact within the CRM system.
   */
  number: string;
  /**
   * The extension of the phone number, if applicable. This property allows for specifying additional dialing instructions needed to reach the contact directly, especially in corporate environments. It should be a numeric string if used.
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number, such as 'mobile', 'home', or 'work'. This property helps categorize the phone number for better organization and understanding of the contact's communication preferences. It should be a descriptive string that accurately reflects the phone number's usage context.
   */
  type?: UpdateContactRequestPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This optional field helps categorize the email address for better organization and retrieval within the CRM system.
 */
export const UpdateContactRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address, such as 'work', 'personal', or 'other'. This optional field helps categorize the email address for better organization and retrieval within the CRM system.
 */
export type UpdateContactRequestEmailsType = ClosedEnum<
  typeof UpdateContactRequestEmailsType
>;

export type UpdateContactRequestEmails = {
  /**
   * A unique identifier for the email address associated with the contact. This identifier is used to distinguish between multiple email addresses that a contact may have. It is not required when adding a new email but is necessary for updating or removing an existing email address.
   */
  id?: string | null | undefined;
  /**
   * The primary email address for the contact, which is required for communication purposes. This field must be a valid email format and is essential for ensuring that contact information is accurate and up-to-date within the CRM system.
   */
  email: string | null;
  /**
   * Specifies the type of email address, such as 'work', 'personal', or 'other'. This optional field helps categorize the email address for better organization and retrieval within the CRM system.
   */
  type?: UpdateContactRequestEmailsType | null | undefined;
};

export type UpdateContactRequestValue6 = {};

export type UpdateContactRequestValue4 = {};

/**
 * The value assigned to the custom field for the contact. This property is optional and can be any string that represents the data you wish to store in the custom field. It allows for flexible data entry tailored to specific needs of the contact.
 */
export type UpdateContactRequestValue =
  | UpdateContactRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateContactRequestValue6>;

export type UpdateContactRequestCustomFields = {
  /**
   * The unique identifier for the custom field associated with the contact. This string must be provided to specify which custom field is being updated or added. It ensures that the correct field is targeted during the update operation, maintaining data integrity within the CRM system.
   */
  id: string | null;
  /**
   * The name of the custom field that provides a label or title for the field being updated. This is optional but recommended for clarity, especially when multiple custom fields exist. It helps in identifying the purpose of the field within the contact's profile.
   */
  name?: string | null | undefined;
  /**
   * Additional information or context about the custom field. This optional property can be used to describe the field's purpose or usage, aiding in better understanding and management of custom data within the contact's profile.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to the custom field for the contact. This property is optional and can be any string that represents the data you wish to store in the custom field. It allows for flexible data entry tailored to specific needs of the contact.
   */
  value?:
    | UpdateContactRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateContactRequestValue6>
    | null
    | undefined;
};

export type UpdateContactRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the contact record where the value should be applied. This path must be a valid JSONPath expression, ensuring that the update is accurately targeted to the intended property. It is crucial for performing precise modifications in complex data structures.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath within the contact record. This can be of any data type, allowing for flexible updates to the contact's properties. The value must be compatible with the data type of the target property to ensure successful application.
   */
  value?: any | undefined;
};

export type UpdateContactRequestPassThrough = {
  /**
   * A mandatory string identifier specifying the service to which the pass_through data should be applied. This ensures that the custom data is correctly routed and processed by the intended service, facilitating precise and effective updates.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation to which this pass_through should be applied. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise tracking and management of each operation. The value should be a unique string that identifies the operation within the context of the request.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties within the contact record. This can be used to add custom fields or additional data that are not part of the standard contact schema. The object can contain any key-value pairs, providing a versatile way to enhance contact information.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. Each object in the array should define a path and a corresponding value, enabling precise updates to nested properties within the contact record. This approach allows for targeted modifications without altering the entire object.
   */
  extendPaths?: Array<UpdateContactRequestExtendPaths> | undefined;
};

export type UpdateContactRequest = {
  /**
   * The full name of the contact to be updated. This is a required field and must be a non-empty string. It is essential for identifying the contact within the CRM system and ensuring the correct record is modified.
   */
  name: string | null;
  /**
   * The unique identifier of the user who owns the contact. This optional field helps in assigning or reassigning ownership of the contact within the CRM, facilitating better management and accountability.
   */
  ownerId?: string | null | undefined;
  /**
   * Specifies the category or classification of the contact, such as 'customer', 'supplier', or 'partner'. This optional field aids in organizing contacts within the CRM for targeted communication and reporting.
   */
  type?: UpdateContactRequestType | null | undefined;
  /**
   * The unique identifier of the company associated with the contact. This optional field links the contact to a specific company within the CRM, enabling seamless integration of contact and company data.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company the contact is associated with. This optional field provides a human-readable reference to the company, complementing the company_id for easier identification and association within the CRM.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with the contact. This optional field helps link the contact to a specific lead within the CRM, facilitating lead management and tracking. Ensure the lead ID is valid and corresponds to an existing lead record.
   */
  leadId?: string | null | undefined;
  /**
   * The given name of the contact. This field is used to personalize communications and should be a non-empty string. It is part of the contact's basic identification information within the CRM.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the contact, if applicable. This optional field can be used for more precise identification and should be a string. It helps in distinguishing contacts with similar first and last names.
   */
  middleName?: string | null | undefined;
  /**
   * The family name or surname of the contact. This field is crucial for identifying the contact and should be a non-empty string. It is used in conjunction with the first name to uniquely identify a contact within the CRM.
   */
  lastName?: string | null | undefined;
  /**
   * An optional title or honorific for the contact, such as Mr., Ms., or Dr. This field can be used to address the contact respectfully in communications and should be a string. It adds a formal touch to the contact's name in records.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the contact, such as 'Jr.', 'Sr.', or 'III'. This field is optional and can be used to provide additional context to the contact's name, ensuring proper identification and personalization within the CRM system. It should be a string value if provided.
   */
  suffix?: string | null | undefined;
  /**
   * The job title of the contact within their organization. This optional field helps in identifying the contact's role and responsibilities, which can be useful for segmentation and communication strategies. It should be a descriptive string that accurately reflects the contact's position.
   */
  title?: string | null | undefined;
  /**
   * The department to which the contact belongs within their organization. This optional field aids in organizing contacts based on their departmental affiliations, facilitating targeted communication and data management. It should be a string that clearly specifies the department name.
   */
  department?: string | null | undefined;
  /**
   * The preferred language of the contact, specified using the ISO 639-1 code (e.g., 'EN' for English). This optional field is crucial for ensuring that communications are delivered in the contact's preferred language, enhancing engagement and understanding. It must be a valid two-letter language code.
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact, which can be used for demographic analysis and personalized communication. This optional field should be a string value, typically 'Male', 'Female', or other gender identities as applicable. Providing this information can help tailor interactions and improve user experience.
   */
  gender?: UpdateContactRequestGender | null | undefined;
  /**
   * The contact's date of birth, used to personalize interactions and offers. This should be formatted as 'YYYY-MM-DD' to ensure consistency and proper parsing by the system. Including a birthday can enhance customer engagement strategies.
   */
  birthday?: string | null | undefined;
  /**
   * A base64-encoded string representing the contact's image. This allows the CRM to store and display the contact's picture directly within the application. Ensure the image is properly encoded to avoid errors during processing.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The web address where the contact's photo is hosted. This URL should be publicly accessible to allow the CRM to fetch and display the image. Using a URL instead of an image file can save storage space and improve load times.
   */
  photoUrl?: string | null | undefined;
  /**
   * Identifies the origin of the contact, such as 'web', 'referral', or 'advertisement'. This information helps in tracking the effectiveness of different marketing channels and strategies. Ensure the lead source is accurately recorded to maintain data integrity.
   */
  leadSource?: string | null | undefined;
  /**
   * The contact's fax number, used for sending documents via fax. This should include the country code and be formatted according to international dialing standards. Providing a fax number can be crucial for businesses that rely on fax communication.
   */
  fax?: string | null | undefined;
  /**
   * A brief text providing additional information about the contact. This field is optional and can be used to store notes or remarks that help in identifying or categorizing the contact within the CRM system. It should be a string value, allowing for flexible input that can be updated as needed to reflect changes in the contact's profile.
   */
  description?: string | null | undefined;
  /**
   * Represents the financial balance associated with the contact, typically used in contexts where the contact has an account or outstanding transactions. This numeric field is optional and should be updated to reflect the latest balance information, ensuring financial records are accurate and up-to-date.
   */
  currentBalance?: number | null | undefined;
  /**
   * Indicates the current state or condition of the contact, such as 'active', 'inactive', or 'pending'. This optional string field helps in managing and filtering contacts based on their engagement or lifecycle stage within the CRM system. It should be updated to reflect any changes in the contact's status.
   */
  status?: string | null | undefined;
  /**
   * A boolean flag that specifies whether the contact is currently active. This optional field is crucial for enabling or disabling contact interactions within the CRM system. Setting this to 'true' means the contact is active and can participate in CRM activities, while 'false' indicates inactivity.
   */
  active?: boolean | null | undefined;
  /**
   * An array of website URLs associated with the contact. This optional field allows for the inclusion of multiple web addresses, providing a comprehensive digital footprint of the contact. Each entry should be a valid URL, and this list can be updated to add or remove websites as necessary.
   */
  websites?: Array<UpdateContactRequestWebsites> | undefined;
  /**
   * An array of address objects associated with the contact. This property allows for the inclusion of multiple addresses, such as home and work, ensuring comprehensive contact information. Each address object within the array should conform to the expected address structure, facilitating accurate updates.
   */
  addresses?: Array<UpdateContactRequestAddresses> | undefined;
  /**
   * An array of social media links associated with the contact. Each entry in the array should represent a distinct social media profile, allowing for comprehensive social presence tracking within the CRM.
   */
  socialLinks?: Array<UpdateContactRequestSocialLinks> | undefined;
  /**
   * An array of phone number objects associated with the contact. Each object within the array can include details such as the phone number's unique identifier and country code. This allows for the management of multiple contact numbers, ensuring comprehensive contact information is maintained.
   */
  phoneNumbers?: Array<UpdateContactRequestPhoneNumbers> | undefined;
  /**
   * An array of email addresses associated with the contact. This property allows for multiple email entries, facilitating comprehensive communication options. Each email should be a valid email format to ensure proper delivery and identification within the CRM system.
   */
  emails?: Array<UpdateContactRequestEmails> | undefined;
  /**
   * The domain part of the contact's email address, used for filtering or categorizing contacts based on their email domains. This optional field can assist in segmenting contacts for targeted communication strategies.
   */
  emailDomain?: string | null | undefined;
  /**
   * An array of custom fields that allow for additional, user-defined information to be stored with the contact. This optional property enables flexibility in capturing unique data points that are not covered by standard fields, enhancing the CRM's adaptability to specific business needs.
   */
  customFields?: Array<UpdateContactRequestCustomFields> | undefined;
  /**
   * An array of tags associated with the contact, used for categorization or labeling purposes. This optional property allows for better organization and retrieval of contact information based on custom tags defined by the user.
   */
  tags?: Array<string> | null | undefined;
  /**
   * An array of opportunity identifiers linked to the contact, representing potential business deals or engagements. This property is optional and can be used to associate the contact with specific opportunities within the CRM system, aiding in tracking and management of sales processes.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or structured modifications when updating the contact. This property is optional and provides flexibility for integrating additional data that may not be covered by standard fields, ensuring comprehensive updates.
   */
  passThrough?: Array<UpdateContactRequestPassThrough> | undefined;
};

/** @internal */
export const UpdateContactRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestType
> = z.nativeEnum(UpdateContactRequestType);

/** @internal */
export const UpdateContactRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestType
> = UpdateContactRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestType$ {
  /** @deprecated use `UpdateContactRequestType$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestType$inboundSchema;
  /** @deprecated use `UpdateContactRequestType$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestType$outboundSchema;
}

/** @internal */
export const UpdateContactRequestGender$inboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestGender
> = z.nativeEnum(UpdateContactRequestGender);

/** @internal */
export const UpdateContactRequestGender$outboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestGender
> = UpdateContactRequestGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestGender$ {
  /** @deprecated use `UpdateContactRequestGender$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestGender$inboundSchema;
  /** @deprecated use `UpdateContactRequestGender$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestGender$outboundSchema;
}

/** @internal */
export const UpdateContactRequestWebsitesType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestWebsitesType
> = z.nativeEnum(UpdateContactRequestWebsitesType);

/** @internal */
export const UpdateContactRequestWebsitesType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestWebsitesType
> = UpdateContactRequestWebsitesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestWebsitesType$ {
  /** @deprecated use `UpdateContactRequestWebsitesType$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestWebsitesType$inboundSchema;
  /** @deprecated use `UpdateContactRequestWebsitesType$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestWebsitesType$outboundSchema;
}

/** @internal */
export const UpdateContactRequestWebsites$inboundSchema: z.ZodType<
  UpdateContactRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateContactRequestWebsitesType$inboundSchema).optional(),
});

/** @internal */
export type UpdateContactRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateContactRequestWebsites$outboundSchema: z.ZodType<
  UpdateContactRequestWebsites$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(UpdateContactRequestWebsitesType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestWebsites$ {
  /** @deprecated use `UpdateContactRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestWebsites$inboundSchema;
  /** @deprecated use `UpdateContactRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestWebsites$outboundSchema;
  /** @deprecated use `UpdateContactRequestWebsites$Outbound` instead. */
  export type Outbound = UpdateContactRequestWebsites$Outbound;
}

export function updateContactRequestWebsitesToJSON(
  updateContactRequestWebsites: UpdateContactRequestWebsites,
): string {
  return JSON.stringify(
    UpdateContactRequestWebsites$outboundSchema.parse(
      updateContactRequestWebsites,
    ),
  );
}

export function updateContactRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestWebsites' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestAddressesType
> = z.nativeEnum(UpdateContactRequestAddressesType);

/** @internal */
export const UpdateContactRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestAddressesType
> = UpdateContactRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestAddressesType$ {
  /** @deprecated use `UpdateContactRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestAddressesType$inboundSchema;
  /** @deprecated use `UpdateContactRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateContactRequestAddressesType$outboundSchema;
}

/** @internal */
export const UpdateContactRequestAddresses$inboundSchema: z.ZodType<
  UpdateContactRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UpdateContactRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UpdateContactRequestAddresses$outboundSchema: z.ZodType<
  UpdateContactRequestAddresses$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestAddresses$ {
  /** @deprecated use `UpdateContactRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestAddresses$inboundSchema;
  /** @deprecated use `UpdateContactRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestAddresses$outboundSchema;
  /** @deprecated use `UpdateContactRequestAddresses$Outbound` instead. */
  export type Outbound = UpdateContactRequestAddresses$Outbound;
}

export function updateContactRequestAddressesToJSON(
  updateContactRequestAddresses: UpdateContactRequestAddresses,
): string {
  return JSON.stringify(
    UpdateContactRequestAddresses$outboundSchema.parse(
      updateContactRequestAddresses,
    ),
  );
}

export function updateContactRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestAddresses' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestSocialLinks$inboundSchema: z.ZodType<
  UpdateContactRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateContactRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateContactRequestSocialLinks$outboundSchema: z.ZodType<
  UpdateContactRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestSocialLinks$ {
  /** @deprecated use `UpdateContactRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestSocialLinks$inboundSchema;
  /** @deprecated use `UpdateContactRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestSocialLinks$outboundSchema;
  /** @deprecated use `UpdateContactRequestSocialLinks$Outbound` instead. */
  export type Outbound = UpdateContactRequestSocialLinks$Outbound;
}

export function updateContactRequestSocialLinksToJSON(
  updateContactRequestSocialLinks: UpdateContactRequestSocialLinks,
): string {
  return JSON.stringify(
    UpdateContactRequestSocialLinks$outboundSchema.parse(
      updateContactRequestSocialLinks,
    ),
  );
}

export function updateContactRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateContactRequestPhoneNumbersType> = z.nativeEnum(
    UpdateContactRequestPhoneNumbersType,
  );

/** @internal */
export const UpdateContactRequestPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateContactRequestPhoneNumbersType> =
    UpdateContactRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestPhoneNumbersType$ {
  /** @deprecated use `UpdateContactRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateContactRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `UpdateContactRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateContactRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const UpdateContactRequestPhoneNumbers$inboundSchema: z.ZodType<
  UpdateContactRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UpdateContactRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateContactRequestPhoneNumbers$outboundSchema: z.ZodType<
  UpdateContactRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestPhoneNumbers$ {
  /** @deprecated use `UpdateContactRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `UpdateContactRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `UpdateContactRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = UpdateContactRequestPhoneNumbers$Outbound;
}

export function updateContactRequestPhoneNumbersToJSON(
  updateContactRequestPhoneNumbers: UpdateContactRequestPhoneNumbers,
): string {
  return JSON.stringify(
    UpdateContactRequestPhoneNumbers$outboundSchema.parse(
      updateContactRequestPhoneNumbers,
    ),
  );
}

export function updateContactRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestEmailsType
> = z.nativeEnum(UpdateContactRequestEmailsType);

/** @internal */
export const UpdateContactRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateContactRequestEmailsType
> = UpdateContactRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestEmailsType$ {
  /** @deprecated use `UpdateContactRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestEmailsType$inboundSchema;
  /** @deprecated use `UpdateContactRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestEmailsType$outboundSchema;
}

/** @internal */
export const UpdateContactRequestEmails$inboundSchema: z.ZodType<
  UpdateContactRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateContactRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type UpdateContactRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UpdateContactRequestEmails$outboundSchema: z.ZodType<
  UpdateContactRequestEmails$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UpdateContactRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestEmails$ {
  /** @deprecated use `UpdateContactRequestEmails$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestEmails$inboundSchema;
  /** @deprecated use `UpdateContactRequestEmails$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestEmails$outboundSchema;
  /** @deprecated use `UpdateContactRequestEmails$Outbound` instead. */
  export type Outbound = UpdateContactRequestEmails$Outbound;
}

export function updateContactRequestEmailsToJSON(
  updateContactRequestEmails: UpdateContactRequestEmails,
): string {
  return JSON.stringify(
    UpdateContactRequestEmails$outboundSchema.parse(updateContactRequestEmails),
  );
}

export function updateContactRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestEmails' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestValue6$inboundSchema: z.ZodType<
  UpdateContactRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateContactRequestValue6$Outbound = {};

/** @internal */
export const UpdateContactRequestValue6$outboundSchema: z.ZodType<
  UpdateContactRequestValue6$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestValue6$ {
  /** @deprecated use `UpdateContactRequestValue6$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestValue6$inboundSchema;
  /** @deprecated use `UpdateContactRequestValue6$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestValue6$outboundSchema;
  /** @deprecated use `UpdateContactRequestValue6$Outbound` instead. */
  export type Outbound = UpdateContactRequestValue6$Outbound;
}

export function updateContactRequestValue6ToJSON(
  updateContactRequestValue6: UpdateContactRequestValue6,
): string {
  return JSON.stringify(
    UpdateContactRequestValue6$outboundSchema.parse(updateContactRequestValue6),
  );
}

export function updateContactRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestValue6' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestValue4$inboundSchema: z.ZodType<
  UpdateContactRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateContactRequestValue4$Outbound = {};

/** @internal */
export const UpdateContactRequestValue4$outboundSchema: z.ZodType<
  UpdateContactRequestValue4$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestValue4$ {
  /** @deprecated use `UpdateContactRequestValue4$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestValue4$inboundSchema;
  /** @deprecated use `UpdateContactRequestValue4$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestValue4$outboundSchema;
  /** @deprecated use `UpdateContactRequestValue4$Outbound` instead. */
  export type Outbound = UpdateContactRequestValue4$Outbound;
}

export function updateContactRequestValue4ToJSON(
  updateContactRequestValue4: UpdateContactRequestValue4,
): string {
  return JSON.stringify(
    UpdateContactRequestValue4$outboundSchema.parse(updateContactRequestValue4),
  );
}

export function updateContactRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestValue4' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestValue$inboundSchema: z.ZodType<
  UpdateContactRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateContactRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateContactRequestValue6$inboundSchema)),
]);

/** @internal */
export type UpdateContactRequestValue$Outbound =
  | UpdateContactRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<UpdateContactRequestValue6$Outbound>;

/** @internal */
export const UpdateContactRequestValue$outboundSchema: z.ZodType<
  UpdateContactRequestValue$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestValue
> = z.union([
  z.lazy(() => UpdateContactRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => UpdateContactRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestValue$ {
  /** @deprecated use `UpdateContactRequestValue$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestValue$inboundSchema;
  /** @deprecated use `UpdateContactRequestValue$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestValue$outboundSchema;
  /** @deprecated use `UpdateContactRequestValue$Outbound` instead. */
  export type Outbound = UpdateContactRequestValue$Outbound;
}

export function updateContactRequestValueToJSON(
  updateContactRequestValue: UpdateContactRequestValue,
): string {
  return JSON.stringify(
    UpdateContactRequestValue$outboundSchema.parse(updateContactRequestValue),
  );
}

export function updateContactRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestValue' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestCustomFields$inboundSchema: z.ZodType<
  UpdateContactRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateContactRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateContactRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type UpdateContactRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | UpdateContactRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<UpdateContactRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const UpdateContactRequestCustomFields$outboundSchema: z.ZodType<
  UpdateContactRequestCustomFields$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => UpdateContactRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => UpdateContactRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestCustomFields$ {
  /** @deprecated use `UpdateContactRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestCustomFields$inboundSchema;
  /** @deprecated use `UpdateContactRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestCustomFields$outboundSchema;
  /** @deprecated use `UpdateContactRequestCustomFields$Outbound` instead. */
  export type Outbound = UpdateContactRequestCustomFields$Outbound;
}

export function updateContactRequestCustomFieldsToJSON(
  updateContactRequestCustomFields: UpdateContactRequestCustomFields,
): string {
  return JSON.stringify(
    UpdateContactRequestCustomFields$outboundSchema.parse(
      updateContactRequestCustomFields,
    ),
  );
}

export function updateContactRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestExtendPaths$inboundSchema: z.ZodType<
  UpdateContactRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UpdateContactRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UpdateContactRequestExtendPaths$outboundSchema: z.ZodType<
  UpdateContactRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestExtendPaths$ {
  /** @deprecated use `UpdateContactRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestExtendPaths$inboundSchema;
  /** @deprecated use `UpdateContactRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestExtendPaths$outboundSchema;
  /** @deprecated use `UpdateContactRequestExtendPaths$Outbound` instead. */
  export type Outbound = UpdateContactRequestExtendPaths$Outbound;
}

export function updateContactRequestExtendPathsToJSON(
  updateContactRequestExtendPaths: UpdateContactRequestExtendPaths,
): string {
  return JSON.stringify(
    UpdateContactRequestExtendPaths$outboundSchema.parse(
      updateContactRequestExtendPaths,
    ),
  );
}

export function updateContactRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequestPassThrough$inboundSchema: z.ZodType<
  UpdateContactRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => UpdateContactRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UpdateContactRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UpdateContactRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UpdateContactRequestPassThrough$outboundSchema: z.ZodType<
  UpdateContactRequestPassThrough$Outbound,
  z.ZodTypeDef,
  UpdateContactRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => UpdateContactRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequestPassThrough$ {
  /** @deprecated use `UpdateContactRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequestPassThrough$inboundSchema;
  /** @deprecated use `UpdateContactRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequestPassThrough$outboundSchema;
  /** @deprecated use `UpdateContactRequestPassThrough$Outbound` instead. */
  export type Outbound = UpdateContactRequestPassThrough$Outbound;
}

export function updateContactRequestPassThroughToJSON(
  updateContactRequestPassThrough: UpdateContactRequestPassThrough,
): string {
  return JSON.stringify(
    UpdateContactRequestPassThrough$outboundSchema.parse(
      updateContactRequestPassThrough,
    ),
  );
}

export function updateContactRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const UpdateContactRequest$inboundSchema: z.ZodType<
  UpdateContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestType$inboundSchema).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(UpdateContactRequestGender$inboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => UpdateContactRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateContactRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => UpdateContactRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => UpdateContactRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateContactRequestEmails$inboundSchema))
    .optional(),
  email_domain: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => UpdateContactRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunity_ids: z.array(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => UpdateContactRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "company_id": "companyId",
    "company_name": "companyName",
    "lead_id": "leadId",
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "photo_url": "photoUrl",
    "lead_source": "leadSource",
    "current_balance": "currentBalance",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "email_domain": "emailDomain",
    "custom_fields": "customFields",
    "opportunity_ids": "opportunityIds",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UpdateContactRequest$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<UpdateContactRequestWebsites$Outbound> | undefined;
  addresses?: Array<UpdateContactRequestAddresses$Outbound> | undefined;
  social_links?: Array<UpdateContactRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<UpdateContactRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<UpdateContactRequestEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<UpdateContactRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<UpdateContactRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const UpdateContactRequest$outboundSchema: z.ZodType<
  UpdateContactRequest$Outbound,
  z.ZodTypeDef,
  UpdateContactRequest
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(UpdateContactRequestType$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(UpdateContactRequestGender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => UpdateContactRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => UpdateContactRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => UpdateContactRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => UpdateContactRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => UpdateContactRequestEmails$outboundSchema))
    .optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => UpdateContactRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => UpdateContactRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequest$ {
  /** @deprecated use `UpdateContactRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequest$inboundSchema;
  /** @deprecated use `UpdateContactRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequest$outboundSchema;
  /** @deprecated use `UpdateContactRequest$Outbound` instead. */
  export type Outbound = UpdateContactRequest$Outbound;
}

export function updateContactRequestToJSON(
  updateContactRequest: UpdateContactRequest,
): string {
  return JSON.stringify(
    UpdateContactRequest$outboundSchema.parse(updateContactRequest),
  );
}

export function updateContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequest' from JSON`,
  );
}
