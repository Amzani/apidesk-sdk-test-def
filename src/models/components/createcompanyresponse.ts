/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the newly created company resource in the CRM system. It serves as the primary container for the response data, ensuring that all relevant information about the operation's outcome is encapsulated. The object includes essential identifiers and attributes that define the newly added company.
 */
export type UnifiedId = {
  /**
   * The unique identifier assigned to the company resource that has just been created in the CRM system. This ID is crucial for referencing the company in future operations, such as updates or retrievals, and is returned as a string format to ensure compatibility across different systems.
   */
  id: string;
};

/**
 * Company created
 */
export type CreateCompanyResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the POST request to add a new company, with a successful creation typically returning a 201 status code. It helps developers understand the outcome of their API call.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable status message corresponding to the status code, such as 'Created' for a successful company addition. It aids in quickly identifying the result of the operation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for this operation. This string identifies which service integration was utilized when adding the company, especially useful if multiple services are connected. It ensures the correct service context is maintained.
   */
  service: string;
  /**
   * The name of the unified API resource involved in the operation. This string specifies the type of resource that was affected, in this case, a 'company', helping developers understand the context of the API response.
   */
  resource: string;
  /**
   * The specific operation performed by the API. This string indicates the action taken, such as 'create', reflecting the nature of the POST request to add a new company. It provides clarity on what change was made to the CRM system.
   */
  operation: string;
  /**
   * This object contains the details of the newly created company resource in the CRM system. It serves as the primary container for the response data, ensuring that all relevant information about the operation's outcome is encapsulated. The object includes essential identifiers and attributes that define the newly added company.
   */
  data: UnifiedId;
};

/** @internal */
export const UnifiedId$inboundSchema: z.ZodType<
  UnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UnifiedId$outboundSchema: z.ZodType<
  UnifiedId$Outbound,
  z.ZodTypeDef,
  UnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedId$ {
  /** @deprecated use `UnifiedId$inboundSchema` instead. */
  export const inboundSchema = UnifiedId$inboundSchema;
  /** @deprecated use `UnifiedId$outboundSchema` instead. */
  export const outboundSchema = UnifiedId$outboundSchema;
  /** @deprecated use `UnifiedId$Outbound` instead. */
  export type Outbound = UnifiedId$Outbound;
}

export function unifiedIdToJSON(unifiedId: UnifiedId): string {
  return JSON.stringify(UnifiedId$outboundSchema.parse(unifiedId));
}

export function unifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateCompanyResponse$inboundSchema: z.ZodType<
  CreateCompanyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateCompanyResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UnifiedId$Outbound;
};

/** @internal */
export const CreateCompanyResponse$outboundSchema: z.ZodType<
  CreateCompanyResponse$Outbound,
  z.ZodTypeDef,
  CreateCompanyResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyResponse$ {
  /** @deprecated use `CreateCompanyResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyResponse$inboundSchema;
  /** @deprecated use `CreateCompanyResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyResponse$outboundSchema;
  /** @deprecated use `CreateCompanyResponse$Outbound` instead. */
  export type Outbound = CreateCompanyResponse$Outbound;
}

export function createCompanyResponseToJSON(
  createCompanyResponse: CreateCompanyResponse,
): string {
  return JSON.stringify(
    CreateCompanyResponse$outboundSchema.parse(createCompanyResponse),
  );
}

export function createCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompanyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompanyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompanyResponse' from JSON`,
  );
}
