/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the newly created company resource, including its unique identifier. It serves as the main container for the response data, confirming the successful addition of the company to the CRM system. The structure is typically a JSON object with nested properties.
 */
export type UnifiedId = {
  /**
   * The unique identifier assigned to the newly created company resource in the CRM. This string value is crucial for referencing the company in future operations, such as updates or retrievals, and confirms the successful creation of the resource.
   */
  id: string;
};

/**
 * Company created
 */
export type CreateCompanyResponse = {
  /**
   * The HTTP response status code indicating the result of the operation. A status code of 201 confirms that the company was successfully added to the CRM. This integer value is crucial for error handling and understanding the outcome of the POST request.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable status message, such as 'Created', which corresponds to the status code and helps in quickly understanding the result of the operation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider used for this operation. This string identifies which service within Apideck's ecosystem processed the request, especially useful when multiple services are integrated.
   */
  service: string;
  /**
   * The name of the Unified API resource that was affected by the operation. This string indicates the type of resource, such as 'company', that was created or modified, providing context about the operation's target within the CRM.
   */
  resource: string;
  /**
   * The specific operation that was performed, represented as a string. In this context, it indicates the action taken, such as 'add', confirming the type of modification made to the CRM data.
   */
  operation: string;
  /**
   * This object contains the details of the newly created company resource, including its unique identifier. It serves as the main container for the response data, confirming the successful addition of the company to the CRM system. The structure is typically a JSON object with nested properties.
   */
  data: UnifiedId;
};

/** @internal */
export const UnifiedId$inboundSchema: z.ZodType<
  UnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UnifiedId$outboundSchema: z.ZodType<
  UnifiedId$Outbound,
  z.ZodTypeDef,
  UnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedId$ {
  /** @deprecated use `UnifiedId$inboundSchema` instead. */
  export const inboundSchema = UnifiedId$inboundSchema;
  /** @deprecated use `UnifiedId$outboundSchema` instead. */
  export const outboundSchema = UnifiedId$outboundSchema;
  /** @deprecated use `UnifiedId$Outbound` instead. */
  export type Outbound = UnifiedId$Outbound;
}

export function unifiedIdToJSON(unifiedId: UnifiedId): string {
  return JSON.stringify(UnifiedId$outboundSchema.parse(unifiedId));
}

export function unifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedId' from JSON`,
  );
}

/** @internal */
export const CreateCompanyResponse$inboundSchema: z.ZodType<
  CreateCompanyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CreateCompanyResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UnifiedId$Outbound;
};

/** @internal */
export const CreateCompanyResponse$outboundSchema: z.ZodType<
  CreateCompanyResponse$Outbound,
  z.ZodTypeDef,
  CreateCompanyResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompanyResponse$ {
  /** @deprecated use `CreateCompanyResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCompanyResponse$inboundSchema;
  /** @deprecated use `CreateCompanyResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCompanyResponse$outboundSchema;
  /** @deprecated use `CreateCompanyResponse$Outbound` instead. */
  export type Outbound = CreateCompanyResponse$Outbound;
}

export function createCompanyResponseToJSON(
  createCompanyResponse: CreateCompanyResponse,
): string {
  return JSON.stringify(
    CreateCompanyResponse$outboundSchema.parse(createCompanyResponse),
  );
}

export function createCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompanyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompanyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompanyResponse' from JSON`,
  );
}
