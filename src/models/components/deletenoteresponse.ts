/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains details about the note that was deleted from the CRM system. It serves as a confirmation that the specified note has been successfully removed. The object includes the unique identifier of the deleted note, ensuring developers can verify the deletion operation's success.
 */
export type DeleteNoteResponseUnifiedId = {
  /**
   * The unique identifier of the note that was deleted. This ID confirms which specific note has been removed from the CRM system, allowing developers to track and verify the deletion process. It is crucial for ensuring that the correct note has been deleted, especially in systems with numerous entries.
   */
  id: string;
};

/**
 * Note deleted
 */
export type DeleteNoteResponse = {
  /**
   * The HTTP response status code returned by the server. This integer value indicates the result of the delete operation, with a successful deletion typically represented by a 200 status code. It helps developers confirm whether the note was successfully removed from the CRM system.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable status message, such as 'OK' for a successful operation, helping developers quickly understand the outcome of the delete request.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the operation. This string identifies which service integration was used for the delete operation, allowing developers to track and manage service-specific actions within the CRM.
   */
  service: string;
  /**
   * The name of the unified API resource that was targeted by the operation. This string indicates the specific type of resource, such as 'note', that was deleted, providing context about the nature of the data affected by the operation.
   */
  resource: string;
  /**
   * The type of operation performed, represented as a string. In this context, it specifies 'delete', indicating that the operation involved removing a resource from the CRM, which is crucial for maintaining data integrity and relevance.
   */
  operation: string;
  /**
   * This object contains details about the note that was deleted from the CRM system. It serves as a confirmation that the specified note has been successfully removed. The object includes the unique identifier of the deleted note, ensuring developers can verify the deletion operation's success.
   */
  data: DeleteNoteResponseUnifiedId;
};

/** @internal */
export const DeleteNoteResponseUnifiedId$inboundSchema: z.ZodType<
  DeleteNoteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteNoteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const DeleteNoteResponseUnifiedId$outboundSchema: z.ZodType<
  DeleteNoteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  DeleteNoteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteNoteResponseUnifiedId$ {
  /** @deprecated use `DeleteNoteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = DeleteNoteResponseUnifiedId$inboundSchema;
  /** @deprecated use `DeleteNoteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = DeleteNoteResponseUnifiedId$outboundSchema;
  /** @deprecated use `DeleteNoteResponseUnifiedId$Outbound` instead. */
  export type Outbound = DeleteNoteResponseUnifiedId$Outbound;
}

export function deleteNoteResponseUnifiedIdToJSON(
  deleteNoteResponseUnifiedId: DeleteNoteResponseUnifiedId,
): string {
  return JSON.stringify(
    DeleteNoteResponseUnifiedId$outboundSchema.parse(
      deleteNoteResponseUnifiedId,
    ),
  );
}

export function deleteNoteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<DeleteNoteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteNoteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteNoteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const DeleteNoteResponse$inboundSchema: z.ZodType<
  DeleteNoteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteNoteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type DeleteNoteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: DeleteNoteResponseUnifiedId$Outbound;
};

/** @internal */
export const DeleteNoteResponse$outboundSchema: z.ZodType<
  DeleteNoteResponse$Outbound,
  z.ZodTypeDef,
  DeleteNoteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteNoteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteNoteResponse$ {
  /** @deprecated use `DeleteNoteResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteNoteResponse$inboundSchema;
  /** @deprecated use `DeleteNoteResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteNoteResponse$outboundSchema;
  /** @deprecated use `DeleteNoteResponse$Outbound` instead. */
  export type Outbound = DeleteNoteResponse$Outbound;
}

export function deleteNoteResponseToJSON(
  deleteNoteResponse: DeleteNoteResponse,
): string {
  return JSON.stringify(
    DeleteNoteResponse$outboundSchema.parse(deleteNoteResponse),
  );
}

export function deleteNoteResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteNoteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteNoteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteNoteResponse' from JSON`,
  );
}
