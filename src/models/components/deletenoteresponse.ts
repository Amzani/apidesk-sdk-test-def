/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the unique identifier of the note that was deleted. It serves as confirmation that the specified note has been successfully removed from the CRM system. The presence of this object in the response indicates a successful deletion operation.
 */
export type DeleteNoteResponseUnifiedId = {
  /**
   * The unique identifier of the note that was deleted. This string value confirms the specific note that was removed from the CRM, ensuring developers can verify the correct resource was deleted. It matches the 'id' provided in the request path parameter.
   */
  id: string;
};

/**
 * Note deleted
 */
export type DeleteNoteResponse = {
  /**
   * The HTTP response status code indicating the result of the delete operation. A status code of 200 confirms that the note was successfully deleted from the CRM system. This integer value is crucial for error handling and confirming successful operations.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status. This string provides a human-readable status message, such as 'OK' for a successful deletion, helping developers quickly understand the outcome of the operation.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the delete request. This string helps identify which service handled the operation, especially useful in environments with multiple integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource involved in the operation. This string specifies the type of resource, such as 'note', that was targeted by the delete request, aiding in logging and debugging processes.
   */
  resource: string;
  /**
   * The specific operation performed, in this case, 'delete'. This string indicates the action taken on the resource, confirming that the operation was a deletion, which is essential for audit trails and operation tracking.
   */
  operation: string;
  /**
   * This object contains the unique identifier of the note that was deleted. It serves as confirmation that the specified note has been successfully removed from the CRM system. The presence of this object in the response indicates a successful deletion operation.
   */
  data: DeleteNoteResponseUnifiedId;
};

/** @internal */
export const DeleteNoteResponseUnifiedId$inboundSchema: z.ZodType<
  DeleteNoteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteNoteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const DeleteNoteResponseUnifiedId$outboundSchema: z.ZodType<
  DeleteNoteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  DeleteNoteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteNoteResponseUnifiedId$ {
  /** @deprecated use `DeleteNoteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = DeleteNoteResponseUnifiedId$inboundSchema;
  /** @deprecated use `DeleteNoteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = DeleteNoteResponseUnifiedId$outboundSchema;
  /** @deprecated use `DeleteNoteResponseUnifiedId$Outbound` instead. */
  export type Outbound = DeleteNoteResponseUnifiedId$Outbound;
}

export function deleteNoteResponseUnifiedIdToJSON(
  deleteNoteResponseUnifiedId: DeleteNoteResponseUnifiedId,
): string {
  return JSON.stringify(
    DeleteNoteResponseUnifiedId$outboundSchema.parse(
      deleteNoteResponseUnifiedId,
    ),
  );
}

export function deleteNoteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<DeleteNoteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteNoteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteNoteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const DeleteNoteResponse$inboundSchema: z.ZodType<
  DeleteNoteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteNoteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type DeleteNoteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: DeleteNoteResponseUnifiedId$Outbound;
};

/** @internal */
export const DeleteNoteResponse$outboundSchema: z.ZodType<
  DeleteNoteResponse$Outbound,
  z.ZodTypeDef,
  DeleteNoteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => DeleteNoteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteNoteResponse$ {
  /** @deprecated use `DeleteNoteResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteNoteResponse$inboundSchema;
  /** @deprecated use `DeleteNoteResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteNoteResponse$outboundSchema;
  /** @deprecated use `DeleteNoteResponse$Outbound` instead. */
  export type Outbound = DeleteNoteResponse$Outbound;
}

export function deleteNoteResponseToJSON(
  deleteNoteResponse: DeleteNoteResponse,
): string {
  return JSON.stringify(
    DeleteNoteResponse$outboundSchema.parse(deleteNoteResponse),
  );
}

export function deleteNoteResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteNoteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteNoteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteNoteResponse' from JSON`,
  );
}
