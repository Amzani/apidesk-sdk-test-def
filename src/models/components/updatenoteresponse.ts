/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated note's details, including its unique identifier. It serves as the primary container for the note's data returned after a successful update operation. The structure ensures that developers can access all relevant information about the note in a single, organized format.
 */
export type UpdateNoteResponseUnifiedId = {
  /**
   * The unique identifier of the note that was updated. This string value confirms the specific note that has been modified, allowing developers to reference or further interact with this particular note in subsequent operations. It is crucial for tracking changes and ensuring data consistency within the CRM system.
   */
  id: string;
};

/**
 * Note updated
 */
export type UpdateNoteResponse = {
  /**
   * The HTTP response status code indicating the result of the PATCH operation. This integer value helps determine if the note update was successful (e.g., 200 for success) or if there was an error. It is crucial for error handling and debugging in client applications.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request. This string provides a human-readable confirmation of the operation's outcome, complementing the status code for easier interpretation by developers.
   */
  status: string;
  /**
   * The Apideck ID of the service provider involved in the note update operation. This string identifies which service within the Apideck ecosystem processed the request, essential for tracking and managing integrations.
   */
  service: string;
  /**
   * The name of the Unified API resource that was affected by the operation, in this case, a 'note'. This string helps developers understand which type of resource was updated, facilitating better resource management and API interaction.
   */
  resource: string;
  /**
   * The specific operation performed, represented as a string, such as 'update'. This indicates the action taken on the resource, providing clarity on the type of modification executed within the CRM system.
   */
  operation: string;
  /**
   * This object contains the updated note's details, including its unique identifier. It serves as the primary container for the note's data returned after a successful update operation. The structure ensures that developers can access all relevant information about the note in a single, organized format.
   */
  data: UpdateNoteResponseUnifiedId;
};

/** @internal */
export const UpdateNoteResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateNoteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateNoteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateNoteResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateNoteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateNoteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNoteResponseUnifiedId$ {
  /** @deprecated use `UpdateNoteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateNoteResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateNoteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateNoteResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateNoteResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateNoteResponseUnifiedId$Outbound;
}

export function updateNoteResponseUnifiedIdToJSON(
  updateNoteResponseUnifiedId: UpdateNoteResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateNoteResponseUnifiedId$outboundSchema.parse(
      updateNoteResponseUnifiedId,
    ),
  );
}

export function updateNoteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNoteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNoteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNoteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateNoteResponse$inboundSchema: z.ZodType<
  UpdateNoteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateNoteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateNoteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateNoteResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateNoteResponse$outboundSchema: z.ZodType<
  UpdateNoteResponse$Outbound,
  z.ZodTypeDef,
  UpdateNoteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateNoteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNoteResponse$ {
  /** @deprecated use `UpdateNoteResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateNoteResponse$inboundSchema;
  /** @deprecated use `UpdateNoteResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateNoteResponse$outboundSchema;
  /** @deprecated use `UpdateNoteResponse$Outbound` instead. */
  export type Outbound = UpdateNoteResponse$Outbound;
}

export function updateNoteResponseToJSON(
  updateNoteResponse: UpdateNoteResponse,
): string {
  return JSON.stringify(
    UpdateNoteResponse$outboundSchema.parse(updateNoteResponse),
  );
}

export function updateNoteResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNoteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNoteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNoteResponse' from JSON`,
  );
}
