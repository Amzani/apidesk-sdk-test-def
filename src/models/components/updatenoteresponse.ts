/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the note that was updated in the CRM. It includes all relevant information about the note, such as its unique identifier and any other updated fields. This object serves as the main container for the response data, confirming the successful update of the note.
 */
export type UpdateNoteResponseUnifiedId = {
  /**
   * The unique identifier of the note that was updated. This ID is essential for referencing the specific note within the CRM system and confirms which note was successfully modified during the update operation.
   */
  id: string;
};

/**
 * Note updated
 */
export type UpdateNoteResponse = {
  /**
   * The HTTP response status code returned by the server, indicating the result of the PATCH request to update a note. A status code of 200 signifies that the note was successfully updated. This integer value helps in programmatically determining the outcome of the operation.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful update. This string provides a human-readable confirmation of the operation's result, complementing the numeric status code.
   */
  status: string;
  /**
   * The unique Apideck identifier for the service provider involved in the note update operation. This string helps in identifying which service integration was used during the request, especially useful in multi-service environments.
   */
  service: string;
  /**
   * The name of the unified API resource that was targeted by the operation, in this case, a 'note'. This string indicates the type of resource that was updated, providing context about the operation's focus within the CRM system.
   */
  resource: string;
  /**
   * The specific operation performed, which in this context is 'update'. This string confirms the type of action executed on the resource, ensuring clarity about the nature of the request processed by the API.
   */
  operation: string;
  /**
   * This object contains the details of the note that was updated in the CRM. It includes all relevant information about the note, such as its unique identifier and any other updated fields. This object serves as the main container for the response data, confirming the successful update of the note.
   */
  data: UpdateNoteResponseUnifiedId;
};

/** @internal */
export const UpdateNoteResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateNoteResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateNoteResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateNoteResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateNoteResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateNoteResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNoteResponseUnifiedId$ {
  /** @deprecated use `UpdateNoteResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateNoteResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateNoteResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateNoteResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateNoteResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateNoteResponseUnifiedId$Outbound;
}

export function updateNoteResponseUnifiedIdToJSON(
  updateNoteResponseUnifiedId: UpdateNoteResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateNoteResponseUnifiedId$outboundSchema.parse(
      updateNoteResponseUnifiedId,
    ),
  );
}

export function updateNoteResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNoteResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNoteResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNoteResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateNoteResponse$inboundSchema: z.ZodType<
  UpdateNoteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateNoteResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateNoteResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateNoteResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateNoteResponse$outboundSchema: z.ZodType<
  UpdateNoteResponse$Outbound,
  z.ZodTypeDef,
  UpdateNoteResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateNoteResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNoteResponse$ {
  /** @deprecated use `UpdateNoteResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateNoteResponse$inboundSchema;
  /** @deprecated use `UpdateNoteResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateNoteResponse$outboundSchema;
  /** @deprecated use `UpdateNoteResponse$Outbound` instead. */
  export type Outbound = UpdateNoteResponse$Outbound;
}

export function updateNoteResponseToJSON(
  updateNoteResponse: UpdateNoteResponse,
): string {
  return JSON.stringify(
    UpdateNoteResponse$outboundSchema.parse(updateNoteResponse),
  );
}

export function updateNoteResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNoteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNoteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNoteResponse' from JSON`,
  );
}
