/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the currency type for the monetary amount associated with the lead, following the ISO 4217 standard (e.g., USD for US Dollar, EUR for Euro). This ensures consistency in financial reporting and analysis across different regions and markets. It is essential for accurate financial calculations and comparisons, especially in multinational operations.
 */
export const LeadCreateRequestCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Specifies the currency type for the monetary amount associated with the lead, following the ISO 4217 standard (e.g., USD for US Dollar, EUR for Euro). This ensures consistency in financial reporting and analysis across different regions and markets. It is essential for accurate financial calculations and comparisons, especially in multinational operations.
 */
export type LeadCreateRequestCurrency = ClosedEnum<
  typeof LeadCreateRequestCurrency
>;

/**
 * The type of website associated with the lead, such as 'personal', 'business', or 'portfolio'. This categorization helps CRM users quickly understand the nature of the website and its relevance to the lead's profile. While not required, specifying the type can enhance data organization and retrieval, aiding in targeted communication strategies.
 */
export const LeadCreateRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website associated with the lead, such as 'personal', 'business', or 'portfolio'. This categorization helps CRM users quickly understand the nature of the website and its relevance to the lead's profile. While not required, specifying the type can enhance data organization and retrieval, aiding in targeted communication strategies.
 */
export type LeadCreateRequestType = ClosedEnum<typeof LeadCreateRequestType>;

export type LeadCreateRequestWebsites = {
  /**
   * A unique identifier for each website entry associated with the lead, ensuring that each website can be distinctly referenced and managed within the CRM system. This ID is crucial for operations that involve updating or removing specific websites from the lead's profile, maintaining data integrity and consistency.
   */
  id?: string | null | undefined;
  /**
   * The website URL for the lead's business or personal site. This URL serves as a digital point of contact and is essential for verifying the lead's online presence. It must be a valid URL format, starting with http:// or https://, and is crucial for CRM users to access further information about the lead's activities or offerings. This field is required to ensure that the lead's digital footprint is accurately captured and easily accessible.
   */
  url: string;
  /**
   * The type of website associated with the lead, such as 'personal', 'business', or 'portfolio'. This categorization helps CRM users quickly understand the nature of the website and its relevance to the lead's profile. While not required, specifying the type can enhance data organization and retrieval, aiding in targeted communication strategies.
   */
  type?: LeadCreateRequestType | null | undefined;
};

/**
 * Specifies the type of address, such as 'home', 'work', or 'billing'. This classification helps in organizing and retrieving addresses based on their usage context. It is important for applications that need to differentiate between various address types for operations like shipping or invoicing.
 */
export const LeadCreateRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of address, such as 'home', 'work', or 'billing'. This classification helps in organizing and retrieving addresses based on their usage context. It is important for applications that need to differentiate between various address types for operations like shipping or invoicing.
 */
export type LeadCreateRequestAddressesType = ClosedEnum<
  typeof LeadCreateRequestAddressesType
>;

export type LeadCreateRequestAddresses = {
  /**
   * A unique identifier for each address within the user's address array. This ID is crucial for distinguishing between different address records, especially when updating or deleting specific addresses. It ensures that each address can be individually referenced and managed within the CRM system, maintaining data integrity and accuracy.
   */
  id?: string | null | undefined;
  /**
   * Specifies the type of address, such as 'home', 'work', or 'billing'. This classification helps in organizing and retrieving addresses based on their usage context. It is important for applications that need to differentiate between various address types for operations like shipping or invoicing.
   */
  type?: LeadCreateRequestAddressesType | null | undefined;
  /**
   * The full address in a single string format, used when structured address data is not available. This field is essential for APIs that do not support detailed address components, allowing for a flexible representation of address information. It is particularly useful for quick data entry and display purposes.
   */
  string?: string | null | undefined;
  /**
   * A descriptive name for the address, often used to label or identify the address within the user's profile. This can include names like 'Headquarters', 'Main Office', or 'John's Apartment', providing a human-readable identifier that simplifies address management and selection within the CRM.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * The name of the city associated with the user's address. This field is used to specify the city where the user resides or is located. It is important for geographical identification and can be used for location-based services or analytics. Ensure the city name is spelled correctly to maintain data accuracy and integrity within the CRM system.
   */
  city?: string | null | undefined;
  /**
   * The name of the state or region associated with the user's address. This field helps in identifying the specific administrative area within a country where the user is located. It is crucial for regional segmentation and can aid in compliance with local regulations. Ensure the state name is accurate to facilitate proper data management and reporting.
   */
  state?: string | null | undefined;
  /**
   * The postal code or equivalent for the user's address. This field is essential for precise location identification and is often used in mailing and shipping processes. It can also be used for demographic analysis and service eligibility checks. Ensure the postal code is valid and corresponds to the correct city and state to avoid errors in data processing.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the user's address, following the ISO 3166-1 alpha-2 standard. This field is vital for internationalization and ensures that the user's location is correctly identified on a global scale. It supports cross-border operations and compliance with international standards. Ensure the country code is accurate to maintain consistency in global data management.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the user's address. This field provides the geographical latitude, which is used in mapping and location-based services. It is important for applications that require precise geolocation, such as delivery services or geographic analysis. Ensure the latitude is accurate to enhance the reliability of location-dependent operations.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, representing the east-west position on the Earth's surface. This value is crucial for geolocation services and mapping functionalities within the CRM, enabling precise location tracking and integration with geographic information systems. It should be a valid string representation of a decimal degree, typically ranging from -180.0 to 180.0.
   */
  longitude?: string | null | undefined;
  /**
   * This field captures the sublocality or county of the address, providing additional geographic context. It is particularly useful for regional segmentation and analysis, allowing for more granular data categorization and reporting. The county name should be accurately spelled to ensure consistency across records.
   */
  county?: string | null | undefined;
  /**
   * The full name of the primary contact person associated with the address. This information is vital for personalized communication and relationship management within the CRM. It should include both first and last names, and be kept up-to-date to reflect any changes in contact personnel.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as Mr., Ms., Dr., etc. This field enhances formal communication and is important for maintaining professional etiquette in correspondence. It should be chosen based on the contact's preference and cultural norms.
   */
  salutation?: string | null | undefined;
  /**
   * The primary phone number associated with the address, used for direct communication with the contact person. This number should be formatted according to international standards to ensure it can be dialed from any location. It is essential for timely and effective communication, especially in customer service scenarios.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the user's address. This field allows for the inclusion of traditional communication methods, which may be necessary for certain business transactions or legal documentation. While not commonly used in modern digital communications, maintaining a fax number can be crucial for businesses that still rely on this method. Ensure the number is formatted correctly to avoid transmission errors.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the user's address, serving as a primary mode of digital communication. This field is essential for sending notifications, updates, and other important information directly to the user. It should be a valid email format to ensure successful delivery and communication. Keeping this information up-to-date is vital for maintaining effective contact with the user.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the user's address, providing a digital point of reference or contact. This can be used to direct users to a personal or business website, offering more information or services. Ensure the URL is complete and correctly formatted to facilitate seamless access. This field supports the user's digital presence and connectivity.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the user's address, offering space for any extra information that might be relevant but does not fit into other predefined fields. This could include special delivery instructions, historical data, or personal preferences. These notes can be crucial for personalized service and ensuring all relevant details are captured.
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to track changes to the user's address object, ensuring data integrity and preventing update conflicts. This field is automatically incremented with each update, allowing the system to detect concurrent modifications and manage them appropriately. It is crucial for maintaining accurate and consistent data across the CRM system, especially in environments with multiple users accessing the same records.
   */
  rowVersion?: string | null | undefined;
};

export type LeadCreateRequestSocialLinks = {
  /**
   * A unique identifier for each social link entry within the array. This ID is used to distinguish between different social media profiles associated with the lead, ensuring that each link can be individually referenced and managed. It is essential for operations that involve updating or removing specific social links without affecting others.
   */
  id?: string | null | undefined;
  /**
   * The complete URL of the social media profile associated with the lead. This field is required and must be a valid URL format, such as 'https://www.twitter.com/apideck'. It provides direct access to the lead's social media presence, enabling CRM users to quickly view and interact with the lead's profiles. Accurate URLs are vital for maintaining effective communication and engagement strategies.
   */
  url: string;
  /**
   * Specifies the type of social media link associated with the lead, such as Twitter, LinkedIn, or Facebook. This field helps categorize and manage the lead's social media presence within the CRM, allowing for targeted communication strategies. It is optional but recommended for leads with active social media profiles to enhance engagement tracking.
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number, indicating its purpose or usage context, such as 'mobile', 'home', 'work', etc. This classification helps in organizing contact methods and is crucial for determining the best way to reach a user. It is optional but recommended for clarity in communication preferences.
 */
export const LeadCreateRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number, indicating its purpose or usage context, such as 'mobile', 'home', 'work', etc. This classification helps in organizing contact methods and is crucial for determining the best way to reach a user. It is optional but recommended for clarity in communication preferences.
 */
export type LeadCreateRequestPhoneNumbersType = ClosedEnum<
  typeof LeadCreateRequestPhoneNumbersType
>;

export type LeadCreateRequestPhoneNumbers = {
  /**
   * A unique identifier for each phone number entry within the user's phone numbers array. This ID is crucial for distinguishing between different phone numbers, especially when updating or deleting specific numbers. It ensures that operations are performed on the correct phone number entry, maintaining data integrity within the user's contact information.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code associated with the phone number, such as '+1' for the United States. This field is essential for ensuring that phone numbers are formatted correctly for international dialing and can be used to validate the geographical origin of the number. It helps in standardizing phone numbers across different regions and is critical for applications that involve international communication.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code that precedes the local phone number, such as '323' for parts of Los Angeles. This code is important for routing calls within specific geographic areas and is a key component of the full phone number. Including the area code ensures that the phone number is complete and can be dialed correctly from both local and international locations.
   */
  areaCode?: string | null | undefined;
  /**
   * The main part of the phone number, excluding the country and area codes. This field is required as it represents the actual number that will be dialed within the specified area and country codes. It is the core component of the user's contact information and must be accurate to ensure successful communication. This field is mandatory to ensure that there is a valid number associated with the user.
   */
  number: string;
  /**
   * The extension of the phone number, typically used in corporate environments to direct calls to specific departments or employees. This field is optional and should be used when the phone number is part of a larger system, such as a PBX, where extensions are necessary for routing calls internally. Including an extension ensures that calls reach the intended recipient without delay.
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number, indicating its purpose or usage context, such as 'mobile', 'home', 'work', etc. This classification helps in organizing contact methods and is crucial for determining the best way to reach a user. It is optional but recommended for clarity in communication preferences.
   */
  type?: LeadCreateRequestPhoneNumbersType | null | undefined;
};

/**
 * Specifies the category or role of the email address associated with the user, such as 'work', 'personal', or 'other'. This helps in distinguishing between different types of email addresses for effective communication management within the CRM system. It is not mandatory, but providing this information can enhance the clarity and organization of user contact details.
 */
export const LeadCreateRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category or role of the email address associated with the user, such as 'work', 'personal', or 'other'. This helps in distinguishing between different types of email addresses for effective communication management within the CRM system. It is not mandatory, but providing this information can enhance the clarity and organization of user contact details.
 */
export type LeadCreateRequestEmailsType = ClosedEnum<
  typeof LeadCreateRequestEmailsType
>;

export type LeadCreateRequestEmails = {
  /**
   * A unique identifier for each email address within the user's email collection. This ID is used to distinguish between multiple email addresses associated with a single user, allowing for precise updates and management of contact information. It is optional but can be useful for operations that require specific email targeting.
   */
  id?: string | null | undefined;
  /**
   * The actual email address used for electronic communication with the user. This field is required and must be a valid email format to ensure successful delivery of messages. It serves as a primary contact method and is essential for user engagement and CRM operations.
   */
  email: string | null;
  /**
   * Specifies the category or role of the email address associated with the user, such as 'work', 'personal', or 'other'. This helps in distinguishing between different types of email addresses for effective communication management within the CRM system. It is not mandatory, but providing this information can enhance the clarity and organization of user contact details.
   */
  type?: LeadCreateRequestEmailsType | null | undefined;
};

export type LeadCreateRequestValue6 = {};

export type LeadCreateRequestValue4 = {};

/**
 * The value assigned to a custom field within the opportunity record. Custom fields allow for additional, user-defined data to be stored, providing flexibility to tailor the CRM to specific business needs. This field is optional and can be used to capture unique attributes or metrics relevant to the opportunity that are not covered by standard fields.
 */
export type LeadCreateRequestValue =
  | LeadCreateRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadCreateRequestValue6>;

export type LeadCreateRequestCustomFields = {
  /**
   * Unique identifier for the custom field. This ID is essential for distinguishing each custom field within the opportunity's data structure. It ensures that each field can be individually accessed, updated, or removed as needed. The ID must be unique within the context of the opportunity to prevent data conflicts and maintain data integrity.
   */
  id: string | null;
  /**
   * Name of the custom field. This name serves as a label for the custom field, providing a human-readable identifier that describes the field's purpose or content. While not required, including a name can improve clarity and usability, especially when multiple custom fields are present. It should be concise yet descriptive enough to convey the field's role in the opportunity's data.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field. This description offers additional context or details about the custom field's intended use or significance. It can include guidelines on what type of data should be entered or how the field relates to the overall sales process. Providing a description is optional but can enhance understanding and proper utilization of the custom field by users.
   */
  description?: string | null | undefined;
  /**
   * The value assigned to a custom field within the opportunity record. Custom fields allow for additional, user-defined data to be stored, providing flexibility to tailor the CRM to specific business needs. This field is optional and can be used to capture unique attributes or metrics relevant to the opportunity that are not covered by standard fields.
   */
  value?:
    | LeadCreateRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadCreateRequestValue6>
    | null
    | undefined;
};

export type LeadCreateRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the user record where the value should be applied. This is essential for making precise updates to nested fields, ensuring that changes are made only to the intended parts of the data structure. The path must be valid and correspond to an existing field within the user record.
   */
  path: string;
  /**
   * This property represents the specific value that you wish to assign to a designated path within the user record. It can be of any data type, such as a string, number, boolean, or object, depending on the field being updated. The flexibility of this property allows for a wide range of updates, from simple text changes to complex data structures. In the context of the `usersUpdate` operation, this property is crucial for specifying the exact data modification you intend to make, ensuring that only the targeted fields are altered without affecting other data. Proper validation should be applied to ensure the value is compatible with the field's expected data type and business rules. Common use cases include updating user contact information, preferences, or custom attributes specific to your CRM's schema.
   */
  value?: any | undefined;
};

export type LeadCreateRequestPassThrough = {
  /**
   * The unique identifier for the specific service to which this pass_through should be applied. This is crucial for directing the update operation to the correct service within the CRM system, ensuring that the modifications are executed in the appropriate context. It must be a valid service ID that corresponds to an active service integration, and it is required for the operation to proceed.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation within the CRM system to which this pass_through should be applied. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise targeting and execution of specific operations. If provided, it should match an existing operation ID to ensure correct processing.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the inclusion of any additional properties needed for direct extension of the user record. This can be used to add custom fields or metadata that are not part of the standard user schema, providing a way to tailor the user data to specific business needs. The structure of this object should align with the CRM's data model to ensure compatibility.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications via specified paths. This allows for precise updates to nested data structures within the user record, enabling complex modifications without altering unrelated data. Each object in the array should define a clear path and value to be applied, ensuring targeted updates.
   */
  extendPaths?: Array<LeadCreateRequestExtendPaths> | undefined;
};

export type LeadCreateRequest = {
  /**
   * The full name of the lead, which serves as a primary identifier in the CRM system. This field is required to ensure that the lead can be easily recognized and managed within the CRM. It is essential for personalized communication and for linking the lead to other records, such as interactions and transactions. The name should be entered in a format that is consistent with other records to maintain uniformity across the system.
   */
  name: string;
  /**
   * The name of the company with which the lead is associated. This field is required to establish a clear connection between the lead and their business context, which is vital for B2B interactions. It helps in categorizing and segmenting leads based on their business affiliations, enabling targeted marketing and sales strategies. The company name should be accurate and reflect the official business name to ensure consistency across records.
   */
  companyName: string | null;
  /**
   * The unique identifier of the user or agent who owns or is responsible for managing the lead. This field, while not required, is important for assigning accountability and tracking the lead's progress through the sales pipeline. It allows for efficient delegation and follow-up actions by the responsible party. The owner ID should correspond to a valid user in the system to ensure proper assignment and management.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the individual who owns or is responsible for the lead. This field, although not required, provides a human-readable reference to the lead's owner, facilitating easier recognition and communication. It complements the owner ID by offering a more intuitive way to identify the responsible party, especially in reports and dashboards. The owner name should match the user's official name in the system for consistency.
   */
  ownerName?: string | null | undefined;
  /**
   * The unique identifier for the company that the lead is associated with. This ID links the lead to its parent company within the CRM, ensuring that all interactions and updates are correctly attributed to the right organization. It is essential for maintaining accurate records of which company the lead belongs to, especially in scenarios where leads are transferred between companies or when analyzing lead data by company. This field is optional but recommended for leads that are part of a larger corporate structure.
   */
  companyId?: string | null | undefined;
  /**
   * The unique identifier for the lead within the CRM system. This ID is crucial for distinguishing between different leads, especially when multiple leads have similar names or details. It serves as the primary key for updating the lead's information and must be used accurately to ensure that the correct lead record is modified. Although not required in the request body, it is typically used in conjunction with the path parameter to confirm the lead being updated.
   */
  leadId?: string | null | undefined;
  /**
   * The origin or method through which the lead was acquired, such as 'web', 'referral', or 'trade show'. Understanding the lead source is vital for tracking the effectiveness of marketing campaigns and sales strategies. This information helps in analyzing which channels are most successful in generating leads and can guide future marketing efforts. While optional, providing the lead source can enhance the quality of lead data analytics.
   */
  leadSource?: string | null | undefined;
  /**
   * The given name of the lead, used for personalization in communications and record-keeping. Including the first name is important for creating a personalized experience for the lead, which can improve engagement and conversion rates. This field should be filled with the lead's legal first name or preferred name for accurate identification and communication.
   */
  firstName?: string | null | undefined;
  /**
   * The surname or family name of the lead, essential for identification and formal communication. The last name is used in conjunction with the first name to uniquely identify a lead within the CRM, especially in cases where multiple leads share the same first name. It is important for maintaining professional correspondence and ensuring that records are complete and accurate.
   */
  lastName?: string | null | undefined;
  /**
   * A detailed narrative about the lead, capturing essential information that provides context and background. This field can include notes on the lead's interests, needs, and any previous interactions. It is valuable for sales and marketing teams to tailor their approach and communication strategies. While not mandatory, providing a comprehensive description can enhance the personalization of follow-up actions and improve lead engagement.
   */
  description?: string | null | undefined;
  /**
   * An optional field to specify the lead's prefix, such as Mr., Ms., Dr., etc. This is used to address the lead appropriately in communications and can contribute to a more personalized and respectful interaction. Although not required, including a prefix can enhance the professionalism of correspondence and is particularly useful in formal business environments.
   */
  prefix?: string | null | undefined;
  /**
   * The professional job title of the lead, such as 'Marketing Manager' or 'Sales Director'. This information helps in understanding the lead's role and level of decision-making authority within their organization. It is useful for segmenting leads and tailoring communication strategies based on their professional responsibilities. While optional, providing a job title can significantly aid in targeting the right message to the right person.
   */
  title?: string | null | undefined;
  /**
   * The preferred language of communication for the lead, represented by a two-letter ISO 639-1 code (e.g., 'EN' for English). This field is crucial for ensuring that all communications are conducted in a language the lead understands, thereby improving engagement and reducing misunderstandings. It supports internationalization and localization efforts, making it easier to manage leads from diverse linguistic backgrounds. Although optional, specifying the language can enhance the effectiveness of communication strategies.
   */
  language?: string | null | undefined;
  /**
   * The current status of the lead within the CRM system, such as 'New', 'Contacted', 'Qualified', etc. This field is instrumental in tracking the lead's journey through the sales pipeline and helps in prioritizing follow-up actions. It provides insights into the lead's engagement level and readiness to proceed to the next stage. While not mandatory, updating the status regularly can improve sales forecasting and resource allocation.
   */
  status?: string | null | undefined;
  /**
   * The total financial value associated with the lead, representing potential revenue. This field is crucial for forecasting and prioritizing leads based on their potential impact on sales. It should be a positive number, reflecting the expected deal size in the specified currency. Commonly used by sales teams to assess lead quality and allocate resources effectively.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Specifies the currency type for the monetary amount associated with the lead, following the ISO 4217 standard (e.g., USD for US Dollar, EUR for Euro). This ensures consistency in financial reporting and analysis across different regions and markets. It is essential for accurate financial calculations and comparisons, especially in multinational operations.
   */
  currency?: LeadCreateRequestCurrency | null | undefined;
  /**
   * The contact fax number for the lead, which may be used for sending documents or formal communications. Although less common in digital communications, it remains relevant in industries where faxing is still a standard practice. The number should include the country code and area code for international consistency.
   */
  fax?: string | null | undefined;
  /**
   * A list of websites associated with the lead, providing additional context or resources related to the lead's business or personal interests. This can include corporate websites, personal blogs, or social media profiles. Useful for sales and marketing teams to gather more information about the lead's online presence and engagement.
   */
  websites?: Array<LeadCreateRequestWebsites> | undefined;
  /**
   * An array of address objects associated with the lead. Each address provides location details that can be used for geographical analysis, regional marketing strategies, or logistical planning. This array can include multiple addresses, such as home, work, or billing addresses, offering a comprehensive view of the lead's physical locations.
   */
  addresses?: Array<LeadCreateRequestAddresses> | undefined;
  /**
   * An array containing the social media links associated with the lead. Each entry in this array represents a different social media profile, allowing for a comprehensive view of the lead's online presence. This can be particularly useful for sales and marketing teams to understand the lead's interests and engagement across various platforms. The array can include multiple entries, each with its own unique identifier and URL.
   */
  socialLinks?: Array<LeadCreateRequestSocialLinks> | undefined;
  /**
   * A collection of phone number objects associated with the lead. Each object within the array can contain details such as the phone number's unique identifier, country code, and area code. This array allows for storing multiple contact numbers, facilitating diverse communication channels with the lead. It is optional but useful for leads with multiple contact numbers.
   */
  phoneNumbers?: Array<LeadCreateRequestPhoneNumbers> | undefined;
  /**
   * A collection of email addresses associated with the lead. This array can include multiple entries to accommodate different contact points, such as personal and work emails, enhancing the flexibility and reach of communication strategies.
   */
  emails?: Array<LeadCreateRequestEmails> | undefined;
  /**
   * An array of custom fields that allow for additional, user-defined data to be associated with the lead. These fields enable customization and flexibility, accommodating unique business needs and enhancing lead profiles with specific information not covered by standard fields.
   */
  customFields?: Array<LeadCreateRequestCustomFields> | undefined;
  /**
   * An array of tags associated with the lead, used to categorize or label the lead for easier identification and filtering within the CRM. Tags can represent various attributes or statuses, such as 'VIP', 'Prospect', or 'Follow-up', and help in organizing leads based on specific criteria. This property is optional but can significantly enhance lead management by enabling quick searches and segmentation.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The 'pass_through' property is an array that allows the inclusion of service-specific custom data or structured modifications within the request body when updating lead resources. This feature is particularly useful for integrating with third-party services that require additional parameters or configurations not covered by standard fields. It enables flexibility and extensibility in handling unique business requirements or workflows that involve multiple systems. Each entry in the array should adhere to the expected structure defined by the target service.
   */
  passThrough?: Array<LeadCreateRequestPassThrough> | undefined;
};

/** @internal */
export const LeadCreateRequestCurrency$inboundSchema: z.ZodNativeEnum<
  typeof LeadCreateRequestCurrency
> = z.nativeEnum(LeadCreateRequestCurrency);

/** @internal */
export const LeadCreateRequestCurrency$outboundSchema: z.ZodNativeEnum<
  typeof LeadCreateRequestCurrency
> = LeadCreateRequestCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestCurrency$ {
  /** @deprecated use `LeadCreateRequestCurrency$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestCurrency$inboundSchema;
  /** @deprecated use `LeadCreateRequestCurrency$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestCurrency$outboundSchema;
}

/** @internal */
export const LeadCreateRequestType$inboundSchema: z.ZodNativeEnum<
  typeof LeadCreateRequestType
> = z.nativeEnum(LeadCreateRequestType);

/** @internal */
export const LeadCreateRequestType$outboundSchema: z.ZodNativeEnum<
  typeof LeadCreateRequestType
> = LeadCreateRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestType$ {
  /** @deprecated use `LeadCreateRequestType$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestType$inboundSchema;
  /** @deprecated use `LeadCreateRequestType$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestType$outboundSchema;
}

/** @internal */
export const LeadCreateRequestWebsites$inboundSchema: z.ZodType<
  LeadCreateRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadCreateRequestType$inboundSchema).optional(),
});

/** @internal */
export type LeadCreateRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadCreateRequestWebsites$outboundSchema: z.ZodType<
  LeadCreateRequestWebsites$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadCreateRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestWebsites$ {
  /** @deprecated use `LeadCreateRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestWebsites$inboundSchema;
  /** @deprecated use `LeadCreateRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestWebsites$outboundSchema;
  /** @deprecated use `LeadCreateRequestWebsites$Outbound` instead. */
  export type Outbound = LeadCreateRequestWebsites$Outbound;
}

export function leadCreateRequestWebsitesToJSON(
  leadCreateRequestWebsites: LeadCreateRequestWebsites,
): string {
  return JSON.stringify(
    LeadCreateRequestWebsites$outboundSchema.parse(leadCreateRequestWebsites),
  );
}

export function leadCreateRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestWebsites' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof LeadCreateRequestAddressesType
> = z.nativeEnum(LeadCreateRequestAddressesType);

/** @internal */
export const LeadCreateRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof LeadCreateRequestAddressesType
> = LeadCreateRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestAddressesType$ {
  /** @deprecated use `LeadCreateRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestAddressesType$inboundSchema;
  /** @deprecated use `LeadCreateRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestAddressesType$outboundSchema;
}

/** @internal */
export const LeadCreateRequestAddresses$inboundSchema: z.ZodType<
  LeadCreateRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadCreateRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type LeadCreateRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const LeadCreateRequestAddresses$outboundSchema: z.ZodType<
  LeadCreateRequestAddresses$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadCreateRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestAddresses$ {
  /** @deprecated use `LeadCreateRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestAddresses$inboundSchema;
  /** @deprecated use `LeadCreateRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestAddresses$outboundSchema;
  /** @deprecated use `LeadCreateRequestAddresses$Outbound` instead. */
  export type Outbound = LeadCreateRequestAddresses$Outbound;
}

export function leadCreateRequestAddressesToJSON(
  leadCreateRequestAddresses: LeadCreateRequestAddresses,
): string {
  return JSON.stringify(
    LeadCreateRequestAddresses$outboundSchema.parse(leadCreateRequestAddresses),
  );
}

export function leadCreateRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestAddresses' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequestSocialLinks$inboundSchema: z.ZodType<
  LeadCreateRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type LeadCreateRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadCreateRequestSocialLinks$outboundSchema: z.ZodType<
  LeadCreateRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestSocialLinks$ {
  /** @deprecated use `LeadCreateRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestSocialLinks$inboundSchema;
  /** @deprecated use `LeadCreateRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestSocialLinks$outboundSchema;
  /** @deprecated use `LeadCreateRequestSocialLinks$Outbound` instead. */
  export type Outbound = LeadCreateRequestSocialLinks$Outbound;
}

export function leadCreateRequestSocialLinksToJSON(
  leadCreateRequestSocialLinks: LeadCreateRequestSocialLinks,
): string {
  return JSON.stringify(
    LeadCreateRequestSocialLinks$outboundSchema.parse(
      leadCreateRequestSocialLinks,
    ),
  );
}

export function leadCreateRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequestPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof LeadCreateRequestPhoneNumbersType
> = z.nativeEnum(LeadCreateRequestPhoneNumbersType);

/** @internal */
export const LeadCreateRequestPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof LeadCreateRequestPhoneNumbersType
> = LeadCreateRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestPhoneNumbersType$ {
  /** @deprecated use `LeadCreateRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `LeadCreateRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    LeadCreateRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const LeadCreateRequestPhoneNumbers$inboundSchema: z.ZodType<
  LeadCreateRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadCreateRequestPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type LeadCreateRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const LeadCreateRequestPhoneNumbers$outboundSchema: z.ZodType<
  LeadCreateRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadCreateRequestPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestPhoneNumbers$ {
  /** @deprecated use `LeadCreateRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `LeadCreateRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `LeadCreateRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = LeadCreateRequestPhoneNumbers$Outbound;
}

export function leadCreateRequestPhoneNumbersToJSON(
  leadCreateRequestPhoneNumbers: LeadCreateRequestPhoneNumbers,
): string {
  return JSON.stringify(
    LeadCreateRequestPhoneNumbers$outboundSchema.parse(
      leadCreateRequestPhoneNumbers,
    ),
  );
}

export function leadCreateRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof LeadCreateRequestEmailsType
> = z.nativeEnum(LeadCreateRequestEmailsType);

/** @internal */
export const LeadCreateRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof LeadCreateRequestEmailsType
> = LeadCreateRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestEmailsType$ {
  /** @deprecated use `LeadCreateRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestEmailsType$inboundSchema;
  /** @deprecated use `LeadCreateRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestEmailsType$outboundSchema;
}

/** @internal */
export const LeadCreateRequestEmails$inboundSchema: z.ZodType<
  LeadCreateRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadCreateRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type LeadCreateRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const LeadCreateRequestEmails$outboundSchema: z.ZodType<
  LeadCreateRequestEmails$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadCreateRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestEmails$ {
  /** @deprecated use `LeadCreateRequestEmails$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestEmails$inboundSchema;
  /** @deprecated use `LeadCreateRequestEmails$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestEmails$outboundSchema;
  /** @deprecated use `LeadCreateRequestEmails$Outbound` instead. */
  export type Outbound = LeadCreateRequestEmails$Outbound;
}

export function leadCreateRequestEmailsToJSON(
  leadCreateRequestEmails: LeadCreateRequestEmails,
): string {
  return JSON.stringify(
    LeadCreateRequestEmails$outboundSchema.parse(leadCreateRequestEmails),
  );
}

export function leadCreateRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestEmails' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequestValue6$inboundSchema: z.ZodType<
  LeadCreateRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadCreateRequestValue6$Outbound = {};

/** @internal */
export const LeadCreateRequestValue6$outboundSchema: z.ZodType<
  LeadCreateRequestValue6$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestValue6$ {
  /** @deprecated use `LeadCreateRequestValue6$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestValue6$inboundSchema;
  /** @deprecated use `LeadCreateRequestValue6$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestValue6$outboundSchema;
  /** @deprecated use `LeadCreateRequestValue6$Outbound` instead. */
  export type Outbound = LeadCreateRequestValue6$Outbound;
}

export function leadCreateRequestValue6ToJSON(
  leadCreateRequestValue6: LeadCreateRequestValue6,
): string {
  return JSON.stringify(
    LeadCreateRequestValue6$outboundSchema.parse(leadCreateRequestValue6),
  );
}

export function leadCreateRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestValue6' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequestValue4$inboundSchema: z.ZodType<
  LeadCreateRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadCreateRequestValue4$Outbound = {};

/** @internal */
export const LeadCreateRequestValue4$outboundSchema: z.ZodType<
  LeadCreateRequestValue4$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestValue4$ {
  /** @deprecated use `LeadCreateRequestValue4$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestValue4$inboundSchema;
  /** @deprecated use `LeadCreateRequestValue4$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestValue4$outboundSchema;
  /** @deprecated use `LeadCreateRequestValue4$Outbound` instead. */
  export type Outbound = LeadCreateRequestValue4$Outbound;
}

export function leadCreateRequestValue4ToJSON(
  leadCreateRequestValue4: LeadCreateRequestValue4,
): string {
  return JSON.stringify(
    LeadCreateRequestValue4$outboundSchema.parse(leadCreateRequestValue4),
  );
}

export function leadCreateRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestValue4' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequestValue$inboundSchema: z.ZodType<
  LeadCreateRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadCreateRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadCreateRequestValue6$inboundSchema)),
]);

/** @internal */
export type LeadCreateRequestValue$Outbound =
  | LeadCreateRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadCreateRequestValue6$Outbound>;

/** @internal */
export const LeadCreateRequestValue$outboundSchema: z.ZodType<
  LeadCreateRequestValue$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestValue
> = z.union([
  z.lazy(() => LeadCreateRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadCreateRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestValue$ {
  /** @deprecated use `LeadCreateRequestValue$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestValue$inboundSchema;
  /** @deprecated use `LeadCreateRequestValue$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestValue$outboundSchema;
  /** @deprecated use `LeadCreateRequestValue$Outbound` instead. */
  export type Outbound = LeadCreateRequestValue$Outbound;
}

export function leadCreateRequestValueToJSON(
  leadCreateRequestValue: LeadCreateRequestValue,
): string {
  return JSON.stringify(
    LeadCreateRequestValue$outboundSchema.parse(leadCreateRequestValue),
  );
}

export function leadCreateRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestValue' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequestCustomFields$inboundSchema: z.ZodType<
  LeadCreateRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadCreateRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadCreateRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type LeadCreateRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | LeadCreateRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadCreateRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const LeadCreateRequestCustomFields$outboundSchema: z.ZodType<
  LeadCreateRequestCustomFields$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadCreateRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadCreateRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestCustomFields$ {
  /** @deprecated use `LeadCreateRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestCustomFields$inboundSchema;
  /** @deprecated use `LeadCreateRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestCustomFields$outboundSchema;
  /** @deprecated use `LeadCreateRequestCustomFields$Outbound` instead. */
  export type Outbound = LeadCreateRequestCustomFields$Outbound;
}

export function leadCreateRequestCustomFieldsToJSON(
  leadCreateRequestCustomFields: LeadCreateRequestCustomFields,
): string {
  return JSON.stringify(
    LeadCreateRequestCustomFields$outboundSchema.parse(
      leadCreateRequestCustomFields,
    ),
  );
}

export function leadCreateRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequestExtendPaths$inboundSchema: z.ZodType<
  LeadCreateRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type LeadCreateRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const LeadCreateRequestExtendPaths$outboundSchema: z.ZodType<
  LeadCreateRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestExtendPaths$ {
  /** @deprecated use `LeadCreateRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestExtendPaths$inboundSchema;
  /** @deprecated use `LeadCreateRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestExtendPaths$outboundSchema;
  /** @deprecated use `LeadCreateRequestExtendPaths$Outbound` instead. */
  export type Outbound = LeadCreateRequestExtendPaths$Outbound;
}

export function leadCreateRequestExtendPathsToJSON(
  leadCreateRequestExtendPaths: LeadCreateRequestExtendPaths,
): string {
  return JSON.stringify(
    LeadCreateRequestExtendPaths$outboundSchema.parse(
      leadCreateRequestExtendPaths,
    ),
  );
}

export function leadCreateRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequestPassThrough$inboundSchema: z.ZodType<
  LeadCreateRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => LeadCreateRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type LeadCreateRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<LeadCreateRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const LeadCreateRequestPassThrough$outboundSchema: z.ZodType<
  LeadCreateRequestPassThrough$Outbound,
  z.ZodTypeDef,
  LeadCreateRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => LeadCreateRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequestPassThrough$ {
  /** @deprecated use `LeadCreateRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequestPassThrough$inboundSchema;
  /** @deprecated use `LeadCreateRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequestPassThrough$outboundSchema;
  /** @deprecated use `LeadCreateRequestPassThrough$Outbound` instead. */
  export type Outbound = LeadCreateRequestPassThrough$Outbound;
}

export function leadCreateRequestPassThroughToJSON(
  leadCreateRequestPassThrough: LeadCreateRequestPassThrough,
): string {
  return JSON.stringify(
    LeadCreateRequestPassThrough$outboundSchema.parse(
      leadCreateRequestPassThrough,
    ),
  );
}

export function leadCreateRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const LeadCreateRequest$inboundSchema: z.ZodType<
  LeadCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(LeadCreateRequestCurrency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => LeadCreateRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => LeadCreateRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => LeadCreateRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => LeadCreateRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => LeadCreateRequestEmails$inboundSchema))
    .optional(),
  custom_fields: z.array(
    z.lazy(() => LeadCreateRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  pass_through: z.array(
    z.lazy(() => LeadCreateRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type LeadCreateRequest$Outbound = {
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<LeadCreateRequestWebsites$Outbound> | undefined;
  addresses?: Array<LeadCreateRequestAddresses$Outbound> | undefined;
  social_links?: Array<LeadCreateRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<LeadCreateRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<LeadCreateRequestEmails$Outbound> | undefined;
  custom_fields?: Array<LeadCreateRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  pass_through?: Array<LeadCreateRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const LeadCreateRequest$outboundSchema: z.ZodType<
  LeadCreateRequest$Outbound,
  z.ZodTypeDef,
  LeadCreateRequest
> = z.object({
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(LeadCreateRequestCurrency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => LeadCreateRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => LeadCreateRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => LeadCreateRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => LeadCreateRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => LeadCreateRequestEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => LeadCreateRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  passThrough: z.array(
    z.lazy(() => LeadCreateRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadCreateRequest$ {
  /** @deprecated use `LeadCreateRequest$inboundSchema` instead. */
  export const inboundSchema = LeadCreateRequest$inboundSchema;
  /** @deprecated use `LeadCreateRequest$outboundSchema` instead. */
  export const outboundSchema = LeadCreateRequest$outboundSchema;
  /** @deprecated use `LeadCreateRequest$Outbound` instead. */
  export type Outbound = LeadCreateRequest$Outbound;
}

export function leadCreateRequestToJSON(
  leadCreateRequest: LeadCreateRequest,
): string {
  return JSON.stringify(
    LeadCreateRequest$outboundSchema.parse(leadCreateRequest),
  );
}

export function leadCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<LeadCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadCreateRequest' from JSON`,
  );
}
