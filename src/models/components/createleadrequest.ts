/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the currency type associated with monetary values for the lead. It should be a valid ISO 4217 currency code, such as 'USD' for US Dollars. This property helps in managing financial data related to the lead within the CRM system.
 */
export const CreateLeadRequestCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Specifies the currency type associated with monetary values for the lead. It should be a valid ISO 4217 currency code, such as 'USD' for US Dollars. This property helps in managing financial data related to the lead within the CRM system.
 */
export type CreateLeadRequestCurrency = ClosedEnum<
  typeof CreateLeadRequestCurrency
>;

/**
 * Specifies the category or purpose of the website associated with the lead, such as 'personal', 'business', or 'portfolio'. This helps in categorizing the lead's online presence for better context in CRM records. Ensure the type is a valid string that accurately reflects the website's use.
 */
export const CreateLeadRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category or purpose of the website associated with the lead, such as 'personal', 'business', or 'portfolio'. This helps in categorizing the lead's online presence for better context in CRM records. Ensure the type is a valid string that accurately reflects the website's use.
 */
export type CreateLeadRequestType = ClosedEnum<typeof CreateLeadRequestType>;

export type CreateLeadRequestWebsites = {
  /**
   * A unique identifier for each website entry associated with the lead. This ID is optional and can be used to distinguish between multiple websites linked to the same lead. It facilitates easy management and reference of website data within the CRM.
   */
  id?: string | null | undefined;
  /**
   * The URL of the website associated with the lead, which must be a valid and reachable web address. This property is required for each website entry to ensure accurate and complete online information about the lead. It plays a crucial role in understanding the lead's online presence.
   */
  url: string;
  /**
   * Specifies the category or purpose of the website associated with the lead, such as 'personal', 'business', or 'portfolio'. This helps in categorizing the lead's online presence for better context in CRM records. Ensure the type is a valid string that accurately reflects the website's use.
   */
  type?: CreateLeadRequestType | null | undefined;
};

/**
 * Defines the category of the address, such as 'home', 'work', or 'billing'. This classification aids in understanding the context and purpose of the address within the lead's profile. Ensure the type is a valid string that represents the address's function.
 */
export const CreateLeadRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the category of the address, such as 'home', 'work', or 'billing'. This classification aids in understanding the context and purpose of the address within the lead's profile. Ensure the type is a valid string that represents the address's function.
 */
export type CreateLeadRequestAddressesType = ClosedEnum<
  typeof CreateLeadRequestAddressesType
>;

export type CreateLeadRequestAddresses = {
  /**
   * A unique identifier for each address entry within the addresses array. This ID is used to distinguish between multiple addresses associated with a single lead, facilitating updates and management of address records.
   */
  id?: string | null | undefined;
  /**
   * Defines the category of the address, such as 'home', 'work', or 'billing'. This classification aids in understanding the context and purpose of the address within the lead's profile. Ensure the type is a valid string that represents the address's function.
   */
  type?: CreateLeadRequestAddressesType | null | undefined;
  /**
   * The full address in a single string format, used when structured address data is unavailable. This property allows for flexible input of address information, ensuring that even unstructured data can be captured and utilized in the CRM system.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address entry, typically used to identify the location or recipient. This field is optional and can be left blank if not applicable. It helps in distinguishing between multiple addresses linked to a lead.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, including details such as street number, street name, and apartment or suite number. This field is optional but recommended for accurate address identification. It serves as the main component of the address structure for the lead.
   */
  line1?: string | null | undefined;
  /**
   * An additional line for the address, often used for supplementary information like building name or floor number. This field is optional and can be used to provide more detailed address information if necessary. It complements the primary address line to ensure complete address details.
   */
  line2?: string | null | undefined;
  /**
   * A third line for the address, which can be used for any extra address details that do not fit in the first two lines. This field is optional and provides flexibility for complex addresses. It ensures that all relevant address information can be captured for the lead.
   */
  line3?: string | null | undefined;
  /**
   * A fourth line for the address, allowing for additional address details beyond the first three lines. This field is optional and is useful for capturing extensive address information. It helps in maintaining a comprehensive address record for the lead.
   */
  line4?: string | null | undefined;
  /**
   * The street number of the lead's address. This property is used to specify the exact location of the lead's residence or business. It should be a string representing the numeric or alphanumeric identifier of the building or property.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city where the lead is located. This property helps in identifying the geographical area for the lead's address. It should be a valid city name and is used for regional categorization within the CRM.
   */
  city?: string | null | undefined;
  /**
   * The state or province of the lead's address. This property is crucial for regional identification and should be a valid state or province name. It assists in organizing leads based on their geographical location.
   */
  state?: string | null | undefined;
  /**
   * The postal code for the lead's address. This property is used to ensure accurate delivery and location services. It should be a valid postal or ZIP code corresponding to the lead's address.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code for the lead's address, following the ISO 3166-1 alpha-2 standard. This property is essential for international identification and should be a valid two-letter country code. It helps in categorizing leads by country within the CRM system.
   */
  country?: string | null | undefined;
  /**
   * Specifies the latitude coordinate of the address location. This property is used to geographically pinpoint the lead's address on a map. It should be a valid string representation of a latitude, typically in decimal degrees format.
   */
  latitude?: string | null | undefined;
  /**
   * Specifies the longitude coordinate of the address location. This property is used alongside latitude to accurately locate the lead's address geographically. It should be a valid string representation of a longitude, typically in decimal degrees format.
   */
  longitude?: string | null | undefined;
  /**
   * Indicates the county or sublocality of the lead's address. This property helps in categorizing the lead's location within a broader geographical area, which can be useful for regional analysis or reporting. It should be a valid string representing the county name.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the lead's address. This property is essential for personalizing communication and ensuring accurate contact information is stored in the CRM. It should be a valid string containing the contact's first and last name.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the lead's address, such as Mr., Ms., or Dr. This property is used to address the contact appropriately in communications and should be a valid string representing a common salutation.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the lead's address. This optional field should be formatted according to international standards, including the country code, to ensure proper communication. It helps in establishing direct contact with the lead for follow-up and engagement purposes.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the lead's address, provided for businesses that still utilize fax communication. This optional field should be formatted correctly to ensure successful transmission. It supports traditional communication methods for lead interaction.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the lead's address, used for electronic communication. This optional field must be a valid email format to ensure messages are correctly delivered. It facilitates digital correspondence with the lead, enhancing engagement and follow-up.
   */
  email?: string | null | undefined;
  /**
   * The website URL related to the lead's address, offering additional information about the lead's business or personal profile. This optional field should be a valid URL format to ensure accessibility. It provides a digital point of reference for understanding the lead's background and interests.
   */
  website?: string | null | undefined;
  /**
   * Additional notes regarding the lead's address, offering context or specific details that may be relevant for future interactions. This optional field can include any pertinent information that aids in personalizing communication or understanding the lead's needs.
   */
  notes?: string | null | undefined;
  /**
   * A string representing the version of the address record, used to detect updates and prevent data conflicts. This value is automatically incremented with each update to ensure data integrity. It is optional and primarily used for concurrency control in lead management.
   */
  rowVersion?: string | null | undefined;
};

export type CreateLeadRequestSocialLinks = {
  /**
   * A unique string identifier for each social link associated with the lead. This ID is used to distinguish between different social links and is optional, allowing for flexible integration with various social media platforms.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media profile associated with the lead, such as 'https://www.twitter.com/apideck'. This field is required and must be a valid URL format, ensuring that the link directs to an accessible social media page.
   */
  url: string;
  /**
   * A string indicating the type of social media platform, such as 'twitter' or 'linkedin'. This optional field helps categorize the social link, providing context about the platform associated with the URL.
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number, indicating its purpose such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number for better organization and retrieval within the CRM system. Providing this information can assist in tailoring communication strategies based on the lead's preferred contact method.
 */
export const CreateLeadRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number, indicating its purpose such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number for better organization and retrieval within the CRM system. Providing this information can assist in tailoring communication strategies based on the lead's preferred contact method.
 */
export type CreateLeadRequestPhoneNumbersType = ClosedEnum<
  typeof CreateLeadRequestPhoneNumbersType
>;

export type CreateLeadRequestPhoneNumbers = {
  /**
   * A unique identifier for each phone number entry within the array. This ID is used to distinguish between different phone numbers associated with the lead, ensuring accurate reference and management of contact information.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, such as '+1' for the United States. This code is essential for correctly formatting and dialing the phone number, especially in international contexts.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code that precedes the local phone number, such as '323' for parts of Los Angeles. This code helps in routing the call to the correct geographic area within a country.
   */
  areaCode?: string | null | undefined;
  /**
   * The local phone number of the lead, excluding the country and area codes. This field is required and must be a valid string of digits, as it forms the core part of the contact number used for communication.
   */
  number: string;
  /**
   * The extension of the phone number, used to direct calls to a specific line within a larger phone system. This field is optional and should be a string of digits, typically ranging from 1 to 5 characters. Including this helps ensure calls reach the intended recipient directly, enhancing lead communication efficiency.
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number, indicating its purpose such as 'mobile', 'home', or 'work'. This optional field helps categorize the phone number for better organization and retrieval within the CRM system. Providing this information can assist in tailoring communication strategies based on the lead's preferred contact method.
   */
  type?: CreateLeadRequestPhoneNumbersType | null | undefined;
};

/**
 * Specifies the category of the email address, such as 'work', 'personal', or 'other'. This helps in organizing and distinguishing between different email addresses associated with the lead. If provided, it should be a valid string representing the email type.
 */
export const CreateLeadRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category of the email address, such as 'work', 'personal', or 'other'. This helps in organizing and distinguishing between different email addresses associated with the lead. If provided, it should be a valid string representing the email type.
 */
export type CreateLeadRequestEmailsType = ClosedEnum<
  typeof CreateLeadRequestEmailsType
>;

export type CreateLeadRequestEmails = {
  /**
   * A unique identifier for each email address associated with the lead. This optional field is crucial for distinguishing between multiple email entries, ensuring accurate tracking and management of lead communications. It should be a unique string that does not duplicate any other email ID within the system.
   */
  id?: string | null | undefined;
  /**
   * The primary email address for the lead, required for establishing electronic communication. This field must be a valid email format (e.g., user@example.com) and is essential for sending updates, newsletters, or any CRM-related correspondence. Accurate entry ensures effective communication with the lead.
   */
  email: string | null;
  /**
   * Specifies the category of the email address, such as 'work', 'personal', or 'other'. This helps in organizing and distinguishing between different email addresses associated with the lead. If provided, it should be a valid string representing the email type.
   */
  type?: CreateLeadRequestEmailsType | null | undefined;
};

export type CreateLeadRequestValue6 = {};

export type CreateLeadRequestValue4 = {};

/**
 * The custom_fields.value property allows you to specify additional information or attributes for the lead that are not covered by standard fields. This can be any string value that represents custom data relevant to your application's needs. It is optional and can be used to store unique identifiers or metadata specific to your business logic.
 */
export type CreateLeadRequestValue =
  | CreateLeadRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateLeadRequestValue6>;

export type CreateLeadRequestCustomFields = {
  /**
   * A mandatory unique identifier for each custom field entry. This ID is crucial for distinguishing between different custom fields and must be a valid string that uniquely identifies the field within the context of the lead.
   */
  id: string | null;
  /**
   * The display name of the custom field, which provides a human-readable label for the field. This name is optional but recommended for clarity when viewing or managing custom fields associated with a lead.
   */
  name?: string | null | undefined;
  /**
   * Provides additional context or details about the custom field's purpose or usage. This description is optional but can be helpful for understanding the role of the custom field in the lead's data structure.
   */
  description?: string | null | undefined;
  /**
   * The custom_fields.value property allows you to specify additional information or attributes for the lead that are not covered by standard fields. This can be any string value that represents custom data relevant to your application's needs. It is optional and can be used to store unique identifiers or metadata specific to your business logic.
   */
  value?:
    | CreateLeadRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateLeadRequestValue6>
    | null
    | undefined;
};

export type CreateLeadRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where the value should be applied. This path must be a valid JSONPath expression, ensuring precise targeting for data updates or extensions. It is crucial for operations that require specific data modifications.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath, which can be of any data type. This allows for flexible data updates, accommodating various types of information that need to be integrated into the CRM system. The value should be compatible with the data structure at the specified path.
   */
  value?: any | undefined;
};

export type CreateLeadRequestPassThrough = {
  /**
   * The service_id within the pass_through array specifies the target service for which the custom data or modifications are intended. This string must match the identifier of a service that is integrated with your application, ensuring the data is correctly routed and applied.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation to which this pass-through should be applied. This is particularly useful for Unify calls that involve multiple downstream requests, allowing for precise tracking and management of each operation. The value should be a unique string that correlates with the intended workflow.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows for the direct extension of properties. This can be used to include additional data fields that are not predefined in the standard request structure, enabling custom data handling and integration. The object can contain any key-value pairs as needed for the operation.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. Each object in the array should define a path and a corresponding value, facilitating targeted updates or extensions to the data structure. This is useful for complex data manipulations within the CRM system.
   */
  extendPaths?: Array<CreateLeadRequestExtendPaths> | undefined;
};

export type CreateLeadRequest = {
  /**
   * The full name of the lead being added to the CRM system. This is a required field and must be a non-empty string, as it serves as the primary identifier for the lead within the CRM. Ensure the name is accurately spelled to facilitate proper record management and retrieval.
   */
  name: string;
  /**
   * The name of the company associated with the lead. This required field must be a non-empty string and accurately reflect the company's official name. It links the lead to their respective organization, aiding in organizational tracking and reporting within the CRM.
   */
  companyName: string | null;
  /**
   * The unique identifier for the owner of the lead within the CRM system. This optional field allows for the assignment of leads to specific users, facilitating accountability and follow-up actions. If provided, it should match an existing user ID in the CRM.
   */
  ownerId?: string | null | undefined;
  /**
   * The full name of the individual responsible for managing the lead. This optional field complements the owner_id by providing a human-readable reference to the lead's owner. It should be used to enhance clarity in lead management and reporting.
   */
  ownerName?: string | null | undefined;
  /**
   * The unique identifier for the company associated with the lead. This optional field helps in linking the lead to a specific company record within the CRM, ensuring accurate association and data integrity. If used, it should correspond to an existing company ID in the system.
   */
  companyId?: string | null | undefined;
  /**
   * A unique identifier for the lead within the CRM system. This field is optional and can be used to specify an existing lead ID if updating a lead, or left blank to allow the system to generate a new ID for a new lead. It must be a valid string if provided.
   */
  leadId?: string | null | undefined;
  /**
   * Indicates the origin of the lead, such as 'web', 'email', or 'referral'. This optional field helps categorize leads based on their source, aiding in tracking and analytics. It should be a descriptive string that clearly identifies the lead's source.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead, used for personalizing communications and records. This optional field should be a valid string containing the lead's given name, enhancing the CRM's ability to manage personal interactions.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead, essential for identifying and organizing lead records. This optional field should be a valid string representing the lead's family name, facilitating accurate record-keeping and communication.
   */
  lastName?: string | null | undefined;
  /**
   * A brief description or notes about the lead, providing context or additional information. This optional field can include any relevant details that might assist in understanding the lead's background or needs, and should be a concise string.
   */
  description?: string | null | undefined;
  /**
   * The prefix used to address the lead, such as Mr., Ms., or Dr. This field is optional and can be used to personalize communication with the lead. It should be a valid string that represents a common prefix.
   */
  prefix?: string | null | undefined;
  /**
   * The job title of the lead, indicating their professional role or position. This information helps in understanding the lead's responsibilities and authority within their organization. It should be a descriptive string that accurately reflects the lead's job title.
   */
  title?: string | null | undefined;
  /**
   * The preferred language of communication for the lead, specified using the ISO 639-1 code (e.g., 'EN' for English). This field is optional but recommended for tailoring communication to the lead's language preference. Ensure the code is a valid two-letter ISO 639-1 language code.
   */
  language?: string | null | undefined;
  /**
   * The current status of the lead within the CRM system, such as 'New', 'Contacted', or 'Qualified'. This field helps in categorizing and tracking the lead's progress through the sales pipeline. It should be a string that matches one of the predefined status categories used in the CRM.
   */
  status?: string | null | undefined;
  /**
   * The estimated monetary value associated with the lead, representing potential revenue. This numeric field helps prioritize leads based on their financial potential. It should be a positive number reflecting the lead's potential contribution to sales.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Specifies the currency type associated with monetary values for the lead. It should be a valid ISO 4217 currency code, such as 'USD' for US Dollars. This property helps in managing financial data related to the lead within the CRM system.
   */
  currency?: CreateLeadRequestCurrency | null | undefined;
  /**
   * The fax number associated with the lead, used for sending and receiving documents. It should be formatted according to international dialing standards to ensure proper communication. This contact detail is optional but can be useful for businesses that still utilize fax communication.
   */
  fax?: string | null | undefined;
  /**
   * A list of websites associated with the lead, providing additional online presence information. Each entry in the array should include a valid URL and may include an optional unique identifier. This helps in tracking the lead's digital footprint and online activities.
   */
  websites?: Array<CreateLeadRequestWebsites> | undefined;
  /**
   * A collection of address objects associated with the lead. Each address provides location details that can be used for correspondence or geographical analysis. Ensure each entry in the array follows the address object structure.
   */
  addresses?: Array<CreateLeadRequestAddresses> | undefined;
  /**
   * An array of social link objects associated with the lead, allowing the inclusion of multiple social media profiles. Each object within the array should contain details such as the social link's ID, URL, and type. This property is optional and helps in enriching the lead's profile with social media information.
   */
  socialLinks?: Array<CreateLeadRequestSocialLinks> | undefined;
  /**
   * An array of phone number objects associated with the lead. Each object should contain details such as the country code, area code, and the phone number itself. This array allows for multiple contact numbers to be linked to a single lead, facilitating comprehensive communication options.
   */
  phoneNumbers?: Array<CreateLeadRequestPhoneNumbers> | undefined;
  /**
   * An array of email objects associated with the lead, allowing multiple email addresses to be stored. Each object within the array should contain details like the email address and its unique identifier. This structure supports comprehensive contact management by accommodating various email addresses for a single lead.
   */
  emails?: Array<CreateLeadRequestEmails> | undefined;
  /**
   * An array of custom fields that can be used to store additional information specific to the lead. Each entry in the array should conform to the structure defined for custom fields, allowing for flexible data storage beyond standard fields.
   */
  customFields?: Array<CreateLeadRequestCustomFields> | undefined;
  /**
   * The tags property is used to assign one or more labels to the lead, helping categorize and organize leads within the CRM. Each tag should be a string that represents a meaningful category or keyword. This property is optional and can be left empty if no tags are needed.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The pass_through property allows you to include service-specific custom data or structured modifications when creating or updating resources. This array can contain multiple objects, each tailored to a specific service's requirements, enabling flexible data handling across different integrations.
   */
  passThrough?: Array<CreateLeadRequestPassThrough> | undefined;
};

/** @internal */
export const CreateLeadRequestCurrency$inboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestCurrency
> = z.nativeEnum(CreateLeadRequestCurrency);

/** @internal */
export const CreateLeadRequestCurrency$outboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestCurrency
> = CreateLeadRequestCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestCurrency$ {
  /** @deprecated use `CreateLeadRequestCurrency$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestCurrency$inboundSchema;
  /** @deprecated use `CreateLeadRequestCurrency$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestCurrency$outboundSchema;
}

/** @internal */
export const CreateLeadRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestType
> = z.nativeEnum(CreateLeadRequestType);

/** @internal */
export const CreateLeadRequestType$outboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestType
> = CreateLeadRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestType$ {
  /** @deprecated use `CreateLeadRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestType$inboundSchema;
  /** @deprecated use `CreateLeadRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestType$outboundSchema;
}

/** @internal */
export const CreateLeadRequestWebsites$inboundSchema: z.ZodType<
  CreateLeadRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateLeadRequestType$inboundSchema).optional(),
});

/** @internal */
export type CreateLeadRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CreateLeadRequestWebsites$outboundSchema: z.ZodType<
  CreateLeadRequestWebsites$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateLeadRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestWebsites$ {
  /** @deprecated use `CreateLeadRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestWebsites$inboundSchema;
  /** @deprecated use `CreateLeadRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestWebsites$outboundSchema;
  /** @deprecated use `CreateLeadRequestWebsites$Outbound` instead. */
  export type Outbound = CreateLeadRequestWebsites$Outbound;
}

export function createLeadRequestWebsitesToJSON(
  createLeadRequestWebsites: CreateLeadRequestWebsites,
): string {
  return JSON.stringify(
    CreateLeadRequestWebsites$outboundSchema.parse(createLeadRequestWebsites),
  );
}

export function createLeadRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestWebsites' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestAddressesType
> = z.nativeEnum(CreateLeadRequestAddressesType);

/** @internal */
export const CreateLeadRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestAddressesType
> = CreateLeadRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestAddressesType$ {
  /** @deprecated use `CreateLeadRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestAddressesType$inboundSchema;
  /** @deprecated use `CreateLeadRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestAddressesType$outboundSchema;
}

/** @internal */
export const CreateLeadRequestAddresses$inboundSchema: z.ZodType<
  CreateLeadRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateLeadRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type CreateLeadRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const CreateLeadRequestAddresses$outboundSchema: z.ZodType<
  CreateLeadRequestAddresses$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateLeadRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestAddresses$ {
  /** @deprecated use `CreateLeadRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestAddresses$inboundSchema;
  /** @deprecated use `CreateLeadRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestAddresses$outboundSchema;
  /** @deprecated use `CreateLeadRequestAddresses$Outbound` instead. */
  export type Outbound = CreateLeadRequestAddresses$Outbound;
}

export function createLeadRequestAddressesToJSON(
  createLeadRequestAddresses: CreateLeadRequestAddresses,
): string {
  return JSON.stringify(
    CreateLeadRequestAddresses$outboundSchema.parse(createLeadRequestAddresses),
  );
}

export function createLeadRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestAddresses' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestSocialLinks$inboundSchema: z.ZodType<
  CreateLeadRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateLeadRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CreateLeadRequestSocialLinks$outboundSchema: z.ZodType<
  CreateLeadRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestSocialLinks$ {
  /** @deprecated use `CreateLeadRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestSocialLinks$inboundSchema;
  /** @deprecated use `CreateLeadRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestSocialLinks$outboundSchema;
  /** @deprecated use `CreateLeadRequestSocialLinks$Outbound` instead. */
  export type Outbound = CreateLeadRequestSocialLinks$Outbound;
}

export function createLeadRequestSocialLinksToJSON(
  createLeadRequestSocialLinks: CreateLeadRequestSocialLinks,
): string {
  return JSON.stringify(
    CreateLeadRequestSocialLinks$outboundSchema.parse(
      createLeadRequestSocialLinks,
    ),
  );
}

export function createLeadRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestPhoneNumbersType
> = z.nativeEnum(CreateLeadRequestPhoneNumbersType);

/** @internal */
export const CreateLeadRequestPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestPhoneNumbersType
> = CreateLeadRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestPhoneNumbersType$ {
  /** @deprecated use `CreateLeadRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `CreateLeadRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    CreateLeadRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const CreateLeadRequestPhoneNumbers$inboundSchema: z.ZodType<
  CreateLeadRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateLeadRequestPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type CreateLeadRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const CreateLeadRequestPhoneNumbers$outboundSchema: z.ZodType<
  CreateLeadRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateLeadRequestPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestPhoneNumbers$ {
  /** @deprecated use `CreateLeadRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `CreateLeadRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `CreateLeadRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = CreateLeadRequestPhoneNumbers$Outbound;
}

export function createLeadRequestPhoneNumbersToJSON(
  createLeadRequestPhoneNumbers: CreateLeadRequestPhoneNumbers,
): string {
  return JSON.stringify(
    CreateLeadRequestPhoneNumbers$outboundSchema.parse(
      createLeadRequestPhoneNumbers,
    ),
  );
}

export function createLeadRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestEmailsType
> = z.nativeEnum(CreateLeadRequestEmailsType);

/** @internal */
export const CreateLeadRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestEmailsType
> = CreateLeadRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestEmailsType$ {
  /** @deprecated use `CreateLeadRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestEmailsType$inboundSchema;
  /** @deprecated use `CreateLeadRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestEmailsType$outboundSchema;
}

/** @internal */
export const CreateLeadRequestEmails$inboundSchema: z.ZodType<
  CreateLeadRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CreateLeadRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type CreateLeadRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const CreateLeadRequestEmails$outboundSchema: z.ZodType<
  CreateLeadRequestEmails$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CreateLeadRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestEmails$ {
  /** @deprecated use `CreateLeadRequestEmails$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestEmails$inboundSchema;
  /** @deprecated use `CreateLeadRequestEmails$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestEmails$outboundSchema;
  /** @deprecated use `CreateLeadRequestEmails$Outbound` instead. */
  export type Outbound = CreateLeadRequestEmails$Outbound;
}

export function createLeadRequestEmailsToJSON(
  createLeadRequestEmails: CreateLeadRequestEmails,
): string {
  return JSON.stringify(
    CreateLeadRequestEmails$outboundSchema.parse(createLeadRequestEmails),
  );
}

export function createLeadRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestEmails' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestValue6$inboundSchema: z.ZodType<
  CreateLeadRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateLeadRequestValue6$Outbound = {};

/** @internal */
export const CreateLeadRequestValue6$outboundSchema: z.ZodType<
  CreateLeadRequestValue6$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestValue6$ {
  /** @deprecated use `CreateLeadRequestValue6$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestValue6$inboundSchema;
  /** @deprecated use `CreateLeadRequestValue6$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestValue6$outboundSchema;
  /** @deprecated use `CreateLeadRequestValue6$Outbound` instead. */
  export type Outbound = CreateLeadRequestValue6$Outbound;
}

export function createLeadRequestValue6ToJSON(
  createLeadRequestValue6: CreateLeadRequestValue6,
): string {
  return JSON.stringify(
    CreateLeadRequestValue6$outboundSchema.parse(createLeadRequestValue6),
  );
}

export function createLeadRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestValue6' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestValue4$inboundSchema: z.ZodType<
  CreateLeadRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateLeadRequestValue4$Outbound = {};

/** @internal */
export const CreateLeadRequestValue4$outboundSchema: z.ZodType<
  CreateLeadRequestValue4$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestValue4$ {
  /** @deprecated use `CreateLeadRequestValue4$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestValue4$inboundSchema;
  /** @deprecated use `CreateLeadRequestValue4$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestValue4$outboundSchema;
  /** @deprecated use `CreateLeadRequestValue4$Outbound` instead. */
  export type Outbound = CreateLeadRequestValue4$Outbound;
}

export function createLeadRequestValue4ToJSON(
  createLeadRequestValue4: CreateLeadRequestValue4,
): string {
  return JSON.stringify(
    CreateLeadRequestValue4$outboundSchema.parse(createLeadRequestValue4),
  );
}

export function createLeadRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestValue4' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestValue$inboundSchema: z.ZodType<
  CreateLeadRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateLeadRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateLeadRequestValue6$inboundSchema)),
]);

/** @internal */
export type CreateLeadRequestValue$Outbound =
  | CreateLeadRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateLeadRequestValue6$Outbound>;

/** @internal */
export const CreateLeadRequestValue$outboundSchema: z.ZodType<
  CreateLeadRequestValue$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestValue
> = z.union([
  z.lazy(() => CreateLeadRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateLeadRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestValue$ {
  /** @deprecated use `CreateLeadRequestValue$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestValue$inboundSchema;
  /** @deprecated use `CreateLeadRequestValue$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestValue$outboundSchema;
  /** @deprecated use `CreateLeadRequestValue$Outbound` instead. */
  export type Outbound = CreateLeadRequestValue$Outbound;
}

export function createLeadRequestValueToJSON(
  createLeadRequestValue: CreateLeadRequestValue,
): string {
  return JSON.stringify(
    CreateLeadRequestValue$outboundSchema.parse(createLeadRequestValue),
  );
}

export function createLeadRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestValue' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestCustomFields$inboundSchema: z.ZodType<
  CreateLeadRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateLeadRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateLeadRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CreateLeadRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | CreateLeadRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateLeadRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateLeadRequestCustomFields$outboundSchema: z.ZodType<
  CreateLeadRequestCustomFields$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateLeadRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateLeadRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestCustomFields$ {
  /** @deprecated use `CreateLeadRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestCustomFields$inboundSchema;
  /** @deprecated use `CreateLeadRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestCustomFields$outboundSchema;
  /** @deprecated use `CreateLeadRequestCustomFields$Outbound` instead. */
  export type Outbound = CreateLeadRequestCustomFields$Outbound;
}

export function createLeadRequestCustomFieldsToJSON(
  createLeadRequestCustomFields: CreateLeadRequestCustomFields,
): string {
  return JSON.stringify(
    CreateLeadRequestCustomFields$outboundSchema.parse(
      createLeadRequestCustomFields,
    ),
  );
}

export function createLeadRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestExtendPaths$inboundSchema: z.ZodType<
  CreateLeadRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CreateLeadRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CreateLeadRequestExtendPaths$outboundSchema: z.ZodType<
  CreateLeadRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestExtendPaths$ {
  /** @deprecated use `CreateLeadRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestExtendPaths$inboundSchema;
  /** @deprecated use `CreateLeadRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestExtendPaths$outboundSchema;
  /** @deprecated use `CreateLeadRequestExtendPaths$Outbound` instead. */
  export type Outbound = CreateLeadRequestExtendPaths$Outbound;
}

export function createLeadRequestExtendPathsToJSON(
  createLeadRequestExtendPaths: CreateLeadRequestExtendPaths,
): string {
  return JSON.stringify(
    CreateLeadRequestExtendPaths$outboundSchema.parse(
      createLeadRequestExtendPaths,
    ),
  );
}

export function createLeadRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestPassThrough$inboundSchema: z.ZodType<
  CreateLeadRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => CreateLeadRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CreateLeadRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CreateLeadRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CreateLeadRequestPassThrough$outboundSchema: z.ZodType<
  CreateLeadRequestPassThrough$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => CreateLeadRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestPassThrough$ {
  /** @deprecated use `CreateLeadRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestPassThrough$inboundSchema;
  /** @deprecated use `CreateLeadRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestPassThrough$outboundSchema;
  /** @deprecated use `CreateLeadRequestPassThrough$Outbound` instead. */
  export type Outbound = CreateLeadRequestPassThrough$Outbound;
}

export function createLeadRequestPassThroughToJSON(
  createLeadRequestPassThrough: CreateLeadRequestPassThrough,
): string {
  return JSON.stringify(
    CreateLeadRequestPassThrough$outboundSchema.parse(
      createLeadRequestPassThrough,
    ),
  );
}

export function createLeadRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequest$inboundSchema: z.ZodType<
  CreateLeadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(CreateLeadRequestCurrency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => CreateLeadRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CreateLeadRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => CreateLeadRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => CreateLeadRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => CreateLeadRequestEmails$inboundSchema))
    .optional(),
  custom_fields: z.array(
    z.lazy(() => CreateLeadRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  pass_through: z.array(
    z.lazy(() => CreateLeadRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CreateLeadRequest$Outbound = {
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<CreateLeadRequestWebsites$Outbound> | undefined;
  addresses?: Array<CreateLeadRequestAddresses$Outbound> | undefined;
  social_links?: Array<CreateLeadRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<CreateLeadRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<CreateLeadRequestEmails$Outbound> | undefined;
  custom_fields?: Array<CreateLeadRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  pass_through?: Array<CreateLeadRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const CreateLeadRequest$outboundSchema: z.ZodType<
  CreateLeadRequest$Outbound,
  z.ZodTypeDef,
  CreateLeadRequest
> = z.object({
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(CreateLeadRequestCurrency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => CreateLeadRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CreateLeadRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => CreateLeadRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => CreateLeadRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => CreateLeadRequestEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => CreateLeadRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  passThrough: z.array(
    z.lazy(() => CreateLeadRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequest$ {
  /** @deprecated use `CreateLeadRequest$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequest$inboundSchema;
  /** @deprecated use `CreateLeadRequest$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequest$outboundSchema;
  /** @deprecated use `CreateLeadRequest$Outbound` instead. */
  export type Outbound = CreateLeadRequest$Outbound;
}

export function createLeadRequestToJSON(
  createLeadRequest: CreateLeadRequest,
): string {
  return JSON.stringify(
    CreateLeadRequest$outboundSchema.parse(createLeadRequest),
  );
}

export function createLeadRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequest' from JSON`,
  );
}
