/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * Specifies the category or nature of the website associated with the lead. This information helps in categorizing and managing leads based on their online presence. It should be a descriptive string that accurately reflects the website's purpose or type.
 */
export const CreateLeadRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category or nature of the website associated with the lead. This information helps in categorizing and managing leads based on their online presence. It should be a descriptive string that accurately reflects the website's purpose or type.
 */
export type CreateLeadRequestType = ClosedEnum<typeof CreateLeadRequestType>;

export type CreateLeadRequestWebsites = {
  /**
   * A unique identifier for each website entry associated with the lead. This ID is used to distinguish between multiple websites and manage them effectively within the lead's profile.
   */
  id?: string | null | undefined;
  /**
   * The URL of the website associated with the lead, which must be a valid web address. This is a required field to ensure that each website entry has a corresponding URL, facilitating direct access to the lead's online resources.
   */
  url: string;
  /**
   * Specifies the category or nature of the website associated with the lead. This information helps in categorizing and managing leads based on their online presence. It should be a descriptive string that accurately reflects the website's purpose or type.
   */
  type?: CreateLeadRequestType | null | undefined;
};

/**
 * Defines the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in organizing and utilizing addresses based on their intended use. It should be a clear string that specifies the address type.
 */
export const CreateLeadRequestAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Defines the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in organizing and utilizing addresses based on their intended use. It should be a clear string that specifies the address type.
 */
export type CreateLeadRequestAddressesType = ClosedEnum<
  typeof CreateLeadRequestAddressesType
>;

export type CreateLeadRequestAddresses = {
  /**
   * A unique identifier for each address within the addresses array. This ID is crucial for distinguishing between different addresses and managing them individually. It should be a unique string that ensures each address can be referenced separately.
   */
  id?: string | null | undefined;
  /**
   * Defines the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in organizing and utilizing addresses based on their intended use. It should be a clear string that specifies the address type.
   */
  type?: CreateLeadRequestAddressesType | null | undefined;
  /**
   * The full address in a single string format, used when structured address data is unavailable. This field captures the complete address details in a free-form text, ensuring that all necessary location information is included even if not structured.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address entry. This field is used to identify or label the address within the lead's contact information. It is optional and can be left blank if not applicable.
   */
  name?: string | null | undefined;
  /**
   * The primary line of the address, typically including the street number, street name, and any apartment or suite number. This field is crucial for accurately locating the lead's address and should be formatted correctly to ensure proper delivery or correspondence.
   */
  line1?: string | null | undefined;
  /**
   * An additional line for the address, often used for supplementary information such as building name or floor number. This field is optional and can be used to provide more detailed location information if necessary.
   */
  line2?: string | null | undefined;
  /**
   * A third line for the address, which can be used for any extra details that do not fit in the first two lines. This field is optional and is typically used for extended address information.
   */
  line3?: string | null | undefined;
  /**
   * A fourth line for the address, allowing for additional address details beyond the standard lines. This field is optional and is used when further address specification is needed.
   */
  line4?: string | null | undefined;
  /**
   * The street number of the lead's address. This property is used to specify the exact number of the building or house where the lead is located. It is optional but helps in accurately identifying the lead's location within a city or town.
   */
  streetNumber?: string | null | undefined;
  /**
   * The city name where the lead is located. This property helps in categorizing and filtering leads based on their geographical location. It is optional but recommended for better organization of leads within the CRM system.
   */
  city?: string | null | undefined;
  /**
   * The state or region where the lead resides. This property is used to further specify the lead's location, aiding in regional sales strategies and reporting. It is optional but useful for comprehensive lead data.
   */
  state?: string | null | undefined;
  /**
   * The postal code or ZIP code of the lead's address. This property is crucial for pinpointing the lead's exact location and is often used in conjunction with other address fields for precise targeting. It is optional but enhances the accuracy of the lead's address information.
   */
  postalCode?: string | null | undefined;
  /**
   * The country code of the lead's address, following the ISO 3166-1 alpha-2 standard. This property is essential for international leads, ensuring that the address is correctly formatted and understood globally. It is optional but necessary for leads outside the default country setting.
   */
  country?: string | null | undefined;
  /**
   * The latitude coordinate of the address, used to pinpoint the exact geographical location of the lead. This field is optional and should be a valid string representation of a latitude value, typically in decimal degrees. Including this information helps in mapping and location-based services within the CRM.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, essential for determining the precise geographical location of the lead. This optional field should be a valid string representation of a longitude value, usually in decimal degrees. Providing longitude enhances location accuracy for mapping and CRM functionalities.
   */
  longitude?: string | null | undefined;
  /**
   * Specifies the county or sublocality of the address, which can be useful for regional analysis and reporting within the CRM. This field is optional and should be a valid string representing the county name. Including county information can aid in demographic segmentation and targeted marketing efforts.
   */
  county?: string | null | undefined;
  /**
   * The full name of the contact person associated with the address, crucial for personalizing communication and maintaining accurate contact records. This optional field should be a valid string containing the contact's name. Providing a contact name enhances the CRM's ability to manage relationships and interactions effectively.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title of the contact person at the address, such as Mr., Ms., or Dr. This optional field helps in formalizing communication and should be a valid string representing the salutation. Including a salutation can improve the professionalism and personalization of correspondence with the lead.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the address. This optional field allows you to store contact numbers for leads, facilitating direct communication. Ensure the number is formatted correctly to avoid issues with contacting the lead.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number linked to the address. This optional property is useful for leads that prefer or require fax communication. Ensure the fax number is valid and formatted correctly to ensure successful transmission.
   */
  fax?: string | null | undefined;
  /**
   * The email address associated with the address. This optional field is crucial for electronic communication with the lead. Ensure the email is valid and correctly formatted to facilitate seamless communication.
   */
  email?: string | null | undefined;
  /**
   * The website URL related to the address. This optional property allows you to store the lead's website, providing additional context and resources for engagement. Ensure the URL is valid and accessible.
   */
  website?: string | null | undefined;
  /**
   * Additional notes regarding the address. This optional field can be used to store any extra information or context about the lead's address that might be useful for future reference or actions.
   */
  notes?: string | null | undefined;
  /**
   * The row_version is a concurrency control token used to manage updates to the lead's address information. It ensures data integrity by preventing conflicting changes, as it must match the current version on the server for the update to proceed. This property is optional and should be included if you want to handle concurrent modifications effectively.
   */
  rowVersion?: string | null | undefined;
};

export type CreateLeadRequestSocialLinks = {
  /**
   * A unique identifier for each social link entry. This ID is used to distinguish between different social links associated with the lead, ensuring accurate data management and retrieval.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social link, which must be a valid web address. This field is required to establish a direct connection to the lead's social media profile, facilitating better interaction and data collection.
   */
  url: string;
  /**
   * Specifies the type of social media platform, such as Twitter or LinkedIn. This helps categorize the social link, enabling targeted marketing strategies and analytics based on platform type.
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number provided for the lead, such as 'mobile', 'home', or 'work'. This field helps categorize the phone number for better contact management and is optional. Ensure the type is a valid string that accurately describes the phone number's usage context.
 */
export const CreateLeadRequestPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number provided for the lead, such as 'mobile', 'home', or 'work'. This field helps categorize the phone number for better contact management and is optional. Ensure the type is a valid string that accurately describes the phone number's usage context.
 */
export type CreateLeadRequestPhoneNumbersType = ClosedEnum<
  typeof CreateLeadRequestPhoneNumbersType
>;

export type CreateLeadRequestPhoneNumbers = {
  /**
   * A unique identifier for each phone number entry within the phone_numbers array. This ID is used to distinguish between different phone numbers associated with the same lead, ensuring accurate management and retrieval of contact information. It is optional but recommended for maintaining clear records.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code for the phone number, such as '+1' for the United States. This code is crucial for ensuring that calls are correctly routed to the appropriate country, especially when dealing with international leads. It is optional but should be included for complete phone number records.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code for the phone number, such as '323' for Los Angeles. This code helps in identifying the specific geographic region of the phone number, which can be useful for regional marketing strategies. It is optional but provides additional context for the phone number.
   */
  areaCode?: string | null | undefined;
  /**
   * The main phone number associated with the lead, excluding the country and area codes. This field is required and must be a valid phone number format to ensure successful communication with the lead. It serves as the primary contact number for reaching out to the potential customer.
   */
  number: string;
  /**
   * The extension of the phone number, used to direct calls to a specific line within a larger phone system. This field is optional and should be included if the lead's phone number requires an extension for direct contact. Ensure the extension is a valid string that corresponds to the phone system's configuration.
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number provided for the lead, such as 'mobile', 'home', or 'work'. This field helps categorize the phone number for better contact management and is optional. Ensure the type is a valid string that accurately describes the phone number's usage context.
   */
  type?: CreateLeadRequestPhoneNumbersType | null | undefined;
};

/**
 * Specifies the type of email address associated with the lead, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and communication. It is optional and should be a string that clearly identifies the email's purpose.
 */
export const CreateLeadRequestEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the type of email address associated with the lead, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and communication. It is optional and should be a string that clearly identifies the email's purpose.
 */
export type CreateLeadRequestEmailsType = ClosedEnum<
  typeof CreateLeadRequestEmailsType
>;

export type CreateLeadRequestEmails = {
  /**
   * A unique identifier for each email address associated with the lead. This ID is used to distinguish between different email entries and is optional. Ensure the ID is a valid string that uniquely identifies the email within the system.
   */
  id?: string | null | undefined;
  /**
   * The primary email address for contacting the lead, which is required for communication purposes. This field must contain a valid email format to ensure successful delivery of messages. It is crucial for maintaining effective communication with the lead.
   */
  email: string | null;
  /**
   * Specifies the type of email address associated with the lead, such as 'work', 'personal', or 'other'. This helps categorize the email for better organization and communication. It is optional and should be a string that clearly identifies the email's purpose.
   */
  type?: CreateLeadRequestEmailsType | null | undefined;
};

export type CreateLeadRequestValue6 = {};

export type CreateLeadRequestValue4 = {};

/**
 * The custom_fields.value property is used to store additional information specific to the lead that does not fit into standard fields. This allows for greater flexibility in capturing unique data points relevant to your business needs. It is optional and can be left empty if no custom data is required.
 */
export type CreateLeadRequestValue =
  | CreateLeadRequestValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateLeadRequestValue6>;

export type CreateLeadRequestCustomFields = {
  /**
   * A mandatory unique identifier for each custom field, ensuring that each field can be distinctly referenced and managed. This ID is crucial for updating or retrieving specific custom field data.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, which provides a human-readable label for the data it represents. This name is optional but recommended for clarity and ease of use when managing custom fields.
   */
  name?: string | null | undefined;
  /**
   * Additional information or context about the custom field, aiding in understanding its purpose and usage. This description is optional and can help clarify the field's role within the lead's data structure.
   */
  description?: string | null | undefined;
  /**
   * The custom_fields.value property is used to store additional information specific to the lead that does not fit into standard fields. This allows for greater flexibility in capturing unique data points relevant to your business needs. It is optional and can be left empty if no custom data is required.
   */
  value?:
    | CreateLeadRequestValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateLeadRequestValue6>
    | null
    | undefined;
};

export type CreateLeadRequestExtendPaths = {
  /**
   * A JSONPath string that specifies the exact location within the data structure where the value should be applied. This path must be valid and correctly formatted to ensure the intended data modification occurs. It is crucial for targeting specific elements in complex JSON objects.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath. This can be of any data type, allowing for flexible updates to the data structure. Ensure the value is appropriate for the targeted path to maintain data integrity.
   */
  value?: any | undefined;
};

export type CreateLeadRequestPassThrough = {
  /**
   * The pass_through.service_id is a required string that identifies the specific service to which the pass_through data should be applied. This ensures that the custom data is correctly routed and processed by the intended service integration. It must be a valid service identifier known to the system.
   */
  serviceId: string;
  /**
   * An optional identifier for a specific workflow operation. This property is useful when the API call involves multiple downstream requests, allowing you to track and manage each operation distinctly. It should be a valid string that uniquely identifies the operation within your workflow.
   */
  operationId?: string | undefined;
  /**
   * A flexible object that allows you to include additional properties for direct extension. This is useful for adding custom data that may not be covered by the standard API fields. Ensure that the object structure aligns with your specific data requirements.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array of objects designed for structured data modifications using specified paths. Each object in the array should define a path and a value, enabling precise updates to nested data structures. This property is essential for complex data manipulations within the API request.
   */
  extendPaths?: Array<CreateLeadRequestExtendPaths> | undefined;
};

export type CreateLeadRequest = {
  /**
   * The full name of the lead being added to the CRM. This field is essential for identifying the lead within the system and must be a valid string representing the individual's complete name.
   */
  name: string;
  /**
   * The name of the company associated with the lead. This information is crucial for linking the lead to a specific business entity and must be a valid string representing the company's name.
   */
  companyName: string | null;
  /**
   * The unique identifier of the lead's owner within the CRM. This optional field helps assign responsibility for the lead to a specific user and should be a valid string corresponding to a user ID in the system.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the individual who owns the lead. This optional field provides a human-readable reference to the lead's owner and should be a valid string representing the owner's full name.
   */
  ownerName?: string | null | undefined;
  /**
   * The unique identifier for the company associated with the lead. This optional field allows for precise linking of the lead to a company record in the CRM and should be a valid string corresponding to a company ID.
   */
  companyId?: string | null | undefined;
  /**
   * A unique identifier for the lead within the CRM system. This field is optional and can be used to specify an existing lead ID if updating a lead, or left blank to create a new lead. It must be a valid string if provided, ensuring the correct lead is referenced or created.
   */
  leadId?: string | null | undefined;
  /**
   * Indicates the origin of the lead, such as a marketing campaign, referral, or direct inquiry. This optional field helps categorize leads based on their source, aiding in tracking and analysis of lead generation efforts. It should be a descriptive string that clearly identifies the lead's source.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead, used for personalizing communications and records within the CRM. This field is optional but recommended for better identification and engagement with the lead. It should be a valid string representing the lead's given name.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead, essential for complete identification and record-keeping in the CRM. While optional, providing this field enhances the ability to manage and communicate with the lead effectively. It should be a valid string representing the lead's family name.
   */
  lastName?: string | null | undefined;
  /**
   * A brief narrative or notes about the lead, providing context or additional information that might be useful for sales or marketing teams. This optional field can include details such as interests, needs, or any other relevant information that aids in lead management. It should be a concise string that captures essential details about the lead.
   */
  description?: string | null | undefined;
  /**
   * The prefix of the lead, such as Mr., Ms., or Dr. This field is optional and can be used to address the lead appropriately in communications. Including a prefix can help personalize interactions and improve engagement with potential customers.
   */
  prefix?: string | null | undefined;
  /**
   * The job title of the lead, which provides context about their role within their organization. This information can be useful for tailoring communication and understanding the lead's decision-making authority. It is an optional field but can enhance the relevance of your outreach efforts.
   */
  title?: string | null | undefined;
  /**
   * The language code of the lead, following the ISO 639-1 standard (e.g., 'EN' for English). This optional field helps in localizing communication and ensuring that interactions are conducted in the lead's preferred language, enhancing the effectiveness of your engagement.
   */
  language?: string | null | undefined;
  /**
   * The current status of the lead within the CRM system. This field is optional and can be used to track the lead's progress through your sales pipeline, such as 'new', 'contacted', or 'qualified'. Properly managing lead status helps in prioritizing follow-ups and organizing sales efforts.
   */
  status?: string | null | undefined;
  /**
   * The estimated monetary value associated with the lead, which can help prioritize leads based on potential revenue. This optional field allows you to quantify the lead's potential impact on your sales pipeline and allocate resources accordingly. Accurate estimation can improve sales forecasting and strategy.
   */
  monetaryAmount?: number | null | undefined;
  currency?: Currency | null | undefined;
  /**
   * The fax number associated with the lead, used for sending and receiving documents via fax. This field should contain a valid fax number format, allowing for traditional communication methods with the lead.
   */
  fax?: string | null | undefined;
  /**
   * A list of websites associated with the lead, providing additional online presence information. Each entry in the array should include a unique identifier and a valid URL, helping to establish a comprehensive digital profile for the lead.
   */
  websites?: Array<CreateLeadRequestWebsites> | undefined;
  /**
   * A collection of address objects associated with the lead. This array allows you to include multiple addresses, providing a comprehensive view of the lead's locations. Each address should be structured according to the specified address object format.
   */
  addresses?: Array<CreateLeadRequestAddresses> | undefined;
  /**
   * An array of social link objects associated with the lead. Each object should contain details such as the URL and type of social media platform. This helps in capturing the lead's social media presence for better engagement.
   */
  socialLinks?: Array<CreateLeadRequestSocialLinks> | undefined;
  /**
   * An array of phone number objects associated with the lead. Each object within this array should contain detailed information about a specific phone number, including its unique identifier, country code, area code, and the number itself. This property is optional and can be used to store multiple contact numbers for a single lead, enhancing the ability to reach out to potential customers through various channels.
   */
  phoneNumbers?: Array<CreateLeadRequestPhoneNumbers> | undefined;
  /**
   * An array of email objects associated with the lead, allowing multiple email addresses to be stored. Each object within the array should contain details like the email address and its unique identifier. This field is optional but recommended for comprehensive lead contact information.
   */
  emails?: Array<CreateLeadRequestEmails> | undefined;
  /**
   * An array of custom fields that allow you to store additional, user-defined information about the lead. This flexibility helps tailor the lead data to specific business needs. Each entry in the array should conform to the structure defined for custom fields.
   */
  customFields?: Array<CreateLeadRequestCustomFields> | undefined;
  /**
   * The tags property is an array used to categorize or label the lead with specific keywords or identifiers. This helps in organizing and filtering leads based on custom criteria defined by your business processes. Tags are optional and can be added as needed to enhance lead management.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The pass_through property allows you to include service-specific custom data or modifications when creating or updating a lead. This is particularly useful for integrating with third-party services that require additional parameters not covered by standard fields. It is optional and should be used when such custom data is necessary.
   */
  passThrough?: Array<CreateLeadRequestPassThrough> | undefined;
};

/** @internal */
export const CreateLeadRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestType
> = z.nativeEnum(CreateLeadRequestType);

/** @internal */
export const CreateLeadRequestType$outboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestType
> = CreateLeadRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestType$ {
  /** @deprecated use `CreateLeadRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestType$inboundSchema;
  /** @deprecated use `CreateLeadRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestType$outboundSchema;
}

/** @internal */
export const CreateLeadRequestWebsites$inboundSchema: z.ZodType<
  CreateLeadRequestWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateLeadRequestType$inboundSchema).optional(),
});

/** @internal */
export type CreateLeadRequestWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CreateLeadRequestWebsites$outboundSchema: z.ZodType<
  CreateLeadRequestWebsites$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CreateLeadRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestWebsites$ {
  /** @deprecated use `CreateLeadRequestWebsites$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestWebsites$inboundSchema;
  /** @deprecated use `CreateLeadRequestWebsites$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestWebsites$outboundSchema;
  /** @deprecated use `CreateLeadRequestWebsites$Outbound` instead. */
  export type Outbound = CreateLeadRequestWebsites$Outbound;
}

export function createLeadRequestWebsitesToJSON(
  createLeadRequestWebsites: CreateLeadRequestWebsites,
): string {
  return JSON.stringify(
    CreateLeadRequestWebsites$outboundSchema.parse(createLeadRequestWebsites),
  );
}

export function createLeadRequestWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestWebsites' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestAddressesType$inboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestAddressesType
> = z.nativeEnum(CreateLeadRequestAddressesType);

/** @internal */
export const CreateLeadRequestAddressesType$outboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestAddressesType
> = CreateLeadRequestAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestAddressesType$ {
  /** @deprecated use `CreateLeadRequestAddressesType$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestAddressesType$inboundSchema;
  /** @deprecated use `CreateLeadRequestAddressesType$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestAddressesType$outboundSchema;
}

/** @internal */
export const CreateLeadRequestAddresses$inboundSchema: z.ZodType<
  CreateLeadRequestAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateLeadRequestAddressesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type CreateLeadRequestAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const CreateLeadRequestAddresses$outboundSchema: z.ZodType<
  CreateLeadRequestAddresses$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CreateLeadRequestAddressesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestAddresses$ {
  /** @deprecated use `CreateLeadRequestAddresses$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestAddresses$inboundSchema;
  /** @deprecated use `CreateLeadRequestAddresses$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestAddresses$outboundSchema;
  /** @deprecated use `CreateLeadRequestAddresses$Outbound` instead. */
  export type Outbound = CreateLeadRequestAddresses$Outbound;
}

export function createLeadRequestAddressesToJSON(
  createLeadRequestAddresses: CreateLeadRequestAddresses,
): string {
  return JSON.stringify(
    CreateLeadRequestAddresses$outboundSchema.parse(createLeadRequestAddresses),
  );
}

export function createLeadRequestAddressesFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestAddresses' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestSocialLinks$inboundSchema: z.ZodType<
  CreateLeadRequestSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateLeadRequestSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CreateLeadRequestSocialLinks$outboundSchema: z.ZodType<
  CreateLeadRequestSocialLinks$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestSocialLinks$ {
  /** @deprecated use `CreateLeadRequestSocialLinks$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestSocialLinks$inboundSchema;
  /** @deprecated use `CreateLeadRequestSocialLinks$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestSocialLinks$outboundSchema;
  /** @deprecated use `CreateLeadRequestSocialLinks$Outbound` instead. */
  export type Outbound = CreateLeadRequestSocialLinks$Outbound;
}

export function createLeadRequestSocialLinksToJSON(
  createLeadRequestSocialLinks: CreateLeadRequestSocialLinks,
): string {
  return JSON.stringify(
    CreateLeadRequestSocialLinks$outboundSchema.parse(
      createLeadRequestSocialLinks,
    ),
  );
}

export function createLeadRequestSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestSocialLinks' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestPhoneNumbersType$inboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestPhoneNumbersType
> = z.nativeEnum(CreateLeadRequestPhoneNumbersType);

/** @internal */
export const CreateLeadRequestPhoneNumbersType$outboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestPhoneNumbersType
> = CreateLeadRequestPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestPhoneNumbersType$ {
  /** @deprecated use `CreateLeadRequestPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestPhoneNumbersType$inboundSchema;
  /** @deprecated use `CreateLeadRequestPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    CreateLeadRequestPhoneNumbersType$outboundSchema;
}

/** @internal */
export const CreateLeadRequestPhoneNumbers$inboundSchema: z.ZodType<
  CreateLeadRequestPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateLeadRequestPhoneNumbersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type CreateLeadRequestPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const CreateLeadRequestPhoneNumbers$outboundSchema: z.ZodType<
  CreateLeadRequestPhoneNumbers$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CreateLeadRequestPhoneNumbersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestPhoneNumbers$ {
  /** @deprecated use `CreateLeadRequestPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestPhoneNumbers$inboundSchema;
  /** @deprecated use `CreateLeadRequestPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestPhoneNumbers$outboundSchema;
  /** @deprecated use `CreateLeadRequestPhoneNumbers$Outbound` instead. */
  export type Outbound = CreateLeadRequestPhoneNumbers$Outbound;
}

export function createLeadRequestPhoneNumbersToJSON(
  createLeadRequestPhoneNumbers: CreateLeadRequestPhoneNumbers,
): string {
  return JSON.stringify(
    CreateLeadRequestPhoneNumbers$outboundSchema.parse(
      createLeadRequestPhoneNumbers,
    ),
  );
}

export function createLeadRequestPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestEmailsType
> = z.nativeEnum(CreateLeadRequestEmailsType);

/** @internal */
export const CreateLeadRequestEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateLeadRequestEmailsType
> = CreateLeadRequestEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestEmailsType$ {
  /** @deprecated use `CreateLeadRequestEmailsType$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestEmailsType$inboundSchema;
  /** @deprecated use `CreateLeadRequestEmailsType$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestEmailsType$outboundSchema;
}

/** @internal */
export const CreateLeadRequestEmails$inboundSchema: z.ZodType<
  CreateLeadRequestEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CreateLeadRequestEmailsType$inboundSchema).optional(),
});

/** @internal */
export type CreateLeadRequestEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const CreateLeadRequestEmails$outboundSchema: z.ZodType<
  CreateLeadRequestEmails$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CreateLeadRequestEmailsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestEmails$ {
  /** @deprecated use `CreateLeadRequestEmails$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestEmails$inboundSchema;
  /** @deprecated use `CreateLeadRequestEmails$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestEmails$outboundSchema;
  /** @deprecated use `CreateLeadRequestEmails$Outbound` instead. */
  export type Outbound = CreateLeadRequestEmails$Outbound;
}

export function createLeadRequestEmailsToJSON(
  createLeadRequestEmails: CreateLeadRequestEmails,
): string {
  return JSON.stringify(
    CreateLeadRequestEmails$outboundSchema.parse(createLeadRequestEmails),
  );
}

export function createLeadRequestEmailsFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestEmails' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestValue6$inboundSchema: z.ZodType<
  CreateLeadRequestValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateLeadRequestValue6$Outbound = {};

/** @internal */
export const CreateLeadRequestValue6$outboundSchema: z.ZodType<
  CreateLeadRequestValue6$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestValue6$ {
  /** @deprecated use `CreateLeadRequestValue6$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestValue6$inboundSchema;
  /** @deprecated use `CreateLeadRequestValue6$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestValue6$outboundSchema;
  /** @deprecated use `CreateLeadRequestValue6$Outbound` instead. */
  export type Outbound = CreateLeadRequestValue6$Outbound;
}

export function createLeadRequestValue6ToJSON(
  createLeadRequestValue6: CreateLeadRequestValue6,
): string {
  return JSON.stringify(
    CreateLeadRequestValue6$outboundSchema.parse(createLeadRequestValue6),
  );
}

export function createLeadRequestValue6FromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestValue6' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestValue4$inboundSchema: z.ZodType<
  CreateLeadRequestValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateLeadRequestValue4$Outbound = {};

/** @internal */
export const CreateLeadRequestValue4$outboundSchema: z.ZodType<
  CreateLeadRequestValue4$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestValue4$ {
  /** @deprecated use `CreateLeadRequestValue4$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestValue4$inboundSchema;
  /** @deprecated use `CreateLeadRequestValue4$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestValue4$outboundSchema;
  /** @deprecated use `CreateLeadRequestValue4$Outbound` instead. */
  export type Outbound = CreateLeadRequestValue4$Outbound;
}

export function createLeadRequestValue4ToJSON(
  createLeadRequestValue4: CreateLeadRequestValue4,
): string {
  return JSON.stringify(
    CreateLeadRequestValue4$outboundSchema.parse(createLeadRequestValue4),
  );
}

export function createLeadRequestValue4FromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestValue4' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestValue$inboundSchema: z.ZodType<
  CreateLeadRequestValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateLeadRequestValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateLeadRequestValue6$inboundSchema)),
]);

/** @internal */
export type CreateLeadRequestValue$Outbound =
  | CreateLeadRequestValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<CreateLeadRequestValue6$Outbound>;

/** @internal */
export const CreateLeadRequestValue$outboundSchema: z.ZodType<
  CreateLeadRequestValue$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestValue
> = z.union([
  z.lazy(() => CreateLeadRequestValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CreateLeadRequestValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestValue$ {
  /** @deprecated use `CreateLeadRequestValue$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestValue$inboundSchema;
  /** @deprecated use `CreateLeadRequestValue$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestValue$outboundSchema;
  /** @deprecated use `CreateLeadRequestValue$Outbound` instead. */
  export type Outbound = CreateLeadRequestValue$Outbound;
}

export function createLeadRequestValueToJSON(
  createLeadRequestValue: CreateLeadRequestValue,
): string {
  return JSON.stringify(
    CreateLeadRequestValue$outboundSchema.parse(createLeadRequestValue),
  );
}

export function createLeadRequestValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestValue' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestCustomFields$inboundSchema: z.ZodType<
  CreateLeadRequestCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateLeadRequestValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateLeadRequestValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CreateLeadRequestCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | CreateLeadRequestValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<CreateLeadRequestValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CreateLeadRequestCustomFields$outboundSchema: z.ZodType<
  CreateLeadRequestCustomFields$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CreateLeadRequestValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CreateLeadRequestValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestCustomFields$ {
  /** @deprecated use `CreateLeadRequestCustomFields$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestCustomFields$inboundSchema;
  /** @deprecated use `CreateLeadRequestCustomFields$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestCustomFields$outboundSchema;
  /** @deprecated use `CreateLeadRequestCustomFields$Outbound` instead. */
  export type Outbound = CreateLeadRequestCustomFields$Outbound;
}

export function createLeadRequestCustomFieldsToJSON(
  createLeadRequestCustomFields: CreateLeadRequestCustomFields,
): string {
  return JSON.stringify(
    CreateLeadRequestCustomFields$outboundSchema.parse(
      createLeadRequestCustomFields,
    ),
  );
}

export function createLeadRequestCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestCustomFields' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestExtendPaths$inboundSchema: z.ZodType<
  CreateLeadRequestExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CreateLeadRequestExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CreateLeadRequestExtendPaths$outboundSchema: z.ZodType<
  CreateLeadRequestExtendPaths$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestExtendPaths$ {
  /** @deprecated use `CreateLeadRequestExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestExtendPaths$inboundSchema;
  /** @deprecated use `CreateLeadRequestExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestExtendPaths$outboundSchema;
  /** @deprecated use `CreateLeadRequestExtendPaths$Outbound` instead. */
  export type Outbound = CreateLeadRequestExtendPaths$Outbound;
}

export function createLeadRequestExtendPathsToJSON(
  createLeadRequestExtendPaths: CreateLeadRequestExtendPaths,
): string {
  return JSON.stringify(
    CreateLeadRequestExtendPaths$outboundSchema.parse(
      createLeadRequestExtendPaths,
    ),
  );
}

export function createLeadRequestExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestExtendPaths' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequestPassThrough$inboundSchema: z.ZodType<
  CreateLeadRequestPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => CreateLeadRequestExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CreateLeadRequestPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CreateLeadRequestExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CreateLeadRequestPassThrough$outboundSchema: z.ZodType<
  CreateLeadRequestPassThrough$Outbound,
  z.ZodTypeDef,
  CreateLeadRequestPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => CreateLeadRequestExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequestPassThrough$ {
  /** @deprecated use `CreateLeadRequestPassThrough$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequestPassThrough$inboundSchema;
  /** @deprecated use `CreateLeadRequestPassThrough$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequestPassThrough$outboundSchema;
  /** @deprecated use `CreateLeadRequestPassThrough$Outbound` instead. */
  export type Outbound = CreateLeadRequestPassThrough$Outbound;
}

export function createLeadRequestPassThroughToJSON(
  createLeadRequestPassThrough: CreateLeadRequestPassThrough,
): string {
  return JSON.stringify(
    CreateLeadRequestPassThrough$outboundSchema.parse(
      createLeadRequestPassThrough,
    ),
  );
}

export function createLeadRequestPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequestPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequestPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequestPassThrough' from JSON`,
  );
}

/** @internal */
export const CreateLeadRequest$inboundSchema: z.ZodType<
  CreateLeadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => CreateLeadRequestWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CreateLeadRequestAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => CreateLeadRequestSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => CreateLeadRequestPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => CreateLeadRequestEmails$inboundSchema))
    .optional(),
  custom_fields: z.array(
    z.lazy(() => CreateLeadRequestCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  pass_through: z.array(
    z.lazy(() => CreateLeadRequestPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CreateLeadRequest$Outbound = {
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<CreateLeadRequestWebsites$Outbound> | undefined;
  addresses?: Array<CreateLeadRequestAddresses$Outbound> | undefined;
  social_links?: Array<CreateLeadRequestSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<CreateLeadRequestPhoneNumbers$Outbound> | undefined;
  emails?: Array<CreateLeadRequestEmails$Outbound> | undefined;
  custom_fields?: Array<CreateLeadRequestCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  pass_through?: Array<CreateLeadRequestPassThrough$Outbound> | undefined;
};

/** @internal */
export const CreateLeadRequest$outboundSchema: z.ZodType<
  CreateLeadRequest$Outbound,
  z.ZodTypeDef,
  CreateLeadRequest
> = z.object({
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => CreateLeadRequestWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CreateLeadRequestAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => CreateLeadRequestSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => CreateLeadRequestPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => CreateLeadRequestEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => CreateLeadRequestCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  passThrough: z.array(
    z.lazy(() => CreateLeadRequestPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLeadRequest$ {
  /** @deprecated use `CreateLeadRequest$inboundSchema` instead. */
  export const inboundSchema = CreateLeadRequest$inboundSchema;
  /** @deprecated use `CreateLeadRequest$outboundSchema` instead. */
  export const outboundSchema = CreateLeadRequest$outboundSchema;
  /** @deprecated use `CreateLeadRequest$Outbound` instead. */
  export type Outbound = CreateLeadRequest$Outbound;
}

export function createLeadRequestToJSON(
  createLeadRequest: CreateLeadRequest,
): string {
  return JSON.stringify(
    CreateLeadRequest$outboundSchema.parse(createLeadRequest),
  );
}

export function createLeadRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateLeadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLeadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLeadRequest' from JSON`,
  );
}
