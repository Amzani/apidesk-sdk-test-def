/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the category or classification of the contact, such as 'customer', 'lead', or 'vendor'. This field aids in organizing and filtering contacts based on their role or relationship with the organization.
 */
export const ListContactsResponseType = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * Specifies the category or classification of the contact, such as 'customer', 'lead', or 'vendor'. This field aids in organizing and filtering contacts based on their role or relationship with the organization.
 */
export type ListContactsResponseType = ClosedEnum<
  typeof ListContactsResponseType
>;

/**
 * The gender of the contact, which can be used for demographic analysis or personalized communication. This field may include values like 'male', 'female', or other gender identities as applicable.
 */
export const ListContactsResponseGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact, which can be used for demographic analysis or personalized communication. This field may include values like 'male', 'female', or other gender identities as applicable.
 */
export type ListContactsResponseGender = ClosedEnum<
  typeof ListContactsResponseGender
>;

/**
 * Specifies the type of website, such as personal, business, or social media. This categorization helps in understanding the nature of the website linked to the contact.
 */
export const ListContactsResponseDataType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the type of website, such as personal, business, or social media. This categorization helps in understanding the nature of the website linked to the contact.
 */
export type ListContactsResponseDataType = ClosedEnum<
  typeof ListContactsResponseDataType
>;

export type ListContactsResponseWebsites = {
  /**
   * A unique identifier for each website entry associated with the contact. This ID is used to distinguish between different websites linked to the same contact.
   */
  id?: string | null | undefined;
  /**
   * The URL of the website associated with the contact. This field is required and must be a valid web address, providing direct access to the contact's online resource.
   */
  url: string;
  /**
   * Specifies the type of website, such as personal, business, or social media. This categorization helps in understanding the nature of the website linked to the contact.
   */
  type?: ListContactsResponseDataType | null | undefined;
};

/**
 * Specifies the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in organizing and differentiating addresses based on their usage context within the CRM system.
 */
export const ListContactsResponseDataAddressesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Specifies the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in organizing and differentiating addresses based on their usage context within the CRM system.
 */
export type ListContactsResponseDataAddressesType = ClosedEnum<
  typeof ListContactsResponseDataAddressesType
>;

export type ListContactsResponseAddresses = {
  /**
   * A unique identifier for each address entry within the contact's address list. This ID is used to distinguish between different addresses and is crucial for operations that require specific address manipulation or retrieval.
   */
  id?: string | null | undefined;
  /**
   * Specifies the category or purpose of the address, such as 'home', 'work', or 'billing'. This helps in organizing and differentiating addresses based on their usage context within the CRM system.
   */
  type?: ListContactsResponseDataAddressesType | null | undefined;
  /**
   * A complete address in a single string format, used when structured address data is unavailable. This field provides a fallback for capturing address information in a less granular form, ensuring that essential location details are still accessible.
   */
  string?: string | null | undefined;
  /**
   * The name associated with the address, which could be a business name or a contact person. This field aids in identifying the address context or ownership, enhancing the clarity of address records within the CRM.
   */
  name?: string | null | undefined;
  /**
   * The first line of the address, typically including the street number, street name, and any apartment or suite number. This field is part of the contact's address details, providing essential location information for CRM records.
   */
  line1?: string | null | undefined;
  /**
   * The second line of the address, often used for additional location details such as building name or floor number. This field complements the primary address line to ensure accurate and complete address information.
   */
  line2?: string | null | undefined;
  /**
   * The third line of the address, which can be used for further address details if needed. This field allows for extended address information, ensuring comprehensive location data in CRM systems.
   */
  line3?: string | null | undefined;
  /**
   * The fourth line of the address, providing additional space for any extra address information. This field supports detailed address entries, enhancing the completeness of contact location data.
   */
  line4?: string | null | undefined;
  /**
   * The street number component of the address, indicating the specific number assigned to a building or location on a street. This field is crucial for pinpointing the exact location within the address structure.
   */
  streetNumber?: string | null | undefined;
  /**
   * The 'city' field contains the name of the city associated with the contact's address. This information is part of the address details returned in the response, helping to identify the geographical location of the contact. The value is expected to be a string representing the city's name.
   */
  city?: string | null | undefined;
  /**
   * The 'state' field represents the name of the state or region for the contact's address. This property is included in the address details to provide more specific location information. The value should be a string indicating the state's name.
   */
  state?: string | null | undefined;
  /**
   * The 'postal_code' field contains the postal code or equivalent for the contact's address. This is used to specify the precise area within a city or region, aiding in accurate location identification. The value is expected to be a string representing the postal code.
   */
  postalCode?: string | null | undefined;
  /**
   * The 'country' field provides the country code for the contact's address, following the ISO 3166-1 alpha-2 standard. This code helps in identifying the country part of the address, ensuring international compatibility. The value is a two-letter string representing the country code.
   */
  country?: string | null | undefined;
  /**
   * The 'latitude' field indicates the geographical latitude of the contact's address. This numeric value is part of the geolocation data, used for mapping and spatial analysis. The value should be a string representing the latitude in decimal degrees.
   */
  latitude?: string | null | undefined;
  /**
   * The longitude coordinate of the address, represented as a string. This value is part of the geographical data that helps pinpoint the exact location of the contact's address on a map. It is useful for applications that require mapping or location-based services.
   */
  longitude?: string | null | undefined;
  /**
   * The county or sublocality associated with the address, provided as a string. This field helps in identifying the regional division within a state or country where the contact resides. It is particularly useful for regional segmentation and analysis.
   */
  county?: string | null | undefined;
  /**
   * The name of the contact person associated with the address, formatted as a string. This information is crucial for identifying the primary individual at the given address, facilitating personalized communication and record-keeping.
   */
  contactName?: string | null | undefined;
  /**
   * The salutation or title used for the contact person at the address, such as 'Mr.', 'Ms.', or 'Dr.', represented as a string. This field is important for formal communication and ensuring respectful address in correspondence.
   */
  salutation?: string | null | undefined;
  /**
   * The phone number associated with the address, formatted as a string. This contact detail is essential for direct communication with the individual or organization at the specified address, supporting customer service and outreach efforts.
   */
  phoneNumber?: string | null | undefined;
  /**
   * The fax number associated with the contact's address. This field contains the fax number in a standard string format, allowing for communication via fax. It is optional and may not be present for all contacts.
   */
  fax?: string | null | undefined;
  /**
   * The email address linked to the contact's address. This property holds the email in a standard string format, used for electronic communication with the contact. It is optional and may not be available for every contact entry.
   */
  email?: string | null | undefined;
  /**
   * The website URL associated with the contact's address. This field contains the URL in a string format, providing a link to the contact's online presence or business site. It is optional and may not be included for all contacts.
   */
  website?: string | null | undefined;
  /**
   * Additional notes related to the contact's address. This property contains supplementary information in a string format, which can include comments or special instructions. It is optional and may vary in content and length.
   */
  notes?: string | null | undefined;
  /**
   * A version identifier for the contact's address record, represented as a string. This binary value is used to track changes and prevent data conflicts by incrementing with each update to the address. It is optional and primarily used for data integrity and synchronization purposes.
   */
  rowVersion?: string | null | undefined;
};

export type ListContactsResponseSocialLinks = {
  /**
   * A unique identifier for each social media link associated with the contact. This ID is used to distinguish between different social media profiles within the contact's data, ensuring accurate referencing and management.
   */
  id?: string | null | undefined;
  /**
   * The URL of the social media profile linked to the contact, such as 'https://www.twitter.com/apideck'. This field is essential for directing users to the specific social media page associated with the contact, facilitating direct access and interaction.
   */
  url: string;
  /**
   * Specifies the type of social media platform for the link, such as 'twitter'. This helps in categorizing the social media links, allowing developers to filter or sort contacts based on their social media presence.
   */
  type?: string | null | undefined;
};

/**
 * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used within the contact's details.
 */
export const ListContactsResponseDataPhoneNumbersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used within the contact's details.
 */
export type ListContactsResponseDataPhoneNumbersType = ClosedEnum<
  typeof ListContactsResponseDataPhoneNumbersType
>;

export type ListContactsResponsePhoneNumbers = {
  /**
   * A unique identifier assigned to each phone number entry within the contact's data. This ID is used to distinguish between different phone numbers associated with a contact, facilitating precise data management and updates.
   */
  id?: string | null | undefined;
  /**
   * The international dialing code associated with the phone number, such as '+1' for the United States. This code is crucial for ensuring the phone number is correctly formatted for international calls.
   */
  countryCode?: string | null | undefined;
  /**
   * The regional area code that forms part of the phone number, like '323' for Los Angeles. This code helps in identifying the geographical location of the phone number within a country.
   */
  areaCode?: string | null | undefined;
  /**
   * The main sequence of digits representing the phone number, excluding country and area codes. This is the essential part of the phone number used for direct dialing within the specified area.
   */
  number: string;
  /**
   * An additional number used to direct calls to a specific department or individual within an organization, often used in business settings. This extension is appended to the main phone number for internal routing purposes.
   */
  extension?: string | null | undefined;
  /**
   * Specifies the category of the phone number, such as 'mobile', 'home', or 'work'. This helps in identifying the context in which the phone number is used within the contact's details.
   */
  type?: ListContactsResponseDataPhoneNumbersType | null | undefined;
};

/**
 * Indicates the type of email address, such as 'personal' or 'work'. This classification helps in understanding the context and preferred usage of the email address within the contact's profile.
 */
export const ListContactsResponseDataEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Indicates the type of email address, such as 'personal' or 'work'. This classification helps in understanding the context and preferred usage of the email address within the contact's profile.
 */
export type ListContactsResponseDataEmailsType = ClosedEnum<
  typeof ListContactsResponseDataEmailsType
>;

export type ListContactsResponseEmails = {
  /**
   * A unique identifier for each email address entry within the contact's email list. This ID is crucial for distinguishing between multiple email addresses associated with a single contact.
   */
  id?: string | null | undefined;
  /**
   * The actual email address of the contact, formatted as a standard email string. This is a required field and serves as a primary means of electronic communication with the contact.
   */
  email: string | null;
  /**
   * Indicates the type of email address, such as 'personal' or 'work'. This classification helps in understanding the context and preferred usage of the email address within the contact's profile.
   */
  type?: ListContactsResponseDataEmailsType | null | undefined;
};

export type ListContactsResponseValue6 = {};

export type ListContactsResponseValue4 = {};

/**
 * This property holds the value of a custom field associated with a contact. It allows for storing additional, user-defined information that may not be covered by standard fields. The format and content of this value depend on the specific custom field configuration within the CRM.
 */
export type ListContactsResponseValue =
  | ListContactsResponseValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListContactsResponseValue6>;

export type ListContactsResponseCustomFields = {
  /**
   * A unique identifier for each custom field associated with the contact. This string value is essential for referencing and managing specific custom fields within the CRM system.
   */
  id: string | null;
  /**
   * The name assigned to the custom field, which provides a human-readable label for the field. This string helps users identify the purpose or content of the custom field within the contact's data.
   */
  name?: string | null | undefined;
  /**
   * A detailed description of the custom field, offering additional context or information about its intended use. This string can help users understand the relevance or application of the custom field in the contact's profile.
   */
  description?: string | null | undefined;
  /**
   * This property holds the value of a custom field associated with a contact. It allows for storing additional, user-defined information that may not be covered by standard fields. The format and content of this value depend on the specific custom field configuration within the CRM.
   */
  value?:
    | ListContactsResponseValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListContactsResponseValue6>
    | null
    | undefined;
};

/**
 * An object containing any custom mappings configured for the contact resource. This field includes additional, user-defined data mappings that extend the standard contact schema, allowing for tailored data integration and management. The structure of this object depends on the specific custom mappings applied.
 */
export type ListContactsResponseCustomMappings = {};

export type ListContactsResponseExtendPaths = {
  /**
   * A JSONPath string that indicates the specific location within the data structure where the value should be applied. This path is crucial for accurately targeting data modifications.
   */
  path: string;
  /**
   * The value to be set at the specified JSONPath. This can be of any data type, allowing for flexible data updates based on the path provided.
   */
  value?: any | undefined;
};

export type ListContactsResponsePassThrough = {
  /**
   * A string identifier for the service to which the pass_through data should be applied. This ensures that the custom data is directed to the correct service, facilitating precise data handling and integration.
   */
  serviceId: string;
  /**
   * An optional string identifier for a workflow operation that the pass_through data should be applied to. This is useful for Unify calls that involve multiple downstream requests, allowing developers to specify which operation the data pertains to.
   */
  operationId?: string | undefined;
  /**
   * An object that allows for direct extension with any properties. This flexibility enables developers to add custom fields or data structures as needed, supporting complex data integration scenarios.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * An array containing objects that define structured data modifications. Each object specifies a path and a value to be applied, allowing for dynamic data transformation within the response.
   */
  extendPaths?: Array<ListContactsResponseExtendPaths> | undefined;
};

export type ListContactsResponseData = {
  /**
   * A unique identifier assigned to each contact within the CRM system. This ID is used to distinguish and reference individual contacts, allowing for precise data retrieval and manipulation.
   */
  id?: string | undefined;
  /**
   * The full name of the contact as stored in the CRM. This field is essential for identifying and displaying contact information in user interfaces and reports.
   */
  name: string | null;
  /**
   * The identifier of the user or entity that owns or manages the contact within the CRM. This field helps in assigning responsibility and tracking contact management activities.
   */
  ownerId?: string | null | undefined;
  /**
   * Specifies the category or classification of the contact, such as 'customer', 'lead', or 'vendor'. This field aids in organizing and filtering contacts based on their role or relationship with the organization.
   */
  type?: ListContactsResponseType | null | undefined;
  /**
   * The unique identifier for the company associated with the contact. This ID is used to link the contact to its respective company within the CRM system, facilitating organization and retrieval of company-related information.
   */
  companyId?: string | null | undefined;
  /**
   * The full name of the company that the contact is linked to. This property helps in identifying the organization the contact is associated with, providing context for the contact's professional background.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier for the lead associated with the contact. This ID helps in tracking the contact's relationship to potential sales opportunities within the CRM system.
   */
  leadId?: string | null | undefined;
  /**
   * The given name of the contact person. This property is used to personalize communications and identify the contact within the CRM system.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the contact person, if available. This property can be used for more precise identification and record-keeping within the CRM system.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the contact, representing the family name or surname. This field is used to identify and sort contacts within the CRM system. It is a string value and may be used in conjunction with other name fields for full identification.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the contact, such as 'Mr.', 'Ms.', or 'Dr.'. This field provides additional context to the contact's name, often used in formal communication. It is a string value and is optional depending on the contact's details.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the contact, such as 'Jr.', 'Sr.', or 'III'. This field adds further distinction to the contact's name, particularly in cases of generational naming. It is a string value and is optional based on the contact's personal information.
   */
  suffix?: string | null | undefined;
  /**
   * The job title of the contact, indicating their position or role within their organization. This field helps in understanding the contact's professional responsibilities and hierarchy. It is a string value and can be used to filter or categorize contacts based on their job roles.
   */
  title?: string | null | undefined;
  /**
   * The department within the organization where the contact works. This field provides insight into the contact's area of expertise or responsibility, aiding in organizational mapping and communication. It is a string value and can be used to group contacts by their departmental affiliations.
   */
  department?: string | null | undefined;
  /**
   * The language code representing the contact's preferred language, formatted according to ISO 639-1 standards. This property helps in localizing communication with the contact, such as 'EN' for English in the United States.
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact, which can be used for demographic analysis or personalized communication. This field may include values like 'male', 'female', or other gender identities as applicable.
   */
  gender?: ListContactsResponseGender | null | undefined;
  /**
   * The contact's date of birth, formatted as a string. This information can be used for age verification, sending birthday greetings, or demographic segmentation.
   */
  birthday?: string | null | undefined;
  /**
   * A string containing the URL or path to the contact's image. This can be used to visually identify the contact within the CRM system or related applications.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The URL linking to the contact's photo, allowing for easy access and display of the contact's image in applications or user interfaces.
   */
  photoUrl?: string | null | undefined;
  /**
   * Indicates the origin from which the contact was acquired, such as a marketing campaign, referral, or direct inquiry. This information helps in tracking the effectiveness of different lead generation strategies. The value is a string that describes the source of the lead.
   */
  leadSource?: string | null | undefined;
  /**
   * Contains the fax number associated with the contact, formatted as a string. This field is useful for businesses that still utilize fax communication and need to store this information for their contacts.
   */
  fax?: string | null | undefined;
  /**
   * Provides additional information or notes about the contact, which can include personal preferences, relationship history, or other relevant details. This field is a string and serves to give context or background that may be useful for CRM users.
   */
  description?: string | null | undefined;
  /**
   * Represents the current financial balance associated with the contact, typically in a numerical format. This could relate to outstanding invoices, credit balances, or other financial metrics relevant to the contact's account.
   */
  currentBalance?: number | null | undefined;
  /**
   * Describes the current state or condition of the contact within the CRM system, such as active, inactive, or pending. This status helps determine how the contact is managed and interacted with in the CRM.
   */
  status?: string | null | undefined;
  /**
   * Indicates whether the contact is currently active within the CRM system. A value of 'true' means the contact is active, while 'false' indicates it is inactive. This status helps in filtering and managing contact records effectively.
   */
  active?: boolean | null | undefined;
  /**
   * A list of websites associated with the contact. Each entry in the array represents a website object containing details such as the URL and type. This array helps in managing and displaying the contact's online presence.
   */
  websites?: Array<ListContactsResponseWebsites> | undefined;
  /**
   * An array containing multiple address objects associated with a contact. Each object within the array represents a distinct address entry, allowing for comprehensive address management within the CRM system. This structure supports the retrieval of all address-related information for a contact in a single request.
   */
  addresses?: Array<ListContactsResponseAddresses> | undefined;
  /**
   * An array containing the social media links associated with the contact. Each entry in the array represents a distinct social media profile, providing URLs and types for easy identification and access. This property helps in aggregating all social media connections of a contact for comprehensive CRM data management.
   */
  socialLinks?: Array<ListContactsResponseSocialLinks> | undefined;
  /**
   * An array of phone numbers associated with the contact. Each entry in the array represents a different phone number, providing a comprehensive list of contact methods for the individual. This property is crucial for ensuring all potential communication channels are documented and accessible.
   */
  phoneNumbers?: Array<ListContactsResponsePhoneNumbers> | undefined;
  /**
   * An array containing the email addresses associated with the contact. Each entry in the array provides detailed information about a specific email address, facilitating comprehensive contact management.
   */
  emails?: Array<ListContactsResponseEmails> | undefined;
  /**
   * The email domain associated with the contact's primary email address. This string value helps categorize and manage contacts based on their email domains, facilitating domain-specific operations or filtering within the CRM.
   */
  emailDomain?: string | null | undefined;
  /**
   * An array of custom fields associated with the contact. Each entry in this array represents a unique custom field, allowing for the storage of additional, user-defined information that is not covered by standard contact fields.
   */
  customFields?: Array<ListContactsResponseCustomFields> | undefined;
  /**
   * An array containing tags associated with the contact. Tags are used to categorize and organize contacts within the CRM, allowing for easier filtering and management. Each tag is represented as a string within this array.
   */
  tags?: Array<string> | null | undefined;
  /**
   * The date and time when the first call was made to or from the contact, formatted as an ISO 8601 string. This timestamp helps track the initial interaction with the contact, providing insights into communication history.
   */
  firstCallAt?: Date | null | undefined;
  /**
   * The date and time when the first email was sent to or received from the contact, formatted as an ISO 8601 string. This information is useful for understanding the timeline of email communications with the contact.
   */
  firstEmailAt?: Date | null | undefined;
  /**
   * The date and time of the last recorded activity associated with the contact. This timestamp helps track the most recent interaction or update involving the contact, aiding in activity monitoring and engagement analysis. The format is typically ISO 8601, such as '2023-10-05T14:48:00Z'.
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * An object containing any custom mappings configured for the contact resource. This field includes additional, user-defined data mappings that extend the standard contact schema, allowing for tailored data integration and management. The structure of this object depends on the specific custom mappings applied.
   */
  customMappings?: ListContactsResponseCustomMappings | null | undefined;
  /**
   * The date and time when the contact's information was last updated. This timestamp is crucial for synchronization processes, ensuring that the most recent data is reflected in the CRM system. The format follows ISO 8601 standards, such as '2023-10-05T14:48:00Z'.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the contact was initially created in the CRM system. This timestamp provides historical context for the contact's record, useful for auditing and tracking the lifecycle of the contact. The format is typically ISO 8601, like '2023-10-05T14:48:00Z'.
   */
  createdAt?: Date | null | undefined;
  /**
   * An array of identifiers representing opportunities associated with the contact. These IDs link the contact to potential business opportunities, facilitating tracking and management of sales prospects. Each ID in the array is a unique identifier for an opportunity within the CRM system.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * An array that allows the inclusion of service-specific custom data or structured modifications in the request body. This is particularly useful when creating or updating resources, enabling developers to pass additional data that may be required by specific services.
   */
  passThrough?: Array<ListContactsResponsePassThrough> | undefined;
};

/**
 * This object contains cursors used for paginating through the list of contacts. It provides the necessary pointers to move between pages of results, ensuring efficient navigation and data retrieval in large datasets.
 */
export type ListContactsResponseCursors = {
  /**
   * A string cursor that points to the previous page of contact results. Use this cursor to retrieve the preceding set of contacts in the paginated list, facilitating backward navigation.
   */
  previous?: string | null | undefined;
  /**
   * A string cursor representing the current page of contact results. This cursor helps in identifying the current position within the paginated list, ensuring accurate data retrieval.
   */
  current?: string | null | undefined;
  /**
   * A string cursor that points to the next page of contact results. Utilize this cursor to access the subsequent set of contacts, enabling forward navigation through the paginated data.
   */
  next?: string | null | undefined;
};

/**
 * An object containing metadata about the response, such as pagination details or processing information. This helps in understanding the context and scope of the returned data.
 */
export type ListContactsResponseMeta = {
  /**
   * The number of items included in the current page of the response data. This is useful for managing pagination and understanding the volume of data retrieved in a single request.
   */
  itemsOnPage?: number | undefined;
  /**
   * This object contains cursors used for paginating through the list of contacts. It provides the necessary pointers to move between pages of results, ensuring efficient navigation and data retrieval in large datasets.
   */
  cursors?: ListContactsResponseCursors | undefined;
};

/**
 * This object contains hyperlinks for navigating between pages of contact results. It provides direct links to previous and next pages, enhancing user experience by simplifying page transitions in the API response.
 */
export type ListContactsResponseLinks = {
  /**
   * This property contains the URL link to the previous page of contacts in the API response. It is used for pagination, allowing developers to navigate back to the earlier set of results when viewing a list of contacts. The value is a string formatted as a URL, and it is optional, appearing only when there is a previous page available.
   */
  previous?: string | null | undefined;
  /**
   * This property holds the URL link to the current page of contacts being viewed in the API response. It helps developers confirm the current position within the paginated list of contacts. The value is a string formatted as a URL, providing a direct reference to the current set of results.
   */
  current?: string | undefined;
  /**
   * This property provides the URL link to the next page of contacts in the API response. It is essential for pagination, enabling developers to proceed to the subsequent set of results in the contact list. The value is a string formatted as a URL, and it is optional, appearing only when there is a next page available.
   */
  next?: string | null | undefined;
};

/**
 * Contacts
 */
export type ListContactsResponse = {
  /**
   * The HTTP response status code indicating the result of the API request. This integer value helps determine if the request was successful (e.g., 200 for success) or if there was an error (e.g., 404 for not found). It is crucial for error handling and debugging in client applications.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request or 'Not Found' for an error. This string provides a human-readable explanation of the status code, aiding in understanding the outcome of the API call.
   */
  status: string;
  /**
   * The Apideck ID of the service provider from which the contact data is retrieved. This string uniquely identifies the CRM service being accessed, ensuring that the data is sourced from the correct provider within the Apideck ecosystem.
   */
  service: string;
  /**
   * The name of the unified API resource being accessed, in this case, 'contacts'. This string indicates the type of data returned by the API, helping developers understand the context and structure of the response data.
   */
  resource: string;
  /**
   * The specific operation performed by the API, such as 'retrieve' for fetching contact data. This string helps developers identify the action taken by the API, ensuring clarity in the response's purpose and context.
   */
  operation: string;
  /**
   * An array containing the list of contact objects retrieved from the CRM. Each object within the array represents a single contact with its associated details, facilitating the handling and integration of contact data across various CRM systems.
   */
  data: Array<ListContactsResponseData>;
  /**
   * An object containing metadata about the response, such as pagination details or processing information. This helps in understanding the context and scope of the returned data.
   */
  meta?: ListContactsResponseMeta | undefined;
  /**
   * This object contains hyperlinks for navigating between pages of contact results. It provides direct links to previous and next pages, enhancing user experience by simplifying page transitions in the API response.
   */
  links?: ListContactsResponseLinks | undefined;
};

/** @internal */
export const ListContactsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ListContactsResponseType
> = z.nativeEnum(ListContactsResponseType);

/** @internal */
export const ListContactsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ListContactsResponseType
> = ListContactsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseType$ {
  /** @deprecated use `ListContactsResponseType$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseType$inboundSchema;
  /** @deprecated use `ListContactsResponseType$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseType$outboundSchema;
}

/** @internal */
export const ListContactsResponseGender$inboundSchema: z.ZodNativeEnum<
  typeof ListContactsResponseGender
> = z.nativeEnum(ListContactsResponseGender);

/** @internal */
export const ListContactsResponseGender$outboundSchema: z.ZodNativeEnum<
  typeof ListContactsResponseGender
> = ListContactsResponseGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseGender$ {
  /** @deprecated use `ListContactsResponseGender$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseGender$inboundSchema;
  /** @deprecated use `ListContactsResponseGender$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseGender$outboundSchema;
}

/** @internal */
export const ListContactsResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof ListContactsResponseDataType
> = z.nativeEnum(ListContactsResponseDataType);

/** @internal */
export const ListContactsResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof ListContactsResponseDataType
> = ListContactsResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseDataType$ {
  /** @deprecated use `ListContactsResponseDataType$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseDataType$inboundSchema;
  /** @deprecated use `ListContactsResponseDataType$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseDataType$outboundSchema;
}

/** @internal */
export const ListContactsResponseWebsites$inboundSchema: z.ZodType<
  ListContactsResponseWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ListContactsResponseDataType$inboundSchema).optional(),
});

/** @internal */
export type ListContactsResponseWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ListContactsResponseWebsites$outboundSchema: z.ZodType<
  ListContactsResponseWebsites$Outbound,
  z.ZodTypeDef,
  ListContactsResponseWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ListContactsResponseDataType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseWebsites$ {
  /** @deprecated use `ListContactsResponseWebsites$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseWebsites$inboundSchema;
  /** @deprecated use `ListContactsResponseWebsites$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseWebsites$outboundSchema;
  /** @deprecated use `ListContactsResponseWebsites$Outbound` instead. */
  export type Outbound = ListContactsResponseWebsites$Outbound;
}

export function listContactsResponseWebsitesToJSON(
  listContactsResponseWebsites: ListContactsResponseWebsites,
): string {
  return JSON.stringify(
    ListContactsResponseWebsites$outboundSchema.parse(
      listContactsResponseWebsites,
    ),
  );
}

export function listContactsResponseWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseWebsites' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseDataAddressesType$inboundSchema:
  z.ZodNativeEnum<typeof ListContactsResponseDataAddressesType> = z.nativeEnum(
    ListContactsResponseDataAddressesType,
  );

/** @internal */
export const ListContactsResponseDataAddressesType$outboundSchema:
  z.ZodNativeEnum<typeof ListContactsResponseDataAddressesType> =
    ListContactsResponseDataAddressesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseDataAddressesType$ {
  /** @deprecated use `ListContactsResponseDataAddressesType$inboundSchema` instead. */
  export const inboundSchema =
    ListContactsResponseDataAddressesType$inboundSchema;
  /** @deprecated use `ListContactsResponseDataAddressesType$outboundSchema` instead. */
  export const outboundSchema =
    ListContactsResponseDataAddressesType$outboundSchema;
}

/** @internal */
export const ListContactsResponseAddresses$inboundSchema: z.ZodType<
  ListContactsResponseAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListContactsResponseDataAddressesType$inboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ListContactsResponseAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ListContactsResponseAddresses$outboundSchema: z.ZodType<
  ListContactsResponseAddresses$Outbound,
  z.ZodTypeDef,
  ListContactsResponseAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ListContactsResponseDataAddressesType$outboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseAddresses$ {
  /** @deprecated use `ListContactsResponseAddresses$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseAddresses$inboundSchema;
  /** @deprecated use `ListContactsResponseAddresses$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseAddresses$outboundSchema;
  /** @deprecated use `ListContactsResponseAddresses$Outbound` instead. */
  export type Outbound = ListContactsResponseAddresses$Outbound;
}

export function listContactsResponseAddressesToJSON(
  listContactsResponseAddresses: ListContactsResponseAddresses,
): string {
  return JSON.stringify(
    ListContactsResponseAddresses$outboundSchema.parse(
      listContactsResponseAddresses,
    ),
  );
}

export function listContactsResponseAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseAddresses' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseSocialLinks$inboundSchema: z.ZodType<
  ListContactsResponseSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListContactsResponseSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ListContactsResponseSocialLinks$outboundSchema: z.ZodType<
  ListContactsResponseSocialLinks$Outbound,
  z.ZodTypeDef,
  ListContactsResponseSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseSocialLinks$ {
  /** @deprecated use `ListContactsResponseSocialLinks$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseSocialLinks$inboundSchema;
  /** @deprecated use `ListContactsResponseSocialLinks$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseSocialLinks$outboundSchema;
  /** @deprecated use `ListContactsResponseSocialLinks$Outbound` instead. */
  export type Outbound = ListContactsResponseSocialLinks$Outbound;
}

export function listContactsResponseSocialLinksToJSON(
  listContactsResponseSocialLinks: ListContactsResponseSocialLinks,
): string {
  return JSON.stringify(
    ListContactsResponseSocialLinks$outboundSchema.parse(
      listContactsResponseSocialLinks,
    ),
  );
}

export function listContactsResponseSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseSocialLinks' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseDataPhoneNumbersType$inboundSchema:
  z.ZodNativeEnum<typeof ListContactsResponseDataPhoneNumbersType> = z
    .nativeEnum(ListContactsResponseDataPhoneNumbersType);

/** @internal */
export const ListContactsResponseDataPhoneNumbersType$outboundSchema:
  z.ZodNativeEnum<typeof ListContactsResponseDataPhoneNumbersType> =
    ListContactsResponseDataPhoneNumbersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseDataPhoneNumbersType$ {
  /** @deprecated use `ListContactsResponseDataPhoneNumbersType$inboundSchema` instead. */
  export const inboundSchema =
    ListContactsResponseDataPhoneNumbersType$inboundSchema;
  /** @deprecated use `ListContactsResponseDataPhoneNumbersType$outboundSchema` instead. */
  export const outboundSchema =
    ListContactsResponseDataPhoneNumbersType$outboundSchema;
}

/** @internal */
export const ListContactsResponsePhoneNumbers$inboundSchema: z.ZodType<
  ListContactsResponsePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListContactsResponseDataPhoneNumbersType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ListContactsResponsePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ListContactsResponsePhoneNumbers$outboundSchema: z.ZodType<
  ListContactsResponsePhoneNumbers$Outbound,
  z.ZodTypeDef,
  ListContactsResponsePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ListContactsResponseDataPhoneNumbersType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponsePhoneNumbers$ {
  /** @deprecated use `ListContactsResponsePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponsePhoneNumbers$inboundSchema;
  /** @deprecated use `ListContactsResponsePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponsePhoneNumbers$outboundSchema;
  /** @deprecated use `ListContactsResponsePhoneNumbers$Outbound` instead. */
  export type Outbound = ListContactsResponsePhoneNumbers$Outbound;
}

export function listContactsResponsePhoneNumbersToJSON(
  listContactsResponsePhoneNumbers: ListContactsResponsePhoneNumbers,
): string {
  return JSON.stringify(
    ListContactsResponsePhoneNumbers$outboundSchema.parse(
      listContactsResponsePhoneNumbers,
    ),
  );
}

export function listContactsResponsePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponsePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponsePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponsePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseDataEmailsType$inboundSchema: z.ZodNativeEnum<
  typeof ListContactsResponseDataEmailsType
> = z.nativeEnum(ListContactsResponseDataEmailsType);

/** @internal */
export const ListContactsResponseDataEmailsType$outboundSchema: z.ZodNativeEnum<
  typeof ListContactsResponseDataEmailsType
> = ListContactsResponseDataEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseDataEmailsType$ {
  /** @deprecated use `ListContactsResponseDataEmailsType$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseDataEmailsType$inboundSchema;
  /** @deprecated use `ListContactsResponseDataEmailsType$outboundSchema` instead. */
  export const outboundSchema =
    ListContactsResponseDataEmailsType$outboundSchema;
}

/** @internal */
export const ListContactsResponseEmails$inboundSchema: z.ZodType<
  ListContactsResponseEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListContactsResponseDataEmailsType$inboundSchema).optional(),
});

/** @internal */
export type ListContactsResponseEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ListContactsResponseEmails$outboundSchema: z.ZodType<
  ListContactsResponseEmails$Outbound,
  z.ZodTypeDef,
  ListContactsResponseEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(ListContactsResponseDataEmailsType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseEmails$ {
  /** @deprecated use `ListContactsResponseEmails$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseEmails$inboundSchema;
  /** @deprecated use `ListContactsResponseEmails$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseEmails$outboundSchema;
  /** @deprecated use `ListContactsResponseEmails$Outbound` instead. */
  export type Outbound = ListContactsResponseEmails$Outbound;
}

export function listContactsResponseEmailsToJSON(
  listContactsResponseEmails: ListContactsResponseEmails,
): string {
  return JSON.stringify(
    ListContactsResponseEmails$outboundSchema.parse(listContactsResponseEmails),
  );
}

export function listContactsResponseEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseEmails' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseValue6$inboundSchema: z.ZodType<
  ListContactsResponseValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListContactsResponseValue6$Outbound = {};

/** @internal */
export const ListContactsResponseValue6$outboundSchema: z.ZodType<
  ListContactsResponseValue6$Outbound,
  z.ZodTypeDef,
  ListContactsResponseValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseValue6$ {
  /** @deprecated use `ListContactsResponseValue6$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseValue6$inboundSchema;
  /** @deprecated use `ListContactsResponseValue6$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseValue6$outboundSchema;
  /** @deprecated use `ListContactsResponseValue6$Outbound` instead. */
  export type Outbound = ListContactsResponseValue6$Outbound;
}

export function listContactsResponseValue6ToJSON(
  listContactsResponseValue6: ListContactsResponseValue6,
): string {
  return JSON.stringify(
    ListContactsResponseValue6$outboundSchema.parse(listContactsResponseValue6),
  );
}

export function listContactsResponseValue6FromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseValue6' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseValue4$inboundSchema: z.ZodType<
  ListContactsResponseValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListContactsResponseValue4$Outbound = {};

/** @internal */
export const ListContactsResponseValue4$outboundSchema: z.ZodType<
  ListContactsResponseValue4$Outbound,
  z.ZodTypeDef,
  ListContactsResponseValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseValue4$ {
  /** @deprecated use `ListContactsResponseValue4$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseValue4$inboundSchema;
  /** @deprecated use `ListContactsResponseValue4$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseValue4$outboundSchema;
  /** @deprecated use `ListContactsResponseValue4$Outbound` instead. */
  export type Outbound = ListContactsResponseValue4$Outbound;
}

export function listContactsResponseValue4ToJSON(
  listContactsResponseValue4: ListContactsResponseValue4,
): string {
  return JSON.stringify(
    ListContactsResponseValue4$outboundSchema.parse(listContactsResponseValue4),
  );
}

export function listContactsResponseValue4FromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseValue4' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseValue$inboundSchema: z.ZodType<
  ListContactsResponseValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListContactsResponseValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListContactsResponseValue6$inboundSchema)),
]);

/** @internal */
export type ListContactsResponseValue$Outbound =
  | ListContactsResponseValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ListContactsResponseValue6$Outbound>;

/** @internal */
export const ListContactsResponseValue$outboundSchema: z.ZodType<
  ListContactsResponseValue$Outbound,
  z.ZodTypeDef,
  ListContactsResponseValue
> = z.union([
  z.lazy(() => ListContactsResponseValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ListContactsResponseValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseValue$ {
  /** @deprecated use `ListContactsResponseValue$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseValue$inboundSchema;
  /** @deprecated use `ListContactsResponseValue$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseValue$outboundSchema;
  /** @deprecated use `ListContactsResponseValue$Outbound` instead. */
  export type Outbound = ListContactsResponseValue$Outbound;
}

export function listContactsResponseValueToJSON(
  listContactsResponseValue: ListContactsResponseValue,
): string {
  return JSON.stringify(
    ListContactsResponseValue$outboundSchema.parse(listContactsResponseValue),
  );
}

export function listContactsResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseValue' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseCustomFields$inboundSchema: z.ZodType<
  ListContactsResponseCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListContactsResponseValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListContactsResponseValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ListContactsResponseCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ListContactsResponseValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ListContactsResponseValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ListContactsResponseCustomFields$outboundSchema: z.ZodType<
  ListContactsResponseCustomFields$Outbound,
  z.ZodTypeDef,
  ListContactsResponseCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ListContactsResponseValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ListContactsResponseValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseCustomFields$ {
  /** @deprecated use `ListContactsResponseCustomFields$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseCustomFields$inboundSchema;
  /** @deprecated use `ListContactsResponseCustomFields$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseCustomFields$outboundSchema;
  /** @deprecated use `ListContactsResponseCustomFields$Outbound` instead. */
  export type Outbound = ListContactsResponseCustomFields$Outbound;
}

export function listContactsResponseCustomFieldsToJSON(
  listContactsResponseCustomFields: ListContactsResponseCustomFields,
): string {
  return JSON.stringify(
    ListContactsResponseCustomFields$outboundSchema.parse(
      listContactsResponseCustomFields,
    ),
  );
}

export function listContactsResponseCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseCustomFields' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseCustomMappings$inboundSchema: z.ZodType<
  ListContactsResponseCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListContactsResponseCustomMappings$Outbound = {};

/** @internal */
export const ListContactsResponseCustomMappings$outboundSchema: z.ZodType<
  ListContactsResponseCustomMappings$Outbound,
  z.ZodTypeDef,
  ListContactsResponseCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseCustomMappings$ {
  /** @deprecated use `ListContactsResponseCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseCustomMappings$inboundSchema;
  /** @deprecated use `ListContactsResponseCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    ListContactsResponseCustomMappings$outboundSchema;
  /** @deprecated use `ListContactsResponseCustomMappings$Outbound` instead. */
  export type Outbound = ListContactsResponseCustomMappings$Outbound;
}

export function listContactsResponseCustomMappingsToJSON(
  listContactsResponseCustomMappings: ListContactsResponseCustomMappings,
): string {
  return JSON.stringify(
    ListContactsResponseCustomMappings$outboundSchema.parse(
      listContactsResponseCustomMappings,
    ),
  );
}

export function listContactsResponseCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListContactsResponseCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseCustomMappings' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseExtendPaths$inboundSchema: z.ZodType<
  ListContactsResponseExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ListContactsResponseExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ListContactsResponseExtendPaths$outboundSchema: z.ZodType<
  ListContactsResponseExtendPaths$Outbound,
  z.ZodTypeDef,
  ListContactsResponseExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseExtendPaths$ {
  /** @deprecated use `ListContactsResponseExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseExtendPaths$inboundSchema;
  /** @deprecated use `ListContactsResponseExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseExtendPaths$outboundSchema;
  /** @deprecated use `ListContactsResponseExtendPaths$Outbound` instead. */
  export type Outbound = ListContactsResponseExtendPaths$Outbound;
}

export function listContactsResponseExtendPathsToJSON(
  listContactsResponseExtendPaths: ListContactsResponseExtendPaths,
): string {
  return JSON.stringify(
    ListContactsResponseExtendPaths$outboundSchema.parse(
      listContactsResponseExtendPaths,
    ),
  );
}

export function listContactsResponseExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseExtendPaths' from JSON`,
  );
}

/** @internal */
export const ListContactsResponsePassThrough$inboundSchema: z.ZodType<
  ListContactsResponsePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => ListContactsResponseExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ListContactsResponsePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ListContactsResponseExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ListContactsResponsePassThrough$outboundSchema: z.ZodType<
  ListContactsResponsePassThrough$Outbound,
  z.ZodTypeDef,
  ListContactsResponsePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => ListContactsResponseExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponsePassThrough$ {
  /** @deprecated use `ListContactsResponsePassThrough$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponsePassThrough$inboundSchema;
  /** @deprecated use `ListContactsResponsePassThrough$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponsePassThrough$outboundSchema;
  /** @deprecated use `ListContactsResponsePassThrough$Outbound` instead. */
  export type Outbound = ListContactsResponsePassThrough$Outbound;
}

export function listContactsResponsePassThroughToJSON(
  listContactsResponsePassThrough: ListContactsResponsePassThrough,
): string {
  return JSON.stringify(
    ListContactsResponsePassThrough$outboundSchema.parse(
      listContactsResponsePassThrough,
    ),
  );
}

export function listContactsResponsePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponsePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponsePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponsePassThrough' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseData$inboundSchema: z.ZodType<
  ListContactsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  type: z.nullable(ListContactsResponseType$inboundSchema).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(ListContactsResponseGender$inboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ListContactsResponseWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ListContactsResponseAddresses$inboundSchema))
    .optional(),
  social_links: z.array(
    z.lazy(() => ListContactsResponseSocialLinks$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => ListContactsResponsePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => ListContactsResponseEmails$inboundSchema))
    .optional(),
  email_domain: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => ListContactsResponseCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  first_call_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  first_email_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_activity_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ListContactsResponseCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  opportunity_ids: z.array(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => ListContactsResponsePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "company_id": "companyId",
    "company_name": "companyName",
    "lead_id": "leadId",
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "photo_url": "photoUrl",
    "lead_source": "leadSource",
    "current_balance": "currentBalance",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "email_domain": "emailDomain",
    "custom_fields": "customFields",
    "first_call_at": "firstCallAt",
    "first_email_at": "firstEmailAt",
    "last_activity_at": "lastActivityAt",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "opportunity_ids": "opportunityIds",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ListContactsResponseData$Outbound = {
  id?: string | undefined;
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<ListContactsResponseWebsites$Outbound> | undefined;
  addresses?: Array<ListContactsResponseAddresses$Outbound> | undefined;
  social_links?: Array<ListContactsResponseSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<ListContactsResponsePhoneNumbers$Outbound> | undefined;
  emails?: Array<ListContactsResponseEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<ListContactsResponseCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  first_call_at?: string | null | undefined;
  first_email_at?: string | null | undefined;
  last_activity_at?: string | null | undefined;
  custom_mappings?:
    | ListContactsResponseCustomMappings$Outbound
    | null
    | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<ListContactsResponsePassThrough$Outbound> | undefined;
};

/** @internal */
export const ListContactsResponseData$outboundSchema: z.ZodType<
  ListContactsResponseData$Outbound,
  z.ZodTypeDef,
  ListContactsResponseData
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(ListContactsResponseType$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(ListContactsResponseGender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ListContactsResponseWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ListContactsResponseAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(
    z.lazy(() => ListContactsResponseSocialLinks$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => ListContactsResponsePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => ListContactsResponseEmails$outboundSchema))
    .optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => ListContactsResponseCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  firstCallAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  firstEmailAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => ListContactsResponseCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => ListContactsResponsePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    firstCallAt: "first_call_at",
    firstEmailAt: "first_email_at",
    lastActivityAt: "last_activity_at",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseData$ {
  /** @deprecated use `ListContactsResponseData$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseData$inboundSchema;
  /** @deprecated use `ListContactsResponseData$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseData$outboundSchema;
  /** @deprecated use `ListContactsResponseData$Outbound` instead. */
  export type Outbound = ListContactsResponseData$Outbound;
}

export function listContactsResponseDataToJSON(
  listContactsResponseData: ListContactsResponseData,
): string {
  return JSON.stringify(
    ListContactsResponseData$outboundSchema.parse(listContactsResponseData),
  );
}

export function listContactsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseData' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseCursors$inboundSchema: z.ZodType<
  ListContactsResponseCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListContactsResponseCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListContactsResponseCursors$outboundSchema: z.ZodType<
  ListContactsResponseCursors$Outbound,
  z.ZodTypeDef,
  ListContactsResponseCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseCursors$ {
  /** @deprecated use `ListContactsResponseCursors$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseCursors$inboundSchema;
  /** @deprecated use `ListContactsResponseCursors$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseCursors$outboundSchema;
  /** @deprecated use `ListContactsResponseCursors$Outbound` instead. */
  export type Outbound = ListContactsResponseCursors$Outbound;
}

export function listContactsResponseCursorsToJSON(
  listContactsResponseCursors: ListContactsResponseCursors,
): string {
  return JSON.stringify(
    ListContactsResponseCursors$outboundSchema.parse(
      listContactsResponseCursors,
    ),
  );
}

export function listContactsResponseCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseCursors' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseMeta$inboundSchema: z.ZodType<
  ListContactsResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ListContactsResponseCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ListContactsResponseMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ListContactsResponseCursors$Outbound | undefined;
};

/** @internal */
export const ListContactsResponseMeta$outboundSchema: z.ZodType<
  ListContactsResponseMeta$Outbound,
  z.ZodTypeDef,
  ListContactsResponseMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ListContactsResponseCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseMeta$ {
  /** @deprecated use `ListContactsResponseMeta$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseMeta$inboundSchema;
  /** @deprecated use `ListContactsResponseMeta$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseMeta$outboundSchema;
  /** @deprecated use `ListContactsResponseMeta$Outbound` instead. */
  export type Outbound = ListContactsResponseMeta$Outbound;
}

export function listContactsResponseMetaToJSON(
  listContactsResponseMeta: ListContactsResponseMeta,
): string {
  return JSON.stringify(
    ListContactsResponseMeta$outboundSchema.parse(listContactsResponseMeta),
  );
}

export function listContactsResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseMeta' from JSON`,
  );
}

/** @internal */
export const ListContactsResponseLinks$inboundSchema: z.ZodType<
  ListContactsResponseLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListContactsResponseLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ListContactsResponseLinks$outboundSchema: z.ZodType<
  ListContactsResponseLinks$Outbound,
  z.ZodTypeDef,
  ListContactsResponseLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponseLinks$ {
  /** @deprecated use `ListContactsResponseLinks$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponseLinks$inboundSchema;
  /** @deprecated use `ListContactsResponseLinks$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponseLinks$outboundSchema;
  /** @deprecated use `ListContactsResponseLinks$Outbound` instead. */
  export type Outbound = ListContactsResponseLinks$Outbound;
}

export function listContactsResponseLinksToJSON(
  listContactsResponseLinks: ListContactsResponseLinks,
): string {
  return JSON.stringify(
    ListContactsResponseLinks$outboundSchema.parse(listContactsResponseLinks),
  );
}

export function listContactsResponseLinksFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponseLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponseLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponseLinks' from JSON`,
  );
}

/** @internal */
export const ListContactsResponse$inboundSchema: z.ZodType<
  ListContactsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListContactsResponseData$inboundSchema)),
  meta: z.lazy(() => ListContactsResponseMeta$inboundSchema).optional(),
  links: z.lazy(() => ListContactsResponseLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ListContactsResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ListContactsResponseData$Outbound>;
  meta?: ListContactsResponseMeta$Outbound | undefined;
  links?: ListContactsResponseLinks$Outbound | undefined;
};

/** @internal */
export const ListContactsResponse$outboundSchema: z.ZodType<
  ListContactsResponse$Outbound,
  z.ZodTypeDef,
  ListContactsResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ListContactsResponseData$outboundSchema)),
  meta: z.lazy(() => ListContactsResponseMeta$outboundSchema).optional(),
  links: z.lazy(() => ListContactsResponseLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactsResponse$ {
  /** @deprecated use `ListContactsResponse$inboundSchema` instead. */
  export const inboundSchema = ListContactsResponse$inboundSchema;
  /** @deprecated use `ListContactsResponse$outboundSchema` instead. */
  export const outboundSchema = ListContactsResponse$outboundSchema;
  /** @deprecated use `ListContactsResponse$Outbound` instead. */
  export type Outbound = ListContactsResponse$Outbound;
}

export function listContactsResponseToJSON(
  listContactsResponse: ListContactsResponse,
): string {
  return JSON.stringify(
    ListContactsResponse$outboundSchema.parse(listContactsResponse),
  );
}

export function listContactsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListContactsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListContactsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListContactsResponse' from JSON`,
  );
}
