/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the updated details of the activity record in the CRM. It encapsulates all the fields that were modified during the PATCH request, providing a comprehensive view of the current state of the activity. This ensures that developers can verify the changes made to the activity record.
 */
export type UpdateActivityResponseUnifiedId = {
  /**
   * The unique identifier of the activity record that was updated. This ID is crucial for confirming the specific resource that has been modified, allowing developers to track and reference the updated activity within the CRM system.
   */
  id: string;
};

/**
 * Activity updated
 */
export type UpdateActivityResponse = {
  /**
   * The HTTP response status code returned by the server, indicating the result of the PATCH request. A status code of 200 signifies that the activity record was successfully updated. This code is essential for error handling and understanding the outcome of the operation.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful request. This provides a human-readable confirmation of the operation's result, complementing the numeric status code.
   */
  status: string;
  /**
   * The unique Apideck identifier for the service provider associated with the updated activity. This ID helps in identifying which service integration was used in the operation, ensuring accurate tracking and management of service-specific activities.
   */
  service: string;
  /**
   * The name of the Unified API resource that was affected by the operation, in this case, an activity. This helps developers understand which type of resource was updated, facilitating better integration and data handling.
   */
  resource: string;
  /**
   * The specific operation performed on the resource, typically 'update' for this PATCH request. This indicates the action taken on the activity record, providing clarity on the nature of the modification made.
   */
  operation: string;
  /**
   * This object contains the updated details of the activity record in the CRM. It encapsulates all the fields that were modified during the PATCH request, providing a comprehensive view of the current state of the activity. This ensures that developers can verify the changes made to the activity record.
   */
  data: UpdateActivityResponseUnifiedId;
};

/** @internal */
export const UpdateActivityResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateActivityResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateActivityResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateActivityResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateActivityResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateActivityResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityResponseUnifiedId$ {
  /** @deprecated use `UpdateActivityResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateActivityResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateActivityResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateActivityResponseUnifiedId$Outbound;
}

export function updateActivityResponseUnifiedIdToJSON(
  updateActivityResponseUnifiedId: UpdateActivityResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateActivityResponseUnifiedId$outboundSchema.parse(
      updateActivityResponseUnifiedId,
    ),
  );
}

export function updateActivityResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateActivityResponse$inboundSchema: z.ZodType<
  UpdateActivityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateActivityResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateActivityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateActivityResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateActivityResponse$outboundSchema: z.ZodType<
  UpdateActivityResponse$Outbound,
  z.ZodTypeDef,
  UpdateActivityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateActivityResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityResponse$ {
  /** @deprecated use `UpdateActivityResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityResponse$inboundSchema;
  /** @deprecated use `UpdateActivityResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityResponse$outboundSchema;
  /** @deprecated use `UpdateActivityResponse$Outbound` instead. */
  export type Outbound = UpdateActivityResponse$Outbound;
}

export function updateActivityResponseToJSON(
  updateActivityResponse: UpdateActivityResponse,
): string {
  return JSON.stringify(
    UpdateActivityResponse$outboundSchema.parse(updateActivityResponse),
  );
}

export function updateActivityResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityResponse' from JSON`,
  );
}
