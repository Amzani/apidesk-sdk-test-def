/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * This object contains the details of the activity record that was updated. It includes all relevant information about the activity, ensuring that developers can verify the changes made. The structure of this object aligns with the CRM's activity schema, providing a comprehensive view of the updated resource.
 */
export type UpdateActivityResponseUnifiedId = {
  /**
   * The unique identifier of the activity record that was updated. This string value confirms the specific resource that has been modified, allowing developers to reference or further manipulate this particular activity within the CRM system. It is essential for tracking and auditing purposes.
   */
  id: string;
};

/**
 * Activity updated
 */
export type UpdateActivityResponse = {
  /**
   * The HTTP response status code indicating the result of the update operation. A value of 200 signifies that the activity record was successfully updated. This integer value helps developers quickly assess the outcome of their API request.
   */
  statusCode: number;
  /**
   * A textual representation of the HTTP response status, such as 'OK' for a successful update. This string provides a human-readable confirmation of the operation's result, complementing the status code.
   */
  status: string;
  /**
   * The Apideck ID of the service provider that processed the update request. This string identifies which service within the Apideck ecosystem handled the operation, useful for tracking and debugging purposes.
   */
  service: string;
  /**
   * The name of the unified API resource that was updated, such as 'activity'. This string helps developers understand which type of resource was affected by the operation, ensuring clarity in multi-resource environments.
   */
  resource: string;
  /**
   * The specific operation performed, in this case, 'update'. This string confirms the type of action executed on the resource, providing context within the broader API interaction.
   */
  operation: string;
  /**
   * This object contains the details of the activity record that was updated. It includes all relevant information about the activity, ensuring that developers can verify the changes made. The structure of this object aligns with the CRM's activity schema, providing a comprehensive view of the updated resource.
   */
  data: UpdateActivityResponseUnifiedId;
};

/** @internal */
export const UpdateActivityResponseUnifiedId$inboundSchema: z.ZodType<
  UpdateActivityResponseUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateActivityResponseUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UpdateActivityResponseUnifiedId$outboundSchema: z.ZodType<
  UpdateActivityResponseUnifiedId$Outbound,
  z.ZodTypeDef,
  UpdateActivityResponseUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityResponseUnifiedId$ {
  /** @deprecated use `UpdateActivityResponseUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityResponseUnifiedId$inboundSchema;
  /** @deprecated use `UpdateActivityResponseUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityResponseUnifiedId$outboundSchema;
  /** @deprecated use `UpdateActivityResponseUnifiedId$Outbound` instead. */
  export type Outbound = UpdateActivityResponseUnifiedId$Outbound;
}

export function updateActivityResponseUnifiedIdToJSON(
  updateActivityResponseUnifiedId: UpdateActivityResponseUnifiedId,
): string {
  return JSON.stringify(
    UpdateActivityResponseUnifiedId$outboundSchema.parse(
      updateActivityResponseUnifiedId,
    ),
  );
}

export function updateActivityResponseUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityResponseUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityResponseUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityResponseUnifiedId' from JSON`,
  );
}

/** @internal */
export const UpdateActivityResponse$inboundSchema: z.ZodType<
  UpdateActivityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateActivityResponseUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UpdateActivityResponse$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UpdateActivityResponseUnifiedId$Outbound;
};

/** @internal */
export const UpdateActivityResponse$outboundSchema: z.ZodType<
  UpdateActivityResponse$Outbound,
  z.ZodTypeDef,
  UpdateActivityResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UpdateActivityResponseUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateActivityResponse$ {
  /** @deprecated use `UpdateActivityResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateActivityResponse$inboundSchema;
  /** @deprecated use `UpdateActivityResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateActivityResponse$outboundSchema;
  /** @deprecated use `UpdateActivityResponse$Outbound` instead. */
  export type Outbound = UpdateActivityResponse$Outbound;
}

export function updateActivityResponseToJSON(
  updateActivityResponse: UpdateActivityResponse,
): string {
  return JSON.stringify(
    UpdateActivityResponse$outboundSchema.parse(updateActivityResponse),
  );
}

export function updateActivityResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateActivityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateActivityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateActivityResponse' from JSON`,
  );
}
