/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail =
  | string
  | { [k: string]: any };

/**
 * Unprocessable
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * Unprocessable
 */
export class HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$:
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBodyData;

  constructor(
    err:
      HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name =
      "HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail =
  | string
  | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * The specified resource was not found
 */
export class HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$:
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBodyData;

  constructor(
    err:
      HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name =
      "HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * Payment Required
 */
export class HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBodyData;

  constructor(
    err: HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name =
      "HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBodyData;

  constructor(
    err: HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeeSchedulesAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisEmployeeSchedulesAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisEmployeeSchedulesAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeeSchedulesAllResponseBodyData;

  constructor(err: HrisEmployeeSchedulesAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeeSchedulesAllResponseBody";
  }
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$inboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$outboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$Outbound;
}

export function hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422DetailToJSON(
  hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail:
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$outboundSchema
      .parse(hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail),
  );
}

export function hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody
  > = z.instanceof(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$inboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$outboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$Outbound;
}

export function hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetailToJSON(
  hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail:
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$outboundSchema
      .parse(hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail),
  );
}

export function hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody
  > = z.instanceof(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody
  > = z.instanceof(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$inboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$outboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$Outbound,
    z.ZodTypeDef,
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$Outbound` instead. */
  export type Outbound =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$Outbound;
}

export function hrisEmployeeSchedulesAllHrisEmployeeSchedulesDetailToJSON(
  hrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail:
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$outboundSchema.parse(
      hrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail,
    ),
  );
}

export function hrisEmployeeSchedulesAllHrisEmployeeSchedulesDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeeSchedulesAllHrisEmployeeSchedulesDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody
  > = z.instanceof(HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeeSchedulesAllDetail$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeeSchedulesAllDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeeSchedulesAllDetail$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllDetail$ {
  /** @deprecated use `HrisEmployeeSchedulesAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllDetail$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllDetail$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllDetail$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllDetail$Outbound;
}

export function hrisEmployeeSchedulesAllDetailToJSON(
  hrisEmployeeSchedulesAllDetail: HrisEmployeeSchedulesAllDetail,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllDetail$outboundSchema.parse(
      hrisEmployeeSchedulesAllDetail,
    ),
  );
}

export function hrisEmployeeSchedulesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllResponseBody$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisEmployeeSchedulesAllResponseBody(remapped);
  });

/** @internal */
export type HrisEmployeeSchedulesAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeeSchedulesAllResponseBody$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllResponseBody
> = z.instanceof(HrisEmployeeSchedulesAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllResponseBody$ {
  /** @deprecated use `HrisEmployeeSchedulesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllResponseBody$Outbound;
}
