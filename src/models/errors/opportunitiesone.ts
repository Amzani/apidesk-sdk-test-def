/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesOneOpportunitiesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type OpportunitiesOneOpportunitiesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class OpportunitiesOneOpportunitiesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesOneOpportunitiesResponse422ResponseBodyData;

  constructor(err: OpportunitiesOneOpportunitiesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesOneOpportunitiesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesOneOpportunitiesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type OpportunitiesOneOpportunitiesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class OpportunitiesOneOpportunitiesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesOneOpportunitiesResponse404ResponseBodyData;

  constructor(err: OpportunitiesOneOpportunitiesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesOneOpportunitiesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type OpportunitiesOneOpportunitiesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class OpportunitiesOneOpportunitiesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesOneOpportunitiesResponseResponseBodyData;

  constructor(err: OpportunitiesOneOpportunitiesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesOneOpportunitiesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesOneOpportunitiesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type OpportunitiesOneOpportunitiesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class OpportunitiesOneOpportunitiesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesOneOpportunitiesResponseBodyData;

  constructor(err: OpportunitiesOneOpportunitiesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesOneOpportunitiesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type OpportunitiesOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class OpportunitiesOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesOneResponseBodyData;

  constructor(err: OpportunitiesOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesOneResponseBody";
  }
}

/** @internal */
export const OpportunitiesOneOpportunitiesResponse422Detail$inboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesOneOpportunitiesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesOneOpportunitiesResponse422Detail$outboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponse422Detail$Outbound,
    z.ZodTypeDef,
    OpportunitiesOneOpportunitiesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneOpportunitiesResponse422Detail$ {
  /** @deprecated use `OpportunitiesOneOpportunitiesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesOneOpportunitiesResponse422Detail$inboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesOneOpportunitiesResponse422Detail$outboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponse422Detail$Outbound` instead. */
  export type Outbound =
    OpportunitiesOneOpportunitiesResponse422Detail$Outbound;
}

export function opportunitiesOneOpportunitiesResponse422DetailToJSON(
  opportunitiesOneOpportunitiesResponse422Detail:
    OpportunitiesOneOpportunitiesResponse422Detail,
): string {
  return JSON.stringify(
    OpportunitiesOneOpportunitiesResponse422Detail$outboundSchema.parse(
      opportunitiesOneOpportunitiesResponse422Detail,
    ),
  );
}

export function opportunitiesOneOpportunitiesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesOneOpportunitiesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesOneOpportunitiesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesOneOpportunitiesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneOpportunitiesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesOneOpportunitiesResponse422ResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesOneOpportunitiesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesOneOpportunitiesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesOneOpportunitiesResponse422ResponseBody
  > = z.instanceof(OpportunitiesOneOpportunitiesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneOpportunitiesResponse422ResponseBody$ {
  /** @deprecated use `OpportunitiesOneOpportunitiesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesOneOpportunitiesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesOneOpportunitiesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesOneOpportunitiesResponse422ResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesOneOpportunitiesResponseDetail$inboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesOneOpportunitiesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesOneOpportunitiesResponseDetail$outboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponseDetail$Outbound,
    z.ZodTypeDef,
    OpportunitiesOneOpportunitiesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneOpportunitiesResponseDetail$ {
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesOneOpportunitiesResponseDetail$inboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesOneOpportunitiesResponseDetail$outboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseDetail$Outbound` instead. */
  export type Outbound = OpportunitiesOneOpportunitiesResponseDetail$Outbound;
}

export function opportunitiesOneOpportunitiesResponseDetailToJSON(
  opportunitiesOneOpportunitiesResponseDetail:
    OpportunitiesOneOpportunitiesResponseDetail,
): string {
  return JSON.stringify(
    OpportunitiesOneOpportunitiesResponseDetail$outboundSchema.parse(
      opportunitiesOneOpportunitiesResponseDetail,
    ),
  );
}

export function opportunitiesOneOpportunitiesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesOneOpportunitiesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesOneOpportunitiesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesOneOpportunitiesResponseDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneOpportunitiesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesOneOpportunitiesResponse404ResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesOneOpportunitiesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesOneOpportunitiesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesOneOpportunitiesResponse404ResponseBody
  > = z.instanceof(OpportunitiesOneOpportunitiesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneOpportunitiesResponse404ResponseBody$ {
  /** @deprecated use `OpportunitiesOneOpportunitiesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesOneOpportunitiesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesOneOpportunitiesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesOneOpportunitiesResponse404ResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesOneOpportunitiesResponseResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesOneOpportunitiesResponseResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesOneOpportunitiesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesOneOpportunitiesResponseResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesOneOpportunitiesResponseResponseBody
  > = z.instanceof(OpportunitiesOneOpportunitiesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneOpportunitiesResponseResponseBody$ {
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesOneOpportunitiesResponseResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesOneOpportunitiesResponseResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesOneOpportunitiesResponseResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesOneOpportunitiesDetail$inboundSchema: z.ZodType<
  OpportunitiesOneOpportunitiesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesOneOpportunitiesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesOneOpportunitiesDetail$outboundSchema: z.ZodType<
  OpportunitiesOneOpportunitiesDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneOpportunitiesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneOpportunitiesDetail$ {
  /** @deprecated use `OpportunitiesOneOpportunitiesDetail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesOneOpportunitiesDetail$inboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesDetail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesOneOpportunitiesDetail$outboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesDetail$Outbound` instead. */
  export type Outbound = OpportunitiesOneOpportunitiesDetail$Outbound;
}

export function opportunitiesOneOpportunitiesDetailToJSON(
  opportunitiesOneOpportunitiesDetail: OpportunitiesOneOpportunitiesDetail,
): string {
  return JSON.stringify(
    OpportunitiesOneOpportunitiesDetail$outboundSchema.parse(
      opportunitiesOneOpportunitiesDetail,
    ),
  );
}

export function opportunitiesOneOpportunitiesDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneOpportunitiesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesOneOpportunitiesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneOpportunitiesDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneOpportunitiesResponseBody$inboundSchema: z.ZodType<
  OpportunitiesOneOpportunitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new OpportunitiesOneOpportunitiesResponseBody(remapped);
  });

/** @internal */
export type OpportunitiesOneOpportunitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesOneOpportunitiesResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesOneOpportunitiesResponseBody
  > = z.instanceof(OpportunitiesOneOpportunitiesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneOpportunitiesResponseBody$ {
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesOneOpportunitiesResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesOneOpportunitiesResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesOneOpportunitiesResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesOneDetail$inboundSchema: z.ZodType<
  OpportunitiesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const OpportunitiesOneDetail$outboundSchema: z.ZodType<
  OpportunitiesOneDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneDetail$ {
  /** @deprecated use `OpportunitiesOneDetail$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneDetail$inboundSchema;
  /** @deprecated use `OpportunitiesOneDetail$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneDetail$outboundSchema;
  /** @deprecated use `OpportunitiesOneDetail$Outbound` instead. */
  export type Outbound = OpportunitiesOneDetail$Outbound;
}

export function opportunitiesOneDetailToJSON(
  opportunitiesOneDetail: OpportunitiesOneDetail,
): string {
  return JSON.stringify(
    OpportunitiesOneDetail$outboundSchema.parse(opportunitiesOneDetail),
  );
}

export function opportunitiesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneResponseBody$inboundSchema: z.ZodType<
  OpportunitiesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new OpportunitiesOneResponseBody(remapped);
  });

/** @internal */
export type OpportunitiesOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesOneResponseBody$outboundSchema: z.ZodType<
  OpportunitiesOneResponseBody$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneResponseBody
> = z.instanceof(OpportunitiesOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneResponseBody$ {
  /** @deprecated use `OpportunitiesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesOneResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesOneResponseBody$Outbound;
}
