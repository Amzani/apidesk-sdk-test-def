/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesAddOpportunitiesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type OpportunitiesAddOpportunitiesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class OpportunitiesAddOpportunitiesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesAddOpportunitiesResponse422ResponseBodyData;

  constructor(err: OpportunitiesAddOpportunitiesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesAddOpportunitiesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesAddOpportunitiesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type OpportunitiesAddOpportunitiesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class OpportunitiesAddOpportunitiesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesAddOpportunitiesResponse404ResponseBodyData;

  constructor(err: OpportunitiesAddOpportunitiesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesAddOpportunitiesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type OpportunitiesAddOpportunitiesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class OpportunitiesAddOpportunitiesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesAddOpportunitiesResponseResponseBodyData;

  constructor(err: OpportunitiesAddOpportunitiesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesAddOpportunitiesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesAddOpportunitiesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type OpportunitiesAddOpportunitiesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class OpportunitiesAddOpportunitiesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesAddOpportunitiesResponseBodyData;

  constructor(err: OpportunitiesAddOpportunitiesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesAddOpportunitiesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesAddDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type OpportunitiesAddResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class OpportunitiesAddResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesAddResponseBodyData;

  constructor(err: OpportunitiesAddResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesAddResponseBody";
  }
}

/** @internal */
export const OpportunitiesAddOpportunitiesResponse422Detail$inboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesAddOpportunitiesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesAddOpportunitiesResponse422Detail$outboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponse422Detail$Outbound,
    z.ZodTypeDef,
    OpportunitiesAddOpportunitiesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddOpportunitiesResponse422Detail$ {
  /** @deprecated use `OpportunitiesAddOpportunitiesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAddOpportunitiesResponse422Detail$inboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAddOpportunitiesResponse422Detail$outboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponse422Detail$Outbound` instead. */
  export type Outbound =
    OpportunitiesAddOpportunitiesResponse422Detail$Outbound;
}

export function opportunitiesAddOpportunitiesResponse422DetailToJSON(
  opportunitiesAddOpportunitiesResponse422Detail:
    OpportunitiesAddOpportunitiesResponse422Detail,
): string {
  return JSON.stringify(
    OpportunitiesAddOpportunitiesResponse422Detail$outboundSchema.parse(
      opportunitiesAddOpportunitiesResponse422Detail,
    ),
  );
}

export function opportunitiesAddOpportunitiesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesAddOpportunitiesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesAddOpportunitiesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesAddOpportunitiesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddOpportunitiesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesAddOpportunitiesResponse422ResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesAddOpportunitiesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAddOpportunitiesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesAddOpportunitiesResponse422ResponseBody
  > = z.instanceof(OpportunitiesAddOpportunitiesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddOpportunitiesResponse422ResponseBody$ {
  /** @deprecated use `OpportunitiesAddOpportunitiesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAddOpportunitiesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAddOpportunitiesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesAddOpportunitiesResponse422ResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesAddOpportunitiesResponseDetail$inboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesAddOpportunitiesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesAddOpportunitiesResponseDetail$outboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponseDetail$Outbound,
    z.ZodTypeDef,
    OpportunitiesAddOpportunitiesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddOpportunitiesResponseDetail$ {
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAddOpportunitiesResponseDetail$inboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAddOpportunitiesResponseDetail$outboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseDetail$Outbound` instead. */
  export type Outbound = OpportunitiesAddOpportunitiesResponseDetail$Outbound;
}

export function opportunitiesAddOpportunitiesResponseDetailToJSON(
  opportunitiesAddOpportunitiesResponseDetail:
    OpportunitiesAddOpportunitiesResponseDetail,
): string {
  return JSON.stringify(
    OpportunitiesAddOpportunitiesResponseDetail$outboundSchema.parse(
      opportunitiesAddOpportunitiesResponseDetail,
    ),
  );
}

export function opportunitiesAddOpportunitiesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesAddOpportunitiesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesAddOpportunitiesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesAddOpportunitiesResponseDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddOpportunitiesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesAddOpportunitiesResponse404ResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesAddOpportunitiesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAddOpportunitiesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesAddOpportunitiesResponse404ResponseBody
  > = z.instanceof(OpportunitiesAddOpportunitiesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddOpportunitiesResponse404ResponseBody$ {
  /** @deprecated use `OpportunitiesAddOpportunitiesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAddOpportunitiesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAddOpportunitiesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesAddOpportunitiesResponse404ResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesAddOpportunitiesResponseResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesAddOpportunitiesResponseResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesAddOpportunitiesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAddOpportunitiesResponseResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesAddOpportunitiesResponseResponseBody
  > = z.instanceof(OpportunitiesAddOpportunitiesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddOpportunitiesResponseResponseBody$ {
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAddOpportunitiesResponseResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAddOpportunitiesResponseResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesAddOpportunitiesResponseResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesAddOpportunitiesDetail$inboundSchema: z.ZodType<
  OpportunitiesAddOpportunitiesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesAddOpportunitiesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesAddOpportunitiesDetail$outboundSchema: z.ZodType<
  OpportunitiesAddOpportunitiesDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddOpportunitiesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddOpportunitiesDetail$ {
  /** @deprecated use `OpportunitiesAddOpportunitiesDetail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAddOpportunitiesDetail$inboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesDetail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAddOpportunitiesDetail$outboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesDetail$Outbound` instead. */
  export type Outbound = OpportunitiesAddOpportunitiesDetail$Outbound;
}

export function opportunitiesAddOpportunitiesDetailToJSON(
  opportunitiesAddOpportunitiesDetail: OpportunitiesAddOpportunitiesDetail,
): string {
  return JSON.stringify(
    OpportunitiesAddOpportunitiesDetail$outboundSchema.parse(
      opportunitiesAddOpportunitiesDetail,
    ),
  );
}

export function opportunitiesAddOpportunitiesDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddOpportunitiesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesAddOpportunitiesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddOpportunitiesDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddOpportunitiesResponseBody$inboundSchema: z.ZodType<
  OpportunitiesAddOpportunitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new OpportunitiesAddOpportunitiesResponseBody(remapped);
  });

/** @internal */
export type OpportunitiesAddOpportunitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAddOpportunitiesResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesAddOpportunitiesResponseBody
  > = z.instanceof(OpportunitiesAddOpportunitiesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddOpportunitiesResponseBody$ {
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAddOpportunitiesResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAddOpportunitiesResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesAddOpportunitiesResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesAddDetail$inboundSchema: z.ZodType<
  OpportunitiesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const OpportunitiesAddDetail$outboundSchema: z.ZodType<
  OpportunitiesAddDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddDetail$ {
  /** @deprecated use `OpportunitiesAddDetail$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddDetail$inboundSchema;
  /** @deprecated use `OpportunitiesAddDetail$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddDetail$outboundSchema;
  /** @deprecated use `OpportunitiesAddDetail$Outbound` instead. */
  export type Outbound = OpportunitiesAddDetail$Outbound;
}

export function opportunitiesAddDetailToJSON(
  opportunitiesAddDetail: OpportunitiesAddDetail,
): string {
  return JSON.stringify(
    OpportunitiesAddDetail$outboundSchema.parse(opportunitiesAddDetail),
  );
}

export function opportunitiesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddResponseBody$inboundSchema: z.ZodType<
  OpportunitiesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new OpportunitiesAddResponseBody(remapped);
  });

/** @internal */
export type OpportunitiesAddResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAddResponseBody$outboundSchema: z.ZodType<
  OpportunitiesAddResponseBody$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddResponseBody
> = z.instanceof(OpportunitiesAddResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddResponseBody$ {
  /** @deprecated use `OpportunitiesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAddResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesAddResponseBody$Outbound;
}
