/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesAddHrisEmployeesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisEmployeesAddHrisEmployeesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unprocessable
 */
export class HrisEmployeesAddHrisEmployeesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesAddHrisEmployeesResponse422ResponseBodyData;

  constructor(err: HrisEmployeesAddHrisEmployeesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeesAddHrisEmployeesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesAddHrisEmployeesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisEmployeesAddHrisEmployeesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * The specified resource was not found
 */
export class HrisEmployeesAddHrisEmployeesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesAddHrisEmployeesResponse404ResponseBodyData;

  constructor(err: HrisEmployeesAddHrisEmployeesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeesAddHrisEmployeesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisEmployeesAddHrisEmployeesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Payment Required
 */
export class HrisEmployeesAddHrisEmployeesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesAddHrisEmployeesResponseResponseBodyData;

  constructor(err: HrisEmployeesAddHrisEmployeesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeesAddHrisEmployeesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesAddHrisEmployeesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type HrisEmployeesAddHrisEmployeesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisEmployeesAddHrisEmployeesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesAddHrisEmployeesResponseBodyData;

  constructor(err: HrisEmployeesAddHrisEmployeesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeesAddHrisEmployeesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesAddDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisEmployeesAddResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisEmployeesAddResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesAddResponseBodyData;

  constructor(err: HrisEmployeesAddResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeesAddResponseBody";
  }
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponse422Detail$inboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesAddHrisEmployeesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponse422Detail$outboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAddHrisEmployeesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesResponse422Detail$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAddHrisEmployeesResponse422Detail$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesResponse422Detail$outboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisEmployeesAddHrisEmployeesResponse422Detail$Outbound;
}

export function hrisEmployeesAddHrisEmployeesResponse422DetailToJSON(
  hrisEmployeesAddHrisEmployeesResponse422Detail:
    HrisEmployeesAddHrisEmployeesResponse422Detail,
): string {
  return JSON.stringify(
    HrisEmployeesAddHrisEmployeesResponse422Detail$outboundSchema.parse(
      hrisEmployeesAddHrisEmployeesResponse422Detail,
    ),
  );
}

export function hrisEmployeesAddHrisEmployeesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesAddHrisEmployeesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesAddHrisEmployeesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesAddHrisEmployeesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeesAddHrisEmployeesResponse422ResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesAddHrisEmployeesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAddHrisEmployeesResponse422ResponseBody
  > = z.instanceof(HrisEmployeesAddHrisEmployeesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesResponse422ResponseBody$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAddHrisEmployeesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesAddHrisEmployeesResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponseDetail$inboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesAddHrisEmployeesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponseDetail$outboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAddHrisEmployeesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesResponseDetail$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAddHrisEmployeesResponseDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesResponseDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesAddHrisEmployeesResponseDetail$Outbound;
}

export function hrisEmployeesAddHrisEmployeesResponseDetailToJSON(
  hrisEmployeesAddHrisEmployeesResponseDetail:
    HrisEmployeesAddHrisEmployeesResponseDetail,
): string {
  return JSON.stringify(
    HrisEmployeesAddHrisEmployeesResponseDetail$outboundSchema.parse(
      hrisEmployeesAddHrisEmployeesResponseDetail,
    ),
  );
}

export function hrisEmployeesAddHrisEmployeesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesAddHrisEmployeesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesAddHrisEmployeesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesAddHrisEmployeesResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeesAddHrisEmployeesResponse404ResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesAddHrisEmployeesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAddHrisEmployeesResponse404ResponseBody
  > = z.instanceof(HrisEmployeesAddHrisEmployeesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesResponse404ResponseBody$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAddHrisEmployeesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesAddHrisEmployeesResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeesAddHrisEmployeesResponseResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesAddHrisEmployeesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAddHrisEmployeesResponseResponseBody
  > = z.instanceof(HrisEmployeesAddHrisEmployeesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesResponseResponseBody$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAddHrisEmployeesResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesAddHrisEmployeesResponseResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesDetail$inboundSchema: z.ZodType<
  HrisEmployeesAddHrisEmployeesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesAddHrisEmployeesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeesAddHrisEmployeesDetail$outboundSchema: z.ZodType<
  HrisEmployeesAddHrisEmployeesDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAddHrisEmployeesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesDetail$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAddHrisEmployeesDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesAddHrisEmployeesDetail$Outbound;
}

export function hrisEmployeesAddHrisEmployeesDetailToJSON(
  hrisEmployeesAddHrisEmployeesDetail: HrisEmployeesAddHrisEmployeesDetail,
): string {
  return JSON.stringify(
    HrisEmployeesAddHrisEmployeesDetail$outboundSchema.parse(
      hrisEmployeesAddHrisEmployeesDetail,
    ),
  );
}

export function hrisEmployeesAddHrisEmployeesDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAddHrisEmployeesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesAddHrisEmployeesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAddHrisEmployeesDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesAddHrisEmployeesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisEmployeesAddHrisEmployeesResponseBody(remapped);
  });

/** @internal */
export type HrisEmployeesAddHrisEmployeesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAddHrisEmployeesResponseBody
  > = z.instanceof(HrisEmployeesAddHrisEmployeesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesResponseBody$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAddHrisEmployeesResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesAddHrisEmployeesResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesAddDetail$inboundSchema: z.ZodType<
  HrisEmployeesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisEmployeesAddDetail$outboundSchema: z.ZodType<
  HrisEmployeesAddDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddDetail$ {
  /** @deprecated use `HrisEmployeesAddDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesAddDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesAddDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesAddDetail$Outbound;
}

export function hrisEmployeesAddDetailToJSON(
  hrisEmployeesAddDetail: HrisEmployeesAddDetail,
): string {
  return JSON.stringify(
    HrisEmployeesAddDetail$outboundSchema.parse(hrisEmployeesAddDetail),
  );
}

export function hrisEmployeesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAddDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisEmployeesAddResponseBody(remapped);
  });

/** @internal */
export type HrisEmployeesAddResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeesAddResponseBody$outboundSchema: z.ZodType<
  HrisEmployeesAddResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAddResponseBody
> = z.instanceof(HrisEmployeesAddResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddResponseBody$ {
  /** @deprecated use `HrisEmployeesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAddResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesAddResponseBody$Outbound;
}
