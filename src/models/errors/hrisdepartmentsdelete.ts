/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsDeleteHrisDepartmentsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBodyData;

  constructor(
    err: HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsDeleteHrisDepartmentsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBodyData;

  constructor(
    err: HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisDepartmentsDeleteHrisDepartmentsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsDeleteHrisDepartmentsResponseResponseBodyData;

  constructor(
    err: HrisDepartmentsDeleteHrisDepartmentsResponseResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsDeleteHrisDepartmentsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisDepartmentsDeleteHrisDepartmentsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class HrisDepartmentsDeleteHrisDepartmentsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsDeleteHrisDepartmentsResponseBodyData;

  constructor(err: HrisDepartmentsDeleteHrisDepartmentsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsDeleteHrisDepartmentsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsDeleteDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisDepartmentsDeleteResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class HrisDepartmentsDeleteResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsDeleteResponseBodyData;

  constructor(err: HrisDepartmentsDeleteResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsDeleteResponseBody";
  }
}

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsDeleteHrisDepartmentsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$ {
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$Outbound;
}

export function hrisDepartmentsDeleteHrisDepartmentsResponse422DetailToJSON(
  hrisDepartmentsDeleteHrisDepartmentsResponse422Detail:
    HrisDepartmentsDeleteHrisDepartmentsResponse422Detail,
): string {
  return JSON.stringify(
    HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$outboundSchema.parse(
      hrisDepartmentsDeleteHrisDepartmentsResponse422Detail,
    ),
  );
}

export function hrisDepartmentsDeleteHrisDepartmentsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsDeleteHrisDepartmentsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsDeleteHrisDepartmentsResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsDeleteHrisDepartmentsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody
  > = z.instanceof(HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$ {
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsDeleteHrisDepartmentsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponseDetail$inboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsDeleteHrisDepartmentsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponseDetail$outboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsDeleteHrisDepartmentsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsDeleteHrisDepartmentsResponseDetail$ {
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponseDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponseDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsDeleteHrisDepartmentsResponseDetail$Outbound;
}

export function hrisDepartmentsDeleteHrisDepartmentsResponseDetailToJSON(
  hrisDepartmentsDeleteHrisDepartmentsResponseDetail:
    HrisDepartmentsDeleteHrisDepartmentsResponseDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsDeleteHrisDepartmentsResponseDetail$outboundSchema.parse(
      hrisDepartmentsDeleteHrisDepartmentsResponseDetail,
    ),
  );
}

export function hrisDepartmentsDeleteHrisDepartmentsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsDeleteHrisDepartmentsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsDeleteHrisDepartmentsResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsDeleteHrisDepartmentsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody
  > = z.instanceof(HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$ {
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsDeleteHrisDepartmentsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody
  > = z.instanceof(HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$ {
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsDeleteHrisDepartmentsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsDetail$inboundSchema:
  z.ZodType<HrisDepartmentsDeleteHrisDepartmentsDetail, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsDeleteHrisDepartmentsDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsDetail$outboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsDetail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsDeleteHrisDepartmentsDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsDeleteHrisDepartmentsDetail$ {
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsDeleteHrisDepartmentsDetail$Outbound;
}

export function hrisDepartmentsDeleteHrisDepartmentsDetailToJSON(
  hrisDepartmentsDeleteHrisDepartmentsDetail:
    HrisDepartmentsDeleteHrisDepartmentsDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsDeleteHrisDepartmentsDetail$outboundSchema.parse(
      hrisDepartmentsDeleteHrisDepartmentsDetail,
    ),
  );
}

export function hrisDepartmentsDeleteHrisDepartmentsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsDeleteHrisDepartmentsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsDeleteHrisDepartmentsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsDeleteHrisDepartmentsDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsDeleteHrisDepartmentsResponseBody(remapped);
    });

/** @internal */
export type HrisDepartmentsDeleteHrisDepartmentsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsDeleteHrisDepartmentsResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsDeleteHrisDepartmentsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsDeleteHrisDepartmentsResponseBody
  > = z.instanceof(HrisDepartmentsDeleteHrisDepartmentsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsDeleteHrisDepartmentsResponseBody$ {
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsDeleteHrisDepartmentsResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteHrisDepartmentsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsDeleteHrisDepartmentsResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsDeleteDetail$inboundSchema: z.ZodType<
  HrisDepartmentsDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsDeleteDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisDepartmentsDeleteDetail$outboundSchema: z.ZodType<
  HrisDepartmentsDeleteDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsDeleteDetail$ {
  /** @deprecated use `HrisDepartmentsDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsDeleteDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsDeleteDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsDeleteDetail$Outbound;
}

export function hrisDepartmentsDeleteDetailToJSON(
  hrisDepartmentsDeleteDetail: HrisDepartmentsDeleteDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsDeleteDetail$outboundSchema.parse(
      hrisDepartmentsDeleteDetail,
    ),
  );
}

export function hrisDepartmentsDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsDeleteDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsDeleteResponseBody$inboundSchema: z.ZodType<
  HrisDepartmentsDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisDepartmentsDeleteResponseBody(remapped);
  });

/** @internal */
export type HrisDepartmentsDeleteResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsDeleteResponseBody$outboundSchema: z.ZodType<
  HrisDepartmentsDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsDeleteResponseBody
> = z.instanceof(HrisDepartmentsDeleteResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsDeleteResponseBody$ {
  /** @deprecated use `HrisDepartmentsDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsDeleteResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsDeleteResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsDeleteResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsDeleteResponseBody$Outbound;
}
