/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersDeleteUsersResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type UsersDeleteUsersResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class UsersDeleteUsersResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersDeleteUsersResponse422ResponseBodyData;

  constructor(err: UsersDeleteUsersResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersDeleteUsersResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersDeleteUsersResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type UsersDeleteUsersResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class UsersDeleteUsersResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersDeleteUsersResponse404ResponseBodyData;

  constructor(err: UsersDeleteUsersResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersDeleteUsersResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type UsersDeleteUsersResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class UsersDeleteUsersResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersDeleteUsersResponseResponseBodyData;

  constructor(err: UsersDeleteUsersResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersDeleteUsersResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersDeleteUsersDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type UsersDeleteUsersResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class UsersDeleteUsersResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersDeleteUsersResponseBodyData;

  constructor(err: UsersDeleteUsersResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersDeleteUsersResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersDeleteDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type UsersDeleteResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class UsersDeleteResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersDeleteResponseBodyData;

  constructor(err: UsersDeleteResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersDeleteResponseBody";
  }
}

/** @internal */
export const UsersDeleteUsersResponse422Detail$inboundSchema: z.ZodType<
  UsersDeleteUsersResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersDeleteUsersResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const UsersDeleteUsersResponse422Detail$outboundSchema: z.ZodType<
  UsersDeleteUsersResponse422Detail$Outbound,
  z.ZodTypeDef,
  UsersDeleteUsersResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteUsersResponse422Detail$ {
  /** @deprecated use `UsersDeleteUsersResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteUsersResponse422Detail$inboundSchema;
  /** @deprecated use `UsersDeleteUsersResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    UsersDeleteUsersResponse422Detail$outboundSchema;
  /** @deprecated use `UsersDeleteUsersResponse422Detail$Outbound` instead. */
  export type Outbound = UsersDeleteUsersResponse422Detail$Outbound;
}

export function usersDeleteUsersResponse422DetailToJSON(
  usersDeleteUsersResponse422Detail: UsersDeleteUsersResponse422Detail,
): string {
  return JSON.stringify(
    UsersDeleteUsersResponse422Detail$outboundSchema.parse(
      usersDeleteUsersResponse422Detail,
    ),
  );
}

export function usersDeleteUsersResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteUsersResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteUsersResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteUsersResponse422Detail' from JSON`,
  );
}

/** @internal */
export const UsersDeleteUsersResponse422ResponseBody$inboundSchema: z.ZodType<
  UsersDeleteUsersResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersDeleteUsersResponse422ResponseBody(remapped);
  });

/** @internal */
export type UsersDeleteUsersResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersDeleteUsersResponse422ResponseBody$outboundSchema: z.ZodType<
  UsersDeleteUsersResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  UsersDeleteUsersResponse422ResponseBody
> = z.instanceof(UsersDeleteUsersResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteUsersResponse422ResponseBody$ {
  /** @deprecated use `UsersDeleteUsersResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UsersDeleteUsersResponse422ResponseBody$inboundSchema;
  /** @deprecated use `UsersDeleteUsersResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersDeleteUsersResponse422ResponseBody$outboundSchema;
  /** @deprecated use `UsersDeleteUsersResponse422ResponseBody$Outbound` instead. */
  export type Outbound = UsersDeleteUsersResponse422ResponseBody$Outbound;
}

/** @internal */
export const UsersDeleteUsersResponseDetail$inboundSchema: z.ZodType<
  UsersDeleteUsersResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersDeleteUsersResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const UsersDeleteUsersResponseDetail$outboundSchema: z.ZodType<
  UsersDeleteUsersResponseDetail$Outbound,
  z.ZodTypeDef,
  UsersDeleteUsersResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteUsersResponseDetail$ {
  /** @deprecated use `UsersDeleteUsersResponseDetail$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteUsersResponseDetail$inboundSchema;
  /** @deprecated use `UsersDeleteUsersResponseDetail$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteUsersResponseDetail$outboundSchema;
  /** @deprecated use `UsersDeleteUsersResponseDetail$Outbound` instead. */
  export type Outbound = UsersDeleteUsersResponseDetail$Outbound;
}

export function usersDeleteUsersResponseDetailToJSON(
  usersDeleteUsersResponseDetail: UsersDeleteUsersResponseDetail,
): string {
  return JSON.stringify(
    UsersDeleteUsersResponseDetail$outboundSchema.parse(
      usersDeleteUsersResponseDetail,
    ),
  );
}

export function usersDeleteUsersResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteUsersResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteUsersResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteUsersResponseDetail' from JSON`,
  );
}

/** @internal */
export const UsersDeleteUsersResponse404ResponseBody$inboundSchema: z.ZodType<
  UsersDeleteUsersResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersDeleteUsersResponse404ResponseBody(remapped);
  });

/** @internal */
export type UsersDeleteUsersResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersDeleteUsersResponse404ResponseBody$outboundSchema: z.ZodType<
  UsersDeleteUsersResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  UsersDeleteUsersResponse404ResponseBody
> = z.instanceof(UsersDeleteUsersResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteUsersResponse404ResponseBody$ {
  /** @deprecated use `UsersDeleteUsersResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UsersDeleteUsersResponse404ResponseBody$inboundSchema;
  /** @deprecated use `UsersDeleteUsersResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersDeleteUsersResponse404ResponseBody$outboundSchema;
  /** @deprecated use `UsersDeleteUsersResponse404ResponseBody$Outbound` instead. */
  export type Outbound = UsersDeleteUsersResponse404ResponseBody$Outbound;
}

/** @internal */
export const UsersDeleteUsersResponseResponseBody$inboundSchema: z.ZodType<
  UsersDeleteUsersResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersDeleteUsersResponseResponseBody(remapped);
  });

/** @internal */
export type UsersDeleteUsersResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersDeleteUsersResponseResponseBody$outboundSchema: z.ZodType<
  UsersDeleteUsersResponseResponseBody$Outbound,
  z.ZodTypeDef,
  UsersDeleteUsersResponseResponseBody
> = z.instanceof(UsersDeleteUsersResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteUsersResponseResponseBody$ {
  /** @deprecated use `UsersDeleteUsersResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UsersDeleteUsersResponseResponseBody$inboundSchema;
  /** @deprecated use `UsersDeleteUsersResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersDeleteUsersResponseResponseBody$outboundSchema;
  /** @deprecated use `UsersDeleteUsersResponseResponseBody$Outbound` instead. */
  export type Outbound = UsersDeleteUsersResponseResponseBody$Outbound;
}

/** @internal */
export const UsersDeleteUsersDetail$inboundSchema: z.ZodType<
  UsersDeleteUsersDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersDeleteUsersDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersDeleteUsersDetail$outboundSchema: z.ZodType<
  UsersDeleteUsersDetail$Outbound,
  z.ZodTypeDef,
  UsersDeleteUsersDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteUsersDetail$ {
  /** @deprecated use `UsersDeleteUsersDetail$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteUsersDetail$inboundSchema;
  /** @deprecated use `UsersDeleteUsersDetail$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteUsersDetail$outboundSchema;
  /** @deprecated use `UsersDeleteUsersDetail$Outbound` instead. */
  export type Outbound = UsersDeleteUsersDetail$Outbound;
}

export function usersDeleteUsersDetailToJSON(
  usersDeleteUsersDetail: UsersDeleteUsersDetail,
): string {
  return JSON.stringify(
    UsersDeleteUsersDetail$outboundSchema.parse(usersDeleteUsersDetail),
  );
}

export function usersDeleteUsersDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteUsersDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteUsersDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteUsersDetail' from JSON`,
  );
}

/** @internal */
export const UsersDeleteUsersResponseBody$inboundSchema: z.ZodType<
  UsersDeleteUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersDeleteUsersResponseBody(remapped);
  });

/** @internal */
export type UsersDeleteUsersResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersDeleteUsersResponseBody$outboundSchema: z.ZodType<
  UsersDeleteUsersResponseBody$Outbound,
  z.ZodTypeDef,
  UsersDeleteUsersResponseBody
> = z.instanceof(UsersDeleteUsersResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteUsersResponseBody$ {
  /** @deprecated use `UsersDeleteUsersResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteUsersResponseBody$inboundSchema;
  /** @deprecated use `UsersDeleteUsersResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteUsersResponseBody$outboundSchema;
  /** @deprecated use `UsersDeleteUsersResponseBody$Outbound` instead. */
  export type Outbound = UsersDeleteUsersResponseBody$Outbound;
}

/** @internal */
export const UsersDeleteDetail$inboundSchema: z.ZodType<
  UsersDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersDeleteDetail$outboundSchema: z.ZodType<
  UsersDeleteDetail$Outbound,
  z.ZodTypeDef,
  UsersDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteDetail$ {
  /** @deprecated use `UsersDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteDetail$inboundSchema;
  /** @deprecated use `UsersDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteDetail$outboundSchema;
  /** @deprecated use `UsersDeleteDetail$Outbound` instead. */
  export type Outbound = UsersDeleteDetail$Outbound;
}

export function usersDeleteDetailToJSON(
  usersDeleteDetail: UsersDeleteDetail,
): string {
  return JSON.stringify(
    UsersDeleteDetail$outboundSchema.parse(usersDeleteDetail),
  );
}

export function usersDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteDetail' from JSON`,
  );
}

/** @internal */
export const UsersDeleteResponseBody$inboundSchema: z.ZodType<
  UsersDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersDeleteResponseBody(remapped);
  });

/** @internal */
export type UsersDeleteResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersDeleteResponseBody$outboundSchema: z.ZodType<
  UsersDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  UsersDeleteResponseBody
> = z.instanceof(UsersDeleteResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteResponseBody$ {
  /** @deprecated use `UsersDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteResponseBody$inboundSchema;
  /** @deprecated use `UsersDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteResponseBody$outboundSchema;
  /** @deprecated use `UsersDeleteResponseBody$Outbound` instead. */
  export type Outbound = UsersDeleteResponseBody$Outbound;
}
