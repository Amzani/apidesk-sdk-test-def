/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersUpdateUsersResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type UsersUpdateUsersResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class UsersUpdateUsersResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersUpdateUsersResponse422ResponseBodyData;

  constructor(err: UsersUpdateUsersResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersUpdateUsersResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersUpdateUsersResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type UsersUpdateUsersResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class UsersUpdateUsersResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersUpdateUsersResponse404ResponseBodyData;

  constructor(err: UsersUpdateUsersResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersUpdateUsersResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type UsersUpdateUsersResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class UsersUpdateUsersResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersUpdateUsersResponseResponseBodyData;

  constructor(err: UsersUpdateUsersResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersUpdateUsersResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersUpdateUsersDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type UsersUpdateUsersResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class UsersUpdateUsersResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersUpdateUsersResponseBodyData;

  constructor(err: UsersUpdateUsersResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersUpdateUsersResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type UsersUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class UsersUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersUpdateResponseBodyData;

  constructor(err: UsersUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersUpdateResponseBody";
  }
}

/** @internal */
export const UsersUpdateUsersResponse422Detail$inboundSchema: z.ZodType<
  UsersUpdateUsersResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersUpdateUsersResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const UsersUpdateUsersResponse422Detail$outboundSchema: z.ZodType<
  UsersUpdateUsersResponse422Detail$Outbound,
  z.ZodTypeDef,
  UsersUpdateUsersResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUsersResponse422Detail$ {
  /** @deprecated use `UsersUpdateUsersResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateUsersResponse422Detail$inboundSchema;
  /** @deprecated use `UsersUpdateUsersResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    UsersUpdateUsersResponse422Detail$outboundSchema;
  /** @deprecated use `UsersUpdateUsersResponse422Detail$Outbound` instead. */
  export type Outbound = UsersUpdateUsersResponse422Detail$Outbound;
}

export function usersUpdateUsersResponse422DetailToJSON(
  usersUpdateUsersResponse422Detail: UsersUpdateUsersResponse422Detail,
): string {
  return JSON.stringify(
    UsersUpdateUsersResponse422Detail$outboundSchema.parse(
      usersUpdateUsersResponse422Detail,
    ),
  );
}

export function usersUpdateUsersResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateUsersResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateUsersResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateUsersResponse422Detail' from JSON`,
  );
}

/** @internal */
export const UsersUpdateUsersResponse422ResponseBody$inboundSchema: z.ZodType<
  UsersUpdateUsersResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersUpdateUsersResponse422ResponseBody(remapped);
  });

/** @internal */
export type UsersUpdateUsersResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersUpdateUsersResponse422ResponseBody$outboundSchema: z.ZodType<
  UsersUpdateUsersResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  UsersUpdateUsersResponse422ResponseBody
> = z.instanceof(UsersUpdateUsersResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUsersResponse422ResponseBody$ {
  /** @deprecated use `UsersUpdateUsersResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UsersUpdateUsersResponse422ResponseBody$inboundSchema;
  /** @deprecated use `UsersUpdateUsersResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersUpdateUsersResponse422ResponseBody$outboundSchema;
  /** @deprecated use `UsersUpdateUsersResponse422ResponseBody$Outbound` instead. */
  export type Outbound = UsersUpdateUsersResponse422ResponseBody$Outbound;
}

/** @internal */
export const UsersUpdateUsersResponseDetail$inboundSchema: z.ZodType<
  UsersUpdateUsersResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersUpdateUsersResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const UsersUpdateUsersResponseDetail$outboundSchema: z.ZodType<
  UsersUpdateUsersResponseDetail$Outbound,
  z.ZodTypeDef,
  UsersUpdateUsersResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUsersResponseDetail$ {
  /** @deprecated use `UsersUpdateUsersResponseDetail$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateUsersResponseDetail$inboundSchema;
  /** @deprecated use `UsersUpdateUsersResponseDetail$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateUsersResponseDetail$outboundSchema;
  /** @deprecated use `UsersUpdateUsersResponseDetail$Outbound` instead. */
  export type Outbound = UsersUpdateUsersResponseDetail$Outbound;
}

export function usersUpdateUsersResponseDetailToJSON(
  usersUpdateUsersResponseDetail: UsersUpdateUsersResponseDetail,
): string {
  return JSON.stringify(
    UsersUpdateUsersResponseDetail$outboundSchema.parse(
      usersUpdateUsersResponseDetail,
    ),
  );
}

export function usersUpdateUsersResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateUsersResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateUsersResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateUsersResponseDetail' from JSON`,
  );
}

/** @internal */
export const UsersUpdateUsersResponse404ResponseBody$inboundSchema: z.ZodType<
  UsersUpdateUsersResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersUpdateUsersResponse404ResponseBody(remapped);
  });

/** @internal */
export type UsersUpdateUsersResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersUpdateUsersResponse404ResponseBody$outboundSchema: z.ZodType<
  UsersUpdateUsersResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  UsersUpdateUsersResponse404ResponseBody
> = z.instanceof(UsersUpdateUsersResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUsersResponse404ResponseBody$ {
  /** @deprecated use `UsersUpdateUsersResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UsersUpdateUsersResponse404ResponseBody$inboundSchema;
  /** @deprecated use `UsersUpdateUsersResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersUpdateUsersResponse404ResponseBody$outboundSchema;
  /** @deprecated use `UsersUpdateUsersResponse404ResponseBody$Outbound` instead. */
  export type Outbound = UsersUpdateUsersResponse404ResponseBody$Outbound;
}

/** @internal */
export const UsersUpdateUsersResponseResponseBody$inboundSchema: z.ZodType<
  UsersUpdateUsersResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersUpdateUsersResponseResponseBody(remapped);
  });

/** @internal */
export type UsersUpdateUsersResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersUpdateUsersResponseResponseBody$outboundSchema: z.ZodType<
  UsersUpdateUsersResponseResponseBody$Outbound,
  z.ZodTypeDef,
  UsersUpdateUsersResponseResponseBody
> = z.instanceof(UsersUpdateUsersResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUsersResponseResponseBody$ {
  /** @deprecated use `UsersUpdateUsersResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UsersUpdateUsersResponseResponseBody$inboundSchema;
  /** @deprecated use `UsersUpdateUsersResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersUpdateUsersResponseResponseBody$outboundSchema;
  /** @deprecated use `UsersUpdateUsersResponseResponseBody$Outbound` instead. */
  export type Outbound = UsersUpdateUsersResponseResponseBody$Outbound;
}

/** @internal */
export const UsersUpdateUsersDetail$inboundSchema: z.ZodType<
  UsersUpdateUsersDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersUpdateUsersDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersUpdateUsersDetail$outboundSchema: z.ZodType<
  UsersUpdateUsersDetail$Outbound,
  z.ZodTypeDef,
  UsersUpdateUsersDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUsersDetail$ {
  /** @deprecated use `UsersUpdateUsersDetail$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateUsersDetail$inboundSchema;
  /** @deprecated use `UsersUpdateUsersDetail$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateUsersDetail$outboundSchema;
  /** @deprecated use `UsersUpdateUsersDetail$Outbound` instead. */
  export type Outbound = UsersUpdateUsersDetail$Outbound;
}

export function usersUpdateUsersDetailToJSON(
  usersUpdateUsersDetail: UsersUpdateUsersDetail,
): string {
  return JSON.stringify(
    UsersUpdateUsersDetail$outboundSchema.parse(usersUpdateUsersDetail),
  );
}

export function usersUpdateUsersDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateUsersDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateUsersDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateUsersDetail' from JSON`,
  );
}

/** @internal */
export const UsersUpdateUsersResponseBody$inboundSchema: z.ZodType<
  UsersUpdateUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersUpdateUsersResponseBody(remapped);
  });

/** @internal */
export type UsersUpdateUsersResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersUpdateUsersResponseBody$outboundSchema: z.ZodType<
  UsersUpdateUsersResponseBody$Outbound,
  z.ZodTypeDef,
  UsersUpdateUsersResponseBody
> = z.instanceof(UsersUpdateUsersResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUsersResponseBody$ {
  /** @deprecated use `UsersUpdateUsersResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateUsersResponseBody$inboundSchema;
  /** @deprecated use `UsersUpdateUsersResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateUsersResponseBody$outboundSchema;
  /** @deprecated use `UsersUpdateUsersResponseBody$Outbound` instead. */
  export type Outbound = UsersUpdateUsersResponseBody$Outbound;
}

/** @internal */
export const UsersUpdateDetail$inboundSchema: z.ZodType<
  UsersUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersUpdateDetail$outboundSchema: z.ZodType<
  UsersUpdateDetail$Outbound,
  z.ZodTypeDef,
  UsersUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateDetail$ {
  /** @deprecated use `UsersUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateDetail$inboundSchema;
  /** @deprecated use `UsersUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateDetail$outboundSchema;
  /** @deprecated use `UsersUpdateDetail$Outbound` instead. */
  export type Outbound = UsersUpdateDetail$Outbound;
}

export function usersUpdateDetailToJSON(
  usersUpdateDetail: UsersUpdateDetail,
): string {
  return JSON.stringify(
    UsersUpdateDetail$outboundSchema.parse(usersUpdateDetail),
  );
}

export function usersUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateDetail' from JSON`,
  );
}

/** @internal */
export const UsersUpdateResponseBody$inboundSchema: z.ZodType<
  UsersUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersUpdateResponseBody(remapped);
  });

/** @internal */
export type UsersUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersUpdateResponseBody$outboundSchema: z.ZodType<
  UsersUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  UsersUpdateResponseBody
> = z.instanceof(UsersUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateResponseBody$ {
  /** @deprecated use `UsersUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateResponseBody$inboundSchema;
  /** @deprecated use `UsersUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateResponseBody$outboundSchema;
  /** @deprecated use `UsersUpdateResponseBody$Outbound` instead. */
  export type Outbound = UsersUpdateResponseBody$Outbound;
}
