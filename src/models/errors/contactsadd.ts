/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsAddContactsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type ContactsAddContactsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class ContactsAddContactsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsAddContactsResponse422ResponseBodyData;

  constructor(err: ContactsAddContactsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsAddContactsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsAddContactsResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type ContactsAddContactsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class ContactsAddContactsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsAddContactsResponse404ResponseBodyData;

  constructor(err: ContactsAddContactsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsAddContactsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type ContactsAddContactsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class ContactsAddContactsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsAddContactsResponseResponseBodyData;

  constructor(err: ContactsAddContactsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsAddContactsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsAddContactsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type ContactsAddContactsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class ContactsAddContactsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsAddContactsResponseBodyData;

  constructor(err: ContactsAddContactsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsAddContactsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsAddDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type ContactsAddResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class ContactsAddResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsAddResponseBodyData;

  constructor(err: ContactsAddResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsAddResponseBody";
  }
}

/** @internal */
export const ContactsAddContactsResponse422Detail$inboundSchema: z.ZodType<
  ContactsAddContactsResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsAddContactsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsAddContactsResponse422Detail$outboundSchema: z.ZodType<
  ContactsAddContactsResponse422Detail$Outbound,
  z.ZodTypeDef,
  ContactsAddContactsResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsResponse422Detail$ {
  /** @deprecated use `ContactsAddContactsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAddContactsResponse422Detail$inboundSchema;
  /** @deprecated use `ContactsAddContactsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAddContactsResponse422Detail$outboundSchema;
  /** @deprecated use `ContactsAddContactsResponse422Detail$Outbound` instead. */
  export type Outbound = ContactsAddContactsResponse422Detail$Outbound;
}

export function contactsAddContactsResponse422DetailToJSON(
  contactsAddContactsResponse422Detail: ContactsAddContactsResponse422Detail,
): string {
  return JSON.stringify(
    ContactsAddContactsResponse422Detail$outboundSchema.parse(
      contactsAddContactsResponse422Detail,
    ),
  );
}

export function contactsAddContactsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddContactsResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContactsAddContactsResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddContactsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const ContactsAddContactsResponse422ResponseBody$inboundSchema:
  z.ZodType<ContactsAddContactsResponse422ResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      status_code: z.number().optional(),
      error: z.string().optional(),
      type_name: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    })
      .transform((v) => {
        const remapped = remap$(v, {
          "status_code": "statusCode",
          "type_name": "typeName",
        });

        return new ContactsAddContactsResponse422ResponseBody(remapped);
      });

/** @internal */
export type ContactsAddContactsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAddContactsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    ContactsAddContactsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsAddContactsResponse422ResponseBody
  > = z.instanceof(ContactsAddContactsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsResponse422ResponseBody$ {
  /** @deprecated use `ContactsAddContactsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAddContactsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `ContactsAddContactsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAddContactsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `ContactsAddContactsResponse422ResponseBody$Outbound` instead. */
  export type Outbound = ContactsAddContactsResponse422ResponseBody$Outbound;
}

/** @internal */
export const ContactsAddContactsResponseDetail$inboundSchema: z.ZodType<
  ContactsAddContactsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsAddContactsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsAddContactsResponseDetail$outboundSchema: z.ZodType<
  ContactsAddContactsResponseDetail$Outbound,
  z.ZodTypeDef,
  ContactsAddContactsResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsResponseDetail$ {
  /** @deprecated use `ContactsAddContactsResponseDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsAddContactsResponseDetail$inboundSchema;
  /** @deprecated use `ContactsAddContactsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAddContactsResponseDetail$outboundSchema;
  /** @deprecated use `ContactsAddContactsResponseDetail$Outbound` instead. */
  export type Outbound = ContactsAddContactsResponseDetail$Outbound;
}

export function contactsAddContactsResponseDetailToJSON(
  contactsAddContactsResponseDetail: ContactsAddContactsResponseDetail,
): string {
  return JSON.stringify(
    ContactsAddContactsResponseDetail$outboundSchema.parse(
      contactsAddContactsResponseDetail,
    ),
  );
}

export function contactsAddContactsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddContactsResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddContactsResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddContactsResponseDetail' from JSON`,
  );
}

/** @internal */
export const ContactsAddContactsResponse404ResponseBody$inboundSchema:
  z.ZodType<ContactsAddContactsResponse404ResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      status_code: z.number().optional(),
      error: z.string().optional(),
      type_name: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    })
      .transform((v) => {
        const remapped = remap$(v, {
          "status_code": "statusCode",
          "type_name": "typeName",
        });

        return new ContactsAddContactsResponse404ResponseBody(remapped);
      });

/** @internal */
export type ContactsAddContactsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAddContactsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    ContactsAddContactsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsAddContactsResponse404ResponseBody
  > = z.instanceof(ContactsAddContactsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsResponse404ResponseBody$ {
  /** @deprecated use `ContactsAddContactsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAddContactsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `ContactsAddContactsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAddContactsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `ContactsAddContactsResponse404ResponseBody$Outbound` instead. */
  export type Outbound = ContactsAddContactsResponse404ResponseBody$Outbound;
}

/** @internal */
export const ContactsAddContactsResponseResponseBody$inboundSchema: z.ZodType<
  ContactsAddContactsResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsAddContactsResponseResponseBody(remapped);
  });

/** @internal */
export type ContactsAddContactsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAddContactsResponseResponseBody$outboundSchema: z.ZodType<
  ContactsAddContactsResponseResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsAddContactsResponseResponseBody
> = z.instanceof(ContactsAddContactsResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsResponseResponseBody$ {
  /** @deprecated use `ContactsAddContactsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAddContactsResponseResponseBody$inboundSchema;
  /** @deprecated use `ContactsAddContactsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAddContactsResponseResponseBody$outboundSchema;
  /** @deprecated use `ContactsAddContactsResponseResponseBody$Outbound` instead. */
  export type Outbound = ContactsAddContactsResponseResponseBody$Outbound;
}

/** @internal */
export const ContactsAddContactsDetail$inboundSchema: z.ZodType<
  ContactsAddContactsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsAddContactsDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsAddContactsDetail$outboundSchema: z.ZodType<
  ContactsAddContactsDetail$Outbound,
  z.ZodTypeDef,
  ContactsAddContactsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsDetail$ {
  /** @deprecated use `ContactsAddContactsDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsAddContactsDetail$inboundSchema;
  /** @deprecated use `ContactsAddContactsDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsAddContactsDetail$outboundSchema;
  /** @deprecated use `ContactsAddContactsDetail$Outbound` instead. */
  export type Outbound = ContactsAddContactsDetail$Outbound;
}

export function contactsAddContactsDetailToJSON(
  contactsAddContactsDetail: ContactsAddContactsDetail,
): string {
  return JSON.stringify(
    ContactsAddContactsDetail$outboundSchema.parse(contactsAddContactsDetail),
  );
}

export function contactsAddContactsDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddContactsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddContactsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddContactsDetail' from JSON`,
  );
}

/** @internal */
export const ContactsAddContactsResponseBody$inboundSchema: z.ZodType<
  ContactsAddContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsAddContactsResponseBody(remapped);
  });

/** @internal */
export type ContactsAddContactsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAddContactsResponseBody$outboundSchema: z.ZodType<
  ContactsAddContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsAddContactsResponseBody
> = z.instanceof(ContactsAddContactsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsResponseBody$ {
  /** @deprecated use `ContactsAddContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsAddContactsResponseBody$inboundSchema;
  /** @deprecated use `ContactsAddContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsAddContactsResponseBody$outboundSchema;
  /** @deprecated use `ContactsAddContactsResponseBody$Outbound` instead. */
  export type Outbound = ContactsAddContactsResponseBody$Outbound;
}

/** @internal */
export const ContactsAddDetail$inboundSchema: z.ZodType<
  ContactsAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsAddDetail$outboundSchema: z.ZodType<
  ContactsAddDetail$Outbound,
  z.ZodTypeDef,
  ContactsAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddDetail$ {
  /** @deprecated use `ContactsAddDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsAddDetail$inboundSchema;
  /** @deprecated use `ContactsAddDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsAddDetail$outboundSchema;
  /** @deprecated use `ContactsAddDetail$Outbound` instead. */
  export type Outbound = ContactsAddDetail$Outbound;
}

export function contactsAddDetailToJSON(
  contactsAddDetail: ContactsAddDetail,
): string {
  return JSON.stringify(
    ContactsAddDetail$outboundSchema.parse(contactsAddDetail),
  );
}

export function contactsAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddDetail' from JSON`,
  );
}

/** @internal */
export const ContactsAddResponseBody$inboundSchema: z.ZodType<
  ContactsAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsAddResponseBody(remapped);
  });

/** @internal */
export type ContactsAddResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAddResponseBody$outboundSchema: z.ZodType<
  ContactsAddResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsAddResponseBody
> = z.instanceof(ContactsAddResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddResponseBody$ {
  /** @deprecated use `ContactsAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsAddResponseBody$inboundSchema;
  /** @deprecated use `ContactsAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsAddResponseBody$outboundSchema;
  /** @deprecated use `ContactsAddResponseBody$Outbound` instead. */
  export type Outbound = ContactsAddResponseBody$Outbound;
}
