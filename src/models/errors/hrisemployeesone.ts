/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesOneHrisEmployeesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisEmployeesOneHrisEmployeesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class HrisEmployeesOneHrisEmployeesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesOneHrisEmployeesResponse422ResponseBodyData;

  constructor(err: HrisEmployeesOneHrisEmployeesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeesOneHrisEmployeesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesOneHrisEmployeesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisEmployeesOneHrisEmployeesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class HrisEmployeesOneHrisEmployeesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesOneHrisEmployeesResponse404ResponseBodyData;

  constructor(err: HrisEmployeesOneHrisEmployeesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeesOneHrisEmployeesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisEmployeesOneHrisEmployeesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class HrisEmployeesOneHrisEmployeesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesOneHrisEmployeesResponseResponseBodyData;

  constructor(err: HrisEmployeesOneHrisEmployeesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeesOneHrisEmployeesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesOneHrisEmployeesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type HrisEmployeesOneHrisEmployeesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class HrisEmployeesOneHrisEmployeesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesOneHrisEmployeesResponseBodyData;

  constructor(err: HrisEmployeesOneHrisEmployeesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeesOneHrisEmployeesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisEmployeesOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class HrisEmployeesOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesOneResponseBodyData;

  constructor(err: HrisEmployeesOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeesOneResponseBody";
  }
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponse422Detail$inboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesOneHrisEmployeesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponse422Detail$outboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisEmployeesOneHrisEmployeesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesResponse422Detail$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesResponse422Detail$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesResponse422Detail$outboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisEmployeesOneHrisEmployeesResponse422Detail$Outbound;
}

export function hrisEmployeesOneHrisEmployeesResponse422DetailToJSON(
  hrisEmployeesOneHrisEmployeesResponse422Detail:
    HrisEmployeesOneHrisEmployeesResponse422Detail,
): string {
  return JSON.stringify(
    HrisEmployeesOneHrisEmployeesResponse422Detail$outboundSchema.parse(
      hrisEmployeesOneHrisEmployeesResponse422Detail,
    ),
  );
}

export function hrisEmployeesOneHrisEmployeesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesOneHrisEmployeesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesOneHrisEmployeesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesOneHrisEmployeesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeesOneHrisEmployeesResponse422ResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesOneHrisEmployeesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesOneHrisEmployeesResponse422ResponseBody
  > = z.instanceof(HrisEmployeesOneHrisEmployeesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesResponse422ResponseBody$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesOneHrisEmployeesResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseDetail$inboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesOneHrisEmployeesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseDetail$outboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisEmployeesOneHrisEmployeesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesResponseDetail$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesResponseDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesResponseDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesOneHrisEmployeesResponseDetail$Outbound;
}

export function hrisEmployeesOneHrisEmployeesResponseDetailToJSON(
  hrisEmployeesOneHrisEmployeesResponseDetail:
    HrisEmployeesOneHrisEmployeesResponseDetail,
): string {
  return JSON.stringify(
    HrisEmployeesOneHrisEmployeesResponseDetail$outboundSchema.parse(
      hrisEmployeesOneHrisEmployeesResponseDetail,
    ),
  );
}

export function hrisEmployeesOneHrisEmployeesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesOneHrisEmployeesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesOneHrisEmployeesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesOneHrisEmployeesResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeesOneHrisEmployeesResponse404ResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesOneHrisEmployeesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesOneHrisEmployeesResponse404ResponseBody
  > = z.instanceof(HrisEmployeesOneHrisEmployeesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesResponse404ResponseBody$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesOneHrisEmployeesResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeesOneHrisEmployeesResponseResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesOneHrisEmployeesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesOneHrisEmployeesResponseResponseBody
  > = z.instanceof(HrisEmployeesOneHrisEmployeesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesResponseResponseBody$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesOneHrisEmployeesResponseResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesDetail$inboundSchema: z.ZodType<
  HrisEmployeesOneHrisEmployeesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesOneHrisEmployeesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeesOneHrisEmployeesDetail$outboundSchema: z.ZodType<
  HrisEmployeesOneHrisEmployeesDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneHrisEmployeesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesDetail$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesOneHrisEmployeesDetail$Outbound;
}

export function hrisEmployeesOneHrisEmployeesDetailToJSON(
  hrisEmployeesOneHrisEmployeesDetail: HrisEmployeesOneHrisEmployeesDetail,
): string {
  return JSON.stringify(
    HrisEmployeesOneHrisEmployeesDetail$outboundSchema.parse(
      hrisEmployeesOneHrisEmployeesDetail,
    ),
  );
}

export function hrisEmployeesOneHrisEmployeesDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneHrisEmployeesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesOneHrisEmployeesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneHrisEmployeesDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesOneHrisEmployeesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisEmployeesOneHrisEmployeesResponseBody(remapped);
  });

/** @internal */
export type HrisEmployeesOneHrisEmployeesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesOneHrisEmployeesResponseBody
  > = z.instanceof(HrisEmployeesOneHrisEmployeesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesResponseBody$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesOneHrisEmployeesResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesOneDetail$inboundSchema: z.ZodType<
  HrisEmployeesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisEmployeesOneDetail$outboundSchema: z.ZodType<
  HrisEmployeesOneDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneDetail$ {
  /** @deprecated use `HrisEmployeesOneDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesOneDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesOneDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesOneDetail$Outbound;
}

export function hrisEmployeesOneDetailToJSON(
  hrisEmployeesOneDetail: HrisEmployeesOneDetail,
): string {
  return JSON.stringify(
    HrisEmployeesOneDetail$outboundSchema.parse(hrisEmployeesOneDetail),
  );
}

export function hrisEmployeesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisEmployeesOneResponseBody(remapped);
  });

/** @internal */
export type HrisEmployeesOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesOneResponseBody$outboundSchema: z.ZodType<
  HrisEmployeesOneResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneResponseBody
> = z.instanceof(HrisEmployeesOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneResponseBody$ {
  /** @deprecated use `HrisEmployeesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesOneResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesOneResponseBody$Outbound;
}
