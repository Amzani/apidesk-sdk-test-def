/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesOneActivitiesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type ActivitiesOneActivitiesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class ActivitiesOneActivitiesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesOneActivitiesResponse422ResponseBodyData;

  constructor(err: ActivitiesOneActivitiesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesOneActivitiesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesOneActivitiesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type ActivitiesOneActivitiesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class ActivitiesOneActivitiesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesOneActivitiesResponse404ResponseBodyData;

  constructor(err: ActivitiesOneActivitiesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesOneActivitiesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type ActivitiesOneActivitiesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class ActivitiesOneActivitiesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesOneActivitiesResponseResponseBodyData;

  constructor(err: ActivitiesOneActivitiesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesOneActivitiesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesOneActivitiesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type ActivitiesOneActivitiesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class ActivitiesOneActivitiesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesOneActivitiesResponseBodyData;

  constructor(err: ActivitiesOneActivitiesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesOneActivitiesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type ActivitiesOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class ActivitiesOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesOneResponseBodyData;

  constructor(err: ActivitiesOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesOneResponseBody";
  }
}

/** @internal */
export const ActivitiesOneActivitiesResponse422Detail$inboundSchema: z.ZodType<
  ActivitiesOneActivitiesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesOneActivitiesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesOneActivitiesResponse422Detail$outboundSchema: z.ZodType<
  ActivitiesOneActivitiesResponse422Detail$Outbound,
  z.ZodTypeDef,
  ActivitiesOneActivitiesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneActivitiesResponse422Detail$ {
  /** @deprecated use `ActivitiesOneActivitiesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesOneActivitiesResponse422Detail$inboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesOneActivitiesResponse422Detail$outboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponse422Detail$Outbound` instead. */
  export type Outbound = ActivitiesOneActivitiesResponse422Detail$Outbound;
}

export function activitiesOneActivitiesResponse422DetailToJSON(
  activitiesOneActivitiesResponse422Detail:
    ActivitiesOneActivitiesResponse422Detail,
): string {
  return JSON.stringify(
    ActivitiesOneActivitiesResponse422Detail$outboundSchema.parse(
      activitiesOneActivitiesResponse422Detail,
    ),
  );
}

export function activitiesOneActivitiesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivitiesOneActivitiesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesOneActivitiesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivitiesOneActivitiesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneActivitiesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesOneActivitiesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesOneActivitiesResponse422ResponseBody(remapped);
    });

/** @internal */
export type ActivitiesOneActivitiesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesOneActivitiesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesOneActivitiesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesOneActivitiesResponse422ResponseBody
  > = z.instanceof(ActivitiesOneActivitiesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneActivitiesResponse422ResponseBody$ {
  /** @deprecated use `ActivitiesOneActivitiesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesOneActivitiesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesOneActivitiesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesOneActivitiesResponse422ResponseBody$Outbound;
}

/** @internal */
export const ActivitiesOneActivitiesResponseDetail$inboundSchema: z.ZodType<
  ActivitiesOneActivitiesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesOneActivitiesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesOneActivitiesResponseDetail$outboundSchema: z.ZodType<
  ActivitiesOneActivitiesResponseDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesOneActivitiesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneActivitiesResponseDetail$ {
  /** @deprecated use `ActivitiesOneActivitiesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesOneActivitiesResponseDetail$inboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesOneActivitiesResponseDetail$outboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponseDetail$Outbound` instead. */
  export type Outbound = ActivitiesOneActivitiesResponseDetail$Outbound;
}

export function activitiesOneActivitiesResponseDetailToJSON(
  activitiesOneActivitiesResponseDetail: ActivitiesOneActivitiesResponseDetail,
): string {
  return JSON.stringify(
    ActivitiesOneActivitiesResponseDetail$outboundSchema.parse(
      activitiesOneActivitiesResponseDetail,
    ),
  );
}

export function activitiesOneActivitiesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneActivitiesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesOneActivitiesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneActivitiesResponseDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneActivitiesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesOneActivitiesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesOneActivitiesResponse404ResponseBody(remapped);
    });

/** @internal */
export type ActivitiesOneActivitiesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesOneActivitiesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesOneActivitiesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesOneActivitiesResponse404ResponseBody
  > = z.instanceof(ActivitiesOneActivitiesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneActivitiesResponse404ResponseBody$ {
  /** @deprecated use `ActivitiesOneActivitiesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesOneActivitiesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesOneActivitiesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesOneActivitiesResponse404ResponseBody$Outbound;
}

/** @internal */
export const ActivitiesOneActivitiesResponseResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesOneActivitiesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesOneActivitiesResponseResponseBody(remapped);
    });

/** @internal */
export type ActivitiesOneActivitiesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesOneActivitiesResponseResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesOneActivitiesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesOneActivitiesResponseResponseBody
  > = z.instanceof(ActivitiesOneActivitiesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneActivitiesResponseResponseBody$ {
  /** @deprecated use `ActivitiesOneActivitiesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesOneActivitiesResponseResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesOneActivitiesResponseResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponseResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesOneActivitiesResponseResponseBody$Outbound;
}

/** @internal */
export const ActivitiesOneActivitiesDetail$inboundSchema: z.ZodType<
  ActivitiesOneActivitiesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesOneActivitiesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesOneActivitiesDetail$outboundSchema: z.ZodType<
  ActivitiesOneActivitiesDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesOneActivitiesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneActivitiesDetail$ {
  /** @deprecated use `ActivitiesOneActivitiesDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneActivitiesDetail$inboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneActivitiesDetail$outboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesDetail$Outbound` instead. */
  export type Outbound = ActivitiesOneActivitiesDetail$Outbound;
}

export function activitiesOneActivitiesDetailToJSON(
  activitiesOneActivitiesDetail: ActivitiesOneActivitiesDetail,
): string {
  return JSON.stringify(
    ActivitiesOneActivitiesDetail$outboundSchema.parse(
      activitiesOneActivitiesDetail,
    ),
  );
}

export function activitiesOneActivitiesDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneActivitiesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneActivitiesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneActivitiesDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneActivitiesResponseBody$inboundSchema: z.ZodType<
  ActivitiesOneActivitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ActivitiesOneActivitiesResponseBody(remapped);
  });

/** @internal */
export type ActivitiesOneActivitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesOneActivitiesResponseBody$outboundSchema: z.ZodType<
  ActivitiesOneActivitiesResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesOneActivitiesResponseBody
> = z.instanceof(ActivitiesOneActivitiesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneActivitiesResponseBody$ {
  /** @deprecated use `ActivitiesOneActivitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesOneActivitiesResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesOneActivitiesResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesOneActivitiesResponseBody$Outbound;
}

/** @internal */
export const ActivitiesOneDetail$inboundSchema: z.ZodType<
  ActivitiesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ActivitiesOneDetail$outboundSchema: z.ZodType<
  ActivitiesOneDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneDetail$ {
  /** @deprecated use `ActivitiesOneDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneDetail$inboundSchema;
  /** @deprecated use `ActivitiesOneDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneDetail$outboundSchema;
  /** @deprecated use `ActivitiesOneDetail$Outbound` instead. */
  export type Outbound = ActivitiesOneDetail$Outbound;
}

export function activitiesOneDetailToJSON(
  activitiesOneDetail: ActivitiesOneDetail,
): string {
  return JSON.stringify(
    ActivitiesOneDetail$outboundSchema.parse(activitiesOneDetail),
  );
}

export function activitiesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneResponseBody$inboundSchema: z.ZodType<
  ActivitiesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ActivitiesOneResponseBody(remapped);
  });

/** @internal */
export type ActivitiesOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesOneResponseBody$outboundSchema: z.ZodType<
  ActivitiesOneResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesOneResponseBody
> = z.instanceof(ActivitiesOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneResponseBody$ {
  /** @deprecated use `ActivitiesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesOneResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesOneResponseBody$Outbound;
}
