/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesAllHrisCompaniesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisCompaniesAllHrisCompaniesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unprocessable
 */
export class HrisCompaniesAllHrisCompaniesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesAllHrisCompaniesResponse422ResponseBodyData;

  constructor(err: HrisCompaniesAllHrisCompaniesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesAllHrisCompaniesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesAllHrisCompaniesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisCompaniesAllHrisCompaniesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * The specified resource was not found
 */
export class HrisCompaniesAllHrisCompaniesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesAllHrisCompaniesResponse404ResponseBodyData;

  constructor(err: HrisCompaniesAllHrisCompaniesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesAllHrisCompaniesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisCompaniesAllHrisCompaniesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Payment Required
 */
export class HrisCompaniesAllHrisCompaniesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesAllHrisCompaniesResponseResponseBodyData;

  constructor(err: HrisCompaniesAllHrisCompaniesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesAllHrisCompaniesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesAllHrisCompaniesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type HrisCompaniesAllHrisCompaniesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisCompaniesAllHrisCompaniesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesAllHrisCompaniesResponseBodyData;

  constructor(err: HrisCompaniesAllHrisCompaniesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesAllHrisCompaniesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisCompaniesAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisCompaniesAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesAllResponseBodyData;

  constructor(err: HrisCompaniesAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesAllResponseBody";
  }
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponse422Detail$inboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesAllHrisCompaniesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponse422Detail$outboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAllHrisCompaniesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesResponse422Detail$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAllHrisCompaniesResponse422Detail$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesResponse422Detail$outboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisCompaniesAllHrisCompaniesResponse422Detail$Outbound;
}

export function hrisCompaniesAllHrisCompaniesResponse422DetailToJSON(
  hrisCompaniesAllHrisCompaniesResponse422Detail:
    HrisCompaniesAllHrisCompaniesResponse422Detail,
): string {
  return JSON.stringify(
    HrisCompaniesAllHrisCompaniesResponse422Detail$outboundSchema.parse(
      hrisCompaniesAllHrisCompaniesResponse422Detail,
    ),
  );
}

export function hrisCompaniesAllHrisCompaniesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesAllHrisCompaniesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesAllHrisCompaniesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesAllHrisCompaniesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesAllHrisCompaniesResponse422ResponseBody(remapped);
    });

/** @internal */
export type HrisCompaniesAllHrisCompaniesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAllHrisCompaniesResponse422ResponseBody
  > = z.instanceof(HrisCompaniesAllHrisCompaniesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesResponse422ResponseBody$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAllHrisCompaniesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesAllHrisCompaniesResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponseDetail$inboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesAllHrisCompaniesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponseDetail$outboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAllHrisCompaniesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesResponseDetail$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAllHrisCompaniesResponseDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesResponseDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesAllHrisCompaniesResponseDetail$Outbound;
}

export function hrisCompaniesAllHrisCompaniesResponseDetailToJSON(
  hrisCompaniesAllHrisCompaniesResponseDetail:
    HrisCompaniesAllHrisCompaniesResponseDetail,
): string {
  return JSON.stringify(
    HrisCompaniesAllHrisCompaniesResponseDetail$outboundSchema.parse(
      hrisCompaniesAllHrisCompaniesResponseDetail,
    ),
  );
}

export function hrisCompaniesAllHrisCompaniesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesAllHrisCompaniesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesAllHrisCompaniesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesAllHrisCompaniesResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesAllHrisCompaniesResponse404ResponseBody(remapped);
    });

/** @internal */
export type HrisCompaniesAllHrisCompaniesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAllHrisCompaniesResponse404ResponseBody
  > = z.instanceof(HrisCompaniesAllHrisCompaniesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesResponse404ResponseBody$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAllHrisCompaniesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesAllHrisCompaniesResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesAllHrisCompaniesResponseResponseBody(remapped);
    });

/** @internal */
export type HrisCompaniesAllHrisCompaniesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAllHrisCompaniesResponseResponseBody
  > = z.instanceof(HrisCompaniesAllHrisCompaniesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesResponseResponseBody$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAllHrisCompaniesResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesAllHrisCompaniesResponseResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesDetail$inboundSchema: z.ZodType<
  HrisCompaniesAllHrisCompaniesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesAllHrisCompaniesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisCompaniesAllHrisCompaniesDetail$outboundSchema: z.ZodType<
  HrisCompaniesAllHrisCompaniesDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllHrisCompaniesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesDetail$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAllHrisCompaniesDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesAllHrisCompaniesDetail$Outbound;
}

export function hrisCompaniesAllHrisCompaniesDetailToJSON(
  hrisCompaniesAllHrisCompaniesDetail: HrisCompaniesAllHrisCompaniesDetail,
): string {
  return JSON.stringify(
    HrisCompaniesAllHrisCompaniesDetail$outboundSchema.parse(
      hrisCompaniesAllHrisCompaniesDetail,
    ),
  );
}

export function hrisCompaniesAllHrisCompaniesDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllHrisCompaniesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesAllHrisCompaniesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllHrisCompaniesDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesAllHrisCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisCompaniesAllHrisCompaniesResponseBody(remapped);
  });

/** @internal */
export type HrisCompaniesAllHrisCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAllHrisCompaniesResponseBody
  > = z.instanceof(HrisCompaniesAllHrisCompaniesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesResponseBody$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAllHrisCompaniesResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesAllHrisCompaniesResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesAllDetail$inboundSchema: z.ZodType<
  HrisCompaniesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisCompaniesAllDetail$outboundSchema: z.ZodType<
  HrisCompaniesAllDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllDetail$ {
  /** @deprecated use `HrisCompaniesAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesAllDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesAllDetail$Outbound;
}

export function hrisCompaniesAllDetailToJSON(
  hrisCompaniesAllDetail: HrisCompaniesAllDetail,
): string {
  return JSON.stringify(
    HrisCompaniesAllDetail$outboundSchema.parse(hrisCompaniesAllDetail),
  );
}

export function hrisCompaniesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisCompaniesAllResponseBody(remapped);
  });

/** @internal */
export type HrisCompaniesAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesAllResponseBody$outboundSchema: z.ZodType<
  HrisCompaniesAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllResponseBody
> = z.instanceof(HrisCompaniesAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllResponseBody$ {
  /** @deprecated use `HrisCompaniesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAllResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesAllResponseBody$Outbound;
}
