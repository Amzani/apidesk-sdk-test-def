/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail =
  | string
  | { [k: string]: any };

/**
 * Unprocessable
 */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * Unprocessable
 */
export class HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBodyData;

  constructor(
    err: HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name =
      "HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * The specified resource was not found
 */
export class HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBodyData;

  constructor(
    err: HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name =
      "HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * Payment Required
 */
export class HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBodyData;

  constructor(
    err: HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBodyData;

  constructor(err: HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisTimeOffRequestsAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisTimeOffRequestsAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsAllResponseBodyData;

  constructor(err: HrisTimeOffRequestsAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisTimeOffRequestsAllResponseBody";
  }
}

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$ {
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$Outbound;
}

export function hrisTimeOffRequestsAllHrisTimeOffRequestsResponse422DetailToJSON(
  hrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail:
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$outboundSchema
      .parse(hrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail),
  );
}

export function hrisTimeOffRequestsAllHrisTimeOffRequestsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$ {
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$Outbound;
}

export function hrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetailToJSON(
  hrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail:
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$outboundSchema
      .parse(hrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail),
  );
}

export function hrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAllHrisTimeOffRequestsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAllHrisTimeOffRequestsDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$ {
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$Outbound;
}

export function hrisTimeOffRequestsAllHrisTimeOffRequestsDetailToJSON(
  hrisTimeOffRequestsAllHrisTimeOffRequestsDetail:
    HrisTimeOffRequestsAllHrisTimeOffRequestsDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$outboundSchema.parse(
      hrisTimeOffRequestsAllHrisTimeOffRequestsDetail,
    ),
  );
}

export function hrisTimeOffRequestsAllHrisTimeOffRequestsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsAllHrisTimeOffRequestsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsAllHrisTimeOffRequestsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisTimeOffRequestsAllHrisTimeOffRequestsDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody
  > = z.instanceof(HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAllHrisTimeOffRequestsResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsAllDetail$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsAllDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisTimeOffRequestsAllDetail$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAllDetail$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAllDetail$ {
  /** @deprecated use `HrisTimeOffRequestsAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAllDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsAllDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllDetail$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAllDetail$Outbound;
}

export function hrisTimeOffRequestsAllDetailToJSON(
  hrisTimeOffRequestsAllDetail: HrisTimeOffRequestsAllDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAllDetail$outboundSchema.parse(
      hrisTimeOffRequestsAllDetail,
    ),
  );
}

export function hrisTimeOffRequestsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAllResponseBody$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisTimeOffRequestsAllResponseBody(remapped);
  });

/** @internal */
export type HrisTimeOffRequestsAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisTimeOffRequestsAllResponseBody$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAllResponseBody
> = z.instanceof(HrisTimeOffRequestsAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAllResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAllResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAllResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAllResponseBody$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAllResponseBody$Outbound;
}
