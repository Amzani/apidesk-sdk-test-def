/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsOneContactsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type ContactsOneContactsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class ContactsOneContactsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsOneContactsResponse422ResponseBodyData;

  constructor(err: ContactsOneContactsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsOneContactsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsOneContactsResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type ContactsOneContactsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class ContactsOneContactsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsOneContactsResponse404ResponseBodyData;

  constructor(err: ContactsOneContactsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsOneContactsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type ContactsOneContactsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class ContactsOneContactsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsOneContactsResponseResponseBodyData;

  constructor(err: ContactsOneContactsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsOneContactsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsOneContactsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type ContactsOneContactsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class ContactsOneContactsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsOneContactsResponseBodyData;

  constructor(err: ContactsOneContactsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsOneContactsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type ContactsOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class ContactsOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsOneResponseBodyData;

  constructor(err: ContactsOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsOneResponseBody";
  }
}

/** @internal */
export const ContactsOneContactsResponse422Detail$inboundSchema: z.ZodType<
  ContactsOneContactsResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsOneContactsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsOneContactsResponse422Detail$outboundSchema: z.ZodType<
  ContactsOneContactsResponse422Detail$Outbound,
  z.ZodTypeDef,
  ContactsOneContactsResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsResponse422Detail$ {
  /** @deprecated use `ContactsOneContactsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    ContactsOneContactsResponse422Detail$inboundSchema;
  /** @deprecated use `ContactsOneContactsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    ContactsOneContactsResponse422Detail$outboundSchema;
  /** @deprecated use `ContactsOneContactsResponse422Detail$Outbound` instead. */
  export type Outbound = ContactsOneContactsResponse422Detail$Outbound;
}

export function contactsOneContactsResponse422DetailToJSON(
  contactsOneContactsResponse422Detail: ContactsOneContactsResponse422Detail,
): string {
  return JSON.stringify(
    ContactsOneContactsResponse422Detail$outboundSchema.parse(
      contactsOneContactsResponse422Detail,
    ),
  );
}

export function contactsOneContactsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneContactsResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContactsOneContactsResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneContactsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const ContactsOneContactsResponse422ResponseBody$inboundSchema:
  z.ZodType<ContactsOneContactsResponse422ResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      status_code: z.number().optional(),
      error: z.string().optional(),
      type_name: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    })
      .transform((v) => {
        const remapped = remap$(v, {
          "status_code": "statusCode",
          "type_name": "typeName",
        });

        return new ContactsOneContactsResponse422ResponseBody(remapped);
      });

/** @internal */
export type ContactsOneContactsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsOneContactsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    ContactsOneContactsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsOneContactsResponse422ResponseBody
  > = z.instanceof(ContactsOneContactsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsResponse422ResponseBody$ {
  /** @deprecated use `ContactsOneContactsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsOneContactsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `ContactsOneContactsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsOneContactsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `ContactsOneContactsResponse422ResponseBody$Outbound` instead. */
  export type Outbound = ContactsOneContactsResponse422ResponseBody$Outbound;
}

/** @internal */
export const ContactsOneContactsResponseDetail$inboundSchema: z.ZodType<
  ContactsOneContactsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsOneContactsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsOneContactsResponseDetail$outboundSchema: z.ZodType<
  ContactsOneContactsResponseDetail$Outbound,
  z.ZodTypeDef,
  ContactsOneContactsResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsResponseDetail$ {
  /** @deprecated use `ContactsOneContactsResponseDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsOneContactsResponseDetail$inboundSchema;
  /** @deprecated use `ContactsOneContactsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    ContactsOneContactsResponseDetail$outboundSchema;
  /** @deprecated use `ContactsOneContactsResponseDetail$Outbound` instead. */
  export type Outbound = ContactsOneContactsResponseDetail$Outbound;
}

export function contactsOneContactsResponseDetailToJSON(
  contactsOneContactsResponseDetail: ContactsOneContactsResponseDetail,
): string {
  return JSON.stringify(
    ContactsOneContactsResponseDetail$outboundSchema.parse(
      contactsOneContactsResponseDetail,
    ),
  );
}

export function contactsOneContactsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneContactsResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneContactsResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneContactsResponseDetail' from JSON`,
  );
}

/** @internal */
export const ContactsOneContactsResponse404ResponseBody$inboundSchema:
  z.ZodType<ContactsOneContactsResponse404ResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      status_code: z.number().optional(),
      error: z.string().optional(),
      type_name: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    })
      .transform((v) => {
        const remapped = remap$(v, {
          "status_code": "statusCode",
          "type_name": "typeName",
        });

        return new ContactsOneContactsResponse404ResponseBody(remapped);
      });

/** @internal */
export type ContactsOneContactsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsOneContactsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    ContactsOneContactsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsOneContactsResponse404ResponseBody
  > = z.instanceof(ContactsOneContactsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsResponse404ResponseBody$ {
  /** @deprecated use `ContactsOneContactsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsOneContactsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `ContactsOneContactsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsOneContactsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `ContactsOneContactsResponse404ResponseBody$Outbound` instead. */
  export type Outbound = ContactsOneContactsResponse404ResponseBody$Outbound;
}

/** @internal */
export const ContactsOneContactsResponseResponseBody$inboundSchema: z.ZodType<
  ContactsOneContactsResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsOneContactsResponseResponseBody(remapped);
  });

/** @internal */
export type ContactsOneContactsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsOneContactsResponseResponseBody$outboundSchema: z.ZodType<
  ContactsOneContactsResponseResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsOneContactsResponseResponseBody
> = z.instanceof(ContactsOneContactsResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsResponseResponseBody$ {
  /** @deprecated use `ContactsOneContactsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsOneContactsResponseResponseBody$inboundSchema;
  /** @deprecated use `ContactsOneContactsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsOneContactsResponseResponseBody$outboundSchema;
  /** @deprecated use `ContactsOneContactsResponseResponseBody$Outbound` instead. */
  export type Outbound = ContactsOneContactsResponseResponseBody$Outbound;
}

/** @internal */
export const ContactsOneContactsDetail$inboundSchema: z.ZodType<
  ContactsOneContactsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsOneContactsDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsOneContactsDetail$outboundSchema: z.ZodType<
  ContactsOneContactsDetail$Outbound,
  z.ZodTypeDef,
  ContactsOneContactsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsDetail$ {
  /** @deprecated use `ContactsOneContactsDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsOneContactsDetail$inboundSchema;
  /** @deprecated use `ContactsOneContactsDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsOneContactsDetail$outboundSchema;
  /** @deprecated use `ContactsOneContactsDetail$Outbound` instead. */
  export type Outbound = ContactsOneContactsDetail$Outbound;
}

export function contactsOneContactsDetailToJSON(
  contactsOneContactsDetail: ContactsOneContactsDetail,
): string {
  return JSON.stringify(
    ContactsOneContactsDetail$outboundSchema.parse(contactsOneContactsDetail),
  );
}

export function contactsOneContactsDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneContactsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneContactsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneContactsDetail' from JSON`,
  );
}

/** @internal */
export const ContactsOneContactsResponseBody$inboundSchema: z.ZodType<
  ContactsOneContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsOneContactsResponseBody(remapped);
  });

/** @internal */
export type ContactsOneContactsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsOneContactsResponseBody$outboundSchema: z.ZodType<
  ContactsOneContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsOneContactsResponseBody
> = z.instanceof(ContactsOneContactsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsResponseBody$ {
  /** @deprecated use `ContactsOneContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsOneContactsResponseBody$inboundSchema;
  /** @deprecated use `ContactsOneContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsOneContactsResponseBody$outboundSchema;
  /** @deprecated use `ContactsOneContactsResponseBody$Outbound` instead. */
  export type Outbound = ContactsOneContactsResponseBody$Outbound;
}

/** @internal */
export const ContactsOneDetail$inboundSchema: z.ZodType<
  ContactsOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsOneDetail$outboundSchema: z.ZodType<
  ContactsOneDetail$Outbound,
  z.ZodTypeDef,
  ContactsOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneDetail$ {
  /** @deprecated use `ContactsOneDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsOneDetail$inboundSchema;
  /** @deprecated use `ContactsOneDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsOneDetail$outboundSchema;
  /** @deprecated use `ContactsOneDetail$Outbound` instead. */
  export type Outbound = ContactsOneDetail$Outbound;
}

export function contactsOneDetailToJSON(
  contactsOneDetail: ContactsOneDetail,
): string {
  return JSON.stringify(
    ContactsOneDetail$outboundSchema.parse(contactsOneDetail),
  );
}

export function contactsOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneDetail' from JSON`,
  );
}

/** @internal */
export const ContactsOneResponseBody$inboundSchema: z.ZodType<
  ContactsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsOneResponseBody(remapped);
  });

/** @internal */
export type ContactsOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsOneResponseBody$outboundSchema: z.ZodType<
  ContactsOneResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsOneResponseBody
> = z.instanceof(ContactsOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneResponseBody$ {
  /** @deprecated use `ContactsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsOneResponseBody$inboundSchema;
  /** @deprecated use `ContactsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsOneResponseBody$outboundSchema;
  /** @deprecated use `ContactsOneResponseBody$Outbound` instead. */
  export type Outbound = ContactsOneResponseBody$Outbound;
}
