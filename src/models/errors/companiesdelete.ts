/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesDeleteCompaniesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type CompaniesDeleteCompaniesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class CompaniesDeleteCompaniesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesDeleteCompaniesResponse422ResponseBodyData;

  constructor(err: CompaniesDeleteCompaniesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesDeleteCompaniesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesDeleteCompaniesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type CompaniesDeleteCompaniesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class CompaniesDeleteCompaniesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesDeleteCompaniesResponse404ResponseBodyData;

  constructor(err: CompaniesDeleteCompaniesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesDeleteCompaniesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type CompaniesDeleteCompaniesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class CompaniesDeleteCompaniesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesDeleteCompaniesResponseResponseBodyData;

  constructor(err: CompaniesDeleteCompaniesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesDeleteCompaniesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesDeleteCompaniesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type CompaniesDeleteCompaniesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class CompaniesDeleteCompaniesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesDeleteCompaniesResponseBodyData;

  constructor(err: CompaniesDeleteCompaniesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesDeleteCompaniesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesDeleteDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type CompaniesDeleteResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class CompaniesDeleteResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesDeleteResponseBodyData;

  constructor(err: CompaniesDeleteResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesDeleteResponseBody";
  }
}

/** @internal */
export const CompaniesDeleteCompaniesResponse422Detail$inboundSchema: z.ZodType<
  CompaniesDeleteCompaniesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesDeleteCompaniesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesDeleteCompaniesResponse422Detail$outboundSchema:
  z.ZodType<
    CompaniesDeleteCompaniesResponse422Detail$Outbound,
    z.ZodTypeDef,
    CompaniesDeleteCompaniesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteCompaniesResponse422Detail$ {
  /** @deprecated use `CompaniesDeleteCompaniesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesDeleteCompaniesResponse422Detail$inboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesDeleteCompaniesResponse422Detail$outboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponse422Detail$Outbound` instead. */
  export type Outbound = CompaniesDeleteCompaniesResponse422Detail$Outbound;
}

export function companiesDeleteCompaniesResponse422DetailToJSON(
  companiesDeleteCompaniesResponse422Detail:
    CompaniesDeleteCompaniesResponse422Detail,
): string {
  return JSON.stringify(
    CompaniesDeleteCompaniesResponse422Detail$outboundSchema.parse(
      companiesDeleteCompaniesResponse422Detail,
    ),
  );
}

export function companiesDeleteCompaniesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  CompaniesDeleteCompaniesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesDeleteCompaniesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompaniesDeleteCompaniesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteCompaniesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    CompaniesDeleteCompaniesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new CompaniesDeleteCompaniesResponse422ResponseBody(remapped);
    });

/** @internal */
export type CompaniesDeleteCompaniesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesDeleteCompaniesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    CompaniesDeleteCompaniesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesDeleteCompaniesResponse422ResponseBody
  > = z.instanceof(CompaniesDeleteCompaniesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteCompaniesResponse422ResponseBody$ {
  /** @deprecated use `CompaniesDeleteCompaniesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesDeleteCompaniesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesDeleteCompaniesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    CompaniesDeleteCompaniesResponse422ResponseBody$Outbound;
}

/** @internal */
export const CompaniesDeleteCompaniesResponseDetail$inboundSchema: z.ZodType<
  CompaniesDeleteCompaniesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesDeleteCompaniesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesDeleteCompaniesResponseDetail$outboundSchema: z.ZodType<
  CompaniesDeleteCompaniesResponseDetail$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteCompaniesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteCompaniesResponseDetail$ {
  /** @deprecated use `CompaniesDeleteCompaniesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesDeleteCompaniesResponseDetail$inboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesDeleteCompaniesResponseDetail$outboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponseDetail$Outbound` instead. */
  export type Outbound = CompaniesDeleteCompaniesResponseDetail$Outbound;
}

export function companiesDeleteCompaniesResponseDetailToJSON(
  companiesDeleteCompaniesResponseDetail:
    CompaniesDeleteCompaniesResponseDetail,
): string {
  return JSON.stringify(
    CompaniesDeleteCompaniesResponseDetail$outboundSchema.parse(
      companiesDeleteCompaniesResponseDetail,
    ),
  );
}

export function companiesDeleteCompaniesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteCompaniesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesDeleteCompaniesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteCompaniesResponseDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteCompaniesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    CompaniesDeleteCompaniesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new CompaniesDeleteCompaniesResponse404ResponseBody(remapped);
    });

/** @internal */
export type CompaniesDeleteCompaniesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesDeleteCompaniesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    CompaniesDeleteCompaniesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesDeleteCompaniesResponse404ResponseBody
  > = z.instanceof(CompaniesDeleteCompaniesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteCompaniesResponse404ResponseBody$ {
  /** @deprecated use `CompaniesDeleteCompaniesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesDeleteCompaniesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesDeleteCompaniesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    CompaniesDeleteCompaniesResponse404ResponseBody$Outbound;
}

/** @internal */
export const CompaniesDeleteCompaniesResponseResponseBody$inboundSchema:
  z.ZodType<
    CompaniesDeleteCompaniesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new CompaniesDeleteCompaniesResponseResponseBody(remapped);
    });

/** @internal */
export type CompaniesDeleteCompaniesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesDeleteCompaniesResponseResponseBody$outboundSchema:
  z.ZodType<
    CompaniesDeleteCompaniesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesDeleteCompaniesResponseResponseBody
  > = z.instanceof(CompaniesDeleteCompaniesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteCompaniesResponseResponseBody$ {
  /** @deprecated use `CompaniesDeleteCompaniesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesDeleteCompaniesResponseResponseBody$inboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesDeleteCompaniesResponseResponseBody$outboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponseResponseBody$Outbound` instead. */
  export type Outbound = CompaniesDeleteCompaniesResponseResponseBody$Outbound;
}

/** @internal */
export const CompaniesDeleteCompaniesDetail$inboundSchema: z.ZodType<
  CompaniesDeleteCompaniesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesDeleteCompaniesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesDeleteCompaniesDetail$outboundSchema: z.ZodType<
  CompaniesDeleteCompaniesDetail$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteCompaniesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteCompaniesDetail$ {
  /** @deprecated use `CompaniesDeleteCompaniesDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteCompaniesDetail$inboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteCompaniesDetail$outboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesDetail$Outbound` instead. */
  export type Outbound = CompaniesDeleteCompaniesDetail$Outbound;
}

export function companiesDeleteCompaniesDetailToJSON(
  companiesDeleteCompaniesDetail: CompaniesDeleteCompaniesDetail,
): string {
  return JSON.stringify(
    CompaniesDeleteCompaniesDetail$outboundSchema.parse(
      companiesDeleteCompaniesDetail,
    ),
  );
}

export function companiesDeleteCompaniesDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteCompaniesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteCompaniesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteCompaniesDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteCompaniesResponseBody$inboundSchema: z.ZodType<
  CompaniesDeleteCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new CompaniesDeleteCompaniesResponseBody(remapped);
  });

/** @internal */
export type CompaniesDeleteCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesDeleteCompaniesResponseBody$outboundSchema: z.ZodType<
  CompaniesDeleteCompaniesResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteCompaniesResponseBody
> = z.instanceof(CompaniesDeleteCompaniesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteCompaniesResponseBody$ {
  /** @deprecated use `CompaniesDeleteCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesDeleteCompaniesResponseBody$inboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesDeleteCompaniesResponseBody$outboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponseBody$Outbound` instead. */
  export type Outbound = CompaniesDeleteCompaniesResponseBody$Outbound;
}

/** @internal */
export const CompaniesDeleteDetail$inboundSchema: z.ZodType<
  CompaniesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const CompaniesDeleteDetail$outboundSchema: z.ZodType<
  CompaniesDeleteDetail$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteDetail$ {
  /** @deprecated use `CompaniesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteDetail$inboundSchema;
  /** @deprecated use `CompaniesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteDetail$outboundSchema;
  /** @deprecated use `CompaniesDeleteDetail$Outbound` instead. */
  export type Outbound = CompaniesDeleteDetail$Outbound;
}

export function companiesDeleteDetailToJSON(
  companiesDeleteDetail: CompaniesDeleteDetail,
): string {
  return JSON.stringify(
    CompaniesDeleteDetail$outboundSchema.parse(companiesDeleteDetail),
  );
}

export function companiesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteResponseBody$inboundSchema: z.ZodType<
  CompaniesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new CompaniesDeleteResponseBody(remapped);
  });

/** @internal */
export type CompaniesDeleteResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesDeleteResponseBody$outboundSchema: z.ZodType<
  CompaniesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteResponseBody
> = z.instanceof(CompaniesDeleteResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteResponseBody$ {
  /** @deprecated use `CompaniesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteResponseBody$inboundSchema;
  /** @deprecated use `CompaniesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteResponseBody$outboundSchema;
  /** @deprecated use `CompaniesDeleteResponseBody$Outbound` instead. */
  export type Outbound = CompaniesDeleteResponseBody$Outbound;
}
