/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesUpdateNotesResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type NotesUpdateNotesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class NotesUpdateNotesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesUpdateNotesResponse422ResponseBodyData;

  constructor(err: NotesUpdateNotesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesUpdateNotesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesUpdateNotesResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type NotesUpdateNotesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class NotesUpdateNotesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesUpdateNotesResponse404ResponseBodyData;

  constructor(err: NotesUpdateNotesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesUpdateNotesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type NotesUpdateNotesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class NotesUpdateNotesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesUpdateNotesResponseResponseBodyData;

  constructor(err: NotesUpdateNotesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesUpdateNotesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesUpdateNotesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type NotesUpdateNotesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class NotesUpdateNotesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesUpdateNotesResponseBodyData;

  constructor(err: NotesUpdateNotesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesUpdateNotesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type NotesUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class NotesUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesUpdateResponseBodyData;

  constructor(err: NotesUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesUpdateResponseBody";
  }
}

/** @internal */
export const NotesUpdateNotesResponse422Detail$inboundSchema: z.ZodType<
  NotesUpdateNotesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesUpdateNotesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const NotesUpdateNotesResponse422Detail$outboundSchema: z.ZodType<
  NotesUpdateNotesResponse422Detail$Outbound,
  z.ZodTypeDef,
  NotesUpdateNotesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesUpdateNotesResponse422Detail$ {
  /** @deprecated use `NotesUpdateNotesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = NotesUpdateNotesResponse422Detail$inboundSchema;
  /** @deprecated use `NotesUpdateNotesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    NotesUpdateNotesResponse422Detail$outboundSchema;
  /** @deprecated use `NotesUpdateNotesResponse422Detail$Outbound` instead. */
  export type Outbound = NotesUpdateNotesResponse422Detail$Outbound;
}

export function notesUpdateNotesResponse422DetailToJSON(
  notesUpdateNotesResponse422Detail: NotesUpdateNotesResponse422Detail,
): string {
  return JSON.stringify(
    NotesUpdateNotesResponse422Detail$outboundSchema.parse(
      notesUpdateNotesResponse422Detail,
    ),
  );
}

export function notesUpdateNotesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesUpdateNotesResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesUpdateNotesResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesUpdateNotesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const NotesUpdateNotesResponse422ResponseBody$inboundSchema: z.ZodType<
  NotesUpdateNotesResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesUpdateNotesResponse422ResponseBody(remapped);
  });

/** @internal */
export type NotesUpdateNotesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesUpdateNotesResponse422ResponseBody$outboundSchema: z.ZodType<
  NotesUpdateNotesResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  NotesUpdateNotesResponse422ResponseBody
> = z.instanceof(NotesUpdateNotesResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesUpdateNotesResponse422ResponseBody$ {
  /** @deprecated use `NotesUpdateNotesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotesUpdateNotesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `NotesUpdateNotesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesUpdateNotesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `NotesUpdateNotesResponse422ResponseBody$Outbound` instead. */
  export type Outbound = NotesUpdateNotesResponse422ResponseBody$Outbound;
}

/** @internal */
export const NotesUpdateNotesResponseDetail$inboundSchema: z.ZodType<
  NotesUpdateNotesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesUpdateNotesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const NotesUpdateNotesResponseDetail$outboundSchema: z.ZodType<
  NotesUpdateNotesResponseDetail$Outbound,
  z.ZodTypeDef,
  NotesUpdateNotesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesUpdateNotesResponseDetail$ {
  /** @deprecated use `NotesUpdateNotesResponseDetail$inboundSchema` instead. */
  export const inboundSchema = NotesUpdateNotesResponseDetail$inboundSchema;
  /** @deprecated use `NotesUpdateNotesResponseDetail$outboundSchema` instead. */
  export const outboundSchema = NotesUpdateNotesResponseDetail$outboundSchema;
  /** @deprecated use `NotesUpdateNotesResponseDetail$Outbound` instead. */
  export type Outbound = NotesUpdateNotesResponseDetail$Outbound;
}

export function notesUpdateNotesResponseDetailToJSON(
  notesUpdateNotesResponseDetail: NotesUpdateNotesResponseDetail,
): string {
  return JSON.stringify(
    NotesUpdateNotesResponseDetail$outboundSchema.parse(
      notesUpdateNotesResponseDetail,
    ),
  );
}

export function notesUpdateNotesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesUpdateNotesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesUpdateNotesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesUpdateNotesResponseDetail' from JSON`,
  );
}

/** @internal */
export const NotesUpdateNotesResponse404ResponseBody$inboundSchema: z.ZodType<
  NotesUpdateNotesResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesUpdateNotesResponse404ResponseBody(remapped);
  });

/** @internal */
export type NotesUpdateNotesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesUpdateNotesResponse404ResponseBody$outboundSchema: z.ZodType<
  NotesUpdateNotesResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  NotesUpdateNotesResponse404ResponseBody
> = z.instanceof(NotesUpdateNotesResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesUpdateNotesResponse404ResponseBody$ {
  /** @deprecated use `NotesUpdateNotesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotesUpdateNotesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `NotesUpdateNotesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesUpdateNotesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `NotesUpdateNotesResponse404ResponseBody$Outbound` instead. */
  export type Outbound = NotesUpdateNotesResponse404ResponseBody$Outbound;
}

/** @internal */
export const NotesUpdateNotesResponseResponseBody$inboundSchema: z.ZodType<
  NotesUpdateNotesResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesUpdateNotesResponseResponseBody(remapped);
  });

/** @internal */
export type NotesUpdateNotesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesUpdateNotesResponseResponseBody$outboundSchema: z.ZodType<
  NotesUpdateNotesResponseResponseBody$Outbound,
  z.ZodTypeDef,
  NotesUpdateNotesResponseResponseBody
> = z.instanceof(NotesUpdateNotesResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesUpdateNotesResponseResponseBody$ {
  /** @deprecated use `NotesUpdateNotesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotesUpdateNotesResponseResponseBody$inboundSchema;
  /** @deprecated use `NotesUpdateNotesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesUpdateNotesResponseResponseBody$outboundSchema;
  /** @deprecated use `NotesUpdateNotesResponseResponseBody$Outbound` instead. */
  export type Outbound = NotesUpdateNotesResponseResponseBody$Outbound;
}

/** @internal */
export const NotesUpdateNotesDetail$inboundSchema: z.ZodType<
  NotesUpdateNotesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesUpdateNotesDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const NotesUpdateNotesDetail$outboundSchema: z.ZodType<
  NotesUpdateNotesDetail$Outbound,
  z.ZodTypeDef,
  NotesUpdateNotesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesUpdateNotesDetail$ {
  /** @deprecated use `NotesUpdateNotesDetail$inboundSchema` instead. */
  export const inboundSchema = NotesUpdateNotesDetail$inboundSchema;
  /** @deprecated use `NotesUpdateNotesDetail$outboundSchema` instead. */
  export const outboundSchema = NotesUpdateNotesDetail$outboundSchema;
  /** @deprecated use `NotesUpdateNotesDetail$Outbound` instead. */
  export type Outbound = NotesUpdateNotesDetail$Outbound;
}

export function notesUpdateNotesDetailToJSON(
  notesUpdateNotesDetail: NotesUpdateNotesDetail,
): string {
  return JSON.stringify(
    NotesUpdateNotesDetail$outboundSchema.parse(notesUpdateNotesDetail),
  );
}

export function notesUpdateNotesDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesUpdateNotesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesUpdateNotesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesUpdateNotesDetail' from JSON`,
  );
}

/** @internal */
export const NotesUpdateNotesResponseBody$inboundSchema: z.ZodType<
  NotesUpdateNotesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesUpdateNotesResponseBody(remapped);
  });

/** @internal */
export type NotesUpdateNotesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesUpdateNotesResponseBody$outboundSchema: z.ZodType<
  NotesUpdateNotesResponseBody$Outbound,
  z.ZodTypeDef,
  NotesUpdateNotesResponseBody
> = z.instanceof(NotesUpdateNotesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesUpdateNotesResponseBody$ {
  /** @deprecated use `NotesUpdateNotesResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesUpdateNotesResponseBody$inboundSchema;
  /** @deprecated use `NotesUpdateNotesResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesUpdateNotesResponseBody$outboundSchema;
  /** @deprecated use `NotesUpdateNotesResponseBody$Outbound` instead. */
  export type Outbound = NotesUpdateNotesResponseBody$Outbound;
}

/** @internal */
export const NotesUpdateDetail$inboundSchema: z.ZodType<
  NotesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const NotesUpdateDetail$outboundSchema: z.ZodType<
  NotesUpdateDetail$Outbound,
  z.ZodTypeDef,
  NotesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesUpdateDetail$ {
  /** @deprecated use `NotesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = NotesUpdateDetail$inboundSchema;
  /** @deprecated use `NotesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = NotesUpdateDetail$outboundSchema;
  /** @deprecated use `NotesUpdateDetail$Outbound` instead. */
  export type Outbound = NotesUpdateDetail$Outbound;
}

export function notesUpdateDetailToJSON(
  notesUpdateDetail: NotesUpdateDetail,
): string {
  return JSON.stringify(
    NotesUpdateDetail$outboundSchema.parse(notesUpdateDetail),
  );
}

export function notesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const NotesUpdateResponseBody$inboundSchema: z.ZodType<
  NotesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesUpdateResponseBody(remapped);
  });

/** @internal */
export type NotesUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesUpdateResponseBody$outboundSchema: z.ZodType<
  NotesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  NotesUpdateResponseBody
> = z.instanceof(NotesUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesUpdateResponseBody$ {
  /** @deprecated use `NotesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesUpdateResponseBody$inboundSchema;
  /** @deprecated use `NotesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesUpdateResponseBody$outboundSchema;
  /** @deprecated use `NotesUpdateResponseBody$Outbound` instead. */
  export type Outbound = NotesUpdateResponseBody$Outbound;
}
