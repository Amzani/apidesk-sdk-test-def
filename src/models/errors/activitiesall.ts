/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesAllActivitiesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type ActivitiesAllActivitiesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class ActivitiesAllActivitiesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesAllActivitiesResponse422ResponseBodyData;

  constructor(err: ActivitiesAllActivitiesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesAllActivitiesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesAllActivitiesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type ActivitiesAllActivitiesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class ActivitiesAllActivitiesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesAllActivitiesResponse404ResponseBodyData;

  constructor(err: ActivitiesAllActivitiesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesAllActivitiesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type ActivitiesAllActivitiesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class ActivitiesAllActivitiesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesAllActivitiesResponseResponseBodyData;

  constructor(err: ActivitiesAllActivitiesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesAllActivitiesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesAllActivitiesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type ActivitiesAllActivitiesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class ActivitiesAllActivitiesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesAllActivitiesResponseBodyData;

  constructor(err: ActivitiesAllActivitiesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesAllActivitiesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type ActivitiesAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class ActivitiesAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesAllResponseBodyData;

  constructor(err: ActivitiesAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesAllResponseBody";
  }
}

/** @internal */
export const ActivitiesAllActivitiesResponse422Detail$inboundSchema: z.ZodType<
  ActivitiesAllActivitiesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesAllActivitiesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesAllActivitiesResponse422Detail$outboundSchema: z.ZodType<
  ActivitiesAllActivitiesResponse422Detail$Outbound,
  z.ZodTypeDef,
  ActivitiesAllActivitiesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllActivitiesResponse422Detail$ {
  /** @deprecated use `ActivitiesAllActivitiesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAllActivitiesResponse422Detail$inboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAllActivitiesResponse422Detail$outboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponse422Detail$Outbound` instead. */
  export type Outbound = ActivitiesAllActivitiesResponse422Detail$Outbound;
}

export function activitiesAllActivitiesResponse422DetailToJSON(
  activitiesAllActivitiesResponse422Detail:
    ActivitiesAllActivitiesResponse422Detail,
): string {
  return JSON.stringify(
    ActivitiesAllActivitiesResponse422Detail$outboundSchema.parse(
      activitiesAllActivitiesResponse422Detail,
    ),
  );
}

export function activitiesAllActivitiesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivitiesAllActivitiesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesAllActivitiesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivitiesAllActivitiesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllActivitiesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesAllActivitiesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesAllActivitiesResponse422ResponseBody(remapped);
    });

/** @internal */
export type ActivitiesAllActivitiesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAllActivitiesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesAllActivitiesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesAllActivitiesResponse422ResponseBody
  > = z.instanceof(ActivitiesAllActivitiesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllActivitiesResponse422ResponseBody$ {
  /** @deprecated use `ActivitiesAllActivitiesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAllActivitiesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAllActivitiesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesAllActivitiesResponse422ResponseBody$Outbound;
}

/** @internal */
export const ActivitiesAllActivitiesResponseDetail$inboundSchema: z.ZodType<
  ActivitiesAllActivitiesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesAllActivitiesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesAllActivitiesResponseDetail$outboundSchema: z.ZodType<
  ActivitiesAllActivitiesResponseDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesAllActivitiesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllActivitiesResponseDetail$ {
  /** @deprecated use `ActivitiesAllActivitiesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAllActivitiesResponseDetail$inboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAllActivitiesResponseDetail$outboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponseDetail$Outbound` instead. */
  export type Outbound = ActivitiesAllActivitiesResponseDetail$Outbound;
}

export function activitiesAllActivitiesResponseDetailToJSON(
  activitiesAllActivitiesResponseDetail: ActivitiesAllActivitiesResponseDetail,
): string {
  return JSON.stringify(
    ActivitiesAllActivitiesResponseDetail$outboundSchema.parse(
      activitiesAllActivitiesResponseDetail,
    ),
  );
}

export function activitiesAllActivitiesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllActivitiesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesAllActivitiesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllActivitiesResponseDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllActivitiesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesAllActivitiesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesAllActivitiesResponse404ResponseBody(remapped);
    });

/** @internal */
export type ActivitiesAllActivitiesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAllActivitiesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesAllActivitiesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesAllActivitiesResponse404ResponseBody
  > = z.instanceof(ActivitiesAllActivitiesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllActivitiesResponse404ResponseBody$ {
  /** @deprecated use `ActivitiesAllActivitiesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAllActivitiesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAllActivitiesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesAllActivitiesResponse404ResponseBody$Outbound;
}

/** @internal */
export const ActivitiesAllActivitiesResponseResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesAllActivitiesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesAllActivitiesResponseResponseBody(remapped);
    });

/** @internal */
export type ActivitiesAllActivitiesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAllActivitiesResponseResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesAllActivitiesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesAllActivitiesResponseResponseBody
  > = z.instanceof(ActivitiesAllActivitiesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllActivitiesResponseResponseBody$ {
  /** @deprecated use `ActivitiesAllActivitiesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAllActivitiesResponseResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAllActivitiesResponseResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponseResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesAllActivitiesResponseResponseBody$Outbound;
}

/** @internal */
export const ActivitiesAllActivitiesDetail$inboundSchema: z.ZodType<
  ActivitiesAllActivitiesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesAllActivitiesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesAllActivitiesDetail$outboundSchema: z.ZodType<
  ActivitiesAllActivitiesDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesAllActivitiesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllActivitiesDetail$ {
  /** @deprecated use `ActivitiesAllActivitiesDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllActivitiesDetail$inboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllActivitiesDetail$outboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesDetail$Outbound` instead. */
  export type Outbound = ActivitiesAllActivitiesDetail$Outbound;
}

export function activitiesAllActivitiesDetailToJSON(
  activitiesAllActivitiesDetail: ActivitiesAllActivitiesDetail,
): string {
  return JSON.stringify(
    ActivitiesAllActivitiesDetail$outboundSchema.parse(
      activitiesAllActivitiesDetail,
    ),
  );
}

export function activitiesAllActivitiesDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllActivitiesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllActivitiesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllActivitiesDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllActivitiesResponseBody$inboundSchema: z.ZodType<
  ActivitiesAllActivitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ActivitiesAllActivitiesResponseBody(remapped);
  });

/** @internal */
export type ActivitiesAllActivitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAllActivitiesResponseBody$outboundSchema: z.ZodType<
  ActivitiesAllActivitiesResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesAllActivitiesResponseBody
> = z.instanceof(ActivitiesAllActivitiesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllActivitiesResponseBody$ {
  /** @deprecated use `ActivitiesAllActivitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAllActivitiesResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAllActivitiesResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesAllActivitiesResponseBody$Outbound;
}

/** @internal */
export const ActivitiesAllDetail$inboundSchema: z.ZodType<
  ActivitiesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ActivitiesAllDetail$outboundSchema: z.ZodType<
  ActivitiesAllDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllDetail$ {
  /** @deprecated use `ActivitiesAllDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllDetail$inboundSchema;
  /** @deprecated use `ActivitiesAllDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllDetail$outboundSchema;
  /** @deprecated use `ActivitiesAllDetail$Outbound` instead. */
  export type Outbound = ActivitiesAllDetail$Outbound;
}

export function activitiesAllDetailToJSON(
  activitiesAllDetail: ActivitiesAllDetail,
): string {
  return JSON.stringify(
    ActivitiesAllDetail$outboundSchema.parse(activitiesAllDetail),
  );
}

export function activitiesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllResponseBody$inboundSchema: z.ZodType<
  ActivitiesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ActivitiesAllResponseBody(remapped);
  });

/** @internal */
export type ActivitiesAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAllResponseBody$outboundSchema: z.ZodType<
  ActivitiesAllResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesAllResponseBody
> = z.instanceof(ActivitiesAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllResponseBody$ {
  /** @deprecated use `ActivitiesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAllResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesAllResponseBody$Outbound;
}
