/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail =
  | string
  | { [k: string]: any };

/**
 * Unprocessable
 */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
  };

/**
 * Unprocessable
 */
export class HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBodyData;

  constructor(
    err: HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name =
      "HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail =
  | string
  | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
  };

/**
 * The specified resource was not found
 */
export class HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBodyData;

  constructor(
    err: HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name =
      "HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
  };

/**
 * Payment Required
 */
export class HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBodyData;

  constructor(
    err: HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name =
      "HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBodyData;

  constructor(
    err: HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeePayrollsAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisEmployeePayrollsAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class HrisEmployeePayrollsAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeePayrollsAllResponseBodyData;

  constructor(err: HrisEmployeePayrollsAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeePayrollsAllResponseBody";
  }
}

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$ {
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$Outbound;
}

export function hrisEmployeePayrollsAllHrisEmployeePayrollsResponse422DetailToJSON(
  hrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail:
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$outboundSchema
      .parse(hrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail),
  );
}

export function hrisEmployeePayrollsAllHrisEmployeePayrollsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody
  > = z.instanceof(
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$ {
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$Outbound;
}

export function hrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetailToJSON(
  hrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail:
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$outboundSchema
      .parse(hrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail),
  );
}

export function hrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllHrisEmployeePayrollsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody
  > = z.instanceof(
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody
  > = z.instanceof(
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsAllHrisEmployeePayrollsDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$ {
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$Outbound;
}

export function hrisEmployeePayrollsAllHrisEmployeePayrollsDetailToJSON(
  hrisEmployeePayrollsAllHrisEmployeePayrollsDetail:
    HrisEmployeePayrollsAllHrisEmployeePayrollsDetail,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$outboundSchema.parse(
      hrisEmployeePayrollsAllHrisEmployeePayrollsDetail,
    ),
  );
}

export function hrisEmployeePayrollsAllHrisEmployeePayrollsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeePayrollsAllHrisEmployeePayrollsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsAllHrisEmployeePayrollsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeePayrollsAllHrisEmployeePayrollsDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody
  > = z.instanceof(HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeePayrollsAllDetail$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeePayrollsAllDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeePayrollsAllDetail$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllDetail$ {
  /** @deprecated use `HrisEmployeePayrollsAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsAllDetail$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsAllDetail$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllDetail$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllDetail$Outbound;
}

export function hrisEmployeePayrollsAllDetailToJSON(
  hrisEmployeePayrollsAllDetail: HrisEmployeePayrollsAllDetail,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllDetail$outboundSchema.parse(
      hrisEmployeePayrollsAllDetail,
    ),
  );
}

export function hrisEmployeePayrollsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllResponseBody$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisEmployeePayrollsAllResponseBody(remapped);
  });

/** @internal */
export type HrisEmployeePayrollsAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllResponseBody$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllResponseBody
> = z.instanceof(HrisEmployeePayrollsAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllResponseBody$Outbound;
}
