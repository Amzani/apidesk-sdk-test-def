/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail =
  | string
  | { [k: string]: any };

/**
 * Unprocessable
 */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * Unprocessable
 */
export class HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBodyData;

  constructor(
    err: HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name =
      "HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * The specified resource was not found
 */
export class HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBodyData;

  constructor(
    err: HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name =
      "HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * Payment Required
 */
export class HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBodyData;

  constructor(
    err: HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBodyData;

  constructor(err: HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsAddDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisTimeOffRequestsAddResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisTimeOffRequestsAddResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsAddResponseBodyData;

  constructor(err: HrisTimeOffRequestsAddResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisTimeOffRequestsAddResponseBody";
  }
}

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$ {
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$Outbound;
}

export function hrisTimeOffRequestsAddHrisTimeOffRequestsResponse422DetailToJSON(
  hrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail:
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$outboundSchema
      .parse(hrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail),
  );
}

export function hrisTimeOffRequestsAddHrisTimeOffRequestsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$ {
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$Outbound;
}

export function hrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetailToJSON(
  hrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail:
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$outboundSchema
      .parse(hrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail),
  );
}

export function hrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddHrisTimeOffRequestsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAddHrisTimeOffRequestsDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$ {
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$Outbound;
}

export function hrisTimeOffRequestsAddHrisTimeOffRequestsDetailToJSON(
  hrisTimeOffRequestsAddHrisTimeOffRequestsDetail:
    HrisTimeOffRequestsAddHrisTimeOffRequestsDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$outboundSchema.parse(
      hrisTimeOffRequestsAddHrisTimeOffRequestsDetail,
    ),
  );
}

export function hrisTimeOffRequestsAddHrisTimeOffRequestsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsAddHrisTimeOffRequestsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsAddHrisTimeOffRequestsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisTimeOffRequestsAddHrisTimeOffRequestsDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody
  > = z.instanceof(HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsAddDetail$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsAddDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisTimeOffRequestsAddDetail$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddDetail$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddDetail$ {
  /** @deprecated use `HrisTimeOffRequestsAddDetail$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddDetail$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsAddDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddDetail$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddDetail$Outbound;
}

export function hrisTimeOffRequestsAddDetailToJSON(
  hrisTimeOffRequestsAddDetail: HrisTimeOffRequestsAddDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddDetail$outboundSchema.parse(
      hrisTimeOffRequestsAddDetail,
    ),
  );
}

export function hrisTimeOffRequestsAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddResponseBody$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisTimeOffRequestsAddResponseBody(remapped);
  });

/** @internal */
export type HrisTimeOffRequestsAddResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisTimeOffRequestsAddResponseBody$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddResponseBody$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddResponseBody
> = z.instanceof(HrisTimeOffRequestsAddResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddResponseBody$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddResponseBody$Outbound;
}
