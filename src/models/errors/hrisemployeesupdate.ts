/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesUpdateHrisEmployeesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisEmployeesUpdateHrisEmployeesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unprocessable
 */
export class HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesUpdateHrisEmployeesResponse422ResponseBodyData;

  constructor(
    err: HrisEmployeesUpdateHrisEmployeesResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesUpdateHrisEmployeesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisEmployeesUpdateHrisEmployeesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * The specified resource was not found
 */
export class HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesUpdateHrisEmployeesResponse404ResponseBodyData;

  constructor(
    err: HrisEmployeesUpdateHrisEmployeesResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisEmployeesUpdateHrisEmployeesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Payment Required
 */
export class HrisEmployeesUpdateHrisEmployeesResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesUpdateHrisEmployeesResponseResponseBodyData;

  constructor(err: HrisEmployeesUpdateHrisEmployeesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeesUpdateHrisEmployeesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesUpdateHrisEmployeesDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisEmployeesUpdateHrisEmployeesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisEmployeesUpdateHrisEmployeesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesUpdateHrisEmployeesResponseBodyData;

  constructor(err: HrisEmployeesUpdateHrisEmployeesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeesUpdateHrisEmployeesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisEmployeesUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisEmployeesUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesUpdateResponseBodyData;

  constructor(err: HrisEmployeesUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisEmployeesUpdateResponseBody";
  }
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponse422Detail$inboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesUpdateHrisEmployeesResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponse422Detail$outboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisEmployeesUpdateHrisEmployeesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesResponse422Detail$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponse422Detail$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponse422Detail$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisEmployeesUpdateHrisEmployeesResponse422Detail$Outbound;
}

export function hrisEmployeesUpdateHrisEmployeesResponse422DetailToJSON(
  hrisEmployeesUpdateHrisEmployeesResponse422Detail:
    HrisEmployeesUpdateHrisEmployeesResponse422Detail,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateHrisEmployeesResponse422Detail$outboundSchema.parse(
      hrisEmployeesUpdateHrisEmployeesResponse422Detail,
    ),
  );
}

export function hrisEmployeesUpdateHrisEmployeesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesUpdateHrisEmployeesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesUpdateHrisEmployeesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesUpdateHrisEmployeesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody
  > = z.instanceof(HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesUpdateHrisEmployeesResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponseDetail$inboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesUpdateHrisEmployeesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponseDetail$outboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisEmployeesUpdateHrisEmployeesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesResponseDetail$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponseDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponseDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisEmployeesUpdateHrisEmployeesResponseDetail$Outbound;
}

export function hrisEmployeesUpdateHrisEmployeesResponseDetailToJSON(
  hrisEmployeesUpdateHrisEmployeesResponseDetail:
    HrisEmployeesUpdateHrisEmployeesResponseDetail,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateHrisEmployeesResponseDetail$outboundSchema.parse(
      hrisEmployeesUpdateHrisEmployeesResponseDetail,
    ),
  );
}

export function hrisEmployeesUpdateHrisEmployeesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesUpdateHrisEmployeesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesUpdateHrisEmployeesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesUpdateHrisEmployeesResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody
  > = z.instanceof(HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesUpdateHrisEmployeesResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeesUpdateHrisEmployeesResponseResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesUpdateHrisEmployeesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesUpdateHrisEmployeesResponseResponseBody
  > = z.instanceof(HrisEmployeesUpdateHrisEmployeesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesResponseResponseBody$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesUpdateHrisEmployeesResponseResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesDetail$inboundSchema: z.ZodType<
  HrisEmployeesUpdateHrisEmployeesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesUpdateHrisEmployeesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesDetail$outboundSchema: z.ZodType<
  HrisEmployeesUpdateHrisEmployeesDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateHrisEmployeesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesDetail$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateHrisEmployeesDetail$Outbound;
}

export function hrisEmployeesUpdateHrisEmployeesDetailToJSON(
  hrisEmployeesUpdateHrisEmployeesDetail:
    HrisEmployeesUpdateHrisEmployeesDetail,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateHrisEmployeesDetail$outboundSchema.parse(
      hrisEmployeesUpdateHrisEmployeesDetail,
    ),
  );
}

export function hrisEmployeesUpdateHrisEmployeesDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateHrisEmployeesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesUpdateHrisEmployeesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateHrisEmployeesDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisEmployeesUpdateHrisEmployeesResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesUpdateHrisEmployeesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesUpdateHrisEmployeesResponseBody
  > = z.instanceof(HrisEmployeesUpdateHrisEmployeesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesResponseBody$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateHrisEmployeesResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesUpdateDetail$inboundSchema: z.ZodType<
  HrisEmployeesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisEmployeesUpdateDetail$outboundSchema: z.ZodType<
  HrisEmployeesUpdateDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateDetail$ {
  /** @deprecated use `HrisEmployeesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateDetail$Outbound;
}

export function hrisEmployeesUpdateDetailToJSON(
  hrisEmployeesUpdateDetail: HrisEmployeesUpdateDetail,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateDetail$outboundSchema.parse(hrisEmployeesUpdateDetail),
  );
}

export function hrisEmployeesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisEmployeesUpdateResponseBody(remapped);
  });

/** @internal */
export type HrisEmployeesUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisEmployeesUpdateResponseBody$outboundSchema: z.ZodType<
  HrisEmployeesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateResponseBody
> = z.instanceof(HrisEmployeesUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateResponseBody$ {
  /** @deprecated use `HrisEmployeesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateResponseBody$Outbound;
}
