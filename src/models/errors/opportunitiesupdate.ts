/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesUpdateOpportunitiesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type OpportunitiesUpdateOpportunitiesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class OpportunitiesUpdateOpportunitiesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesUpdateOpportunitiesResponse422ResponseBodyData;

  constructor(
    err: OpportunitiesUpdateOpportunitiesResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesUpdateOpportunitiesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesUpdateOpportunitiesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type OpportunitiesUpdateOpportunitiesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class OpportunitiesUpdateOpportunitiesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesUpdateOpportunitiesResponse404ResponseBodyData;

  constructor(
    err: OpportunitiesUpdateOpportunitiesResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesUpdateOpportunitiesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type OpportunitiesUpdateOpportunitiesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class OpportunitiesUpdateOpportunitiesResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesUpdateOpportunitiesResponseResponseBodyData;

  constructor(err: OpportunitiesUpdateOpportunitiesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesUpdateOpportunitiesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesUpdateOpportunitiesDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type OpportunitiesUpdateOpportunitiesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class OpportunitiesUpdateOpportunitiesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesUpdateOpportunitiesResponseBodyData;

  constructor(err: OpportunitiesUpdateOpportunitiesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesUpdateOpportunitiesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type OpportunitiesUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class OpportunitiesUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesUpdateResponseBodyData;

  constructor(err: OpportunitiesUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesUpdateResponseBody";
  }
}

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponse422Detail$inboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesUpdateOpportunitiesResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponse422Detail$outboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponse422Detail$Outbound,
    z.ZodTypeDef,
    OpportunitiesUpdateOpportunitiesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesUpdateOpportunitiesResponse422Detail$ {
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesUpdateOpportunitiesResponse422Detail$inboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesUpdateOpportunitiesResponse422Detail$outboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponse422Detail$Outbound` instead. */
  export type Outbound =
    OpportunitiesUpdateOpportunitiesResponse422Detail$Outbound;
}

export function opportunitiesUpdateOpportunitiesResponse422DetailToJSON(
  opportunitiesUpdateOpportunitiesResponse422Detail:
    OpportunitiesUpdateOpportunitiesResponse422Detail,
): string {
  return JSON.stringify(
    OpportunitiesUpdateOpportunitiesResponse422Detail$outboundSchema.parse(
      opportunitiesUpdateOpportunitiesResponse422Detail,
    ),
  );
}

export function opportunitiesUpdateOpportunitiesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesUpdateOpportunitiesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesUpdateOpportunitiesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesUpdateOpportunitiesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesUpdateOpportunitiesResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type OpportunitiesUpdateOpportunitiesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesUpdateOpportunitiesResponse422ResponseBody
  > = z.instanceof(OpportunitiesUpdateOpportunitiesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesUpdateOpportunitiesResponse422ResponseBody$ {
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesUpdateOpportunitiesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesUpdateOpportunitiesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesUpdateOpportunitiesResponse422ResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponseDetail$inboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesUpdateOpportunitiesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponseDetail$outboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponseDetail$Outbound,
    z.ZodTypeDef,
    OpportunitiesUpdateOpportunitiesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesUpdateOpportunitiesResponseDetail$ {
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesUpdateOpportunitiesResponseDetail$inboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesUpdateOpportunitiesResponseDetail$outboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponseDetail$Outbound` instead. */
  export type Outbound =
    OpportunitiesUpdateOpportunitiesResponseDetail$Outbound;
}

export function opportunitiesUpdateOpportunitiesResponseDetailToJSON(
  opportunitiesUpdateOpportunitiesResponseDetail:
    OpportunitiesUpdateOpportunitiesResponseDetail,
): string {
  return JSON.stringify(
    OpportunitiesUpdateOpportunitiesResponseDetail$outboundSchema.parse(
      opportunitiesUpdateOpportunitiesResponseDetail,
    ),
  );
}

export function opportunitiesUpdateOpportunitiesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesUpdateOpportunitiesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesUpdateOpportunitiesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesUpdateOpportunitiesResponseDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesUpdateOpportunitiesResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type OpportunitiesUpdateOpportunitiesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesUpdateOpportunitiesResponse404ResponseBody
  > = z.instanceof(OpportunitiesUpdateOpportunitiesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesUpdateOpportunitiesResponse404ResponseBody$ {
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesUpdateOpportunitiesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesUpdateOpportunitiesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesUpdateOpportunitiesResponse404ResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponseResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesUpdateOpportunitiesResponseResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesUpdateOpportunitiesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponseResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesUpdateOpportunitiesResponseResponseBody
  > = z.instanceof(OpportunitiesUpdateOpportunitiesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesUpdateOpportunitiesResponseResponseBody$ {
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesUpdateOpportunitiesResponseResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesUpdateOpportunitiesResponseResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesUpdateOpportunitiesResponseResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesUpdateOpportunitiesDetail$inboundSchema: z.ZodType<
  OpportunitiesUpdateOpportunitiesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesUpdateOpportunitiesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesUpdateOpportunitiesDetail$outboundSchema: z.ZodType<
  OpportunitiesUpdateOpportunitiesDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesUpdateOpportunitiesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesUpdateOpportunitiesDetail$ {
  /** @deprecated use `OpportunitiesUpdateOpportunitiesDetail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesUpdateOpportunitiesDetail$inboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesDetail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesUpdateOpportunitiesDetail$outboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesDetail$Outbound` instead. */
  export type Outbound = OpportunitiesUpdateOpportunitiesDetail$Outbound;
}

export function opportunitiesUpdateOpportunitiesDetailToJSON(
  opportunitiesUpdateOpportunitiesDetail:
    OpportunitiesUpdateOpportunitiesDetail,
): string {
  return JSON.stringify(
    OpportunitiesUpdateOpportunitiesDetail$outboundSchema.parse(
      opportunitiesUpdateOpportunitiesDetail,
    ),
  );
}

export function opportunitiesUpdateOpportunitiesDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesUpdateOpportunitiesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesUpdateOpportunitiesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesUpdateOpportunitiesDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesUpdateOpportunitiesResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesUpdateOpportunitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesUpdateOpportunitiesResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesUpdateOpportunitiesResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesUpdateOpportunitiesResponseBody
  > = z.instanceof(OpportunitiesUpdateOpportunitiesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesUpdateOpportunitiesResponseBody$ {
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesUpdateOpportunitiesResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesUpdateOpportunitiesResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesUpdateOpportunitiesResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesUpdateOpportunitiesResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesUpdateDetail$inboundSchema: z.ZodType<
  OpportunitiesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const OpportunitiesUpdateDetail$outboundSchema: z.ZodType<
  OpportunitiesUpdateDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesUpdateDetail$ {
  /** @deprecated use `OpportunitiesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesUpdateDetail$inboundSchema;
  /** @deprecated use `OpportunitiesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesUpdateDetail$outboundSchema;
  /** @deprecated use `OpportunitiesUpdateDetail$Outbound` instead. */
  export type Outbound = OpportunitiesUpdateDetail$Outbound;
}

export function opportunitiesUpdateDetailToJSON(
  opportunitiesUpdateDetail: OpportunitiesUpdateDetail,
): string {
  return JSON.stringify(
    OpportunitiesUpdateDetail$outboundSchema.parse(opportunitiesUpdateDetail),
  );
}

export function opportunitiesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesUpdateResponseBody$inboundSchema: z.ZodType<
  OpportunitiesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new OpportunitiesUpdateResponseBody(remapped);
  });

/** @internal */
export type OpportunitiesUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesUpdateResponseBody$outboundSchema: z.ZodType<
  OpportunitiesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  OpportunitiesUpdateResponseBody
> = z.instanceof(OpportunitiesUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesUpdateResponseBody$ {
  /** @deprecated use `OpportunitiesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesUpdateResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesUpdateResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesUpdateResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesUpdateResponseBody$Outbound;
}
