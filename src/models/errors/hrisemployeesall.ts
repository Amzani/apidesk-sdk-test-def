/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesAllHrisEmployeesResponseDetail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisEmployeesAllHrisEmployeesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class HrisEmployeesAllHrisEmployeesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesAllHrisEmployeesResponse422ResponseBodyData;

  constructor(err: HrisEmployeesAllHrisEmployeesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeesAllHrisEmployeesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesAllHrisEmployeesDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type HrisEmployeesAllHrisEmployeesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class HrisEmployeesAllHrisEmployeesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesAllHrisEmployeesResponse404ResponseBodyData;

  constructor(err: HrisEmployeesAllHrisEmployeesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeesAllHrisEmployeesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisEmployeesAllHrisEmployeesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class HrisEmployeesAllHrisEmployeesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesAllHrisEmployeesResponseResponseBodyData;

  constructor(err: HrisEmployeesAllHrisEmployeesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeesAllHrisEmployeesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesAllDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type HrisEmployeesAllHrisEmployeesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class HrisEmployeesAllHrisEmployeesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesAllHrisEmployeesResponseBodyData;

  constructor(err: HrisEmployeesAllHrisEmployeesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeesAllHrisEmployeesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type Detail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisEmployeesAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class HrisEmployeesAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeesAllResponseBodyData;

  constructor(err: HrisEmployeesAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeesAllResponseBody";
  }
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseDetail$inboundSchema:
  z.ZodType<
    HrisEmployeesAllHrisEmployeesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesAllHrisEmployeesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseDetail$outboundSchema:
  z.ZodType<
    HrisEmployeesAllHrisEmployeesResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAllHrisEmployeesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesResponseDetail$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesResponseDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesResponseDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesAllHrisEmployeesResponseDetail$Outbound;
}

export function hrisEmployeesAllHrisEmployeesResponseDetailToJSON(
  hrisEmployeesAllHrisEmployeesResponseDetail:
    HrisEmployeesAllHrisEmployeesResponseDetail,
): string {
  return JSON.stringify(
    HrisEmployeesAllHrisEmployeesResponseDetail$outboundSchema.parse(
      hrisEmployeesAllHrisEmployeesResponseDetail,
    ),
  );
}

export function hrisEmployeesAllHrisEmployeesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesAllHrisEmployeesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesAllHrisEmployeesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesAllHrisEmployeesResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesAllHrisEmployeesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeesAllHrisEmployeesResponse422ResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesAllHrisEmployeesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesAllHrisEmployeesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAllHrisEmployeesResponse422ResponseBody
  > = z.instanceof(HrisEmployeesAllHrisEmployeesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesResponse422ResponseBody$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesAllHrisEmployeesResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesDetail$inboundSchema: z.ZodType<
  HrisEmployeesAllHrisEmployeesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesAllHrisEmployeesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeesAllHrisEmployeesDetail$outboundSchema: z.ZodType<
  HrisEmployeesAllHrisEmployeesDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllHrisEmployeesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesDetail$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesAllHrisEmployeesDetail$Outbound;
}

export function hrisEmployeesAllHrisEmployeesDetailToJSON(
  hrisEmployeesAllHrisEmployeesDetail: HrisEmployeesAllHrisEmployeesDetail,
): string {
  return JSON.stringify(
    HrisEmployeesAllHrisEmployeesDetail$outboundSchema.parse(
      hrisEmployeesAllHrisEmployeesDetail,
    ),
  );
}

export function hrisEmployeesAllHrisEmployeesDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllHrisEmployeesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesAllHrisEmployeesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllHrisEmployeesDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesAllHrisEmployeesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeesAllHrisEmployeesResponse404ResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesAllHrisEmployeesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesAllHrisEmployeesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAllHrisEmployeesResponse404ResponseBody
  > = z.instanceof(HrisEmployeesAllHrisEmployeesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesResponse404ResponseBody$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesAllHrisEmployeesResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesAllHrisEmployeesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeesAllHrisEmployeesResponseResponseBody(remapped);
    });

/** @internal */
export type HrisEmployeesAllHrisEmployeesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesAllHrisEmployeesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAllHrisEmployeesResponseResponseBody
  > = z.instanceof(HrisEmployeesAllHrisEmployeesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesResponseResponseBody$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeesAllHrisEmployeesResponseResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeesAllDetail$inboundSchema: z.ZodType<
  HrisEmployeesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisEmployeesAllDetail$outboundSchema: z.ZodType<
  HrisEmployeesAllDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllDetail$ {
  /** @deprecated use `HrisEmployeesAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesAllDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesAllDetail$Outbound;
}

export function hrisEmployeesAllDetailToJSON(
  hrisEmployeesAllDetail: HrisEmployeesAllDetail,
): string {
  return JSON.stringify(
    HrisEmployeesAllDetail$outboundSchema.parse(hrisEmployeesAllDetail),
  );
}

export function hrisEmployeesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesAllHrisEmployeesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisEmployeesAllHrisEmployeesResponseBody(remapped);
  });

/** @internal */
export type HrisEmployeesAllHrisEmployeesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesAllHrisEmployeesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAllHrisEmployeesResponseBody
  > = z.instanceof(HrisEmployeesAllHrisEmployeesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesResponseBody$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesAllHrisEmployeesResponseBody$Outbound;
}

/** @internal */
export const Detail$inboundSchema: z.ZodType<Detail, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.record(z.any())]);

/** @internal */
export type Detail$Outbound = string | { [k: string]: any };

/** @internal */
export const Detail$outboundSchema: z.ZodType<
  Detail$Outbound,
  z.ZodTypeDef,
  Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Detail$ {
  /** @deprecated use `Detail$inboundSchema` instead. */
  export const inboundSchema = Detail$inboundSchema;
  /** @deprecated use `Detail$outboundSchema` instead. */
  export const outboundSchema = Detail$outboundSchema;
  /** @deprecated use `Detail$Outbound` instead. */
  export type Outbound = Detail$Outbound;
}

export function detailToJSON(detail: Detail): string {
  return JSON.stringify(Detail$outboundSchema.parse(detail));
}

export function detailFromJSON(
  jsonString: string,
): SafeParseResult<Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Detail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisEmployeesAllResponseBody(remapped);
  });

/** @internal */
export type HrisEmployeesAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesAllResponseBody$outboundSchema: z.ZodType<
  HrisEmployeesAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllResponseBody
> = z.instanceof(HrisEmployeesAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllResponseBody$ {
  /** @deprecated use `HrisEmployeesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAllResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesAllResponseBody$Outbound;
}
