/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisPayrollsOneHrisPayrollsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisPayrollsOneHrisPayrollsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class HrisPayrollsOneHrisPayrollsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisPayrollsOneHrisPayrollsResponse422ResponseBodyData;

  constructor(err: HrisPayrollsOneHrisPayrollsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisPayrollsOneHrisPayrollsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisPayrollsOneHrisPayrollsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisPayrollsOneHrisPayrollsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class HrisPayrollsOneHrisPayrollsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisPayrollsOneHrisPayrollsResponse404ResponseBodyData;

  constructor(err: HrisPayrollsOneHrisPayrollsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisPayrollsOneHrisPayrollsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisPayrollsOneHrisPayrollsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class HrisPayrollsOneHrisPayrollsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisPayrollsOneHrisPayrollsResponseResponseBodyData;

  constructor(err: HrisPayrollsOneHrisPayrollsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisPayrollsOneHrisPayrollsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisPayrollsOneHrisPayrollsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type HrisPayrollsOneHrisPayrollsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class HrisPayrollsOneHrisPayrollsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisPayrollsOneHrisPayrollsResponseBodyData;

  constructor(err: HrisPayrollsOneHrisPayrollsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisPayrollsOneHrisPayrollsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisPayrollsOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisPayrollsOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class HrisPayrollsOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisPayrollsOneResponseBodyData;

  constructor(err: HrisPayrollsOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisPayrollsOneResponseBody";
  }
}

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisPayrollsOneHrisPayrollsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisPayrollsOneHrisPayrollsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisPayrollsOneHrisPayrollsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisPayrollsOneHrisPayrollsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneHrisPayrollsResponse422Detail$ {
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsOneHrisPayrollsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsOneHrisPayrollsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponse422Detail$Outbound` instead. */
  export type Outbound = HrisPayrollsOneHrisPayrollsResponse422Detail$Outbound;
}

export function hrisPayrollsOneHrisPayrollsResponse422DetailToJSON(
  hrisPayrollsOneHrisPayrollsResponse422Detail:
    HrisPayrollsOneHrisPayrollsResponse422Detail,
): string {
  return JSON.stringify(
    HrisPayrollsOneHrisPayrollsResponse422Detail$outboundSchema.parse(
      hrisPayrollsOneHrisPayrollsResponse422Detail,
    ),
  );
}

export function hrisPayrollsOneHrisPayrollsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisPayrollsOneHrisPayrollsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisPayrollsOneHrisPayrollsResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisPayrollsOneHrisPayrollsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisPayrollsOneHrisPayrollsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisPayrollsOneHrisPayrollsResponse422ResponseBody(remapped);
    });

/** @internal */
export type HrisPayrollsOneHrisPayrollsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisPayrollsOneHrisPayrollsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisPayrollsOneHrisPayrollsResponse422ResponseBody
  > = z.instanceof(HrisPayrollsOneHrisPayrollsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneHrisPayrollsResponse422ResponseBody$ {
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsOneHrisPayrollsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsOneHrisPayrollsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisPayrollsOneHrisPayrollsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponseDetail$inboundSchema: z.ZodType<
  HrisPayrollsOneHrisPayrollsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisPayrollsOneHrisPayrollsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponseDetail$outboundSchema:
  z.ZodType<
    HrisPayrollsOneHrisPayrollsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisPayrollsOneHrisPayrollsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneHrisPayrollsResponseDetail$ {
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsOneHrisPayrollsResponseDetail$inboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsOneHrisPayrollsResponseDetail$outboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseDetail$Outbound` instead. */
  export type Outbound = HrisPayrollsOneHrisPayrollsResponseDetail$Outbound;
}

export function hrisPayrollsOneHrisPayrollsResponseDetailToJSON(
  hrisPayrollsOneHrisPayrollsResponseDetail:
    HrisPayrollsOneHrisPayrollsResponseDetail,
): string {
  return JSON.stringify(
    HrisPayrollsOneHrisPayrollsResponseDetail$outboundSchema.parse(
      hrisPayrollsOneHrisPayrollsResponseDetail,
    ),
  );
}

export function hrisPayrollsOneHrisPayrollsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisPayrollsOneHrisPayrollsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisPayrollsOneHrisPayrollsResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisPayrollsOneHrisPayrollsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisPayrollsOneHrisPayrollsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisPayrollsOneHrisPayrollsResponse404ResponseBody(remapped);
    });

/** @internal */
export type HrisPayrollsOneHrisPayrollsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisPayrollsOneHrisPayrollsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisPayrollsOneHrisPayrollsResponse404ResponseBody
  > = z.instanceof(HrisPayrollsOneHrisPayrollsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneHrisPayrollsResponse404ResponseBody$ {
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsOneHrisPayrollsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsOneHrisPayrollsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisPayrollsOneHrisPayrollsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisPayrollsOneHrisPayrollsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisPayrollsOneHrisPayrollsResponseResponseBody(remapped);
    });

/** @internal */
export type HrisPayrollsOneHrisPayrollsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisPayrollsOneHrisPayrollsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisPayrollsOneHrisPayrollsResponseResponseBody
  > = z.instanceof(HrisPayrollsOneHrisPayrollsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneHrisPayrollsResponseResponseBody$ {
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsOneHrisPayrollsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsOneHrisPayrollsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisPayrollsOneHrisPayrollsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisPayrollsOneHrisPayrollsDetail$inboundSchema: z.ZodType<
  HrisPayrollsOneHrisPayrollsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisPayrollsOneHrisPayrollsDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisPayrollsOneHrisPayrollsDetail$outboundSchema: z.ZodType<
  HrisPayrollsOneHrisPayrollsDetail$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneHrisPayrollsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneHrisPayrollsDetail$ {
  /** @deprecated use `HrisPayrollsOneHrisPayrollsDetail$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneHrisPayrollsDetail$inboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsOneHrisPayrollsDetail$outboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsDetail$Outbound` instead. */
  export type Outbound = HrisPayrollsOneHrisPayrollsDetail$Outbound;
}

export function hrisPayrollsOneHrisPayrollsDetailToJSON(
  hrisPayrollsOneHrisPayrollsDetail: HrisPayrollsOneHrisPayrollsDetail,
): string {
  return JSON.stringify(
    HrisPayrollsOneHrisPayrollsDetail$outboundSchema.parse(
      hrisPayrollsOneHrisPayrollsDetail,
    ),
  );
}

export function hrisPayrollsOneHrisPayrollsDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneHrisPayrollsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneHrisPayrollsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneHrisPayrollsDetail' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponseBody$inboundSchema: z.ZodType<
  HrisPayrollsOneHrisPayrollsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisPayrollsOneHrisPayrollsResponseBody(remapped);
  });

/** @internal */
export type HrisPayrollsOneHrisPayrollsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponseBody$outboundSchema: z.ZodType<
  HrisPayrollsOneHrisPayrollsResponseBody$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneHrisPayrollsResponseBody
> = z.instanceof(HrisPayrollsOneHrisPayrollsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneHrisPayrollsResponseBody$ {
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsOneHrisPayrollsResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsOneHrisPayrollsResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseBody$Outbound` instead. */
  export type Outbound = HrisPayrollsOneHrisPayrollsResponseBody$Outbound;
}

/** @internal */
export const HrisPayrollsOneDetail$inboundSchema: z.ZodType<
  HrisPayrollsOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisPayrollsOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisPayrollsOneDetail$outboundSchema: z.ZodType<
  HrisPayrollsOneDetail$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneDetail$ {
  /** @deprecated use `HrisPayrollsOneDetail$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneDetail$inboundSchema;
  /** @deprecated use `HrisPayrollsOneDetail$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneDetail$outboundSchema;
  /** @deprecated use `HrisPayrollsOneDetail$Outbound` instead. */
  export type Outbound = HrisPayrollsOneDetail$Outbound;
}

export function hrisPayrollsOneDetailToJSON(
  hrisPayrollsOneDetail: HrisPayrollsOneDetail,
): string {
  return JSON.stringify(
    HrisPayrollsOneDetail$outboundSchema.parse(hrisPayrollsOneDetail),
  );
}

export function hrisPayrollsOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneDetail' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneResponseBody$inboundSchema: z.ZodType<
  HrisPayrollsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisPayrollsOneResponseBody(remapped);
  });

/** @internal */
export type HrisPayrollsOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisPayrollsOneResponseBody$outboundSchema: z.ZodType<
  HrisPayrollsOneResponseBody$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneResponseBody
> = z.instanceof(HrisPayrollsOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneResponseBody$ {
  /** @deprecated use `HrisPayrollsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsOneResponseBody$Outbound` instead. */
  export type Outbound = HrisPayrollsOneResponseBody$Outbound;
}
