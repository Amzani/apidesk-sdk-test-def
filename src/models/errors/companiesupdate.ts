/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesUpdateCompaniesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type CompaniesUpdateCompaniesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class CompaniesUpdateCompaniesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesUpdateCompaniesResponse422ResponseBodyData;

  constructor(err: CompaniesUpdateCompaniesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesUpdateCompaniesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesUpdateCompaniesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type CompaniesUpdateCompaniesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class CompaniesUpdateCompaniesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesUpdateCompaniesResponse404ResponseBodyData;

  constructor(err: CompaniesUpdateCompaniesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesUpdateCompaniesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type CompaniesUpdateCompaniesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class CompaniesUpdateCompaniesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesUpdateCompaniesResponseResponseBodyData;

  constructor(err: CompaniesUpdateCompaniesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesUpdateCompaniesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesUpdateCompaniesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type CompaniesUpdateCompaniesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class CompaniesUpdateCompaniesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesUpdateCompaniesResponseBodyData;

  constructor(err: CompaniesUpdateCompaniesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesUpdateCompaniesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type CompaniesUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class CompaniesUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesUpdateResponseBodyData;

  constructor(err: CompaniesUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesUpdateResponseBody";
  }
}

/** @internal */
export const CompaniesUpdateCompaniesResponse422Detail$inboundSchema: z.ZodType<
  CompaniesUpdateCompaniesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesUpdateCompaniesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesUpdateCompaniesResponse422Detail$outboundSchema:
  z.ZodType<
    CompaniesUpdateCompaniesResponse422Detail$Outbound,
    z.ZodTypeDef,
    CompaniesUpdateCompaniesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesResponse422Detail$ {
  /** @deprecated use `CompaniesUpdateCompaniesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesUpdateCompaniesResponse422Detail$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesUpdateCompaniesResponse422Detail$outboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponse422Detail$Outbound` instead. */
  export type Outbound = CompaniesUpdateCompaniesResponse422Detail$Outbound;
}

export function companiesUpdateCompaniesResponse422DetailToJSON(
  companiesUpdateCompaniesResponse422Detail:
    CompaniesUpdateCompaniesResponse422Detail,
): string {
  return JSON.stringify(
    CompaniesUpdateCompaniesResponse422Detail$outboundSchema.parse(
      companiesUpdateCompaniesResponse422Detail,
    ),
  );
}

export function companiesUpdateCompaniesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  CompaniesUpdateCompaniesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesUpdateCompaniesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompaniesUpdateCompaniesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateCompaniesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    CompaniesUpdateCompaniesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new CompaniesUpdateCompaniesResponse422ResponseBody(remapped);
    });

/** @internal */
export type CompaniesUpdateCompaniesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesUpdateCompaniesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    CompaniesUpdateCompaniesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesUpdateCompaniesResponse422ResponseBody
  > = z.instanceof(CompaniesUpdateCompaniesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesResponse422ResponseBody$ {
  /** @deprecated use `CompaniesUpdateCompaniesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesUpdateCompaniesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesUpdateCompaniesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    CompaniesUpdateCompaniesResponse422ResponseBody$Outbound;
}

/** @internal */
export const CompaniesUpdateCompaniesResponseDetail$inboundSchema: z.ZodType<
  CompaniesUpdateCompaniesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesUpdateCompaniesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesUpdateCompaniesResponseDetail$outboundSchema: z.ZodType<
  CompaniesUpdateCompaniesResponseDetail$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateCompaniesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesResponseDetail$ {
  /** @deprecated use `CompaniesUpdateCompaniesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesUpdateCompaniesResponseDetail$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesUpdateCompaniesResponseDetail$outboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponseDetail$Outbound` instead. */
  export type Outbound = CompaniesUpdateCompaniesResponseDetail$Outbound;
}

export function companiesUpdateCompaniesResponseDetailToJSON(
  companiesUpdateCompaniesResponseDetail:
    CompaniesUpdateCompaniesResponseDetail,
): string {
  return JSON.stringify(
    CompaniesUpdateCompaniesResponseDetail$outboundSchema.parse(
      companiesUpdateCompaniesResponseDetail,
    ),
  );
}

export function companiesUpdateCompaniesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateCompaniesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesUpdateCompaniesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateCompaniesResponseDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateCompaniesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    CompaniesUpdateCompaniesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new CompaniesUpdateCompaniesResponse404ResponseBody(remapped);
    });

/** @internal */
export type CompaniesUpdateCompaniesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesUpdateCompaniesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    CompaniesUpdateCompaniesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesUpdateCompaniesResponse404ResponseBody
  > = z.instanceof(CompaniesUpdateCompaniesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesResponse404ResponseBody$ {
  /** @deprecated use `CompaniesUpdateCompaniesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesUpdateCompaniesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesUpdateCompaniesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    CompaniesUpdateCompaniesResponse404ResponseBody$Outbound;
}

/** @internal */
export const CompaniesUpdateCompaniesResponseResponseBody$inboundSchema:
  z.ZodType<
    CompaniesUpdateCompaniesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new CompaniesUpdateCompaniesResponseResponseBody(remapped);
    });

/** @internal */
export type CompaniesUpdateCompaniesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesUpdateCompaniesResponseResponseBody$outboundSchema:
  z.ZodType<
    CompaniesUpdateCompaniesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesUpdateCompaniesResponseResponseBody
  > = z.instanceof(CompaniesUpdateCompaniesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesResponseResponseBody$ {
  /** @deprecated use `CompaniesUpdateCompaniesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesUpdateCompaniesResponseResponseBody$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesUpdateCompaniesResponseResponseBody$outboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponseResponseBody$Outbound` instead. */
  export type Outbound = CompaniesUpdateCompaniesResponseResponseBody$Outbound;
}

/** @internal */
export const CompaniesUpdateCompaniesDetail$inboundSchema: z.ZodType<
  CompaniesUpdateCompaniesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesUpdateCompaniesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesUpdateCompaniesDetail$outboundSchema: z.ZodType<
  CompaniesUpdateCompaniesDetail$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateCompaniesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesDetail$ {
  /** @deprecated use `CompaniesUpdateCompaniesDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateCompaniesDetail$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateCompaniesDetail$outboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesDetail$Outbound` instead. */
  export type Outbound = CompaniesUpdateCompaniesDetail$Outbound;
}

export function companiesUpdateCompaniesDetailToJSON(
  companiesUpdateCompaniesDetail: CompaniesUpdateCompaniesDetail,
): string {
  return JSON.stringify(
    CompaniesUpdateCompaniesDetail$outboundSchema.parse(
      companiesUpdateCompaniesDetail,
    ),
  );
}

export function companiesUpdateCompaniesDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateCompaniesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateCompaniesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateCompaniesDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateCompaniesResponseBody$inboundSchema: z.ZodType<
  CompaniesUpdateCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new CompaniesUpdateCompaniesResponseBody(remapped);
  });

/** @internal */
export type CompaniesUpdateCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesUpdateCompaniesResponseBody$outboundSchema: z.ZodType<
  CompaniesUpdateCompaniesResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateCompaniesResponseBody
> = z.instanceof(CompaniesUpdateCompaniesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesResponseBody$ {
  /** @deprecated use `CompaniesUpdateCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesUpdateCompaniesResponseBody$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesUpdateCompaniesResponseBody$outboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponseBody$Outbound` instead. */
  export type Outbound = CompaniesUpdateCompaniesResponseBody$Outbound;
}

/** @internal */
export const CompaniesUpdateDetail$inboundSchema: z.ZodType<
  CompaniesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const CompaniesUpdateDetail$outboundSchema: z.ZodType<
  CompaniesUpdateDetail$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateDetail$ {
  /** @deprecated use `CompaniesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateDetail$inboundSchema;
  /** @deprecated use `CompaniesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateDetail$outboundSchema;
  /** @deprecated use `CompaniesUpdateDetail$Outbound` instead. */
  export type Outbound = CompaniesUpdateDetail$Outbound;
}

export function companiesUpdateDetailToJSON(
  companiesUpdateDetail: CompaniesUpdateDetail,
): string {
  return JSON.stringify(
    CompaniesUpdateDetail$outboundSchema.parse(companiesUpdateDetail),
  );
}

export function companiesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateResponseBody$inboundSchema: z.ZodType<
  CompaniesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new CompaniesUpdateResponseBody(remapped);
  });

/** @internal */
export type CompaniesUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesUpdateResponseBody$outboundSchema: z.ZodType<
  CompaniesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateResponseBody
> = z.instanceof(CompaniesUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateResponseBody$ {
  /** @deprecated use `CompaniesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateResponseBody$inboundSchema;
  /** @deprecated use `CompaniesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateResponseBody$outboundSchema;
  /** @deprecated use `CompaniesUpdateResponseBody$Outbound` instead. */
  export type Outbound = CompaniesUpdateResponseBody$Outbound;
}
