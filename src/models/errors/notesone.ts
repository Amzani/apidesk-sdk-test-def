/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesOneNotesResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type NotesOneNotesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class NotesOneNotesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesOneNotesResponse422ResponseBodyData;

  constructor(err: NotesOneNotesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesOneNotesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesOneNotesResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type NotesOneNotesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class NotesOneNotesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesOneNotesResponse404ResponseBodyData;

  constructor(err: NotesOneNotesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesOneNotesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type NotesOneNotesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class NotesOneNotesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesOneNotesResponseResponseBodyData;

  constructor(err: NotesOneNotesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesOneNotesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesOneNotesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type NotesOneNotesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class NotesOneNotesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesOneNotesResponseBodyData;

  constructor(err: NotesOneNotesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesOneNotesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type NotesOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class NotesOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesOneResponseBodyData;

  constructor(err: NotesOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesOneResponseBody";
  }
}

/** @internal */
export const NotesOneNotesResponse422Detail$inboundSchema: z.ZodType<
  NotesOneNotesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesOneNotesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const NotesOneNotesResponse422Detail$outboundSchema: z.ZodType<
  NotesOneNotesResponse422Detail$Outbound,
  z.ZodTypeDef,
  NotesOneNotesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesOneNotesResponse422Detail$ {
  /** @deprecated use `NotesOneNotesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = NotesOneNotesResponse422Detail$inboundSchema;
  /** @deprecated use `NotesOneNotesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema = NotesOneNotesResponse422Detail$outboundSchema;
  /** @deprecated use `NotesOneNotesResponse422Detail$Outbound` instead. */
  export type Outbound = NotesOneNotesResponse422Detail$Outbound;
}

export function notesOneNotesResponse422DetailToJSON(
  notesOneNotesResponse422Detail: NotesOneNotesResponse422Detail,
): string {
  return JSON.stringify(
    NotesOneNotesResponse422Detail$outboundSchema.parse(
      notesOneNotesResponse422Detail,
    ),
  );
}

export function notesOneNotesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesOneNotesResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesOneNotesResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesOneNotesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const NotesOneNotesResponse422ResponseBody$inboundSchema: z.ZodType<
  NotesOneNotesResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesOneNotesResponse422ResponseBody(remapped);
  });

/** @internal */
export type NotesOneNotesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesOneNotesResponse422ResponseBody$outboundSchema: z.ZodType<
  NotesOneNotesResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  NotesOneNotesResponse422ResponseBody
> = z.instanceof(NotesOneNotesResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesOneNotesResponse422ResponseBody$ {
  /** @deprecated use `NotesOneNotesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotesOneNotesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `NotesOneNotesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesOneNotesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `NotesOneNotesResponse422ResponseBody$Outbound` instead. */
  export type Outbound = NotesOneNotesResponse422ResponseBody$Outbound;
}

/** @internal */
export const NotesOneNotesResponseDetail$inboundSchema: z.ZodType<
  NotesOneNotesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesOneNotesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const NotesOneNotesResponseDetail$outboundSchema: z.ZodType<
  NotesOneNotesResponseDetail$Outbound,
  z.ZodTypeDef,
  NotesOneNotesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesOneNotesResponseDetail$ {
  /** @deprecated use `NotesOneNotesResponseDetail$inboundSchema` instead. */
  export const inboundSchema = NotesOneNotesResponseDetail$inboundSchema;
  /** @deprecated use `NotesOneNotesResponseDetail$outboundSchema` instead. */
  export const outboundSchema = NotesOneNotesResponseDetail$outboundSchema;
  /** @deprecated use `NotesOneNotesResponseDetail$Outbound` instead. */
  export type Outbound = NotesOneNotesResponseDetail$Outbound;
}

export function notesOneNotesResponseDetailToJSON(
  notesOneNotesResponseDetail: NotesOneNotesResponseDetail,
): string {
  return JSON.stringify(
    NotesOneNotesResponseDetail$outboundSchema.parse(
      notesOneNotesResponseDetail,
    ),
  );
}

export function notesOneNotesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesOneNotesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesOneNotesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesOneNotesResponseDetail' from JSON`,
  );
}

/** @internal */
export const NotesOneNotesResponse404ResponseBody$inboundSchema: z.ZodType<
  NotesOneNotesResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesOneNotesResponse404ResponseBody(remapped);
  });

/** @internal */
export type NotesOneNotesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesOneNotesResponse404ResponseBody$outboundSchema: z.ZodType<
  NotesOneNotesResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  NotesOneNotesResponse404ResponseBody
> = z.instanceof(NotesOneNotesResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesOneNotesResponse404ResponseBody$ {
  /** @deprecated use `NotesOneNotesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotesOneNotesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `NotesOneNotesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesOneNotesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `NotesOneNotesResponse404ResponseBody$Outbound` instead. */
  export type Outbound = NotesOneNotesResponse404ResponseBody$Outbound;
}

/** @internal */
export const NotesOneNotesResponseResponseBody$inboundSchema: z.ZodType<
  NotesOneNotesResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesOneNotesResponseResponseBody(remapped);
  });

/** @internal */
export type NotesOneNotesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesOneNotesResponseResponseBody$outboundSchema: z.ZodType<
  NotesOneNotesResponseResponseBody$Outbound,
  z.ZodTypeDef,
  NotesOneNotesResponseResponseBody
> = z.instanceof(NotesOneNotesResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesOneNotesResponseResponseBody$ {
  /** @deprecated use `NotesOneNotesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesOneNotesResponseResponseBody$inboundSchema;
  /** @deprecated use `NotesOneNotesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesOneNotesResponseResponseBody$outboundSchema;
  /** @deprecated use `NotesOneNotesResponseResponseBody$Outbound` instead. */
  export type Outbound = NotesOneNotesResponseResponseBody$Outbound;
}

/** @internal */
export const NotesOneNotesDetail$inboundSchema: z.ZodType<
  NotesOneNotesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesOneNotesDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const NotesOneNotesDetail$outboundSchema: z.ZodType<
  NotesOneNotesDetail$Outbound,
  z.ZodTypeDef,
  NotesOneNotesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesOneNotesDetail$ {
  /** @deprecated use `NotesOneNotesDetail$inboundSchema` instead. */
  export const inboundSchema = NotesOneNotesDetail$inboundSchema;
  /** @deprecated use `NotesOneNotesDetail$outboundSchema` instead. */
  export const outboundSchema = NotesOneNotesDetail$outboundSchema;
  /** @deprecated use `NotesOneNotesDetail$Outbound` instead. */
  export type Outbound = NotesOneNotesDetail$Outbound;
}

export function notesOneNotesDetailToJSON(
  notesOneNotesDetail: NotesOneNotesDetail,
): string {
  return JSON.stringify(
    NotesOneNotesDetail$outboundSchema.parse(notesOneNotesDetail),
  );
}

export function notesOneNotesDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesOneNotesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesOneNotesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesOneNotesDetail' from JSON`,
  );
}

/** @internal */
export const NotesOneNotesResponseBody$inboundSchema: z.ZodType<
  NotesOneNotesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesOneNotesResponseBody(remapped);
  });

/** @internal */
export type NotesOneNotesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesOneNotesResponseBody$outboundSchema: z.ZodType<
  NotesOneNotesResponseBody$Outbound,
  z.ZodTypeDef,
  NotesOneNotesResponseBody
> = z.instanceof(NotesOneNotesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesOneNotesResponseBody$ {
  /** @deprecated use `NotesOneNotesResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesOneNotesResponseBody$inboundSchema;
  /** @deprecated use `NotesOneNotesResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesOneNotesResponseBody$outboundSchema;
  /** @deprecated use `NotesOneNotesResponseBody$Outbound` instead. */
  export type Outbound = NotesOneNotesResponseBody$Outbound;
}

/** @internal */
export const NotesOneDetail$inboundSchema: z.ZodType<
  NotesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const NotesOneDetail$outboundSchema: z.ZodType<
  NotesOneDetail$Outbound,
  z.ZodTypeDef,
  NotesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesOneDetail$ {
  /** @deprecated use `NotesOneDetail$inboundSchema` instead. */
  export const inboundSchema = NotesOneDetail$inboundSchema;
  /** @deprecated use `NotesOneDetail$outboundSchema` instead. */
  export const outboundSchema = NotesOneDetail$outboundSchema;
  /** @deprecated use `NotesOneDetail$Outbound` instead. */
  export type Outbound = NotesOneDetail$Outbound;
}

export function notesOneDetailToJSON(notesOneDetail: NotesOneDetail): string {
  return JSON.stringify(NotesOneDetail$outboundSchema.parse(notesOneDetail));
}

export function notesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesOneDetail' from JSON`,
  );
}

/** @internal */
export const NotesOneResponseBody$inboundSchema: z.ZodType<
  NotesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesOneResponseBody(remapped);
  });

/** @internal */
export type NotesOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesOneResponseBody$outboundSchema: z.ZodType<
  NotesOneResponseBody$Outbound,
  z.ZodTypeDef,
  NotesOneResponseBody
> = z.instanceof(NotesOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesOneResponseBody$ {
  /** @deprecated use `NotesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesOneResponseBody$inboundSchema;
  /** @deprecated use `NotesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesOneResponseBody$outboundSchema;
  /** @deprecated use `NotesOneResponseBody$Outbound` instead. */
  export type Outbound = NotesOneResponseBody$Outbound;
}
