/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsOneLeadsResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type LeadsOneLeadsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class LeadsOneLeadsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsOneLeadsResponse422ResponseBodyData;

  constructor(err: LeadsOneLeadsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsOneLeadsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsOneLeadsResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type LeadsOneLeadsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class LeadsOneLeadsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsOneLeadsResponse404ResponseBodyData;

  constructor(err: LeadsOneLeadsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsOneLeadsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type LeadsOneLeadsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class LeadsOneLeadsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsOneLeadsResponseResponseBodyData;

  constructor(err: LeadsOneLeadsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsOneLeadsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsOneLeadsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type LeadsOneLeadsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class LeadsOneLeadsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsOneLeadsResponseBodyData;

  constructor(err: LeadsOneLeadsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsOneLeadsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type LeadsOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class LeadsOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsOneResponseBodyData;

  constructor(err: LeadsOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsOneResponseBody";
  }
}

/** @internal */
export const LeadsOneLeadsResponse422Detail$inboundSchema: z.ZodType<
  LeadsOneLeadsResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsOneLeadsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const LeadsOneLeadsResponse422Detail$outboundSchema: z.ZodType<
  LeadsOneLeadsResponse422Detail$Outbound,
  z.ZodTypeDef,
  LeadsOneLeadsResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsResponse422Detail$ {
  /** @deprecated use `LeadsOneLeadsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = LeadsOneLeadsResponse422Detail$inboundSchema;
  /** @deprecated use `LeadsOneLeadsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema = LeadsOneLeadsResponse422Detail$outboundSchema;
  /** @deprecated use `LeadsOneLeadsResponse422Detail$Outbound` instead. */
  export type Outbound = LeadsOneLeadsResponse422Detail$Outbound;
}

export function leadsOneLeadsResponse422DetailToJSON(
  leadsOneLeadsResponse422Detail: LeadsOneLeadsResponse422Detail,
): string {
  return JSON.stringify(
    LeadsOneLeadsResponse422Detail$outboundSchema.parse(
      leadsOneLeadsResponse422Detail,
    ),
  );
}

export function leadsOneLeadsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneLeadsResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneLeadsResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneLeadsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const LeadsOneLeadsResponse422ResponseBody$inboundSchema: z.ZodType<
  LeadsOneLeadsResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsOneLeadsResponse422ResponseBody(remapped);
  });

/** @internal */
export type LeadsOneLeadsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsOneLeadsResponse422ResponseBody$outboundSchema: z.ZodType<
  LeadsOneLeadsResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsOneLeadsResponse422ResponseBody
> = z.instanceof(LeadsOneLeadsResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsResponse422ResponseBody$ {
  /** @deprecated use `LeadsOneLeadsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    LeadsOneLeadsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `LeadsOneLeadsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsOneLeadsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `LeadsOneLeadsResponse422ResponseBody$Outbound` instead. */
  export type Outbound = LeadsOneLeadsResponse422ResponseBody$Outbound;
}

/** @internal */
export const LeadsOneLeadsResponseDetail$inboundSchema: z.ZodType<
  LeadsOneLeadsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsOneLeadsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const LeadsOneLeadsResponseDetail$outboundSchema: z.ZodType<
  LeadsOneLeadsResponseDetail$Outbound,
  z.ZodTypeDef,
  LeadsOneLeadsResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsResponseDetail$ {
  /** @deprecated use `LeadsOneLeadsResponseDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsOneLeadsResponseDetail$inboundSchema;
  /** @deprecated use `LeadsOneLeadsResponseDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsOneLeadsResponseDetail$outboundSchema;
  /** @deprecated use `LeadsOneLeadsResponseDetail$Outbound` instead. */
  export type Outbound = LeadsOneLeadsResponseDetail$Outbound;
}

export function leadsOneLeadsResponseDetailToJSON(
  leadsOneLeadsResponseDetail: LeadsOneLeadsResponseDetail,
): string {
  return JSON.stringify(
    LeadsOneLeadsResponseDetail$outboundSchema.parse(
      leadsOneLeadsResponseDetail,
    ),
  );
}

export function leadsOneLeadsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneLeadsResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneLeadsResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneLeadsResponseDetail' from JSON`,
  );
}

/** @internal */
export const LeadsOneLeadsResponse404ResponseBody$inboundSchema: z.ZodType<
  LeadsOneLeadsResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsOneLeadsResponse404ResponseBody(remapped);
  });

/** @internal */
export type LeadsOneLeadsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsOneLeadsResponse404ResponseBody$outboundSchema: z.ZodType<
  LeadsOneLeadsResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsOneLeadsResponse404ResponseBody
> = z.instanceof(LeadsOneLeadsResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsResponse404ResponseBody$ {
  /** @deprecated use `LeadsOneLeadsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    LeadsOneLeadsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `LeadsOneLeadsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsOneLeadsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `LeadsOneLeadsResponse404ResponseBody$Outbound` instead. */
  export type Outbound = LeadsOneLeadsResponse404ResponseBody$Outbound;
}

/** @internal */
export const LeadsOneLeadsResponseResponseBody$inboundSchema: z.ZodType<
  LeadsOneLeadsResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsOneLeadsResponseResponseBody(remapped);
  });

/** @internal */
export type LeadsOneLeadsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsOneLeadsResponseResponseBody$outboundSchema: z.ZodType<
  LeadsOneLeadsResponseResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsOneLeadsResponseResponseBody
> = z.instanceof(LeadsOneLeadsResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsResponseResponseBody$ {
  /** @deprecated use `LeadsOneLeadsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsOneLeadsResponseResponseBody$inboundSchema;
  /** @deprecated use `LeadsOneLeadsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsOneLeadsResponseResponseBody$outboundSchema;
  /** @deprecated use `LeadsOneLeadsResponseResponseBody$Outbound` instead. */
  export type Outbound = LeadsOneLeadsResponseResponseBody$Outbound;
}

/** @internal */
export const LeadsOneLeadsDetail$inboundSchema: z.ZodType<
  LeadsOneLeadsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsOneLeadsDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsOneLeadsDetail$outboundSchema: z.ZodType<
  LeadsOneLeadsDetail$Outbound,
  z.ZodTypeDef,
  LeadsOneLeadsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsDetail$ {
  /** @deprecated use `LeadsOneLeadsDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsOneLeadsDetail$inboundSchema;
  /** @deprecated use `LeadsOneLeadsDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsOneLeadsDetail$outboundSchema;
  /** @deprecated use `LeadsOneLeadsDetail$Outbound` instead. */
  export type Outbound = LeadsOneLeadsDetail$Outbound;
}

export function leadsOneLeadsDetailToJSON(
  leadsOneLeadsDetail: LeadsOneLeadsDetail,
): string {
  return JSON.stringify(
    LeadsOneLeadsDetail$outboundSchema.parse(leadsOneLeadsDetail),
  );
}

export function leadsOneLeadsDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneLeadsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneLeadsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneLeadsDetail' from JSON`,
  );
}

/** @internal */
export const LeadsOneLeadsResponseBody$inboundSchema: z.ZodType<
  LeadsOneLeadsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsOneLeadsResponseBody(remapped);
  });

/** @internal */
export type LeadsOneLeadsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsOneLeadsResponseBody$outboundSchema: z.ZodType<
  LeadsOneLeadsResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsOneLeadsResponseBody
> = z.instanceof(LeadsOneLeadsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsResponseBody$ {
  /** @deprecated use `LeadsOneLeadsResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsOneLeadsResponseBody$inboundSchema;
  /** @deprecated use `LeadsOneLeadsResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsOneLeadsResponseBody$outboundSchema;
  /** @deprecated use `LeadsOneLeadsResponseBody$Outbound` instead. */
  export type Outbound = LeadsOneLeadsResponseBody$Outbound;
}

/** @internal */
export const LeadsOneDetail$inboundSchema: z.ZodType<
  LeadsOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsOneDetail$outboundSchema: z.ZodType<
  LeadsOneDetail$Outbound,
  z.ZodTypeDef,
  LeadsOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneDetail$ {
  /** @deprecated use `LeadsOneDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsOneDetail$inboundSchema;
  /** @deprecated use `LeadsOneDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsOneDetail$outboundSchema;
  /** @deprecated use `LeadsOneDetail$Outbound` instead. */
  export type Outbound = LeadsOneDetail$Outbound;
}

export function leadsOneDetailToJSON(leadsOneDetail: LeadsOneDetail): string {
  return JSON.stringify(LeadsOneDetail$outboundSchema.parse(leadsOneDetail));
}

export function leadsOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneDetail' from JSON`,
  );
}

/** @internal */
export const LeadsOneResponseBody$inboundSchema: z.ZodType<
  LeadsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsOneResponseBody(remapped);
  });

/** @internal */
export type LeadsOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsOneResponseBody$outboundSchema: z.ZodType<
  LeadsOneResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsOneResponseBody
> = z.instanceof(LeadsOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneResponseBody$ {
  /** @deprecated use `LeadsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsOneResponseBody$inboundSchema;
  /** @deprecated use `LeadsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsOneResponseBody$outboundSchema;
  /** @deprecated use `LeadsOneResponseBody$Outbound` instead. */
  export type Outbound = LeadsOneResponseBody$Outbound;
}
