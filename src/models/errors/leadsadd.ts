/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsAddLeadsResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type LeadsAddLeadsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class LeadsAddLeadsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsAddLeadsResponse422ResponseBodyData;

  constructor(err: LeadsAddLeadsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsAddLeadsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsAddLeadsResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type LeadsAddLeadsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class LeadsAddLeadsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsAddLeadsResponse404ResponseBodyData;

  constructor(err: LeadsAddLeadsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsAddLeadsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type LeadsAddLeadsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class LeadsAddLeadsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsAddLeadsResponseResponseBodyData;

  constructor(err: LeadsAddLeadsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsAddLeadsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsAddLeadsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type LeadsAddLeadsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class LeadsAddLeadsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsAddLeadsResponseBodyData;

  constructor(err: LeadsAddLeadsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsAddLeadsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsAddDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type LeadsAddResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class LeadsAddResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsAddResponseBodyData;

  constructor(err: LeadsAddResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsAddResponseBody";
  }
}

/** @internal */
export const LeadsAddLeadsResponse422Detail$inboundSchema: z.ZodType<
  LeadsAddLeadsResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsAddLeadsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const LeadsAddLeadsResponse422Detail$outboundSchema: z.ZodType<
  LeadsAddLeadsResponse422Detail$Outbound,
  z.ZodTypeDef,
  LeadsAddLeadsResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsResponse422Detail$ {
  /** @deprecated use `LeadsAddLeadsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = LeadsAddLeadsResponse422Detail$inboundSchema;
  /** @deprecated use `LeadsAddLeadsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema = LeadsAddLeadsResponse422Detail$outboundSchema;
  /** @deprecated use `LeadsAddLeadsResponse422Detail$Outbound` instead. */
  export type Outbound = LeadsAddLeadsResponse422Detail$Outbound;
}

export function leadsAddLeadsResponse422DetailToJSON(
  leadsAddLeadsResponse422Detail: LeadsAddLeadsResponse422Detail,
): string {
  return JSON.stringify(
    LeadsAddLeadsResponse422Detail$outboundSchema.parse(
      leadsAddLeadsResponse422Detail,
    ),
  );
}

export function leadsAddLeadsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddLeadsResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddLeadsResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddLeadsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const LeadsAddLeadsResponse422ResponseBody$inboundSchema: z.ZodType<
  LeadsAddLeadsResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsAddLeadsResponse422ResponseBody(remapped);
  });

/** @internal */
export type LeadsAddLeadsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAddLeadsResponse422ResponseBody$outboundSchema: z.ZodType<
  LeadsAddLeadsResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAddLeadsResponse422ResponseBody
> = z.instanceof(LeadsAddLeadsResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsResponse422ResponseBody$ {
  /** @deprecated use `LeadsAddLeadsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    LeadsAddLeadsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `LeadsAddLeadsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsAddLeadsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `LeadsAddLeadsResponse422ResponseBody$Outbound` instead. */
  export type Outbound = LeadsAddLeadsResponse422ResponseBody$Outbound;
}

/** @internal */
export const LeadsAddLeadsResponseDetail$inboundSchema: z.ZodType<
  LeadsAddLeadsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsAddLeadsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const LeadsAddLeadsResponseDetail$outboundSchema: z.ZodType<
  LeadsAddLeadsResponseDetail$Outbound,
  z.ZodTypeDef,
  LeadsAddLeadsResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsResponseDetail$ {
  /** @deprecated use `LeadsAddLeadsResponseDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsAddLeadsResponseDetail$inboundSchema;
  /** @deprecated use `LeadsAddLeadsResponseDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsAddLeadsResponseDetail$outboundSchema;
  /** @deprecated use `LeadsAddLeadsResponseDetail$Outbound` instead. */
  export type Outbound = LeadsAddLeadsResponseDetail$Outbound;
}

export function leadsAddLeadsResponseDetailToJSON(
  leadsAddLeadsResponseDetail: LeadsAddLeadsResponseDetail,
): string {
  return JSON.stringify(
    LeadsAddLeadsResponseDetail$outboundSchema.parse(
      leadsAddLeadsResponseDetail,
    ),
  );
}

export function leadsAddLeadsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddLeadsResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddLeadsResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddLeadsResponseDetail' from JSON`,
  );
}

/** @internal */
export const LeadsAddLeadsResponse404ResponseBody$inboundSchema: z.ZodType<
  LeadsAddLeadsResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsAddLeadsResponse404ResponseBody(remapped);
  });

/** @internal */
export type LeadsAddLeadsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAddLeadsResponse404ResponseBody$outboundSchema: z.ZodType<
  LeadsAddLeadsResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAddLeadsResponse404ResponseBody
> = z.instanceof(LeadsAddLeadsResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsResponse404ResponseBody$ {
  /** @deprecated use `LeadsAddLeadsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    LeadsAddLeadsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `LeadsAddLeadsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsAddLeadsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `LeadsAddLeadsResponse404ResponseBody$Outbound` instead. */
  export type Outbound = LeadsAddLeadsResponse404ResponseBody$Outbound;
}

/** @internal */
export const LeadsAddLeadsResponseResponseBody$inboundSchema: z.ZodType<
  LeadsAddLeadsResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsAddLeadsResponseResponseBody(remapped);
  });

/** @internal */
export type LeadsAddLeadsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAddLeadsResponseResponseBody$outboundSchema: z.ZodType<
  LeadsAddLeadsResponseResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAddLeadsResponseResponseBody
> = z.instanceof(LeadsAddLeadsResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsResponseResponseBody$ {
  /** @deprecated use `LeadsAddLeadsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAddLeadsResponseResponseBody$inboundSchema;
  /** @deprecated use `LeadsAddLeadsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsAddLeadsResponseResponseBody$outboundSchema;
  /** @deprecated use `LeadsAddLeadsResponseResponseBody$Outbound` instead. */
  export type Outbound = LeadsAddLeadsResponseResponseBody$Outbound;
}

/** @internal */
export const LeadsAddLeadsDetail$inboundSchema: z.ZodType<
  LeadsAddLeadsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsAddLeadsDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsAddLeadsDetail$outboundSchema: z.ZodType<
  LeadsAddLeadsDetail$Outbound,
  z.ZodTypeDef,
  LeadsAddLeadsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsDetail$ {
  /** @deprecated use `LeadsAddLeadsDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsAddLeadsDetail$inboundSchema;
  /** @deprecated use `LeadsAddLeadsDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsAddLeadsDetail$outboundSchema;
  /** @deprecated use `LeadsAddLeadsDetail$Outbound` instead. */
  export type Outbound = LeadsAddLeadsDetail$Outbound;
}

export function leadsAddLeadsDetailToJSON(
  leadsAddLeadsDetail: LeadsAddLeadsDetail,
): string {
  return JSON.stringify(
    LeadsAddLeadsDetail$outboundSchema.parse(leadsAddLeadsDetail),
  );
}

export function leadsAddLeadsDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddLeadsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddLeadsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddLeadsDetail' from JSON`,
  );
}

/** @internal */
export const LeadsAddLeadsResponseBody$inboundSchema: z.ZodType<
  LeadsAddLeadsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsAddLeadsResponseBody(remapped);
  });

/** @internal */
export type LeadsAddLeadsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAddLeadsResponseBody$outboundSchema: z.ZodType<
  LeadsAddLeadsResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAddLeadsResponseBody
> = z.instanceof(LeadsAddLeadsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsResponseBody$ {
  /** @deprecated use `LeadsAddLeadsResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAddLeadsResponseBody$inboundSchema;
  /** @deprecated use `LeadsAddLeadsResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsAddLeadsResponseBody$outboundSchema;
  /** @deprecated use `LeadsAddLeadsResponseBody$Outbound` instead. */
  export type Outbound = LeadsAddLeadsResponseBody$Outbound;
}

/** @internal */
export const LeadsAddDetail$inboundSchema: z.ZodType<
  LeadsAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsAddDetail$outboundSchema: z.ZodType<
  LeadsAddDetail$Outbound,
  z.ZodTypeDef,
  LeadsAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddDetail$ {
  /** @deprecated use `LeadsAddDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsAddDetail$inboundSchema;
  /** @deprecated use `LeadsAddDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsAddDetail$outboundSchema;
  /** @deprecated use `LeadsAddDetail$Outbound` instead. */
  export type Outbound = LeadsAddDetail$Outbound;
}

export function leadsAddDetailToJSON(leadsAddDetail: LeadsAddDetail): string {
  return JSON.stringify(LeadsAddDetail$outboundSchema.parse(leadsAddDetail));
}

export function leadsAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddDetail' from JSON`,
  );
}

/** @internal */
export const LeadsAddResponseBody$inboundSchema: z.ZodType<
  LeadsAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsAddResponseBody(remapped);
  });

/** @internal */
export type LeadsAddResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAddResponseBody$outboundSchema: z.ZodType<
  LeadsAddResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAddResponseBody
> = z.instanceof(LeadsAddResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddResponseBody$ {
  /** @deprecated use `LeadsAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAddResponseBody$inboundSchema;
  /** @deprecated use `LeadsAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsAddResponseBody$outboundSchema;
  /** @deprecated use `LeadsAddResponseBody$Outbound` instead. */
  export type Outbound = LeadsAddResponseBody$Outbound;
}
