/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsAddHrisDepartmentsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisDepartmentsAddHrisDepartmentsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsAddHrisDepartmentsResponse422ResponseBodyData;

  constructor(
    err: HrisDepartmentsAddHrisDepartmentsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsAddHrisDepartmentsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisDepartmentsAddHrisDepartmentsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsAddHrisDepartmentsResponse404ResponseBodyData;

  constructor(
    err: HrisDepartmentsAddHrisDepartmentsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisDepartmentsAddHrisDepartmentsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class HrisDepartmentsAddHrisDepartmentsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsAddHrisDepartmentsResponseResponseBodyData;

  constructor(err: HrisDepartmentsAddHrisDepartmentsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsAddHrisDepartmentsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsAddHrisDepartmentsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisDepartmentsAddHrisDepartmentsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class HrisDepartmentsAddHrisDepartmentsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsAddHrisDepartmentsResponseBodyData;

  constructor(err: HrisDepartmentsAddHrisDepartmentsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsAddHrisDepartmentsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsAddDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisDepartmentsAddResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class HrisDepartmentsAddResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsAddResponseBodyData;

  constructor(err: HrisDepartmentsAddResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsAddResponseBody";
  }
}

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsAddHrisDepartmentsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAddHrisDepartmentsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddHrisDepartmentsResponse422Detail$ {
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsAddHrisDepartmentsResponse422Detail$Outbound;
}

export function hrisDepartmentsAddHrisDepartmentsResponse422DetailToJSON(
  hrisDepartmentsAddHrisDepartmentsResponse422Detail:
    HrisDepartmentsAddHrisDepartmentsResponse422Detail,
): string {
  return JSON.stringify(
    HrisDepartmentsAddHrisDepartmentsResponse422Detail$outboundSchema.parse(
      hrisDepartmentsAddHrisDepartmentsResponse422Detail,
    ),
  );
}

export function hrisDepartmentsAddHrisDepartmentsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsAddHrisDepartmentsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsAddHrisDepartmentsResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsAddHrisDepartmentsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody
  > = z.instanceof(HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$ {
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsAddHrisDepartmentsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponseDetail$inboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsAddHrisDepartmentsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponseDetail$outboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAddHrisDepartmentsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddHrisDepartmentsResponseDetail$ {
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponseDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponseDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsAddHrisDepartmentsResponseDetail$Outbound;
}

export function hrisDepartmentsAddHrisDepartmentsResponseDetailToJSON(
  hrisDepartmentsAddHrisDepartmentsResponseDetail:
    HrisDepartmentsAddHrisDepartmentsResponseDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsAddHrisDepartmentsResponseDetail$outboundSchema.parse(
      hrisDepartmentsAddHrisDepartmentsResponseDetail,
    ),
  );
}

export function hrisDepartmentsAddHrisDepartmentsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsAddHrisDepartmentsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsAddHrisDepartmentsResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsAddHrisDepartmentsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody
  > = z.instanceof(HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$ {
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsAddHrisDepartmentsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsAddHrisDepartmentsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsAddHrisDepartmentsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAddHrisDepartmentsResponseResponseBody
  > = z.instanceof(HrisDepartmentsAddHrisDepartmentsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddHrisDepartmentsResponseResponseBody$ {
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsAddHrisDepartmentsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsDetail$inboundSchema: z.ZodType<
  HrisDepartmentsAddHrisDepartmentsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsAddHrisDepartmentsDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsDetail$outboundSchema: z.ZodType<
  HrisDepartmentsAddHrisDepartmentsDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddHrisDepartmentsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddHrisDepartmentsDetail$ {
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAddHrisDepartmentsDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAddHrisDepartmentsDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddHrisDepartmentsDetail$Outbound;
}

export function hrisDepartmentsAddHrisDepartmentsDetailToJSON(
  hrisDepartmentsAddHrisDepartmentsDetail:
    HrisDepartmentsAddHrisDepartmentsDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsAddHrisDepartmentsDetail$outboundSchema.parse(
      hrisDepartmentsAddHrisDepartmentsDetail,
    ),
  );
}

export function hrisDepartmentsAddHrisDepartmentsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsAddHrisDepartmentsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsAddHrisDepartmentsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsAddHrisDepartmentsDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsAddHrisDepartmentsResponseBody(remapped);
    });

/** @internal */
export type HrisDepartmentsAddHrisDepartmentsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAddHrisDepartmentsResponseBody
  > = z.instanceof(HrisDepartmentsAddHrisDepartmentsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddHrisDepartmentsResponseBody$ {
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddHrisDepartmentsResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsAddDetail$inboundSchema: z.ZodType<
  HrisDepartmentsAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisDepartmentsAddDetail$outboundSchema: z.ZodType<
  HrisDepartmentsAddDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddDetail$ {
  /** @deprecated use `HrisDepartmentsAddDetail$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddDetail$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddDetail$Outbound;
}

export function hrisDepartmentsAddDetailToJSON(
  hrisDepartmentsAddDetail: HrisDepartmentsAddDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsAddDetail$outboundSchema.parse(hrisDepartmentsAddDetail),
  );
}

export function hrisDepartmentsAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAddDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddResponseBody$inboundSchema: z.ZodType<
  HrisDepartmentsAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisDepartmentsAddResponseBody(remapped);
  });

/** @internal */
export type HrisDepartmentsAddResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsAddResponseBody$outboundSchema: z.ZodType<
  HrisDepartmentsAddResponseBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddResponseBody
> = z.instanceof(HrisDepartmentsAddResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddResponseBody$ {
  /** @deprecated use `HrisDepartmentsAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddResponseBody$Outbound;
}
