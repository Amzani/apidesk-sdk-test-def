/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesAddActivitiesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type ActivitiesAddActivitiesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class ActivitiesAddActivitiesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesAddActivitiesResponse422ResponseBodyData;

  constructor(err: ActivitiesAddActivitiesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesAddActivitiesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesAddActivitiesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type ActivitiesAddActivitiesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class ActivitiesAddActivitiesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesAddActivitiesResponse404ResponseBodyData;

  constructor(err: ActivitiesAddActivitiesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesAddActivitiesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type ActivitiesAddActivitiesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class ActivitiesAddActivitiesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesAddActivitiesResponseResponseBodyData;

  constructor(err: ActivitiesAddActivitiesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesAddActivitiesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesAddActivitiesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type ActivitiesAddActivitiesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class ActivitiesAddActivitiesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesAddActivitiesResponseBodyData;

  constructor(err: ActivitiesAddActivitiesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesAddActivitiesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesAddDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type ActivitiesAddResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class ActivitiesAddResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesAddResponseBodyData;

  constructor(err: ActivitiesAddResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesAddResponseBody";
  }
}

/** @internal */
export const ActivitiesAddActivitiesResponse422Detail$inboundSchema: z.ZodType<
  ActivitiesAddActivitiesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesAddActivitiesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesAddActivitiesResponse422Detail$outboundSchema: z.ZodType<
  ActivitiesAddActivitiesResponse422Detail$Outbound,
  z.ZodTypeDef,
  ActivitiesAddActivitiesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddActivitiesResponse422Detail$ {
  /** @deprecated use `ActivitiesAddActivitiesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAddActivitiesResponse422Detail$inboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAddActivitiesResponse422Detail$outboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponse422Detail$Outbound` instead. */
  export type Outbound = ActivitiesAddActivitiesResponse422Detail$Outbound;
}

export function activitiesAddActivitiesResponse422DetailToJSON(
  activitiesAddActivitiesResponse422Detail:
    ActivitiesAddActivitiesResponse422Detail,
): string {
  return JSON.stringify(
    ActivitiesAddActivitiesResponse422Detail$outboundSchema.parse(
      activitiesAddActivitiesResponse422Detail,
    ),
  );
}

export function activitiesAddActivitiesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivitiesAddActivitiesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesAddActivitiesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivitiesAddActivitiesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddActivitiesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesAddActivitiesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesAddActivitiesResponse422ResponseBody(remapped);
    });

/** @internal */
export type ActivitiesAddActivitiesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAddActivitiesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesAddActivitiesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesAddActivitiesResponse422ResponseBody
  > = z.instanceof(ActivitiesAddActivitiesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddActivitiesResponse422ResponseBody$ {
  /** @deprecated use `ActivitiesAddActivitiesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAddActivitiesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAddActivitiesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesAddActivitiesResponse422ResponseBody$Outbound;
}

/** @internal */
export const ActivitiesAddActivitiesResponseDetail$inboundSchema: z.ZodType<
  ActivitiesAddActivitiesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesAddActivitiesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesAddActivitiesResponseDetail$outboundSchema: z.ZodType<
  ActivitiesAddActivitiesResponseDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesAddActivitiesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddActivitiesResponseDetail$ {
  /** @deprecated use `ActivitiesAddActivitiesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAddActivitiesResponseDetail$inboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAddActivitiesResponseDetail$outboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponseDetail$Outbound` instead. */
  export type Outbound = ActivitiesAddActivitiesResponseDetail$Outbound;
}

export function activitiesAddActivitiesResponseDetailToJSON(
  activitiesAddActivitiesResponseDetail: ActivitiesAddActivitiesResponseDetail,
): string {
  return JSON.stringify(
    ActivitiesAddActivitiesResponseDetail$outboundSchema.parse(
      activitiesAddActivitiesResponseDetail,
    ),
  );
}

export function activitiesAddActivitiesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddActivitiesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesAddActivitiesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddActivitiesResponseDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddActivitiesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesAddActivitiesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesAddActivitiesResponse404ResponseBody(remapped);
    });

/** @internal */
export type ActivitiesAddActivitiesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAddActivitiesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesAddActivitiesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesAddActivitiesResponse404ResponseBody
  > = z.instanceof(ActivitiesAddActivitiesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddActivitiesResponse404ResponseBody$ {
  /** @deprecated use `ActivitiesAddActivitiesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAddActivitiesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAddActivitiesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesAddActivitiesResponse404ResponseBody$Outbound;
}

/** @internal */
export const ActivitiesAddActivitiesResponseResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesAddActivitiesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesAddActivitiesResponseResponseBody(remapped);
    });

/** @internal */
export type ActivitiesAddActivitiesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAddActivitiesResponseResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesAddActivitiesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesAddActivitiesResponseResponseBody
  > = z.instanceof(ActivitiesAddActivitiesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddActivitiesResponseResponseBody$ {
  /** @deprecated use `ActivitiesAddActivitiesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAddActivitiesResponseResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAddActivitiesResponseResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponseResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesAddActivitiesResponseResponseBody$Outbound;
}

/** @internal */
export const ActivitiesAddActivitiesDetail$inboundSchema: z.ZodType<
  ActivitiesAddActivitiesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesAddActivitiesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesAddActivitiesDetail$outboundSchema: z.ZodType<
  ActivitiesAddActivitiesDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesAddActivitiesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddActivitiesDetail$ {
  /** @deprecated use `ActivitiesAddActivitiesDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddActivitiesDetail$inboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddActivitiesDetail$outboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesDetail$Outbound` instead. */
  export type Outbound = ActivitiesAddActivitiesDetail$Outbound;
}

export function activitiesAddActivitiesDetailToJSON(
  activitiesAddActivitiesDetail: ActivitiesAddActivitiesDetail,
): string {
  return JSON.stringify(
    ActivitiesAddActivitiesDetail$outboundSchema.parse(
      activitiesAddActivitiesDetail,
    ),
  );
}

export function activitiesAddActivitiesDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddActivitiesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddActivitiesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddActivitiesDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddActivitiesResponseBody$inboundSchema: z.ZodType<
  ActivitiesAddActivitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ActivitiesAddActivitiesResponseBody(remapped);
  });

/** @internal */
export type ActivitiesAddActivitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAddActivitiesResponseBody$outboundSchema: z.ZodType<
  ActivitiesAddActivitiesResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesAddActivitiesResponseBody
> = z.instanceof(ActivitiesAddActivitiesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddActivitiesResponseBody$ {
  /** @deprecated use `ActivitiesAddActivitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAddActivitiesResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAddActivitiesResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesAddActivitiesResponseBody$Outbound;
}

/** @internal */
export const ActivitiesAddDetail$inboundSchema: z.ZodType<
  ActivitiesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ActivitiesAddDetail$outboundSchema: z.ZodType<
  ActivitiesAddDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddDetail$ {
  /** @deprecated use `ActivitiesAddDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddDetail$inboundSchema;
  /** @deprecated use `ActivitiesAddDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddDetail$outboundSchema;
  /** @deprecated use `ActivitiesAddDetail$Outbound` instead. */
  export type Outbound = ActivitiesAddDetail$Outbound;
}

export function activitiesAddDetailToJSON(
  activitiesAddDetail: ActivitiesAddDetail,
): string {
  return JSON.stringify(
    ActivitiesAddDetail$outboundSchema.parse(activitiesAddDetail),
  );
}

export function activitiesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddResponseBody$inboundSchema: z.ZodType<
  ActivitiesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ActivitiesAddResponseBody(remapped);
  });

/** @internal */
export type ActivitiesAddResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAddResponseBody$outboundSchema: z.ZodType<
  ActivitiesAddResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesAddResponseBody
> = z.instanceof(ActivitiesAddResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddResponseBody$ {
  /** @deprecated use `ActivitiesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAddResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesAddResponseBody$Outbound;
}
