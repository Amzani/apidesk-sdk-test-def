/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsOneHrisDepartmentsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisDepartmentsOneHrisDepartmentsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unprocessable
 */
export class HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsOneHrisDepartmentsResponse422ResponseBodyData;

  constructor(
    err: HrisDepartmentsOneHrisDepartmentsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsOneHrisDepartmentsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisDepartmentsOneHrisDepartmentsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * The specified resource was not found
 */
export class HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsOneHrisDepartmentsResponse404ResponseBodyData;

  constructor(
    err: HrisDepartmentsOneHrisDepartmentsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisDepartmentsOneHrisDepartmentsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Payment Required
 */
export class HrisDepartmentsOneHrisDepartmentsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsOneHrisDepartmentsResponseResponseBodyData;

  constructor(err: HrisDepartmentsOneHrisDepartmentsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisDepartmentsOneHrisDepartmentsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsOneHrisDepartmentsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisDepartmentsOneHrisDepartmentsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisDepartmentsOneHrisDepartmentsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsOneHrisDepartmentsResponseBodyData;

  constructor(err: HrisDepartmentsOneHrisDepartmentsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisDepartmentsOneHrisDepartmentsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisDepartmentsOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisDepartmentsOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsOneResponseBodyData;

  constructor(err: HrisDepartmentsOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisDepartmentsOneResponseBody";
  }
}

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsOneHrisDepartmentsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsOneHrisDepartmentsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneHrisDepartmentsResponse422Detail$ {
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsOneHrisDepartmentsResponse422Detail$Outbound;
}

export function hrisDepartmentsOneHrisDepartmentsResponse422DetailToJSON(
  hrisDepartmentsOneHrisDepartmentsResponse422Detail:
    HrisDepartmentsOneHrisDepartmentsResponse422Detail,
): string {
  return JSON.stringify(
    HrisDepartmentsOneHrisDepartmentsResponse422Detail$outboundSchema.parse(
      hrisDepartmentsOneHrisDepartmentsResponse422Detail,
    ),
  );
}

export function hrisDepartmentsOneHrisDepartmentsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsOneHrisDepartmentsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsOneHrisDepartmentsResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsOneHrisDepartmentsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody
  > = z.instanceof(HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$ {
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsOneHrisDepartmentsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponseDetail$inboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsOneHrisDepartmentsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponseDetail$outboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsOneHrisDepartmentsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneHrisDepartmentsResponseDetail$ {
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponseDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponseDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsOneHrisDepartmentsResponseDetail$Outbound;
}

export function hrisDepartmentsOneHrisDepartmentsResponseDetailToJSON(
  hrisDepartmentsOneHrisDepartmentsResponseDetail:
    HrisDepartmentsOneHrisDepartmentsResponseDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsOneHrisDepartmentsResponseDetail$outboundSchema.parse(
      hrisDepartmentsOneHrisDepartmentsResponseDetail,
    ),
  );
}

export function hrisDepartmentsOneHrisDepartmentsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsOneHrisDepartmentsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsOneHrisDepartmentsResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsOneHrisDepartmentsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody
  > = z.instanceof(HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$ {
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsOneHrisDepartmentsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisDepartmentsOneHrisDepartmentsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsOneHrisDepartmentsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsOneHrisDepartmentsResponseResponseBody
  > = z.instanceof(HrisDepartmentsOneHrisDepartmentsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneHrisDepartmentsResponseResponseBody$ {
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsOneHrisDepartmentsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsDetail$inboundSchema: z.ZodType<
  HrisDepartmentsOneHrisDepartmentsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsOneHrisDepartmentsDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsDetail$outboundSchema: z.ZodType<
  HrisDepartmentsOneHrisDepartmentsDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneHrisDepartmentsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneHrisDepartmentsDetail$ {
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsOneHrisDepartmentsDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsOneHrisDepartmentsDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneHrisDepartmentsDetail$Outbound;
}

export function hrisDepartmentsOneHrisDepartmentsDetailToJSON(
  hrisDepartmentsOneHrisDepartmentsDetail:
    HrisDepartmentsOneHrisDepartmentsDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsOneHrisDepartmentsDetail$outboundSchema.parse(
      hrisDepartmentsOneHrisDepartmentsDetail,
    ),
  );
}

export function hrisDepartmentsOneHrisDepartmentsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsOneHrisDepartmentsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsOneHrisDepartmentsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsOneHrisDepartmentsDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisDepartmentsOneHrisDepartmentsResponseBody(remapped);
    });

/** @internal */
export type HrisDepartmentsOneHrisDepartmentsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsOneHrisDepartmentsResponseBody
  > = z.instanceof(HrisDepartmentsOneHrisDepartmentsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneHrisDepartmentsResponseBody$ {
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneHrisDepartmentsResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsOneDetail$inboundSchema: z.ZodType<
  HrisDepartmentsOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisDepartmentsOneDetail$outboundSchema: z.ZodType<
  HrisDepartmentsOneDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneDetail$ {
  /** @deprecated use `HrisDepartmentsOneDetail$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOneDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneDetail$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOneDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneDetail$Outbound;
}

export function hrisDepartmentsOneDetailToJSON(
  hrisDepartmentsOneDetail: HrisDepartmentsOneDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsOneDetail$outboundSchema.parse(hrisDepartmentsOneDetail),
  );
}

export function hrisDepartmentsOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsOneDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneResponseBody$inboundSchema: z.ZodType<
  HrisDepartmentsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisDepartmentsOneResponseBody(remapped);
  });

/** @internal */
export type HrisDepartmentsOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisDepartmentsOneResponseBody$outboundSchema: z.ZodType<
  HrisDepartmentsOneResponseBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneResponseBody
> = z.instanceof(HrisDepartmentsOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneResponseBody$ {
  /** @deprecated use `HrisDepartmentsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOneResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOneResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneResponseBody$Outbound;
}
