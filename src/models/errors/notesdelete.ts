/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesDeleteNotesResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type NotesDeleteNotesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class NotesDeleteNotesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesDeleteNotesResponse422ResponseBodyData;

  constructor(err: NotesDeleteNotesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesDeleteNotesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesDeleteNotesResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type NotesDeleteNotesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class NotesDeleteNotesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesDeleteNotesResponse404ResponseBodyData;

  constructor(err: NotesDeleteNotesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesDeleteNotesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type NotesDeleteNotesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class NotesDeleteNotesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesDeleteNotesResponseResponseBodyData;

  constructor(err: NotesDeleteNotesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesDeleteNotesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesDeleteNotesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type NotesDeleteNotesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class NotesDeleteNotesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesDeleteNotesResponseBodyData;

  constructor(err: NotesDeleteNotesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesDeleteNotesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesDeleteDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type NotesDeleteResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class NotesDeleteResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesDeleteResponseBodyData;

  constructor(err: NotesDeleteResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesDeleteResponseBody";
  }
}

/** @internal */
export const NotesDeleteNotesResponse422Detail$inboundSchema: z.ZodType<
  NotesDeleteNotesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesDeleteNotesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const NotesDeleteNotesResponse422Detail$outboundSchema: z.ZodType<
  NotesDeleteNotesResponse422Detail$Outbound,
  z.ZodTypeDef,
  NotesDeleteNotesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteNotesResponse422Detail$ {
  /** @deprecated use `NotesDeleteNotesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteNotesResponse422Detail$inboundSchema;
  /** @deprecated use `NotesDeleteNotesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    NotesDeleteNotesResponse422Detail$outboundSchema;
  /** @deprecated use `NotesDeleteNotesResponse422Detail$Outbound` instead. */
  export type Outbound = NotesDeleteNotesResponse422Detail$Outbound;
}

export function notesDeleteNotesResponse422DetailToJSON(
  notesDeleteNotesResponse422Detail: NotesDeleteNotesResponse422Detail,
): string {
  return JSON.stringify(
    NotesDeleteNotesResponse422Detail$outboundSchema.parse(
      notesDeleteNotesResponse422Detail,
    ),
  );
}

export function notesDeleteNotesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteNotesResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteNotesResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteNotesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const NotesDeleteNotesResponse422ResponseBody$inboundSchema: z.ZodType<
  NotesDeleteNotesResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesDeleteNotesResponse422ResponseBody(remapped);
  });

/** @internal */
export type NotesDeleteNotesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesDeleteNotesResponse422ResponseBody$outboundSchema: z.ZodType<
  NotesDeleteNotesResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  NotesDeleteNotesResponse422ResponseBody
> = z.instanceof(NotesDeleteNotesResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteNotesResponse422ResponseBody$ {
  /** @deprecated use `NotesDeleteNotesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotesDeleteNotesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `NotesDeleteNotesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesDeleteNotesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `NotesDeleteNotesResponse422ResponseBody$Outbound` instead. */
  export type Outbound = NotesDeleteNotesResponse422ResponseBody$Outbound;
}

/** @internal */
export const NotesDeleteNotesResponseDetail$inboundSchema: z.ZodType<
  NotesDeleteNotesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesDeleteNotesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const NotesDeleteNotesResponseDetail$outboundSchema: z.ZodType<
  NotesDeleteNotesResponseDetail$Outbound,
  z.ZodTypeDef,
  NotesDeleteNotesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteNotesResponseDetail$ {
  /** @deprecated use `NotesDeleteNotesResponseDetail$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteNotesResponseDetail$inboundSchema;
  /** @deprecated use `NotesDeleteNotesResponseDetail$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteNotesResponseDetail$outboundSchema;
  /** @deprecated use `NotesDeleteNotesResponseDetail$Outbound` instead. */
  export type Outbound = NotesDeleteNotesResponseDetail$Outbound;
}

export function notesDeleteNotesResponseDetailToJSON(
  notesDeleteNotesResponseDetail: NotesDeleteNotesResponseDetail,
): string {
  return JSON.stringify(
    NotesDeleteNotesResponseDetail$outboundSchema.parse(
      notesDeleteNotesResponseDetail,
    ),
  );
}

export function notesDeleteNotesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteNotesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteNotesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteNotesResponseDetail' from JSON`,
  );
}

/** @internal */
export const NotesDeleteNotesResponse404ResponseBody$inboundSchema: z.ZodType<
  NotesDeleteNotesResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesDeleteNotesResponse404ResponseBody(remapped);
  });

/** @internal */
export type NotesDeleteNotesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesDeleteNotesResponse404ResponseBody$outboundSchema: z.ZodType<
  NotesDeleteNotesResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  NotesDeleteNotesResponse404ResponseBody
> = z.instanceof(NotesDeleteNotesResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteNotesResponse404ResponseBody$ {
  /** @deprecated use `NotesDeleteNotesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotesDeleteNotesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `NotesDeleteNotesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesDeleteNotesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `NotesDeleteNotesResponse404ResponseBody$Outbound` instead. */
  export type Outbound = NotesDeleteNotesResponse404ResponseBody$Outbound;
}

/** @internal */
export const NotesDeleteNotesResponseResponseBody$inboundSchema: z.ZodType<
  NotesDeleteNotesResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesDeleteNotesResponseResponseBody(remapped);
  });

/** @internal */
export type NotesDeleteNotesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesDeleteNotesResponseResponseBody$outboundSchema: z.ZodType<
  NotesDeleteNotesResponseResponseBody$Outbound,
  z.ZodTypeDef,
  NotesDeleteNotesResponseResponseBody
> = z.instanceof(NotesDeleteNotesResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteNotesResponseResponseBody$ {
  /** @deprecated use `NotesDeleteNotesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotesDeleteNotesResponseResponseBody$inboundSchema;
  /** @deprecated use `NotesDeleteNotesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesDeleteNotesResponseResponseBody$outboundSchema;
  /** @deprecated use `NotesDeleteNotesResponseResponseBody$Outbound` instead. */
  export type Outbound = NotesDeleteNotesResponseResponseBody$Outbound;
}

/** @internal */
export const NotesDeleteNotesDetail$inboundSchema: z.ZodType<
  NotesDeleteNotesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesDeleteNotesDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const NotesDeleteNotesDetail$outboundSchema: z.ZodType<
  NotesDeleteNotesDetail$Outbound,
  z.ZodTypeDef,
  NotesDeleteNotesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteNotesDetail$ {
  /** @deprecated use `NotesDeleteNotesDetail$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteNotesDetail$inboundSchema;
  /** @deprecated use `NotesDeleteNotesDetail$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteNotesDetail$outboundSchema;
  /** @deprecated use `NotesDeleteNotesDetail$Outbound` instead. */
  export type Outbound = NotesDeleteNotesDetail$Outbound;
}

export function notesDeleteNotesDetailToJSON(
  notesDeleteNotesDetail: NotesDeleteNotesDetail,
): string {
  return JSON.stringify(
    NotesDeleteNotesDetail$outboundSchema.parse(notesDeleteNotesDetail),
  );
}

export function notesDeleteNotesDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteNotesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteNotesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteNotesDetail' from JSON`,
  );
}

/** @internal */
export const NotesDeleteNotesResponseBody$inboundSchema: z.ZodType<
  NotesDeleteNotesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesDeleteNotesResponseBody(remapped);
  });

/** @internal */
export type NotesDeleteNotesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesDeleteNotesResponseBody$outboundSchema: z.ZodType<
  NotesDeleteNotesResponseBody$Outbound,
  z.ZodTypeDef,
  NotesDeleteNotesResponseBody
> = z.instanceof(NotesDeleteNotesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteNotesResponseBody$ {
  /** @deprecated use `NotesDeleteNotesResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteNotesResponseBody$inboundSchema;
  /** @deprecated use `NotesDeleteNotesResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteNotesResponseBody$outboundSchema;
  /** @deprecated use `NotesDeleteNotesResponseBody$Outbound` instead. */
  export type Outbound = NotesDeleteNotesResponseBody$Outbound;
}

/** @internal */
export const NotesDeleteDetail$inboundSchema: z.ZodType<
  NotesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const NotesDeleteDetail$outboundSchema: z.ZodType<
  NotesDeleteDetail$Outbound,
  z.ZodTypeDef,
  NotesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteDetail$ {
  /** @deprecated use `NotesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteDetail$inboundSchema;
  /** @deprecated use `NotesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteDetail$outboundSchema;
  /** @deprecated use `NotesDeleteDetail$Outbound` instead. */
  export type Outbound = NotesDeleteDetail$Outbound;
}

export function notesDeleteDetailToJSON(
  notesDeleteDetail: NotesDeleteDetail,
): string {
  return JSON.stringify(
    NotesDeleteDetail$outboundSchema.parse(notesDeleteDetail),
  );
}

export function notesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const NotesDeleteResponseBody$inboundSchema: z.ZodType<
  NotesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesDeleteResponseBody(remapped);
  });

/** @internal */
export type NotesDeleteResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesDeleteResponseBody$outboundSchema: z.ZodType<
  NotesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  NotesDeleteResponseBody
> = z.instanceof(NotesDeleteResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteResponseBody$ {
  /** @deprecated use `NotesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteResponseBody$inboundSchema;
  /** @deprecated use `NotesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteResponseBody$outboundSchema;
  /** @deprecated use `NotesDeleteResponseBody$Outbound` instead. */
  export type Outbound = NotesDeleteResponseBody$Outbound;
}
