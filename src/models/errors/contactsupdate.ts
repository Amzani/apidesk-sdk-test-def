/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsUpdateContactsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type ContactsUpdateContactsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class ContactsUpdateContactsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsUpdateContactsResponse422ResponseBodyData;

  constructor(err: ContactsUpdateContactsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsUpdateContactsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsUpdateContactsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type ContactsUpdateContactsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class ContactsUpdateContactsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsUpdateContactsResponse404ResponseBodyData;

  constructor(err: ContactsUpdateContactsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsUpdateContactsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type ContactsUpdateContactsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class ContactsUpdateContactsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsUpdateContactsResponseResponseBodyData;

  constructor(err: ContactsUpdateContactsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsUpdateContactsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsUpdateContactsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type ContactsUpdateContactsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class ContactsUpdateContactsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsUpdateContactsResponseBodyData;

  constructor(err: ContactsUpdateContactsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsUpdateContactsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type ContactsUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class ContactsUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsUpdateResponseBodyData;

  constructor(err: ContactsUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsUpdateResponseBody";
  }
}

/** @internal */
export const ContactsUpdateContactsResponse422Detail$inboundSchema: z.ZodType<
  ContactsUpdateContactsResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsUpdateContactsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsUpdateContactsResponse422Detail$outboundSchema: z.ZodType<
  ContactsUpdateContactsResponse422Detail$Outbound,
  z.ZodTypeDef,
  ContactsUpdateContactsResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsResponse422Detail$ {
  /** @deprecated use `ContactsUpdateContactsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    ContactsUpdateContactsResponse422Detail$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    ContactsUpdateContactsResponse422Detail$outboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponse422Detail$Outbound` instead. */
  export type Outbound = ContactsUpdateContactsResponse422Detail$Outbound;
}

export function contactsUpdateContactsResponse422DetailToJSON(
  contactsUpdateContactsResponse422Detail:
    ContactsUpdateContactsResponse422Detail,
): string {
  return JSON.stringify(
    ContactsUpdateContactsResponse422Detail$outboundSchema.parse(
      contactsUpdateContactsResponse422Detail,
    ),
  );
}

export function contactsUpdateContactsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  ContactsUpdateContactsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ContactsUpdateContactsResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ContactsUpdateContactsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateContactsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    ContactsUpdateContactsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ContactsUpdateContactsResponse422ResponseBody(remapped);
    });

/** @internal */
export type ContactsUpdateContactsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsUpdateContactsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    ContactsUpdateContactsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsUpdateContactsResponse422ResponseBody
  > = z.instanceof(ContactsUpdateContactsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsResponse422ResponseBody$ {
  /** @deprecated use `ContactsUpdateContactsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsUpdateContactsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsUpdateContactsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponse422ResponseBody$Outbound` instead. */
  export type Outbound = ContactsUpdateContactsResponse422ResponseBody$Outbound;
}

/** @internal */
export const ContactsUpdateContactsResponseDetail$inboundSchema: z.ZodType<
  ContactsUpdateContactsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsUpdateContactsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsUpdateContactsResponseDetail$outboundSchema: z.ZodType<
  ContactsUpdateContactsResponseDetail$Outbound,
  z.ZodTypeDef,
  ContactsUpdateContactsResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsResponseDetail$ {
  /** @deprecated use `ContactsUpdateContactsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    ContactsUpdateContactsResponseDetail$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    ContactsUpdateContactsResponseDetail$outboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponseDetail$Outbound` instead. */
  export type Outbound = ContactsUpdateContactsResponseDetail$Outbound;
}

export function contactsUpdateContactsResponseDetailToJSON(
  contactsUpdateContactsResponseDetail: ContactsUpdateContactsResponseDetail,
): string {
  return JSON.stringify(
    ContactsUpdateContactsResponseDetail$outboundSchema.parse(
      contactsUpdateContactsResponseDetail,
    ),
  );
}

export function contactsUpdateContactsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateContactsResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContactsUpdateContactsResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateContactsResponseDetail' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateContactsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    ContactsUpdateContactsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ContactsUpdateContactsResponse404ResponseBody(remapped);
    });

/** @internal */
export type ContactsUpdateContactsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsUpdateContactsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    ContactsUpdateContactsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsUpdateContactsResponse404ResponseBody
  > = z.instanceof(ContactsUpdateContactsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsResponse404ResponseBody$ {
  /** @deprecated use `ContactsUpdateContactsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsUpdateContactsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsUpdateContactsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponse404ResponseBody$Outbound` instead. */
  export type Outbound = ContactsUpdateContactsResponse404ResponseBody$Outbound;
}

/** @internal */
export const ContactsUpdateContactsResponseResponseBody$inboundSchema:
  z.ZodType<ContactsUpdateContactsResponseResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      status_code: z.number().optional(),
      error: z.string().optional(),
      type_name: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    })
      .transform((v) => {
        const remapped = remap$(v, {
          "status_code": "statusCode",
          "type_name": "typeName",
        });

        return new ContactsUpdateContactsResponseResponseBody(remapped);
      });

/** @internal */
export type ContactsUpdateContactsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsUpdateContactsResponseResponseBody$outboundSchema:
  z.ZodType<
    ContactsUpdateContactsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsUpdateContactsResponseResponseBody
  > = z.instanceof(ContactsUpdateContactsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsResponseResponseBody$ {
  /** @deprecated use `ContactsUpdateContactsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsUpdateContactsResponseResponseBody$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsUpdateContactsResponseResponseBody$outboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponseResponseBody$Outbound` instead. */
  export type Outbound = ContactsUpdateContactsResponseResponseBody$Outbound;
}

/** @internal */
export const ContactsUpdateContactsDetail$inboundSchema: z.ZodType<
  ContactsUpdateContactsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsUpdateContactsDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsUpdateContactsDetail$outboundSchema: z.ZodType<
  ContactsUpdateContactsDetail$Outbound,
  z.ZodTypeDef,
  ContactsUpdateContactsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsDetail$ {
  /** @deprecated use `ContactsUpdateContactsDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateContactsDetail$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateContactsDetail$outboundSchema;
  /** @deprecated use `ContactsUpdateContactsDetail$Outbound` instead. */
  export type Outbound = ContactsUpdateContactsDetail$Outbound;
}

export function contactsUpdateContactsDetailToJSON(
  contactsUpdateContactsDetail: ContactsUpdateContactsDetail,
): string {
  return JSON.stringify(
    ContactsUpdateContactsDetail$outboundSchema.parse(
      contactsUpdateContactsDetail,
    ),
  );
}

export function contactsUpdateContactsDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateContactsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateContactsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateContactsDetail' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateContactsResponseBody$inboundSchema: z.ZodType<
  ContactsUpdateContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsUpdateContactsResponseBody(remapped);
  });

/** @internal */
export type ContactsUpdateContactsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsUpdateContactsResponseBody$outboundSchema: z.ZodType<
  ContactsUpdateContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsUpdateContactsResponseBody
> = z.instanceof(ContactsUpdateContactsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsResponseBody$ {
  /** @deprecated use `ContactsUpdateContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateContactsResponseBody$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsUpdateContactsResponseBody$outboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponseBody$Outbound` instead. */
  export type Outbound = ContactsUpdateContactsResponseBody$Outbound;
}

/** @internal */
export const ContactsUpdateDetail$inboundSchema: z.ZodType<
  ContactsUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsUpdateDetail$outboundSchema: z.ZodType<
  ContactsUpdateDetail$Outbound,
  z.ZodTypeDef,
  ContactsUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateDetail$ {
  /** @deprecated use `ContactsUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateDetail$inboundSchema;
  /** @deprecated use `ContactsUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateDetail$outboundSchema;
  /** @deprecated use `ContactsUpdateDetail$Outbound` instead. */
  export type Outbound = ContactsUpdateDetail$Outbound;
}

export function contactsUpdateDetailToJSON(
  contactsUpdateDetail: ContactsUpdateDetail,
): string {
  return JSON.stringify(
    ContactsUpdateDetail$outboundSchema.parse(contactsUpdateDetail),
  );
}

export function contactsUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateDetail' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateResponseBody$inboundSchema: z.ZodType<
  ContactsUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsUpdateResponseBody(remapped);
  });

/** @internal */
export type ContactsUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsUpdateResponseBody$outboundSchema: z.ZodType<
  ContactsUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsUpdateResponseBody
> = z.instanceof(ContactsUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateResponseBody$ {
  /** @deprecated use `ContactsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateResponseBody$inboundSchema;
  /** @deprecated use `ContactsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateResponseBody$outboundSchema;
  /** @deprecated use `ContactsUpdateResponseBody$Outbound` instead. */
  export type Outbound = ContactsUpdateResponseBody$Outbound;
}
