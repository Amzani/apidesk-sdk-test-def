/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesAllOpportunitiesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type OpportunitiesAllOpportunitiesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class OpportunitiesAllOpportunitiesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesAllOpportunitiesResponse422ResponseBodyData;

  constructor(err: OpportunitiesAllOpportunitiesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesAllOpportunitiesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesAllOpportunitiesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type OpportunitiesAllOpportunitiesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class OpportunitiesAllOpportunitiesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesAllOpportunitiesResponse404ResponseBodyData;

  constructor(err: OpportunitiesAllOpportunitiesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesAllOpportunitiesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type OpportunitiesAllOpportunitiesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class OpportunitiesAllOpportunitiesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesAllOpportunitiesResponseResponseBodyData;

  constructor(err: OpportunitiesAllOpportunitiesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesAllOpportunitiesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesAllOpportunitiesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type OpportunitiesAllOpportunitiesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class OpportunitiesAllOpportunitiesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesAllOpportunitiesResponseBodyData;

  constructor(err: OpportunitiesAllOpportunitiesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesAllOpportunitiesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type OpportunitiesAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class OpportunitiesAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: OpportunitiesAllResponseBodyData;

  constructor(err: OpportunitiesAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "OpportunitiesAllResponseBody";
  }
}

/** @internal */
export const OpportunitiesAllOpportunitiesResponse422Detail$inboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesAllOpportunitiesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesAllOpportunitiesResponse422Detail$outboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponse422Detail$Outbound,
    z.ZodTypeDef,
    OpportunitiesAllOpportunitiesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllOpportunitiesResponse422Detail$ {
  /** @deprecated use `OpportunitiesAllOpportunitiesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAllOpportunitiesResponse422Detail$inboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAllOpportunitiesResponse422Detail$outboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponse422Detail$Outbound` instead. */
  export type Outbound =
    OpportunitiesAllOpportunitiesResponse422Detail$Outbound;
}

export function opportunitiesAllOpportunitiesResponse422DetailToJSON(
  opportunitiesAllOpportunitiesResponse422Detail:
    OpportunitiesAllOpportunitiesResponse422Detail,
): string {
  return JSON.stringify(
    OpportunitiesAllOpportunitiesResponse422Detail$outboundSchema.parse(
      opportunitiesAllOpportunitiesResponse422Detail,
    ),
  );
}

export function opportunitiesAllOpportunitiesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesAllOpportunitiesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesAllOpportunitiesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesAllOpportunitiesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllOpportunitiesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesAllOpportunitiesResponse422ResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesAllOpportunitiesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAllOpportunitiesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesAllOpportunitiesResponse422ResponseBody
  > = z.instanceof(OpportunitiesAllOpportunitiesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllOpportunitiesResponse422ResponseBody$ {
  /** @deprecated use `OpportunitiesAllOpportunitiesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAllOpportunitiesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAllOpportunitiesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesAllOpportunitiesResponse422ResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesAllOpportunitiesResponseDetail$inboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesAllOpportunitiesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesAllOpportunitiesResponseDetail$outboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponseDetail$Outbound,
    z.ZodTypeDef,
    OpportunitiesAllOpportunitiesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllOpportunitiesResponseDetail$ {
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAllOpportunitiesResponseDetail$inboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAllOpportunitiesResponseDetail$outboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseDetail$Outbound` instead. */
  export type Outbound = OpportunitiesAllOpportunitiesResponseDetail$Outbound;
}

export function opportunitiesAllOpportunitiesResponseDetailToJSON(
  opportunitiesAllOpportunitiesResponseDetail:
    OpportunitiesAllOpportunitiesResponseDetail,
): string {
  return JSON.stringify(
    OpportunitiesAllOpportunitiesResponseDetail$outboundSchema.parse(
      opportunitiesAllOpportunitiesResponseDetail,
    ),
  );
}

export function opportunitiesAllOpportunitiesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesAllOpportunitiesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesAllOpportunitiesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesAllOpportunitiesResponseDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllOpportunitiesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesAllOpportunitiesResponse404ResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesAllOpportunitiesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAllOpportunitiesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesAllOpportunitiesResponse404ResponseBody
  > = z.instanceof(OpportunitiesAllOpportunitiesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllOpportunitiesResponse404ResponseBody$ {
  /** @deprecated use `OpportunitiesAllOpportunitiesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAllOpportunitiesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAllOpportunitiesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesAllOpportunitiesResponse404ResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesAllOpportunitiesResponseResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new OpportunitiesAllOpportunitiesResponseResponseBody(remapped);
    });

/** @internal */
export type OpportunitiesAllOpportunitiesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAllOpportunitiesResponseResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesAllOpportunitiesResponseResponseBody
  > = z.instanceof(OpportunitiesAllOpportunitiesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllOpportunitiesResponseResponseBody$ {
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAllOpportunitiesResponseResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAllOpportunitiesResponseResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    OpportunitiesAllOpportunitiesResponseResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesAllOpportunitiesDetail$inboundSchema: z.ZodType<
  OpportunitiesAllOpportunitiesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesAllOpportunitiesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const OpportunitiesAllOpportunitiesDetail$outboundSchema: z.ZodType<
  OpportunitiesAllOpportunitiesDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllOpportunitiesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllOpportunitiesDetail$ {
  /** @deprecated use `OpportunitiesAllOpportunitiesDetail$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAllOpportunitiesDetail$inboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesDetail$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAllOpportunitiesDetail$outboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesDetail$Outbound` instead. */
  export type Outbound = OpportunitiesAllOpportunitiesDetail$Outbound;
}

export function opportunitiesAllOpportunitiesDetailToJSON(
  opportunitiesAllOpportunitiesDetail: OpportunitiesAllOpportunitiesDetail,
): string {
  return JSON.stringify(
    OpportunitiesAllOpportunitiesDetail$outboundSchema.parse(
      opportunitiesAllOpportunitiesDetail,
    ),
  );
}

export function opportunitiesAllOpportunitiesDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllOpportunitiesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesAllOpportunitiesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllOpportunitiesDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllOpportunitiesResponseBody$inboundSchema: z.ZodType<
  OpportunitiesAllOpportunitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new OpportunitiesAllOpportunitiesResponseBody(remapped);
  });

/** @internal */
export type OpportunitiesAllOpportunitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAllOpportunitiesResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesAllOpportunitiesResponseBody
  > = z.instanceof(OpportunitiesAllOpportunitiesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllOpportunitiesResponseBody$ {
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAllOpportunitiesResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAllOpportunitiesResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesAllOpportunitiesResponseBody$Outbound;
}

/** @internal */
export const OpportunitiesAllDetail$inboundSchema: z.ZodType<
  OpportunitiesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const OpportunitiesAllDetail$outboundSchema: z.ZodType<
  OpportunitiesAllDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllDetail$ {
  /** @deprecated use `OpportunitiesAllDetail$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllDetail$inboundSchema;
  /** @deprecated use `OpportunitiesAllDetail$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllDetail$outboundSchema;
  /** @deprecated use `OpportunitiesAllDetail$Outbound` instead. */
  export type Outbound = OpportunitiesAllDetail$Outbound;
}

export function opportunitiesAllDetailToJSON(
  opportunitiesAllDetail: OpportunitiesAllDetail,
): string {
  return JSON.stringify(
    OpportunitiesAllDetail$outboundSchema.parse(opportunitiesAllDetail),
  );
}

export function opportunitiesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllResponseBody$inboundSchema: z.ZodType<
  OpportunitiesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new OpportunitiesAllResponseBody(remapped);
  });

/** @internal */
export type OpportunitiesAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAllResponseBody$outboundSchema: z.ZodType<
  OpportunitiesAllResponseBody$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllResponseBody
> = z.instanceof(OpportunitiesAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllResponseBody$ {
  /** @deprecated use `OpportunitiesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAllResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesAllResponseBody$Outbound;
}
