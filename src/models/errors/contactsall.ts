/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsAllContactsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type ContactsAllContactsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class ContactsAllContactsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsAllContactsResponse422ResponseBodyData;

  constructor(err: ContactsAllContactsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsAllContactsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsAllContactsResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type ContactsAllContactsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class ContactsAllContactsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsAllContactsResponse404ResponseBodyData;

  constructor(err: ContactsAllContactsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsAllContactsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type ContactsAllContactsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class ContactsAllContactsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsAllContactsResponseResponseBodyData;

  constructor(err: ContactsAllContactsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsAllContactsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsAllContactsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type ContactsAllContactsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class ContactsAllContactsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsAllContactsResponseBodyData;

  constructor(err: ContactsAllContactsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsAllContactsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type ContactsAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class ContactsAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsAllResponseBodyData;

  constructor(err: ContactsAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsAllResponseBody";
  }
}

/** @internal */
export const ContactsAllContactsResponse422Detail$inboundSchema: z.ZodType<
  ContactsAllContactsResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsAllContactsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsAllContactsResponse422Detail$outboundSchema: z.ZodType<
  ContactsAllContactsResponse422Detail$Outbound,
  z.ZodTypeDef,
  ContactsAllContactsResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsResponse422Detail$ {
  /** @deprecated use `ContactsAllContactsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAllContactsResponse422Detail$inboundSchema;
  /** @deprecated use `ContactsAllContactsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAllContactsResponse422Detail$outboundSchema;
  /** @deprecated use `ContactsAllContactsResponse422Detail$Outbound` instead. */
  export type Outbound = ContactsAllContactsResponse422Detail$Outbound;
}

export function contactsAllContactsResponse422DetailToJSON(
  contactsAllContactsResponse422Detail: ContactsAllContactsResponse422Detail,
): string {
  return JSON.stringify(
    ContactsAllContactsResponse422Detail$outboundSchema.parse(
      contactsAllContactsResponse422Detail,
    ),
  );
}

export function contactsAllContactsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllContactsResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContactsAllContactsResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllContactsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const ContactsAllContactsResponse422ResponseBody$inboundSchema:
  z.ZodType<ContactsAllContactsResponse422ResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      status_code: z.number().optional(),
      error: z.string().optional(),
      type_name: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    })
      .transform((v) => {
        const remapped = remap$(v, {
          "status_code": "statusCode",
          "type_name": "typeName",
        });

        return new ContactsAllContactsResponse422ResponseBody(remapped);
      });

/** @internal */
export type ContactsAllContactsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAllContactsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    ContactsAllContactsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsAllContactsResponse422ResponseBody
  > = z.instanceof(ContactsAllContactsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsResponse422ResponseBody$ {
  /** @deprecated use `ContactsAllContactsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAllContactsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `ContactsAllContactsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAllContactsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `ContactsAllContactsResponse422ResponseBody$Outbound` instead. */
  export type Outbound = ContactsAllContactsResponse422ResponseBody$Outbound;
}

/** @internal */
export const ContactsAllContactsResponseDetail$inboundSchema: z.ZodType<
  ContactsAllContactsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsAllContactsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsAllContactsResponseDetail$outboundSchema: z.ZodType<
  ContactsAllContactsResponseDetail$Outbound,
  z.ZodTypeDef,
  ContactsAllContactsResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsResponseDetail$ {
  /** @deprecated use `ContactsAllContactsResponseDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsAllContactsResponseDetail$inboundSchema;
  /** @deprecated use `ContactsAllContactsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAllContactsResponseDetail$outboundSchema;
  /** @deprecated use `ContactsAllContactsResponseDetail$Outbound` instead. */
  export type Outbound = ContactsAllContactsResponseDetail$Outbound;
}

export function contactsAllContactsResponseDetailToJSON(
  contactsAllContactsResponseDetail: ContactsAllContactsResponseDetail,
): string {
  return JSON.stringify(
    ContactsAllContactsResponseDetail$outboundSchema.parse(
      contactsAllContactsResponseDetail,
    ),
  );
}

export function contactsAllContactsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllContactsResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllContactsResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllContactsResponseDetail' from JSON`,
  );
}

/** @internal */
export const ContactsAllContactsResponse404ResponseBody$inboundSchema:
  z.ZodType<ContactsAllContactsResponse404ResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      status_code: z.number().optional(),
      error: z.string().optional(),
      type_name: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    })
      .transform((v) => {
        const remapped = remap$(v, {
          "status_code": "statusCode",
          "type_name": "typeName",
        });

        return new ContactsAllContactsResponse404ResponseBody(remapped);
      });

/** @internal */
export type ContactsAllContactsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAllContactsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    ContactsAllContactsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsAllContactsResponse404ResponseBody
  > = z.instanceof(ContactsAllContactsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsResponse404ResponseBody$ {
  /** @deprecated use `ContactsAllContactsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAllContactsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `ContactsAllContactsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAllContactsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `ContactsAllContactsResponse404ResponseBody$Outbound` instead. */
  export type Outbound = ContactsAllContactsResponse404ResponseBody$Outbound;
}

/** @internal */
export const ContactsAllContactsResponseResponseBody$inboundSchema: z.ZodType<
  ContactsAllContactsResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsAllContactsResponseResponseBody(remapped);
  });

/** @internal */
export type ContactsAllContactsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAllContactsResponseResponseBody$outboundSchema: z.ZodType<
  ContactsAllContactsResponseResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsAllContactsResponseResponseBody
> = z.instanceof(ContactsAllContactsResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsResponseResponseBody$ {
  /** @deprecated use `ContactsAllContactsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAllContactsResponseResponseBody$inboundSchema;
  /** @deprecated use `ContactsAllContactsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAllContactsResponseResponseBody$outboundSchema;
  /** @deprecated use `ContactsAllContactsResponseResponseBody$Outbound` instead. */
  export type Outbound = ContactsAllContactsResponseResponseBody$Outbound;
}

/** @internal */
export const ContactsAllContactsDetail$inboundSchema: z.ZodType<
  ContactsAllContactsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsAllContactsDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsAllContactsDetail$outboundSchema: z.ZodType<
  ContactsAllContactsDetail$Outbound,
  z.ZodTypeDef,
  ContactsAllContactsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsDetail$ {
  /** @deprecated use `ContactsAllContactsDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsAllContactsDetail$inboundSchema;
  /** @deprecated use `ContactsAllContactsDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsAllContactsDetail$outboundSchema;
  /** @deprecated use `ContactsAllContactsDetail$Outbound` instead. */
  export type Outbound = ContactsAllContactsDetail$Outbound;
}

export function contactsAllContactsDetailToJSON(
  contactsAllContactsDetail: ContactsAllContactsDetail,
): string {
  return JSON.stringify(
    ContactsAllContactsDetail$outboundSchema.parse(contactsAllContactsDetail),
  );
}

export function contactsAllContactsDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllContactsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllContactsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllContactsDetail' from JSON`,
  );
}

/** @internal */
export const ContactsAllContactsResponseBody$inboundSchema: z.ZodType<
  ContactsAllContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsAllContactsResponseBody(remapped);
  });

/** @internal */
export type ContactsAllContactsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAllContactsResponseBody$outboundSchema: z.ZodType<
  ContactsAllContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsAllContactsResponseBody
> = z.instanceof(ContactsAllContactsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsResponseBody$ {
  /** @deprecated use `ContactsAllContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsAllContactsResponseBody$inboundSchema;
  /** @deprecated use `ContactsAllContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsAllContactsResponseBody$outboundSchema;
  /** @deprecated use `ContactsAllContactsResponseBody$Outbound` instead. */
  export type Outbound = ContactsAllContactsResponseBody$Outbound;
}

/** @internal */
export const ContactsAllDetail$inboundSchema: z.ZodType<
  ContactsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsAllDetail$outboundSchema: z.ZodType<
  ContactsAllDetail$Outbound,
  z.ZodTypeDef,
  ContactsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllDetail$ {
  /** @deprecated use `ContactsAllDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsAllDetail$inboundSchema;
  /** @deprecated use `ContactsAllDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsAllDetail$outboundSchema;
  /** @deprecated use `ContactsAllDetail$Outbound` instead. */
  export type Outbound = ContactsAllDetail$Outbound;
}

export function contactsAllDetailToJSON(
  contactsAllDetail: ContactsAllDetail,
): string {
  return JSON.stringify(
    ContactsAllDetail$outboundSchema.parse(contactsAllDetail),
  );
}

export function contactsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllDetail' from JSON`,
  );
}

/** @internal */
export const ContactsAllResponseBody$inboundSchema: z.ZodType<
  ContactsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsAllResponseBody(remapped);
  });

/** @internal */
export type ContactsAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAllResponseBody$outboundSchema: z.ZodType<
  ContactsAllResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsAllResponseBody
> = z.instanceof(ContactsAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllResponseBody$ {
  /** @deprecated use `ContactsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsAllResponseBody$inboundSchema;
  /** @deprecated use `ContactsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsAllResponseBody$outboundSchema;
  /** @deprecated use `ContactsAllResponseBody$Outbound` instead. */
  export type Outbound = ContactsAllResponseBody$Outbound;
}
