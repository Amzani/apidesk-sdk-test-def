/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsDeleteLeadsResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type LeadsDeleteLeadsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class LeadsDeleteLeadsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsDeleteLeadsResponse422ResponseBodyData;

  constructor(err: LeadsDeleteLeadsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsDeleteLeadsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsDeleteLeadsResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type LeadsDeleteLeadsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class LeadsDeleteLeadsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsDeleteLeadsResponse404ResponseBodyData;

  constructor(err: LeadsDeleteLeadsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsDeleteLeadsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type LeadsDeleteLeadsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class LeadsDeleteLeadsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsDeleteLeadsResponseResponseBodyData;

  constructor(err: LeadsDeleteLeadsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsDeleteLeadsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsDeleteLeadsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type LeadsDeleteLeadsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class LeadsDeleteLeadsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsDeleteLeadsResponseBodyData;

  constructor(err: LeadsDeleteLeadsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsDeleteLeadsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsDeleteDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type LeadsDeleteResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class LeadsDeleteResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsDeleteResponseBodyData;

  constructor(err: LeadsDeleteResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsDeleteResponseBody";
  }
}

/** @internal */
export const LeadsDeleteLeadsResponse422Detail$inboundSchema: z.ZodType<
  LeadsDeleteLeadsResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsDeleteLeadsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const LeadsDeleteLeadsResponse422Detail$outboundSchema: z.ZodType<
  LeadsDeleteLeadsResponse422Detail$Outbound,
  z.ZodTypeDef,
  LeadsDeleteLeadsResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteLeadsResponse422Detail$ {
  /** @deprecated use `LeadsDeleteLeadsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteLeadsResponse422Detail$inboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    LeadsDeleteLeadsResponse422Detail$outboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponse422Detail$Outbound` instead. */
  export type Outbound = LeadsDeleteLeadsResponse422Detail$Outbound;
}

export function leadsDeleteLeadsResponse422DetailToJSON(
  leadsDeleteLeadsResponse422Detail: LeadsDeleteLeadsResponse422Detail,
): string {
  return JSON.stringify(
    LeadsDeleteLeadsResponse422Detail$outboundSchema.parse(
      leadsDeleteLeadsResponse422Detail,
    ),
  );
}

export function leadsDeleteLeadsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteLeadsResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteLeadsResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteLeadsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const LeadsDeleteLeadsResponse422ResponseBody$inboundSchema: z.ZodType<
  LeadsDeleteLeadsResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsDeleteLeadsResponse422ResponseBody(remapped);
  });

/** @internal */
export type LeadsDeleteLeadsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsDeleteLeadsResponse422ResponseBody$outboundSchema: z.ZodType<
  LeadsDeleteLeadsResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsDeleteLeadsResponse422ResponseBody
> = z.instanceof(LeadsDeleteLeadsResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteLeadsResponse422ResponseBody$ {
  /** @deprecated use `LeadsDeleteLeadsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    LeadsDeleteLeadsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsDeleteLeadsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponse422ResponseBody$Outbound` instead. */
  export type Outbound = LeadsDeleteLeadsResponse422ResponseBody$Outbound;
}

/** @internal */
export const LeadsDeleteLeadsResponseDetail$inboundSchema: z.ZodType<
  LeadsDeleteLeadsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsDeleteLeadsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const LeadsDeleteLeadsResponseDetail$outboundSchema: z.ZodType<
  LeadsDeleteLeadsResponseDetail$Outbound,
  z.ZodTypeDef,
  LeadsDeleteLeadsResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteLeadsResponseDetail$ {
  /** @deprecated use `LeadsDeleteLeadsResponseDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteLeadsResponseDetail$inboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponseDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteLeadsResponseDetail$outboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponseDetail$Outbound` instead. */
  export type Outbound = LeadsDeleteLeadsResponseDetail$Outbound;
}

export function leadsDeleteLeadsResponseDetailToJSON(
  leadsDeleteLeadsResponseDetail: LeadsDeleteLeadsResponseDetail,
): string {
  return JSON.stringify(
    LeadsDeleteLeadsResponseDetail$outboundSchema.parse(
      leadsDeleteLeadsResponseDetail,
    ),
  );
}

export function leadsDeleteLeadsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteLeadsResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteLeadsResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteLeadsResponseDetail' from JSON`,
  );
}

/** @internal */
export const LeadsDeleteLeadsResponse404ResponseBody$inboundSchema: z.ZodType<
  LeadsDeleteLeadsResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsDeleteLeadsResponse404ResponseBody(remapped);
  });

/** @internal */
export type LeadsDeleteLeadsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsDeleteLeadsResponse404ResponseBody$outboundSchema: z.ZodType<
  LeadsDeleteLeadsResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsDeleteLeadsResponse404ResponseBody
> = z.instanceof(LeadsDeleteLeadsResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteLeadsResponse404ResponseBody$ {
  /** @deprecated use `LeadsDeleteLeadsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    LeadsDeleteLeadsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsDeleteLeadsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponse404ResponseBody$Outbound` instead. */
  export type Outbound = LeadsDeleteLeadsResponse404ResponseBody$Outbound;
}

/** @internal */
export const LeadsDeleteLeadsResponseResponseBody$inboundSchema: z.ZodType<
  LeadsDeleteLeadsResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsDeleteLeadsResponseResponseBody(remapped);
  });

/** @internal */
export type LeadsDeleteLeadsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsDeleteLeadsResponseResponseBody$outboundSchema: z.ZodType<
  LeadsDeleteLeadsResponseResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsDeleteLeadsResponseResponseBody
> = z.instanceof(LeadsDeleteLeadsResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteLeadsResponseResponseBody$ {
  /** @deprecated use `LeadsDeleteLeadsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    LeadsDeleteLeadsResponseResponseBody$inboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsDeleteLeadsResponseResponseBody$outboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponseResponseBody$Outbound` instead. */
  export type Outbound = LeadsDeleteLeadsResponseResponseBody$Outbound;
}

/** @internal */
export const LeadsDeleteLeadsDetail$inboundSchema: z.ZodType<
  LeadsDeleteLeadsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsDeleteLeadsDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsDeleteLeadsDetail$outboundSchema: z.ZodType<
  LeadsDeleteLeadsDetail$Outbound,
  z.ZodTypeDef,
  LeadsDeleteLeadsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteLeadsDetail$ {
  /** @deprecated use `LeadsDeleteLeadsDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteLeadsDetail$inboundSchema;
  /** @deprecated use `LeadsDeleteLeadsDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteLeadsDetail$outboundSchema;
  /** @deprecated use `LeadsDeleteLeadsDetail$Outbound` instead. */
  export type Outbound = LeadsDeleteLeadsDetail$Outbound;
}

export function leadsDeleteLeadsDetailToJSON(
  leadsDeleteLeadsDetail: LeadsDeleteLeadsDetail,
): string {
  return JSON.stringify(
    LeadsDeleteLeadsDetail$outboundSchema.parse(leadsDeleteLeadsDetail),
  );
}

export function leadsDeleteLeadsDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteLeadsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteLeadsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteLeadsDetail' from JSON`,
  );
}

/** @internal */
export const LeadsDeleteLeadsResponseBody$inboundSchema: z.ZodType<
  LeadsDeleteLeadsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsDeleteLeadsResponseBody(remapped);
  });

/** @internal */
export type LeadsDeleteLeadsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsDeleteLeadsResponseBody$outboundSchema: z.ZodType<
  LeadsDeleteLeadsResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsDeleteLeadsResponseBody
> = z.instanceof(LeadsDeleteLeadsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteLeadsResponseBody$ {
  /** @deprecated use `LeadsDeleteLeadsResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteLeadsResponseBody$inboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteLeadsResponseBody$outboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponseBody$Outbound` instead. */
  export type Outbound = LeadsDeleteLeadsResponseBody$Outbound;
}

/** @internal */
export const LeadsDeleteDetail$inboundSchema: z.ZodType<
  LeadsDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsDeleteDetail$outboundSchema: z.ZodType<
  LeadsDeleteDetail$Outbound,
  z.ZodTypeDef,
  LeadsDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteDetail$ {
  /** @deprecated use `LeadsDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteDetail$inboundSchema;
  /** @deprecated use `LeadsDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteDetail$outboundSchema;
  /** @deprecated use `LeadsDeleteDetail$Outbound` instead. */
  export type Outbound = LeadsDeleteDetail$Outbound;
}

export function leadsDeleteDetailToJSON(
  leadsDeleteDetail: LeadsDeleteDetail,
): string {
  return JSON.stringify(
    LeadsDeleteDetail$outboundSchema.parse(leadsDeleteDetail),
  );
}

export function leadsDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteDetail' from JSON`,
  );
}

/** @internal */
export const LeadsDeleteResponseBody$inboundSchema: z.ZodType<
  LeadsDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsDeleteResponseBody(remapped);
  });

/** @internal */
export type LeadsDeleteResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsDeleteResponseBody$outboundSchema: z.ZodType<
  LeadsDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsDeleteResponseBody
> = z.instanceof(LeadsDeleteResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteResponseBody$ {
  /** @deprecated use `LeadsDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteResponseBody$inboundSchema;
  /** @deprecated use `LeadsDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteResponseBody$outboundSchema;
  /** @deprecated use `LeadsDeleteResponseBody$Outbound` instead. */
  export type Outbound = LeadsDeleteResponseBody$Outbound;
}
