/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesUpdateHrisCompaniesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisCompaniesUpdateHrisCompaniesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unprocessable
 */
export class HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesUpdateHrisCompaniesResponse422ResponseBodyData;

  constructor(
    err: HrisCompaniesUpdateHrisCompaniesResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesUpdateHrisCompaniesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisCompaniesUpdateHrisCompaniesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * The specified resource was not found
 */
export class HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesUpdateHrisCompaniesResponse404ResponseBodyData;

  constructor(
    err: HrisCompaniesUpdateHrisCompaniesResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisCompaniesUpdateHrisCompaniesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Payment Required
 */
export class HrisCompaniesUpdateHrisCompaniesResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesUpdateHrisCompaniesResponseResponseBodyData;

  constructor(err: HrisCompaniesUpdateHrisCompaniesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesUpdateHrisCompaniesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesUpdateHrisCompaniesDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisCompaniesUpdateHrisCompaniesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisCompaniesUpdateHrisCompaniesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesUpdateHrisCompaniesResponseBodyData;

  constructor(err: HrisCompaniesUpdateHrisCompaniesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesUpdateHrisCompaniesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisCompaniesUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisCompaniesUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesUpdateResponseBodyData;

  constructor(err: HrisCompaniesUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesUpdateResponseBody";
  }
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponse422Detail$inboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesUpdateHrisCompaniesResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponse422Detail$outboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisCompaniesUpdateHrisCompaniesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesResponse422Detail$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponse422Detail$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponse422Detail$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisCompaniesUpdateHrisCompaniesResponse422Detail$Outbound;
}

export function hrisCompaniesUpdateHrisCompaniesResponse422DetailToJSON(
  hrisCompaniesUpdateHrisCompaniesResponse422Detail:
    HrisCompaniesUpdateHrisCompaniesResponse422Detail,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateHrisCompaniesResponse422Detail$outboundSchema.parse(
      hrisCompaniesUpdateHrisCompaniesResponse422Detail,
    ),
  );
}

export function hrisCompaniesUpdateHrisCompaniesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesUpdateHrisCompaniesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesUpdateHrisCompaniesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesUpdateHrisCompaniesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody
  > = z.instanceof(HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesUpdateHrisCompaniesResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponseDetail$inboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesUpdateHrisCompaniesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponseDetail$outboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisCompaniesUpdateHrisCompaniesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesResponseDetail$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponseDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponseDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisCompaniesUpdateHrisCompaniesResponseDetail$Outbound;
}

export function hrisCompaniesUpdateHrisCompaniesResponseDetailToJSON(
  hrisCompaniesUpdateHrisCompaniesResponseDetail:
    HrisCompaniesUpdateHrisCompaniesResponseDetail,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateHrisCompaniesResponseDetail$outboundSchema.parse(
      hrisCompaniesUpdateHrisCompaniesResponseDetail,
    ),
  );
}

export function hrisCompaniesUpdateHrisCompaniesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesUpdateHrisCompaniesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesUpdateHrisCompaniesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesUpdateHrisCompaniesResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody
  > = z.instanceof(HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesUpdateHrisCompaniesResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesUpdateHrisCompaniesResponseResponseBody(remapped);
    });

/** @internal */
export type HrisCompaniesUpdateHrisCompaniesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesUpdateHrisCompaniesResponseResponseBody
  > = z.instanceof(HrisCompaniesUpdateHrisCompaniesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesResponseResponseBody$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesUpdateHrisCompaniesResponseResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesDetail$inboundSchema: z.ZodType<
  HrisCompaniesUpdateHrisCompaniesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesUpdateHrisCompaniesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesDetail$outboundSchema: z.ZodType<
  HrisCompaniesUpdateHrisCompaniesDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateHrisCompaniesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesDetail$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateHrisCompaniesDetail$Outbound;
}

export function hrisCompaniesUpdateHrisCompaniesDetailToJSON(
  hrisCompaniesUpdateHrisCompaniesDetail:
    HrisCompaniesUpdateHrisCompaniesDetail,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateHrisCompaniesDetail$outboundSchema.parse(
      hrisCompaniesUpdateHrisCompaniesDetail,
    ),
  );
}

export function hrisCompaniesUpdateHrisCompaniesDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateHrisCompaniesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesUpdateHrisCompaniesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateHrisCompaniesDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesUpdateHrisCompaniesResponseBody(remapped);
    });

/** @internal */
export type HrisCompaniesUpdateHrisCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesUpdateHrisCompaniesResponseBody
  > = z.instanceof(HrisCompaniesUpdateHrisCompaniesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesResponseBody$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateHrisCompaniesResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesUpdateDetail$inboundSchema: z.ZodType<
  HrisCompaniesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisCompaniesUpdateDetail$outboundSchema: z.ZodType<
  HrisCompaniesUpdateDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateDetail$ {
  /** @deprecated use `HrisCompaniesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateDetail$Outbound;
}

export function hrisCompaniesUpdateDetailToJSON(
  hrisCompaniesUpdateDetail: HrisCompaniesUpdateDetail,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateDetail$outboundSchema.parse(hrisCompaniesUpdateDetail),
  );
}

export function hrisCompaniesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisCompaniesUpdateResponseBody(remapped);
  });

/** @internal */
export type HrisCompaniesUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesUpdateResponseBody$outboundSchema: z.ZodType<
  HrisCompaniesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateResponseBody
> = z.instanceof(HrisCompaniesUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateResponseBody$ {
  /** @deprecated use `HrisCompaniesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateResponseBody$Outbound;
}
