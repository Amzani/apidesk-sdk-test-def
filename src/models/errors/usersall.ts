/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersAllUsersResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type UsersAllUsersResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class UsersAllUsersResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersAllUsersResponse422ResponseBodyData;

  constructor(err: UsersAllUsersResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersAllUsersResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersAllUsersResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type UsersAllUsersResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class UsersAllUsersResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersAllUsersResponse404ResponseBodyData;

  constructor(err: UsersAllUsersResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersAllUsersResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type UsersAllUsersResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class UsersAllUsersResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersAllUsersResponseResponseBodyData;

  constructor(err: UsersAllUsersResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersAllUsersResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersAllUsersDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type UsersAllUsersResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class UsersAllUsersResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersAllUsersResponseBodyData;

  constructor(err: UsersAllUsersResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersAllUsersResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type UsersAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class UsersAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersAllResponseBodyData;

  constructor(err: UsersAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersAllResponseBody";
  }
}

/** @internal */
export const UsersAllUsersResponse422Detail$inboundSchema: z.ZodType<
  UsersAllUsersResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersAllUsersResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const UsersAllUsersResponse422Detail$outboundSchema: z.ZodType<
  UsersAllUsersResponse422Detail$Outbound,
  z.ZodTypeDef,
  UsersAllUsersResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllUsersResponse422Detail$ {
  /** @deprecated use `UsersAllUsersResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = UsersAllUsersResponse422Detail$inboundSchema;
  /** @deprecated use `UsersAllUsersResponse422Detail$outboundSchema` instead. */
  export const outboundSchema = UsersAllUsersResponse422Detail$outboundSchema;
  /** @deprecated use `UsersAllUsersResponse422Detail$Outbound` instead. */
  export type Outbound = UsersAllUsersResponse422Detail$Outbound;
}

export function usersAllUsersResponse422DetailToJSON(
  usersAllUsersResponse422Detail: UsersAllUsersResponse422Detail,
): string {
  return JSON.stringify(
    UsersAllUsersResponse422Detail$outboundSchema.parse(
      usersAllUsersResponse422Detail,
    ),
  );
}

export function usersAllUsersResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllUsersResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllUsersResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllUsersResponse422Detail' from JSON`,
  );
}

/** @internal */
export const UsersAllUsersResponse422ResponseBody$inboundSchema: z.ZodType<
  UsersAllUsersResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersAllUsersResponse422ResponseBody(remapped);
  });

/** @internal */
export type UsersAllUsersResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersAllUsersResponse422ResponseBody$outboundSchema: z.ZodType<
  UsersAllUsersResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  UsersAllUsersResponse422ResponseBody
> = z.instanceof(UsersAllUsersResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllUsersResponse422ResponseBody$ {
  /** @deprecated use `UsersAllUsersResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UsersAllUsersResponse422ResponseBody$inboundSchema;
  /** @deprecated use `UsersAllUsersResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersAllUsersResponse422ResponseBody$outboundSchema;
  /** @deprecated use `UsersAllUsersResponse422ResponseBody$Outbound` instead. */
  export type Outbound = UsersAllUsersResponse422ResponseBody$Outbound;
}

/** @internal */
export const UsersAllUsersResponseDetail$inboundSchema: z.ZodType<
  UsersAllUsersResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersAllUsersResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const UsersAllUsersResponseDetail$outboundSchema: z.ZodType<
  UsersAllUsersResponseDetail$Outbound,
  z.ZodTypeDef,
  UsersAllUsersResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllUsersResponseDetail$ {
  /** @deprecated use `UsersAllUsersResponseDetail$inboundSchema` instead. */
  export const inboundSchema = UsersAllUsersResponseDetail$inboundSchema;
  /** @deprecated use `UsersAllUsersResponseDetail$outboundSchema` instead. */
  export const outboundSchema = UsersAllUsersResponseDetail$outboundSchema;
  /** @deprecated use `UsersAllUsersResponseDetail$Outbound` instead. */
  export type Outbound = UsersAllUsersResponseDetail$Outbound;
}

export function usersAllUsersResponseDetailToJSON(
  usersAllUsersResponseDetail: UsersAllUsersResponseDetail,
): string {
  return JSON.stringify(
    UsersAllUsersResponseDetail$outboundSchema.parse(
      usersAllUsersResponseDetail,
    ),
  );
}

export function usersAllUsersResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllUsersResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllUsersResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllUsersResponseDetail' from JSON`,
  );
}

/** @internal */
export const UsersAllUsersResponse404ResponseBody$inboundSchema: z.ZodType<
  UsersAllUsersResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersAllUsersResponse404ResponseBody(remapped);
  });

/** @internal */
export type UsersAllUsersResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersAllUsersResponse404ResponseBody$outboundSchema: z.ZodType<
  UsersAllUsersResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  UsersAllUsersResponse404ResponseBody
> = z.instanceof(UsersAllUsersResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllUsersResponse404ResponseBody$ {
  /** @deprecated use `UsersAllUsersResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UsersAllUsersResponse404ResponseBody$inboundSchema;
  /** @deprecated use `UsersAllUsersResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersAllUsersResponse404ResponseBody$outboundSchema;
  /** @deprecated use `UsersAllUsersResponse404ResponseBody$Outbound` instead. */
  export type Outbound = UsersAllUsersResponse404ResponseBody$Outbound;
}

/** @internal */
export const UsersAllUsersResponseResponseBody$inboundSchema: z.ZodType<
  UsersAllUsersResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersAllUsersResponseResponseBody(remapped);
  });

/** @internal */
export type UsersAllUsersResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersAllUsersResponseResponseBody$outboundSchema: z.ZodType<
  UsersAllUsersResponseResponseBody$Outbound,
  z.ZodTypeDef,
  UsersAllUsersResponseResponseBody
> = z.instanceof(UsersAllUsersResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllUsersResponseResponseBody$ {
  /** @deprecated use `UsersAllUsersResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersAllUsersResponseResponseBody$inboundSchema;
  /** @deprecated use `UsersAllUsersResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersAllUsersResponseResponseBody$outboundSchema;
  /** @deprecated use `UsersAllUsersResponseResponseBody$Outbound` instead. */
  export type Outbound = UsersAllUsersResponseResponseBody$Outbound;
}

/** @internal */
export const UsersAllUsersDetail$inboundSchema: z.ZodType<
  UsersAllUsersDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersAllUsersDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersAllUsersDetail$outboundSchema: z.ZodType<
  UsersAllUsersDetail$Outbound,
  z.ZodTypeDef,
  UsersAllUsersDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllUsersDetail$ {
  /** @deprecated use `UsersAllUsersDetail$inboundSchema` instead. */
  export const inboundSchema = UsersAllUsersDetail$inboundSchema;
  /** @deprecated use `UsersAllUsersDetail$outboundSchema` instead. */
  export const outboundSchema = UsersAllUsersDetail$outboundSchema;
  /** @deprecated use `UsersAllUsersDetail$Outbound` instead. */
  export type Outbound = UsersAllUsersDetail$Outbound;
}

export function usersAllUsersDetailToJSON(
  usersAllUsersDetail: UsersAllUsersDetail,
): string {
  return JSON.stringify(
    UsersAllUsersDetail$outboundSchema.parse(usersAllUsersDetail),
  );
}

export function usersAllUsersDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllUsersDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllUsersDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllUsersDetail' from JSON`,
  );
}

/** @internal */
export const UsersAllUsersResponseBody$inboundSchema: z.ZodType<
  UsersAllUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersAllUsersResponseBody(remapped);
  });

/** @internal */
export type UsersAllUsersResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersAllUsersResponseBody$outboundSchema: z.ZodType<
  UsersAllUsersResponseBody$Outbound,
  z.ZodTypeDef,
  UsersAllUsersResponseBody
> = z.instanceof(UsersAllUsersResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllUsersResponseBody$ {
  /** @deprecated use `UsersAllUsersResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersAllUsersResponseBody$inboundSchema;
  /** @deprecated use `UsersAllUsersResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersAllUsersResponseBody$outboundSchema;
  /** @deprecated use `UsersAllUsersResponseBody$Outbound` instead. */
  export type Outbound = UsersAllUsersResponseBody$Outbound;
}

/** @internal */
export const UsersAllDetail$inboundSchema: z.ZodType<
  UsersAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersAllDetail$outboundSchema: z.ZodType<
  UsersAllDetail$Outbound,
  z.ZodTypeDef,
  UsersAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllDetail$ {
  /** @deprecated use `UsersAllDetail$inboundSchema` instead. */
  export const inboundSchema = UsersAllDetail$inboundSchema;
  /** @deprecated use `UsersAllDetail$outboundSchema` instead. */
  export const outboundSchema = UsersAllDetail$outboundSchema;
  /** @deprecated use `UsersAllDetail$Outbound` instead. */
  export type Outbound = UsersAllDetail$Outbound;
}

export function usersAllDetailToJSON(usersAllDetail: UsersAllDetail): string {
  return JSON.stringify(UsersAllDetail$outboundSchema.parse(usersAllDetail));
}

export function usersAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllDetail' from JSON`,
  );
}

/** @internal */
export const UsersAllResponseBody$inboundSchema: z.ZodType<
  UsersAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersAllResponseBody(remapped);
  });

/** @internal */
export type UsersAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersAllResponseBody$outboundSchema: z.ZodType<
  UsersAllResponseBody$Outbound,
  z.ZodTypeDef,
  UsersAllResponseBody
> = z.instanceof(UsersAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllResponseBody$ {
  /** @deprecated use `UsersAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersAllResponseBody$inboundSchema;
  /** @deprecated use `UsersAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersAllResponseBody$outboundSchema;
  /** @deprecated use `UsersAllResponseBody$Outbound` instead. */
  export type Outbound = UsersAllResponseBody$Outbound;
}
