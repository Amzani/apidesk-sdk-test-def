/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail =
  | string
  | { [k: string]: any };

/**
 * Unprocessable
 */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
  };

/**
 * Unprocessable
 */
export class HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBodyData;

  constructor(
    err: HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name =
      "HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail =
  | string
  | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
  };

/**
 * The specified resource was not found
 */
export class HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBodyData;

  constructor(
    err: HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name =
      "HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
  };

/**
 * Payment Required
 */
export class HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBodyData;

  constructor(
    err: HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name =
      "HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBodyData;

  constructor(
    err: HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeePayrollsOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisEmployeePayrollsOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class HrisEmployeePayrollsOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisEmployeePayrollsOneResponseBodyData;

  constructor(err: HrisEmployeePayrollsOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisEmployeePayrollsOneResponseBody";
  }
}

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$ {
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$Outbound;
}

export function hrisEmployeePayrollsOneHrisEmployeePayrollsResponse422DetailToJSON(
  hrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail:
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$outboundSchema
      .parse(hrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail),
  );
}

export function hrisEmployeePayrollsOneHrisEmployeePayrollsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody
  > = z.instanceof(
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$ {
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$Outbound;
}

export function hrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetailToJSON(
  hrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail:
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$outboundSchema
      .parse(hrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail),
  );
}

export function hrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneHrisEmployeePayrollsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody
  > = z.instanceof(
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody
  > = z.instanceof(
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsOneHrisEmployeePayrollsDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$ {
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$Outbound;
}

export function hrisEmployeePayrollsOneHrisEmployeePayrollsDetailToJSON(
  hrisEmployeePayrollsOneHrisEmployeePayrollsDetail:
    HrisEmployeePayrollsOneHrisEmployeePayrollsDetail,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$outboundSchema.parse(
      hrisEmployeePayrollsOneHrisEmployeePayrollsDetail,
    ),
  );
}

export function hrisEmployeePayrollsOneHrisEmployeePayrollsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeePayrollsOneHrisEmployeePayrollsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsOneHrisEmployeePayrollsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeePayrollsOneHrisEmployeePayrollsDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody
  > = z.instanceof(HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$Outbound;
}

/** @internal */
export const HrisEmployeePayrollsOneDetail$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeePayrollsOneDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeePayrollsOneDetail$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneDetail$ {
  /** @deprecated use `HrisEmployeePayrollsOneDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsOneDetail$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsOneDetail$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneDetail$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneDetail$Outbound;
}

export function hrisEmployeePayrollsOneDetailToJSON(
  hrisEmployeePayrollsOneDetail: HrisEmployeePayrollsOneDetail,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneDetail$outboundSchema.parse(
      hrisEmployeePayrollsOneDetail,
    ),
  );
}

export function hrisEmployeePayrollsOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneResponseBody$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisEmployeePayrollsOneResponseBody(remapped);
  });

/** @internal */
export type HrisEmployeePayrollsOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneResponseBody$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneResponseBody
> = z.instanceof(HrisEmployeePayrollsOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneResponseBody$Outbound;
}
