/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesDeleteHrisCompaniesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisCompaniesDeleteHrisCompaniesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unprocessable
 */
export class HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesDeleteHrisCompaniesResponse422ResponseBodyData;

  constructor(
    err: HrisCompaniesDeleteHrisCompaniesResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesDeleteHrisCompaniesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisCompaniesDeleteHrisCompaniesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * The specified resource was not found
 */
export class HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesDeleteHrisCompaniesResponse404ResponseBodyData;

  constructor(
    err: HrisCompaniesDeleteHrisCompaniesResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisCompaniesDeleteHrisCompaniesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Payment Required
 */
export class HrisCompaniesDeleteHrisCompaniesResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesDeleteHrisCompaniesResponseResponseBodyData;

  constructor(err: HrisCompaniesDeleteHrisCompaniesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesDeleteHrisCompaniesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesDeleteHrisCompaniesDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisCompaniesDeleteHrisCompaniesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisCompaniesDeleteHrisCompaniesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesDeleteHrisCompaniesResponseBodyData;

  constructor(err: HrisCompaniesDeleteHrisCompaniesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesDeleteHrisCompaniesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesDeleteDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisCompaniesDeleteResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisCompaniesDeleteResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesDeleteResponseBodyData;

  constructor(err: HrisCompaniesDeleteResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesDeleteResponseBody";
  }
}

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponse422Detail$inboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesDeleteHrisCompaniesResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponse422Detail$outboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisCompaniesDeleteHrisCompaniesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteHrisCompaniesResponse422Detail$ {
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponse422Detail$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponse422Detail$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisCompaniesDeleteHrisCompaniesResponse422Detail$Outbound;
}

export function hrisCompaniesDeleteHrisCompaniesResponse422DetailToJSON(
  hrisCompaniesDeleteHrisCompaniesResponse422Detail:
    HrisCompaniesDeleteHrisCompaniesResponse422Detail,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteHrisCompaniesResponse422Detail$outboundSchema.parse(
      hrisCompaniesDeleteHrisCompaniesResponse422Detail,
    ),
  );
}

export function hrisCompaniesDeleteHrisCompaniesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesDeleteHrisCompaniesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesDeleteHrisCompaniesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesDeleteHrisCompaniesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody
  > = z.instanceof(HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$ {
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesDeleteHrisCompaniesResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponseDetail$inboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesDeleteHrisCompaniesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponseDetail$outboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisCompaniesDeleteHrisCompaniesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteHrisCompaniesResponseDetail$ {
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponseDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponseDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisCompaniesDeleteHrisCompaniesResponseDetail$Outbound;
}

export function hrisCompaniesDeleteHrisCompaniesResponseDetailToJSON(
  hrisCompaniesDeleteHrisCompaniesResponseDetail:
    HrisCompaniesDeleteHrisCompaniesResponseDetail,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteHrisCompaniesResponseDetail$outboundSchema.parse(
      hrisCompaniesDeleteHrisCompaniesResponseDetail,
    ),
  );
}

export function hrisCompaniesDeleteHrisCompaniesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesDeleteHrisCompaniesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesDeleteHrisCompaniesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesDeleteHrisCompaniesResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody
  > = z.instanceof(HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$ {
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesDeleteHrisCompaniesResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesDeleteHrisCompaniesResponseResponseBody(remapped);
    });

/** @internal */
export type HrisCompaniesDeleteHrisCompaniesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesDeleteHrisCompaniesResponseResponseBody
  > = z.instanceof(HrisCompaniesDeleteHrisCompaniesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteHrisCompaniesResponseResponseBody$ {
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesDeleteHrisCompaniesResponseResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesDetail$inboundSchema: z.ZodType<
  HrisCompaniesDeleteHrisCompaniesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesDeleteHrisCompaniesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesDetail$outboundSchema: z.ZodType<
  HrisCompaniesDeleteHrisCompaniesDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesDeleteHrisCompaniesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteHrisCompaniesDetail$ {
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesDeleteHrisCompaniesDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesDeleteHrisCompaniesDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteHrisCompaniesDetail$Outbound;
}

export function hrisCompaniesDeleteHrisCompaniesDetailToJSON(
  hrisCompaniesDeleteHrisCompaniesDetail:
    HrisCompaniesDeleteHrisCompaniesDetail,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteHrisCompaniesDetail$outboundSchema.parse(
      hrisCompaniesDeleteHrisCompaniesDetail,
    ),
  );
}

export function hrisCompaniesDeleteHrisCompaniesDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesDeleteHrisCompaniesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesDeleteHrisCompaniesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesDeleteHrisCompaniesDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesDeleteHrisCompaniesResponseBody(remapped);
    });

/** @internal */
export type HrisCompaniesDeleteHrisCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesDeleteHrisCompaniesResponseBody
  > = z.instanceof(HrisCompaniesDeleteHrisCompaniesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteHrisCompaniesResponseBody$ {
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteHrisCompaniesResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesDeleteDetail$inboundSchema: z.ZodType<
  HrisCompaniesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisCompaniesDeleteDetail$outboundSchema: z.ZodType<
  HrisCompaniesDeleteDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteDetail$ {
  /** @deprecated use `HrisCompaniesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesDeleteDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesDeleteDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteDetail$Outbound;
}

export function hrisCompaniesDeleteDetailToJSON(
  hrisCompaniesDeleteDetail: HrisCompaniesDeleteDetail,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteDetail$outboundSchema.parse(hrisCompaniesDeleteDetail),
  );
}

export function hrisCompaniesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesDeleteResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisCompaniesDeleteResponseBody(remapped);
  });

/** @internal */
export type HrisCompaniesDeleteResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesDeleteResponseBody$outboundSchema: z.ZodType<
  HrisCompaniesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesDeleteResponseBody
> = z.instanceof(HrisCompaniesDeleteResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteResponseBody$ {
  /** @deprecated use `HrisCompaniesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesDeleteResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesDeleteResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteResponseBody$Outbound;
}
