/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsUpdateHrisDepartmentsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBodyData;

  constructor(
    err: HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsUpdateHrisDepartmentsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBodyData;

  constructor(
    err: HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisDepartmentsUpdateHrisDepartmentsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsUpdateHrisDepartmentsResponseResponseBodyData;

  constructor(
    err: HrisDepartmentsUpdateHrisDepartmentsResponseResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsUpdateHrisDepartmentsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisDepartmentsUpdateHrisDepartmentsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class HrisDepartmentsUpdateHrisDepartmentsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsUpdateHrisDepartmentsResponseBodyData;

  constructor(err: HrisDepartmentsUpdateHrisDepartmentsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsUpdateHrisDepartmentsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisDepartmentsUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class HrisDepartmentsUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsUpdateResponseBodyData;

  constructor(err: HrisDepartmentsUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsUpdateResponseBody";
  }
}

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsUpdateHrisDepartmentsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$ {
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$Outbound;
}

export function hrisDepartmentsUpdateHrisDepartmentsResponse422DetailToJSON(
  hrisDepartmentsUpdateHrisDepartmentsResponse422Detail:
    HrisDepartmentsUpdateHrisDepartmentsResponse422Detail,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$outboundSchema.parse(
      hrisDepartmentsUpdateHrisDepartmentsResponse422Detail,
    ),
  );
}

export function hrisDepartmentsUpdateHrisDepartmentsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsUpdateHrisDepartmentsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsUpdateHrisDepartmentsResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsUpdateHrisDepartmentsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody
  > = z.instanceof(HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$ {
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsUpdateHrisDepartmentsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponseDetail$inboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsUpdateHrisDepartmentsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponseDetail$outboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsUpdateHrisDepartmentsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateHrisDepartmentsResponseDetail$ {
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponseDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponseDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsUpdateHrisDepartmentsResponseDetail$Outbound;
}

export function hrisDepartmentsUpdateHrisDepartmentsResponseDetailToJSON(
  hrisDepartmentsUpdateHrisDepartmentsResponseDetail:
    HrisDepartmentsUpdateHrisDepartmentsResponseDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateHrisDepartmentsResponseDetail$outboundSchema.parse(
      hrisDepartmentsUpdateHrisDepartmentsResponseDetail,
    ),
  );
}

export function hrisDepartmentsUpdateHrisDepartmentsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsUpdateHrisDepartmentsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsUpdateHrisDepartmentsResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsUpdateHrisDepartmentsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody
  > = z.instanceof(HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$ {
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsUpdateHrisDepartmentsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody
  > = z.instanceof(HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$ {
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsUpdateHrisDepartmentsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsDetail$inboundSchema:
  z.ZodType<HrisDepartmentsUpdateHrisDepartmentsDetail, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsUpdateHrisDepartmentsDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsDetail$outboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsDetail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsUpdateHrisDepartmentsDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateHrisDepartmentsDetail$ {
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateHrisDepartmentsDetail$Outbound;
}

export function hrisDepartmentsUpdateHrisDepartmentsDetailToJSON(
  hrisDepartmentsUpdateHrisDepartmentsDetail:
    HrisDepartmentsUpdateHrisDepartmentsDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateHrisDepartmentsDetail$outboundSchema.parse(
      hrisDepartmentsUpdateHrisDepartmentsDetail,
    ),
  );
}

export function hrisDepartmentsUpdateHrisDepartmentsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsUpdateHrisDepartmentsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsUpdateHrisDepartmentsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsUpdateHrisDepartmentsDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsUpdateHrisDepartmentsResponseBody(remapped);
    });

/** @internal */
export type HrisDepartmentsUpdateHrisDepartmentsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsUpdateHrisDepartmentsResponseBody
  > = z.instanceof(HrisDepartmentsUpdateHrisDepartmentsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateHrisDepartmentsResponseBody$ {
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsUpdateHrisDepartmentsResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsUpdateDetail$inboundSchema: z.ZodType<
  HrisDepartmentsUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsUpdateDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisDepartmentsUpdateDetail$outboundSchema: z.ZodType<
  HrisDepartmentsUpdateDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateDetail$ {
  /** @deprecated use `HrisDepartmentsUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdateDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsUpdateDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateDetail$Outbound;
}

export function hrisDepartmentsUpdateDetailToJSON(
  hrisDepartmentsUpdateDetail: HrisDepartmentsUpdateDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateDetail$outboundSchema.parse(
      hrisDepartmentsUpdateDetail,
    ),
  );
}

export function hrisDepartmentsUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsUpdateDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateResponseBody$inboundSchema: z.ZodType<
  HrisDepartmentsUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisDepartmentsUpdateResponseBody(remapped);
  });

/** @internal */
export type HrisDepartmentsUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsUpdateResponseBody$outboundSchema: z.ZodType<
  HrisDepartmentsUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdateResponseBody
> = z.instanceof(HrisDepartmentsUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateResponseBody$ {
  /** @deprecated use `HrisDepartmentsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdateResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsUpdateResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateResponseBody$Outbound;
}
