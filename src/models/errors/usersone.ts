/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersOneUsersResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type UsersOneUsersResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class UsersOneUsersResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersOneUsersResponse422ResponseBodyData;

  constructor(err: UsersOneUsersResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersOneUsersResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersOneUsersResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type UsersOneUsersResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class UsersOneUsersResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersOneUsersResponse404ResponseBodyData;

  constructor(err: UsersOneUsersResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersOneUsersResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type UsersOneUsersResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class UsersOneUsersResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersOneUsersResponseResponseBodyData;

  constructor(err: UsersOneUsersResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersOneUsersResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersOneUsersDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type UsersOneUsersResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class UsersOneUsersResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersOneUsersResponseBodyData;

  constructor(err: UsersOneUsersResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersOneUsersResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type UsersOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class UsersOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UsersOneResponseBodyData;

  constructor(err: UsersOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "UsersOneResponseBody";
  }
}

/** @internal */
export const UsersOneUsersResponse422Detail$inboundSchema: z.ZodType<
  UsersOneUsersResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersOneUsersResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const UsersOneUsersResponse422Detail$outboundSchema: z.ZodType<
  UsersOneUsersResponse422Detail$Outbound,
  z.ZodTypeDef,
  UsersOneUsersResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneUsersResponse422Detail$ {
  /** @deprecated use `UsersOneUsersResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = UsersOneUsersResponse422Detail$inboundSchema;
  /** @deprecated use `UsersOneUsersResponse422Detail$outboundSchema` instead. */
  export const outboundSchema = UsersOneUsersResponse422Detail$outboundSchema;
  /** @deprecated use `UsersOneUsersResponse422Detail$Outbound` instead. */
  export type Outbound = UsersOneUsersResponse422Detail$Outbound;
}

export function usersOneUsersResponse422DetailToJSON(
  usersOneUsersResponse422Detail: UsersOneUsersResponse422Detail,
): string {
  return JSON.stringify(
    UsersOneUsersResponse422Detail$outboundSchema.parse(
      usersOneUsersResponse422Detail,
    ),
  );
}

export function usersOneUsersResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneUsersResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneUsersResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneUsersResponse422Detail' from JSON`,
  );
}

/** @internal */
export const UsersOneUsersResponse422ResponseBody$inboundSchema: z.ZodType<
  UsersOneUsersResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersOneUsersResponse422ResponseBody(remapped);
  });

/** @internal */
export type UsersOneUsersResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersOneUsersResponse422ResponseBody$outboundSchema: z.ZodType<
  UsersOneUsersResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  UsersOneUsersResponse422ResponseBody
> = z.instanceof(UsersOneUsersResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneUsersResponse422ResponseBody$ {
  /** @deprecated use `UsersOneUsersResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UsersOneUsersResponse422ResponseBody$inboundSchema;
  /** @deprecated use `UsersOneUsersResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersOneUsersResponse422ResponseBody$outboundSchema;
  /** @deprecated use `UsersOneUsersResponse422ResponseBody$Outbound` instead. */
  export type Outbound = UsersOneUsersResponse422ResponseBody$Outbound;
}

/** @internal */
export const UsersOneUsersResponseDetail$inboundSchema: z.ZodType<
  UsersOneUsersResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersOneUsersResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const UsersOneUsersResponseDetail$outboundSchema: z.ZodType<
  UsersOneUsersResponseDetail$Outbound,
  z.ZodTypeDef,
  UsersOneUsersResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneUsersResponseDetail$ {
  /** @deprecated use `UsersOneUsersResponseDetail$inboundSchema` instead. */
  export const inboundSchema = UsersOneUsersResponseDetail$inboundSchema;
  /** @deprecated use `UsersOneUsersResponseDetail$outboundSchema` instead. */
  export const outboundSchema = UsersOneUsersResponseDetail$outboundSchema;
  /** @deprecated use `UsersOneUsersResponseDetail$Outbound` instead. */
  export type Outbound = UsersOneUsersResponseDetail$Outbound;
}

export function usersOneUsersResponseDetailToJSON(
  usersOneUsersResponseDetail: UsersOneUsersResponseDetail,
): string {
  return JSON.stringify(
    UsersOneUsersResponseDetail$outboundSchema.parse(
      usersOneUsersResponseDetail,
    ),
  );
}

export function usersOneUsersResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneUsersResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneUsersResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneUsersResponseDetail' from JSON`,
  );
}

/** @internal */
export const UsersOneUsersResponse404ResponseBody$inboundSchema: z.ZodType<
  UsersOneUsersResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersOneUsersResponse404ResponseBody(remapped);
  });

/** @internal */
export type UsersOneUsersResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersOneUsersResponse404ResponseBody$outboundSchema: z.ZodType<
  UsersOneUsersResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  UsersOneUsersResponse404ResponseBody
> = z.instanceof(UsersOneUsersResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneUsersResponse404ResponseBody$ {
  /** @deprecated use `UsersOneUsersResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UsersOneUsersResponse404ResponseBody$inboundSchema;
  /** @deprecated use `UsersOneUsersResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersOneUsersResponse404ResponseBody$outboundSchema;
  /** @deprecated use `UsersOneUsersResponse404ResponseBody$Outbound` instead. */
  export type Outbound = UsersOneUsersResponse404ResponseBody$Outbound;
}

/** @internal */
export const UsersOneUsersResponseResponseBody$inboundSchema: z.ZodType<
  UsersOneUsersResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersOneUsersResponseResponseBody(remapped);
  });

/** @internal */
export type UsersOneUsersResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersOneUsersResponseResponseBody$outboundSchema: z.ZodType<
  UsersOneUsersResponseResponseBody$Outbound,
  z.ZodTypeDef,
  UsersOneUsersResponseResponseBody
> = z.instanceof(UsersOneUsersResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneUsersResponseResponseBody$ {
  /** @deprecated use `UsersOneUsersResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersOneUsersResponseResponseBody$inboundSchema;
  /** @deprecated use `UsersOneUsersResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UsersOneUsersResponseResponseBody$outboundSchema;
  /** @deprecated use `UsersOneUsersResponseResponseBody$Outbound` instead. */
  export type Outbound = UsersOneUsersResponseResponseBody$Outbound;
}

/** @internal */
export const UsersOneUsersDetail$inboundSchema: z.ZodType<
  UsersOneUsersDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersOneUsersDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersOneUsersDetail$outboundSchema: z.ZodType<
  UsersOneUsersDetail$Outbound,
  z.ZodTypeDef,
  UsersOneUsersDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneUsersDetail$ {
  /** @deprecated use `UsersOneUsersDetail$inboundSchema` instead. */
  export const inboundSchema = UsersOneUsersDetail$inboundSchema;
  /** @deprecated use `UsersOneUsersDetail$outboundSchema` instead. */
  export const outboundSchema = UsersOneUsersDetail$outboundSchema;
  /** @deprecated use `UsersOneUsersDetail$Outbound` instead. */
  export type Outbound = UsersOneUsersDetail$Outbound;
}

export function usersOneUsersDetailToJSON(
  usersOneUsersDetail: UsersOneUsersDetail,
): string {
  return JSON.stringify(
    UsersOneUsersDetail$outboundSchema.parse(usersOneUsersDetail),
  );
}

export function usersOneUsersDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneUsersDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneUsersDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneUsersDetail' from JSON`,
  );
}

/** @internal */
export const UsersOneUsersResponseBody$inboundSchema: z.ZodType<
  UsersOneUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersOneUsersResponseBody(remapped);
  });

/** @internal */
export type UsersOneUsersResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersOneUsersResponseBody$outboundSchema: z.ZodType<
  UsersOneUsersResponseBody$Outbound,
  z.ZodTypeDef,
  UsersOneUsersResponseBody
> = z.instanceof(UsersOneUsersResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneUsersResponseBody$ {
  /** @deprecated use `UsersOneUsersResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersOneUsersResponseBody$inboundSchema;
  /** @deprecated use `UsersOneUsersResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersOneUsersResponseBody$outboundSchema;
  /** @deprecated use `UsersOneUsersResponseBody$Outbound` instead. */
  export type Outbound = UsersOneUsersResponseBody$Outbound;
}

/** @internal */
export const UsersOneDetail$inboundSchema: z.ZodType<
  UsersOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersOneDetail$outboundSchema: z.ZodType<
  UsersOneDetail$Outbound,
  z.ZodTypeDef,
  UsersOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneDetail$ {
  /** @deprecated use `UsersOneDetail$inboundSchema` instead. */
  export const inboundSchema = UsersOneDetail$inboundSchema;
  /** @deprecated use `UsersOneDetail$outboundSchema` instead. */
  export const outboundSchema = UsersOneDetail$outboundSchema;
  /** @deprecated use `UsersOneDetail$Outbound` instead. */
  export type Outbound = UsersOneDetail$Outbound;
}

export function usersOneDetailToJSON(usersOneDetail: UsersOneDetail): string {
  return JSON.stringify(UsersOneDetail$outboundSchema.parse(usersOneDetail));
}

export function usersOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneDetail' from JSON`,
  );
}

/** @internal */
export const UsersOneResponseBody$inboundSchema: z.ZodType<
  UsersOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new UsersOneResponseBody(remapped);
  });

/** @internal */
export type UsersOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersOneResponseBody$outboundSchema: z.ZodType<
  UsersOneResponseBody$Outbound,
  z.ZodTypeDef,
  UsersOneResponseBody
> = z.instanceof(UsersOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneResponseBody$ {
  /** @deprecated use `UsersOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersOneResponseBody$inboundSchema;
  /** @deprecated use `UsersOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersOneResponseBody$outboundSchema;
  /** @deprecated use `UsersOneResponseBody$Outbound` instead. */
  export type Outbound = UsersOneResponseBody$Outbound;
}
