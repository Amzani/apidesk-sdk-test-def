/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsAllLeadsResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type LeadsAllLeadsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class LeadsAllLeadsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsAllLeadsResponse422ResponseBodyData;

  constructor(err: LeadsAllLeadsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsAllLeadsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsAllLeadsResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type LeadsAllLeadsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class LeadsAllLeadsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsAllLeadsResponse404ResponseBodyData;

  constructor(err: LeadsAllLeadsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsAllLeadsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type LeadsAllLeadsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class LeadsAllLeadsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsAllLeadsResponseResponseBodyData;

  constructor(err: LeadsAllLeadsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsAllLeadsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsAllLeadsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type LeadsAllLeadsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class LeadsAllLeadsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsAllLeadsResponseBodyData;

  constructor(err: LeadsAllLeadsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsAllLeadsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type LeadsAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class LeadsAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: LeadsAllResponseBodyData;

  constructor(err: LeadsAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "LeadsAllResponseBody";
  }
}

/** @internal */
export const LeadsAllLeadsResponse422Detail$inboundSchema: z.ZodType<
  LeadsAllLeadsResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsAllLeadsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const LeadsAllLeadsResponse422Detail$outboundSchema: z.ZodType<
  LeadsAllLeadsResponse422Detail$Outbound,
  z.ZodTypeDef,
  LeadsAllLeadsResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsResponse422Detail$ {
  /** @deprecated use `LeadsAllLeadsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = LeadsAllLeadsResponse422Detail$inboundSchema;
  /** @deprecated use `LeadsAllLeadsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema = LeadsAllLeadsResponse422Detail$outboundSchema;
  /** @deprecated use `LeadsAllLeadsResponse422Detail$Outbound` instead. */
  export type Outbound = LeadsAllLeadsResponse422Detail$Outbound;
}

export function leadsAllLeadsResponse422DetailToJSON(
  leadsAllLeadsResponse422Detail: LeadsAllLeadsResponse422Detail,
): string {
  return JSON.stringify(
    LeadsAllLeadsResponse422Detail$outboundSchema.parse(
      leadsAllLeadsResponse422Detail,
    ),
  );
}

export function leadsAllLeadsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllLeadsResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllLeadsResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllLeadsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const LeadsAllLeadsResponse422ResponseBody$inboundSchema: z.ZodType<
  LeadsAllLeadsResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsAllLeadsResponse422ResponseBody(remapped);
  });

/** @internal */
export type LeadsAllLeadsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAllLeadsResponse422ResponseBody$outboundSchema: z.ZodType<
  LeadsAllLeadsResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAllLeadsResponse422ResponseBody
> = z.instanceof(LeadsAllLeadsResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsResponse422ResponseBody$ {
  /** @deprecated use `LeadsAllLeadsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    LeadsAllLeadsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `LeadsAllLeadsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsAllLeadsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `LeadsAllLeadsResponse422ResponseBody$Outbound` instead. */
  export type Outbound = LeadsAllLeadsResponse422ResponseBody$Outbound;
}

/** @internal */
export const LeadsAllLeadsResponseDetail$inboundSchema: z.ZodType<
  LeadsAllLeadsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsAllLeadsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const LeadsAllLeadsResponseDetail$outboundSchema: z.ZodType<
  LeadsAllLeadsResponseDetail$Outbound,
  z.ZodTypeDef,
  LeadsAllLeadsResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsResponseDetail$ {
  /** @deprecated use `LeadsAllLeadsResponseDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsAllLeadsResponseDetail$inboundSchema;
  /** @deprecated use `LeadsAllLeadsResponseDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsAllLeadsResponseDetail$outboundSchema;
  /** @deprecated use `LeadsAllLeadsResponseDetail$Outbound` instead. */
  export type Outbound = LeadsAllLeadsResponseDetail$Outbound;
}

export function leadsAllLeadsResponseDetailToJSON(
  leadsAllLeadsResponseDetail: LeadsAllLeadsResponseDetail,
): string {
  return JSON.stringify(
    LeadsAllLeadsResponseDetail$outboundSchema.parse(
      leadsAllLeadsResponseDetail,
    ),
  );
}

export function leadsAllLeadsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllLeadsResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllLeadsResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllLeadsResponseDetail' from JSON`,
  );
}

/** @internal */
export const LeadsAllLeadsResponse404ResponseBody$inboundSchema: z.ZodType<
  LeadsAllLeadsResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsAllLeadsResponse404ResponseBody(remapped);
  });

/** @internal */
export type LeadsAllLeadsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAllLeadsResponse404ResponseBody$outboundSchema: z.ZodType<
  LeadsAllLeadsResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAllLeadsResponse404ResponseBody
> = z.instanceof(LeadsAllLeadsResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsResponse404ResponseBody$ {
  /** @deprecated use `LeadsAllLeadsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    LeadsAllLeadsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `LeadsAllLeadsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsAllLeadsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `LeadsAllLeadsResponse404ResponseBody$Outbound` instead. */
  export type Outbound = LeadsAllLeadsResponse404ResponseBody$Outbound;
}

/** @internal */
export const LeadsAllLeadsResponseResponseBody$inboundSchema: z.ZodType<
  LeadsAllLeadsResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsAllLeadsResponseResponseBody(remapped);
  });

/** @internal */
export type LeadsAllLeadsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAllLeadsResponseResponseBody$outboundSchema: z.ZodType<
  LeadsAllLeadsResponseResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAllLeadsResponseResponseBody
> = z.instanceof(LeadsAllLeadsResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsResponseResponseBody$ {
  /** @deprecated use `LeadsAllLeadsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAllLeadsResponseResponseBody$inboundSchema;
  /** @deprecated use `LeadsAllLeadsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LeadsAllLeadsResponseResponseBody$outboundSchema;
  /** @deprecated use `LeadsAllLeadsResponseResponseBody$Outbound` instead. */
  export type Outbound = LeadsAllLeadsResponseResponseBody$Outbound;
}

/** @internal */
export const LeadsAllLeadsDetail$inboundSchema: z.ZodType<
  LeadsAllLeadsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsAllLeadsDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsAllLeadsDetail$outboundSchema: z.ZodType<
  LeadsAllLeadsDetail$Outbound,
  z.ZodTypeDef,
  LeadsAllLeadsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsDetail$ {
  /** @deprecated use `LeadsAllLeadsDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsAllLeadsDetail$inboundSchema;
  /** @deprecated use `LeadsAllLeadsDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsAllLeadsDetail$outboundSchema;
  /** @deprecated use `LeadsAllLeadsDetail$Outbound` instead. */
  export type Outbound = LeadsAllLeadsDetail$Outbound;
}

export function leadsAllLeadsDetailToJSON(
  leadsAllLeadsDetail: LeadsAllLeadsDetail,
): string {
  return JSON.stringify(
    LeadsAllLeadsDetail$outboundSchema.parse(leadsAllLeadsDetail),
  );
}

export function leadsAllLeadsDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllLeadsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllLeadsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllLeadsDetail' from JSON`,
  );
}

/** @internal */
export const LeadsAllLeadsResponseBody$inboundSchema: z.ZodType<
  LeadsAllLeadsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsAllLeadsResponseBody(remapped);
  });

/** @internal */
export type LeadsAllLeadsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAllLeadsResponseBody$outboundSchema: z.ZodType<
  LeadsAllLeadsResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAllLeadsResponseBody
> = z.instanceof(LeadsAllLeadsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsResponseBody$ {
  /** @deprecated use `LeadsAllLeadsResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAllLeadsResponseBody$inboundSchema;
  /** @deprecated use `LeadsAllLeadsResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsAllLeadsResponseBody$outboundSchema;
  /** @deprecated use `LeadsAllLeadsResponseBody$Outbound` instead. */
  export type Outbound = LeadsAllLeadsResponseBody$Outbound;
}

/** @internal */
export const LeadsAllDetail$inboundSchema: z.ZodType<
  LeadsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsAllDetail$outboundSchema: z.ZodType<
  LeadsAllDetail$Outbound,
  z.ZodTypeDef,
  LeadsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllDetail$ {
  /** @deprecated use `LeadsAllDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsAllDetail$inboundSchema;
  /** @deprecated use `LeadsAllDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsAllDetail$outboundSchema;
  /** @deprecated use `LeadsAllDetail$Outbound` instead. */
  export type Outbound = LeadsAllDetail$Outbound;
}

export function leadsAllDetailToJSON(leadsAllDetail: LeadsAllDetail): string {
  return JSON.stringify(LeadsAllDetail$outboundSchema.parse(leadsAllDetail));
}

export function leadsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllDetail' from JSON`,
  );
}

/** @internal */
export const LeadsAllResponseBody$inboundSchema: z.ZodType<
  LeadsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new LeadsAllResponseBody(remapped);
  });

/** @internal */
export type LeadsAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAllResponseBody$outboundSchema: z.ZodType<
  LeadsAllResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAllResponseBody
> = z.instanceof(LeadsAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllResponseBody$ {
  /** @deprecated use `LeadsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAllResponseBody$inboundSchema;
  /** @deprecated use `LeadsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsAllResponseBody$outboundSchema;
  /** @deprecated use `LeadsAllResponseBody$Outbound` instead. */
  export type Outbound = LeadsAllResponseBody$Outbound;
}
