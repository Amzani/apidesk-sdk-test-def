/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesAddNotesResponse422Detail = string | { [k: string]: any };

/**
 * Unprocessable
 */
export type NotesAddNotesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class NotesAddNotesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesAddNotesResponse422ResponseBodyData;

  constructor(err: NotesAddNotesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesAddNotesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesAddNotesResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type NotesAddNotesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class NotesAddNotesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesAddNotesResponse404ResponseBodyData;

  constructor(err: NotesAddNotesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesAddNotesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type NotesAddNotesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class NotesAddNotesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesAddNotesResponseResponseBodyData;

  constructor(err: NotesAddNotesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesAddNotesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesAddNotesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type NotesAddNotesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class NotesAddNotesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesAddNotesResponseBodyData;

  constructor(err: NotesAddNotesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesAddNotesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesAddDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type NotesAddResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class NotesAddResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotesAddResponseBodyData;

  constructor(err: NotesAddResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "NotesAddResponseBody";
  }
}

/** @internal */
export const NotesAddNotesResponse422Detail$inboundSchema: z.ZodType<
  NotesAddNotesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesAddNotesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const NotesAddNotesResponse422Detail$outboundSchema: z.ZodType<
  NotesAddNotesResponse422Detail$Outbound,
  z.ZodTypeDef,
  NotesAddNotesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddNotesResponse422Detail$ {
  /** @deprecated use `NotesAddNotesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema = NotesAddNotesResponse422Detail$inboundSchema;
  /** @deprecated use `NotesAddNotesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema = NotesAddNotesResponse422Detail$outboundSchema;
  /** @deprecated use `NotesAddNotesResponse422Detail$Outbound` instead. */
  export type Outbound = NotesAddNotesResponse422Detail$Outbound;
}

export function notesAddNotesResponse422DetailToJSON(
  notesAddNotesResponse422Detail: NotesAddNotesResponse422Detail,
): string {
  return JSON.stringify(
    NotesAddNotesResponse422Detail$outboundSchema.parse(
      notesAddNotesResponse422Detail,
    ),
  );
}

export function notesAddNotesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesAddNotesResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAddNotesResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAddNotesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const NotesAddNotesResponse422ResponseBody$inboundSchema: z.ZodType<
  NotesAddNotesResponse422ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesAddNotesResponse422ResponseBody(remapped);
  });

/** @internal */
export type NotesAddNotesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesAddNotesResponse422ResponseBody$outboundSchema: z.ZodType<
  NotesAddNotesResponse422ResponseBody$Outbound,
  z.ZodTypeDef,
  NotesAddNotesResponse422ResponseBody
> = z.instanceof(NotesAddNotesResponse422ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddNotesResponse422ResponseBody$ {
  /** @deprecated use `NotesAddNotesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotesAddNotesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `NotesAddNotesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesAddNotesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `NotesAddNotesResponse422ResponseBody$Outbound` instead. */
  export type Outbound = NotesAddNotesResponse422ResponseBody$Outbound;
}

/** @internal */
export const NotesAddNotesResponseDetail$inboundSchema: z.ZodType<
  NotesAddNotesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesAddNotesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const NotesAddNotesResponseDetail$outboundSchema: z.ZodType<
  NotesAddNotesResponseDetail$Outbound,
  z.ZodTypeDef,
  NotesAddNotesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddNotesResponseDetail$ {
  /** @deprecated use `NotesAddNotesResponseDetail$inboundSchema` instead. */
  export const inboundSchema = NotesAddNotesResponseDetail$inboundSchema;
  /** @deprecated use `NotesAddNotesResponseDetail$outboundSchema` instead. */
  export const outboundSchema = NotesAddNotesResponseDetail$outboundSchema;
  /** @deprecated use `NotesAddNotesResponseDetail$Outbound` instead. */
  export type Outbound = NotesAddNotesResponseDetail$Outbound;
}

export function notesAddNotesResponseDetailToJSON(
  notesAddNotesResponseDetail: NotesAddNotesResponseDetail,
): string {
  return JSON.stringify(
    NotesAddNotesResponseDetail$outboundSchema.parse(
      notesAddNotesResponseDetail,
    ),
  );
}

export function notesAddNotesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesAddNotesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAddNotesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAddNotesResponseDetail' from JSON`,
  );
}

/** @internal */
export const NotesAddNotesResponse404ResponseBody$inboundSchema: z.ZodType<
  NotesAddNotesResponse404ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesAddNotesResponse404ResponseBody(remapped);
  });

/** @internal */
export type NotesAddNotesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesAddNotesResponse404ResponseBody$outboundSchema: z.ZodType<
  NotesAddNotesResponse404ResponseBody$Outbound,
  z.ZodTypeDef,
  NotesAddNotesResponse404ResponseBody
> = z.instanceof(NotesAddNotesResponse404ResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddNotesResponse404ResponseBody$ {
  /** @deprecated use `NotesAddNotesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotesAddNotesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `NotesAddNotesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesAddNotesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `NotesAddNotesResponse404ResponseBody$Outbound` instead. */
  export type Outbound = NotesAddNotesResponse404ResponseBody$Outbound;
}

/** @internal */
export const NotesAddNotesResponseResponseBody$inboundSchema: z.ZodType<
  NotesAddNotesResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesAddNotesResponseResponseBody(remapped);
  });

/** @internal */
export type NotesAddNotesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesAddNotesResponseResponseBody$outboundSchema: z.ZodType<
  NotesAddNotesResponseResponseBody$Outbound,
  z.ZodTypeDef,
  NotesAddNotesResponseResponseBody
> = z.instanceof(NotesAddNotesResponseResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddNotesResponseResponseBody$ {
  /** @deprecated use `NotesAddNotesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesAddNotesResponseResponseBody$inboundSchema;
  /** @deprecated use `NotesAddNotesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotesAddNotesResponseResponseBody$outboundSchema;
  /** @deprecated use `NotesAddNotesResponseResponseBody$Outbound` instead. */
  export type Outbound = NotesAddNotesResponseResponseBody$Outbound;
}

/** @internal */
export const NotesAddNotesDetail$inboundSchema: z.ZodType<
  NotesAddNotesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesAddNotesDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const NotesAddNotesDetail$outboundSchema: z.ZodType<
  NotesAddNotesDetail$Outbound,
  z.ZodTypeDef,
  NotesAddNotesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddNotesDetail$ {
  /** @deprecated use `NotesAddNotesDetail$inboundSchema` instead. */
  export const inboundSchema = NotesAddNotesDetail$inboundSchema;
  /** @deprecated use `NotesAddNotesDetail$outboundSchema` instead. */
  export const outboundSchema = NotesAddNotesDetail$outboundSchema;
  /** @deprecated use `NotesAddNotesDetail$Outbound` instead. */
  export type Outbound = NotesAddNotesDetail$Outbound;
}

export function notesAddNotesDetailToJSON(
  notesAddNotesDetail: NotesAddNotesDetail,
): string {
  return JSON.stringify(
    NotesAddNotesDetail$outboundSchema.parse(notesAddNotesDetail),
  );
}

export function notesAddNotesDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesAddNotesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAddNotesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAddNotesDetail' from JSON`,
  );
}

/** @internal */
export const NotesAddNotesResponseBody$inboundSchema: z.ZodType<
  NotesAddNotesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesAddNotesResponseBody(remapped);
  });

/** @internal */
export type NotesAddNotesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesAddNotesResponseBody$outboundSchema: z.ZodType<
  NotesAddNotesResponseBody$Outbound,
  z.ZodTypeDef,
  NotesAddNotesResponseBody
> = z.instanceof(NotesAddNotesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddNotesResponseBody$ {
  /** @deprecated use `NotesAddNotesResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesAddNotesResponseBody$inboundSchema;
  /** @deprecated use `NotesAddNotesResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesAddNotesResponseBody$outboundSchema;
  /** @deprecated use `NotesAddNotesResponseBody$Outbound` instead. */
  export type Outbound = NotesAddNotesResponseBody$Outbound;
}

/** @internal */
export const NotesAddDetail$inboundSchema: z.ZodType<
  NotesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const NotesAddDetail$outboundSchema: z.ZodType<
  NotesAddDetail$Outbound,
  z.ZodTypeDef,
  NotesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddDetail$ {
  /** @deprecated use `NotesAddDetail$inboundSchema` instead. */
  export const inboundSchema = NotesAddDetail$inboundSchema;
  /** @deprecated use `NotesAddDetail$outboundSchema` instead. */
  export const outboundSchema = NotesAddDetail$outboundSchema;
  /** @deprecated use `NotesAddDetail$Outbound` instead. */
  export type Outbound = NotesAddDetail$Outbound;
}

export function notesAddDetailToJSON(notesAddDetail: NotesAddDetail): string {
  return JSON.stringify(NotesAddDetail$outboundSchema.parse(notesAddDetail));
}

export function notesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAddDetail' from JSON`,
  );
}

/** @internal */
export const NotesAddResponseBody$inboundSchema: z.ZodType<
  NotesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new NotesAddResponseBody(remapped);
  });

/** @internal */
export type NotesAddResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesAddResponseBody$outboundSchema: z.ZodType<
  NotesAddResponseBody$Outbound,
  z.ZodTypeDef,
  NotesAddResponseBody
> = z.instanceof(NotesAddResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddResponseBody$ {
  /** @deprecated use `NotesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesAddResponseBody$inboundSchema;
  /** @deprecated use `NotesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesAddResponseBody$outboundSchema;
  /** @deprecated use `NotesAddResponseBody$Outbound` instead. */
  export type Outbound = NotesAddResponseBody$Outbound;
}
