/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesUpdateActivitiesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type ActivitiesUpdateActivitiesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class ActivitiesUpdateActivitiesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesUpdateActivitiesResponse422ResponseBodyData;

  constructor(err: ActivitiesUpdateActivitiesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesUpdateActivitiesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesUpdateActivitiesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type ActivitiesUpdateActivitiesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class ActivitiesUpdateActivitiesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesUpdateActivitiesResponse404ResponseBodyData;

  constructor(err: ActivitiesUpdateActivitiesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesUpdateActivitiesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type ActivitiesUpdateActivitiesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class ActivitiesUpdateActivitiesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesUpdateActivitiesResponseResponseBodyData;

  constructor(err: ActivitiesUpdateActivitiesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesUpdateActivitiesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesUpdateActivitiesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type ActivitiesUpdateActivitiesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class ActivitiesUpdateActivitiesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesUpdateActivitiesResponseBodyData;

  constructor(err: ActivitiesUpdateActivitiesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesUpdateActivitiesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type ActivitiesUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class ActivitiesUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesUpdateResponseBodyData;

  constructor(err: ActivitiesUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesUpdateResponseBody";
  }
}

/** @internal */
export const ActivitiesUpdateActivitiesResponse422Detail$inboundSchema:
  z.ZodType<
    ActivitiesUpdateActivitiesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesUpdateActivitiesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesUpdateActivitiesResponse422Detail$outboundSchema:
  z.ZodType<
    ActivitiesUpdateActivitiesResponse422Detail$Outbound,
    z.ZodTypeDef,
    ActivitiesUpdateActivitiesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateActivitiesResponse422Detail$ {
  /** @deprecated use `ActivitiesUpdateActivitiesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesUpdateActivitiesResponse422Detail$inboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesUpdateActivitiesResponse422Detail$outboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponse422Detail$Outbound` instead. */
  export type Outbound = ActivitiesUpdateActivitiesResponse422Detail$Outbound;
}

export function activitiesUpdateActivitiesResponse422DetailToJSON(
  activitiesUpdateActivitiesResponse422Detail:
    ActivitiesUpdateActivitiesResponse422Detail,
): string {
  return JSON.stringify(
    ActivitiesUpdateActivitiesResponse422Detail$outboundSchema.parse(
      activitiesUpdateActivitiesResponse422Detail,
    ),
  );
}

export function activitiesUpdateActivitiesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivitiesUpdateActivitiesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesUpdateActivitiesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivitiesUpdateActivitiesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateActivitiesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesUpdateActivitiesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesUpdateActivitiesResponse422ResponseBody(remapped);
    });

/** @internal */
export type ActivitiesUpdateActivitiesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesUpdateActivitiesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesUpdateActivitiesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesUpdateActivitiesResponse422ResponseBody
  > = z.instanceof(ActivitiesUpdateActivitiesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateActivitiesResponse422ResponseBody$ {
  /** @deprecated use `ActivitiesUpdateActivitiesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesUpdateActivitiesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesUpdateActivitiesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesUpdateActivitiesResponse422ResponseBody$Outbound;
}

/** @internal */
export const ActivitiesUpdateActivitiesResponseDetail$inboundSchema: z.ZodType<
  ActivitiesUpdateActivitiesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesUpdateActivitiesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesUpdateActivitiesResponseDetail$outboundSchema: z.ZodType<
  ActivitiesUpdateActivitiesResponseDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateActivitiesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateActivitiesResponseDetail$ {
  /** @deprecated use `ActivitiesUpdateActivitiesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesUpdateActivitiesResponseDetail$inboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesUpdateActivitiesResponseDetail$outboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponseDetail$Outbound` instead. */
  export type Outbound = ActivitiesUpdateActivitiesResponseDetail$Outbound;
}

export function activitiesUpdateActivitiesResponseDetailToJSON(
  activitiesUpdateActivitiesResponseDetail:
    ActivitiesUpdateActivitiesResponseDetail,
): string {
  return JSON.stringify(
    ActivitiesUpdateActivitiesResponseDetail$outboundSchema.parse(
      activitiesUpdateActivitiesResponseDetail,
    ),
  );
}

export function activitiesUpdateActivitiesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivitiesUpdateActivitiesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesUpdateActivitiesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivitiesUpdateActivitiesResponseDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateActivitiesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesUpdateActivitiesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesUpdateActivitiesResponse404ResponseBody(remapped);
    });

/** @internal */
export type ActivitiesUpdateActivitiesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesUpdateActivitiesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesUpdateActivitiesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesUpdateActivitiesResponse404ResponseBody
  > = z.instanceof(ActivitiesUpdateActivitiesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateActivitiesResponse404ResponseBody$ {
  /** @deprecated use `ActivitiesUpdateActivitiesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesUpdateActivitiesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesUpdateActivitiesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesUpdateActivitiesResponse404ResponseBody$Outbound;
}

/** @internal */
export const ActivitiesUpdateActivitiesResponseResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesUpdateActivitiesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesUpdateActivitiesResponseResponseBody(remapped);
    });

/** @internal */
export type ActivitiesUpdateActivitiesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesUpdateActivitiesResponseResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesUpdateActivitiesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesUpdateActivitiesResponseResponseBody
  > = z.instanceof(ActivitiesUpdateActivitiesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateActivitiesResponseResponseBody$ {
  /** @deprecated use `ActivitiesUpdateActivitiesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesUpdateActivitiesResponseResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesUpdateActivitiesResponseResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesUpdateActivitiesResponseResponseBody$Outbound;
}

/** @internal */
export const ActivitiesUpdateActivitiesDetail$inboundSchema: z.ZodType<
  ActivitiesUpdateActivitiesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesUpdateActivitiesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesUpdateActivitiesDetail$outboundSchema: z.ZodType<
  ActivitiesUpdateActivitiesDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateActivitiesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateActivitiesDetail$ {
  /** @deprecated use `ActivitiesUpdateActivitiesDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateActivitiesDetail$inboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateActivitiesDetail$outboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesDetail$Outbound` instead. */
  export type Outbound = ActivitiesUpdateActivitiesDetail$Outbound;
}

export function activitiesUpdateActivitiesDetailToJSON(
  activitiesUpdateActivitiesDetail: ActivitiesUpdateActivitiesDetail,
): string {
  return JSON.stringify(
    ActivitiesUpdateActivitiesDetail$outboundSchema.parse(
      activitiesUpdateActivitiesDetail,
    ),
  );
}

export function activitiesUpdateActivitiesDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateActivitiesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateActivitiesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateActivitiesDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateActivitiesResponseBody$inboundSchema: z.ZodType<
  ActivitiesUpdateActivitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ActivitiesUpdateActivitiesResponseBody(remapped);
  });

/** @internal */
export type ActivitiesUpdateActivitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesUpdateActivitiesResponseBody$outboundSchema: z.ZodType<
  ActivitiesUpdateActivitiesResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateActivitiesResponseBody
> = z.instanceof(ActivitiesUpdateActivitiesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateActivitiesResponseBody$ {
  /** @deprecated use `ActivitiesUpdateActivitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesUpdateActivitiesResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesUpdateActivitiesResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesUpdateActivitiesResponseBody$Outbound;
}

/** @internal */
export const ActivitiesUpdateDetail$inboundSchema: z.ZodType<
  ActivitiesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ActivitiesUpdateDetail$outboundSchema: z.ZodType<
  ActivitiesUpdateDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateDetail$ {
  /** @deprecated use `ActivitiesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateDetail$inboundSchema;
  /** @deprecated use `ActivitiesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateDetail$outboundSchema;
  /** @deprecated use `ActivitiesUpdateDetail$Outbound` instead. */
  export type Outbound = ActivitiesUpdateDetail$Outbound;
}

export function activitiesUpdateDetailToJSON(
  activitiesUpdateDetail: ActivitiesUpdateDetail,
): string {
  return JSON.stringify(
    ActivitiesUpdateDetail$outboundSchema.parse(activitiesUpdateDetail),
  );
}

export function activitiesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateResponseBody$inboundSchema: z.ZodType<
  ActivitiesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ActivitiesUpdateResponseBody(remapped);
  });

/** @internal */
export type ActivitiesUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesUpdateResponseBody$outboundSchema: z.ZodType<
  ActivitiesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateResponseBody
> = z.instanceof(ActivitiesUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateResponseBody$ {
  /** @deprecated use `ActivitiesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesUpdateResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesUpdateResponseBody$Outbound;
}
