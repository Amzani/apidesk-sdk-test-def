/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesAllCompaniesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type CompaniesAllCompaniesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class CompaniesAllCompaniesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesAllCompaniesResponse422ResponseBodyData;

  constructor(err: CompaniesAllCompaniesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesAllCompaniesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesAllCompaniesResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type CompaniesAllCompaniesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class CompaniesAllCompaniesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesAllCompaniesResponse404ResponseBodyData;

  constructor(err: CompaniesAllCompaniesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesAllCompaniesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type CompaniesAllCompaniesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class CompaniesAllCompaniesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesAllCompaniesResponseResponseBodyData;

  constructor(err: CompaniesAllCompaniesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesAllCompaniesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesAllCompaniesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type CompaniesAllCompaniesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class CompaniesAllCompaniesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesAllCompaniesResponseBodyData;

  constructor(err: CompaniesAllCompaniesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesAllCompaniesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type CompaniesAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class CompaniesAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesAllResponseBodyData;

  constructor(err: CompaniesAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesAllResponseBody";
  }
}

/** @internal */
export const CompaniesAllCompaniesResponse422Detail$inboundSchema: z.ZodType<
  CompaniesAllCompaniesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesAllCompaniesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesAllCompaniesResponse422Detail$outboundSchema: z.ZodType<
  CompaniesAllCompaniesResponse422Detail$Outbound,
  z.ZodTypeDef,
  CompaniesAllCompaniesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesResponse422Detail$ {
  /** @deprecated use `CompaniesAllCompaniesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesAllCompaniesResponse422Detail$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesAllCompaniesResponse422Detail$outboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponse422Detail$Outbound` instead. */
  export type Outbound = CompaniesAllCompaniesResponse422Detail$Outbound;
}

export function companiesAllCompaniesResponse422DetailToJSON(
  companiesAllCompaniesResponse422Detail:
    CompaniesAllCompaniesResponse422Detail,
): string {
  return JSON.stringify(
    CompaniesAllCompaniesResponse422Detail$outboundSchema.parse(
      companiesAllCompaniesResponse422Detail,
    ),
  );
}

export function companiesAllCompaniesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllCompaniesResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesAllCompaniesResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllCompaniesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const CompaniesAllCompaniesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    CompaniesAllCompaniesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new CompaniesAllCompaniesResponse422ResponseBody(remapped);
    });

/** @internal */
export type CompaniesAllCompaniesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesAllCompaniesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    CompaniesAllCompaniesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesAllCompaniesResponse422ResponseBody
  > = z.instanceof(CompaniesAllCompaniesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesResponse422ResponseBody$ {
  /** @deprecated use `CompaniesAllCompaniesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesAllCompaniesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesAllCompaniesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponse422ResponseBody$Outbound` instead. */
  export type Outbound = CompaniesAllCompaniesResponse422ResponseBody$Outbound;
}

/** @internal */
export const CompaniesAllCompaniesResponseDetail$inboundSchema: z.ZodType<
  CompaniesAllCompaniesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesAllCompaniesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesAllCompaniesResponseDetail$outboundSchema: z.ZodType<
  CompaniesAllCompaniesResponseDetail$Outbound,
  z.ZodTypeDef,
  CompaniesAllCompaniesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesResponseDetail$ {
  /** @deprecated use `CompaniesAllCompaniesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesAllCompaniesResponseDetail$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesAllCompaniesResponseDetail$outboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponseDetail$Outbound` instead. */
  export type Outbound = CompaniesAllCompaniesResponseDetail$Outbound;
}

export function companiesAllCompaniesResponseDetailToJSON(
  companiesAllCompaniesResponseDetail: CompaniesAllCompaniesResponseDetail,
): string {
  return JSON.stringify(
    CompaniesAllCompaniesResponseDetail$outboundSchema.parse(
      companiesAllCompaniesResponseDetail,
    ),
  );
}

export function companiesAllCompaniesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllCompaniesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesAllCompaniesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllCompaniesResponseDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesAllCompaniesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    CompaniesAllCompaniesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new CompaniesAllCompaniesResponse404ResponseBody(remapped);
    });

/** @internal */
export type CompaniesAllCompaniesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesAllCompaniesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    CompaniesAllCompaniesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesAllCompaniesResponse404ResponseBody
  > = z.instanceof(CompaniesAllCompaniesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesResponse404ResponseBody$ {
  /** @deprecated use `CompaniesAllCompaniesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesAllCompaniesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesAllCompaniesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponse404ResponseBody$Outbound` instead. */
  export type Outbound = CompaniesAllCompaniesResponse404ResponseBody$Outbound;
}

/** @internal */
export const CompaniesAllCompaniesResponseResponseBody$inboundSchema: z.ZodType<
  CompaniesAllCompaniesResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new CompaniesAllCompaniesResponseResponseBody(remapped);
  });

/** @internal */
export type CompaniesAllCompaniesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesAllCompaniesResponseResponseBody$outboundSchema:
  z.ZodType<
    CompaniesAllCompaniesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesAllCompaniesResponseResponseBody
  > = z.instanceof(CompaniesAllCompaniesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesResponseResponseBody$ {
  /** @deprecated use `CompaniesAllCompaniesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesAllCompaniesResponseResponseBody$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesAllCompaniesResponseResponseBody$outboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponseResponseBody$Outbound` instead. */
  export type Outbound = CompaniesAllCompaniesResponseResponseBody$Outbound;
}

/** @internal */
export const CompaniesAllCompaniesDetail$inboundSchema: z.ZodType<
  CompaniesAllCompaniesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesAllCompaniesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesAllCompaniesDetail$outboundSchema: z.ZodType<
  CompaniesAllCompaniesDetail$Outbound,
  z.ZodTypeDef,
  CompaniesAllCompaniesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesDetail$ {
  /** @deprecated use `CompaniesAllCompaniesDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllCompaniesDetail$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllCompaniesDetail$outboundSchema;
  /** @deprecated use `CompaniesAllCompaniesDetail$Outbound` instead. */
  export type Outbound = CompaniesAllCompaniesDetail$Outbound;
}

export function companiesAllCompaniesDetailToJSON(
  companiesAllCompaniesDetail: CompaniesAllCompaniesDetail,
): string {
  return JSON.stringify(
    CompaniesAllCompaniesDetail$outboundSchema.parse(
      companiesAllCompaniesDetail,
    ),
  );
}

export function companiesAllCompaniesDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllCompaniesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllCompaniesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllCompaniesDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesAllCompaniesResponseBody$inboundSchema: z.ZodType<
  CompaniesAllCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new CompaniesAllCompaniesResponseBody(remapped);
  });

/** @internal */
export type CompaniesAllCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesAllCompaniesResponseBody$outboundSchema: z.ZodType<
  CompaniesAllCompaniesResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesAllCompaniesResponseBody
> = z.instanceof(CompaniesAllCompaniesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesResponseBody$ {
  /** @deprecated use `CompaniesAllCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllCompaniesResponseBody$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesAllCompaniesResponseBody$outboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponseBody$Outbound` instead. */
  export type Outbound = CompaniesAllCompaniesResponseBody$Outbound;
}

/** @internal */
export const CompaniesAllDetail$inboundSchema: z.ZodType<
  CompaniesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const CompaniesAllDetail$outboundSchema: z.ZodType<
  CompaniesAllDetail$Outbound,
  z.ZodTypeDef,
  CompaniesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllDetail$ {
  /** @deprecated use `CompaniesAllDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllDetail$inboundSchema;
  /** @deprecated use `CompaniesAllDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllDetail$outboundSchema;
  /** @deprecated use `CompaniesAllDetail$Outbound` instead. */
  export type Outbound = CompaniesAllDetail$Outbound;
}

export function companiesAllDetailToJSON(
  companiesAllDetail: CompaniesAllDetail,
): string {
  return JSON.stringify(
    CompaniesAllDetail$outboundSchema.parse(companiesAllDetail),
  );
}

export function companiesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesAllResponseBody$inboundSchema: z.ZodType<
  CompaniesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new CompaniesAllResponseBody(remapped);
  });

/** @internal */
export type CompaniesAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesAllResponseBody$outboundSchema: z.ZodType<
  CompaniesAllResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesAllResponseBody
> = z.instanceof(CompaniesAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllResponseBody$ {
  /** @deprecated use `CompaniesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllResponseBody$inboundSchema;
  /** @deprecated use `CompaniesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllResponseBody$outboundSchema;
  /** @deprecated use `CompaniesAllResponseBody$Outbound` instead. */
  export type Outbound = CompaniesAllResponseBody$Outbound;
}
