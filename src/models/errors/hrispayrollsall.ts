/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisPayrollsAllHrisPayrollsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisPayrollsAllHrisPayrollsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unprocessable
 */
export class HrisPayrollsAllHrisPayrollsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisPayrollsAllHrisPayrollsResponse422ResponseBodyData;

  constructor(err: HrisPayrollsAllHrisPayrollsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisPayrollsAllHrisPayrollsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisPayrollsAllHrisPayrollsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisPayrollsAllHrisPayrollsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * The specified resource was not found
 */
export class HrisPayrollsAllHrisPayrollsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisPayrollsAllHrisPayrollsResponse404ResponseBodyData;

  constructor(err: HrisPayrollsAllHrisPayrollsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisPayrollsAllHrisPayrollsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisPayrollsAllHrisPayrollsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Payment Required
 */
export class HrisPayrollsAllHrisPayrollsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisPayrollsAllHrisPayrollsResponseResponseBodyData;

  constructor(err: HrisPayrollsAllHrisPayrollsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisPayrollsAllHrisPayrollsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisPayrollsAllHrisPayrollsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type HrisPayrollsAllHrisPayrollsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisPayrollsAllHrisPayrollsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisPayrollsAllHrisPayrollsResponseBodyData;

  constructor(err: HrisPayrollsAllHrisPayrollsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisPayrollsAllHrisPayrollsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisPayrollsAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisPayrollsAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisPayrollsAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisPayrollsAllResponseBodyData;

  constructor(err: HrisPayrollsAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisPayrollsAllResponseBody";
  }
}

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisPayrollsAllHrisPayrollsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisPayrollsAllHrisPayrollsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisPayrollsAllHrisPayrollsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisPayrollsAllHrisPayrollsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllHrisPayrollsResponse422Detail$ {
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsAllHrisPayrollsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsAllHrisPayrollsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponse422Detail$Outbound` instead. */
  export type Outbound = HrisPayrollsAllHrisPayrollsResponse422Detail$Outbound;
}

export function hrisPayrollsAllHrisPayrollsResponse422DetailToJSON(
  hrisPayrollsAllHrisPayrollsResponse422Detail:
    HrisPayrollsAllHrisPayrollsResponse422Detail,
): string {
  return JSON.stringify(
    HrisPayrollsAllHrisPayrollsResponse422Detail$outboundSchema.parse(
      hrisPayrollsAllHrisPayrollsResponse422Detail,
    ),
  );
}

export function hrisPayrollsAllHrisPayrollsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisPayrollsAllHrisPayrollsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisPayrollsAllHrisPayrollsResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisPayrollsAllHrisPayrollsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisPayrollsAllHrisPayrollsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisPayrollsAllHrisPayrollsResponse422ResponseBody(remapped);
    });

/** @internal */
export type HrisPayrollsAllHrisPayrollsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisPayrollsAllHrisPayrollsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisPayrollsAllHrisPayrollsResponse422ResponseBody
  > = z.instanceof(HrisPayrollsAllHrisPayrollsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllHrisPayrollsResponse422ResponseBody$ {
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsAllHrisPayrollsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsAllHrisPayrollsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisPayrollsAllHrisPayrollsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponseDetail$inboundSchema: z.ZodType<
  HrisPayrollsAllHrisPayrollsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisPayrollsAllHrisPayrollsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponseDetail$outboundSchema:
  z.ZodType<
    HrisPayrollsAllHrisPayrollsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisPayrollsAllHrisPayrollsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllHrisPayrollsResponseDetail$ {
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsAllHrisPayrollsResponseDetail$inboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsAllHrisPayrollsResponseDetail$outboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseDetail$Outbound` instead. */
  export type Outbound = HrisPayrollsAllHrisPayrollsResponseDetail$Outbound;
}

export function hrisPayrollsAllHrisPayrollsResponseDetailToJSON(
  hrisPayrollsAllHrisPayrollsResponseDetail:
    HrisPayrollsAllHrisPayrollsResponseDetail,
): string {
  return JSON.stringify(
    HrisPayrollsAllHrisPayrollsResponseDetail$outboundSchema.parse(
      hrisPayrollsAllHrisPayrollsResponseDetail,
    ),
  );
}

export function hrisPayrollsAllHrisPayrollsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisPayrollsAllHrisPayrollsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisPayrollsAllHrisPayrollsResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisPayrollsAllHrisPayrollsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisPayrollsAllHrisPayrollsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisPayrollsAllHrisPayrollsResponse404ResponseBody(remapped);
    });

/** @internal */
export type HrisPayrollsAllHrisPayrollsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisPayrollsAllHrisPayrollsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisPayrollsAllHrisPayrollsResponse404ResponseBody
  > = z.instanceof(HrisPayrollsAllHrisPayrollsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllHrisPayrollsResponse404ResponseBody$ {
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsAllHrisPayrollsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsAllHrisPayrollsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisPayrollsAllHrisPayrollsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisPayrollsAllHrisPayrollsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisPayrollsAllHrisPayrollsResponseResponseBody(remapped);
    });

/** @internal */
export type HrisPayrollsAllHrisPayrollsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisPayrollsAllHrisPayrollsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisPayrollsAllHrisPayrollsResponseResponseBody
  > = z.instanceof(HrisPayrollsAllHrisPayrollsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllHrisPayrollsResponseResponseBody$ {
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsAllHrisPayrollsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsAllHrisPayrollsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisPayrollsAllHrisPayrollsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisPayrollsAllHrisPayrollsDetail$inboundSchema: z.ZodType<
  HrisPayrollsAllHrisPayrollsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisPayrollsAllHrisPayrollsDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisPayrollsAllHrisPayrollsDetail$outboundSchema: z.ZodType<
  HrisPayrollsAllHrisPayrollsDetail$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllHrisPayrollsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllHrisPayrollsDetail$ {
  /** @deprecated use `HrisPayrollsAllHrisPayrollsDetail$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllHrisPayrollsDetail$inboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsAllHrisPayrollsDetail$outboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsDetail$Outbound` instead. */
  export type Outbound = HrisPayrollsAllHrisPayrollsDetail$Outbound;
}

export function hrisPayrollsAllHrisPayrollsDetailToJSON(
  hrisPayrollsAllHrisPayrollsDetail: HrisPayrollsAllHrisPayrollsDetail,
): string {
  return JSON.stringify(
    HrisPayrollsAllHrisPayrollsDetail$outboundSchema.parse(
      hrisPayrollsAllHrisPayrollsDetail,
    ),
  );
}

export function hrisPayrollsAllHrisPayrollsDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsAllHrisPayrollsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsAllHrisPayrollsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsAllHrisPayrollsDetail' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponseBody$inboundSchema: z.ZodType<
  HrisPayrollsAllHrisPayrollsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisPayrollsAllHrisPayrollsResponseBody(remapped);
  });

/** @internal */
export type HrisPayrollsAllHrisPayrollsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponseBody$outboundSchema: z.ZodType<
  HrisPayrollsAllHrisPayrollsResponseBody$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllHrisPayrollsResponseBody
> = z.instanceof(HrisPayrollsAllHrisPayrollsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllHrisPayrollsResponseBody$ {
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsAllHrisPayrollsResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsAllHrisPayrollsResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseBody$Outbound` instead. */
  export type Outbound = HrisPayrollsAllHrisPayrollsResponseBody$Outbound;
}

/** @internal */
export const HrisPayrollsAllDetail$inboundSchema: z.ZodType<
  HrisPayrollsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisPayrollsAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisPayrollsAllDetail$outboundSchema: z.ZodType<
  HrisPayrollsAllDetail$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllDetail$ {
  /** @deprecated use `HrisPayrollsAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllDetail$inboundSchema;
  /** @deprecated use `HrisPayrollsAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsAllDetail$outboundSchema;
  /** @deprecated use `HrisPayrollsAllDetail$Outbound` instead. */
  export type Outbound = HrisPayrollsAllDetail$Outbound;
}

export function hrisPayrollsAllDetailToJSON(
  hrisPayrollsAllDetail: HrisPayrollsAllDetail,
): string {
  return JSON.stringify(
    HrisPayrollsAllDetail$outboundSchema.parse(hrisPayrollsAllDetail),
  );
}

export function hrisPayrollsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllResponseBody$inboundSchema: z.ZodType<
  HrisPayrollsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisPayrollsAllResponseBody(remapped);
  });

/** @internal */
export type HrisPayrollsAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisPayrollsAllResponseBody$outboundSchema: z.ZodType<
  HrisPayrollsAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllResponseBody
> = z.instanceof(HrisPayrollsAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllResponseBody$ {
  /** @deprecated use `HrisPayrollsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsAllResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsAllResponseBody$Outbound` instead. */
  export type Outbound = HrisPayrollsAllResponseBody$Outbound;
}
