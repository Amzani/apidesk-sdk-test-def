/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsAllHrisDepartmentsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisDepartmentsAllHrisDepartmentsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsAllHrisDepartmentsResponse422ResponseBodyData;

  constructor(
    err: HrisDepartmentsAllHrisDepartmentsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsAllHrisDepartmentsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisDepartmentsAllHrisDepartmentsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsAllHrisDepartmentsResponse404ResponseBodyData;

  constructor(
    err: HrisDepartmentsAllHrisDepartmentsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisDepartmentsAllHrisDepartmentsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class HrisDepartmentsAllHrisDepartmentsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsAllHrisDepartmentsResponseResponseBodyData;

  constructor(err: HrisDepartmentsAllHrisDepartmentsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsAllHrisDepartmentsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsAllHrisDepartmentsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisDepartmentsAllHrisDepartmentsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class HrisDepartmentsAllHrisDepartmentsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsAllHrisDepartmentsResponseBodyData;

  constructor(err: HrisDepartmentsAllHrisDepartmentsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsAllHrisDepartmentsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisDepartmentsAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class HrisDepartmentsAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisDepartmentsAllResponseBodyData;

  constructor(err: HrisDepartmentsAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisDepartmentsAllResponseBody";
  }
}

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsAllHrisDepartmentsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAllHrisDepartmentsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllHrisDepartmentsResponse422Detail$ {
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsAllHrisDepartmentsResponse422Detail$Outbound;
}

export function hrisDepartmentsAllHrisDepartmentsResponse422DetailToJSON(
  hrisDepartmentsAllHrisDepartmentsResponse422Detail:
    HrisDepartmentsAllHrisDepartmentsResponse422Detail,
): string {
  return JSON.stringify(
    HrisDepartmentsAllHrisDepartmentsResponse422Detail$outboundSchema.parse(
      hrisDepartmentsAllHrisDepartmentsResponse422Detail,
    ),
  );
}

export function hrisDepartmentsAllHrisDepartmentsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsAllHrisDepartmentsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsAllHrisDepartmentsResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsAllHrisDepartmentsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody
  > = z.instanceof(HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$ {
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsAllHrisDepartmentsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponseDetail$inboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsAllHrisDepartmentsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponseDetail$outboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAllHrisDepartmentsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllHrisDepartmentsResponseDetail$ {
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponseDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponseDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsAllHrisDepartmentsResponseDetail$Outbound;
}

export function hrisDepartmentsAllHrisDepartmentsResponseDetailToJSON(
  hrisDepartmentsAllHrisDepartmentsResponseDetail:
    HrisDepartmentsAllHrisDepartmentsResponseDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsAllHrisDepartmentsResponseDetail$outboundSchema.parse(
      hrisDepartmentsAllHrisDepartmentsResponseDetail,
    ),
  );
}

export function hrisDepartmentsAllHrisDepartmentsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsAllHrisDepartmentsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsAllHrisDepartmentsResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsAllHrisDepartmentsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody
  > = z.instanceof(HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$ {
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsAllHrisDepartmentsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsAllHrisDepartmentsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisDepartmentsAllHrisDepartmentsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAllHrisDepartmentsResponseResponseBody
  > = z.instanceof(HrisDepartmentsAllHrisDepartmentsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllHrisDepartmentsResponseResponseBody$ {
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsAllHrisDepartmentsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsDetail$inboundSchema: z.ZodType<
  HrisDepartmentsAllHrisDepartmentsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsAllHrisDepartmentsDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsDetail$outboundSchema: z.ZodType<
  HrisDepartmentsAllHrisDepartmentsDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllHrisDepartmentsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllHrisDepartmentsDetail$ {
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAllHrisDepartmentsDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAllHrisDepartmentsDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllHrisDepartmentsDetail$Outbound;
}

export function hrisDepartmentsAllHrisDepartmentsDetailToJSON(
  hrisDepartmentsAllHrisDepartmentsDetail:
    HrisDepartmentsAllHrisDepartmentsDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsAllHrisDepartmentsDetail$outboundSchema.parse(
      hrisDepartmentsAllHrisDepartmentsDetail,
    ),
  );
}

export function hrisDepartmentsAllHrisDepartmentsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsAllHrisDepartmentsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsAllHrisDepartmentsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsAllHrisDepartmentsDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisDepartmentsAllHrisDepartmentsResponseBody(remapped);
    });

/** @internal */
export type HrisDepartmentsAllHrisDepartmentsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAllHrisDepartmentsResponseBody
  > = z.instanceof(HrisDepartmentsAllHrisDepartmentsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllHrisDepartmentsResponseBody$ {
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllHrisDepartmentsResponseBody$Outbound;
}

/** @internal */
export const HrisDepartmentsAllDetail$inboundSchema: z.ZodType<
  HrisDepartmentsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisDepartmentsAllDetail$outboundSchema: z.ZodType<
  HrisDepartmentsAllDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllDetail$ {
  /** @deprecated use `HrisDepartmentsAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllDetail$Outbound;
}

export function hrisDepartmentsAllDetailToJSON(
  hrisDepartmentsAllDetail: HrisDepartmentsAllDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsAllDetail$outboundSchema.parse(hrisDepartmentsAllDetail),
  );
}

export function hrisDepartmentsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllResponseBody$inboundSchema: z.ZodType<
  HrisDepartmentsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisDepartmentsAllResponseBody(remapped);
  });

/** @internal */
export type HrisDepartmentsAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsAllResponseBody$outboundSchema: z.ZodType<
  HrisDepartmentsAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllResponseBody
> = z.instanceof(HrisDepartmentsAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllResponseBody$ {
  /** @deprecated use `HrisDepartmentsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllResponseBody$Outbound;
}
