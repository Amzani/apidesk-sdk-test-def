/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail =
  | string
  | { [k: string]: any };

/**
 * Unprocessable
 */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * Unprocessable
 */
export class HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$:
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBodyData;

  constructor(
    err:
      HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name =
      "HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail =
  | string
  | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * The specified resource was not found
 */
export class HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$:
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBodyData;

  constructor(
    err:
      HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name =
      "HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
    httpMeta: components.HTTPMetadata;
  };

/**
 * Payment Required
 */
export class HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBodyData;

  constructor(
    err: HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name =
      "HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBodyData;

  constructor(
    err: HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisTimeOffRequestsUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisTimeOffRequestsUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsUpdateResponseBodyData;

  constructor(err: HrisTimeOffRequestsUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisTimeOffRequestsUpdateResponseBody";
  }
}

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$Outbound;
}

export function hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422DetailToJSON(
  hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail:
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$outboundSchema
      .parse(hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail),
  );
}

export function hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$Outbound;
}

export function hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetailToJSON(
  hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail:
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$outboundSchema
      .parse(hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail),
  );
}

export function hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$Outbound;
}

export function hrisTimeOffRequestsUpdateHrisTimeOffRequestsDetailToJSON(
  hrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail:
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$outboundSchema.parse(
      hrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail,
    ),
  );
}

export function hrisTimeOffRequestsUpdateHrisTimeOffRequestsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisTimeOffRequestsUpdateHrisTimeOffRequestsDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
  };

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody
  > = z.instanceof(HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsUpdateDetail$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsUpdateDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisTimeOffRequestsUpdateDetail$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateDetail$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateDetail$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsUpdateDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsUpdateDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateDetail$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateDetail$Outbound;
}

export function hrisTimeOffRequestsUpdateDetailToJSON(
  hrisTimeOffRequestsUpdateDetail: HrisTimeOffRequestsUpdateDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateDetail$outboundSchema.parse(
      hrisTimeOffRequestsUpdateDetail,
    ),
  );
}

export function hrisTimeOffRequestsUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateResponseBody$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisTimeOffRequestsUpdateResponseBody(remapped);
  });

/** @internal */
export type HrisTimeOffRequestsUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisTimeOffRequestsUpdateResponseBody$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateResponseBody
> = z.instanceof(HrisTimeOffRequestsUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateResponseBody$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateResponseBody$Outbound;
}
