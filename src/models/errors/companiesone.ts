/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesOneCompaniesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type CompaniesOneCompaniesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class CompaniesOneCompaniesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesOneCompaniesResponse422ResponseBodyData;

  constructor(err: CompaniesOneCompaniesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesOneCompaniesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesOneCompaniesResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type CompaniesOneCompaniesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class CompaniesOneCompaniesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesOneCompaniesResponse404ResponseBodyData;

  constructor(err: CompaniesOneCompaniesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesOneCompaniesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type CompaniesOneCompaniesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class CompaniesOneCompaniesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesOneCompaniesResponseResponseBodyData;

  constructor(err: CompaniesOneCompaniesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesOneCompaniesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesOneCompaniesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type CompaniesOneCompaniesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class CompaniesOneCompaniesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesOneCompaniesResponseBodyData;

  constructor(err: CompaniesOneCompaniesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesOneCompaniesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type CompaniesOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class CompaniesOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CompaniesOneResponseBodyData;

  constructor(err: CompaniesOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "CompaniesOneResponseBody";
  }
}

/** @internal */
export const CompaniesOneCompaniesResponse422Detail$inboundSchema: z.ZodType<
  CompaniesOneCompaniesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesOneCompaniesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesOneCompaniesResponse422Detail$outboundSchema: z.ZodType<
  CompaniesOneCompaniesResponse422Detail$Outbound,
  z.ZodTypeDef,
  CompaniesOneCompaniesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesResponse422Detail$ {
  /** @deprecated use `CompaniesOneCompaniesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesOneCompaniesResponse422Detail$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesOneCompaniesResponse422Detail$outboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponse422Detail$Outbound` instead. */
  export type Outbound = CompaniesOneCompaniesResponse422Detail$Outbound;
}

export function companiesOneCompaniesResponse422DetailToJSON(
  companiesOneCompaniesResponse422Detail:
    CompaniesOneCompaniesResponse422Detail,
): string {
  return JSON.stringify(
    CompaniesOneCompaniesResponse422Detail$outboundSchema.parse(
      companiesOneCompaniesResponse422Detail,
    ),
  );
}

export function companiesOneCompaniesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneCompaniesResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesOneCompaniesResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneCompaniesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCompaniesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    CompaniesOneCompaniesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new CompaniesOneCompaniesResponse422ResponseBody(remapped);
    });

/** @internal */
export type CompaniesOneCompaniesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesOneCompaniesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    CompaniesOneCompaniesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesOneCompaniesResponse422ResponseBody
  > = z.instanceof(CompaniesOneCompaniesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesResponse422ResponseBody$ {
  /** @deprecated use `CompaniesOneCompaniesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesOneCompaniesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesOneCompaniesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponse422ResponseBody$Outbound` instead. */
  export type Outbound = CompaniesOneCompaniesResponse422ResponseBody$Outbound;
}

/** @internal */
export const CompaniesOneCompaniesResponseDetail$inboundSchema: z.ZodType<
  CompaniesOneCompaniesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesOneCompaniesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesOneCompaniesResponseDetail$outboundSchema: z.ZodType<
  CompaniesOneCompaniesResponseDetail$Outbound,
  z.ZodTypeDef,
  CompaniesOneCompaniesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesResponseDetail$ {
  /** @deprecated use `CompaniesOneCompaniesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesOneCompaniesResponseDetail$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesOneCompaniesResponseDetail$outboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponseDetail$Outbound` instead. */
  export type Outbound = CompaniesOneCompaniesResponseDetail$Outbound;
}

export function companiesOneCompaniesResponseDetailToJSON(
  companiesOneCompaniesResponseDetail: CompaniesOneCompaniesResponseDetail,
): string {
  return JSON.stringify(
    CompaniesOneCompaniesResponseDetail$outboundSchema.parse(
      companiesOneCompaniesResponseDetail,
    ),
  );
}

export function companiesOneCompaniesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneCompaniesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesOneCompaniesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneCompaniesResponseDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCompaniesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    CompaniesOneCompaniesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new CompaniesOneCompaniesResponse404ResponseBody(remapped);
    });

/** @internal */
export type CompaniesOneCompaniesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesOneCompaniesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    CompaniesOneCompaniesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesOneCompaniesResponse404ResponseBody
  > = z.instanceof(CompaniesOneCompaniesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesResponse404ResponseBody$ {
  /** @deprecated use `CompaniesOneCompaniesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesOneCompaniesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesOneCompaniesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponse404ResponseBody$Outbound` instead. */
  export type Outbound = CompaniesOneCompaniesResponse404ResponseBody$Outbound;
}

/** @internal */
export const CompaniesOneCompaniesResponseResponseBody$inboundSchema: z.ZodType<
  CompaniesOneCompaniesResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new CompaniesOneCompaniesResponseResponseBody(remapped);
  });

/** @internal */
export type CompaniesOneCompaniesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesOneCompaniesResponseResponseBody$outboundSchema:
  z.ZodType<
    CompaniesOneCompaniesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    CompaniesOneCompaniesResponseResponseBody
  > = z.instanceof(CompaniesOneCompaniesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesResponseResponseBody$ {
  /** @deprecated use `CompaniesOneCompaniesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesOneCompaniesResponseResponseBody$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesOneCompaniesResponseResponseBody$outboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponseResponseBody$Outbound` instead. */
  export type Outbound = CompaniesOneCompaniesResponseResponseBody$Outbound;
}

/** @internal */
export const CompaniesOneCompaniesDetail$inboundSchema: z.ZodType<
  CompaniesOneCompaniesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesOneCompaniesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const CompaniesOneCompaniesDetail$outboundSchema: z.ZodType<
  CompaniesOneCompaniesDetail$Outbound,
  z.ZodTypeDef,
  CompaniesOneCompaniesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesDetail$ {
  /** @deprecated use `CompaniesOneCompaniesDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneCompaniesDetail$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneCompaniesDetail$outboundSchema;
  /** @deprecated use `CompaniesOneCompaniesDetail$Outbound` instead. */
  export type Outbound = CompaniesOneCompaniesDetail$Outbound;
}

export function companiesOneCompaniesDetailToJSON(
  companiesOneCompaniesDetail: CompaniesOneCompaniesDetail,
): string {
  return JSON.stringify(
    CompaniesOneCompaniesDetail$outboundSchema.parse(
      companiesOneCompaniesDetail,
    ),
  );
}

export function companiesOneCompaniesDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneCompaniesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneCompaniesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneCompaniesDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCompaniesResponseBody$inboundSchema: z.ZodType<
  CompaniesOneCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new CompaniesOneCompaniesResponseBody(remapped);
  });

/** @internal */
export type CompaniesOneCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesOneCompaniesResponseBody$outboundSchema: z.ZodType<
  CompaniesOneCompaniesResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesOneCompaniesResponseBody
> = z.instanceof(CompaniesOneCompaniesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesResponseBody$ {
  /** @deprecated use `CompaniesOneCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneCompaniesResponseBody$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesOneCompaniesResponseBody$outboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponseBody$Outbound` instead. */
  export type Outbound = CompaniesOneCompaniesResponseBody$Outbound;
}

/** @internal */
export const CompaniesOneDetail$inboundSchema: z.ZodType<
  CompaniesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const CompaniesOneDetail$outboundSchema: z.ZodType<
  CompaniesOneDetail$Outbound,
  z.ZodTypeDef,
  CompaniesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneDetail$ {
  /** @deprecated use `CompaniesOneDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneDetail$inboundSchema;
  /** @deprecated use `CompaniesOneDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneDetail$outboundSchema;
  /** @deprecated use `CompaniesOneDetail$Outbound` instead. */
  export type Outbound = CompaniesOneDetail$Outbound;
}

export function companiesOneDetailToJSON(
  companiesOneDetail: CompaniesOneDetail,
): string {
  return JSON.stringify(
    CompaniesOneDetail$outboundSchema.parse(companiesOneDetail),
  );
}

export function companiesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesOneResponseBody$inboundSchema: z.ZodType<
  CompaniesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new CompaniesOneResponseBody(remapped);
  });

/** @internal */
export type CompaniesOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesOneResponseBody$outboundSchema: z.ZodType<
  CompaniesOneResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesOneResponseBody
> = z.instanceof(CompaniesOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneResponseBody$ {
  /** @deprecated use `CompaniesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneResponseBody$inboundSchema;
  /** @deprecated use `CompaniesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneResponseBody$outboundSchema;
  /** @deprecated use `CompaniesOneResponseBody$Outbound` instead. */
  export type Outbound = CompaniesOneResponseBody$Outbound;
}
