/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesDeletePipelinesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type PipelinesDeletePipelinesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class PipelinesDeletePipelinesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesDeletePipelinesResponse422ResponseBodyData;

  constructor(err: PipelinesDeletePipelinesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesDeletePipelinesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesDeletePipelinesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type PipelinesDeletePipelinesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class PipelinesDeletePipelinesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesDeletePipelinesResponse404ResponseBodyData;

  constructor(err: PipelinesDeletePipelinesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesDeletePipelinesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type PipelinesDeletePipelinesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class PipelinesDeletePipelinesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesDeletePipelinesResponseResponseBodyData;

  constructor(err: PipelinesDeletePipelinesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesDeletePipelinesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesDeletePipelinesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type PipelinesDeletePipelinesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class PipelinesDeletePipelinesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesDeletePipelinesResponseBodyData;

  constructor(err: PipelinesDeletePipelinesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesDeletePipelinesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesDeleteDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type PipelinesDeleteResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class PipelinesDeleteResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesDeleteResponseBodyData;

  constructor(err: PipelinesDeleteResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesDeleteResponseBody";
  }
}

/** @internal */
export const PipelinesDeletePipelinesResponse422Detail$inboundSchema: z.ZodType<
  PipelinesDeletePipelinesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesDeletePipelinesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesDeletePipelinesResponse422Detail$outboundSchema:
  z.ZodType<
    PipelinesDeletePipelinesResponse422Detail$Outbound,
    z.ZodTypeDef,
    PipelinesDeletePipelinesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeletePipelinesResponse422Detail$ {
  /** @deprecated use `PipelinesDeletePipelinesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesDeletePipelinesResponse422Detail$inboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesDeletePipelinesResponse422Detail$outboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponse422Detail$Outbound` instead. */
  export type Outbound = PipelinesDeletePipelinesResponse422Detail$Outbound;
}

export function pipelinesDeletePipelinesResponse422DetailToJSON(
  pipelinesDeletePipelinesResponse422Detail:
    PipelinesDeletePipelinesResponse422Detail,
): string {
  return JSON.stringify(
    PipelinesDeletePipelinesResponse422Detail$outboundSchema.parse(
      pipelinesDeletePipelinesResponse422Detail,
    ),
  );
}

export function pipelinesDeletePipelinesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  PipelinesDeletePipelinesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesDeletePipelinesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PipelinesDeletePipelinesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const PipelinesDeletePipelinesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    PipelinesDeletePipelinesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesDeletePipelinesResponse422ResponseBody(remapped);
    });

/** @internal */
export type PipelinesDeletePipelinesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesDeletePipelinesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    PipelinesDeletePipelinesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesDeletePipelinesResponse422ResponseBody
  > = z.instanceof(PipelinesDeletePipelinesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeletePipelinesResponse422ResponseBody$ {
  /** @deprecated use `PipelinesDeletePipelinesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesDeletePipelinesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesDeletePipelinesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    PipelinesDeletePipelinesResponse422ResponseBody$Outbound;
}

/** @internal */
export const PipelinesDeletePipelinesResponseDetail$inboundSchema: z.ZodType<
  PipelinesDeletePipelinesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesDeletePipelinesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesDeletePipelinesResponseDetail$outboundSchema: z.ZodType<
  PipelinesDeletePipelinesResponseDetail$Outbound,
  z.ZodTypeDef,
  PipelinesDeletePipelinesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeletePipelinesResponseDetail$ {
  /** @deprecated use `PipelinesDeletePipelinesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesDeletePipelinesResponseDetail$inboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesDeletePipelinesResponseDetail$outboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponseDetail$Outbound` instead. */
  export type Outbound = PipelinesDeletePipelinesResponseDetail$Outbound;
}

export function pipelinesDeletePipelinesResponseDetailToJSON(
  pipelinesDeletePipelinesResponseDetail:
    PipelinesDeletePipelinesResponseDetail,
): string {
  return JSON.stringify(
    PipelinesDeletePipelinesResponseDetail$outboundSchema.parse(
      pipelinesDeletePipelinesResponseDetail,
    ),
  );
}

export function pipelinesDeletePipelinesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesDeletePipelinesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesDeletePipelinesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesDeletePipelinesResponseDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesDeletePipelinesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    PipelinesDeletePipelinesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesDeletePipelinesResponse404ResponseBody(remapped);
    });

/** @internal */
export type PipelinesDeletePipelinesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesDeletePipelinesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    PipelinesDeletePipelinesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesDeletePipelinesResponse404ResponseBody
  > = z.instanceof(PipelinesDeletePipelinesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeletePipelinesResponse404ResponseBody$ {
  /** @deprecated use `PipelinesDeletePipelinesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesDeletePipelinesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesDeletePipelinesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    PipelinesDeletePipelinesResponse404ResponseBody$Outbound;
}

/** @internal */
export const PipelinesDeletePipelinesResponseResponseBody$inboundSchema:
  z.ZodType<
    PipelinesDeletePipelinesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesDeletePipelinesResponseResponseBody(remapped);
    });

/** @internal */
export type PipelinesDeletePipelinesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesDeletePipelinesResponseResponseBody$outboundSchema:
  z.ZodType<
    PipelinesDeletePipelinesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesDeletePipelinesResponseResponseBody
  > = z.instanceof(PipelinesDeletePipelinesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeletePipelinesResponseResponseBody$ {
  /** @deprecated use `PipelinesDeletePipelinesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesDeletePipelinesResponseResponseBody$inboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesDeletePipelinesResponseResponseBody$outboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponseResponseBody$Outbound` instead. */
  export type Outbound = PipelinesDeletePipelinesResponseResponseBody$Outbound;
}

/** @internal */
export const PipelinesDeletePipelinesDetail$inboundSchema: z.ZodType<
  PipelinesDeletePipelinesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesDeletePipelinesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesDeletePipelinesDetail$outboundSchema: z.ZodType<
  PipelinesDeletePipelinesDetail$Outbound,
  z.ZodTypeDef,
  PipelinesDeletePipelinesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeletePipelinesDetail$ {
  /** @deprecated use `PipelinesDeletePipelinesDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesDeletePipelinesDetail$inboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesDeletePipelinesDetail$outboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesDetail$Outbound` instead. */
  export type Outbound = PipelinesDeletePipelinesDetail$Outbound;
}

export function pipelinesDeletePipelinesDetailToJSON(
  pipelinesDeletePipelinesDetail: PipelinesDeletePipelinesDetail,
): string {
  return JSON.stringify(
    PipelinesDeletePipelinesDetail$outboundSchema.parse(
      pipelinesDeletePipelinesDetail,
    ),
  );
}

export function pipelinesDeletePipelinesDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesDeletePipelinesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesDeletePipelinesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesDeletePipelinesDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesDeletePipelinesResponseBody$inboundSchema: z.ZodType<
  PipelinesDeletePipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesDeletePipelinesResponseBody(remapped);
  });

/** @internal */
export type PipelinesDeletePipelinesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesDeletePipelinesResponseBody$outboundSchema: z.ZodType<
  PipelinesDeletePipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesDeletePipelinesResponseBody
> = z.instanceof(PipelinesDeletePipelinesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeletePipelinesResponseBody$ {
  /** @deprecated use `PipelinesDeletePipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesDeletePipelinesResponseBody$inboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesDeletePipelinesResponseBody$outboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponseBody$Outbound` instead. */
  export type Outbound = PipelinesDeletePipelinesResponseBody$Outbound;
}

/** @internal */
export const PipelinesDeleteDetail$inboundSchema: z.ZodType<
  PipelinesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const PipelinesDeleteDetail$outboundSchema: z.ZodType<
  PipelinesDeleteDetail$Outbound,
  z.ZodTypeDef,
  PipelinesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeleteDetail$ {
  /** @deprecated use `PipelinesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesDeleteDetail$inboundSchema;
  /** @deprecated use `PipelinesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesDeleteDetail$outboundSchema;
  /** @deprecated use `PipelinesDeleteDetail$Outbound` instead. */
  export type Outbound = PipelinesDeleteDetail$Outbound;
}

export function pipelinesDeleteDetailToJSON(
  pipelinesDeleteDetail: PipelinesDeleteDetail,
): string {
  return JSON.stringify(
    PipelinesDeleteDetail$outboundSchema.parse(pipelinesDeleteDetail),
  );
}

export function pipelinesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesDeleteResponseBody$inboundSchema: z.ZodType<
  PipelinesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesDeleteResponseBody(remapped);
  });

/** @internal */
export type PipelinesDeleteResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesDeleteResponseBody$outboundSchema: z.ZodType<
  PipelinesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesDeleteResponseBody
> = z.instanceof(PipelinesDeleteResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeleteResponseBody$ {
  /** @deprecated use `PipelinesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesDeleteResponseBody$inboundSchema;
  /** @deprecated use `PipelinesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesDeleteResponseBody$outboundSchema;
  /** @deprecated use `PipelinesDeleteResponseBody$Outbound` instead. */
  export type Outbound = PipelinesDeleteResponseBody$Outbound;
}
