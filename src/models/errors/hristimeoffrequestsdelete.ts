/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail =
  | string
  | { [k: string]: any };

/**
 * Unprocessable
 */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
  };

/**
 * Unprocessable
 */
export class HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$:
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBodyData;

  constructor(
    err:
      HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name =
      "HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail =
  | string
  | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | { [k: string]: any } | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
  };

/**
 * The specified resource was not found
 */
export class HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$:
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBodyData;

  constructor(
    err:
      HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name =
      "HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBodyData =
  {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
    /**
     * A human-readable message providing more details about the error.
     */
    message?: string | undefined;
    /**
     * Contains parameter or domain specific information related to the error and why it occurred.
     */
    detail?: string | undefined;
    /**
     * Link to documentation of error type
     */
    ref?: string | undefined;
  };

/**
 * Payment Required
 */
export class HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBodyData;

  constructor(
    err: HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name =
      "HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail = string | {
  [k: string]: any;
};

/**
 * Unauthorized
 */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBodyData;

  constructor(
    err: HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBodyData,
  ) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsDeleteDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisTimeOffRequestsDeleteResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class HrisTimeOffRequestsDeleteResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: HrisTimeOffRequestsDeleteResponseBodyData;

  constructor(err: HrisTimeOffRequestsDeleteResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "HrisTimeOffRequestsDeleteResponseBody";
  }
}

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$Outbound;
}

export function hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422DetailToJSON(
  hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail:
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$outboundSchema
      .parse(hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail),
  );
}

export function hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$Outbound;
}

export function hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetailToJSON(
  hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail:
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$outboundSchema
      .parse(hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail),
  );
}

export function hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody
  > = z.instanceof(
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$Outbound =
  | string
  | { [k: string]: any };

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$Outbound;
}

export function hrisTimeOffRequestsDeleteHrisTimeOffRequestsDetailToJSON(
  hrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail:
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$outboundSchema.parse(
      hrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail,
    ),
  );
}

export function hrisTimeOffRequestsDeleteHrisTimeOffRequestsDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisTimeOffRequestsDeleteHrisTimeOffRequestsDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody(
        remapped,
      );
    });

/** @internal */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody
  > = z.instanceof(HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$Outbound;
}

/** @internal */
export const HrisTimeOffRequestsDeleteDetail$inboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsDeleteDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisTimeOffRequestsDeleteDetail$outboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteDetail$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteDetail$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsDeleteDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsDeleteDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteDetail$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsDeleteDetail$Outbound;
}

export function hrisTimeOffRequestsDeleteDetailToJSON(
  hrisTimeOffRequestsDeleteDetail: HrisTimeOffRequestsDeleteDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteDetail$outboundSchema.parse(
      hrisTimeOffRequestsDeleteDetail,
    ),
  );
}

export function hrisTimeOffRequestsDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsDeleteDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsDeleteResponseBody$inboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new HrisTimeOffRequestsDeleteResponseBody(remapped);
  });

/** @internal */
export type HrisTimeOffRequestsDeleteResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisTimeOffRequestsDeleteResponseBody$outboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsDeleteResponseBody
> = z.instanceof(HrisTimeOffRequestsDeleteResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsDeleteResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteResponseBody$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsDeleteResponseBody$Outbound;
}
