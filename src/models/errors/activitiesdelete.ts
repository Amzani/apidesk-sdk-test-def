/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesDeleteActivitiesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type ActivitiesDeleteActivitiesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class ActivitiesDeleteActivitiesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesDeleteActivitiesResponse422ResponseBodyData;

  constructor(err: ActivitiesDeleteActivitiesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesDeleteActivitiesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesDeleteActivitiesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type ActivitiesDeleteActivitiesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class ActivitiesDeleteActivitiesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesDeleteActivitiesResponse404ResponseBodyData;

  constructor(err: ActivitiesDeleteActivitiesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesDeleteActivitiesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type ActivitiesDeleteActivitiesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class ActivitiesDeleteActivitiesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesDeleteActivitiesResponseResponseBodyData;

  constructor(err: ActivitiesDeleteActivitiesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesDeleteActivitiesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesDeleteActivitiesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type ActivitiesDeleteActivitiesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class ActivitiesDeleteActivitiesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesDeleteActivitiesResponseBodyData;

  constructor(err: ActivitiesDeleteActivitiesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesDeleteActivitiesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesDeleteDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type ActivitiesDeleteResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class ActivitiesDeleteResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ActivitiesDeleteResponseBodyData;

  constructor(err: ActivitiesDeleteResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ActivitiesDeleteResponseBody";
  }
}

/** @internal */
export const ActivitiesDeleteActivitiesResponse422Detail$inboundSchema:
  z.ZodType<
    ActivitiesDeleteActivitiesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesDeleteActivitiesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesDeleteActivitiesResponse422Detail$outboundSchema:
  z.ZodType<
    ActivitiesDeleteActivitiesResponse422Detail$Outbound,
    z.ZodTypeDef,
    ActivitiesDeleteActivitiesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteActivitiesResponse422Detail$ {
  /** @deprecated use `ActivitiesDeleteActivitiesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesDeleteActivitiesResponse422Detail$inboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesDeleteActivitiesResponse422Detail$outboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponse422Detail$Outbound` instead. */
  export type Outbound = ActivitiesDeleteActivitiesResponse422Detail$Outbound;
}

export function activitiesDeleteActivitiesResponse422DetailToJSON(
  activitiesDeleteActivitiesResponse422Detail:
    ActivitiesDeleteActivitiesResponse422Detail,
): string {
  return JSON.stringify(
    ActivitiesDeleteActivitiesResponse422Detail$outboundSchema.parse(
      activitiesDeleteActivitiesResponse422Detail,
    ),
  );
}

export function activitiesDeleteActivitiesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivitiesDeleteActivitiesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesDeleteActivitiesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivitiesDeleteActivitiesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const ActivitiesDeleteActivitiesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesDeleteActivitiesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesDeleteActivitiesResponse422ResponseBody(remapped);
    });

/** @internal */
export type ActivitiesDeleteActivitiesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesDeleteActivitiesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesDeleteActivitiesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesDeleteActivitiesResponse422ResponseBody
  > = z.instanceof(ActivitiesDeleteActivitiesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteActivitiesResponse422ResponseBody$ {
  /** @deprecated use `ActivitiesDeleteActivitiesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesDeleteActivitiesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesDeleteActivitiesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesDeleteActivitiesResponse422ResponseBody$Outbound;
}

/** @internal */
export const ActivitiesDeleteActivitiesResponseDetail$inboundSchema: z.ZodType<
  ActivitiesDeleteActivitiesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesDeleteActivitiesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesDeleteActivitiesResponseDetail$outboundSchema: z.ZodType<
  ActivitiesDeleteActivitiesResponseDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteActivitiesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteActivitiesResponseDetail$ {
  /** @deprecated use `ActivitiesDeleteActivitiesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesDeleteActivitiesResponseDetail$inboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesDeleteActivitiesResponseDetail$outboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponseDetail$Outbound` instead. */
  export type Outbound = ActivitiesDeleteActivitiesResponseDetail$Outbound;
}

export function activitiesDeleteActivitiesResponseDetailToJSON(
  activitiesDeleteActivitiesResponseDetail:
    ActivitiesDeleteActivitiesResponseDetail,
): string {
  return JSON.stringify(
    ActivitiesDeleteActivitiesResponseDetail$outboundSchema.parse(
      activitiesDeleteActivitiesResponseDetail,
    ),
  );
}

export function activitiesDeleteActivitiesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivitiesDeleteActivitiesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesDeleteActivitiesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivitiesDeleteActivitiesResponseDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesDeleteActivitiesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesDeleteActivitiesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesDeleteActivitiesResponse404ResponseBody(remapped);
    });

/** @internal */
export type ActivitiesDeleteActivitiesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesDeleteActivitiesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesDeleteActivitiesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesDeleteActivitiesResponse404ResponseBody
  > = z.instanceof(ActivitiesDeleteActivitiesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteActivitiesResponse404ResponseBody$ {
  /** @deprecated use `ActivitiesDeleteActivitiesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesDeleteActivitiesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesDeleteActivitiesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesDeleteActivitiesResponse404ResponseBody$Outbound;
}

/** @internal */
export const ActivitiesDeleteActivitiesResponseResponseBody$inboundSchema:
  z.ZodType<
    ActivitiesDeleteActivitiesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ActivitiesDeleteActivitiesResponseResponseBody(remapped);
    });

/** @internal */
export type ActivitiesDeleteActivitiesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesDeleteActivitiesResponseResponseBody$outboundSchema:
  z.ZodType<
    ActivitiesDeleteActivitiesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ActivitiesDeleteActivitiesResponseResponseBody
  > = z.instanceof(ActivitiesDeleteActivitiesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteActivitiesResponseResponseBody$ {
  /** @deprecated use `ActivitiesDeleteActivitiesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesDeleteActivitiesResponseResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesDeleteActivitiesResponseResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    ActivitiesDeleteActivitiesResponseResponseBody$Outbound;
}

/** @internal */
export const ActivitiesDeleteActivitiesDetail$inboundSchema: z.ZodType<
  ActivitiesDeleteActivitiesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesDeleteActivitiesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ActivitiesDeleteActivitiesDetail$outboundSchema: z.ZodType<
  ActivitiesDeleteActivitiesDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteActivitiesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteActivitiesDetail$ {
  /** @deprecated use `ActivitiesDeleteActivitiesDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesDeleteActivitiesDetail$inboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesDeleteActivitiesDetail$outboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesDetail$Outbound` instead. */
  export type Outbound = ActivitiesDeleteActivitiesDetail$Outbound;
}

export function activitiesDeleteActivitiesDetailToJSON(
  activitiesDeleteActivitiesDetail: ActivitiesDeleteActivitiesDetail,
): string {
  return JSON.stringify(
    ActivitiesDeleteActivitiesDetail$outboundSchema.parse(
      activitiesDeleteActivitiesDetail,
    ),
  );
}

export function activitiesDeleteActivitiesDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesDeleteActivitiesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesDeleteActivitiesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesDeleteActivitiesDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesDeleteActivitiesResponseBody$inboundSchema: z.ZodType<
  ActivitiesDeleteActivitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ActivitiesDeleteActivitiesResponseBody(remapped);
  });

/** @internal */
export type ActivitiesDeleteActivitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesDeleteActivitiesResponseBody$outboundSchema: z.ZodType<
  ActivitiesDeleteActivitiesResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteActivitiesResponseBody
> = z.instanceof(ActivitiesDeleteActivitiesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteActivitiesResponseBody$ {
  /** @deprecated use `ActivitiesDeleteActivitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesDeleteActivitiesResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesDeleteActivitiesResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesDeleteActivitiesResponseBody$Outbound;
}

/** @internal */
export const ActivitiesDeleteDetail$inboundSchema: z.ZodType<
  ActivitiesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ActivitiesDeleteDetail$outboundSchema: z.ZodType<
  ActivitiesDeleteDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteDetail$ {
  /** @deprecated use `ActivitiesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesDeleteDetail$inboundSchema;
  /** @deprecated use `ActivitiesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesDeleteDetail$outboundSchema;
  /** @deprecated use `ActivitiesDeleteDetail$Outbound` instead. */
  export type Outbound = ActivitiesDeleteDetail$Outbound;
}

export function activitiesDeleteDetailToJSON(
  activitiesDeleteDetail: ActivitiesDeleteDetail,
): string {
  return JSON.stringify(
    ActivitiesDeleteDetail$outboundSchema.parse(activitiesDeleteDetail),
  );
}

export function activitiesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesDeleteResponseBody$inboundSchema: z.ZodType<
  ActivitiesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ActivitiesDeleteResponseBody(remapped);
  });

/** @internal */
export type ActivitiesDeleteResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesDeleteResponseBody$outboundSchema: z.ZodType<
  ActivitiesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteResponseBody
> = z.instanceof(ActivitiesDeleteResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteResponseBody$ {
  /** @deprecated use `ActivitiesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesDeleteResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesDeleteResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesDeleteResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesDeleteResponseBody$Outbound;
}
