/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesAddPipelinesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type PipelinesAddPipelinesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class PipelinesAddPipelinesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesAddPipelinesResponse422ResponseBodyData;

  constructor(err: PipelinesAddPipelinesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesAddPipelinesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesAddPipelinesResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type PipelinesAddPipelinesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class PipelinesAddPipelinesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesAddPipelinesResponse404ResponseBodyData;

  constructor(err: PipelinesAddPipelinesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesAddPipelinesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type PipelinesAddPipelinesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class PipelinesAddPipelinesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesAddPipelinesResponseResponseBodyData;

  constructor(err: PipelinesAddPipelinesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesAddPipelinesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesAddPipelinesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type PipelinesAddPipelinesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class PipelinesAddPipelinesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesAddPipelinesResponseBodyData;

  constructor(err: PipelinesAddPipelinesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesAddPipelinesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesAddDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type PipelinesAddResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class PipelinesAddResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesAddResponseBodyData;

  constructor(err: PipelinesAddResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesAddResponseBody";
  }
}

/** @internal */
export const PipelinesAddPipelinesResponse422Detail$inboundSchema: z.ZodType<
  PipelinesAddPipelinesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesAddPipelinesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesAddPipelinesResponse422Detail$outboundSchema: z.ZodType<
  PipelinesAddPipelinesResponse422Detail$Outbound,
  z.ZodTypeDef,
  PipelinesAddPipelinesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddPipelinesResponse422Detail$ {
  /** @deprecated use `PipelinesAddPipelinesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesAddPipelinesResponse422Detail$inboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAddPipelinesResponse422Detail$outboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponse422Detail$Outbound` instead. */
  export type Outbound = PipelinesAddPipelinesResponse422Detail$Outbound;
}

export function pipelinesAddPipelinesResponse422DetailToJSON(
  pipelinesAddPipelinesResponse422Detail:
    PipelinesAddPipelinesResponse422Detail,
): string {
  return JSON.stringify(
    PipelinesAddPipelinesResponse422Detail$outboundSchema.parse(
      pipelinesAddPipelinesResponse422Detail,
    ),
  );
}

export function pipelinesAddPipelinesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddPipelinesResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesAddPipelinesResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddPipelinesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const PipelinesAddPipelinesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    PipelinesAddPipelinesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesAddPipelinesResponse422ResponseBody(remapped);
    });

/** @internal */
export type PipelinesAddPipelinesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAddPipelinesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    PipelinesAddPipelinesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesAddPipelinesResponse422ResponseBody
  > = z.instanceof(PipelinesAddPipelinesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddPipelinesResponse422ResponseBody$ {
  /** @deprecated use `PipelinesAddPipelinesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesAddPipelinesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAddPipelinesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponse422ResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAddPipelinesResponse422ResponseBody$Outbound;
}

/** @internal */
export const PipelinesAddPipelinesResponseDetail$inboundSchema: z.ZodType<
  PipelinesAddPipelinesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesAddPipelinesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesAddPipelinesResponseDetail$outboundSchema: z.ZodType<
  PipelinesAddPipelinesResponseDetail$Outbound,
  z.ZodTypeDef,
  PipelinesAddPipelinesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddPipelinesResponseDetail$ {
  /** @deprecated use `PipelinesAddPipelinesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesAddPipelinesResponseDetail$inboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAddPipelinesResponseDetail$outboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponseDetail$Outbound` instead. */
  export type Outbound = PipelinesAddPipelinesResponseDetail$Outbound;
}

export function pipelinesAddPipelinesResponseDetailToJSON(
  pipelinesAddPipelinesResponseDetail: PipelinesAddPipelinesResponseDetail,
): string {
  return JSON.stringify(
    PipelinesAddPipelinesResponseDetail$outboundSchema.parse(
      pipelinesAddPipelinesResponseDetail,
    ),
  );
}

export function pipelinesAddPipelinesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddPipelinesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesAddPipelinesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddPipelinesResponseDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesAddPipelinesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    PipelinesAddPipelinesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesAddPipelinesResponse404ResponseBody(remapped);
    });

/** @internal */
export type PipelinesAddPipelinesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAddPipelinesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    PipelinesAddPipelinesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesAddPipelinesResponse404ResponseBody
  > = z.instanceof(PipelinesAddPipelinesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddPipelinesResponse404ResponseBody$ {
  /** @deprecated use `PipelinesAddPipelinesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesAddPipelinesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAddPipelinesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponse404ResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAddPipelinesResponse404ResponseBody$Outbound;
}

/** @internal */
export const PipelinesAddPipelinesResponseResponseBody$inboundSchema: z.ZodType<
  PipelinesAddPipelinesResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesAddPipelinesResponseResponseBody(remapped);
  });

/** @internal */
export type PipelinesAddPipelinesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAddPipelinesResponseResponseBody$outboundSchema:
  z.ZodType<
    PipelinesAddPipelinesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesAddPipelinesResponseResponseBody
  > = z.instanceof(PipelinesAddPipelinesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddPipelinesResponseResponseBody$ {
  /** @deprecated use `PipelinesAddPipelinesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesAddPipelinesResponseResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAddPipelinesResponseResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponseResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAddPipelinesResponseResponseBody$Outbound;
}

/** @internal */
export const PipelinesAddPipelinesDetail$inboundSchema: z.ZodType<
  PipelinesAddPipelinesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesAddPipelinesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesAddPipelinesDetail$outboundSchema: z.ZodType<
  PipelinesAddPipelinesDetail$Outbound,
  z.ZodTypeDef,
  PipelinesAddPipelinesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddPipelinesDetail$ {
  /** @deprecated use `PipelinesAddPipelinesDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddPipelinesDetail$inboundSchema;
  /** @deprecated use `PipelinesAddPipelinesDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddPipelinesDetail$outboundSchema;
  /** @deprecated use `PipelinesAddPipelinesDetail$Outbound` instead. */
  export type Outbound = PipelinesAddPipelinesDetail$Outbound;
}

export function pipelinesAddPipelinesDetailToJSON(
  pipelinesAddPipelinesDetail: PipelinesAddPipelinesDetail,
): string {
  return JSON.stringify(
    PipelinesAddPipelinesDetail$outboundSchema.parse(
      pipelinesAddPipelinesDetail,
    ),
  );
}

export function pipelinesAddPipelinesDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddPipelinesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddPipelinesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddPipelinesDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesAddPipelinesResponseBody$inboundSchema: z.ZodType<
  PipelinesAddPipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesAddPipelinesResponseBody(remapped);
  });

/** @internal */
export type PipelinesAddPipelinesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAddPipelinesResponseBody$outboundSchema: z.ZodType<
  PipelinesAddPipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesAddPipelinesResponseBody
> = z.instanceof(PipelinesAddPipelinesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddPipelinesResponseBody$ {
  /** @deprecated use `PipelinesAddPipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddPipelinesResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAddPipelinesResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAddPipelinesResponseBody$Outbound;
}

/** @internal */
export const PipelinesAddDetail$inboundSchema: z.ZodType<
  PipelinesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const PipelinesAddDetail$outboundSchema: z.ZodType<
  PipelinesAddDetail$Outbound,
  z.ZodTypeDef,
  PipelinesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddDetail$ {
  /** @deprecated use `PipelinesAddDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddDetail$inboundSchema;
  /** @deprecated use `PipelinesAddDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddDetail$outboundSchema;
  /** @deprecated use `PipelinesAddDetail$Outbound` instead. */
  export type Outbound = PipelinesAddDetail$Outbound;
}

export function pipelinesAddDetailToJSON(
  pipelinesAddDetail: PipelinesAddDetail,
): string {
  return JSON.stringify(
    PipelinesAddDetail$outboundSchema.parse(pipelinesAddDetail),
  );
}

export function pipelinesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesAddResponseBody$inboundSchema: z.ZodType<
  PipelinesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesAddResponseBody(remapped);
  });

/** @internal */
export type PipelinesAddResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAddResponseBody$outboundSchema: z.ZodType<
  PipelinesAddResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesAddResponseBody
> = z.instanceof(PipelinesAddResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddResponseBody$ {
  /** @deprecated use `PipelinesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAddResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAddResponseBody$Outbound;
}
