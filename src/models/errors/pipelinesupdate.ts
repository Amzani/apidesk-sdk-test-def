/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesUpdatePipelinesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type PipelinesUpdatePipelinesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class PipelinesUpdatePipelinesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesUpdatePipelinesResponse422ResponseBodyData;

  constructor(err: PipelinesUpdatePipelinesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesUpdatePipelinesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesUpdatePipelinesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type PipelinesUpdatePipelinesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class PipelinesUpdatePipelinesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesUpdatePipelinesResponse404ResponseBodyData;

  constructor(err: PipelinesUpdatePipelinesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesUpdatePipelinesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type PipelinesUpdatePipelinesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class PipelinesUpdatePipelinesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesUpdatePipelinesResponseResponseBodyData;

  constructor(err: PipelinesUpdatePipelinesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesUpdatePipelinesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesUpdatePipelinesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type PipelinesUpdatePipelinesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class PipelinesUpdatePipelinesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesUpdatePipelinesResponseBodyData;

  constructor(err: PipelinesUpdatePipelinesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesUpdatePipelinesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesUpdateDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type PipelinesUpdateResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class PipelinesUpdateResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesUpdateResponseBodyData;

  constructor(err: PipelinesUpdateResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesUpdateResponseBody";
  }
}

/** @internal */
export const PipelinesUpdatePipelinesResponse422Detail$inboundSchema: z.ZodType<
  PipelinesUpdatePipelinesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesUpdatePipelinesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesUpdatePipelinesResponse422Detail$outboundSchema:
  z.ZodType<
    PipelinesUpdatePipelinesResponse422Detail$Outbound,
    z.ZodTypeDef,
    PipelinesUpdatePipelinesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdatePipelinesResponse422Detail$ {
  /** @deprecated use `PipelinesUpdatePipelinesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesUpdatePipelinesResponse422Detail$inboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesUpdatePipelinesResponse422Detail$outboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponse422Detail$Outbound` instead. */
  export type Outbound = PipelinesUpdatePipelinesResponse422Detail$Outbound;
}

export function pipelinesUpdatePipelinesResponse422DetailToJSON(
  pipelinesUpdatePipelinesResponse422Detail:
    PipelinesUpdatePipelinesResponse422Detail,
): string {
  return JSON.stringify(
    PipelinesUpdatePipelinesResponse422Detail$outboundSchema.parse(
      pipelinesUpdatePipelinesResponse422Detail,
    ),
  );
}

export function pipelinesUpdatePipelinesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  PipelinesUpdatePipelinesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesUpdatePipelinesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PipelinesUpdatePipelinesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdatePipelinesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    PipelinesUpdatePipelinesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesUpdatePipelinesResponse422ResponseBody(remapped);
    });

/** @internal */
export type PipelinesUpdatePipelinesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesUpdatePipelinesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    PipelinesUpdatePipelinesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesUpdatePipelinesResponse422ResponseBody
  > = z.instanceof(PipelinesUpdatePipelinesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdatePipelinesResponse422ResponseBody$ {
  /** @deprecated use `PipelinesUpdatePipelinesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesUpdatePipelinesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesUpdatePipelinesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    PipelinesUpdatePipelinesResponse422ResponseBody$Outbound;
}

/** @internal */
export const PipelinesUpdatePipelinesResponseDetail$inboundSchema: z.ZodType<
  PipelinesUpdatePipelinesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesUpdatePipelinesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesUpdatePipelinesResponseDetail$outboundSchema: z.ZodType<
  PipelinesUpdatePipelinesResponseDetail$Outbound,
  z.ZodTypeDef,
  PipelinesUpdatePipelinesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdatePipelinesResponseDetail$ {
  /** @deprecated use `PipelinesUpdatePipelinesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesUpdatePipelinesResponseDetail$inboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesUpdatePipelinesResponseDetail$outboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponseDetail$Outbound` instead. */
  export type Outbound = PipelinesUpdatePipelinesResponseDetail$Outbound;
}

export function pipelinesUpdatePipelinesResponseDetailToJSON(
  pipelinesUpdatePipelinesResponseDetail:
    PipelinesUpdatePipelinesResponseDetail,
): string {
  return JSON.stringify(
    PipelinesUpdatePipelinesResponseDetail$outboundSchema.parse(
      pipelinesUpdatePipelinesResponseDetail,
    ),
  );
}

export function pipelinesUpdatePipelinesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdatePipelinesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesUpdatePipelinesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdatePipelinesResponseDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdatePipelinesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    PipelinesUpdatePipelinesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesUpdatePipelinesResponse404ResponseBody(remapped);
    });

/** @internal */
export type PipelinesUpdatePipelinesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesUpdatePipelinesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    PipelinesUpdatePipelinesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesUpdatePipelinesResponse404ResponseBody
  > = z.instanceof(PipelinesUpdatePipelinesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdatePipelinesResponse404ResponseBody$ {
  /** @deprecated use `PipelinesUpdatePipelinesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesUpdatePipelinesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesUpdatePipelinesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    PipelinesUpdatePipelinesResponse404ResponseBody$Outbound;
}

/** @internal */
export const PipelinesUpdatePipelinesResponseResponseBody$inboundSchema:
  z.ZodType<
    PipelinesUpdatePipelinesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesUpdatePipelinesResponseResponseBody(remapped);
    });

/** @internal */
export type PipelinesUpdatePipelinesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesUpdatePipelinesResponseResponseBody$outboundSchema:
  z.ZodType<
    PipelinesUpdatePipelinesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesUpdatePipelinesResponseResponseBody
  > = z.instanceof(PipelinesUpdatePipelinesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdatePipelinesResponseResponseBody$ {
  /** @deprecated use `PipelinesUpdatePipelinesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesUpdatePipelinesResponseResponseBody$inboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesUpdatePipelinesResponseResponseBody$outboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponseResponseBody$Outbound` instead. */
  export type Outbound = PipelinesUpdatePipelinesResponseResponseBody$Outbound;
}

/** @internal */
export const PipelinesUpdatePipelinesDetail$inboundSchema: z.ZodType<
  PipelinesUpdatePipelinesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesUpdatePipelinesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesUpdatePipelinesDetail$outboundSchema: z.ZodType<
  PipelinesUpdatePipelinesDetail$Outbound,
  z.ZodTypeDef,
  PipelinesUpdatePipelinesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdatePipelinesDetail$ {
  /** @deprecated use `PipelinesUpdatePipelinesDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdatePipelinesDetail$inboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdatePipelinesDetail$outboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesDetail$Outbound` instead. */
  export type Outbound = PipelinesUpdatePipelinesDetail$Outbound;
}

export function pipelinesUpdatePipelinesDetailToJSON(
  pipelinesUpdatePipelinesDetail: PipelinesUpdatePipelinesDetail,
): string {
  return JSON.stringify(
    PipelinesUpdatePipelinesDetail$outboundSchema.parse(
      pipelinesUpdatePipelinesDetail,
    ),
  );
}

export function pipelinesUpdatePipelinesDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdatePipelinesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdatePipelinesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdatePipelinesDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdatePipelinesResponseBody$inboundSchema: z.ZodType<
  PipelinesUpdatePipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesUpdatePipelinesResponseBody(remapped);
  });

/** @internal */
export type PipelinesUpdatePipelinesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesUpdatePipelinesResponseBody$outboundSchema: z.ZodType<
  PipelinesUpdatePipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesUpdatePipelinesResponseBody
> = z.instanceof(PipelinesUpdatePipelinesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdatePipelinesResponseBody$ {
  /** @deprecated use `PipelinesUpdatePipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesUpdatePipelinesResponseBody$inboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesUpdatePipelinesResponseBody$outboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponseBody$Outbound` instead. */
  export type Outbound = PipelinesUpdatePipelinesResponseBody$Outbound;
}

/** @internal */
export const PipelinesUpdateDetail$inboundSchema: z.ZodType<
  PipelinesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const PipelinesUpdateDetail$outboundSchema: z.ZodType<
  PipelinesUpdateDetail$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateDetail$ {
  /** @deprecated use `PipelinesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateDetail$inboundSchema;
  /** @deprecated use `PipelinesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateDetail$outboundSchema;
  /** @deprecated use `PipelinesUpdateDetail$Outbound` instead. */
  export type Outbound = PipelinesUpdateDetail$Outbound;
}

export function pipelinesUpdateDetailToJSON(
  pipelinesUpdateDetail: PipelinesUpdateDetail,
): string {
  return JSON.stringify(
    PipelinesUpdateDetail$outboundSchema.parse(pipelinesUpdateDetail),
  );
}

export function pipelinesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateResponseBody$inboundSchema: z.ZodType<
  PipelinesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesUpdateResponseBody(remapped);
  });

/** @internal */
export type PipelinesUpdateResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesUpdateResponseBody$outboundSchema: z.ZodType<
  PipelinesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateResponseBody
> = z.instanceof(PipelinesUpdateResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateResponseBody$ {
  /** @deprecated use `PipelinesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateResponseBody$inboundSchema;
  /** @deprecated use `PipelinesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateResponseBody$outboundSchema;
  /** @deprecated use `PipelinesUpdateResponseBody$Outbound` instead. */
  export type Outbound = PipelinesUpdateResponseBody$Outbound;
}
