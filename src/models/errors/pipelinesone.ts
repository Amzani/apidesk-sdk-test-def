/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesOnePipelinesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type PipelinesOnePipelinesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class PipelinesOnePipelinesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesOnePipelinesResponse422ResponseBodyData;

  constructor(err: PipelinesOnePipelinesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesOnePipelinesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesOnePipelinesResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type PipelinesOnePipelinesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class PipelinesOnePipelinesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesOnePipelinesResponse404ResponseBodyData;

  constructor(err: PipelinesOnePipelinesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesOnePipelinesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type PipelinesOnePipelinesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class PipelinesOnePipelinesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesOnePipelinesResponseResponseBodyData;

  constructor(err: PipelinesOnePipelinesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesOnePipelinesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesOnePipelinesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type PipelinesOnePipelinesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class PipelinesOnePipelinesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesOnePipelinesResponseBodyData;

  constructor(err: PipelinesOnePipelinesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesOnePipelinesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesOneDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type PipelinesOneResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class PipelinesOneResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesOneResponseBodyData;

  constructor(err: PipelinesOneResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesOneResponseBody";
  }
}

/** @internal */
export const PipelinesOnePipelinesResponse422Detail$inboundSchema: z.ZodType<
  PipelinesOnePipelinesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesOnePipelinesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesOnePipelinesResponse422Detail$outboundSchema: z.ZodType<
  PipelinesOnePipelinesResponse422Detail$Outbound,
  z.ZodTypeDef,
  PipelinesOnePipelinesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOnePipelinesResponse422Detail$ {
  /** @deprecated use `PipelinesOnePipelinesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesOnePipelinesResponse422Detail$inboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesOnePipelinesResponse422Detail$outboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponse422Detail$Outbound` instead. */
  export type Outbound = PipelinesOnePipelinesResponse422Detail$Outbound;
}

export function pipelinesOnePipelinesResponse422DetailToJSON(
  pipelinesOnePipelinesResponse422Detail:
    PipelinesOnePipelinesResponse422Detail,
): string {
  return JSON.stringify(
    PipelinesOnePipelinesResponse422Detail$outboundSchema.parse(
      pipelinesOnePipelinesResponse422Detail,
    ),
  );
}

export function pipelinesOnePipelinesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOnePipelinesResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesOnePipelinesResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOnePipelinesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const PipelinesOnePipelinesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    PipelinesOnePipelinesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesOnePipelinesResponse422ResponseBody(remapped);
    });

/** @internal */
export type PipelinesOnePipelinesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesOnePipelinesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    PipelinesOnePipelinesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesOnePipelinesResponse422ResponseBody
  > = z.instanceof(PipelinesOnePipelinesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOnePipelinesResponse422ResponseBody$ {
  /** @deprecated use `PipelinesOnePipelinesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesOnePipelinesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesOnePipelinesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponse422ResponseBody$Outbound` instead. */
  export type Outbound = PipelinesOnePipelinesResponse422ResponseBody$Outbound;
}

/** @internal */
export const PipelinesOnePipelinesResponseDetail$inboundSchema: z.ZodType<
  PipelinesOnePipelinesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesOnePipelinesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesOnePipelinesResponseDetail$outboundSchema: z.ZodType<
  PipelinesOnePipelinesResponseDetail$Outbound,
  z.ZodTypeDef,
  PipelinesOnePipelinesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOnePipelinesResponseDetail$ {
  /** @deprecated use `PipelinesOnePipelinesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesOnePipelinesResponseDetail$inboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesOnePipelinesResponseDetail$outboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponseDetail$Outbound` instead. */
  export type Outbound = PipelinesOnePipelinesResponseDetail$Outbound;
}

export function pipelinesOnePipelinesResponseDetailToJSON(
  pipelinesOnePipelinesResponseDetail: PipelinesOnePipelinesResponseDetail,
): string {
  return JSON.stringify(
    PipelinesOnePipelinesResponseDetail$outboundSchema.parse(
      pipelinesOnePipelinesResponseDetail,
    ),
  );
}

export function pipelinesOnePipelinesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOnePipelinesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesOnePipelinesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOnePipelinesResponseDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesOnePipelinesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    PipelinesOnePipelinesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesOnePipelinesResponse404ResponseBody(remapped);
    });

/** @internal */
export type PipelinesOnePipelinesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesOnePipelinesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    PipelinesOnePipelinesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesOnePipelinesResponse404ResponseBody
  > = z.instanceof(PipelinesOnePipelinesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOnePipelinesResponse404ResponseBody$ {
  /** @deprecated use `PipelinesOnePipelinesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesOnePipelinesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesOnePipelinesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponse404ResponseBody$Outbound` instead. */
  export type Outbound = PipelinesOnePipelinesResponse404ResponseBody$Outbound;
}

/** @internal */
export const PipelinesOnePipelinesResponseResponseBody$inboundSchema: z.ZodType<
  PipelinesOnePipelinesResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesOnePipelinesResponseResponseBody(remapped);
  });

/** @internal */
export type PipelinesOnePipelinesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesOnePipelinesResponseResponseBody$outboundSchema:
  z.ZodType<
    PipelinesOnePipelinesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesOnePipelinesResponseResponseBody
  > = z.instanceof(PipelinesOnePipelinesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOnePipelinesResponseResponseBody$ {
  /** @deprecated use `PipelinesOnePipelinesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesOnePipelinesResponseResponseBody$inboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesOnePipelinesResponseResponseBody$outboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponseResponseBody$Outbound` instead. */
  export type Outbound = PipelinesOnePipelinesResponseResponseBody$Outbound;
}

/** @internal */
export const PipelinesOnePipelinesDetail$inboundSchema: z.ZodType<
  PipelinesOnePipelinesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesOnePipelinesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesOnePipelinesDetail$outboundSchema: z.ZodType<
  PipelinesOnePipelinesDetail$Outbound,
  z.ZodTypeDef,
  PipelinesOnePipelinesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOnePipelinesDetail$ {
  /** @deprecated use `PipelinesOnePipelinesDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesOnePipelinesDetail$inboundSchema;
  /** @deprecated use `PipelinesOnePipelinesDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesOnePipelinesDetail$outboundSchema;
  /** @deprecated use `PipelinesOnePipelinesDetail$Outbound` instead. */
  export type Outbound = PipelinesOnePipelinesDetail$Outbound;
}

export function pipelinesOnePipelinesDetailToJSON(
  pipelinesOnePipelinesDetail: PipelinesOnePipelinesDetail,
): string {
  return JSON.stringify(
    PipelinesOnePipelinesDetail$outboundSchema.parse(
      pipelinesOnePipelinesDetail,
    ),
  );
}

export function pipelinesOnePipelinesDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOnePipelinesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOnePipelinesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOnePipelinesDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesOnePipelinesResponseBody$inboundSchema: z.ZodType<
  PipelinesOnePipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesOnePipelinesResponseBody(remapped);
  });

/** @internal */
export type PipelinesOnePipelinesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesOnePipelinesResponseBody$outboundSchema: z.ZodType<
  PipelinesOnePipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesOnePipelinesResponseBody
> = z.instanceof(PipelinesOnePipelinesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOnePipelinesResponseBody$ {
  /** @deprecated use `PipelinesOnePipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesOnePipelinesResponseBody$inboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesOnePipelinesResponseBody$outboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponseBody$Outbound` instead. */
  export type Outbound = PipelinesOnePipelinesResponseBody$Outbound;
}

/** @internal */
export const PipelinesOneDetail$inboundSchema: z.ZodType<
  PipelinesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const PipelinesOneDetail$outboundSchema: z.ZodType<
  PipelinesOneDetail$Outbound,
  z.ZodTypeDef,
  PipelinesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneDetail$ {
  /** @deprecated use `PipelinesOneDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneDetail$inboundSchema;
  /** @deprecated use `PipelinesOneDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneDetail$outboundSchema;
  /** @deprecated use `PipelinesOneDetail$Outbound` instead. */
  export type Outbound = PipelinesOneDetail$Outbound;
}

export function pipelinesOneDetailToJSON(
  pipelinesOneDetail: PipelinesOneDetail,
): string {
  return JSON.stringify(
    PipelinesOneDetail$outboundSchema.parse(pipelinesOneDetail),
  );
}

export function pipelinesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOneDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesOneResponseBody$inboundSchema: z.ZodType<
  PipelinesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesOneResponseBody(remapped);
  });

/** @internal */
export type PipelinesOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesOneResponseBody$outboundSchema: z.ZodType<
  PipelinesOneResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesOneResponseBody
> = z.instanceof(PipelinesOneResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneResponseBody$ {
  /** @deprecated use `PipelinesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneResponseBody$inboundSchema;
  /** @deprecated use `PipelinesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneResponseBody$outboundSchema;
  /** @deprecated use `PipelinesOneResponseBody$Outbound` instead. */
  export type Outbound = PipelinesOneResponseBody$Outbound;
}
