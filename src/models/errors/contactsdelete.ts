/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsDeleteContactsResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type ContactsDeleteContactsResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class ContactsDeleteContactsResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsDeleteContactsResponse422ResponseBodyData;

  constructor(err: ContactsDeleteContactsResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsDeleteContactsResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsDeleteContactsResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type ContactsDeleteContactsResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class ContactsDeleteContactsResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsDeleteContactsResponse404ResponseBodyData;

  constructor(err: ContactsDeleteContactsResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsDeleteContactsResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type ContactsDeleteContactsResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class ContactsDeleteContactsResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsDeleteContactsResponseResponseBodyData;

  constructor(err: ContactsDeleteContactsResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsDeleteContactsResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsDeleteContactsDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type ContactsDeleteContactsResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class ContactsDeleteContactsResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsDeleteContactsResponseBodyData;

  constructor(err: ContactsDeleteContactsResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsDeleteContactsResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsDeleteDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type ContactsDeleteResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class ContactsDeleteResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ContactsDeleteResponseBodyData;

  constructor(err: ContactsDeleteResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "ContactsDeleteResponseBody";
  }
}

/** @internal */
export const ContactsDeleteContactsResponse422Detail$inboundSchema: z.ZodType<
  ContactsDeleteContactsResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsDeleteContactsResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsDeleteContactsResponse422Detail$outboundSchema: z.ZodType<
  ContactsDeleteContactsResponse422Detail$Outbound,
  z.ZodTypeDef,
  ContactsDeleteContactsResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteContactsResponse422Detail$ {
  /** @deprecated use `ContactsDeleteContactsResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    ContactsDeleteContactsResponse422Detail$inboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    ContactsDeleteContactsResponse422Detail$outboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponse422Detail$Outbound` instead. */
  export type Outbound = ContactsDeleteContactsResponse422Detail$Outbound;
}

export function contactsDeleteContactsResponse422DetailToJSON(
  contactsDeleteContactsResponse422Detail:
    ContactsDeleteContactsResponse422Detail,
): string {
  return JSON.stringify(
    ContactsDeleteContactsResponse422Detail$outboundSchema.parse(
      contactsDeleteContactsResponse422Detail,
    ),
  );
}

export function contactsDeleteContactsResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  ContactsDeleteContactsResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ContactsDeleteContactsResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ContactsDeleteContactsResponse422Detail' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteContactsResponse422ResponseBody$inboundSchema:
  z.ZodType<
    ContactsDeleteContactsResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ContactsDeleteContactsResponse422ResponseBody(remapped);
    });

/** @internal */
export type ContactsDeleteContactsResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsDeleteContactsResponse422ResponseBody$outboundSchema:
  z.ZodType<
    ContactsDeleteContactsResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsDeleteContactsResponse422ResponseBody
  > = z.instanceof(ContactsDeleteContactsResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteContactsResponse422ResponseBody$ {
  /** @deprecated use `ContactsDeleteContactsResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsDeleteContactsResponse422ResponseBody$inboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsDeleteContactsResponse422ResponseBody$outboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponse422ResponseBody$Outbound` instead. */
  export type Outbound = ContactsDeleteContactsResponse422ResponseBody$Outbound;
}

/** @internal */
export const ContactsDeleteContactsResponseDetail$inboundSchema: z.ZodType<
  ContactsDeleteContactsResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsDeleteContactsResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsDeleteContactsResponseDetail$outboundSchema: z.ZodType<
  ContactsDeleteContactsResponseDetail$Outbound,
  z.ZodTypeDef,
  ContactsDeleteContactsResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteContactsResponseDetail$ {
  /** @deprecated use `ContactsDeleteContactsResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    ContactsDeleteContactsResponseDetail$inboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    ContactsDeleteContactsResponseDetail$outboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponseDetail$Outbound` instead. */
  export type Outbound = ContactsDeleteContactsResponseDetail$Outbound;
}

export function contactsDeleteContactsResponseDetailToJSON(
  contactsDeleteContactsResponseDetail: ContactsDeleteContactsResponseDetail,
): string {
  return JSON.stringify(
    ContactsDeleteContactsResponseDetail$outboundSchema.parse(
      contactsDeleteContactsResponseDetail,
    ),
  );
}

export function contactsDeleteContactsResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteContactsResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContactsDeleteContactsResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteContactsResponseDetail' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteContactsResponse404ResponseBody$inboundSchema:
  z.ZodType<
    ContactsDeleteContactsResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new ContactsDeleteContactsResponse404ResponseBody(remapped);
    });

/** @internal */
export type ContactsDeleteContactsResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsDeleteContactsResponse404ResponseBody$outboundSchema:
  z.ZodType<
    ContactsDeleteContactsResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsDeleteContactsResponse404ResponseBody
  > = z.instanceof(ContactsDeleteContactsResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteContactsResponse404ResponseBody$ {
  /** @deprecated use `ContactsDeleteContactsResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsDeleteContactsResponse404ResponseBody$inboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsDeleteContactsResponse404ResponseBody$outboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponse404ResponseBody$Outbound` instead. */
  export type Outbound = ContactsDeleteContactsResponse404ResponseBody$Outbound;
}

/** @internal */
export const ContactsDeleteContactsResponseResponseBody$inboundSchema:
  z.ZodType<ContactsDeleteContactsResponseResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      status_code: z.number().optional(),
      error: z.string().optional(),
      type_name: z.string().optional(),
      message: z.string().optional(),
      detail: z.string().optional(),
      ref: z.string().optional(),
    })
      .transform((v) => {
        const remapped = remap$(v, {
          "status_code": "statusCode",
          "type_name": "typeName",
        });

        return new ContactsDeleteContactsResponseResponseBody(remapped);
      });

/** @internal */
export type ContactsDeleteContactsResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsDeleteContactsResponseResponseBody$outboundSchema:
  z.ZodType<
    ContactsDeleteContactsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    ContactsDeleteContactsResponseResponseBody
  > = z.instanceof(ContactsDeleteContactsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteContactsResponseResponseBody$ {
  /** @deprecated use `ContactsDeleteContactsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ContactsDeleteContactsResponseResponseBody$inboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsDeleteContactsResponseResponseBody$outboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponseResponseBody$Outbound` instead. */
  export type Outbound = ContactsDeleteContactsResponseResponseBody$Outbound;
}

/** @internal */
export const ContactsDeleteContactsDetail$inboundSchema: z.ZodType<
  ContactsDeleteContactsDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsDeleteContactsDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const ContactsDeleteContactsDetail$outboundSchema: z.ZodType<
  ContactsDeleteContactsDetail$Outbound,
  z.ZodTypeDef,
  ContactsDeleteContactsDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteContactsDetail$ {
  /** @deprecated use `ContactsDeleteContactsDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteContactsDetail$inboundSchema;
  /** @deprecated use `ContactsDeleteContactsDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteContactsDetail$outboundSchema;
  /** @deprecated use `ContactsDeleteContactsDetail$Outbound` instead. */
  export type Outbound = ContactsDeleteContactsDetail$Outbound;
}

export function contactsDeleteContactsDetailToJSON(
  contactsDeleteContactsDetail: ContactsDeleteContactsDetail,
): string {
  return JSON.stringify(
    ContactsDeleteContactsDetail$outboundSchema.parse(
      contactsDeleteContactsDetail,
    ),
  );
}

export function contactsDeleteContactsDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteContactsDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteContactsDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteContactsDetail' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteContactsResponseBody$inboundSchema: z.ZodType<
  ContactsDeleteContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsDeleteContactsResponseBody(remapped);
  });

/** @internal */
export type ContactsDeleteContactsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsDeleteContactsResponseBody$outboundSchema: z.ZodType<
  ContactsDeleteContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsDeleteContactsResponseBody
> = z.instanceof(ContactsDeleteContactsResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteContactsResponseBody$ {
  /** @deprecated use `ContactsDeleteContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteContactsResponseBody$inboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsDeleteContactsResponseBody$outboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponseBody$Outbound` instead. */
  export type Outbound = ContactsDeleteContactsResponseBody$Outbound;
}

/** @internal */
export const ContactsDeleteDetail$inboundSchema: z.ZodType<
  ContactsDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsDeleteDetail$outboundSchema: z.ZodType<
  ContactsDeleteDetail$Outbound,
  z.ZodTypeDef,
  ContactsDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteDetail$ {
  /** @deprecated use `ContactsDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteDetail$inboundSchema;
  /** @deprecated use `ContactsDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteDetail$outboundSchema;
  /** @deprecated use `ContactsDeleteDetail$Outbound` instead. */
  export type Outbound = ContactsDeleteDetail$Outbound;
}

export function contactsDeleteDetailToJSON(
  contactsDeleteDetail: ContactsDeleteDetail,
): string {
  return JSON.stringify(
    ContactsDeleteDetail$outboundSchema.parse(contactsDeleteDetail),
  );
}

export function contactsDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteDetail' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteResponseBody$inboundSchema: z.ZodType<
  ContactsDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new ContactsDeleteResponseBody(remapped);
  });

/** @internal */
export type ContactsDeleteResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsDeleteResponseBody$outboundSchema: z.ZodType<
  ContactsDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsDeleteResponseBody
> = z.instanceof(ContactsDeleteResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteResponseBody$ {
  /** @deprecated use `ContactsDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteResponseBody$inboundSchema;
  /** @deprecated use `ContactsDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteResponseBody$outboundSchema;
  /** @deprecated use `ContactsDeleteResponseBody$Outbound` instead. */
  export type Outbound = ContactsDeleteResponseBody$Outbound;
}
