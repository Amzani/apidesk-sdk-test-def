/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesAddHrisCompaniesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type HrisCompaniesAddHrisCompaniesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unprocessable
 */
export class HrisCompaniesAddHrisCompaniesResponse422ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesAddHrisCompaniesResponse422ResponseBodyData;

  constructor(err: HrisCompaniesAddHrisCompaniesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesAddHrisCompaniesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesAddHrisCompaniesResponseDetail = string | {
  [k: string]: any;
};

/**
 * The specified resource was not found
 */
export type HrisCompaniesAddHrisCompaniesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * The specified resource was not found
 */
export class HrisCompaniesAddHrisCompaniesResponse404ResponseBody
  extends Error
{
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesAddHrisCompaniesResponse404ResponseBodyData;

  constructor(err: HrisCompaniesAddHrisCompaniesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesAddHrisCompaniesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type HrisCompaniesAddHrisCompaniesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Payment Required
 */
export class HrisCompaniesAddHrisCompaniesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesAddHrisCompaniesResponseResponseBodyData;

  constructor(err: HrisCompaniesAddHrisCompaniesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesAddHrisCompaniesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesAddHrisCompaniesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type HrisCompaniesAddHrisCompaniesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class HrisCompaniesAddHrisCompaniesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesAddHrisCompaniesResponseBodyData;

  constructor(err: HrisCompaniesAddHrisCompaniesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesAddHrisCompaniesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesAddDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type HrisCompaniesAddResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class HrisCompaniesAddResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
  httpMeta: components.HTTPMetadata;

  /** The original data that was passed to this error instance. */
  data$: HrisCompaniesAddResponseBodyData;

  constructor(err: HrisCompaniesAddResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;
    this.httpMeta = err.httpMeta;

    this.name = "HrisCompaniesAddResponseBody";
  }
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponse422Detail$inboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponse422Detail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesAddHrisCompaniesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponse422Detail$outboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponse422Detail$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAddHrisCompaniesResponse422Detail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesResponse422Detail$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAddHrisCompaniesResponse422Detail$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesResponse422Detail$outboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponse422Detail$Outbound` instead. */
  export type Outbound =
    HrisCompaniesAddHrisCompaniesResponse422Detail$Outbound;
}

export function hrisCompaniesAddHrisCompaniesResponse422DetailToJSON(
  hrisCompaniesAddHrisCompaniesResponse422Detail:
    HrisCompaniesAddHrisCompaniesResponse422Detail,
): string {
  return JSON.stringify(
    HrisCompaniesAddHrisCompaniesResponse422Detail$outboundSchema.parse(
      hrisCompaniesAddHrisCompaniesResponse422Detail,
    ),
  );
}

export function hrisCompaniesAddHrisCompaniesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesAddHrisCompaniesResponse422Detail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesAddHrisCompaniesResponse422Detail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesAddHrisCompaniesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesAddHrisCompaniesResponse422ResponseBody(remapped);
    });

/** @internal */
export type HrisCompaniesAddHrisCompaniesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAddHrisCompaniesResponse422ResponseBody
  > = z.instanceof(HrisCompaniesAddHrisCompaniesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesResponse422ResponseBody$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAddHrisCompaniesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponse422ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesAddHrisCompaniesResponse422ResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponseDetail$inboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponseDetail,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesAddHrisCompaniesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponseDetail$outboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponseDetail$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAddHrisCompaniesResponseDetail
  > = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesResponseDetail$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAddHrisCompaniesResponseDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesResponseDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesAddHrisCompaniesResponseDetail$Outbound;
}

export function hrisCompaniesAddHrisCompaniesResponseDetailToJSON(
  hrisCompaniesAddHrisCompaniesResponseDetail:
    HrisCompaniesAddHrisCompaniesResponseDetail,
): string {
  return JSON.stringify(
    HrisCompaniesAddHrisCompaniesResponseDetail$outboundSchema.parse(
      hrisCompaniesAddHrisCompaniesResponseDetail,
    ),
  );
}

export function hrisCompaniesAddHrisCompaniesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesAddHrisCompaniesResponseDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesAddHrisCompaniesResponseDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesAddHrisCompaniesResponseDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesAddHrisCompaniesResponse404ResponseBody(remapped);
    });

/** @internal */
export type HrisCompaniesAddHrisCompaniesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAddHrisCompaniesResponse404ResponseBody
  > = z.instanceof(HrisCompaniesAddHrisCompaniesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesResponse404ResponseBody$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAddHrisCompaniesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponse404ResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesAddHrisCompaniesResponse404ResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponseResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.string().optional(),
    ref: z.string().optional(),
    HttpMeta: components.HTTPMetadata$inboundSchema,
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
        "HttpMeta": "httpMeta",
      });

      return new HrisCompaniesAddHrisCompaniesResponseResponseBody(remapped);
    });

/** @internal */
export type HrisCompaniesAddHrisCompaniesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponseResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAddHrisCompaniesResponseResponseBody
  > = z.instanceof(HrisCompaniesAddHrisCompaniesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesResponseResponseBody$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAddHrisCompaniesResponseResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesResponseResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    HrisCompaniesAddHrisCompaniesResponseResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesDetail$inboundSchema: z.ZodType<
  HrisCompaniesAddHrisCompaniesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesAddHrisCompaniesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisCompaniesAddHrisCompaniesDetail$outboundSchema: z.ZodType<
  HrisCompaniesAddHrisCompaniesDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddHrisCompaniesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesDetail$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesDetail$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAddHrisCompaniesDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesDetail$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesAddHrisCompaniesDetail$Outbound;
}

export function hrisCompaniesAddHrisCompaniesDetailToJSON(
  hrisCompaniesAddHrisCompaniesDetail: HrisCompaniesAddHrisCompaniesDetail,
): string {
  return JSON.stringify(
    HrisCompaniesAddHrisCompaniesDetail$outboundSchema.parse(
      hrisCompaniesAddHrisCompaniesDetail,
    ),
  );
}

export function hrisCompaniesAddHrisCompaniesDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddHrisCompaniesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesAddHrisCompaniesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddHrisCompaniesDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesAddHrisCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisCompaniesAddHrisCompaniesResponseBody(remapped);
  });

/** @internal */
export type HrisCompaniesAddHrisCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAddHrisCompaniesResponseBody
  > = z.instanceof(HrisCompaniesAddHrisCompaniesResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
        httpMeta: components.HTTPMetadata$outboundSchema,
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
          httpMeta: "HttpMeta",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesResponseBody$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAddHrisCompaniesResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesAddHrisCompaniesResponseBody$Outbound;
}

/** @internal */
export const HrisCompaniesAddDetail$inboundSchema: z.ZodType<
  HrisCompaniesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisCompaniesAddDetail$outboundSchema: z.ZodType<
  HrisCompaniesAddDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddDetail$ {
  /** @deprecated use `HrisCompaniesAddDetail$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesAddDetail$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesAddDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesAddDetail$Outbound;
}

export function hrisCompaniesAddDetailToJSON(
  hrisCompaniesAddDetail: HrisCompaniesAddDetail,
): string {
  return JSON.stringify(
    HrisCompaniesAddDetail$outboundSchema.parse(hrisCompaniesAddDetail),
  );
}

export function hrisCompaniesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
  HttpMeta: components.HTTPMetadata$inboundSchema,
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
      "HttpMeta": "httpMeta",
    });

    return new HrisCompaniesAddResponseBody(remapped);
  });

/** @internal */
export type HrisCompaniesAddResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
  HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const HrisCompaniesAddResponseBody$outboundSchema: z.ZodType<
  HrisCompaniesAddResponseBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddResponseBody
> = z.instanceof(HrisCompaniesAddResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
      httpMeta: components.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddResponseBody$ {
  /** @deprecated use `HrisCompaniesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAddResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesAddResponseBody$Outbound;
}
