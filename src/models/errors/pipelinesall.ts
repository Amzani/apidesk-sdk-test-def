/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesAllPipelinesResponse422Detail = string | {
  [k: string]: any;
};

/**
 * Unprocessable
 */
export type PipelinesAllPipelinesResponse422ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unprocessable
 */
export class PipelinesAllPipelinesResponse422ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesAllPipelinesResponse422ResponseBodyData;

  constructor(err: PipelinesAllPipelinesResponse422ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesAllPipelinesResponse422ResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesAllPipelinesResponseDetail = string | { [k: string]: any };

/**
 * The specified resource was not found
 */
export type PipelinesAllPipelinesResponse404ResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The specified resource was not found
 */
export class PipelinesAllPipelinesResponse404ResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesAllPipelinesResponse404ResponseBodyData;

  constructor(err: PipelinesAllPipelinesResponse404ResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesAllPipelinesResponse404ResponseBody";
  }
}

/**
 * Payment Required
 */
export type PipelinesAllPipelinesResponseResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Payment Required
 */
export class PipelinesAllPipelinesResponseResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesAllPipelinesResponseResponseBodyData;

  constructor(err: PipelinesAllPipelinesResponseResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesAllPipelinesResponseResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesAllPipelinesDetail = string | { [k: string]: any };

/**
 * Unauthorized
 */
export type PipelinesAllPipelinesResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Unauthorized
 */
export class PipelinesAllPipelinesResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesAllPipelinesResponseBodyData;

  constructor(err: PipelinesAllPipelinesResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesAllPipelinesResponseBody";
  }
}

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesAllDetail = string | { [k: string]: any };

/**
 * Bad Request
 */
export type PipelinesAllResponseBodyData = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Bad Request
 */
export class PipelinesAllResponseBody extends Error {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PipelinesAllResponseBodyData;

  constructor(err: PipelinesAllResponseBodyData) {
    const message = err.message || "API error occurred";
    super(message);
    this.data$ = err;

    if (err.statusCode != null) this.statusCode = err.statusCode;
    if (err.error != null) this.error = err.error;
    if (err.typeName != null) this.typeName = err.typeName;
    if (err.detail != null) this.detail = err.detail;
    if (err.ref != null) this.ref = err.ref;

    this.name = "PipelinesAllResponseBody";
  }
}

/** @internal */
export const PipelinesAllPipelinesResponse422Detail$inboundSchema: z.ZodType<
  PipelinesAllPipelinesResponse422Detail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesAllPipelinesResponse422Detail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesAllPipelinesResponse422Detail$outboundSchema: z.ZodType<
  PipelinesAllPipelinesResponse422Detail$Outbound,
  z.ZodTypeDef,
  PipelinesAllPipelinesResponse422Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllPipelinesResponse422Detail$ {
  /** @deprecated use `PipelinesAllPipelinesResponse422Detail$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesAllPipelinesResponse422Detail$inboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponse422Detail$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAllPipelinesResponse422Detail$outboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponse422Detail$Outbound` instead. */
  export type Outbound = PipelinesAllPipelinesResponse422Detail$Outbound;
}

export function pipelinesAllPipelinesResponse422DetailToJSON(
  pipelinesAllPipelinesResponse422Detail:
    PipelinesAllPipelinesResponse422Detail,
): string {
  return JSON.stringify(
    PipelinesAllPipelinesResponse422Detail$outboundSchema.parse(
      pipelinesAllPipelinesResponse422Detail,
    ),
  );
}

export function pipelinesAllPipelinesResponse422DetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllPipelinesResponse422Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesAllPipelinesResponse422Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllPipelinesResponse422Detail' from JSON`,
  );
}

/** @internal */
export const PipelinesAllPipelinesResponse422ResponseBody$inboundSchema:
  z.ZodType<
    PipelinesAllPipelinesResponse422ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesAllPipelinesResponse422ResponseBody(remapped);
    });

/** @internal */
export type PipelinesAllPipelinesResponse422ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAllPipelinesResponse422ResponseBody$outboundSchema:
  z.ZodType<
    PipelinesAllPipelinesResponse422ResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesAllPipelinesResponse422ResponseBody
  > = z.instanceof(PipelinesAllPipelinesResponse422ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllPipelinesResponse422ResponseBody$ {
  /** @deprecated use `PipelinesAllPipelinesResponse422ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesAllPipelinesResponse422ResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponse422ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAllPipelinesResponse422ResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponse422ResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAllPipelinesResponse422ResponseBody$Outbound;
}

/** @internal */
export const PipelinesAllPipelinesResponseDetail$inboundSchema: z.ZodType<
  PipelinesAllPipelinesResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesAllPipelinesResponseDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesAllPipelinesResponseDetail$outboundSchema: z.ZodType<
  PipelinesAllPipelinesResponseDetail$Outbound,
  z.ZodTypeDef,
  PipelinesAllPipelinesResponseDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllPipelinesResponseDetail$ {
  /** @deprecated use `PipelinesAllPipelinesResponseDetail$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesAllPipelinesResponseDetail$inboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponseDetail$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAllPipelinesResponseDetail$outboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponseDetail$Outbound` instead. */
  export type Outbound = PipelinesAllPipelinesResponseDetail$Outbound;
}

export function pipelinesAllPipelinesResponseDetailToJSON(
  pipelinesAllPipelinesResponseDetail: PipelinesAllPipelinesResponseDetail,
): string {
  return JSON.stringify(
    PipelinesAllPipelinesResponseDetail$outboundSchema.parse(
      pipelinesAllPipelinesResponseDetail,
    ),
  );
}

export function pipelinesAllPipelinesResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllPipelinesResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesAllPipelinesResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllPipelinesResponseDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesAllPipelinesResponse404ResponseBody$inboundSchema:
  z.ZodType<
    PipelinesAllPipelinesResponse404ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "status_code": "statusCode",
        "type_name": "typeName",
      });

      return new PipelinesAllPipelinesResponse404ResponseBody(remapped);
    });

/** @internal */
export type PipelinesAllPipelinesResponse404ResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAllPipelinesResponse404ResponseBody$outboundSchema:
  z.ZodType<
    PipelinesAllPipelinesResponse404ResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesAllPipelinesResponse404ResponseBody
  > = z.instanceof(PipelinesAllPipelinesResponse404ResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.union([z.string(), z.record(z.any())]).optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllPipelinesResponse404ResponseBody$ {
  /** @deprecated use `PipelinesAllPipelinesResponse404ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesAllPipelinesResponse404ResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponse404ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAllPipelinesResponse404ResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponse404ResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAllPipelinesResponse404ResponseBody$Outbound;
}

/** @internal */
export const PipelinesAllPipelinesResponseResponseBody$inboundSchema: z.ZodType<
  PipelinesAllPipelinesResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.string().optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesAllPipelinesResponseResponseBody(remapped);
  });

/** @internal */
export type PipelinesAllPipelinesResponseResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAllPipelinesResponseResponseBody$outboundSchema:
  z.ZodType<
    PipelinesAllPipelinesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    PipelinesAllPipelinesResponseResponseBody
  > = z.instanceof(PipelinesAllPipelinesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(
      z.object({
        statusCode: z.number().optional(),
        error: z.string().optional(),
        typeName: z.string().optional(),
        message: z.string().optional(),
        detail: z.string().optional(),
        ref: z.string().optional(),
      }).transform((v) => {
        return remap$(v, {
          statusCode: "status_code",
          typeName: "type_name",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllPipelinesResponseResponseBody$ {
  /** @deprecated use `PipelinesAllPipelinesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesAllPipelinesResponseResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAllPipelinesResponseResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponseResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAllPipelinesResponseResponseBody$Outbound;
}

/** @internal */
export const PipelinesAllPipelinesDetail$inboundSchema: z.ZodType<
  PipelinesAllPipelinesDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesAllPipelinesDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const PipelinesAllPipelinesDetail$outboundSchema: z.ZodType<
  PipelinesAllPipelinesDetail$Outbound,
  z.ZodTypeDef,
  PipelinesAllPipelinesDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllPipelinesDetail$ {
  /** @deprecated use `PipelinesAllPipelinesDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllPipelinesDetail$inboundSchema;
  /** @deprecated use `PipelinesAllPipelinesDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllPipelinesDetail$outboundSchema;
  /** @deprecated use `PipelinesAllPipelinesDetail$Outbound` instead. */
  export type Outbound = PipelinesAllPipelinesDetail$Outbound;
}

export function pipelinesAllPipelinesDetailToJSON(
  pipelinesAllPipelinesDetail: PipelinesAllPipelinesDetail,
): string {
  return JSON.stringify(
    PipelinesAllPipelinesDetail$outboundSchema.parse(
      pipelinesAllPipelinesDetail,
    ),
  );
}

export function pipelinesAllPipelinesDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllPipelinesDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllPipelinesDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllPipelinesDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesAllPipelinesResponseBody$inboundSchema: z.ZodType<
  PipelinesAllPipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesAllPipelinesResponseBody(remapped);
  });

/** @internal */
export type PipelinesAllPipelinesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAllPipelinesResponseBody$outboundSchema: z.ZodType<
  PipelinesAllPipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesAllPipelinesResponseBody
> = z.instanceof(PipelinesAllPipelinesResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllPipelinesResponseBody$ {
  /** @deprecated use `PipelinesAllPipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllPipelinesResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAllPipelinesResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAllPipelinesResponseBody$Outbound;
}

/** @internal */
export const PipelinesAllDetail$inboundSchema: z.ZodType<
  PipelinesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const PipelinesAllDetail$outboundSchema: z.ZodType<
  PipelinesAllDetail$Outbound,
  z.ZodTypeDef,
  PipelinesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllDetail$ {
  /** @deprecated use `PipelinesAllDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllDetail$inboundSchema;
  /** @deprecated use `PipelinesAllDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllDetail$outboundSchema;
  /** @deprecated use `PipelinesAllDetail$Outbound` instead. */
  export type Outbound = PipelinesAllDetail$Outbound;
}

export function pipelinesAllDetailToJSON(
  pipelinesAllDetail: PipelinesAllDetail,
): string {
  return JSON.stringify(
    PipelinesAllDetail$outboundSchema.parse(pipelinesAllDetail),
  );
}

export function pipelinesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesAllResponseBody$inboundSchema: z.ZodType<
  PipelinesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });

    return new PipelinesAllResponseBody(remapped);
  });

/** @internal */
export type PipelinesAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAllResponseBody$outboundSchema: z.ZodType<
  PipelinesAllResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesAllResponseBody
> = z.instanceof(PipelinesAllResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      statusCode: z.number().optional(),
      error: z.string().optional(),
      typeName: z.string().optional(),
      message: z.string().optional(),
      detail: z.union([z.string(), z.record(z.any())]).optional(),
      ref: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        statusCode: "status_code",
        typeName: "type_name",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllResponseBody$ {
  /** @deprecated use `PipelinesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAllResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAllResponseBody$Outbound;
}
