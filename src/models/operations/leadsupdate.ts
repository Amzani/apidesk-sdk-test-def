/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LeadsUpdateSecurity = {
  apiKey: string;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const LeadsUpdateCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type LeadsUpdateCurrency = ClosedEnum<typeof LeadsUpdateCurrency>;

/**
 * The type of website
 */
export const LeadsUpdateType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type LeadsUpdateType = ClosedEnum<typeof LeadsUpdateType>;

export type LeadsUpdateWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: LeadsUpdateType | null | undefined;
};

/**
 * The type of address.
 */
export const LeadsUpdateLeadsType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type LeadsUpdateLeadsType = ClosedEnum<typeof LeadsUpdateLeadsType>;

export type LeadsUpdateAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: LeadsUpdateLeadsType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type LeadsUpdateSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const LeadsUpdateLeadsRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type LeadsUpdateLeadsRequestType = ClosedEnum<
  typeof LeadsUpdateLeadsRequestType
>;

export type LeadsUpdatePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: LeadsUpdateLeadsRequestType | null | undefined;
};

/**
 * Email type
 */
export const LeadsUpdateLeadsRequestRequestBodyType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type LeadsUpdateLeadsRequestRequestBodyType = ClosedEnum<
  typeof LeadsUpdateLeadsRequestRequestBodyType
>;

export type LeadsUpdateEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: LeadsUpdateLeadsRequestRequestBodyType | null | undefined;
};

export type LeadsUpdateValue6 = {};

export type LeadsUpdateValue4 = {};

export type LeadsUpdateValue =
  | LeadsUpdateValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadsUpdateValue6>;

export type LeadsUpdateCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | LeadsUpdateValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadsUpdateValue6>
    | null
    | undefined;
};

export type LeadsUpdateExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type LeadsUpdatePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<LeadsUpdateExtendPaths> | undefined;
};

export type LeadsUpdateRequestBody = {
  /**
   * Full name of the lead.
   */
  name: string;
  /**
   * The name of the company the lead is associated with.
   */
  companyName: string | null;
  /**
   * The owner of the lead.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the owner of the lead.
   */
  ownerName?: string | null | undefined;
  /**
   * The company the lead is associated with.
   */
  companyId?: string | null | undefined;
  /**
   * The identifier of the lead.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead.
   */
  lastName?: string | null | undefined;
  /**
   * The description of the lead.
   */
  description?: string | null | undefined;
  /**
   * The prefix of the lead.
   */
  prefix?: string | null | undefined;
  /**
   * The job title of the lead.
   */
  title?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  status?: string | null | undefined;
  /**
   * The monetary amount of the lead.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: LeadsUpdateCurrency | null | undefined;
  /**
   * The fax number of the lead.
   */
  fax?: string | null | undefined;
  websites?: Array<LeadsUpdateWebsites> | undefined;
  addresses?: Array<LeadsUpdateAddresses> | undefined;
  socialLinks?: Array<LeadsUpdateSocialLinks> | undefined;
  phoneNumbers?: Array<LeadsUpdatePhoneNumbers> | undefined;
  emails?: Array<LeadsUpdateEmails> | undefined;
  customFields?: Array<LeadsUpdateCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<LeadsUpdatePassThrough> | undefined;
};

export type LeadsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  requestBody: LeadsUpdateRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsUpdateDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type LeadsUpdateLeadsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type LeadsUpdateUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Lead updated
 */
export type LeadsUpdateResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: LeadsUpdateUnifiedId;
};

export type LeadsUpdateResponse =
  | LeadsUpdateResponseBody
  | LeadsUpdateLeadsResponseBody;

/** @internal */
export const LeadsUpdateSecurity$inboundSchema: z.ZodType<
  LeadsUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type LeadsUpdateSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const LeadsUpdateSecurity$outboundSchema: z.ZodType<
  LeadsUpdateSecurity$Outbound,
  z.ZodTypeDef,
  LeadsUpdateSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateSecurity$ {
  /** @deprecated use `LeadsUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateSecurity$inboundSchema;
  /** @deprecated use `LeadsUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateSecurity$outboundSchema;
  /** @deprecated use `LeadsUpdateSecurity$Outbound` instead. */
  export type Outbound = LeadsUpdateSecurity$Outbound;
}

export function leadsUpdateSecurityToJSON(
  leadsUpdateSecurity: LeadsUpdateSecurity,
): string {
  return JSON.stringify(
    LeadsUpdateSecurity$outboundSchema.parse(leadsUpdateSecurity),
  );
}

export function leadsUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateCurrency$inboundSchema: z.ZodNativeEnum<
  typeof LeadsUpdateCurrency
> = z.nativeEnum(LeadsUpdateCurrency);

/** @internal */
export const LeadsUpdateCurrency$outboundSchema: z.ZodNativeEnum<
  typeof LeadsUpdateCurrency
> = LeadsUpdateCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateCurrency$ {
  /** @deprecated use `LeadsUpdateCurrency$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateCurrency$inboundSchema;
  /** @deprecated use `LeadsUpdateCurrency$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateCurrency$outboundSchema;
}

/** @internal */
export const LeadsUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof LeadsUpdateType
> = z.nativeEnum(LeadsUpdateType);

/** @internal */
export const LeadsUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof LeadsUpdateType
> = LeadsUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateType$ {
  /** @deprecated use `LeadsUpdateType$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateType$inboundSchema;
  /** @deprecated use `LeadsUpdateType$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateType$outboundSchema;
}

/** @internal */
export const LeadsUpdateWebsites$inboundSchema: z.ZodType<
  LeadsUpdateWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadsUpdateType$inboundSchema).optional(),
});

/** @internal */
export type LeadsUpdateWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsUpdateWebsites$outboundSchema: z.ZodType<
  LeadsUpdateWebsites$Outbound,
  z.ZodTypeDef,
  LeadsUpdateWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadsUpdateType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateWebsites$ {
  /** @deprecated use `LeadsUpdateWebsites$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateWebsites$inboundSchema;
  /** @deprecated use `LeadsUpdateWebsites$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateWebsites$outboundSchema;
  /** @deprecated use `LeadsUpdateWebsites$Outbound` instead. */
  export type Outbound = LeadsUpdateWebsites$Outbound;
}

export function leadsUpdateWebsitesToJSON(
  leadsUpdateWebsites: LeadsUpdateWebsites,
): string {
  return JSON.stringify(
    LeadsUpdateWebsites$outboundSchema.parse(leadsUpdateWebsites),
  );
}

export function leadsUpdateWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateWebsites' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateLeadsType$inboundSchema: z.ZodNativeEnum<
  typeof LeadsUpdateLeadsType
> = z.nativeEnum(LeadsUpdateLeadsType);

/** @internal */
export const LeadsUpdateLeadsType$outboundSchema: z.ZodNativeEnum<
  typeof LeadsUpdateLeadsType
> = LeadsUpdateLeadsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateLeadsType$ {
  /** @deprecated use `LeadsUpdateLeadsType$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateLeadsType$inboundSchema;
  /** @deprecated use `LeadsUpdateLeadsType$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateLeadsType$outboundSchema;
}

/** @internal */
export const LeadsUpdateAddresses$inboundSchema: z.ZodType<
  LeadsUpdateAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsUpdateLeadsType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type LeadsUpdateAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const LeadsUpdateAddresses$outboundSchema: z.ZodType<
  LeadsUpdateAddresses$Outbound,
  z.ZodTypeDef,
  LeadsUpdateAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsUpdateLeadsType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateAddresses$ {
  /** @deprecated use `LeadsUpdateAddresses$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateAddresses$inboundSchema;
  /** @deprecated use `LeadsUpdateAddresses$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateAddresses$outboundSchema;
  /** @deprecated use `LeadsUpdateAddresses$Outbound` instead. */
  export type Outbound = LeadsUpdateAddresses$Outbound;
}

export function leadsUpdateAddressesToJSON(
  leadsUpdateAddresses: LeadsUpdateAddresses,
): string {
  return JSON.stringify(
    LeadsUpdateAddresses$outboundSchema.parse(leadsUpdateAddresses),
  );
}

export function leadsUpdateAddressesFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateAddresses' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateSocialLinks$inboundSchema: z.ZodType<
  LeadsUpdateSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type LeadsUpdateSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsUpdateSocialLinks$outboundSchema: z.ZodType<
  LeadsUpdateSocialLinks$Outbound,
  z.ZodTypeDef,
  LeadsUpdateSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateSocialLinks$ {
  /** @deprecated use `LeadsUpdateSocialLinks$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateSocialLinks$inboundSchema;
  /** @deprecated use `LeadsUpdateSocialLinks$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateSocialLinks$outboundSchema;
  /** @deprecated use `LeadsUpdateSocialLinks$Outbound` instead. */
  export type Outbound = LeadsUpdateSocialLinks$Outbound;
}

export function leadsUpdateSocialLinksToJSON(
  leadsUpdateSocialLinks: LeadsUpdateSocialLinks,
): string {
  return JSON.stringify(
    LeadsUpdateSocialLinks$outboundSchema.parse(leadsUpdateSocialLinks),
  );
}

export function leadsUpdateSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateSocialLinks' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateLeadsRequestType$inboundSchema: z.ZodNativeEnum<
  typeof LeadsUpdateLeadsRequestType
> = z.nativeEnum(LeadsUpdateLeadsRequestType);

/** @internal */
export const LeadsUpdateLeadsRequestType$outboundSchema: z.ZodNativeEnum<
  typeof LeadsUpdateLeadsRequestType
> = LeadsUpdateLeadsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateLeadsRequestType$ {
  /** @deprecated use `LeadsUpdateLeadsRequestType$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateLeadsRequestType$inboundSchema;
  /** @deprecated use `LeadsUpdateLeadsRequestType$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateLeadsRequestType$outboundSchema;
}

/** @internal */
export const LeadsUpdatePhoneNumbers$inboundSchema: z.ZodType<
  LeadsUpdatePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsUpdateLeadsRequestType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type LeadsUpdatePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsUpdatePhoneNumbers$outboundSchema: z.ZodType<
  LeadsUpdatePhoneNumbers$Outbound,
  z.ZodTypeDef,
  LeadsUpdatePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsUpdateLeadsRequestType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdatePhoneNumbers$ {
  /** @deprecated use `LeadsUpdatePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdatePhoneNumbers$inboundSchema;
  /** @deprecated use `LeadsUpdatePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdatePhoneNumbers$outboundSchema;
  /** @deprecated use `LeadsUpdatePhoneNumbers$Outbound` instead. */
  export type Outbound = LeadsUpdatePhoneNumbers$Outbound;
}

export function leadsUpdatePhoneNumbersToJSON(
  leadsUpdatePhoneNumbers: LeadsUpdatePhoneNumbers,
): string {
  return JSON.stringify(
    LeadsUpdatePhoneNumbers$outboundSchema.parse(leadsUpdatePhoneNumbers),
  );
}

export function leadsUpdatePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdatePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdatePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdatePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateLeadsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof LeadsUpdateLeadsRequestRequestBodyType> = z.nativeEnum(
    LeadsUpdateLeadsRequestRequestBodyType,
  );

/** @internal */
export const LeadsUpdateLeadsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof LeadsUpdateLeadsRequestRequestBodyType> =
    LeadsUpdateLeadsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateLeadsRequestRequestBodyType$ {
  /** @deprecated use `LeadsUpdateLeadsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    LeadsUpdateLeadsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `LeadsUpdateLeadsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    LeadsUpdateLeadsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const LeadsUpdateEmails$inboundSchema: z.ZodType<
  LeadsUpdateEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadsUpdateLeadsRequestRequestBodyType$inboundSchema)
    .optional(),
});

/** @internal */
export type LeadsUpdateEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsUpdateEmails$outboundSchema: z.ZodType<
  LeadsUpdateEmails$Outbound,
  z.ZodTypeDef,
  LeadsUpdateEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadsUpdateLeadsRequestRequestBodyType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateEmails$ {
  /** @deprecated use `LeadsUpdateEmails$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateEmails$inboundSchema;
  /** @deprecated use `LeadsUpdateEmails$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateEmails$outboundSchema;
  /** @deprecated use `LeadsUpdateEmails$Outbound` instead. */
  export type Outbound = LeadsUpdateEmails$Outbound;
}

export function leadsUpdateEmailsToJSON(
  leadsUpdateEmails: LeadsUpdateEmails,
): string {
  return JSON.stringify(
    LeadsUpdateEmails$outboundSchema.parse(leadsUpdateEmails),
  );
}

export function leadsUpdateEmailsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateEmails' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateValue6$inboundSchema: z.ZodType<
  LeadsUpdateValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadsUpdateValue6$Outbound = {};

/** @internal */
export const LeadsUpdateValue6$outboundSchema: z.ZodType<
  LeadsUpdateValue6$Outbound,
  z.ZodTypeDef,
  LeadsUpdateValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateValue6$ {
  /** @deprecated use `LeadsUpdateValue6$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateValue6$inboundSchema;
  /** @deprecated use `LeadsUpdateValue6$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateValue6$outboundSchema;
  /** @deprecated use `LeadsUpdateValue6$Outbound` instead. */
  export type Outbound = LeadsUpdateValue6$Outbound;
}

export function leadsUpdateValue6ToJSON(
  leadsUpdateValue6: LeadsUpdateValue6,
): string {
  return JSON.stringify(
    LeadsUpdateValue6$outboundSchema.parse(leadsUpdateValue6),
  );
}

export function leadsUpdateValue6FromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateValue6' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateValue4$inboundSchema: z.ZodType<
  LeadsUpdateValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadsUpdateValue4$Outbound = {};

/** @internal */
export const LeadsUpdateValue4$outboundSchema: z.ZodType<
  LeadsUpdateValue4$Outbound,
  z.ZodTypeDef,
  LeadsUpdateValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateValue4$ {
  /** @deprecated use `LeadsUpdateValue4$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateValue4$inboundSchema;
  /** @deprecated use `LeadsUpdateValue4$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateValue4$outboundSchema;
  /** @deprecated use `LeadsUpdateValue4$Outbound` instead. */
  export type Outbound = LeadsUpdateValue4$Outbound;
}

export function leadsUpdateValue4ToJSON(
  leadsUpdateValue4: LeadsUpdateValue4,
): string {
  return JSON.stringify(
    LeadsUpdateValue4$outboundSchema.parse(leadsUpdateValue4),
  );
}

export function leadsUpdateValue4FromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateValue4' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateValue$inboundSchema: z.ZodType<
  LeadsUpdateValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadsUpdateValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadsUpdateValue6$inboundSchema)),
]);

/** @internal */
export type LeadsUpdateValue$Outbound =
  | LeadsUpdateValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadsUpdateValue6$Outbound>;

/** @internal */
export const LeadsUpdateValue$outboundSchema: z.ZodType<
  LeadsUpdateValue$Outbound,
  z.ZodTypeDef,
  LeadsUpdateValue
> = z.union([
  z.lazy(() => LeadsUpdateValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadsUpdateValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateValue$ {
  /** @deprecated use `LeadsUpdateValue$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateValue$inboundSchema;
  /** @deprecated use `LeadsUpdateValue$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateValue$outboundSchema;
  /** @deprecated use `LeadsUpdateValue$Outbound` instead. */
  export type Outbound = LeadsUpdateValue$Outbound;
}

export function leadsUpdateValueToJSON(
  leadsUpdateValue: LeadsUpdateValue,
): string {
  return JSON.stringify(
    LeadsUpdateValue$outboundSchema.parse(leadsUpdateValue),
  );
}

export function leadsUpdateValueFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateValue' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateCustomFields$inboundSchema: z.ZodType<
  LeadsUpdateCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadsUpdateValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadsUpdateValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type LeadsUpdateCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | LeadsUpdateValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadsUpdateValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const LeadsUpdateCustomFields$outboundSchema: z.ZodType<
  LeadsUpdateCustomFields$Outbound,
  z.ZodTypeDef,
  LeadsUpdateCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadsUpdateValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadsUpdateValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateCustomFields$ {
  /** @deprecated use `LeadsUpdateCustomFields$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateCustomFields$inboundSchema;
  /** @deprecated use `LeadsUpdateCustomFields$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateCustomFields$outboundSchema;
  /** @deprecated use `LeadsUpdateCustomFields$Outbound` instead. */
  export type Outbound = LeadsUpdateCustomFields$Outbound;
}

export function leadsUpdateCustomFieldsToJSON(
  leadsUpdateCustomFields: LeadsUpdateCustomFields,
): string {
  return JSON.stringify(
    LeadsUpdateCustomFields$outboundSchema.parse(leadsUpdateCustomFields),
  );
}

export function leadsUpdateCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateCustomFields' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateExtendPaths$inboundSchema: z.ZodType<
  LeadsUpdateExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type LeadsUpdateExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const LeadsUpdateExtendPaths$outboundSchema: z.ZodType<
  LeadsUpdateExtendPaths$Outbound,
  z.ZodTypeDef,
  LeadsUpdateExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateExtendPaths$ {
  /** @deprecated use `LeadsUpdateExtendPaths$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateExtendPaths$inboundSchema;
  /** @deprecated use `LeadsUpdateExtendPaths$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateExtendPaths$outboundSchema;
  /** @deprecated use `LeadsUpdateExtendPaths$Outbound` instead. */
  export type Outbound = LeadsUpdateExtendPaths$Outbound;
}

export function leadsUpdateExtendPathsToJSON(
  leadsUpdateExtendPaths: LeadsUpdateExtendPaths,
): string {
  return JSON.stringify(
    LeadsUpdateExtendPaths$outboundSchema.parse(leadsUpdateExtendPaths),
  );
}

export function leadsUpdateExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateExtendPaths' from JSON`,
  );
}

/** @internal */
export const LeadsUpdatePassThrough$inboundSchema: z.ZodType<
  LeadsUpdatePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => LeadsUpdateExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type LeadsUpdatePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<LeadsUpdateExtendPaths$Outbound> | undefined;
};

/** @internal */
export const LeadsUpdatePassThrough$outboundSchema: z.ZodType<
  LeadsUpdatePassThrough$Outbound,
  z.ZodTypeDef,
  LeadsUpdatePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => LeadsUpdateExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdatePassThrough$ {
  /** @deprecated use `LeadsUpdatePassThrough$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdatePassThrough$inboundSchema;
  /** @deprecated use `LeadsUpdatePassThrough$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdatePassThrough$outboundSchema;
  /** @deprecated use `LeadsUpdatePassThrough$Outbound` instead. */
  export type Outbound = LeadsUpdatePassThrough$Outbound;
}

export function leadsUpdatePassThroughToJSON(
  leadsUpdatePassThrough: LeadsUpdatePassThrough,
): string {
  return JSON.stringify(
    LeadsUpdatePassThrough$outboundSchema.parse(leadsUpdatePassThrough),
  );
}

export function leadsUpdatePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdatePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdatePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdatePassThrough' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateRequestBody$inboundSchema: z.ZodType<
  LeadsUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(LeadsUpdateCurrency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => LeadsUpdateWebsites$inboundSchema)).optional(),
  addresses: z.array(z.lazy(() => LeadsUpdateAddresses$inboundSchema))
    .optional(),
  social_links: z.array(z.lazy(() => LeadsUpdateSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(z.lazy(() => LeadsUpdatePhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => LeadsUpdateEmails$inboundSchema)).optional(),
  custom_fields: z.array(z.lazy(() => LeadsUpdateCustomFields$inboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  pass_through: z.array(z.lazy(() => LeadsUpdatePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type LeadsUpdateRequestBody$Outbound = {
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<LeadsUpdateWebsites$Outbound> | undefined;
  addresses?: Array<LeadsUpdateAddresses$Outbound> | undefined;
  social_links?: Array<LeadsUpdateSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<LeadsUpdatePhoneNumbers$Outbound> | undefined;
  emails?: Array<LeadsUpdateEmails$Outbound> | undefined;
  custom_fields?: Array<LeadsUpdateCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  pass_through?: Array<LeadsUpdatePassThrough$Outbound> | undefined;
};

/** @internal */
export const LeadsUpdateRequestBody$outboundSchema: z.ZodType<
  LeadsUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  LeadsUpdateRequestBody
> = z.object({
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(LeadsUpdateCurrency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => LeadsUpdateWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => LeadsUpdateAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(z.lazy(() => LeadsUpdateSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => LeadsUpdatePhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => LeadsUpdateEmails$outboundSchema)).optional(),
  customFields: z.array(z.lazy(() => LeadsUpdateCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  passThrough: z.array(z.lazy(() => LeadsUpdatePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateRequestBody$ {
  /** @deprecated use `LeadsUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateRequestBody$inboundSchema;
  /** @deprecated use `LeadsUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateRequestBody$outboundSchema;
  /** @deprecated use `LeadsUpdateRequestBody$Outbound` instead. */
  export type Outbound = LeadsUpdateRequestBody$Outbound;
}

export function leadsUpdateRequestBodyToJSON(
  leadsUpdateRequestBody: LeadsUpdateRequestBody,
): string {
  return JSON.stringify(
    LeadsUpdateRequestBody$outboundSchema.parse(leadsUpdateRequestBody),
  );
}

export function leadsUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateRequest$inboundSchema: z.ZodType<
  LeadsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  RequestBody: z.lazy(() => LeadsUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type LeadsUpdateRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  RequestBody: LeadsUpdateRequestBody$Outbound;
};

/** @internal */
export const LeadsUpdateRequest$outboundSchema: z.ZodType<
  LeadsUpdateRequest$Outbound,
  z.ZodTypeDef,
  LeadsUpdateRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  requestBody: z.lazy(() => LeadsUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateRequest$ {
  /** @deprecated use `LeadsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateRequest$inboundSchema;
  /** @deprecated use `LeadsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateRequest$outboundSchema;
  /** @deprecated use `LeadsUpdateRequest$Outbound` instead. */
  export type Outbound = LeadsUpdateRequest$Outbound;
}

export function leadsUpdateRequestToJSON(
  leadsUpdateRequest: LeadsUpdateRequest,
): string {
  return JSON.stringify(
    LeadsUpdateRequest$outboundSchema.parse(leadsUpdateRequest),
  );
}

export function leadsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateDetail$inboundSchema: z.ZodType<
  LeadsUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsUpdateDetail$outboundSchema: z.ZodType<
  LeadsUpdateDetail$Outbound,
  z.ZodTypeDef,
  LeadsUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateDetail$ {
  /** @deprecated use `LeadsUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateDetail$inboundSchema;
  /** @deprecated use `LeadsUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateDetail$outboundSchema;
  /** @deprecated use `LeadsUpdateDetail$Outbound` instead. */
  export type Outbound = LeadsUpdateDetail$Outbound;
}

export function leadsUpdateDetailToJSON(
  leadsUpdateDetail: LeadsUpdateDetail,
): string {
  return JSON.stringify(
    LeadsUpdateDetail$outboundSchema.parse(leadsUpdateDetail),
  );
}

export function leadsUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateDetail' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateLeadsResponseBody$inboundSchema: z.ZodType<
  LeadsUpdateLeadsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type LeadsUpdateLeadsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsUpdateLeadsResponseBody$outboundSchema: z.ZodType<
  LeadsUpdateLeadsResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsUpdateLeadsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateLeadsResponseBody$ {
  /** @deprecated use `LeadsUpdateLeadsResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateLeadsResponseBody$inboundSchema;
  /** @deprecated use `LeadsUpdateLeadsResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateLeadsResponseBody$outboundSchema;
  /** @deprecated use `LeadsUpdateLeadsResponseBody$Outbound` instead. */
  export type Outbound = LeadsUpdateLeadsResponseBody$Outbound;
}

export function leadsUpdateLeadsResponseBodyToJSON(
  leadsUpdateLeadsResponseBody: LeadsUpdateLeadsResponseBody,
): string {
  return JSON.stringify(
    LeadsUpdateLeadsResponseBody$outboundSchema.parse(
      leadsUpdateLeadsResponseBody,
    ),
  );
}

export function leadsUpdateLeadsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateLeadsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateLeadsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateLeadsResponseBody' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateUnifiedId$inboundSchema: z.ZodType<
  LeadsUpdateUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type LeadsUpdateUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const LeadsUpdateUnifiedId$outboundSchema: z.ZodType<
  LeadsUpdateUnifiedId$Outbound,
  z.ZodTypeDef,
  LeadsUpdateUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateUnifiedId$ {
  /** @deprecated use `LeadsUpdateUnifiedId$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateUnifiedId$inboundSchema;
  /** @deprecated use `LeadsUpdateUnifiedId$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateUnifiedId$outboundSchema;
  /** @deprecated use `LeadsUpdateUnifiedId$Outbound` instead. */
  export type Outbound = LeadsUpdateUnifiedId$Outbound;
}

export function leadsUpdateUnifiedIdToJSON(
  leadsUpdateUnifiedId: LeadsUpdateUnifiedId,
): string {
  return JSON.stringify(
    LeadsUpdateUnifiedId$outboundSchema.parse(leadsUpdateUnifiedId),
  );
}

export function leadsUpdateUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateUnifiedId' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateResponseBody$inboundSchema: z.ZodType<
  LeadsUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => LeadsUpdateUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type LeadsUpdateResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: LeadsUpdateUnifiedId$Outbound;
};

/** @internal */
export const LeadsUpdateResponseBody$outboundSchema: z.ZodType<
  LeadsUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsUpdateResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => LeadsUpdateUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateResponseBody$ {
  /** @deprecated use `LeadsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateResponseBody$inboundSchema;
  /** @deprecated use `LeadsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateResponseBody$outboundSchema;
  /** @deprecated use `LeadsUpdateResponseBody$Outbound` instead. */
  export type Outbound = LeadsUpdateResponseBody$Outbound;
}

export function leadsUpdateResponseBodyToJSON(
  leadsUpdateResponseBody: LeadsUpdateResponseBody,
): string {
  return JSON.stringify(
    LeadsUpdateResponseBody$outboundSchema.parse(leadsUpdateResponseBody),
  );
}

export function leadsUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const LeadsUpdateResponse$inboundSchema: z.ZodType<
  LeadsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadsUpdateResponseBody$inboundSchema),
  z.lazy(() => LeadsUpdateLeadsResponseBody$inboundSchema),
]);

/** @internal */
export type LeadsUpdateResponse$Outbound =
  | LeadsUpdateResponseBody$Outbound
  | LeadsUpdateLeadsResponseBody$Outbound;

/** @internal */
export const LeadsUpdateResponse$outboundSchema: z.ZodType<
  LeadsUpdateResponse$Outbound,
  z.ZodTypeDef,
  LeadsUpdateResponse
> = z.union([
  z.lazy(() => LeadsUpdateResponseBody$outboundSchema),
  z.lazy(() => LeadsUpdateLeadsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsUpdateResponse$ {
  /** @deprecated use `LeadsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = LeadsUpdateResponse$inboundSchema;
  /** @deprecated use `LeadsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = LeadsUpdateResponse$outboundSchema;
  /** @deprecated use `LeadsUpdateResponse$Outbound` instead. */
  export type Outbound = LeadsUpdateResponse$Outbound;
}

export function leadsUpdateResponseToJSON(
  leadsUpdateResponse: LeadsUpdateResponse,
): string {
  return JSON.stringify(
    LeadsUpdateResponse$outboundSchema.parse(leadsUpdateResponse),
  );
}

export function leadsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<LeadsUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsUpdateResponse' from JSON`,
  );
}
