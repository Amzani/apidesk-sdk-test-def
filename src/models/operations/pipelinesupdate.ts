/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PipelinesUpdateSecurity = {
  apiKey: string;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const PipelinesUpdateCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type PipelinesUpdateCurrency = ClosedEnum<
  typeof PipelinesUpdateCurrency
>;

export type PipelinesUpdateStages = {
  /**
   * The name of the Pipeline Stage.
   */
  name?: string | null | undefined;
  /**
   * The value of the Pipeline Stage.
   */
  value?: string | null | undefined;
  /**
   * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
   */
  winProbability?: number | null | undefined;
  /**
   * The order in which the Pipeline Stage is displayed in the UI.
   */
  displayOrder?: number | null | undefined;
};

export type PipelinesUpdateExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type PipelinesUpdatePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<PipelinesUpdateExtendPaths> | undefined;
};

export type PipelinesUpdateRequestBody = {
  /**
   * The unique identifier of the Pipeline.
   */
  id?: string | undefined;
  /**
   * The name of the Pipeline.
   */
  name: string;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: PipelinesUpdateCurrency | null | undefined;
  /**
   * Whether the Pipeline is archived or not.
   */
  archived?: boolean | undefined;
  /**
   * Whether the Pipeline is active or not.
   */
  active?: boolean | undefined;
  /**
   * The order in which the Pipeline is displayed in the UI.
   */
  displayOrder?: number | null | undefined;
  /**
   * Whether the Pipeline has win probability enabled or not.
   */
  winProbabilityEnabled?: boolean | undefined;
  /**
   * The Pipeline Stages.
   */
  stages?: Array<PipelinesUpdateStages> | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PipelinesUpdatePassThrough> | undefined;
};

export type PipelinesUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  requestBody: PipelinesUpdateRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesUpdateDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type PipelinesUpdatePipelinesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type PipelinesUpdateUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Pipeline updated
 */
export type PipelinesUpdateResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: PipelinesUpdateUnifiedId;
};

export type PipelinesUpdateResponse =
  | PipelinesUpdateResponseBody
  | PipelinesUpdatePipelinesResponseBody;

/** @internal */
export const PipelinesUpdateSecurity$inboundSchema: z.ZodType<
  PipelinesUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type PipelinesUpdateSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const PipelinesUpdateSecurity$outboundSchema: z.ZodType<
  PipelinesUpdateSecurity$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateSecurity$ {
  /** @deprecated use `PipelinesUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateSecurity$inboundSchema;
  /** @deprecated use `PipelinesUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateSecurity$outboundSchema;
  /** @deprecated use `PipelinesUpdateSecurity$Outbound` instead. */
  export type Outbound = PipelinesUpdateSecurity$Outbound;
}

export function pipelinesUpdateSecurityToJSON(
  pipelinesUpdateSecurity: PipelinesUpdateSecurity,
): string {
  return JSON.stringify(
    PipelinesUpdateSecurity$outboundSchema.parse(pipelinesUpdateSecurity),
  );
}

export function pipelinesUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateCurrency$inboundSchema: z.ZodNativeEnum<
  typeof PipelinesUpdateCurrency
> = z.nativeEnum(PipelinesUpdateCurrency);

/** @internal */
export const PipelinesUpdateCurrency$outboundSchema: z.ZodNativeEnum<
  typeof PipelinesUpdateCurrency
> = PipelinesUpdateCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateCurrency$ {
  /** @deprecated use `PipelinesUpdateCurrency$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateCurrency$inboundSchema;
  /** @deprecated use `PipelinesUpdateCurrency$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateCurrency$outboundSchema;
}

/** @internal */
export const PipelinesUpdateStages$inboundSchema: z.ZodType<
  PipelinesUpdateStages,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  win_probability: z.nullable(z.number().int()).optional(),
  display_order: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "win_probability": "winProbability",
    "display_order": "displayOrder",
  });
});

/** @internal */
export type PipelinesUpdateStages$Outbound = {
  name?: string | null | undefined;
  value?: string | null | undefined;
  win_probability?: number | null | undefined;
  display_order?: number | null | undefined;
};

/** @internal */
export const PipelinesUpdateStages$outboundSchema: z.ZodType<
  PipelinesUpdateStages$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateStages
> = z.object({
  name: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  winProbability: z.nullable(z.number().int()).optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    winProbability: "win_probability",
    displayOrder: "display_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateStages$ {
  /** @deprecated use `PipelinesUpdateStages$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateStages$inboundSchema;
  /** @deprecated use `PipelinesUpdateStages$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateStages$outboundSchema;
  /** @deprecated use `PipelinesUpdateStages$Outbound` instead. */
  export type Outbound = PipelinesUpdateStages$Outbound;
}

export function pipelinesUpdateStagesToJSON(
  pipelinesUpdateStages: PipelinesUpdateStages,
): string {
  return JSON.stringify(
    PipelinesUpdateStages$outboundSchema.parse(pipelinesUpdateStages),
  );
}

export function pipelinesUpdateStagesFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateStages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateStages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateStages' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateExtendPaths$inboundSchema: z.ZodType<
  PipelinesUpdateExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type PipelinesUpdateExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const PipelinesUpdateExtendPaths$outboundSchema: z.ZodType<
  PipelinesUpdateExtendPaths$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateExtendPaths$ {
  /** @deprecated use `PipelinesUpdateExtendPaths$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateExtendPaths$inboundSchema;
  /** @deprecated use `PipelinesUpdateExtendPaths$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateExtendPaths$outboundSchema;
  /** @deprecated use `PipelinesUpdateExtendPaths$Outbound` instead. */
  export type Outbound = PipelinesUpdateExtendPaths$Outbound;
}

export function pipelinesUpdateExtendPathsToJSON(
  pipelinesUpdateExtendPaths: PipelinesUpdateExtendPaths,
): string {
  return JSON.stringify(
    PipelinesUpdateExtendPaths$outboundSchema.parse(pipelinesUpdateExtendPaths),
  );
}

export function pipelinesUpdateExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateExtendPaths' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdatePassThrough$inboundSchema: z.ZodType<
  PipelinesUpdatePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => PipelinesUpdateExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type PipelinesUpdatePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<PipelinesUpdateExtendPaths$Outbound> | undefined;
};

/** @internal */
export const PipelinesUpdatePassThrough$outboundSchema: z.ZodType<
  PipelinesUpdatePassThrough$Outbound,
  z.ZodTypeDef,
  PipelinesUpdatePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => PipelinesUpdateExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdatePassThrough$ {
  /** @deprecated use `PipelinesUpdatePassThrough$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdatePassThrough$inboundSchema;
  /** @deprecated use `PipelinesUpdatePassThrough$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdatePassThrough$outboundSchema;
  /** @deprecated use `PipelinesUpdatePassThrough$Outbound` instead. */
  export type Outbound = PipelinesUpdatePassThrough$Outbound;
}

export function pipelinesUpdatePassThroughToJSON(
  pipelinesUpdatePassThrough: PipelinesUpdatePassThrough,
): string {
  return JSON.stringify(
    PipelinesUpdatePassThrough$outboundSchema.parse(pipelinesUpdatePassThrough),
  );
}

export function pipelinesUpdatePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdatePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdatePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdatePassThrough' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateRequestBody$inboundSchema: z.ZodType<
  PipelinesUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(PipelinesUpdateCurrency$inboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  display_order: z.nullable(z.number().int()).optional(),
  win_probability_enabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => PipelinesUpdateStages$inboundSchema)).optional(),
  pass_through: z.array(z.lazy(() => PipelinesUpdatePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "display_order": "displayOrder",
    "win_probability_enabled": "winProbabilityEnabled",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type PipelinesUpdateRequestBody$Outbound = {
  id?: string | undefined;
  name: string;
  currency?: string | null | undefined;
  archived?: boolean | undefined;
  active?: boolean | undefined;
  display_order?: number | null | undefined;
  win_probability_enabled?: boolean | undefined;
  stages?: Array<PipelinesUpdateStages$Outbound> | undefined;
  pass_through?: Array<PipelinesUpdatePassThrough$Outbound> | undefined;
};

/** @internal */
export const PipelinesUpdateRequestBody$outboundSchema: z.ZodType<
  PipelinesUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateRequestBody
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(PipelinesUpdateCurrency$outboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
  winProbabilityEnabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => PipelinesUpdateStages$outboundSchema))
    .optional(),
  passThrough: z.array(z.lazy(() => PipelinesUpdatePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    displayOrder: "display_order",
    winProbabilityEnabled: "win_probability_enabled",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateRequestBody$ {
  /** @deprecated use `PipelinesUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateRequestBody$inboundSchema;
  /** @deprecated use `PipelinesUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateRequestBody$outboundSchema;
  /** @deprecated use `PipelinesUpdateRequestBody$Outbound` instead. */
  export type Outbound = PipelinesUpdateRequestBody$Outbound;
}

export function pipelinesUpdateRequestBodyToJSON(
  pipelinesUpdateRequestBody: PipelinesUpdateRequestBody,
): string {
  return JSON.stringify(
    PipelinesUpdateRequestBody$outboundSchema.parse(pipelinesUpdateRequestBody),
  );
}

export function pipelinesUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateRequest$inboundSchema: z.ZodType<
  PipelinesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  RequestBody: z.lazy(() => PipelinesUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PipelinesUpdateRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  RequestBody: PipelinesUpdateRequestBody$Outbound;
};

/** @internal */
export const PipelinesUpdateRequest$outboundSchema: z.ZodType<
  PipelinesUpdateRequest$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  requestBody: z.lazy(() => PipelinesUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateRequest$ {
  /** @deprecated use `PipelinesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateRequest$inboundSchema;
  /** @deprecated use `PipelinesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateRequest$outboundSchema;
  /** @deprecated use `PipelinesUpdateRequest$Outbound` instead. */
  export type Outbound = PipelinesUpdateRequest$Outbound;
}

export function pipelinesUpdateRequestToJSON(
  pipelinesUpdateRequest: PipelinesUpdateRequest,
): string {
  return JSON.stringify(
    PipelinesUpdateRequest$outboundSchema.parse(pipelinesUpdateRequest),
  );
}

export function pipelinesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateRequest' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateDetail$inboundSchema: z.ZodType<
  PipelinesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const PipelinesUpdateDetail$outboundSchema: z.ZodType<
  PipelinesUpdateDetail$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateDetail$ {
  /** @deprecated use `PipelinesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateDetail$inboundSchema;
  /** @deprecated use `PipelinesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateDetail$outboundSchema;
  /** @deprecated use `PipelinesUpdateDetail$Outbound` instead. */
  export type Outbound = PipelinesUpdateDetail$Outbound;
}

export function pipelinesUpdateDetailToJSON(
  pipelinesUpdateDetail: PipelinesUpdateDetail,
): string {
  return JSON.stringify(
    PipelinesUpdateDetail$outboundSchema.parse(pipelinesUpdateDetail),
  );
}

export function pipelinesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdatePipelinesResponseBody$inboundSchema: z.ZodType<
  PipelinesUpdatePipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type PipelinesUpdatePipelinesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesUpdatePipelinesResponseBody$outboundSchema: z.ZodType<
  PipelinesUpdatePipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesUpdatePipelinesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdatePipelinesResponseBody$ {
  /** @deprecated use `PipelinesUpdatePipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesUpdatePipelinesResponseBody$inboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesUpdatePipelinesResponseBody$outboundSchema;
  /** @deprecated use `PipelinesUpdatePipelinesResponseBody$Outbound` instead. */
  export type Outbound = PipelinesUpdatePipelinesResponseBody$Outbound;
}

export function pipelinesUpdatePipelinesResponseBodyToJSON(
  pipelinesUpdatePipelinesResponseBody: PipelinesUpdatePipelinesResponseBody,
): string {
  return JSON.stringify(
    PipelinesUpdatePipelinesResponseBody$outboundSchema.parse(
      pipelinesUpdatePipelinesResponseBody,
    ),
  );
}

export function pipelinesUpdatePipelinesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdatePipelinesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesUpdatePipelinesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdatePipelinesResponseBody' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateUnifiedId$inboundSchema: z.ZodType<
  PipelinesUpdateUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PipelinesUpdateUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const PipelinesUpdateUnifiedId$outboundSchema: z.ZodType<
  PipelinesUpdateUnifiedId$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateUnifiedId$ {
  /** @deprecated use `PipelinesUpdateUnifiedId$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateUnifiedId$inboundSchema;
  /** @deprecated use `PipelinesUpdateUnifiedId$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateUnifiedId$outboundSchema;
  /** @deprecated use `PipelinesUpdateUnifiedId$Outbound` instead. */
  export type Outbound = PipelinesUpdateUnifiedId$Outbound;
}

export function pipelinesUpdateUnifiedIdToJSON(
  pipelinesUpdateUnifiedId: PipelinesUpdateUnifiedId,
): string {
  return JSON.stringify(
    PipelinesUpdateUnifiedId$outboundSchema.parse(pipelinesUpdateUnifiedId),
  );
}

export function pipelinesUpdateUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateUnifiedId' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateResponseBody$inboundSchema: z.ZodType<
  PipelinesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelinesUpdateUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type PipelinesUpdateResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: PipelinesUpdateUnifiedId$Outbound;
};

/** @internal */
export const PipelinesUpdateResponseBody$outboundSchema: z.ZodType<
  PipelinesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelinesUpdateUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateResponseBody$ {
  /** @deprecated use `PipelinesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateResponseBody$inboundSchema;
  /** @deprecated use `PipelinesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateResponseBody$outboundSchema;
  /** @deprecated use `PipelinesUpdateResponseBody$Outbound` instead. */
  export type Outbound = PipelinesUpdateResponseBody$Outbound;
}

export function pipelinesUpdateResponseBodyToJSON(
  pipelinesUpdateResponseBody: PipelinesUpdateResponseBody,
): string {
  return JSON.stringify(
    PipelinesUpdateResponseBody$outboundSchema.parse(
      pipelinesUpdateResponseBody,
    ),
  );
}

export function pipelinesUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateResponse$inboundSchema: z.ZodType<
  PipelinesUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PipelinesUpdateResponseBody$inboundSchema),
  z.lazy(() => PipelinesUpdatePipelinesResponseBody$inboundSchema),
]);

/** @internal */
export type PipelinesUpdateResponse$Outbound =
  | PipelinesUpdateResponseBody$Outbound
  | PipelinesUpdatePipelinesResponseBody$Outbound;

/** @internal */
export const PipelinesUpdateResponse$outboundSchema: z.ZodType<
  PipelinesUpdateResponse$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateResponse
> = z.union([
  z.lazy(() => PipelinesUpdateResponseBody$outboundSchema),
  z.lazy(() => PipelinesUpdatePipelinesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateResponse$ {
  /** @deprecated use `PipelinesUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateResponse$inboundSchema;
  /** @deprecated use `PipelinesUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateResponse$outboundSchema;
  /** @deprecated use `PipelinesUpdateResponse$Outbound` instead. */
  export type Outbound = PipelinesUpdateResponse$Outbound;
}

export function pipelinesUpdateResponseToJSON(
  pipelinesUpdateResponse: PipelinesUpdateResponse,
): string {
  return JSON.stringify(
    PipelinesUpdateResponse$outboundSchema.parse(pipelinesUpdateResponse),
  );
}

export function pipelinesUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateResponse' from JSON`,
  );
}
