/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PipelinesUpdateSecurity = {
  apiKey: string;
};

export type PipelinesUpdateRequest = {
  /**
   * The unique identifier of the activity record to be deleted. This parameter is essential as it specifies which activity in the CRM system will be removed. Ensure that the ID corresponds to an existing activity to avoid errors.
   */
  id: string;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
  pipelineUpdateRequest: components.PipelineUpdateRequest;
};

export type PipelinesUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Pipeline updated
   */
  pipelineUpdateResponse?: components.PipelineUpdateResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const PipelinesUpdateSecurity$inboundSchema: z.ZodType<
  PipelinesUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type PipelinesUpdateSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const PipelinesUpdateSecurity$outboundSchema: z.ZodType<
  PipelinesUpdateSecurity$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateSecurity$ {
  /** @deprecated use `PipelinesUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateSecurity$inboundSchema;
  /** @deprecated use `PipelinesUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateSecurity$outboundSchema;
  /** @deprecated use `PipelinesUpdateSecurity$Outbound` instead. */
  export type Outbound = PipelinesUpdateSecurity$Outbound;
}

export function pipelinesUpdateSecurityToJSON(
  pipelinesUpdateSecurity: PipelinesUpdateSecurity,
): string {
  return JSON.stringify(
    PipelinesUpdateSecurity$outboundSchema.parse(pipelinesUpdateSecurity),
  );
}

export function pipelinesUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateRequest$inboundSchema: z.ZodType<
  PipelinesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  PipelineUpdateRequest: components.PipelineUpdateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "PipelineUpdateRequest": "pipelineUpdateRequest",
  });
});

/** @internal */
export type PipelinesUpdateRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  PipelineUpdateRequest: components.PipelineUpdateRequest$Outbound;
};

/** @internal */
export const PipelinesUpdateRequest$outboundSchema: z.ZodType<
  PipelinesUpdateRequest$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  pipelineUpdateRequest: components.PipelineUpdateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    pipelineUpdateRequest: "PipelineUpdateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateRequest$ {
  /** @deprecated use `PipelinesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateRequest$inboundSchema;
  /** @deprecated use `PipelinesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateRequest$outboundSchema;
  /** @deprecated use `PipelinesUpdateRequest$Outbound` instead. */
  export type Outbound = PipelinesUpdateRequest$Outbound;
}

export function pipelinesUpdateRequestToJSON(
  pipelinesUpdateRequest: PipelinesUpdateRequest,
): string {
  return JSON.stringify(
    PipelinesUpdateRequest$outboundSchema.parse(pipelinesUpdateRequest),
  );
}

export function pipelinesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateRequest' from JSON`,
  );
}

/** @internal */
export const PipelinesUpdateResponse$inboundSchema: z.ZodType<
  PipelinesUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  PipelineUpdateResponse: components.PipelineUpdateResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "PipelineUpdateResponse": "pipelineUpdateResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type PipelinesUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  PipelineUpdateResponse?:
    | components.PipelineUpdateResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const PipelinesUpdateResponse$outboundSchema: z.ZodType<
  PipelinesUpdateResponse$Outbound,
  z.ZodTypeDef,
  PipelinesUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  pipelineUpdateResponse: components.PipelineUpdateResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    pipelineUpdateResponse: "PipelineUpdateResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesUpdateResponse$ {
  /** @deprecated use `PipelinesUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = PipelinesUpdateResponse$inboundSchema;
  /** @deprecated use `PipelinesUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = PipelinesUpdateResponse$outboundSchema;
  /** @deprecated use `PipelinesUpdateResponse$Outbound` instead. */
  export type Outbound = PipelinesUpdateResponse$Outbound;
}

export function pipelinesUpdateResponseToJSON(
  pipelinesUpdateResponse: PipelinesUpdateResponse,
): string {
  return JSON.stringify(
    PipelinesUpdateResponse$outboundSchema.parse(pipelinesUpdateResponse),
  );
}

export function pipelinesUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesUpdateResponse' from JSON`,
  );
}
