/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisTimeOffRequestsAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

/**
 * The status of the time off request.
 */
export const HrisTimeOffRequestsAddStatus = {
  Requested: "requested",
  Approved: "approved",
  Declined: "declined",
  Cancelled: "cancelled",
  Deleted: "deleted",
  Other: "other",
} as const;
/**
 * The status of the time off request.
 */
export type HrisTimeOffRequestsAddStatus = ClosedEnum<
  typeof HrisTimeOffRequestsAddStatus
>;

/**
 * The type of request
 */
export const RequestType = {
  Vacation: "vacation",
  Sick: "sick",
  Personal: "personal",
  JuryDuty: "jury_duty",
  Volunteer: "volunteer",
  Bereavement: "bereavement",
  Other: "other",
} as const;
/**
 * The type of request
 */
export type RequestType = ClosedEnum<typeof RequestType>;

/**
 * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
 */
export const Units = {
  Days: "days",
  Hours: "hours",
  Other: "other",
} as const;
/**
 * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
 */
export type Units = ClosedEnum<typeof Units>;

export type Notes = {
  employee?: string | null | undefined;
  manager?: string | null | undefined;
};

export type HrisTimeOffRequestsAddExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisTimeOffRequestsAddPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisTimeOffRequestsAddExtendPaths> | undefined;
};

export type HrisTimeOffRequestsAddRequestBody = {
  /**
   * ID of the employee
   */
  employeeId?: string | null | undefined;
  /**
   * ID of the policy
   */
  policyId?: string | null | undefined;
  /**
   * The status of the time off request.
   */
  status?: HrisTimeOffRequestsAddStatus | null | undefined;
  /**
   * Description of the time off request.
   */
  description?: string | null | undefined;
  /**
   * The start date of the time off request.
   */
  startDate?: string | null | undefined;
  /**
   * The end date of the time off request.
   */
  endDate?: string | null | undefined;
  /**
   * The date the request was made.
   */
  requestDate?: string | null | undefined;
  /**
   * The type of request
   */
  requestType?: RequestType | null | undefined;
  /**
   * The date the request was approved
   */
  approvalDate?: string | null | undefined;
  /**
   * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
   */
  units?: Units | null | undefined;
  /**
   * The amount of time off requested.
   */
  amount?: number | null | undefined;
  /**
   * The day part of the time off request.
   */
  dayPart?: string | null | undefined;
  notes?: Notes | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisTimeOffRequestsAddPassThrough> | undefined;
  /**
   * The policy type of the time off request
   */
  policyType?: string | undefined;
};

export type HrisTimeOffRequestsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: HrisTimeOffRequestsAddRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsAddDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type HrisTimeOffRequestsAddUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * TimeOffRequests
 */
export type HrisTimeOffRequestsAddResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisTimeOffRequestsAddUnifiedId;
};

export type HrisTimeOffRequestsAddResponse =
  | HrisTimeOffRequestsAddResponseBody
  | HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody;

/** @internal */
export const HrisTimeOffRequestsAddGlobals$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisTimeOffRequestsAddGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisTimeOffRequestsAddGlobals$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddGlobals$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddGlobals$ {
  /** @deprecated use `HrisTimeOffRequestsAddGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddGlobals$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsAddGlobals$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddGlobals$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddGlobals$Outbound;
}

export function hrisTimeOffRequestsAddGlobalsToJSON(
  hrisTimeOffRequestsAddGlobals: HrisTimeOffRequestsAddGlobals,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddGlobals$outboundSchema.parse(
      hrisTimeOffRequestsAddGlobals,
    ),
  );
}

export function hrisTimeOffRequestsAddGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAddGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsAddGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddGlobals' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisTimeOffRequestsAddStatus
> = z.nativeEnum(HrisTimeOffRequestsAddStatus);

/** @internal */
export const HrisTimeOffRequestsAddStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisTimeOffRequestsAddStatus
> = HrisTimeOffRequestsAddStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddStatus$ {
  /** @deprecated use `HrisTimeOffRequestsAddStatus$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddStatus$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddStatus$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsAddStatus$outboundSchema;
}

/** @internal */
export const RequestType$inboundSchema: z.ZodNativeEnum<typeof RequestType> = z
  .nativeEnum(RequestType);

/** @internal */
export const RequestType$outboundSchema: z.ZodNativeEnum<typeof RequestType> =
  RequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestType$ {
  /** @deprecated use `RequestType$inboundSchema` instead. */
  export const inboundSchema = RequestType$inboundSchema;
  /** @deprecated use `RequestType$outboundSchema` instead. */
  export const outboundSchema = RequestType$outboundSchema;
}

/** @internal */
export const Units$inboundSchema: z.ZodNativeEnum<typeof Units> = z.nativeEnum(
  Units,
);

/** @internal */
export const Units$outboundSchema: z.ZodNativeEnum<typeof Units> =
  Units$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Units$ {
  /** @deprecated use `Units$inboundSchema` instead. */
  export const inboundSchema = Units$inboundSchema;
  /** @deprecated use `Units$outboundSchema` instead. */
  export const outboundSchema = Units$outboundSchema;
}

/** @internal */
export const Notes$inboundSchema: z.ZodType<Notes, z.ZodTypeDef, unknown> = z
  .object({
    employee: z.nullable(z.string()).optional(),
    manager: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Notes$Outbound = {
  employee?: string | null | undefined;
  manager?: string | null | undefined;
};

/** @internal */
export const Notes$outboundSchema: z.ZodType<
  Notes$Outbound,
  z.ZodTypeDef,
  Notes
> = z.object({
  employee: z.nullable(z.string()).optional(),
  manager: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Notes$ {
  /** @deprecated use `Notes$inboundSchema` instead. */
  export const inboundSchema = Notes$inboundSchema;
  /** @deprecated use `Notes$outboundSchema` instead. */
  export const outboundSchema = Notes$outboundSchema;
  /** @deprecated use `Notes$Outbound` instead. */
  export type Outbound = Notes$Outbound;
}

export function notesToJSON(notes: Notes): string {
  return JSON.stringify(Notes$outboundSchema.parse(notes));
}

export function notesFromJSON(
  jsonString: string,
): SafeParseResult<Notes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Notes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Notes' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddExtendPaths$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisTimeOffRequestsAddExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisTimeOffRequestsAddExtendPaths$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddExtendPaths$ {
  /** @deprecated use `HrisTimeOffRequestsAddExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddExtendPaths$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddExtendPaths$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddExtendPaths$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddExtendPaths$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddExtendPaths$Outbound;
}

export function hrisTimeOffRequestsAddExtendPathsToJSON(
  hrisTimeOffRequestsAddExtendPaths: HrisTimeOffRequestsAddExtendPaths,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddExtendPaths$outboundSchema.parse(
      hrisTimeOffRequestsAddExtendPaths,
    ),
  );
}

export function hrisTimeOffRequestsAddExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAddExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsAddExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddPassThrough$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => HrisTimeOffRequestsAddExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisTimeOffRequestsAddPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisTimeOffRequestsAddExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisTimeOffRequestsAddPassThrough$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddPassThrough$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => HrisTimeOffRequestsAddExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddPassThrough$ {
  /** @deprecated use `HrisTimeOffRequestsAddPassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddPassThrough$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddPassThrough$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddPassThrough$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddPassThrough$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddPassThrough$Outbound;
}

export function hrisTimeOffRequestsAddPassThroughToJSON(
  hrisTimeOffRequestsAddPassThrough: HrisTimeOffRequestsAddPassThrough,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddPassThrough$outboundSchema.parse(
      hrisTimeOffRequestsAddPassThrough,
    ),
  );
}

export function hrisTimeOffRequestsAddPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAddPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsAddPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddPassThrough' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddRequestBody$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.nullable(z.string()).optional(),
  policy_id: z.nullable(z.string()).optional(),
  status: z.nullable(HrisTimeOffRequestsAddStatus$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  start_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  request_date: z.nullable(z.string()).optional(),
  request_type: z.nullable(RequestType$inboundSchema).optional(),
  approval_date: z.nullable(z.string()).optional(),
  units: z.nullable(Units$inboundSchema).optional(),
  amount: z.nullable(z.number()).optional(),
  day_part: z.nullable(z.string()).optional(),
  notes: z.lazy(() => Notes$inboundSchema).optional(),
  pass_through: z.array(
    z.lazy(() => HrisTimeOffRequestsAddPassThrough$inboundSchema),
  ).optional(),
  policy_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "policy_id": "policyId",
    "start_date": "startDate",
    "end_date": "endDate",
    "request_date": "requestDate",
    "request_type": "requestType",
    "approval_date": "approvalDate",
    "day_part": "dayPart",
    "pass_through": "passThrough",
    "policy_type": "policyType",
  });
});

/** @internal */
export type HrisTimeOffRequestsAddRequestBody$Outbound = {
  employee_id?: string | null | undefined;
  policy_id?: string | null | undefined;
  status?: string | null | undefined;
  description?: string | null | undefined;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  request_date?: string | null | undefined;
  request_type?: string | null | undefined;
  approval_date?: string | null | undefined;
  units?: string | null | undefined;
  amount?: number | null | undefined;
  day_part?: string | null | undefined;
  notes?: Notes$Outbound | undefined;
  pass_through?: Array<HrisTimeOffRequestsAddPassThrough$Outbound> | undefined;
  policy_type?: string | undefined;
};

/** @internal */
export const HrisTimeOffRequestsAddRequestBody$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddRequestBody$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddRequestBody
> = z.object({
  employeeId: z.nullable(z.string()).optional(),
  policyId: z.nullable(z.string()).optional(),
  status: z.nullable(HrisTimeOffRequestsAddStatus$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  requestDate: z.nullable(z.string()).optional(),
  requestType: z.nullable(RequestType$outboundSchema).optional(),
  approvalDate: z.nullable(z.string()).optional(),
  units: z.nullable(Units$outboundSchema).optional(),
  amount: z.nullable(z.number()).optional(),
  dayPart: z.nullable(z.string()).optional(),
  notes: z.lazy(() => Notes$outboundSchema).optional(),
  passThrough: z.array(
    z.lazy(() => HrisTimeOffRequestsAddPassThrough$outboundSchema),
  ).optional(),
  policyType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    policyId: "policy_id",
    startDate: "start_date",
    endDate: "end_date",
    requestDate: "request_date",
    requestType: "request_type",
    approvalDate: "approval_date",
    dayPart: "day_part",
    passThrough: "pass_through",
    policyType: "policy_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddRequestBody$ {
  /** @deprecated use `HrisTimeOffRequestsAddRequestBody$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddRequestBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddRequestBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddRequestBody$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddRequestBody$Outbound;
}

export function hrisTimeOffRequestsAddRequestBodyToJSON(
  hrisTimeOffRequestsAddRequestBody: HrisTimeOffRequestsAddRequestBody,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddRequestBody$outboundSchema.parse(
      hrisTimeOffRequestsAddRequestBody,
    ),
  );
}

export function hrisTimeOffRequestsAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAddRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsAddRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddRequestBody' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddRequest$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => HrisTimeOffRequestsAddRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type HrisTimeOffRequestsAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  RequestBody: HrisTimeOffRequestsAddRequestBody$Outbound;
};

/** @internal */
export const HrisTimeOffRequestsAddRequest$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddRequest$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => HrisTimeOffRequestsAddRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddRequest$ {
  /** @deprecated use `HrisTimeOffRequestsAddRequest$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddRequest$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddRequest$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsAddRequest$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddRequest$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddRequest$Outbound;
}

export function hrisTimeOffRequestsAddRequestToJSON(
  hrisTimeOffRequestsAddRequest: HrisTimeOffRequestsAddRequest,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddRequest$outboundSchema.parse(
      hrisTimeOffRequestsAddRequest,
    ),
  );
}

export function hrisTimeOffRequestsAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddRequest' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddDetail$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsAddDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisTimeOffRequestsAddDetail$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddDetail$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddDetail$ {
  /** @deprecated use `HrisTimeOffRequestsAddDetail$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddDetail$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsAddDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddDetail$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddDetail$Outbound;
}

export function hrisTimeOffRequestsAddDetailToJSON(
  hrisTimeOffRequestsAddDetail: HrisTimeOffRequestsAddDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddDetail$outboundSchema.parse(
      hrisTimeOffRequestsAddDetail,
    ),
  );
}

export function hrisTimeOffRequestsAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$Outbound;
}

export function hrisTimeOffRequestsAddHrisTimeOffRequestsResponseBodyToJSON(
  hrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody:
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$outboundSchema.parse(
      hrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody,
    ),
  );
}

export function hrisTimeOffRequestsAddHrisTimeOffRequestsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddUnifiedId$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type HrisTimeOffRequestsAddUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const HrisTimeOffRequestsAddUnifiedId$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddUnifiedId$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddUnifiedId$ {
  /** @deprecated use `HrisTimeOffRequestsAddUnifiedId$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddUnifiedId$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddUnifiedId$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsAddUnifiedId$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddUnifiedId$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddUnifiedId$Outbound;
}

export function hrisTimeOffRequestsAddUnifiedIdToJSON(
  hrisTimeOffRequestsAddUnifiedId: HrisTimeOffRequestsAddUnifiedId,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddUnifiedId$outboundSchema.parse(
      hrisTimeOffRequestsAddUnifiedId,
    ),
  );
}

export function hrisTimeOffRequestsAddUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAddUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsAddUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddUnifiedId' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddResponseBody$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisTimeOffRequestsAddUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisTimeOffRequestsAddResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisTimeOffRequestsAddUnifiedId$Outbound;
};

/** @internal */
export const HrisTimeOffRequestsAddResponseBody$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddResponseBody$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisTimeOffRequestsAddUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsAddResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddResponseBody$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddResponseBody$Outbound;
}

export function hrisTimeOffRequestsAddResponseBodyToJSON(
  hrisTimeOffRequestsAddResponseBody: HrisTimeOffRequestsAddResponseBody,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddResponseBody$outboundSchema.parse(
      hrisTimeOffRequestsAddResponseBody,
    ),
  );
}

export function hrisTimeOffRequestsAddResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAddResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsAddResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsAddResponse$inboundSchema: z.ZodType<
  HrisTimeOffRequestsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisTimeOffRequestsAddResponseBody$inboundSchema),
  z.lazy(() =>
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$inboundSchema
  ),
]);

/** @internal */
export type HrisTimeOffRequestsAddResponse$Outbound =
  | HrisTimeOffRequestsAddResponseBody$Outbound
  | HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$Outbound;

/** @internal */
export const HrisTimeOffRequestsAddResponse$outboundSchema: z.ZodType<
  HrisTimeOffRequestsAddResponse$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsAddResponse
> = z.union([
  z.lazy(() => HrisTimeOffRequestsAddResponseBody$outboundSchema),
  z.lazy(() =>
    HrisTimeOffRequestsAddHrisTimeOffRequestsResponseBody$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsAddResponse$ {
  /** @deprecated use `HrisTimeOffRequestsAddResponse$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsAddResponse$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddResponse$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsAddResponse$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsAddResponse$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsAddResponse$Outbound;
}

export function hrisTimeOffRequestsAddResponseToJSON(
  hrisTimeOffRequestsAddResponse: HrisTimeOffRequestsAddResponse,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsAddResponse$outboundSchema.parse(
      hrisTimeOffRequestsAddResponse,
    ),
  );
}

export function hrisTimeOffRequestsAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsAddResponse' from JSON`,
  );
}
