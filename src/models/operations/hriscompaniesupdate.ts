/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisCompaniesUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export const HrisCompaniesUpdateStatus = {
  Active: "active",
  Inactive: "inactive",
  Trial: "trial",
  Other: "other",
} as const;
export type HrisCompaniesUpdateStatus = ClosedEnum<
  typeof HrisCompaniesUpdateStatus
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisCompaniesUpdateCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisCompaniesUpdateCurrency = ClosedEnum<
  typeof HrisCompaniesUpdateCurrency
>;

/**
 * The type of address.
 */
export const HrisCompaniesUpdateType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisCompaniesUpdateType = ClosedEnum<
  typeof HrisCompaniesUpdateType
>;

export type HrisCompaniesUpdateAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisCompaniesUpdateType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const HrisCompaniesUpdateHrisCompaniesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type HrisCompaniesUpdateHrisCompaniesType = ClosedEnum<
  typeof HrisCompaniesUpdateHrisCompaniesType
>;

export type HrisCompaniesUpdatePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: HrisCompaniesUpdateHrisCompaniesType | null | undefined;
};

/**
 * Email type
 */
export const HrisCompaniesUpdateHrisCompaniesRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type HrisCompaniesUpdateHrisCompaniesRequestType = ClosedEnum<
  typeof HrisCompaniesUpdateHrisCompaniesRequestType
>;

export type HrisCompaniesUpdateEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: HrisCompaniesUpdateHrisCompaniesRequestType | null | undefined;
};

/**
 * The type of website
 */
export const HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType = ClosedEnum<
  typeof HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType
>;

export type HrisCompaniesUpdateWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?:
    | HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType
    | null
    | undefined;
};

export type HrisCompaniesUpdateExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisCompaniesUpdatePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisCompaniesUpdateExtendPaths> | undefined;
};

export type HrisCompaniesUpdateRequestBody = {
  legalName: string | null;
  displayName?: string | null | undefined;
  subdomain?: string | null | undefined;
  status?: HrisCompaniesUpdateStatus | undefined;
  /**
   * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
   */
  companyNumber?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisCompaniesUpdateCurrency | null | undefined;
  addresses?: Array<HrisCompaniesUpdateAddresses> | undefined;
  phoneNumbers?: Array<HrisCompaniesUpdatePhoneNumbers> | undefined;
  emails?: Array<HrisCompaniesUpdateEmails> | undefined;
  websites?: Array<HrisCompaniesUpdateWebsites> | undefined;
  debtorId?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisCompaniesUpdatePassThrough> | undefined;
};

export type HrisCompaniesUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  requestBody: HrisCompaniesUpdateRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesUpdateDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisCompaniesUpdateHrisCompaniesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type HrisCompaniesUpdateUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Companies
 */
export type HrisCompaniesUpdateResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisCompaniesUpdateUnifiedId;
};

export type HrisCompaniesUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Companies
   */
  twoHundredApplicationJsonObject?: HrisCompaniesUpdateResponseBody | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisCompaniesUpdateHrisCompaniesResponseBody
    | undefined;
};

/** @internal */
export const HrisCompaniesUpdateGlobals$inboundSchema: z.ZodType<
  HrisCompaniesUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisCompaniesUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisCompaniesUpdateGlobals$outboundSchema: z.ZodType<
  HrisCompaniesUpdateGlobals$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateGlobals$ {
  /** @deprecated use `HrisCompaniesUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateGlobals$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateGlobals$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateGlobals$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateGlobals$Outbound;
}

export function hrisCompaniesUpdateGlobalsToJSON(
  hrisCompaniesUpdateGlobals: HrisCompaniesUpdateGlobals,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateGlobals$outboundSchema.parse(hrisCompaniesUpdateGlobals),
  );
}

export function hrisCompaniesUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesUpdateStatus
> = z.nativeEnum(HrisCompaniesUpdateStatus);

/** @internal */
export const HrisCompaniesUpdateStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesUpdateStatus
> = HrisCompaniesUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateStatus$ {
  /** @deprecated use `HrisCompaniesUpdateStatus$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateStatus$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateStatus$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateStatus$outboundSchema;
}

/** @internal */
export const HrisCompaniesUpdateCurrency$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesUpdateCurrency
> = z.nativeEnum(HrisCompaniesUpdateCurrency);

/** @internal */
export const HrisCompaniesUpdateCurrency$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesUpdateCurrency
> = HrisCompaniesUpdateCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateCurrency$ {
  /** @deprecated use `HrisCompaniesUpdateCurrency$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateCurrency$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateCurrency$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateCurrency$outboundSchema;
}

/** @internal */
export const HrisCompaniesUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesUpdateType
> = z.nativeEnum(HrisCompaniesUpdateType);

/** @internal */
export const HrisCompaniesUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesUpdateType
> = HrisCompaniesUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateType$ {
  /** @deprecated use `HrisCompaniesUpdateType$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateType$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateType$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateType$outboundSchema;
}

/** @internal */
export const HrisCompaniesUpdateAddresses$inboundSchema: z.ZodType<
  HrisCompaniesUpdateAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesUpdateType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisCompaniesUpdateAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesUpdateAddresses$outboundSchema: z.ZodType<
  HrisCompaniesUpdateAddresses$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesUpdateType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateAddresses$ {
  /** @deprecated use `HrisCompaniesUpdateAddresses$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateAddresses$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateAddresses$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateAddresses$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateAddresses$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateAddresses$Outbound;
}

export function hrisCompaniesUpdateAddressesToJSON(
  hrisCompaniesUpdateAddresses: HrisCompaniesUpdateAddresses,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateAddresses$outboundSchema.parse(
      hrisCompaniesUpdateAddresses,
    ),
  );
}

export function hrisCompaniesUpdateAddressesFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateAddresses' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesType$inboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesUpdateHrisCompaniesType> = z.nativeEnum(
    HrisCompaniesUpdateHrisCompaniesType,
  );

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesType$outboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesUpdateHrisCompaniesType> =
    HrisCompaniesUpdateHrisCompaniesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesType$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesType$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesType$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesType$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesType$outboundSchema;
}

/** @internal */
export const HrisCompaniesUpdatePhoneNumbers$inboundSchema: z.ZodType<
  HrisCompaniesUpdatePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesUpdateHrisCompaniesType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type HrisCompaniesUpdatePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesUpdatePhoneNumbers$outboundSchema: z.ZodType<
  HrisCompaniesUpdatePhoneNumbers$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdatePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesUpdateHrisCompaniesType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdatePhoneNumbers$ {
  /** @deprecated use `HrisCompaniesUpdatePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdatePhoneNumbers$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdatePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdatePhoneNumbers$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdatePhoneNumbers$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdatePhoneNumbers$Outbound;
}

export function hrisCompaniesUpdatePhoneNumbersToJSON(
  hrisCompaniesUpdatePhoneNumbers: HrisCompaniesUpdatePhoneNumbers,
): string {
  return JSON.stringify(
    HrisCompaniesUpdatePhoneNumbers$outboundSchema.parse(
      hrisCompaniesUpdatePhoneNumbers,
    ),
  );
}

export function hrisCompaniesUpdatePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdatePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdatePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdatePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesRequestType$inboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesUpdateHrisCompaniesRequestType> = z
    .nativeEnum(HrisCompaniesUpdateHrisCompaniesRequestType);

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesRequestType$outboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesUpdateHrisCompaniesRequestType> =
    HrisCompaniesUpdateHrisCompaniesRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesRequestType$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesRequestType$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesRequestType$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesRequestType$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesRequestType$outboundSchema;
}

/** @internal */
export const HrisCompaniesUpdateEmails$inboundSchema: z.ZodType<
  HrisCompaniesUpdateEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisCompaniesUpdateHrisCompaniesRequestType$inboundSchema)
    .optional(),
});

/** @internal */
export type HrisCompaniesUpdateEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesUpdateEmails$outboundSchema: z.ZodType<
  HrisCompaniesUpdateEmails$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisCompaniesUpdateHrisCompaniesRequestType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateEmails$ {
  /** @deprecated use `HrisCompaniesUpdateEmails$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateEmails$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateEmails$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateEmails$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateEmails$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateEmails$Outbound;
}

export function hrisCompaniesUpdateEmailsToJSON(
  hrisCompaniesUpdateEmails: HrisCompaniesUpdateEmails,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateEmails$outboundSchema.parse(hrisCompaniesUpdateEmails),
  );
}

export function hrisCompaniesUpdateEmailsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateEmails' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType
  > = z.nativeEnum(HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType);

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType
  > = HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const HrisCompaniesUpdateWebsites$inboundSchema: z.ZodType<
  HrisCompaniesUpdateWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(
    HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType$inboundSchema,
  ).optional(),
});

/** @internal */
export type HrisCompaniesUpdateWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesUpdateWebsites$outboundSchema: z.ZodType<
  HrisCompaniesUpdateWebsites$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(
    HrisCompaniesUpdateHrisCompaniesRequestRequestBodyType$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateWebsites$ {
  /** @deprecated use `HrisCompaniesUpdateWebsites$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateWebsites$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateWebsites$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateWebsites$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateWebsites$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateWebsites$Outbound;
}

export function hrisCompaniesUpdateWebsitesToJSON(
  hrisCompaniesUpdateWebsites: HrisCompaniesUpdateWebsites,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateWebsites$outboundSchema.parse(
      hrisCompaniesUpdateWebsites,
    ),
  );
}

export function hrisCompaniesUpdateWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateWebsites' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateExtendPaths$inboundSchema: z.ZodType<
  HrisCompaniesUpdateExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisCompaniesUpdateExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisCompaniesUpdateExtendPaths$outboundSchema: z.ZodType<
  HrisCompaniesUpdateExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateExtendPaths$ {
  /** @deprecated use `HrisCompaniesUpdateExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateExtendPaths$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateExtendPaths$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateExtendPaths$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateExtendPaths$Outbound;
}

export function hrisCompaniesUpdateExtendPathsToJSON(
  hrisCompaniesUpdateExtendPaths: HrisCompaniesUpdateExtendPaths,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateExtendPaths$outboundSchema.parse(
      hrisCompaniesUpdateExtendPaths,
    ),
  );
}

export function hrisCompaniesUpdateExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdatePassThrough$inboundSchema: z.ZodType<
  HrisCompaniesUpdatePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => HrisCompaniesUpdateExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisCompaniesUpdatePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisCompaniesUpdateExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisCompaniesUpdatePassThrough$outboundSchema: z.ZodType<
  HrisCompaniesUpdatePassThrough$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdatePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => HrisCompaniesUpdateExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdatePassThrough$ {
  /** @deprecated use `HrisCompaniesUpdatePassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdatePassThrough$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdatePassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdatePassThrough$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdatePassThrough$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdatePassThrough$Outbound;
}

export function hrisCompaniesUpdatePassThroughToJSON(
  hrisCompaniesUpdatePassThrough: HrisCompaniesUpdatePassThrough,
): string {
  return JSON.stringify(
    HrisCompaniesUpdatePassThrough$outboundSchema.parse(
      hrisCompaniesUpdatePassThrough,
    ),
  );
}

export function hrisCompaniesUpdatePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdatePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdatePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdatePassThrough' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateRequestBody$inboundSchema: z.ZodType<
  HrisCompaniesUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  legal_name: z.nullable(z.string()),
  display_name: z.nullable(z.string()).optional(),
  subdomain: z.nullable(z.string()).optional(),
  status: HrisCompaniesUpdateStatus$inboundSchema.optional(),
  company_number: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisCompaniesUpdateCurrency$inboundSchema).optional(),
  addresses: z.array(z.lazy(() => HrisCompaniesUpdateAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => HrisCompaniesUpdatePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisCompaniesUpdateEmails$inboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => HrisCompaniesUpdateWebsites$inboundSchema))
    .optional(),
  debtor_id: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => HrisCompaniesUpdatePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "legal_name": "legalName",
    "display_name": "displayName",
    "company_number": "companyNumber",
    "phone_numbers": "phoneNumbers",
    "debtor_id": "debtorId",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisCompaniesUpdateRequestBody$Outbound = {
  legal_name: string | null;
  display_name?: string | null | undefined;
  subdomain?: string | null | undefined;
  status?: string | undefined;
  company_number?: string | null | undefined;
  currency?: string | null | undefined;
  addresses?: Array<HrisCompaniesUpdateAddresses$Outbound> | undefined;
  phone_numbers?: Array<HrisCompaniesUpdatePhoneNumbers$Outbound> | undefined;
  emails?: Array<HrisCompaniesUpdateEmails$Outbound> | undefined;
  websites?: Array<HrisCompaniesUpdateWebsites$Outbound> | undefined;
  debtor_id?: string | null | undefined;
  pass_through?: Array<HrisCompaniesUpdatePassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisCompaniesUpdateRequestBody$outboundSchema: z.ZodType<
  HrisCompaniesUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateRequestBody
> = z.object({
  legalName: z.nullable(z.string()),
  displayName: z.nullable(z.string()).optional(),
  subdomain: z.nullable(z.string()).optional(),
  status: HrisCompaniesUpdateStatus$outboundSchema.optional(),
  companyNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisCompaniesUpdateCurrency$outboundSchema).optional(),
  addresses: z.array(z.lazy(() => HrisCompaniesUpdateAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => HrisCompaniesUpdatePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisCompaniesUpdateEmails$outboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => HrisCompaniesUpdateWebsites$outboundSchema))
    .optional(),
  debtorId: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => HrisCompaniesUpdatePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    legalName: "legal_name",
    displayName: "display_name",
    companyNumber: "company_number",
    phoneNumbers: "phone_numbers",
    debtorId: "debtor_id",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateRequestBody$ {
  /** @deprecated use `HrisCompaniesUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateRequestBody$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateRequestBody$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateRequestBody$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateRequestBody$Outbound;
}

export function hrisCompaniesUpdateRequestBodyToJSON(
  hrisCompaniesUpdateRequestBody: HrisCompaniesUpdateRequestBody,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateRequestBody$outboundSchema.parse(
      hrisCompaniesUpdateRequestBody,
    ),
  );
}

export function hrisCompaniesUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateRequest$inboundSchema: z.ZodType<
  HrisCompaniesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  RequestBody: z.lazy(() => HrisCompaniesUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type HrisCompaniesUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  RequestBody: HrisCompaniesUpdateRequestBody$Outbound;
};

/** @internal */
export const HrisCompaniesUpdateRequest$outboundSchema: z.ZodType<
  HrisCompaniesUpdateRequest$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  requestBody: z.lazy(() => HrisCompaniesUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateRequest$ {
  /** @deprecated use `HrisCompaniesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateRequest$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateRequest$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateRequest$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateRequest$Outbound;
}

export function hrisCompaniesUpdateRequestToJSON(
  hrisCompaniesUpdateRequest: HrisCompaniesUpdateRequest,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateRequest$outboundSchema.parse(hrisCompaniesUpdateRequest),
  );
}

export function hrisCompaniesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateRequest' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateDetail$inboundSchema: z.ZodType<
  HrisCompaniesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisCompaniesUpdateDetail$outboundSchema: z.ZodType<
  HrisCompaniesUpdateDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateDetail$ {
  /** @deprecated use `HrisCompaniesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateDetail$Outbound;
}

export function hrisCompaniesUpdateDetailToJSON(
  hrisCompaniesUpdateDetail: HrisCompaniesUpdateDetail,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateDetail$outboundSchema.parse(hrisCompaniesUpdateDetail),
  );
}

export function hrisCompaniesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisCompaniesUpdateHrisCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisCompaniesUpdateHrisCompaniesResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesUpdateHrisCompaniesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesUpdateHrisCompaniesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateHrisCompaniesResponseBody$ {
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesUpdateHrisCompaniesResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateHrisCompaniesResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateHrisCompaniesResponseBody$Outbound;
}

export function hrisCompaniesUpdateHrisCompaniesResponseBodyToJSON(
  hrisCompaniesUpdateHrisCompaniesResponseBody:
    HrisCompaniesUpdateHrisCompaniesResponseBody,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateHrisCompaniesResponseBody$outboundSchema.parse(
      hrisCompaniesUpdateHrisCompaniesResponseBody,
    ),
  );
}

export function hrisCompaniesUpdateHrisCompaniesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesUpdateHrisCompaniesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesUpdateHrisCompaniesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesUpdateHrisCompaniesResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateUnifiedId$inboundSchema: z.ZodType<
  HrisCompaniesUpdateUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type HrisCompaniesUpdateUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const HrisCompaniesUpdateUnifiedId$outboundSchema: z.ZodType<
  HrisCompaniesUpdateUnifiedId$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateUnifiedId$ {
  /** @deprecated use `HrisCompaniesUpdateUnifiedId$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateUnifiedId$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateUnifiedId$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateUnifiedId$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateUnifiedId$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateUnifiedId$Outbound;
}

export function hrisCompaniesUpdateUnifiedIdToJSON(
  hrisCompaniesUpdateUnifiedId: HrisCompaniesUpdateUnifiedId,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateUnifiedId$outboundSchema.parse(
      hrisCompaniesUpdateUnifiedId,
    ),
  );
}

export function hrisCompaniesUpdateUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateUnifiedId' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisCompaniesUpdateUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisCompaniesUpdateResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisCompaniesUpdateUnifiedId$Outbound;
};

/** @internal */
export const HrisCompaniesUpdateResponseBody$outboundSchema: z.ZodType<
  HrisCompaniesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisCompaniesUpdateUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateResponseBody$ {
  /** @deprecated use `HrisCompaniesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateResponseBody$Outbound;
}

export function hrisCompaniesUpdateResponseBodyToJSON(
  hrisCompaniesUpdateResponseBody: HrisCompaniesUpdateResponseBody,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateResponseBody$outboundSchema.parse(
      hrisCompaniesUpdateResponseBody,
    ),
  );
}

export function hrisCompaniesUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesUpdateResponse$inboundSchema: z.ZodType<
  HrisCompaniesUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisCompaniesUpdateResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisCompaniesUpdateHrisCompaniesResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisCompaniesUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisCompaniesUpdateResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisCompaniesUpdateHrisCompaniesResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisCompaniesUpdateResponse$outboundSchema: z.ZodType<
  HrisCompaniesUpdateResponse$Outbound,
  z.ZodTypeDef,
  HrisCompaniesUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisCompaniesUpdateResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisCompaniesUpdateHrisCompaniesResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesUpdateResponse$ {
  /** @deprecated use `HrisCompaniesUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesUpdateResponse$inboundSchema;
  /** @deprecated use `HrisCompaniesUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesUpdateResponse$outboundSchema;
  /** @deprecated use `HrisCompaniesUpdateResponse$Outbound` instead. */
  export type Outbound = HrisCompaniesUpdateResponse$Outbound;
}

export function hrisCompaniesUpdateResponseToJSON(
  hrisCompaniesUpdateResponse: HrisCompaniesUpdateResponse,
): string {
  return JSON.stringify(
    HrisCompaniesUpdateResponse$outboundSchema.parse(
      hrisCompaniesUpdateResponse,
    ),
  );
}

export function hrisCompaniesUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesUpdateResponse' from JSON`,
  );
}
