/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmActivitiesOneGlobals = {
  /**
   * A unique identifier assigned to the consumer, necessary for authenticating and authorizing the API request. This ensures that the request is associated with the correct consumer account.
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmActivitiesOneRequest = {
  /**
   * The unique identifier of the activity record you wish to delete. This ID is crucial for specifying which record should be removed from the CRM system.
   */
  id: string;
  /**
   * A unique identifier assigned to the consumer, necessary for authenticating and authorizing the API request. This ensures that the request is associated with the correct consumer account.
   */
  consumerId?: string | undefined;
  /**
   * The unique identifier for your Unify application, required to authenticate API requests and ensure they are processed within the correct application context.
   */
  appId?: string | undefined;
  /**
   * Optional header to specify the service ID for targeting a specific service integration, such as 'pipedrive'. This is useful when multiple integrations are active and you need to direct the request to a particular service.
   */
  serviceId?: string | undefined;
  /**
   * A boolean flag that, when set to true, returns the raw data as received from the service. This is primarily useful for debugging and development purposes, allowing you to see the unprocessed response.
   */
  raw?: boolean | undefined;
  /**
   * This parameter allows users to specify which fields to include in the API response by providing a comma-separated list. This customization helps optimize data handling and performance by returning only the necessary data fields.
   */
  fields?: string | null | undefined;
};

export type CrmActivitiesOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Activity
   */
  getActivityResponse?: components.GetActivityResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmActivitiesOneGlobals$inboundSchema: z.ZodType<
  CrmActivitiesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmActivitiesOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmActivitiesOneGlobals$outboundSchema: z.ZodType<
  CrmActivitiesOneGlobals$Outbound,
  z.ZodTypeDef,
  CrmActivitiesOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmActivitiesOneGlobals$ {
  /** @deprecated use `CrmActivitiesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmActivitiesOneGlobals$inboundSchema;
  /** @deprecated use `CrmActivitiesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmActivitiesOneGlobals$outboundSchema;
  /** @deprecated use `CrmActivitiesOneGlobals$Outbound` instead. */
  export type Outbound = CrmActivitiesOneGlobals$Outbound;
}

export function crmActivitiesOneGlobalsToJSON(
  crmActivitiesOneGlobals: CrmActivitiesOneGlobals,
): string {
  return JSON.stringify(
    CrmActivitiesOneGlobals$outboundSchema.parse(crmActivitiesOneGlobals),
  );
}

export function crmActivitiesOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmActivitiesOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmActivitiesOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmActivitiesOneGlobals' from JSON`,
  );
}

/** @internal */
export const CrmActivitiesOneRequest$inboundSchema: z.ZodType<
  CrmActivitiesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type CrmActivitiesOneRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const CrmActivitiesOneRequest$outboundSchema: z.ZodType<
  CrmActivitiesOneRequest$Outbound,
  z.ZodTypeDef,
  CrmActivitiesOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmActivitiesOneRequest$ {
  /** @deprecated use `CrmActivitiesOneRequest$inboundSchema` instead. */
  export const inboundSchema = CrmActivitiesOneRequest$inboundSchema;
  /** @deprecated use `CrmActivitiesOneRequest$outboundSchema` instead. */
  export const outboundSchema = CrmActivitiesOneRequest$outboundSchema;
  /** @deprecated use `CrmActivitiesOneRequest$Outbound` instead. */
  export type Outbound = CrmActivitiesOneRequest$Outbound;
}

export function crmActivitiesOneRequestToJSON(
  crmActivitiesOneRequest: CrmActivitiesOneRequest,
): string {
  return JSON.stringify(
    CrmActivitiesOneRequest$outboundSchema.parse(crmActivitiesOneRequest),
  );
}

export function crmActivitiesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmActivitiesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmActivitiesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmActivitiesOneRequest' from JSON`,
  );
}

/** @internal */
export const CrmActivitiesOneResponse$inboundSchema: z.ZodType<
  CrmActivitiesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetActivityResponse: components.GetActivityResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetActivityResponse": "getActivityResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmActivitiesOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetActivityResponse?: components.GetActivityResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmActivitiesOneResponse$outboundSchema: z.ZodType<
  CrmActivitiesOneResponse$Outbound,
  z.ZodTypeDef,
  CrmActivitiesOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getActivityResponse: components.GetActivityResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getActivityResponse: "GetActivityResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmActivitiesOneResponse$ {
  /** @deprecated use `CrmActivitiesOneResponse$inboundSchema` instead. */
  export const inboundSchema = CrmActivitiesOneResponse$inboundSchema;
  /** @deprecated use `CrmActivitiesOneResponse$outboundSchema` instead. */
  export const outboundSchema = CrmActivitiesOneResponse$outboundSchema;
  /** @deprecated use `CrmActivitiesOneResponse$Outbound` instead. */
  export type Outbound = CrmActivitiesOneResponse$Outbound;
}

export function crmActivitiesOneResponseToJSON(
  crmActivitiesOneResponse: CrmActivitiesOneResponse,
): string {
  return JSON.stringify(
    CrmActivitiesOneResponse$outboundSchema.parse(crmActivitiesOneResponse),
  );
}

export function crmActivitiesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmActivitiesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmActivitiesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmActivitiesOneResponse' from JSON`,
  );
}
