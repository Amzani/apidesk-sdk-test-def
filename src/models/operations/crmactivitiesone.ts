/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmActivitiesOneGlobals = {
  /**
   * A unique identifier for the consumer, required to specify the data source or destination for the API operation. This ID is essential for authenticating and authorizing the request within the CRM system.
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmActivitiesOneRequest = {
  /**
   * The unique identifier of the activity to be deleted. This parameter is required to specify which activity record should be removed from the CRM system. Ensure that the ID corresponds to an existing activity to avoid errors.
   */
  id: string;
  /**
   * An optional identifier for the specific service to be called, such as 'pipedrive'. This is only required when multiple integrations are active, allowing the API to route the request to the appropriate service.
   */
  serviceId?: string | undefined;
  /**
   * A boolean flag that determines whether to include the raw response in the output. This is primarily used for debugging purposes to gain insights into the API's response structure.
   */
  raw?: boolean | undefined;
  /**
   * Enables selective retrieval of specific fields in the API response, improving performance by reducing data load. Specify fields as a comma-separated list, and use dot notation for nested properties.
   */
  fields?: string | null | undefined;
};

export type CrmActivitiesOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Activity
   */
  getActivityResponse?: components.GetActivityResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmActivitiesOneGlobals$inboundSchema: z.ZodType<
  CrmActivitiesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmActivitiesOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmActivitiesOneGlobals$outboundSchema: z.ZodType<
  CrmActivitiesOneGlobals$Outbound,
  z.ZodTypeDef,
  CrmActivitiesOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmActivitiesOneGlobals$ {
  /** @deprecated use `CrmActivitiesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmActivitiesOneGlobals$inboundSchema;
  /** @deprecated use `CrmActivitiesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmActivitiesOneGlobals$outboundSchema;
  /** @deprecated use `CrmActivitiesOneGlobals$Outbound` instead. */
  export type Outbound = CrmActivitiesOneGlobals$Outbound;
}

export function crmActivitiesOneGlobalsToJSON(
  crmActivitiesOneGlobals: CrmActivitiesOneGlobals,
): string {
  return JSON.stringify(
    CrmActivitiesOneGlobals$outboundSchema.parse(crmActivitiesOneGlobals),
  );
}

export function crmActivitiesOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmActivitiesOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmActivitiesOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmActivitiesOneGlobals' from JSON`,
  );
}

/** @internal */
export const CrmActivitiesOneRequest$inboundSchema: z.ZodType<
  CrmActivitiesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type CrmActivitiesOneRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const CrmActivitiesOneRequest$outboundSchema: z.ZodType<
  CrmActivitiesOneRequest$Outbound,
  z.ZodTypeDef,
  CrmActivitiesOneRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmActivitiesOneRequest$ {
  /** @deprecated use `CrmActivitiesOneRequest$inboundSchema` instead. */
  export const inboundSchema = CrmActivitiesOneRequest$inboundSchema;
  /** @deprecated use `CrmActivitiesOneRequest$outboundSchema` instead. */
  export const outboundSchema = CrmActivitiesOneRequest$outboundSchema;
  /** @deprecated use `CrmActivitiesOneRequest$Outbound` instead. */
  export type Outbound = CrmActivitiesOneRequest$Outbound;
}

export function crmActivitiesOneRequestToJSON(
  crmActivitiesOneRequest: CrmActivitiesOneRequest,
): string {
  return JSON.stringify(
    CrmActivitiesOneRequest$outboundSchema.parse(crmActivitiesOneRequest),
  );
}

export function crmActivitiesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmActivitiesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmActivitiesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmActivitiesOneRequest' from JSON`,
  );
}

/** @internal */
export const CrmActivitiesOneResponse$inboundSchema: z.ZodType<
  CrmActivitiesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetActivityResponse: components.GetActivityResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetActivityResponse": "getActivityResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmActivitiesOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetActivityResponse?: components.GetActivityResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmActivitiesOneResponse$outboundSchema: z.ZodType<
  CrmActivitiesOneResponse$Outbound,
  z.ZodTypeDef,
  CrmActivitiesOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getActivityResponse: components.GetActivityResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getActivityResponse: "GetActivityResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmActivitiesOneResponse$ {
  /** @deprecated use `CrmActivitiesOneResponse$inboundSchema` instead. */
  export const inboundSchema = CrmActivitiesOneResponse$inboundSchema;
  /** @deprecated use `CrmActivitiesOneResponse$outboundSchema` instead. */
  export const outboundSchema = CrmActivitiesOneResponse$outboundSchema;
  /** @deprecated use `CrmActivitiesOneResponse$Outbound` instead. */
  export type Outbound = CrmActivitiesOneResponse$Outbound;
}

export function crmActivitiesOneResponseToJSON(
  crmActivitiesOneResponse: CrmActivitiesOneResponse,
): string {
  return JSON.stringify(
    CrmActivitiesOneResponse$outboundSchema.parse(crmActivitiesOneResponse),
  );
}

export function crmActivitiesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmActivitiesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmActivitiesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmActivitiesOneResponse' from JSON`,
  );
}
