/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsOneSecurity = {
  apiKey: string;
};

export type ContactsOneRequest = {
  /**
   * The unique identifier of the activity record to be deleted. This parameter is essential as it specifies which activity in the CRM system will be removed. Ensure that the ID corresponds to an existing activity to avoid errors.
   */
  id: string;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' query parameter allows API users to customize the response by specifying which fields to include. This parameter accepts a comma-separated string of field names, enabling users to retrieve only the necessary data. If omitted, the API returns all available fields. Nested properties can be requested using dot notation, enhancing the flexibility of data retrieval.
   */
  fields?: string | null | undefined;
  /**
   * An optional query parameter that allows users to apply filters to the data being retrieved. This parameter supports complex filtering using a deep object style, enabling precise data retrieval based on specific criteria such as name, email, or associated company ID. Filters help in narrowing down the results to match specific conditions, enhancing the relevance of the data returned.
   */
  filter?: components.ContactsFilter | undefined;
};

export type ContactsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Contact
   */
  contactGetResponse?: components.ContactGetResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const ContactsOneSecurity$inboundSchema: z.ZodType<
  ContactsOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ContactsOneSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ContactsOneSecurity$outboundSchema: z.ZodType<
  ContactsOneSecurity$Outbound,
  z.ZodTypeDef,
  ContactsOneSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneSecurity$ {
  /** @deprecated use `ContactsOneSecurity$inboundSchema` instead. */
  export const inboundSchema = ContactsOneSecurity$inboundSchema;
  /** @deprecated use `ContactsOneSecurity$outboundSchema` instead. */
  export const outboundSchema = ContactsOneSecurity$outboundSchema;
  /** @deprecated use `ContactsOneSecurity$Outbound` instead. */
  export type Outbound = ContactsOneSecurity$Outbound;
}

export function contactsOneSecurityToJSON(
  contactsOneSecurity: ContactsOneSecurity,
): string {
  return JSON.stringify(
    ContactsOneSecurity$outboundSchema.parse(contactsOneSecurity),
  );
}

export function contactsOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneSecurity' from JSON`,
  );
}

/** @internal */
export const ContactsOneRequest$inboundSchema: z.ZodType<
  ContactsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
  filter: components.ContactsFilter$inboundSchema.optional(),
});

/** @internal */
export type ContactsOneRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
  filter?: components.ContactsFilter$Outbound | undefined;
};

/** @internal */
export const ContactsOneRequest$outboundSchema: z.ZodType<
  ContactsOneRequest$Outbound,
  z.ZodTypeDef,
  ContactsOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
  filter: components.ContactsFilter$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneRequest$ {
  /** @deprecated use `ContactsOneRequest$inboundSchema` instead. */
  export const inboundSchema = ContactsOneRequest$inboundSchema;
  /** @deprecated use `ContactsOneRequest$outboundSchema` instead. */
  export const outboundSchema = ContactsOneRequest$outboundSchema;
  /** @deprecated use `ContactsOneRequest$Outbound` instead. */
  export type Outbound = ContactsOneRequest$Outbound;
}

export function contactsOneRequestToJSON(
  contactsOneRequest: ContactsOneRequest,
): string {
  return JSON.stringify(
    ContactsOneRequest$outboundSchema.parse(contactsOneRequest),
  );
}

export function contactsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneRequest' from JSON`,
  );
}

/** @internal */
export const ContactsOneResponse$inboundSchema: z.ZodType<
  ContactsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ContactGetResponse: components.ContactGetResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ContactGetResponse": "contactGetResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type ContactsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ContactGetResponse?: components.ContactGetResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const ContactsOneResponse$outboundSchema: z.ZodType<
  ContactsOneResponse$Outbound,
  z.ZodTypeDef,
  ContactsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  contactGetResponse: components.ContactGetResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    contactGetResponse: "ContactGetResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneResponse$ {
  /** @deprecated use `ContactsOneResponse$inboundSchema` instead. */
  export const inboundSchema = ContactsOneResponse$inboundSchema;
  /** @deprecated use `ContactsOneResponse$outboundSchema` instead. */
  export const outboundSchema = ContactsOneResponse$outboundSchema;
  /** @deprecated use `ContactsOneResponse$Outbound` instead. */
  export type Outbound = ContactsOneResponse$Outbound;
}

export function contactsOneResponseToJSON(
  contactsOneResponse: ContactsOneResponse,
): string {
  return JSON.stringify(
    ContactsOneResponse$outboundSchema.parse(contactsOneResponse),
  );
}

export function contactsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneResponse' from JSON`,
  );
}
