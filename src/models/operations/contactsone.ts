/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsOneSecurity = {
  apiKey: string;
};

/**
 * Apply filters
 */
export type ContactsOneQueryParamFilter = {
  /**
   * Name of the contact to filter on
   */
  name?: string | undefined;
  /**
   * First name of the contact to filter on
   */
  firstName?: string | undefined;
  /**
   * Last name of the contact to filter on
   */
  lastName?: string | undefined;
  /**
   * Email of the contact to filter on
   */
  email?: string | undefined;
  /**
   * Phone number of the contact to filter on
   */
  phoneNumber?: string | undefined;
  /**
   * Unique identifier for the associated company of the contact to filter on
   */
  companyId?: string | undefined;
  /**
   * Unique identifier for the owner of the contact to filter on
   */
  ownerId?: string | undefined;
};

export type ContactsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
  /**
   * Apply filters
   */
  filter?: ContactsOneQueryParamFilter | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type ContactsOneContactsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The type of the contact.
 */
export const ContactsOneType = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * The type of the contact.
 */
export type ContactsOneType = ClosedEnum<typeof ContactsOneType>;

/**
 * The gender of the contact.
 */
export const ContactsOneGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact.
 */
export type ContactsOneGender = ClosedEnum<typeof ContactsOneGender>;

/**
 * The type of website
 */
export const ContactsOneContactsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type ContactsOneContactsType = ClosedEnum<
  typeof ContactsOneContactsType
>;

export type ContactsOneWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: ContactsOneContactsType | null | undefined;
};

/**
 * The type of address.
 */
export const ContactsOneContactsResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type ContactsOneContactsResponseType = ClosedEnum<
  typeof ContactsOneContactsResponseType
>;

export type ContactsOneAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: ContactsOneContactsResponseType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type ContactsOneSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const ContactsOneContactsResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type ContactsOneContactsResponse200Type = ClosedEnum<
  typeof ContactsOneContactsResponse200Type
>;

export type ContactsOnePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: ContactsOneContactsResponse200Type | null | undefined;
};

/**
 * Email type
 */
export const ContactsOneContactsResponse200ApplicationJSONType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type ContactsOneContactsResponse200ApplicationJSONType = ClosedEnum<
  typeof ContactsOneContactsResponse200ApplicationJSONType
>;

export type ContactsOneEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: ContactsOneContactsResponse200ApplicationJSONType | null | undefined;
};

export type ContactsOneValue6 = {};

export type ContactsOneValue4 = {};

export type ContactsOneValue =
  | ContactsOneValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ContactsOneValue6>;

export type ContactsOneCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | ContactsOneValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ContactsOneValue6>
    | null
    | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type ContactsOneCustomMappings = {};

export type ContactsOneExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type ContactsOnePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<ContactsOneExtendPaths> | undefined;
};

export type ContactsOneData = {
  /**
   * Unique identifier for the contact.
   */
  id?: string | undefined;
  /**
   * Full name of the contact.
   */
  name: string | null;
  /**
   * The owner of the contact.
   */
  ownerId?: string | null | undefined;
  /**
   * The type of the contact.
   */
  type?: ContactsOneType | null | undefined;
  /**
   * The company the contact is associated with.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company the contact is associated with.
   */
  companyName?: string | null | undefined;
  /**
   * The lead the contact is associated with.
   */
  leadId?: string | null | undefined;
  /**
   * The first name of the contact.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the contact.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the contact.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the contact.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the contact.
   */
  suffix?: string | null | undefined;
  /**
   * The job title of the contact.
   */
  title?: string | null | undefined;
  /**
   * The department of the contact.
   */
  department?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact.
   */
  gender?: ContactsOneGender | null | undefined;
  /**
   * The birthday of the contact.
   */
  birthday?: string | null | undefined;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * The lead source of the contact.
   */
  leadSource?: string | null | undefined;
  /**
   * The fax number of the contact.
   */
  fax?: string | null | undefined;
  /**
   * The description of the contact.
   */
  description?: string | null | undefined;
  /**
   * The current balance of the contact.
   */
  currentBalance?: number | null | undefined;
  /**
   * The status of the contact.
   */
  status?: string | null | undefined;
  /**
   * The active status of the contact.
   */
  active?: boolean | null | undefined;
  websites?: Array<ContactsOneWebsites> | undefined;
  addresses?: Array<ContactsOneAddresses> | undefined;
  socialLinks?: Array<ContactsOneSocialLinks> | undefined;
  phoneNumbers?: Array<ContactsOnePhoneNumbers> | undefined;
  emails?: Array<ContactsOneEmails> | undefined;
  emailDomain?: string | null | undefined;
  customFields?: Array<ContactsOneCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * The first call date of the contact.
   */
  firstCallAt?: Date | null | undefined;
  /**
   * The first email date of the contact.
   */
  firstEmailAt?: Date | null | undefined;
  /**
   * The last activity date of the contact.
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: ContactsOneCustomMappings | null | undefined;
  /**
   * The last update date of the contact.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The creation date of the contact.
   */
  createdAt?: Date | null | undefined;
  /**
   * The opportunity ids of the contact.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<ContactsOnePassThrough> | undefined;
};

/**
 * Contact
 */
export type ContactsOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: ContactsOneData;
};

export type ContactsOneResponse =
  | ContactsOneResponseBody
  | ContactsOneContactsResponseBody;

/** @internal */
export const ContactsOneSecurity$inboundSchema: z.ZodType<
  ContactsOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ContactsOneSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ContactsOneSecurity$outboundSchema: z.ZodType<
  ContactsOneSecurity$Outbound,
  z.ZodTypeDef,
  ContactsOneSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneSecurity$ {
  /** @deprecated use `ContactsOneSecurity$inboundSchema` instead. */
  export const inboundSchema = ContactsOneSecurity$inboundSchema;
  /** @deprecated use `ContactsOneSecurity$outboundSchema` instead. */
  export const outboundSchema = ContactsOneSecurity$outboundSchema;
  /** @deprecated use `ContactsOneSecurity$Outbound` instead. */
  export type Outbound = ContactsOneSecurity$Outbound;
}

export function contactsOneSecurityToJSON(
  contactsOneSecurity: ContactsOneSecurity,
): string {
  return JSON.stringify(
    ContactsOneSecurity$outboundSchema.parse(contactsOneSecurity),
  );
}

export function contactsOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneSecurity' from JSON`,
  );
}

/** @internal */
export const ContactsOneQueryParamFilter$inboundSchema: z.ZodType<
  ContactsOneQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone_number: z.string().optional(),
  company_id: z.string().optional(),
  owner_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "phone_number": "phoneNumber",
    "company_id": "companyId",
    "owner_id": "ownerId",
  });
});

/** @internal */
export type ContactsOneQueryParamFilter$Outbound = {
  name?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone_number?: string | undefined;
  company_id?: string | undefined;
  owner_id?: string | undefined;
};

/** @internal */
export const ContactsOneQueryParamFilter$outboundSchema: z.ZodType<
  ContactsOneQueryParamFilter$Outbound,
  z.ZodTypeDef,
  ContactsOneQueryParamFilter
> = z.object({
  name: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phoneNumber: z.string().optional(),
  companyId: z.string().optional(),
  ownerId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    phoneNumber: "phone_number",
    companyId: "company_id",
    ownerId: "owner_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneQueryParamFilter$ {
  /** @deprecated use `ContactsOneQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = ContactsOneQueryParamFilter$inboundSchema;
  /** @deprecated use `ContactsOneQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = ContactsOneQueryParamFilter$outboundSchema;
  /** @deprecated use `ContactsOneQueryParamFilter$Outbound` instead. */
  export type Outbound = ContactsOneQueryParamFilter$Outbound;
}

export function contactsOneQueryParamFilterToJSON(
  contactsOneQueryParamFilter: ContactsOneQueryParamFilter,
): string {
  return JSON.stringify(
    ContactsOneQueryParamFilter$outboundSchema.parse(
      contactsOneQueryParamFilter,
    ),
  );
}

export function contactsOneQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const ContactsOneRequest$inboundSchema: z.ZodType<
  ContactsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
  filter: z.lazy(() => ContactsOneQueryParamFilter$inboundSchema).optional(),
});

/** @internal */
export type ContactsOneRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
  filter?: ContactsOneQueryParamFilter$Outbound | undefined;
};

/** @internal */
export const ContactsOneRequest$outboundSchema: z.ZodType<
  ContactsOneRequest$Outbound,
  z.ZodTypeDef,
  ContactsOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
  filter: z.lazy(() => ContactsOneQueryParamFilter$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneRequest$ {
  /** @deprecated use `ContactsOneRequest$inboundSchema` instead. */
  export const inboundSchema = ContactsOneRequest$inboundSchema;
  /** @deprecated use `ContactsOneRequest$outboundSchema` instead. */
  export const outboundSchema = ContactsOneRequest$outboundSchema;
  /** @deprecated use `ContactsOneRequest$Outbound` instead. */
  export type Outbound = ContactsOneRequest$Outbound;
}

export function contactsOneRequestToJSON(
  contactsOneRequest: ContactsOneRequest,
): string {
  return JSON.stringify(
    ContactsOneRequest$outboundSchema.parse(contactsOneRequest),
  );
}

export function contactsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneRequest' from JSON`,
  );
}

/** @internal */
export const ContactsOneDetail$inboundSchema: z.ZodType<
  ContactsOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsOneDetail$outboundSchema: z.ZodType<
  ContactsOneDetail$Outbound,
  z.ZodTypeDef,
  ContactsOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneDetail$ {
  /** @deprecated use `ContactsOneDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsOneDetail$inboundSchema;
  /** @deprecated use `ContactsOneDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsOneDetail$outboundSchema;
  /** @deprecated use `ContactsOneDetail$Outbound` instead. */
  export type Outbound = ContactsOneDetail$Outbound;
}

export function contactsOneDetailToJSON(
  contactsOneDetail: ContactsOneDetail,
): string {
  return JSON.stringify(
    ContactsOneDetail$outboundSchema.parse(contactsOneDetail),
  );
}

export function contactsOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneDetail' from JSON`,
  );
}

/** @internal */
export const ContactsOneContactsResponseBody$inboundSchema: z.ZodType<
  ContactsOneContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type ContactsOneContactsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsOneContactsResponseBody$outboundSchema: z.ZodType<
  ContactsOneContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsOneContactsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsResponseBody$ {
  /** @deprecated use `ContactsOneContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsOneContactsResponseBody$inboundSchema;
  /** @deprecated use `ContactsOneContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsOneContactsResponseBody$outboundSchema;
  /** @deprecated use `ContactsOneContactsResponseBody$Outbound` instead. */
  export type Outbound = ContactsOneContactsResponseBody$Outbound;
}

export function contactsOneContactsResponseBodyToJSON(
  contactsOneContactsResponseBody: ContactsOneContactsResponseBody,
): string {
  return JSON.stringify(
    ContactsOneContactsResponseBody$outboundSchema.parse(
      contactsOneContactsResponseBody,
    ),
  );
}

export function contactsOneContactsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneContactsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneContactsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneContactsResponseBody' from JSON`,
  );
}

/** @internal */
export const ContactsOneType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsOneType
> = z.nativeEnum(ContactsOneType);

/** @internal */
export const ContactsOneType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsOneType
> = ContactsOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneType$ {
  /** @deprecated use `ContactsOneType$inboundSchema` instead. */
  export const inboundSchema = ContactsOneType$inboundSchema;
  /** @deprecated use `ContactsOneType$outboundSchema` instead. */
  export const outboundSchema = ContactsOneType$outboundSchema;
}

/** @internal */
export const ContactsOneGender$inboundSchema: z.ZodNativeEnum<
  typeof ContactsOneGender
> = z.nativeEnum(ContactsOneGender);

/** @internal */
export const ContactsOneGender$outboundSchema: z.ZodNativeEnum<
  typeof ContactsOneGender
> = ContactsOneGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneGender$ {
  /** @deprecated use `ContactsOneGender$inboundSchema` instead. */
  export const inboundSchema = ContactsOneGender$inboundSchema;
  /** @deprecated use `ContactsOneGender$outboundSchema` instead. */
  export const outboundSchema = ContactsOneGender$outboundSchema;
}

/** @internal */
export const ContactsOneContactsType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsOneContactsType
> = z.nativeEnum(ContactsOneContactsType);

/** @internal */
export const ContactsOneContactsType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsOneContactsType
> = ContactsOneContactsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsType$ {
  /** @deprecated use `ContactsOneContactsType$inboundSchema` instead. */
  export const inboundSchema = ContactsOneContactsType$inboundSchema;
  /** @deprecated use `ContactsOneContactsType$outboundSchema` instead. */
  export const outboundSchema = ContactsOneContactsType$outboundSchema;
}

/** @internal */
export const ContactsOneWebsites$inboundSchema: z.ZodType<
  ContactsOneWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ContactsOneContactsType$inboundSchema).optional(),
});

/** @internal */
export type ContactsOneWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsOneWebsites$outboundSchema: z.ZodType<
  ContactsOneWebsites$Outbound,
  z.ZodTypeDef,
  ContactsOneWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ContactsOneContactsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneWebsites$ {
  /** @deprecated use `ContactsOneWebsites$inboundSchema` instead. */
  export const inboundSchema = ContactsOneWebsites$inboundSchema;
  /** @deprecated use `ContactsOneWebsites$outboundSchema` instead. */
  export const outboundSchema = ContactsOneWebsites$outboundSchema;
  /** @deprecated use `ContactsOneWebsites$Outbound` instead. */
  export type Outbound = ContactsOneWebsites$Outbound;
}

export function contactsOneWebsitesToJSON(
  contactsOneWebsites: ContactsOneWebsites,
): string {
  return JSON.stringify(
    ContactsOneWebsites$outboundSchema.parse(contactsOneWebsites),
  );
}

export function contactsOneWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneWebsites' from JSON`,
  );
}

/** @internal */
export const ContactsOneContactsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsOneContactsResponseType
> = z.nativeEnum(ContactsOneContactsResponseType);

/** @internal */
export const ContactsOneContactsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsOneContactsResponseType
> = ContactsOneContactsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsResponseType$ {
  /** @deprecated use `ContactsOneContactsResponseType$inboundSchema` instead. */
  export const inboundSchema = ContactsOneContactsResponseType$inboundSchema;
  /** @deprecated use `ContactsOneContactsResponseType$outboundSchema` instead. */
  export const outboundSchema = ContactsOneContactsResponseType$outboundSchema;
}

/** @internal */
export const ContactsOneAddresses$inboundSchema: z.ZodType<
  ContactsOneAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsOneContactsResponseType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ContactsOneAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ContactsOneAddresses$outboundSchema: z.ZodType<
  ContactsOneAddresses$Outbound,
  z.ZodTypeDef,
  ContactsOneAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsOneContactsResponseType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneAddresses$ {
  /** @deprecated use `ContactsOneAddresses$inboundSchema` instead. */
  export const inboundSchema = ContactsOneAddresses$inboundSchema;
  /** @deprecated use `ContactsOneAddresses$outboundSchema` instead. */
  export const outboundSchema = ContactsOneAddresses$outboundSchema;
  /** @deprecated use `ContactsOneAddresses$Outbound` instead. */
  export type Outbound = ContactsOneAddresses$Outbound;
}

export function contactsOneAddressesToJSON(
  contactsOneAddresses: ContactsOneAddresses,
): string {
  return JSON.stringify(
    ContactsOneAddresses$outboundSchema.parse(contactsOneAddresses),
  );
}

export function contactsOneAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneAddresses' from JSON`,
  );
}

/** @internal */
export const ContactsOneSocialLinks$inboundSchema: z.ZodType<
  ContactsOneSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type ContactsOneSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsOneSocialLinks$outboundSchema: z.ZodType<
  ContactsOneSocialLinks$Outbound,
  z.ZodTypeDef,
  ContactsOneSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneSocialLinks$ {
  /** @deprecated use `ContactsOneSocialLinks$inboundSchema` instead. */
  export const inboundSchema = ContactsOneSocialLinks$inboundSchema;
  /** @deprecated use `ContactsOneSocialLinks$outboundSchema` instead. */
  export const outboundSchema = ContactsOneSocialLinks$outboundSchema;
  /** @deprecated use `ContactsOneSocialLinks$Outbound` instead. */
  export type Outbound = ContactsOneSocialLinks$Outbound;
}

export function contactsOneSocialLinksToJSON(
  contactsOneSocialLinks: ContactsOneSocialLinks,
): string {
  return JSON.stringify(
    ContactsOneSocialLinks$outboundSchema.parse(contactsOneSocialLinks),
  );
}

export function contactsOneSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneSocialLinks' from JSON`,
  );
}

/** @internal */
export const ContactsOneContactsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof ContactsOneContactsResponse200Type
> = z.nativeEnum(ContactsOneContactsResponse200Type);

/** @internal */
export const ContactsOneContactsResponse200Type$outboundSchema: z.ZodNativeEnum<
  typeof ContactsOneContactsResponse200Type
> = ContactsOneContactsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsResponse200Type$ {
  /** @deprecated use `ContactsOneContactsResponse200Type$inboundSchema` instead. */
  export const inboundSchema = ContactsOneContactsResponse200Type$inboundSchema;
  /** @deprecated use `ContactsOneContactsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    ContactsOneContactsResponse200Type$outboundSchema;
}

/** @internal */
export const ContactsOnePhoneNumbers$inboundSchema: z.ZodType<
  ContactsOnePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsOneContactsResponse200Type$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ContactsOnePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsOnePhoneNumbers$outboundSchema: z.ZodType<
  ContactsOnePhoneNumbers$Outbound,
  z.ZodTypeDef,
  ContactsOnePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsOneContactsResponse200Type$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOnePhoneNumbers$ {
  /** @deprecated use `ContactsOnePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ContactsOnePhoneNumbers$inboundSchema;
  /** @deprecated use `ContactsOnePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = ContactsOnePhoneNumbers$outboundSchema;
  /** @deprecated use `ContactsOnePhoneNumbers$Outbound` instead. */
  export type Outbound = ContactsOnePhoneNumbers$Outbound;
}

export function contactsOnePhoneNumbersToJSON(
  contactsOnePhoneNumbers: ContactsOnePhoneNumbers,
): string {
  return JSON.stringify(
    ContactsOnePhoneNumbers$outboundSchema.parse(contactsOnePhoneNumbers),
  );
}

export function contactsOnePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOnePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOnePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOnePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ContactsOneContactsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof ContactsOneContactsResponse200ApplicationJSONType> = z
    .nativeEnum(ContactsOneContactsResponse200ApplicationJSONType);

/** @internal */
export const ContactsOneContactsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof ContactsOneContactsResponse200ApplicationJSONType> =
    ContactsOneContactsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneContactsResponse200ApplicationJSONType$ {
  /** @deprecated use `ContactsOneContactsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    ContactsOneContactsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `ContactsOneContactsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    ContactsOneContactsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const ContactsOneEmails$inboundSchema: z.ZodType<
  ContactsOneEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    ContactsOneContactsResponse200ApplicationJSONType$inboundSchema,
  ).optional(),
});

/** @internal */
export type ContactsOneEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsOneEmails$outboundSchema: z.ZodType<
  ContactsOneEmails$Outbound,
  z.ZodTypeDef,
  ContactsOneEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    ContactsOneContactsResponse200ApplicationJSONType$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneEmails$ {
  /** @deprecated use `ContactsOneEmails$inboundSchema` instead. */
  export const inboundSchema = ContactsOneEmails$inboundSchema;
  /** @deprecated use `ContactsOneEmails$outboundSchema` instead. */
  export const outboundSchema = ContactsOneEmails$outboundSchema;
  /** @deprecated use `ContactsOneEmails$Outbound` instead. */
  export type Outbound = ContactsOneEmails$Outbound;
}

export function contactsOneEmailsToJSON(
  contactsOneEmails: ContactsOneEmails,
): string {
  return JSON.stringify(
    ContactsOneEmails$outboundSchema.parse(contactsOneEmails),
  );
}

export function contactsOneEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneEmails' from JSON`,
  );
}

/** @internal */
export const ContactsOneValue6$inboundSchema: z.ZodType<
  ContactsOneValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactsOneValue6$Outbound = {};

/** @internal */
export const ContactsOneValue6$outboundSchema: z.ZodType<
  ContactsOneValue6$Outbound,
  z.ZodTypeDef,
  ContactsOneValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneValue6$ {
  /** @deprecated use `ContactsOneValue6$inboundSchema` instead. */
  export const inboundSchema = ContactsOneValue6$inboundSchema;
  /** @deprecated use `ContactsOneValue6$outboundSchema` instead. */
  export const outboundSchema = ContactsOneValue6$outboundSchema;
  /** @deprecated use `ContactsOneValue6$Outbound` instead. */
  export type Outbound = ContactsOneValue6$Outbound;
}

export function contactsOneValue6ToJSON(
  contactsOneValue6: ContactsOneValue6,
): string {
  return JSON.stringify(
    ContactsOneValue6$outboundSchema.parse(contactsOneValue6),
  );
}

export function contactsOneValue6FromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneValue6' from JSON`,
  );
}

/** @internal */
export const ContactsOneValue4$inboundSchema: z.ZodType<
  ContactsOneValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactsOneValue4$Outbound = {};

/** @internal */
export const ContactsOneValue4$outboundSchema: z.ZodType<
  ContactsOneValue4$Outbound,
  z.ZodTypeDef,
  ContactsOneValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneValue4$ {
  /** @deprecated use `ContactsOneValue4$inboundSchema` instead. */
  export const inboundSchema = ContactsOneValue4$inboundSchema;
  /** @deprecated use `ContactsOneValue4$outboundSchema` instead. */
  export const outboundSchema = ContactsOneValue4$outboundSchema;
  /** @deprecated use `ContactsOneValue4$Outbound` instead. */
  export type Outbound = ContactsOneValue4$Outbound;
}

export function contactsOneValue4ToJSON(
  contactsOneValue4: ContactsOneValue4,
): string {
  return JSON.stringify(
    ContactsOneValue4$outboundSchema.parse(contactsOneValue4),
  );
}

export function contactsOneValue4FromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneValue4' from JSON`,
  );
}

/** @internal */
export const ContactsOneValue$inboundSchema: z.ZodType<
  ContactsOneValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContactsOneValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ContactsOneValue6$inboundSchema)),
]);

/** @internal */
export type ContactsOneValue$Outbound =
  | ContactsOneValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ContactsOneValue6$Outbound>;

/** @internal */
export const ContactsOneValue$outboundSchema: z.ZodType<
  ContactsOneValue$Outbound,
  z.ZodTypeDef,
  ContactsOneValue
> = z.union([
  z.lazy(() => ContactsOneValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ContactsOneValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneValue$ {
  /** @deprecated use `ContactsOneValue$inboundSchema` instead. */
  export const inboundSchema = ContactsOneValue$inboundSchema;
  /** @deprecated use `ContactsOneValue$outboundSchema` instead. */
  export const outboundSchema = ContactsOneValue$outboundSchema;
  /** @deprecated use `ContactsOneValue$Outbound` instead. */
  export type Outbound = ContactsOneValue$Outbound;
}

export function contactsOneValueToJSON(
  contactsOneValue: ContactsOneValue,
): string {
  return JSON.stringify(
    ContactsOneValue$outboundSchema.parse(contactsOneValue),
  );
}

export function contactsOneValueFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneValue' from JSON`,
  );
}

/** @internal */
export const ContactsOneCustomFields$inboundSchema: z.ZodType<
  ContactsOneCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ContactsOneValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ContactsOneValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ContactsOneCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ContactsOneValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ContactsOneValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ContactsOneCustomFields$outboundSchema: z.ZodType<
  ContactsOneCustomFields$Outbound,
  z.ZodTypeDef,
  ContactsOneCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ContactsOneValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ContactsOneValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneCustomFields$ {
  /** @deprecated use `ContactsOneCustomFields$inboundSchema` instead. */
  export const inboundSchema = ContactsOneCustomFields$inboundSchema;
  /** @deprecated use `ContactsOneCustomFields$outboundSchema` instead. */
  export const outboundSchema = ContactsOneCustomFields$outboundSchema;
  /** @deprecated use `ContactsOneCustomFields$Outbound` instead. */
  export type Outbound = ContactsOneCustomFields$Outbound;
}

export function contactsOneCustomFieldsToJSON(
  contactsOneCustomFields: ContactsOneCustomFields,
): string {
  return JSON.stringify(
    ContactsOneCustomFields$outboundSchema.parse(contactsOneCustomFields),
  );
}

export function contactsOneCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneCustomFields' from JSON`,
  );
}

/** @internal */
export const ContactsOneCustomMappings$inboundSchema: z.ZodType<
  ContactsOneCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactsOneCustomMappings$Outbound = {};

/** @internal */
export const ContactsOneCustomMappings$outboundSchema: z.ZodType<
  ContactsOneCustomMappings$Outbound,
  z.ZodTypeDef,
  ContactsOneCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneCustomMappings$ {
  /** @deprecated use `ContactsOneCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ContactsOneCustomMappings$inboundSchema;
  /** @deprecated use `ContactsOneCustomMappings$outboundSchema` instead. */
  export const outboundSchema = ContactsOneCustomMappings$outboundSchema;
  /** @deprecated use `ContactsOneCustomMappings$Outbound` instead. */
  export type Outbound = ContactsOneCustomMappings$Outbound;
}

export function contactsOneCustomMappingsToJSON(
  contactsOneCustomMappings: ContactsOneCustomMappings,
): string {
  return JSON.stringify(
    ContactsOneCustomMappings$outboundSchema.parse(contactsOneCustomMappings),
  );
}

export function contactsOneCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneCustomMappings' from JSON`,
  );
}

/** @internal */
export const ContactsOneExtendPaths$inboundSchema: z.ZodType<
  ContactsOneExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ContactsOneExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ContactsOneExtendPaths$outboundSchema: z.ZodType<
  ContactsOneExtendPaths$Outbound,
  z.ZodTypeDef,
  ContactsOneExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneExtendPaths$ {
  /** @deprecated use `ContactsOneExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ContactsOneExtendPaths$inboundSchema;
  /** @deprecated use `ContactsOneExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ContactsOneExtendPaths$outboundSchema;
  /** @deprecated use `ContactsOneExtendPaths$Outbound` instead. */
  export type Outbound = ContactsOneExtendPaths$Outbound;
}

export function contactsOneExtendPathsToJSON(
  contactsOneExtendPaths: ContactsOneExtendPaths,
): string {
  return JSON.stringify(
    ContactsOneExtendPaths$outboundSchema.parse(contactsOneExtendPaths),
  );
}

export function contactsOneExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneExtendPaths' from JSON`,
  );
}

/** @internal */
export const ContactsOnePassThrough$inboundSchema: z.ZodType<
  ContactsOnePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ContactsOneExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ContactsOnePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ContactsOneExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ContactsOnePassThrough$outboundSchema: z.ZodType<
  ContactsOnePassThrough$Outbound,
  z.ZodTypeDef,
  ContactsOnePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ContactsOneExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOnePassThrough$ {
  /** @deprecated use `ContactsOnePassThrough$inboundSchema` instead. */
  export const inboundSchema = ContactsOnePassThrough$inboundSchema;
  /** @deprecated use `ContactsOnePassThrough$outboundSchema` instead. */
  export const outboundSchema = ContactsOnePassThrough$outboundSchema;
  /** @deprecated use `ContactsOnePassThrough$Outbound` instead. */
  export type Outbound = ContactsOnePassThrough$Outbound;
}

export function contactsOnePassThroughToJSON(
  contactsOnePassThrough: ContactsOnePassThrough,
): string {
  return JSON.stringify(
    ContactsOnePassThrough$outboundSchema.parse(contactsOnePassThrough),
  );
}

export function contactsOnePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOnePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOnePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOnePassThrough' from JSON`,
  );
}

/** @internal */
export const ContactsOneData$inboundSchema: z.ZodType<
  ContactsOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsOneType$inboundSchema).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(ContactsOneGender$inboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ContactsOneWebsites$inboundSchema)).optional(),
  addresses: z.array(z.lazy(() => ContactsOneAddresses$inboundSchema))
    .optional(),
  social_links: z.array(z.lazy(() => ContactsOneSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(z.lazy(() => ContactsOnePhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => ContactsOneEmails$inboundSchema)).optional(),
  email_domain: z.nullable(z.string()).optional(),
  custom_fields: z.array(z.lazy(() => ContactsOneCustomFields$inboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  first_call_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  first_email_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_activity_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ContactsOneCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  opportunity_ids: z.array(z.string()).optional(),
  pass_through: z.array(z.lazy(() => ContactsOnePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "company_id": "companyId",
    "company_name": "companyName",
    "lead_id": "leadId",
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "photo_url": "photoUrl",
    "lead_source": "leadSource",
    "current_balance": "currentBalance",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "email_domain": "emailDomain",
    "custom_fields": "customFields",
    "first_call_at": "firstCallAt",
    "first_email_at": "firstEmailAt",
    "last_activity_at": "lastActivityAt",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "opportunity_ids": "opportunityIds",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ContactsOneData$Outbound = {
  id?: string | undefined;
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<ContactsOneWebsites$Outbound> | undefined;
  addresses?: Array<ContactsOneAddresses$Outbound> | undefined;
  social_links?: Array<ContactsOneSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<ContactsOnePhoneNumbers$Outbound> | undefined;
  emails?: Array<ContactsOneEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<ContactsOneCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  first_call_at?: string | null | undefined;
  first_email_at?: string | null | undefined;
  last_activity_at?: string | null | undefined;
  custom_mappings?: ContactsOneCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<ContactsOnePassThrough$Outbound> | undefined;
};

/** @internal */
export const ContactsOneData$outboundSchema: z.ZodType<
  ContactsOneData$Outbound,
  z.ZodTypeDef,
  ContactsOneData
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsOneType$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(ContactsOneGender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ContactsOneWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ContactsOneAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(z.lazy(() => ContactsOneSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => ContactsOnePhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => ContactsOneEmails$outboundSchema)).optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(z.lazy(() => ContactsOneCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  firstCallAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  firstEmailAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => ContactsOneCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(z.lazy(() => ContactsOnePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    firstCallAt: "first_call_at",
    firstEmailAt: "first_email_at",
    lastActivityAt: "last_activity_at",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneData$ {
  /** @deprecated use `ContactsOneData$inboundSchema` instead. */
  export const inboundSchema = ContactsOneData$inboundSchema;
  /** @deprecated use `ContactsOneData$outboundSchema` instead. */
  export const outboundSchema = ContactsOneData$outboundSchema;
  /** @deprecated use `ContactsOneData$Outbound` instead. */
  export type Outbound = ContactsOneData$Outbound;
}

export function contactsOneDataToJSON(
  contactsOneData: ContactsOneData,
): string {
  return JSON.stringify(ContactsOneData$outboundSchema.parse(contactsOneData));
}

export function contactsOneDataFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneData' from JSON`,
  );
}

/** @internal */
export const ContactsOneResponseBody$inboundSchema: z.ZodType<
  ContactsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactsOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ContactsOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ContactsOneData$Outbound;
};

/** @internal */
export const ContactsOneResponseBody$outboundSchema: z.ZodType<
  ContactsOneResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactsOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneResponseBody$ {
  /** @deprecated use `ContactsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsOneResponseBody$inboundSchema;
  /** @deprecated use `ContactsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsOneResponseBody$outboundSchema;
  /** @deprecated use `ContactsOneResponseBody$Outbound` instead. */
  export type Outbound = ContactsOneResponseBody$Outbound;
}

export function contactsOneResponseBodyToJSON(
  contactsOneResponseBody: ContactsOneResponseBody,
): string {
  return JSON.stringify(
    ContactsOneResponseBody$outboundSchema.parse(contactsOneResponseBody),
  );
}

export function contactsOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneResponseBody' from JSON`,
  );
}

/** @internal */
export const ContactsOneResponse$inboundSchema: z.ZodType<
  ContactsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContactsOneResponseBody$inboundSchema),
  z.lazy(() => ContactsOneContactsResponseBody$inboundSchema),
]);

/** @internal */
export type ContactsOneResponse$Outbound =
  | ContactsOneResponseBody$Outbound
  | ContactsOneContactsResponseBody$Outbound;

/** @internal */
export const ContactsOneResponse$outboundSchema: z.ZodType<
  ContactsOneResponse$Outbound,
  z.ZodTypeDef,
  ContactsOneResponse
> = z.union([
  z.lazy(() => ContactsOneResponseBody$outboundSchema),
  z.lazy(() => ContactsOneContactsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsOneResponse$ {
  /** @deprecated use `ContactsOneResponse$inboundSchema` instead. */
  export const inboundSchema = ContactsOneResponse$inboundSchema;
  /** @deprecated use `ContactsOneResponse$outboundSchema` instead. */
  export const outboundSchema = ContactsOneResponse$outboundSchema;
  /** @deprecated use `ContactsOneResponse$Outbound` instead. */
  export type Outbound = ContactsOneResponse$Outbound;
}

export function contactsOneResponseToJSON(
  contactsOneResponse: ContactsOneResponse,
): string {
  return JSON.stringify(
    ContactsOneResponse$outboundSchema.parse(contactsOneResponse),
  );
}

export function contactsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsOneResponse' from JSON`,
  );
}
