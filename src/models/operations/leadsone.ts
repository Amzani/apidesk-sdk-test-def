/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LeadsOneSecurity = {
  apiKey: string;
};

export type LeadsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type LeadsOneLeadsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const LeadsOneCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type LeadsOneCurrency = ClosedEnum<typeof LeadsOneCurrency>;

/**
 * The type of website
 */
export const LeadsOneType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type LeadsOneType = ClosedEnum<typeof LeadsOneType>;

export type LeadsOneWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: LeadsOneType | null | undefined;
};

/**
 * The type of address.
 */
export const LeadsOneLeadsType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type LeadsOneLeadsType = ClosedEnum<typeof LeadsOneLeadsType>;

export type LeadsOneAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: LeadsOneLeadsType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type LeadsOneSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const LeadsOneLeadsResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type LeadsOneLeadsResponseType = ClosedEnum<
  typeof LeadsOneLeadsResponseType
>;

export type LeadsOnePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: LeadsOneLeadsResponseType | null | undefined;
};

/**
 * Email type
 */
export const LeadsOneLeadsResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type LeadsOneLeadsResponse200Type = ClosedEnum<
  typeof LeadsOneLeadsResponse200Type
>;

export type LeadsOneEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: LeadsOneLeadsResponse200Type | null | undefined;
};

export type LeadsOneValue6 = {};

export type LeadsOneValue4 = {};

export type LeadsOneValue =
  | LeadsOneValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadsOneValue6>;

export type LeadsOneCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | LeadsOneValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadsOneValue6>
    | null
    | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type LeadsOneCustomMappings = {};

export type LeadsOneExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type LeadsOnePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<LeadsOneExtendPaths> | undefined;
};

export type LeadsOneData = {
  /**
   * Unique identifier for the contact.
   */
  id?: string | undefined;
  /**
   * Full name of the lead.
   */
  name: string;
  /**
   * The name of the company the lead is associated with.
   */
  companyName: string | null;
  /**
   * The owner of the lead.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the owner of the lead.
   */
  ownerName?: string | null | undefined;
  /**
   * The company the lead is associated with.
   */
  companyId?: string | null | undefined;
  /**
   * The identifier of the lead.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead.
   */
  lastName?: string | null | undefined;
  /**
   * The description of the lead.
   */
  description?: string | null | undefined;
  /**
   * The prefix of the lead.
   */
  prefix?: string | null | undefined;
  /**
   * The job title of the lead.
   */
  title?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  status?: string | null | undefined;
  /**
   * The monetary amount of the lead.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: LeadsOneCurrency | null | undefined;
  /**
   * The fax number of the lead.
   */
  fax?: string | null | undefined;
  websites?: Array<LeadsOneWebsites> | undefined;
  addresses?: Array<LeadsOneAddresses> | undefined;
  socialLinks?: Array<LeadsOneSocialLinks> | undefined;
  phoneNumbers?: Array<LeadsOnePhoneNumbers> | undefined;
  emails?: Array<LeadsOneEmails> | undefined;
  customFields?: Array<LeadsOneCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: LeadsOneCustomMappings | null | undefined;
  /**
   * Date updated in ISO 8601 format
   */
  updatedAt?: string | null | undefined;
  /**
   * Date created in ISO 8601 format
   */
  createdAt?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<LeadsOnePassThrough> | undefined;
};

/**
 * Lead
 */
export type LeadsOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: LeadsOneData;
};

export type LeadsOneResponse = LeadsOneResponseBody | LeadsOneLeadsResponseBody;

/** @internal */
export const LeadsOneSecurity$inboundSchema: z.ZodType<
  LeadsOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type LeadsOneSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const LeadsOneSecurity$outboundSchema: z.ZodType<
  LeadsOneSecurity$Outbound,
  z.ZodTypeDef,
  LeadsOneSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneSecurity$ {
  /** @deprecated use `LeadsOneSecurity$inboundSchema` instead. */
  export const inboundSchema = LeadsOneSecurity$inboundSchema;
  /** @deprecated use `LeadsOneSecurity$outboundSchema` instead. */
  export const outboundSchema = LeadsOneSecurity$outboundSchema;
  /** @deprecated use `LeadsOneSecurity$Outbound` instead. */
  export type Outbound = LeadsOneSecurity$Outbound;
}

export function leadsOneSecurityToJSON(
  leadsOneSecurity: LeadsOneSecurity,
): string {
  return JSON.stringify(
    LeadsOneSecurity$outboundSchema.parse(leadsOneSecurity),
  );
}

export function leadsOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneSecurity' from JSON`,
  );
}

/** @internal */
export const LeadsOneRequest$inboundSchema: z.ZodType<
  LeadsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type LeadsOneRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const LeadsOneRequest$outboundSchema: z.ZodType<
  LeadsOneRequest$Outbound,
  z.ZodTypeDef,
  LeadsOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneRequest$ {
  /** @deprecated use `LeadsOneRequest$inboundSchema` instead. */
  export const inboundSchema = LeadsOneRequest$inboundSchema;
  /** @deprecated use `LeadsOneRequest$outboundSchema` instead. */
  export const outboundSchema = LeadsOneRequest$outboundSchema;
  /** @deprecated use `LeadsOneRequest$Outbound` instead. */
  export type Outbound = LeadsOneRequest$Outbound;
}

export function leadsOneRequestToJSON(
  leadsOneRequest: LeadsOneRequest,
): string {
  return JSON.stringify(LeadsOneRequest$outboundSchema.parse(leadsOneRequest));
}

export function leadsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneRequest' from JSON`,
  );
}

/** @internal */
export const LeadsOneDetail$inboundSchema: z.ZodType<
  LeadsOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsOneDetail$outboundSchema: z.ZodType<
  LeadsOneDetail$Outbound,
  z.ZodTypeDef,
  LeadsOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneDetail$ {
  /** @deprecated use `LeadsOneDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsOneDetail$inboundSchema;
  /** @deprecated use `LeadsOneDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsOneDetail$outboundSchema;
  /** @deprecated use `LeadsOneDetail$Outbound` instead. */
  export type Outbound = LeadsOneDetail$Outbound;
}

export function leadsOneDetailToJSON(leadsOneDetail: LeadsOneDetail): string {
  return JSON.stringify(LeadsOneDetail$outboundSchema.parse(leadsOneDetail));
}

export function leadsOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneDetail' from JSON`,
  );
}

/** @internal */
export const LeadsOneLeadsResponseBody$inboundSchema: z.ZodType<
  LeadsOneLeadsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type LeadsOneLeadsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsOneLeadsResponseBody$outboundSchema: z.ZodType<
  LeadsOneLeadsResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsOneLeadsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsResponseBody$ {
  /** @deprecated use `LeadsOneLeadsResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsOneLeadsResponseBody$inboundSchema;
  /** @deprecated use `LeadsOneLeadsResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsOneLeadsResponseBody$outboundSchema;
  /** @deprecated use `LeadsOneLeadsResponseBody$Outbound` instead. */
  export type Outbound = LeadsOneLeadsResponseBody$Outbound;
}

export function leadsOneLeadsResponseBodyToJSON(
  leadsOneLeadsResponseBody: LeadsOneLeadsResponseBody,
): string {
  return JSON.stringify(
    LeadsOneLeadsResponseBody$outboundSchema.parse(leadsOneLeadsResponseBody),
  );
}

export function leadsOneLeadsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneLeadsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneLeadsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneLeadsResponseBody' from JSON`,
  );
}

/** @internal */
export const LeadsOneCurrency$inboundSchema: z.ZodNativeEnum<
  typeof LeadsOneCurrency
> = z.nativeEnum(LeadsOneCurrency);

/** @internal */
export const LeadsOneCurrency$outboundSchema: z.ZodNativeEnum<
  typeof LeadsOneCurrency
> = LeadsOneCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneCurrency$ {
  /** @deprecated use `LeadsOneCurrency$inboundSchema` instead. */
  export const inboundSchema = LeadsOneCurrency$inboundSchema;
  /** @deprecated use `LeadsOneCurrency$outboundSchema` instead. */
  export const outboundSchema = LeadsOneCurrency$outboundSchema;
}

/** @internal */
export const LeadsOneType$inboundSchema: z.ZodNativeEnum<typeof LeadsOneType> =
  z.nativeEnum(LeadsOneType);

/** @internal */
export const LeadsOneType$outboundSchema: z.ZodNativeEnum<typeof LeadsOneType> =
  LeadsOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneType$ {
  /** @deprecated use `LeadsOneType$inboundSchema` instead. */
  export const inboundSchema = LeadsOneType$inboundSchema;
  /** @deprecated use `LeadsOneType$outboundSchema` instead. */
  export const outboundSchema = LeadsOneType$outboundSchema;
}

/** @internal */
export const LeadsOneWebsites$inboundSchema: z.ZodType<
  LeadsOneWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadsOneType$inboundSchema).optional(),
});

/** @internal */
export type LeadsOneWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsOneWebsites$outboundSchema: z.ZodType<
  LeadsOneWebsites$Outbound,
  z.ZodTypeDef,
  LeadsOneWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadsOneType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneWebsites$ {
  /** @deprecated use `LeadsOneWebsites$inboundSchema` instead. */
  export const inboundSchema = LeadsOneWebsites$inboundSchema;
  /** @deprecated use `LeadsOneWebsites$outboundSchema` instead. */
  export const outboundSchema = LeadsOneWebsites$outboundSchema;
  /** @deprecated use `LeadsOneWebsites$Outbound` instead. */
  export type Outbound = LeadsOneWebsites$Outbound;
}

export function leadsOneWebsitesToJSON(
  leadsOneWebsites: LeadsOneWebsites,
): string {
  return JSON.stringify(
    LeadsOneWebsites$outboundSchema.parse(leadsOneWebsites),
  );
}

export function leadsOneWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneWebsites' from JSON`,
  );
}

/** @internal */
export const LeadsOneLeadsType$inboundSchema: z.ZodNativeEnum<
  typeof LeadsOneLeadsType
> = z.nativeEnum(LeadsOneLeadsType);

/** @internal */
export const LeadsOneLeadsType$outboundSchema: z.ZodNativeEnum<
  typeof LeadsOneLeadsType
> = LeadsOneLeadsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsType$ {
  /** @deprecated use `LeadsOneLeadsType$inboundSchema` instead. */
  export const inboundSchema = LeadsOneLeadsType$inboundSchema;
  /** @deprecated use `LeadsOneLeadsType$outboundSchema` instead. */
  export const outboundSchema = LeadsOneLeadsType$outboundSchema;
}

/** @internal */
export const LeadsOneAddresses$inboundSchema: z.ZodType<
  LeadsOneAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsOneLeadsType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type LeadsOneAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const LeadsOneAddresses$outboundSchema: z.ZodType<
  LeadsOneAddresses$Outbound,
  z.ZodTypeDef,
  LeadsOneAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsOneLeadsType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneAddresses$ {
  /** @deprecated use `LeadsOneAddresses$inboundSchema` instead. */
  export const inboundSchema = LeadsOneAddresses$inboundSchema;
  /** @deprecated use `LeadsOneAddresses$outboundSchema` instead. */
  export const outboundSchema = LeadsOneAddresses$outboundSchema;
  /** @deprecated use `LeadsOneAddresses$Outbound` instead. */
  export type Outbound = LeadsOneAddresses$Outbound;
}

export function leadsOneAddressesToJSON(
  leadsOneAddresses: LeadsOneAddresses,
): string {
  return JSON.stringify(
    LeadsOneAddresses$outboundSchema.parse(leadsOneAddresses),
  );
}

export function leadsOneAddressesFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneAddresses' from JSON`,
  );
}

/** @internal */
export const LeadsOneSocialLinks$inboundSchema: z.ZodType<
  LeadsOneSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type LeadsOneSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsOneSocialLinks$outboundSchema: z.ZodType<
  LeadsOneSocialLinks$Outbound,
  z.ZodTypeDef,
  LeadsOneSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneSocialLinks$ {
  /** @deprecated use `LeadsOneSocialLinks$inboundSchema` instead. */
  export const inboundSchema = LeadsOneSocialLinks$inboundSchema;
  /** @deprecated use `LeadsOneSocialLinks$outboundSchema` instead. */
  export const outboundSchema = LeadsOneSocialLinks$outboundSchema;
  /** @deprecated use `LeadsOneSocialLinks$Outbound` instead. */
  export type Outbound = LeadsOneSocialLinks$Outbound;
}

export function leadsOneSocialLinksToJSON(
  leadsOneSocialLinks: LeadsOneSocialLinks,
): string {
  return JSON.stringify(
    LeadsOneSocialLinks$outboundSchema.parse(leadsOneSocialLinks),
  );
}

export function leadsOneSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneSocialLinks' from JSON`,
  );
}

/** @internal */
export const LeadsOneLeadsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof LeadsOneLeadsResponseType
> = z.nativeEnum(LeadsOneLeadsResponseType);

/** @internal */
export const LeadsOneLeadsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof LeadsOneLeadsResponseType
> = LeadsOneLeadsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsResponseType$ {
  /** @deprecated use `LeadsOneLeadsResponseType$inboundSchema` instead. */
  export const inboundSchema = LeadsOneLeadsResponseType$inboundSchema;
  /** @deprecated use `LeadsOneLeadsResponseType$outboundSchema` instead. */
  export const outboundSchema = LeadsOneLeadsResponseType$outboundSchema;
}

/** @internal */
export const LeadsOnePhoneNumbers$inboundSchema: z.ZodType<
  LeadsOnePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsOneLeadsResponseType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type LeadsOnePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsOnePhoneNumbers$outboundSchema: z.ZodType<
  LeadsOnePhoneNumbers$Outbound,
  z.ZodTypeDef,
  LeadsOnePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsOneLeadsResponseType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOnePhoneNumbers$ {
  /** @deprecated use `LeadsOnePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = LeadsOnePhoneNumbers$inboundSchema;
  /** @deprecated use `LeadsOnePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = LeadsOnePhoneNumbers$outboundSchema;
  /** @deprecated use `LeadsOnePhoneNumbers$Outbound` instead. */
  export type Outbound = LeadsOnePhoneNumbers$Outbound;
}

export function leadsOnePhoneNumbersToJSON(
  leadsOnePhoneNumbers: LeadsOnePhoneNumbers,
): string {
  return JSON.stringify(
    LeadsOnePhoneNumbers$outboundSchema.parse(leadsOnePhoneNumbers),
  );
}

export function leadsOnePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOnePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOnePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOnePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const LeadsOneLeadsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof LeadsOneLeadsResponse200Type
> = z.nativeEnum(LeadsOneLeadsResponse200Type);

/** @internal */
export const LeadsOneLeadsResponse200Type$outboundSchema: z.ZodNativeEnum<
  typeof LeadsOneLeadsResponse200Type
> = LeadsOneLeadsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneLeadsResponse200Type$ {
  /** @deprecated use `LeadsOneLeadsResponse200Type$inboundSchema` instead. */
  export const inboundSchema = LeadsOneLeadsResponse200Type$inboundSchema;
  /** @deprecated use `LeadsOneLeadsResponse200Type$outboundSchema` instead. */
  export const outboundSchema = LeadsOneLeadsResponse200Type$outboundSchema;
}

/** @internal */
export const LeadsOneEmails$inboundSchema: z.ZodType<
  LeadsOneEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadsOneLeadsResponse200Type$inboundSchema).optional(),
});

/** @internal */
export type LeadsOneEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsOneEmails$outboundSchema: z.ZodType<
  LeadsOneEmails$Outbound,
  z.ZodTypeDef,
  LeadsOneEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadsOneLeadsResponse200Type$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneEmails$ {
  /** @deprecated use `LeadsOneEmails$inboundSchema` instead. */
  export const inboundSchema = LeadsOneEmails$inboundSchema;
  /** @deprecated use `LeadsOneEmails$outboundSchema` instead. */
  export const outboundSchema = LeadsOneEmails$outboundSchema;
  /** @deprecated use `LeadsOneEmails$Outbound` instead. */
  export type Outbound = LeadsOneEmails$Outbound;
}

export function leadsOneEmailsToJSON(leadsOneEmails: LeadsOneEmails): string {
  return JSON.stringify(LeadsOneEmails$outboundSchema.parse(leadsOneEmails));
}

export function leadsOneEmailsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneEmails' from JSON`,
  );
}

/** @internal */
export const LeadsOneValue6$inboundSchema: z.ZodType<
  LeadsOneValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadsOneValue6$Outbound = {};

/** @internal */
export const LeadsOneValue6$outboundSchema: z.ZodType<
  LeadsOneValue6$Outbound,
  z.ZodTypeDef,
  LeadsOneValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneValue6$ {
  /** @deprecated use `LeadsOneValue6$inboundSchema` instead. */
  export const inboundSchema = LeadsOneValue6$inboundSchema;
  /** @deprecated use `LeadsOneValue6$outboundSchema` instead. */
  export const outboundSchema = LeadsOneValue6$outboundSchema;
  /** @deprecated use `LeadsOneValue6$Outbound` instead. */
  export type Outbound = LeadsOneValue6$Outbound;
}

export function leadsOneValue6ToJSON(leadsOneValue6: LeadsOneValue6): string {
  return JSON.stringify(LeadsOneValue6$outboundSchema.parse(leadsOneValue6));
}

export function leadsOneValue6FromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneValue6' from JSON`,
  );
}

/** @internal */
export const LeadsOneValue4$inboundSchema: z.ZodType<
  LeadsOneValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadsOneValue4$Outbound = {};

/** @internal */
export const LeadsOneValue4$outboundSchema: z.ZodType<
  LeadsOneValue4$Outbound,
  z.ZodTypeDef,
  LeadsOneValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneValue4$ {
  /** @deprecated use `LeadsOneValue4$inboundSchema` instead. */
  export const inboundSchema = LeadsOneValue4$inboundSchema;
  /** @deprecated use `LeadsOneValue4$outboundSchema` instead. */
  export const outboundSchema = LeadsOneValue4$outboundSchema;
  /** @deprecated use `LeadsOneValue4$Outbound` instead. */
  export type Outbound = LeadsOneValue4$Outbound;
}

export function leadsOneValue4ToJSON(leadsOneValue4: LeadsOneValue4): string {
  return JSON.stringify(LeadsOneValue4$outboundSchema.parse(leadsOneValue4));
}

export function leadsOneValue4FromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneValue4' from JSON`,
  );
}

/** @internal */
export const LeadsOneValue$inboundSchema: z.ZodType<
  LeadsOneValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadsOneValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadsOneValue6$inboundSchema)),
]);

/** @internal */
export type LeadsOneValue$Outbound =
  | LeadsOneValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadsOneValue6$Outbound>;

/** @internal */
export const LeadsOneValue$outboundSchema: z.ZodType<
  LeadsOneValue$Outbound,
  z.ZodTypeDef,
  LeadsOneValue
> = z.union([
  z.lazy(() => LeadsOneValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadsOneValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneValue$ {
  /** @deprecated use `LeadsOneValue$inboundSchema` instead. */
  export const inboundSchema = LeadsOneValue$inboundSchema;
  /** @deprecated use `LeadsOneValue$outboundSchema` instead. */
  export const outboundSchema = LeadsOneValue$outboundSchema;
  /** @deprecated use `LeadsOneValue$Outbound` instead. */
  export type Outbound = LeadsOneValue$Outbound;
}

export function leadsOneValueToJSON(leadsOneValue: LeadsOneValue): string {
  return JSON.stringify(LeadsOneValue$outboundSchema.parse(leadsOneValue));
}

export function leadsOneValueFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneValue' from JSON`,
  );
}

/** @internal */
export const LeadsOneCustomFields$inboundSchema: z.ZodType<
  LeadsOneCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadsOneValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadsOneValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type LeadsOneCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | LeadsOneValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadsOneValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const LeadsOneCustomFields$outboundSchema: z.ZodType<
  LeadsOneCustomFields$Outbound,
  z.ZodTypeDef,
  LeadsOneCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadsOneValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadsOneValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneCustomFields$ {
  /** @deprecated use `LeadsOneCustomFields$inboundSchema` instead. */
  export const inboundSchema = LeadsOneCustomFields$inboundSchema;
  /** @deprecated use `LeadsOneCustomFields$outboundSchema` instead. */
  export const outboundSchema = LeadsOneCustomFields$outboundSchema;
  /** @deprecated use `LeadsOneCustomFields$Outbound` instead. */
  export type Outbound = LeadsOneCustomFields$Outbound;
}

export function leadsOneCustomFieldsToJSON(
  leadsOneCustomFields: LeadsOneCustomFields,
): string {
  return JSON.stringify(
    LeadsOneCustomFields$outboundSchema.parse(leadsOneCustomFields),
  );
}

export function leadsOneCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneCustomFields' from JSON`,
  );
}

/** @internal */
export const LeadsOneCustomMappings$inboundSchema: z.ZodType<
  LeadsOneCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadsOneCustomMappings$Outbound = {};

/** @internal */
export const LeadsOneCustomMappings$outboundSchema: z.ZodType<
  LeadsOneCustomMappings$Outbound,
  z.ZodTypeDef,
  LeadsOneCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneCustomMappings$ {
  /** @deprecated use `LeadsOneCustomMappings$inboundSchema` instead. */
  export const inboundSchema = LeadsOneCustomMappings$inboundSchema;
  /** @deprecated use `LeadsOneCustomMappings$outboundSchema` instead. */
  export const outboundSchema = LeadsOneCustomMappings$outboundSchema;
  /** @deprecated use `LeadsOneCustomMappings$Outbound` instead. */
  export type Outbound = LeadsOneCustomMappings$Outbound;
}

export function leadsOneCustomMappingsToJSON(
  leadsOneCustomMappings: LeadsOneCustomMappings,
): string {
  return JSON.stringify(
    LeadsOneCustomMappings$outboundSchema.parse(leadsOneCustomMappings),
  );
}

export function leadsOneCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneCustomMappings' from JSON`,
  );
}

/** @internal */
export const LeadsOneExtendPaths$inboundSchema: z.ZodType<
  LeadsOneExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type LeadsOneExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const LeadsOneExtendPaths$outboundSchema: z.ZodType<
  LeadsOneExtendPaths$Outbound,
  z.ZodTypeDef,
  LeadsOneExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneExtendPaths$ {
  /** @deprecated use `LeadsOneExtendPaths$inboundSchema` instead. */
  export const inboundSchema = LeadsOneExtendPaths$inboundSchema;
  /** @deprecated use `LeadsOneExtendPaths$outboundSchema` instead. */
  export const outboundSchema = LeadsOneExtendPaths$outboundSchema;
  /** @deprecated use `LeadsOneExtendPaths$Outbound` instead. */
  export type Outbound = LeadsOneExtendPaths$Outbound;
}

export function leadsOneExtendPathsToJSON(
  leadsOneExtendPaths: LeadsOneExtendPaths,
): string {
  return JSON.stringify(
    LeadsOneExtendPaths$outboundSchema.parse(leadsOneExtendPaths),
  );
}

export function leadsOneExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneExtendPaths' from JSON`,
  );
}

/** @internal */
export const LeadsOnePassThrough$inboundSchema: z.ZodType<
  LeadsOnePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => LeadsOneExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type LeadsOnePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<LeadsOneExtendPaths$Outbound> | undefined;
};

/** @internal */
export const LeadsOnePassThrough$outboundSchema: z.ZodType<
  LeadsOnePassThrough$Outbound,
  z.ZodTypeDef,
  LeadsOnePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => LeadsOneExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOnePassThrough$ {
  /** @deprecated use `LeadsOnePassThrough$inboundSchema` instead. */
  export const inboundSchema = LeadsOnePassThrough$inboundSchema;
  /** @deprecated use `LeadsOnePassThrough$outboundSchema` instead. */
  export const outboundSchema = LeadsOnePassThrough$outboundSchema;
  /** @deprecated use `LeadsOnePassThrough$Outbound` instead. */
  export type Outbound = LeadsOnePassThrough$Outbound;
}

export function leadsOnePassThroughToJSON(
  leadsOnePassThrough: LeadsOnePassThrough,
): string {
  return JSON.stringify(
    LeadsOnePassThrough$outboundSchema.parse(leadsOnePassThrough),
  );
}

export function leadsOnePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOnePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOnePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOnePassThrough' from JSON`,
  );
}

/** @internal */
export const LeadsOneData$inboundSchema: z.ZodType<
  LeadsOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(LeadsOneCurrency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => LeadsOneWebsites$inboundSchema)).optional(),
  addresses: z.array(z.lazy(() => LeadsOneAddresses$inboundSchema)).optional(),
  social_links: z.array(z.lazy(() => LeadsOneSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(z.lazy(() => LeadsOnePhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => LeadsOneEmails$inboundSchema)).optional(),
  custom_fields: z.array(z.lazy(() => LeadsOneCustomFields$inboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => LeadsOneCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => LeadsOnePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type LeadsOneData$Outbound = {
  id?: string | undefined;
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<LeadsOneWebsites$Outbound> | undefined;
  addresses?: Array<LeadsOneAddresses$Outbound> | undefined;
  social_links?: Array<LeadsOneSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<LeadsOnePhoneNumbers$Outbound> | undefined;
  emails?: Array<LeadsOneEmails$Outbound> | undefined;
  custom_fields?: Array<LeadsOneCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  custom_mappings?: LeadsOneCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<LeadsOnePassThrough$Outbound> | undefined;
};

/** @internal */
export const LeadsOneData$outboundSchema: z.ZodType<
  LeadsOneData$Outbound,
  z.ZodTypeDef,
  LeadsOneData
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(LeadsOneCurrency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => LeadsOneWebsites$outboundSchema)).optional(),
  addresses: z.array(z.lazy(() => LeadsOneAddresses$outboundSchema)).optional(),
  socialLinks: z.array(z.lazy(() => LeadsOneSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => LeadsOnePhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => LeadsOneEmails$outboundSchema)).optional(),
  customFields: z.array(z.lazy(() => LeadsOneCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customMappings: z.nullable(
    z.lazy(() => LeadsOneCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => LeadsOnePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneData$ {
  /** @deprecated use `LeadsOneData$inboundSchema` instead. */
  export const inboundSchema = LeadsOneData$inboundSchema;
  /** @deprecated use `LeadsOneData$outboundSchema` instead. */
  export const outboundSchema = LeadsOneData$outboundSchema;
  /** @deprecated use `LeadsOneData$Outbound` instead. */
  export type Outbound = LeadsOneData$Outbound;
}

export function leadsOneDataToJSON(leadsOneData: LeadsOneData): string {
  return JSON.stringify(LeadsOneData$outboundSchema.parse(leadsOneData));
}

export function leadsOneDataFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneData' from JSON`,
  );
}

/** @internal */
export const LeadsOneResponseBody$inboundSchema: z.ZodType<
  LeadsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => LeadsOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type LeadsOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: LeadsOneData$Outbound;
};

/** @internal */
export const LeadsOneResponseBody$outboundSchema: z.ZodType<
  LeadsOneResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => LeadsOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneResponseBody$ {
  /** @deprecated use `LeadsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsOneResponseBody$inboundSchema;
  /** @deprecated use `LeadsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsOneResponseBody$outboundSchema;
  /** @deprecated use `LeadsOneResponseBody$Outbound` instead. */
  export type Outbound = LeadsOneResponseBody$Outbound;
}

export function leadsOneResponseBodyToJSON(
  leadsOneResponseBody: LeadsOneResponseBody,
): string {
  return JSON.stringify(
    LeadsOneResponseBody$outboundSchema.parse(leadsOneResponseBody),
  );
}

export function leadsOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneResponseBody' from JSON`,
  );
}

/** @internal */
export const LeadsOneResponse$inboundSchema: z.ZodType<
  LeadsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadsOneResponseBody$inboundSchema),
  z.lazy(() => LeadsOneLeadsResponseBody$inboundSchema),
]);

/** @internal */
export type LeadsOneResponse$Outbound =
  | LeadsOneResponseBody$Outbound
  | LeadsOneLeadsResponseBody$Outbound;

/** @internal */
export const LeadsOneResponse$outboundSchema: z.ZodType<
  LeadsOneResponse$Outbound,
  z.ZodTypeDef,
  LeadsOneResponse
> = z.union([
  z.lazy(() => LeadsOneResponseBody$outboundSchema),
  z.lazy(() => LeadsOneLeadsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsOneResponse$ {
  /** @deprecated use `LeadsOneResponse$inboundSchema` instead. */
  export const inboundSchema = LeadsOneResponse$inboundSchema;
  /** @deprecated use `LeadsOneResponse$outboundSchema` instead. */
  export const outboundSchema = LeadsOneResponse$outboundSchema;
  /** @deprecated use `LeadsOneResponse$Outbound` instead. */
  export type Outbound = LeadsOneResponse$Outbound;
}

export function leadsOneResponseToJSON(
  leadsOneResponse: LeadsOneResponse,
): string {
  return JSON.stringify(
    LeadsOneResponse$outboundSchema.parse(leadsOneResponse),
  );
}

export function leadsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<LeadsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsOneResponse' from JSON`,
  );
}
