/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisEmployeesUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

/**
 * The gender represents the gender identity of a person.
 */
export const HrisEmployeesUpdateGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The gender represents the gender identity of a person.
 */
export type HrisEmployeesUpdateGender = ClosedEnum<
  typeof HrisEmployeesUpdateGender
>;

export type HrisEmployeesUpdatePerson = {
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The gender represents the gender identity of a person.
   */
  gender?: HrisEmployeesUpdateGender | null | undefined;
  /**
   * Initials of the person
   */
  initials?: string | null | undefined;
  /**
   * Date of birth
   */
  birthday?: RFCDate | null | undefined;
  /**
   * Date of death
   */
  deceasedOn?: RFCDate | null | undefined;
};

/**
 * The team the person is currently in.
 */
export type HrisEmployeesUpdateTeam = {
  /**
   * The unique identifier of the team.
   */
  id?: string | null | undefined;
  /**
   * The name of the team.
   */
  name?: string | null | undefined;
};

/**
 * The reason because the employment ended.
 */
export const HrisEmployeesUpdateLeavingReason = {
  Dismissed: "dismissed",
  Resigned: "resigned",
  Redundancy: "redundancy",
  Other: "other",
} as const;
/**
 * The reason because the employment ended.
 */
export type HrisEmployeesUpdateLeavingReason = ClosedEnum<
  typeof HrisEmployeesUpdateLeavingReason
>;

/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export const HrisEmployeesUpdateEmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export type HrisEmployeesUpdateEmploymentStatus = ClosedEnum<
  typeof HrisEmployeesUpdateEmploymentStatus
>;

/**
 * The type of employment relationship the employee has with the organization.
 */
export const HrisEmployeesUpdateEmploymentType = {
  Contractor: "contractor",
  Employee: "employee",
  Freelance: "freelance",
  Temp: "temp",
  Internship: "internship",
  Other: "other",
} as const;
/**
 * The type of employment relationship the employee has with the organization.
 */
export type HrisEmployeesUpdateEmploymentType = ClosedEnum<
  typeof HrisEmployeesUpdateEmploymentType
>;

/**
 * The work schedule of the employee.
 */
export const HrisEmployeesUpdateEmploymentSubType = {
  FullTime: "full_time",
  PartTime: "part_time",
  Hourly: "hourly",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The work schedule of the employee.
 */
export type HrisEmployeesUpdateEmploymentSubType = ClosedEnum<
  typeof HrisEmployeesUpdateEmploymentSubType
>;

export type HrisEmployeesUpdateEmploymentRole = {
  /**
   * The type of employment relationship the employee has with the organization.
   */
  type?: HrisEmployeesUpdateEmploymentType | null | undefined;
  /**
   * The work schedule of the employee.
   */
  subType?: HrisEmployeesUpdateEmploymentSubType | null | undefined;
};

/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export const HrisEmployeesUpdateHrisEmployeesEmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export type HrisEmployeesUpdateHrisEmployeesEmploymentStatus = ClosedEnum<
  typeof HrisEmployeesUpdateHrisEmployeesEmploymentStatus
>;

export type HrisEmployeesUpdateManager = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The name of the manager, often a combination of their first and last names.
   */
  name?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * The email address of the manager.
   */
  email?: string | null | undefined;
  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  employmentStatus?:
    | HrisEmployeesUpdateHrisEmployeesEmploymentStatus
    | null
    | undefined;
};

/**
 * The gender represents the gender identity of a person.
 */
export const HrisEmployeesUpdateHrisEmployeesGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The gender represents the gender identity of a person.
 */
export type HrisEmployeesUpdateHrisEmployeesGender = ClosedEnum<
  typeof HrisEmployeesUpdateHrisEmployeesGender
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesUpdateCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesUpdateCurrency = ClosedEnum<
  typeof HrisEmployeesUpdateCurrency
>;

/**
 * Unit of measurement for employee compensation.
 */
export const HrisEmployeesUpdatePaymentUnit = {
  Hour: "hour",
  Week: "week",
  Month: "month",
  Year: "year",
  Paycheck: "paycheck",
  Other: "other",
} as const;
/**
 * Unit of measurement for employee compensation.
 */
export type HrisEmployeesUpdatePaymentUnit = ClosedEnum<
  typeof HrisEmployeesUpdatePaymentUnit
>;

/**
 * Indicates the status of the job.
 */
export const HrisEmployeesUpdateStatus = {
  Active: "active",
  Inactive: "inactive",
  Other: "other",
} as const;
/**
 * Indicates the status of the job.
 */
export type HrisEmployeesUpdateStatus = ClosedEnum<
  typeof HrisEmployeesUpdateStatus
>;

/**
 * The type of address.
 */
export const HrisEmployeesUpdateType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisEmployeesUpdateType = ClosedEnum<
  typeof HrisEmployeesUpdateType
>;

export type HrisEmployeesUpdateLocation = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisEmployeesUpdateType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type HrisEmployeesUpdateJob = {
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The position and responsibilities of the person within the organization.
   */
  role?: string | null | undefined;
  /**
   * The date on which the employee starts working in their current job role.
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The date on which the employee leaves or is expected to leave their current job role.
   */
  endDate?: RFCDate | null | undefined;
  /**
   * The rate of pay for the employee in their current job role.
   */
  compensationRate?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesUpdateCurrency | null | undefined;
  /**
   * Unit of measurement for employee compensation.
   */
  paymentUnit?: HrisEmployeesUpdatePaymentUnit | null | undefined;
  /**
   * The date on which the employee was hired by the organization
   */
  hiredAt?: RFCDate | null | undefined;
  /**
   * Indicates whether this the employee's primary job.
   */
  isPrimary?: boolean | null | undefined;
  /**
   * Indicates whether this the employee has a manager role.
   */
  isManager?: boolean | null | undefined;
  /**
   * Indicates the status of the job.
   */
  status?: HrisEmployeesUpdateStatus | null | undefined;
  location?: HrisEmployeesUpdateLocation | undefined;
};

/**
 * Unit of measurement for employee compensation.
 */
export const HrisEmployeesUpdateHrisEmployeesPaymentUnit = {
  Hour: "hour",
  Week: "week",
  Month: "month",
  Year: "year",
  Paycheck: "paycheck",
  Other: "other",
} as const;
/**
 * Unit of measurement for employee compensation.
 */
export type HrisEmployeesUpdateHrisEmployeesPaymentUnit = ClosedEnum<
  typeof HrisEmployeesUpdateHrisEmployeesPaymentUnit
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesUpdateHrisEmployeesCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesUpdateHrisEmployeesCurrency = ClosedEnum<
  typeof HrisEmployeesUpdateHrisEmployeesCurrency
>;

/**
 * The FLSA status for this compensation.
 */
export const HrisEmployeesUpdateFlsaStatus = {
  Exempt: "exempt",
  SalariedNonexempt: "salaried-nonexempt",
  Nonexempt: "nonexempt",
  Owner: "owner",
  Other: "other",
} as const;
/**
 * The FLSA status for this compensation.
 */
export type HrisEmployeesUpdateFlsaStatus = ClosedEnum<
  typeof HrisEmployeesUpdateFlsaStatus
>;

/**
 * Frequency of employee compensation.
 */
export const HrisEmployeesUpdatePaymentFrequency = {
  Weekly: "weekly",
  Biweekly: "biweekly",
  Monthly: "monthly",
  ProRata: "pro-rata",
  Other: "other",
} as const;
/**
 * Frequency of employee compensation.
 */
export type HrisEmployeesUpdatePaymentFrequency = ClosedEnum<
  typeof HrisEmployeesUpdatePaymentFrequency
>;

export type HrisEmployeesUpdateCompensation = {
  /**
   * The amount paid per payment unit.
   */
  rate?: number | null | undefined;
  /**
   * Unit of measurement for employee compensation.
   */
  paymentUnit?: HrisEmployeesUpdateHrisEmployeesPaymentUnit | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesUpdateHrisEmployeesCurrency | null | undefined;
  /**
   * The FLSA status for this compensation.
   */
  flsaStatus?: HrisEmployeesUpdateFlsaStatus | null | undefined;
  /**
   * The date on which a change to an employee's compensation takes effect.
   */
  effectiveDate?: string | null | undefined;
  /**
   * Frequency of employee compensation.
   */
  paymentFrequency?: HrisEmployeesUpdatePaymentFrequency | null | undefined;
};

/**
 * The type of address.
 */
export const HrisEmployeesUpdateHrisEmployeesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisEmployeesUpdateHrisEmployeesType = ClosedEnum<
  typeof HrisEmployeesUpdateHrisEmployeesType
>;

export type HrisEmployeesUpdateAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisEmployeesUpdateHrisEmployeesType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const HrisEmployeesUpdateHrisEmployeesRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type HrisEmployeesUpdateHrisEmployeesRequestType = ClosedEnum<
  typeof HrisEmployeesUpdateHrisEmployeesRequestType
>;

export type HrisEmployeesUpdatePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: HrisEmployeesUpdateHrisEmployeesRequestType | null | undefined;
};

/**
 * Email type
 */
export const HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType = ClosedEnum<
  typeof HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType
>;

export type HrisEmployeesUpdateEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?:
    | HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType
    | null
    | undefined;
};

export type Value6 = {};

export type Value4 = {};

export type HrisEmployeesUpdateValue =
  | Value4
  | string
  | number
  | boolean
  | Array<string>
  | Array<Value6>;

export type HrisEmployeesUpdateCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | Value4
    | string
    | number
    | boolean
    | Array<string>
    | Array<Value6>
    | null
    | undefined;
};

export type HrisEmployeesUpdateSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of bank account.
 */
export const HrisEmployeesUpdateAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The type of bank account.
 */
export type HrisEmployeesUpdateAccountType = ClosedEnum<
  typeof HrisEmployeesUpdateAccountType
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesUpdateHrisEmployeesRequestCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesUpdateHrisEmployeesRequestCurrency = ClosedEnum<
  typeof HrisEmployeesUpdateHrisEmployeesRequestCurrency
>;

export type HrisEmployeesUpdateBankAccounts = {
  /**
   * The name of the bank
   */
  bankName?: string | null | undefined;
  /**
   * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name which you used in opening your bank account.
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account.
   */
  accountType?: HrisEmployeesUpdateAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN).
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC).
   */
  bic?: string | null | undefined;
  /**
   * A routing number is a nine-digit code used to identify a financial institution in the United States.
   */
  routingNumber?: string | null | undefined;
  /**
   * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
   */
  bsbNumber?: string | null | undefined;
  /**
   * A branch identifier is a unique identifier for a branch of a bank or financial institution.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
   */
  bankCode?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesUpdateHrisEmployeesRequestCurrency | null | undefined;
};

export type HrisEmployeesUpdateProbationPeriod = {
  /**
   * The date that the employee started their probation period at the company.
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The date that the employee ended their probation period at the company.
   */
  endDate?: RFCDate | null | undefined;
};

export type HrisEmployeesUpdateExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisEmployeesUpdatePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisEmployeesUpdateExtendPaths> | undefined;
};

export type HrisEmployeesUpdateRequestBody = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The name used to display the employee, often a combination of their first and last names.
   */
  displayName?: string | null | undefined;
  /**
   * The name the employee prefers to be addressed by, which may be different from their legal name.
   */
  preferredName?: string | null | undefined;
  /**
   * The initials of the person, usually derived from their first, middle, and last names.
   */
  initials?: string | null | undefined;
  /**
   * A formal salutation for the person. For example, 'Mr', 'Mrs'
   */
  salutation?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The marital status of the employee.
   */
  maritalStatus?: string | null | undefined;
  partner?: HrisEmployeesUpdatePerson | undefined;
  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  division?: string | null | undefined;
  /**
   * Unique identifier of the division this employee belongs to.
   */
  divisionId?: string | null | undefined;
  /**
   * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * Unique identifier of the department ID this employee belongs to.
   */
  departmentId?: string | null | undefined;
  /**
   * Name of the department this employee belongs to.
   */
  departmentName?: string | null | undefined;
  /**
   * The team the person is currently in.
   */
  team?: HrisEmployeesUpdateTeam | null | undefined;
  /**
   * The unique identifier of the company.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company.
   */
  companyName?: string | null | undefined;
  /**
   * A Start Date is the date that the employee started working at the company
   */
  employmentStartDate?: string | null | undefined;
  /**
   * An End Date is the date that the employee ended working at the company
   */
  employmentEndDate?: string | null | undefined;
  /**
   * The reason because the employment ended.
   */
  leavingReason?: HrisEmployeesUpdateLeavingReason | null | undefined;
  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  employeeNumber?: string | null | undefined;
  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  employmentStatus?: HrisEmployeesUpdateEmploymentStatus | null | undefined;
  employmentRole?: HrisEmployeesUpdateEmploymentRole | undefined;
  /**
   * The ethnicity of the employee
   */
  ethnicity?: string | null | undefined;
  manager?: HrisEmployeesUpdateManager | undefined;
  /**
   * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
   */
  directReports?: Array<string> | null | undefined;
  /**
   * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
   */
  socialSecurityNumber?: string | null | undefined;
  /**
   * The date of birth of the person.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * The date the person deceased.
   */
  deceasedOn?: RFCDate | null | undefined;
  /**
   * Country code according to ISO 3166-1 alpha-2.
   */
  countryOfBirth?: string | null | undefined;
  /**
   * A description of the object.
   */
  description?: string | null | undefined;
  /**
   * The gender represents the gender identity of a person.
   */
  gender?: HrisEmployeesUpdateHrisEmployeesGender | null | undefined;
  /**
   * The preferred pronouns of the person.
   */
  pronouns?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  preferredLanguage?: string | null | undefined;
  languages?: Array<string> | undefined;
  nationalities?: Array<string> | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
   */
  timezone?: string | null | undefined;
  /**
   * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
   */
  source?: string | null | undefined;
  /**
   * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
   */
  sourceId?: string | null | undefined;
  recordUrl?: string | null | undefined;
  jobs?: Array<HrisEmployeesUpdateJob> | null | undefined;
  compensations?: Array<HrisEmployeesUpdateCompensation> | null | undefined;
  /**
   * Indicates if the employee works from a remote location.
   */
  worksRemote?: boolean | null | undefined;
  addresses?: Array<HrisEmployeesUpdateAddresses> | undefined;
  phoneNumbers?: Array<HrisEmployeesUpdatePhoneNumbers> | undefined;
  emails?: Array<HrisEmployeesUpdateEmails> | undefined;
  customFields?: Array<HrisEmployeesUpdateCustomFields> | undefined;
  socialLinks?: Array<HrisEmployeesUpdateSocialLinks> | undefined;
  bankAccounts?: Array<HrisEmployeesUpdateBankAccounts> | undefined;
  taxCode?: string | null | undefined;
  taxId?: string | null | undefined;
  /**
   * Indicate the employee's dietary preference.
   */
  dietaryPreference?: string | null | undefined;
  /**
   * Indicate the employee's food allergies.
   */
  foodAllergies?: Array<string> | null | undefined;
  probationPeriod?: HrisEmployeesUpdateProbationPeriod | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisEmployeesUpdatePassThrough> | undefined;
};

export type HrisEmployeesUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  requestBody: HrisEmployeesUpdateRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesUpdateDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisEmployeesUpdateHrisEmployeesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type HrisEmployeesUpdateUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Employees
 */
export type HrisEmployeesUpdateResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisEmployeesUpdateUnifiedId;
};

export type HrisEmployeesUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Employees
   */
  twoHundredApplicationJsonObject?: HrisEmployeesUpdateResponseBody | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisEmployeesUpdateHrisEmployeesResponseBody
    | undefined;
};

/** @internal */
export const HrisEmployeesUpdateGlobals$inboundSchema: z.ZodType<
  HrisEmployeesUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisEmployeesUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisEmployeesUpdateGlobals$outboundSchema: z.ZodType<
  HrisEmployeesUpdateGlobals$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateGlobals$ {
  /** @deprecated use `HrisEmployeesUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateGlobals$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateGlobals$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateGlobals$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateGlobals$Outbound;
}

export function hrisEmployeesUpdateGlobalsToJSON(
  hrisEmployeesUpdateGlobals: HrisEmployeesUpdateGlobals,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateGlobals$outboundSchema.parse(hrisEmployeesUpdateGlobals),
  );
}

export function hrisEmployeesUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateGender$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateGender
> = z.nativeEnum(HrisEmployeesUpdateGender);

/** @internal */
export const HrisEmployeesUpdateGender$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateGender
> = HrisEmployeesUpdateGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateGender$ {
  /** @deprecated use `HrisEmployeesUpdateGender$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateGender$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateGender$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateGender$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdatePerson$inboundSchema: z.ZodType<
  HrisEmployeesUpdatePerson,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesUpdateGender$inboundSchema).optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  deceased_on: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_name": "middleName",
    "deceased_on": "deceasedOn",
  });
});

/** @internal */
export type HrisEmployeesUpdatePerson$Outbound = {
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  gender?: string | null | undefined;
  initials?: string | null | undefined;
  birthday?: string | null | undefined;
  deceased_on?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdatePerson$outboundSchema: z.ZodType<
  HrisEmployeesUpdatePerson$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdatePerson
> = z.object({
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesUpdateGender$outboundSchema).optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  deceasedOn: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    deceasedOn: "deceased_on",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdatePerson$ {
  /** @deprecated use `HrisEmployeesUpdatePerson$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdatePerson$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdatePerson$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdatePerson$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdatePerson$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdatePerson$Outbound;
}

export function hrisEmployeesUpdatePersonToJSON(
  hrisEmployeesUpdatePerson: HrisEmployeesUpdatePerson,
): string {
  return JSON.stringify(
    HrisEmployeesUpdatePerson$outboundSchema.parse(hrisEmployeesUpdatePerson),
  );
}

export function hrisEmployeesUpdatePersonFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdatePerson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdatePerson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdatePerson' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateTeam$inboundSchema: z.ZodType<
  HrisEmployeesUpdateTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisEmployeesUpdateTeam$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdateTeam$outboundSchema: z.ZodType<
  HrisEmployeesUpdateTeam$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateTeam
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateTeam$ {
  /** @deprecated use `HrisEmployeesUpdateTeam$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateTeam$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateTeam$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateTeam$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateTeam$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateTeam$Outbound;
}

export function hrisEmployeesUpdateTeamToJSON(
  hrisEmployeesUpdateTeam: HrisEmployeesUpdateTeam,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateTeam$outboundSchema.parse(hrisEmployeesUpdateTeam),
  );
}

export function hrisEmployeesUpdateTeamFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateTeam' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateLeavingReason$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateLeavingReason
> = z.nativeEnum(HrisEmployeesUpdateLeavingReason);

/** @internal */
export const HrisEmployeesUpdateLeavingReason$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateLeavingReason
> = HrisEmployeesUpdateLeavingReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateLeavingReason$ {
  /** @deprecated use `HrisEmployeesUpdateLeavingReason$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateLeavingReason$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateLeavingReason$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateLeavingReason$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateEmploymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateEmploymentStatus
> = z.nativeEnum(HrisEmployeesUpdateEmploymentStatus);

/** @internal */
export const HrisEmployeesUpdateEmploymentStatus$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateEmploymentStatus> =
    HrisEmployeesUpdateEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateEmploymentStatus$ {
  /** @deprecated use `HrisEmployeesUpdateEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateEmploymentStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateEmploymentStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateEmploymentType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateEmploymentType
> = z.nativeEnum(HrisEmployeesUpdateEmploymentType);

/** @internal */
export const HrisEmployeesUpdateEmploymentType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateEmploymentType
> = HrisEmployeesUpdateEmploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateEmploymentType$ {
  /** @deprecated use `HrisEmployeesUpdateEmploymentType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateEmploymentType$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateEmploymentType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateEmploymentType$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateEmploymentSubType$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateEmploymentSubType> = z.nativeEnum(
    HrisEmployeesUpdateEmploymentSubType,
  );

/** @internal */
export const HrisEmployeesUpdateEmploymentSubType$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateEmploymentSubType> =
    HrisEmployeesUpdateEmploymentSubType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateEmploymentSubType$ {
  /** @deprecated use `HrisEmployeesUpdateEmploymentSubType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateEmploymentSubType$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateEmploymentSubType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateEmploymentSubType$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateEmploymentRole$inboundSchema: z.ZodType<
  HrisEmployeesUpdateEmploymentRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(HrisEmployeesUpdateEmploymentType$inboundSchema).optional(),
  sub_type: z.nullable(HrisEmployeesUpdateEmploymentSubType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "sub_type": "subType",
  });
});

/** @internal */
export type HrisEmployeesUpdateEmploymentRole$Outbound = {
  type?: string | null | undefined;
  sub_type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdateEmploymentRole$outboundSchema: z.ZodType<
  HrisEmployeesUpdateEmploymentRole$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateEmploymentRole
> = z.object({
  type: z.nullable(HrisEmployeesUpdateEmploymentType$outboundSchema).optional(),
  subType: z.nullable(HrisEmployeesUpdateEmploymentSubType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    subType: "sub_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateEmploymentRole$ {
  /** @deprecated use `HrisEmployeesUpdateEmploymentRole$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateEmploymentRole$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateEmploymentRole$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateEmploymentRole$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateEmploymentRole$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateEmploymentRole$Outbound;
}

export function hrisEmployeesUpdateEmploymentRoleToJSON(
  hrisEmployeesUpdateEmploymentRole: HrisEmployeesUpdateEmploymentRole,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateEmploymentRole$outboundSchema.parse(
      hrisEmployeesUpdateEmploymentRole,
    ),
  );
}

export function hrisEmployeesUpdateEmploymentRoleFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateEmploymentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateEmploymentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateEmploymentRole' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesEmploymentStatus$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesEmploymentStatus> = z
    .nativeEnum(HrisEmployeesUpdateHrisEmployeesEmploymentStatus);

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesEmploymentStatus$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesEmploymentStatus> =
    HrisEmployeesUpdateHrisEmployeesEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesEmploymentStatus$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesEmploymentStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesEmploymentStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateManager$inboundSchema: z.ZodType<
  HrisEmployeesUpdateManager,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  employment_status: z.nullable(
    HrisEmployeesUpdateHrisEmployeesEmploymentStatus$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "employment_status": "employmentStatus",
  });
});

/** @internal */
export type HrisEmployeesUpdateManager$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  email?: string | null | undefined;
  employment_status?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdateManager$outboundSchema: z.ZodType<
  HrisEmployeesUpdateManager$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateManager
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  employmentStatus: z.nullable(
    HrisEmployeesUpdateHrisEmployeesEmploymentStatus$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    employmentStatus: "employment_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateManager$ {
  /** @deprecated use `HrisEmployeesUpdateManager$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateManager$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateManager$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateManager$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateManager$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateManager$Outbound;
}

export function hrisEmployeesUpdateManagerToJSON(
  hrisEmployeesUpdateManager: HrisEmployeesUpdateManager,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateManager$outboundSchema.parse(hrisEmployeesUpdateManager),
  );
}

export function hrisEmployeesUpdateManagerFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateManager, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateManager$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateManager' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesGender$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesGender> = z.nativeEnum(
    HrisEmployeesUpdateHrisEmployeesGender,
  );

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesGender$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesGender> =
    HrisEmployeesUpdateHrisEmployeesGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesGender$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesGender$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesGender$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesGender$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesGender$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateCurrency$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateCurrency
> = z.nativeEnum(HrisEmployeesUpdateCurrency);

/** @internal */
export const HrisEmployeesUpdateCurrency$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateCurrency
> = HrisEmployeesUpdateCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateCurrency$ {
  /** @deprecated use `HrisEmployeesUpdateCurrency$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateCurrency$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdatePaymentUnit$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdatePaymentUnit
> = z.nativeEnum(HrisEmployeesUpdatePaymentUnit);

/** @internal */
export const HrisEmployeesUpdatePaymentUnit$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdatePaymentUnit
> = HrisEmployeesUpdatePaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdatePaymentUnit$ {
  /** @deprecated use `HrisEmployeesUpdatePaymentUnit$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdatePaymentUnit$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdatePaymentUnit$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdatePaymentUnit$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateStatus
> = z.nativeEnum(HrisEmployeesUpdateStatus);

/** @internal */
export const HrisEmployeesUpdateStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateStatus
> = HrisEmployeesUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateStatus$ {
  /** @deprecated use `HrisEmployeesUpdateStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateStatus$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateType
> = z.nativeEnum(HrisEmployeesUpdateType);

/** @internal */
export const HrisEmployeesUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateType
> = HrisEmployeesUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateType$ {
  /** @deprecated use `HrisEmployeesUpdateType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateType$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateType$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateType$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateLocation$inboundSchema: z.ZodType<
  HrisEmployeesUpdateLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesUpdateType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisEmployeesUpdateLocation$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdateLocation$outboundSchema: z.ZodType<
  HrisEmployeesUpdateLocation$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateLocation
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesUpdateType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateLocation$ {
  /** @deprecated use `HrisEmployeesUpdateLocation$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateLocation$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateLocation$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateLocation$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateLocation$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateLocation$Outbound;
}

export function hrisEmployeesUpdateLocationToJSON(
  hrisEmployeesUpdateLocation: HrisEmployeesUpdateLocation,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateLocation$outboundSchema.parse(
      hrisEmployeesUpdateLocation,
    ),
  );
}

export function hrisEmployeesUpdateLocationFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateLocation' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateJob$inboundSchema: z.ZodType<
  HrisEmployeesUpdateJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  compensation_rate: z.nullable(z.number()).optional(),
  currency: z.nullable(HrisEmployeesUpdateCurrency$inboundSchema).optional(),
  payment_unit: z.nullable(HrisEmployeesUpdatePaymentUnit$inboundSchema)
    .optional(),
  hired_at: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  is_primary: z.nullable(z.boolean()).optional(),
  is_manager: z.nullable(z.boolean()).optional(),
  status: z.nullable(HrisEmployeesUpdateStatus$inboundSchema).optional(),
  location: z.lazy(() => HrisEmployeesUpdateLocation$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "compensation_rate": "compensationRate",
    "payment_unit": "paymentUnit",
    "hired_at": "hiredAt",
    "is_primary": "isPrimary",
    "is_manager": "isManager",
  });
});

/** @internal */
export type HrisEmployeesUpdateJob$Outbound = {
  title?: string | null | undefined;
  role?: string | null | undefined;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  compensation_rate?: number | null | undefined;
  currency?: string | null | undefined;
  payment_unit?: string | null | undefined;
  hired_at?: string | null | undefined;
  is_primary?: boolean | null | undefined;
  is_manager?: boolean | null | undefined;
  status?: string | null | undefined;
  location?: HrisEmployeesUpdateLocation$Outbound | undefined;
};

/** @internal */
export const HrisEmployeesUpdateJob$outboundSchema: z.ZodType<
  HrisEmployeesUpdateJob$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateJob
> = z.object({
  title: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  compensationRate: z.nullable(z.number()).optional(),
  currency: z.nullable(HrisEmployeesUpdateCurrency$outboundSchema).optional(),
  paymentUnit: z.nullable(HrisEmployeesUpdatePaymentUnit$outboundSchema)
    .optional(),
  hiredAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  isPrimary: z.nullable(z.boolean()).optional(),
  isManager: z.nullable(z.boolean()).optional(),
  status: z.nullable(HrisEmployeesUpdateStatus$outboundSchema).optional(),
  location: z.lazy(() => HrisEmployeesUpdateLocation$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    compensationRate: "compensation_rate",
    paymentUnit: "payment_unit",
    hiredAt: "hired_at",
    isPrimary: "is_primary",
    isManager: "is_manager",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateJob$ {
  /** @deprecated use `HrisEmployeesUpdateJob$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateJob$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateJob$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateJob$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateJob$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateJob$Outbound;
}

export function hrisEmployeesUpdateJobToJSON(
  hrisEmployeesUpdateJob: HrisEmployeesUpdateJob,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateJob$outboundSchema.parse(hrisEmployeesUpdateJob),
  );
}

export function hrisEmployeesUpdateJobFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateJob' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesPaymentUnit$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesPaymentUnit> = z
    .nativeEnum(HrisEmployeesUpdateHrisEmployeesPaymentUnit);

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesPaymentUnit$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesPaymentUnit> =
    HrisEmployeesUpdateHrisEmployeesPaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesPaymentUnit$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesPaymentUnit$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesPaymentUnit$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesPaymentUnit$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesPaymentUnit$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesCurrency$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesCurrency> = z
    .nativeEnum(HrisEmployeesUpdateHrisEmployeesCurrency);

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesCurrency$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesCurrency> =
    HrisEmployeesUpdateHrisEmployeesCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesCurrency$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesCurrency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesCurrency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateFlsaStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateFlsaStatus
> = z.nativeEnum(HrisEmployeesUpdateFlsaStatus);

/** @internal */
export const HrisEmployeesUpdateFlsaStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateFlsaStatus
> = HrisEmployeesUpdateFlsaStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateFlsaStatus$ {
  /** @deprecated use `HrisEmployeesUpdateFlsaStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateFlsaStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateFlsaStatus$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateFlsaStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdatePaymentFrequency$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdatePaymentFrequency
> = z.nativeEnum(HrisEmployeesUpdatePaymentFrequency);

/** @internal */
export const HrisEmployeesUpdatePaymentFrequency$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdatePaymentFrequency> =
    HrisEmployeesUpdatePaymentFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdatePaymentFrequency$ {
  /** @deprecated use `HrisEmployeesUpdatePaymentFrequency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdatePaymentFrequency$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdatePaymentFrequency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdatePaymentFrequency$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateCompensation$inboundSchema: z.ZodType<
  HrisEmployeesUpdateCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  rate: z.nullable(z.number()).optional(),
  payment_unit: z.nullable(
    HrisEmployeesUpdateHrisEmployeesPaymentUnit$inboundSchema,
  ).optional(),
  currency: z.nullable(HrisEmployeesUpdateHrisEmployeesCurrency$inboundSchema)
    .optional(),
  flsa_status: z.nullable(HrisEmployeesUpdateFlsaStatus$inboundSchema)
    .optional(),
  effective_date: z.nullable(z.string()).optional(),
  payment_frequency: z.nullable(
    HrisEmployeesUpdatePaymentFrequency$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_unit": "paymentUnit",
    "flsa_status": "flsaStatus",
    "effective_date": "effectiveDate",
    "payment_frequency": "paymentFrequency",
  });
});

/** @internal */
export type HrisEmployeesUpdateCompensation$Outbound = {
  rate?: number | null | undefined;
  payment_unit?: string | null | undefined;
  currency?: string | null | undefined;
  flsa_status?: string | null | undefined;
  effective_date?: string | null | undefined;
  payment_frequency?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdateCompensation$outboundSchema: z.ZodType<
  HrisEmployeesUpdateCompensation$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateCompensation
> = z.object({
  rate: z.nullable(z.number()).optional(),
  paymentUnit: z.nullable(
    HrisEmployeesUpdateHrisEmployeesPaymentUnit$outboundSchema,
  ).optional(),
  currency: z.nullable(HrisEmployeesUpdateHrisEmployeesCurrency$outboundSchema)
    .optional(),
  flsaStatus: z.nullable(HrisEmployeesUpdateFlsaStatus$outboundSchema)
    .optional(),
  effectiveDate: z.nullable(z.string()).optional(),
  paymentFrequency: z.nullable(
    HrisEmployeesUpdatePaymentFrequency$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentUnit: "payment_unit",
    flsaStatus: "flsa_status",
    effectiveDate: "effective_date",
    paymentFrequency: "payment_frequency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateCompensation$ {
  /** @deprecated use `HrisEmployeesUpdateCompensation$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateCompensation$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateCompensation$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateCompensation$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateCompensation$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateCompensation$Outbound;
}

export function hrisEmployeesUpdateCompensationToJSON(
  hrisEmployeesUpdateCompensation: HrisEmployeesUpdateCompensation,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateCompensation$outboundSchema.parse(
      hrisEmployeesUpdateCompensation,
    ),
  );
}

export function hrisEmployeesUpdateCompensationFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateCompensation' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesType$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesType> = z.nativeEnum(
    HrisEmployeesUpdateHrisEmployeesType,
  );

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesType$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesType> =
    HrisEmployeesUpdateHrisEmployeesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesType$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesType$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesType$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateAddresses$inboundSchema: z.ZodType<
  HrisEmployeesUpdateAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesUpdateHrisEmployeesType$inboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisEmployeesUpdateAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdateAddresses$outboundSchema: z.ZodType<
  HrisEmployeesUpdateAddresses$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesUpdateHrisEmployeesType$outboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateAddresses$ {
  /** @deprecated use `HrisEmployeesUpdateAddresses$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateAddresses$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateAddresses$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateAddresses$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateAddresses$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateAddresses$Outbound;
}

export function hrisEmployeesUpdateAddressesToJSON(
  hrisEmployeesUpdateAddresses: HrisEmployeesUpdateAddresses,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateAddresses$outboundSchema.parse(
      hrisEmployeesUpdateAddresses,
    ),
  );
}

export function hrisEmployeesUpdateAddressesFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateAddresses' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesRequestType$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesRequestType> = z
    .nativeEnum(HrisEmployeesUpdateHrisEmployeesRequestType);

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesRequestType$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesRequestType> =
    HrisEmployeesUpdateHrisEmployeesRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesRequestType$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesRequestType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesRequestType$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesRequestType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesRequestType$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdatePhoneNumbers$inboundSchema: z.ZodType<
  HrisEmployeesUpdatePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesUpdateHrisEmployeesRequestType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type HrisEmployeesUpdatePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdatePhoneNumbers$outboundSchema: z.ZodType<
  HrisEmployeesUpdatePhoneNumbers$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdatePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesUpdateHrisEmployeesRequestType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdatePhoneNumbers$ {
  /** @deprecated use `HrisEmployeesUpdatePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdatePhoneNumbers$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdatePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdatePhoneNumbers$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdatePhoneNumbers$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdatePhoneNumbers$Outbound;
}

export function hrisEmployeesUpdatePhoneNumbersToJSON(
  hrisEmployeesUpdatePhoneNumbers: HrisEmployeesUpdatePhoneNumbers,
): string {
  return JSON.stringify(
    HrisEmployeesUpdatePhoneNumbers$outboundSchema.parse(
      hrisEmployeesUpdatePhoneNumbers,
    ),
  );
}

export function hrisEmployeesUpdatePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdatePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdatePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdatePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType
  > = z.nativeEnum(HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType);

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType
  > = HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateEmails$inboundSchema: z.ZodType<
  HrisEmployeesUpdateEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType$inboundSchema,
  ).optional(),
});

/** @internal */
export type HrisEmployeesUpdateEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdateEmails$outboundSchema: z.ZodType<
  HrisEmployeesUpdateEmails$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    HrisEmployeesUpdateHrisEmployeesRequestRequestBodyType$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateEmails$ {
  /** @deprecated use `HrisEmployeesUpdateEmails$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateEmails$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateEmails$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateEmails$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateEmails$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateEmails$Outbound;
}

export function hrisEmployeesUpdateEmailsToJSON(
  hrisEmployeesUpdateEmails: HrisEmployeesUpdateEmails,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateEmails$outboundSchema.parse(hrisEmployeesUpdateEmails),
  );
}

export function hrisEmployeesUpdateEmailsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateEmails' from JSON`,
  );
}

/** @internal */
export const Value6$inboundSchema: z.ZodType<Value6, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value6$Outbound = {};

/** @internal */
export const Value6$outboundSchema: z.ZodType<
  Value6$Outbound,
  z.ZodTypeDef,
  Value6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value6$ {
  /** @deprecated use `Value6$inboundSchema` instead. */
  export const inboundSchema = Value6$inboundSchema;
  /** @deprecated use `Value6$outboundSchema` instead. */
  export const outboundSchema = Value6$outboundSchema;
  /** @deprecated use `Value6$Outbound` instead. */
  export type Outbound = Value6$Outbound;
}

export function value6ToJSON(value6: Value6): string {
  return JSON.stringify(Value6$outboundSchema.parse(value6));
}

export function value6FromJSON(
  jsonString: string,
): SafeParseResult<Value6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value6' from JSON`,
  );
}

/** @internal */
export const Value4$inboundSchema: z.ZodType<Value4, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value4$Outbound = {};

/** @internal */
export const Value4$outboundSchema: z.ZodType<
  Value4$Outbound,
  z.ZodTypeDef,
  Value4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value4$ {
  /** @deprecated use `Value4$inboundSchema` instead. */
  export const inboundSchema = Value4$inboundSchema;
  /** @deprecated use `Value4$outboundSchema` instead. */
  export const outboundSchema = Value4$outboundSchema;
  /** @deprecated use `Value4$Outbound` instead. */
  export type Outbound = Value4$Outbound;
}

export function value4ToJSON(value4: Value4): string {
  return JSON.stringify(Value4$outboundSchema.parse(value4));
}

export function value4FromJSON(
  jsonString: string,
): SafeParseResult<Value4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value4' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateValue$inboundSchema: z.ZodType<
  HrisEmployeesUpdateValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Value4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Value6$inboundSchema)),
]);

/** @internal */
export type HrisEmployeesUpdateValue$Outbound =
  | Value4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<Value6$Outbound>;

/** @internal */
export const HrisEmployeesUpdateValue$outboundSchema: z.ZodType<
  HrisEmployeesUpdateValue$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateValue
> = z.union([
  z.lazy(() => Value4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Value6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateValue$ {
  /** @deprecated use `HrisEmployeesUpdateValue$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateValue$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateValue$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateValue$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateValue$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateValue$Outbound;
}

export function hrisEmployeesUpdateValueToJSON(
  hrisEmployeesUpdateValue: HrisEmployeesUpdateValue,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateValue$outboundSchema.parse(hrisEmployeesUpdateValue),
  );
}

export function hrisEmployeesUpdateValueFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateValue' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateCustomFields$inboundSchema: z.ZodType<
  HrisEmployeesUpdateCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Value4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Value6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type HrisEmployeesUpdateCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | Value4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<Value6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const HrisEmployeesUpdateCustomFields$outboundSchema: z.ZodType<
  HrisEmployeesUpdateCustomFields$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Value4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Value6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateCustomFields$ {
  /** @deprecated use `HrisEmployeesUpdateCustomFields$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateCustomFields$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateCustomFields$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateCustomFields$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateCustomFields$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateCustomFields$Outbound;
}

export function hrisEmployeesUpdateCustomFieldsToJSON(
  hrisEmployeesUpdateCustomFields: HrisEmployeesUpdateCustomFields,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateCustomFields$outboundSchema.parse(
      hrisEmployeesUpdateCustomFields,
    ),
  );
}

export function hrisEmployeesUpdateCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateCustomFields' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateSocialLinks$inboundSchema: z.ZodType<
  HrisEmployeesUpdateSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisEmployeesUpdateSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdateSocialLinks$outboundSchema: z.ZodType<
  HrisEmployeesUpdateSocialLinks$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateSocialLinks$ {
  /** @deprecated use `HrisEmployeesUpdateSocialLinks$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateSocialLinks$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateSocialLinks$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateSocialLinks$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateSocialLinks$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateSocialLinks$Outbound;
}

export function hrisEmployeesUpdateSocialLinksToJSON(
  hrisEmployeesUpdateSocialLinks: HrisEmployeesUpdateSocialLinks,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateSocialLinks$outboundSchema.parse(
      hrisEmployeesUpdateSocialLinks,
    ),
  );
}

export function hrisEmployeesUpdateSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateSocialLinks' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateAccountType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateAccountType
> = z.nativeEnum(HrisEmployeesUpdateAccountType);

/** @internal */
export const HrisEmployeesUpdateAccountType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesUpdateAccountType
> = HrisEmployeesUpdateAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateAccountType$ {
  /** @deprecated use `HrisEmployeesUpdateAccountType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateAccountType$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateAccountType$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateAccountType$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesRequestCurrency$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesRequestCurrency> = z
    .nativeEnum(HrisEmployeesUpdateHrisEmployeesRequestCurrency);

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesRequestCurrency$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesUpdateHrisEmployeesRequestCurrency> =
    HrisEmployeesUpdateHrisEmployeesRequestCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesRequestCurrency$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesRequestCurrency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesRequestCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesRequestCurrency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesRequestCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeesUpdateBankAccounts$inboundSchema: z.ZodType<
  HrisEmployeesUpdateBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(HrisEmployeesUpdateAccountType$inboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(
    HrisEmployeesUpdateHrisEmployeesRequestCurrency$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type HrisEmployeesUpdateBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdateBankAccounts$outboundSchema: z.ZodType<
  HrisEmployeesUpdateBankAccounts$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(HrisEmployeesUpdateAccountType$outboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(
    HrisEmployeesUpdateHrisEmployeesRequestCurrency$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateBankAccounts$ {
  /** @deprecated use `HrisEmployeesUpdateBankAccounts$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateBankAccounts$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateBankAccounts$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateBankAccounts$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateBankAccounts$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateBankAccounts$Outbound;
}

export function hrisEmployeesUpdateBankAccountsToJSON(
  hrisEmployeesUpdateBankAccounts: HrisEmployeesUpdateBankAccounts,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateBankAccounts$outboundSchema.parse(
      hrisEmployeesUpdateBankAccounts,
    ),
  );
}

export function hrisEmployeesUpdateBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateBankAccounts' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateProbationPeriod$inboundSchema: z.ZodType<
  HrisEmployeesUpdateProbationPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type HrisEmployeesUpdateProbationPeriod$Outbound = {
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesUpdateProbationPeriod$outboundSchema: z.ZodType<
  HrisEmployeesUpdateProbationPeriod$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateProbationPeriod
> = z.object({
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateProbationPeriod$ {
  /** @deprecated use `HrisEmployeesUpdateProbationPeriod$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateProbationPeriod$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateProbationPeriod$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateProbationPeriod$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateProbationPeriod$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateProbationPeriod$Outbound;
}

export function hrisEmployeesUpdateProbationPeriodToJSON(
  hrisEmployeesUpdateProbationPeriod: HrisEmployeesUpdateProbationPeriod,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateProbationPeriod$outboundSchema.parse(
      hrisEmployeesUpdateProbationPeriod,
    ),
  );
}

export function hrisEmployeesUpdateProbationPeriodFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateProbationPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesUpdateProbationPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateProbationPeriod' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateExtendPaths$inboundSchema: z.ZodType<
  HrisEmployeesUpdateExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisEmployeesUpdateExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisEmployeesUpdateExtendPaths$outboundSchema: z.ZodType<
  HrisEmployeesUpdateExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateExtendPaths$ {
  /** @deprecated use `HrisEmployeesUpdateExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateExtendPaths$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateExtendPaths$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateExtendPaths$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateExtendPaths$Outbound;
}

export function hrisEmployeesUpdateExtendPathsToJSON(
  hrisEmployeesUpdateExtendPaths: HrisEmployeesUpdateExtendPaths,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateExtendPaths$outboundSchema.parse(
      hrisEmployeesUpdateExtendPaths,
    ),
  );
}

export function hrisEmployeesUpdateExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdatePassThrough$inboundSchema: z.ZodType<
  HrisEmployeesUpdatePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => HrisEmployeesUpdateExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisEmployeesUpdatePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisEmployeesUpdateExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisEmployeesUpdatePassThrough$outboundSchema: z.ZodType<
  HrisEmployeesUpdatePassThrough$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdatePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => HrisEmployeesUpdateExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdatePassThrough$ {
  /** @deprecated use `HrisEmployeesUpdatePassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdatePassThrough$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdatePassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdatePassThrough$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdatePassThrough$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdatePassThrough$Outbound;
}

export function hrisEmployeesUpdatePassThroughToJSON(
  hrisEmployeesUpdatePassThrough: HrisEmployeesUpdatePassThrough,
): string {
  return JSON.stringify(
    HrisEmployeesUpdatePassThrough$outboundSchema.parse(
      hrisEmployeesUpdatePassThrough,
    ),
  );
}

export function hrisEmployeesUpdatePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdatePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdatePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdatePassThrough' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateRequestBody$inboundSchema: z.ZodType<
  HrisEmployeesUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  display_name: z.nullable(z.string()).optional(),
  preferred_name: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  marital_status: z.nullable(z.string()).optional(),
  partner: z.lazy(() => HrisEmployeesUpdatePerson$inboundSchema).optional(),
  division: z.nullable(z.string()).optional(),
  division_id: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  department_id: z.nullable(z.string()).optional(),
  department_name: z.nullable(z.string()).optional(),
  team: z.nullable(z.lazy(() => HrisEmployeesUpdateTeam$inboundSchema))
    .optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employment_start_date: z.nullable(z.string()).optional(),
  employment_end_date: z.nullable(z.string()).optional(),
  leaving_reason: z.nullable(HrisEmployeesUpdateLeavingReason$inboundSchema)
    .optional(),
  employee_number: z.nullable(z.string()).optional(),
  employment_status: z.nullable(
    HrisEmployeesUpdateEmploymentStatus$inboundSchema,
  ).optional(),
  employment_role: z.lazy(() => HrisEmployeesUpdateEmploymentRole$inboundSchema)
    .optional(),
  ethnicity: z.nullable(z.string()).optional(),
  manager: z.lazy(() => HrisEmployeesUpdateManager$inboundSchema).optional(),
  direct_reports: z.nullable(z.array(z.string())).optional(),
  social_security_number: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  deceased_on: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  country_of_birth: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesUpdateHrisEmployeesGender$inboundSchema)
    .optional(),
  pronouns: z.nullable(z.string()).optional(),
  preferred_language: z.nullable(z.string()).optional(),
  languages: z.array(z.string()).optional(),
  nationalities: z.array(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  record_url: z.nullable(z.string()).optional(),
  jobs: z.nullable(z.array(z.lazy(() => HrisEmployeesUpdateJob$inboundSchema)))
    .optional(),
  compensations: z.nullable(
    z.array(z.lazy(() => HrisEmployeesUpdateCompensation$inboundSchema)),
  ).optional(),
  works_remote: z.nullable(z.boolean()).optional(),
  addresses: z.array(z.lazy(() => HrisEmployeesUpdateAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => HrisEmployeesUpdatePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisEmployeesUpdateEmails$inboundSchema))
    .optional(),
  custom_fields: z.array(
    z.lazy(() => HrisEmployeesUpdateCustomFields$inboundSchema),
  ).optional(),
  social_links: z.array(
    z.lazy(() => HrisEmployeesUpdateSocialLinks$inboundSchema),
  ).optional(),
  bank_accounts: z.array(
    z.lazy(() => HrisEmployeesUpdateBankAccounts$inboundSchema),
  ).optional(),
  tax_code: z.nullable(z.string()).optional(),
  tax_id: z.nullable(z.string()).optional(),
  dietary_preference: z.nullable(z.string()).optional(),
  food_allergies: z.nullable(z.array(z.string())).optional(),
  probation_period: z.lazy(() =>
    HrisEmployeesUpdateProbationPeriod$inboundSchema
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  row_version: z.nullable(z.string()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  pass_through: z.array(
    z.lazy(() => HrisEmployeesUpdatePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_name": "middleName",
    "display_name": "displayName",
    "preferred_name": "preferredName",
    "marital_status": "maritalStatus",
    "division_id": "divisionId",
    "department_id": "departmentId",
    "department_name": "departmentName",
    "company_id": "companyId",
    "company_name": "companyName",
    "employment_start_date": "employmentStartDate",
    "employment_end_date": "employmentEndDate",
    "leaving_reason": "leavingReason",
    "employee_number": "employeeNumber",
    "employment_status": "employmentStatus",
    "employment_role": "employmentRole",
    "direct_reports": "directReports",
    "social_security_number": "socialSecurityNumber",
    "deceased_on": "deceasedOn",
    "country_of_birth": "countryOfBirth",
    "preferred_language": "preferredLanguage",
    "photo_url": "photoUrl",
    "source_id": "sourceId",
    "record_url": "recordUrl",
    "works_remote": "worksRemote",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "social_links": "socialLinks",
    "bank_accounts": "bankAccounts",
    "tax_code": "taxCode",
    "tax_id": "taxId",
    "dietary_preference": "dietaryPreference",
    "food_allergies": "foodAllergies",
    "probation_period": "probationPeriod",
    "row_version": "rowVersion",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisEmployeesUpdateRequestBody$Outbound = {
  id?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  display_name?: string | null | undefined;
  preferred_name?: string | null | undefined;
  initials?: string | null | undefined;
  salutation?: string | null | undefined;
  title?: string | null | undefined;
  marital_status?: string | null | undefined;
  partner?: HrisEmployeesUpdatePerson$Outbound | undefined;
  division?: string | null | undefined;
  division_id?: string | null | undefined;
  department?: string | null | undefined;
  department_id?: string | null | undefined;
  department_name?: string | null | undefined;
  team?: HrisEmployeesUpdateTeam$Outbound | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  employment_start_date?: string | null | undefined;
  employment_end_date?: string | null | undefined;
  leaving_reason?: string | null | undefined;
  employee_number?: string | null | undefined;
  employment_status?: string | null | undefined;
  employment_role?: HrisEmployeesUpdateEmploymentRole$Outbound | undefined;
  ethnicity?: string | null | undefined;
  manager?: HrisEmployeesUpdateManager$Outbound | undefined;
  direct_reports?: Array<string> | null | undefined;
  social_security_number?: string | null | undefined;
  birthday?: string | null | undefined;
  deceased_on?: string | null | undefined;
  country_of_birth?: string | null | undefined;
  description?: string | null | undefined;
  gender?: string | null | undefined;
  pronouns?: string | null | undefined;
  preferred_language?: string | null | undefined;
  languages?: Array<string> | undefined;
  nationalities?: Array<string> | undefined;
  photo_url?: string | null | undefined;
  timezone?: string | null | undefined;
  source?: string | null | undefined;
  source_id?: string | null | undefined;
  record_url?: string | null | undefined;
  jobs?: Array<HrisEmployeesUpdateJob$Outbound> | null | undefined;
  compensations?:
    | Array<HrisEmployeesUpdateCompensation$Outbound>
    | null
    | undefined;
  works_remote?: boolean | null | undefined;
  addresses?: Array<HrisEmployeesUpdateAddresses$Outbound> | undefined;
  phone_numbers?: Array<HrisEmployeesUpdatePhoneNumbers$Outbound> | undefined;
  emails?: Array<HrisEmployeesUpdateEmails$Outbound> | undefined;
  custom_fields?: Array<HrisEmployeesUpdateCustomFields$Outbound> | undefined;
  social_links?: Array<HrisEmployeesUpdateSocialLinks$Outbound> | undefined;
  bank_accounts?: Array<HrisEmployeesUpdateBankAccounts$Outbound> | undefined;
  tax_code?: string | null | undefined;
  tax_id?: string | null | undefined;
  dietary_preference?: string | null | undefined;
  food_allergies?: Array<string> | null | undefined;
  probation_period?: HrisEmployeesUpdateProbationPeriod$Outbound | undefined;
  tags?: Array<string> | null | undefined;
  row_version?: string | null | undefined;
  deleted?: boolean | null | undefined;
  pass_through?: Array<HrisEmployeesUpdatePassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisEmployeesUpdateRequestBody$outboundSchema: z.ZodType<
  HrisEmployeesUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateRequestBody
> = z.object({
  id: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  preferredName: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  maritalStatus: z.nullable(z.string()).optional(),
  partner: z.lazy(() => HrisEmployeesUpdatePerson$outboundSchema).optional(),
  division: z.nullable(z.string()).optional(),
  divisionId: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  departmentId: z.nullable(z.string()).optional(),
  departmentName: z.nullable(z.string()).optional(),
  team: z.nullable(z.lazy(() => HrisEmployeesUpdateTeam$outboundSchema))
    .optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employmentStartDate: z.nullable(z.string()).optional(),
  employmentEndDate: z.nullable(z.string()).optional(),
  leavingReason: z.nullable(HrisEmployeesUpdateLeavingReason$outboundSchema)
    .optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  employmentStatus: z.nullable(
    HrisEmployeesUpdateEmploymentStatus$outboundSchema,
  ).optional(),
  employmentRole: z.lazy(() => HrisEmployeesUpdateEmploymentRole$outboundSchema)
    .optional(),
  ethnicity: z.nullable(z.string()).optional(),
  manager: z.lazy(() => HrisEmployeesUpdateManager$outboundSchema).optional(),
  directReports: z.nullable(z.array(z.string())).optional(),
  socialSecurityNumber: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  deceasedOn: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  countryOfBirth: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesUpdateHrisEmployeesGender$outboundSchema)
    .optional(),
  pronouns: z.nullable(z.string()).optional(),
  preferredLanguage: z.nullable(z.string()).optional(),
  languages: z.array(z.string()).optional(),
  nationalities: z.array(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  recordUrl: z.nullable(z.string()).optional(),
  jobs: z.nullable(z.array(z.lazy(() => HrisEmployeesUpdateJob$outboundSchema)))
    .optional(),
  compensations: z.nullable(
    z.array(z.lazy(() => HrisEmployeesUpdateCompensation$outboundSchema)),
  ).optional(),
  worksRemote: z.nullable(z.boolean()).optional(),
  addresses: z.array(z.lazy(() => HrisEmployeesUpdateAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => HrisEmployeesUpdatePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisEmployeesUpdateEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => HrisEmployeesUpdateCustomFields$outboundSchema),
  ).optional(),
  socialLinks: z.array(
    z.lazy(() => HrisEmployeesUpdateSocialLinks$outboundSchema),
  ).optional(),
  bankAccounts: z.array(
    z.lazy(() => HrisEmployeesUpdateBankAccounts$outboundSchema),
  ).optional(),
  taxCode: z.nullable(z.string()).optional(),
  taxId: z.nullable(z.string()).optional(),
  dietaryPreference: z.nullable(z.string()).optional(),
  foodAllergies: z.nullable(z.array(z.string())).optional(),
  probationPeriod: z.lazy(() =>
    HrisEmployeesUpdateProbationPeriod$outboundSchema
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  rowVersion: z.nullable(z.string()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  passThrough: z.array(
    z.lazy(() => HrisEmployeesUpdatePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    displayName: "display_name",
    preferredName: "preferred_name",
    maritalStatus: "marital_status",
    divisionId: "division_id",
    departmentId: "department_id",
    departmentName: "department_name",
    companyId: "company_id",
    companyName: "company_name",
    employmentStartDate: "employment_start_date",
    employmentEndDate: "employment_end_date",
    leavingReason: "leaving_reason",
    employeeNumber: "employee_number",
    employmentStatus: "employment_status",
    employmentRole: "employment_role",
    directReports: "direct_reports",
    socialSecurityNumber: "social_security_number",
    deceasedOn: "deceased_on",
    countryOfBirth: "country_of_birth",
    preferredLanguage: "preferred_language",
    photoUrl: "photo_url",
    sourceId: "source_id",
    recordUrl: "record_url",
    worksRemote: "works_remote",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    socialLinks: "social_links",
    bankAccounts: "bank_accounts",
    taxCode: "tax_code",
    taxId: "tax_id",
    dietaryPreference: "dietary_preference",
    foodAllergies: "food_allergies",
    probationPeriod: "probation_period",
    rowVersion: "row_version",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateRequestBody$ {
  /** @deprecated use `HrisEmployeesUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateRequestBody$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateRequestBody$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateRequestBody$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateRequestBody$Outbound;
}

export function hrisEmployeesUpdateRequestBodyToJSON(
  hrisEmployeesUpdateRequestBody: HrisEmployeesUpdateRequestBody,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateRequestBody$outboundSchema.parse(
      hrisEmployeesUpdateRequestBody,
    ),
  );
}

export function hrisEmployeesUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateRequest$inboundSchema: z.ZodType<
  HrisEmployeesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  RequestBody: z.lazy(() => HrisEmployeesUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type HrisEmployeesUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  RequestBody: HrisEmployeesUpdateRequestBody$Outbound;
};

/** @internal */
export const HrisEmployeesUpdateRequest$outboundSchema: z.ZodType<
  HrisEmployeesUpdateRequest$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  requestBody: z.lazy(() => HrisEmployeesUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateRequest$ {
  /** @deprecated use `HrisEmployeesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateRequest$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateRequest$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateRequest$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateRequest$Outbound;
}

export function hrisEmployeesUpdateRequestToJSON(
  hrisEmployeesUpdateRequest: HrisEmployeesUpdateRequest,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateRequest$outboundSchema.parse(hrisEmployeesUpdateRequest),
  );
}

export function hrisEmployeesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateRequest' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateDetail$inboundSchema: z.ZodType<
  HrisEmployeesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisEmployeesUpdateDetail$outboundSchema: z.ZodType<
  HrisEmployeesUpdateDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateDetail$ {
  /** @deprecated use `HrisEmployeesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateDetail$Outbound;
}

export function hrisEmployeesUpdateDetailToJSON(
  hrisEmployeesUpdateDetail: HrisEmployeesUpdateDetail,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateDetail$outboundSchema.parse(hrisEmployeesUpdateDetail),
  );
}

export function hrisEmployeesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisEmployeesUpdateHrisEmployeesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesUpdateHrisEmployeesResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesUpdateHrisEmployeesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesUpdateHrisEmployeesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateHrisEmployeesResponseBody$ {
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesUpdateHrisEmployeesResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateHrisEmployeesResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateHrisEmployeesResponseBody$Outbound;
}

export function hrisEmployeesUpdateHrisEmployeesResponseBodyToJSON(
  hrisEmployeesUpdateHrisEmployeesResponseBody:
    HrisEmployeesUpdateHrisEmployeesResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateHrisEmployeesResponseBody$outboundSchema.parse(
      hrisEmployeesUpdateHrisEmployeesResponseBody,
    ),
  );
}

export function hrisEmployeesUpdateHrisEmployeesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesUpdateHrisEmployeesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesUpdateHrisEmployeesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesUpdateHrisEmployeesResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateUnifiedId$inboundSchema: z.ZodType<
  HrisEmployeesUpdateUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type HrisEmployeesUpdateUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const HrisEmployeesUpdateUnifiedId$outboundSchema: z.ZodType<
  HrisEmployeesUpdateUnifiedId$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateUnifiedId$ {
  /** @deprecated use `HrisEmployeesUpdateUnifiedId$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateUnifiedId$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateUnifiedId$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateUnifiedId$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateUnifiedId$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateUnifiedId$Outbound;
}

export function hrisEmployeesUpdateUnifiedIdToJSON(
  hrisEmployeesUpdateUnifiedId: HrisEmployeesUpdateUnifiedId,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateUnifiedId$outboundSchema.parse(
      hrisEmployeesUpdateUnifiedId,
    ),
  );
}

export function hrisEmployeesUpdateUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateUnifiedId' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisEmployeesUpdateUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisEmployeesUpdateResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisEmployeesUpdateUnifiedId$Outbound;
};

/** @internal */
export const HrisEmployeesUpdateResponseBody$outboundSchema: z.ZodType<
  HrisEmployeesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisEmployeesUpdateUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateResponseBody$ {
  /** @deprecated use `HrisEmployeesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateResponseBody$Outbound;
}

export function hrisEmployeesUpdateResponseBodyToJSON(
  hrisEmployeesUpdateResponseBody: HrisEmployeesUpdateResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateResponseBody$outboundSchema.parse(
      hrisEmployeesUpdateResponseBody,
    ),
  );
}

export function hrisEmployeesUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesUpdateResponse$inboundSchema: z.ZodType<
  HrisEmployeesUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisEmployeesUpdateResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisEmployeesUpdateHrisEmployeesResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisEmployeesUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisEmployeesUpdateResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisEmployeesUpdateHrisEmployeesResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisEmployeesUpdateResponse$outboundSchema: z.ZodType<
  HrisEmployeesUpdateResponse$Outbound,
  z.ZodTypeDef,
  HrisEmployeesUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisEmployeesUpdateResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisEmployeesUpdateHrisEmployeesResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesUpdateResponse$ {
  /** @deprecated use `HrisEmployeesUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesUpdateResponse$inboundSchema;
  /** @deprecated use `HrisEmployeesUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesUpdateResponse$outboundSchema;
  /** @deprecated use `HrisEmployeesUpdateResponse$Outbound` instead. */
  export type Outbound = HrisEmployeesUpdateResponse$Outbound;
}

export function hrisEmployeesUpdateResponseToJSON(
  hrisEmployeesUpdateResponse: HrisEmployeesUpdateResponse,
): string {
  return JSON.stringify(
    HrisEmployeesUpdateResponse$outboundSchema.parse(
      hrisEmployeesUpdateResponse,
    ),
  );
}

export function hrisEmployeesUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesUpdateResponse' from JSON`,
  );
}
