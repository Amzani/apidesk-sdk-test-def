/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsersAddSecurity = {
  apiKey: string;
};

export type UsersAddRequest = {
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
  userCreateRequest: components.UserCreateRequest;
};

export type UsersAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * User created
   */
  userCreateResponse?: components.UserCreateResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const UsersAddSecurity$inboundSchema: z.ZodType<
  UsersAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type UsersAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const UsersAddSecurity$outboundSchema: z.ZodType<
  UsersAddSecurity$Outbound,
  z.ZodTypeDef,
  UsersAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddSecurity$ {
  /** @deprecated use `UsersAddSecurity$inboundSchema` instead. */
  export const inboundSchema = UsersAddSecurity$inboundSchema;
  /** @deprecated use `UsersAddSecurity$outboundSchema` instead. */
  export const outboundSchema = UsersAddSecurity$outboundSchema;
  /** @deprecated use `UsersAddSecurity$Outbound` instead. */
  export type Outbound = UsersAddSecurity$Outbound;
}

export function usersAddSecurityToJSON(
  usersAddSecurity: UsersAddSecurity,
): string {
  return JSON.stringify(
    UsersAddSecurity$outboundSchema.parse(usersAddSecurity),
  );
}

export function usersAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddSecurity' from JSON`,
  );
}

/** @internal */
export const UsersAddRequest$inboundSchema: z.ZodType<
  UsersAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  UserCreateRequest: components.UserCreateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UserCreateRequest": "userCreateRequest",
  });
});

/** @internal */
export type UsersAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  UserCreateRequest: components.UserCreateRequest$Outbound;
};

/** @internal */
export const UsersAddRequest$outboundSchema: z.ZodType<
  UsersAddRequest$Outbound,
  z.ZodTypeDef,
  UsersAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  userCreateRequest: components.UserCreateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    userCreateRequest: "UserCreateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddRequest$ {
  /** @deprecated use `UsersAddRequest$inboundSchema` instead. */
  export const inboundSchema = UsersAddRequest$inboundSchema;
  /** @deprecated use `UsersAddRequest$outboundSchema` instead. */
  export const outboundSchema = UsersAddRequest$outboundSchema;
  /** @deprecated use `UsersAddRequest$Outbound` instead. */
  export type Outbound = UsersAddRequest$Outbound;
}

export function usersAddRequestToJSON(
  usersAddRequest: UsersAddRequest,
): string {
  return JSON.stringify(UsersAddRequest$outboundSchema.parse(usersAddRequest));
}

export function usersAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddRequest' from JSON`,
  );
}

/** @internal */
export const UsersAddResponse$inboundSchema: z.ZodType<
  UsersAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UserCreateResponse: components.UserCreateResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UserCreateResponse": "userCreateResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type UsersAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UserCreateResponse?: components.UserCreateResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const UsersAddResponse$outboundSchema: z.ZodType<
  UsersAddResponse$Outbound,
  z.ZodTypeDef,
  UsersAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  userCreateResponse: components.UserCreateResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    userCreateResponse: "UserCreateResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddResponse$ {
  /** @deprecated use `UsersAddResponse$inboundSchema` instead. */
  export const inboundSchema = UsersAddResponse$inboundSchema;
  /** @deprecated use `UsersAddResponse$outboundSchema` instead. */
  export const outboundSchema = UsersAddResponse$outboundSchema;
  /** @deprecated use `UsersAddResponse$Outbound` instead. */
  export type Outbound = UsersAddResponse$Outbound;
}

export function usersAddResponseToJSON(
  usersAddResponse: UsersAddResponse,
): string {
  return JSON.stringify(
    UsersAddResponse$outboundSchema.parse(usersAddResponse),
  );
}

export function usersAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddResponse' from JSON`,
  );
}
