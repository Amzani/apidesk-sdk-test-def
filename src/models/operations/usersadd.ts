/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsersAddSecurity = {
  apiKey: string;
};

/**
 * The type of address.
 */
export const UsersAddType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type UsersAddType = ClosedEnum<typeof UsersAddType>;

export type UsersAddAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: UsersAddType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const UsersAddUsersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type UsersAddUsersType = ClosedEnum<typeof UsersAddUsersType>;

export type UsersAddPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: UsersAddUsersType | null | undefined;
};

/**
 * Email type
 */
export const UsersAddUsersRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type UsersAddUsersRequestType = ClosedEnum<
  typeof UsersAddUsersRequestType
>;

export type UsersAddEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: UsersAddUsersRequestType | null | undefined;
};

export type UsersAddExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type UsersAddPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<UsersAddExtendPaths> | undefined;
};

export type UsersAddRequestBody = {
  /**
   * The parent user id
   */
  parentId?: string | null | undefined;
  /**
   * The username of the user
   */
  username?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  division?: string | null | undefined;
  /**
   * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * The name of the company.
   */
  companyName?: string | null | undefined;
  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  employeeNumber?: string | null | undefined;
  /**
   * A description of the object.
   */
  description?: string | null | undefined;
  /**
   * The URL of the user's avatar
   */
  image?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  /**
   * The status of the user
   */
  status?: string | null | undefined;
  /**
   * The password of the user
   */
  password?: string | null | undefined;
  addresses?: Array<UsersAddAddresses> | undefined;
  phoneNumbers?: Array<UsersAddPhoneNumbers> | undefined;
  emails: Array<UsersAddEmails>;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<UsersAddPassThrough> | undefined;
};

export type UsersAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: UsersAddRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersAddDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type UsersAddUsersResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type UsersAddUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * User created
 */
export type UsersAddResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: UsersAddUnifiedId;
};

export type UsersAddResponse = UsersAddResponseBody | UsersAddUsersResponseBody;

/** @internal */
export const UsersAddSecurity$inboundSchema: z.ZodType<
  UsersAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type UsersAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const UsersAddSecurity$outboundSchema: z.ZodType<
  UsersAddSecurity$Outbound,
  z.ZodTypeDef,
  UsersAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddSecurity$ {
  /** @deprecated use `UsersAddSecurity$inboundSchema` instead. */
  export const inboundSchema = UsersAddSecurity$inboundSchema;
  /** @deprecated use `UsersAddSecurity$outboundSchema` instead. */
  export const outboundSchema = UsersAddSecurity$outboundSchema;
  /** @deprecated use `UsersAddSecurity$Outbound` instead. */
  export type Outbound = UsersAddSecurity$Outbound;
}

export function usersAddSecurityToJSON(
  usersAddSecurity: UsersAddSecurity,
): string {
  return JSON.stringify(
    UsersAddSecurity$outboundSchema.parse(usersAddSecurity),
  );
}

export function usersAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddSecurity' from JSON`,
  );
}

/** @internal */
export const UsersAddType$inboundSchema: z.ZodNativeEnum<typeof UsersAddType> =
  z.nativeEnum(UsersAddType);

/** @internal */
export const UsersAddType$outboundSchema: z.ZodNativeEnum<typeof UsersAddType> =
  UsersAddType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddType$ {
  /** @deprecated use `UsersAddType$inboundSchema` instead. */
  export const inboundSchema = UsersAddType$inboundSchema;
  /** @deprecated use `UsersAddType$outboundSchema` instead. */
  export const outboundSchema = UsersAddType$outboundSchema;
}

/** @internal */
export const UsersAddAddresses$inboundSchema: z.ZodType<
  UsersAddAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UsersAddType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UsersAddAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UsersAddAddresses$outboundSchema: z.ZodType<
  UsersAddAddresses$Outbound,
  z.ZodTypeDef,
  UsersAddAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UsersAddType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddAddresses$ {
  /** @deprecated use `UsersAddAddresses$inboundSchema` instead. */
  export const inboundSchema = UsersAddAddresses$inboundSchema;
  /** @deprecated use `UsersAddAddresses$outboundSchema` instead. */
  export const outboundSchema = UsersAddAddresses$outboundSchema;
  /** @deprecated use `UsersAddAddresses$Outbound` instead. */
  export type Outbound = UsersAddAddresses$Outbound;
}

export function usersAddAddressesToJSON(
  usersAddAddresses: UsersAddAddresses,
): string {
  return JSON.stringify(
    UsersAddAddresses$outboundSchema.parse(usersAddAddresses),
  );
}

export function usersAddAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddAddresses' from JSON`,
  );
}

/** @internal */
export const UsersAddUsersType$inboundSchema: z.ZodNativeEnum<
  typeof UsersAddUsersType
> = z.nativeEnum(UsersAddUsersType);

/** @internal */
export const UsersAddUsersType$outboundSchema: z.ZodNativeEnum<
  typeof UsersAddUsersType
> = UsersAddUsersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddUsersType$ {
  /** @deprecated use `UsersAddUsersType$inboundSchema` instead. */
  export const inboundSchema = UsersAddUsersType$inboundSchema;
  /** @deprecated use `UsersAddUsersType$outboundSchema` instead. */
  export const outboundSchema = UsersAddUsersType$outboundSchema;
}

/** @internal */
export const UsersAddPhoneNumbers$inboundSchema: z.ZodType<
  UsersAddPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UsersAddUsersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UsersAddPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UsersAddPhoneNumbers$outboundSchema: z.ZodType<
  UsersAddPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UsersAddPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UsersAddUsersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddPhoneNumbers$ {
  /** @deprecated use `UsersAddPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UsersAddPhoneNumbers$inboundSchema;
  /** @deprecated use `UsersAddPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UsersAddPhoneNumbers$outboundSchema;
  /** @deprecated use `UsersAddPhoneNumbers$Outbound` instead. */
  export type Outbound = UsersAddPhoneNumbers$Outbound;
}

export function usersAddPhoneNumbersToJSON(
  usersAddPhoneNumbers: UsersAddPhoneNumbers,
): string {
  return JSON.stringify(
    UsersAddPhoneNumbers$outboundSchema.parse(usersAddPhoneNumbers),
  );
}

export function usersAddPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UsersAddUsersRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UsersAddUsersRequestType
> = z.nativeEnum(UsersAddUsersRequestType);

/** @internal */
export const UsersAddUsersRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UsersAddUsersRequestType
> = UsersAddUsersRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddUsersRequestType$ {
  /** @deprecated use `UsersAddUsersRequestType$inboundSchema` instead. */
  export const inboundSchema = UsersAddUsersRequestType$inboundSchema;
  /** @deprecated use `UsersAddUsersRequestType$outboundSchema` instead. */
  export const outboundSchema = UsersAddUsersRequestType$outboundSchema;
}

/** @internal */
export const UsersAddEmails$inboundSchema: z.ZodType<
  UsersAddEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UsersAddUsersRequestType$inboundSchema).optional(),
});

/** @internal */
export type UsersAddEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UsersAddEmails$outboundSchema: z.ZodType<
  UsersAddEmails$Outbound,
  z.ZodTypeDef,
  UsersAddEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UsersAddUsersRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddEmails$ {
  /** @deprecated use `UsersAddEmails$inboundSchema` instead. */
  export const inboundSchema = UsersAddEmails$inboundSchema;
  /** @deprecated use `UsersAddEmails$outboundSchema` instead. */
  export const outboundSchema = UsersAddEmails$outboundSchema;
  /** @deprecated use `UsersAddEmails$Outbound` instead. */
  export type Outbound = UsersAddEmails$Outbound;
}

export function usersAddEmailsToJSON(usersAddEmails: UsersAddEmails): string {
  return JSON.stringify(UsersAddEmails$outboundSchema.parse(usersAddEmails));
}

export function usersAddEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddEmails' from JSON`,
  );
}

/** @internal */
export const UsersAddExtendPaths$inboundSchema: z.ZodType<
  UsersAddExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UsersAddExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UsersAddExtendPaths$outboundSchema: z.ZodType<
  UsersAddExtendPaths$Outbound,
  z.ZodTypeDef,
  UsersAddExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddExtendPaths$ {
  /** @deprecated use `UsersAddExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UsersAddExtendPaths$inboundSchema;
  /** @deprecated use `UsersAddExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UsersAddExtendPaths$outboundSchema;
  /** @deprecated use `UsersAddExtendPaths$Outbound` instead. */
  export type Outbound = UsersAddExtendPaths$Outbound;
}

export function usersAddExtendPathsToJSON(
  usersAddExtendPaths: UsersAddExtendPaths,
): string {
  return JSON.stringify(
    UsersAddExtendPaths$outboundSchema.parse(usersAddExtendPaths),
  );
}

export function usersAddExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddExtendPaths' from JSON`,
  );
}

/** @internal */
export const UsersAddPassThrough$inboundSchema: z.ZodType<
  UsersAddPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => UsersAddExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UsersAddPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UsersAddExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UsersAddPassThrough$outboundSchema: z.ZodType<
  UsersAddPassThrough$Outbound,
  z.ZodTypeDef,
  UsersAddPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => UsersAddExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddPassThrough$ {
  /** @deprecated use `UsersAddPassThrough$inboundSchema` instead. */
  export const inboundSchema = UsersAddPassThrough$inboundSchema;
  /** @deprecated use `UsersAddPassThrough$outboundSchema` instead. */
  export const outboundSchema = UsersAddPassThrough$outboundSchema;
  /** @deprecated use `UsersAddPassThrough$Outbound` instead. */
  export type Outbound = UsersAddPassThrough$Outbound;
}

export function usersAddPassThroughToJSON(
  usersAddPassThrough: UsersAddPassThrough,
): string {
  return JSON.stringify(
    UsersAddPassThrough$outboundSchema.parse(usersAddPassThrough),
  );
}

export function usersAddPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddPassThrough' from JSON`,
  );
}

/** @internal */
export const UsersAddRequestBody$inboundSchema: z.ZodType<
  UsersAddRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  parent_id: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employee_number: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UsersAddAddresses$inboundSchema)).optional(),
  phone_numbers: z.array(z.lazy(() => UsersAddPhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => UsersAddEmails$inboundSchema)),
  pass_through: z.array(z.lazy(() => UsersAddPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "first_name": "firstName",
    "last_name": "lastName",
    "company_name": "companyName",
    "employee_number": "employeeNumber",
    "phone_numbers": "phoneNumbers",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UsersAddRequestBody$Outbound = {
  parent_id?: string | null | undefined;
  username?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  title?: string | null | undefined;
  division?: string | null | undefined;
  department?: string | null | undefined;
  company_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  password?: string | null | undefined;
  addresses?: Array<UsersAddAddresses$Outbound> | undefined;
  phone_numbers?: Array<UsersAddPhoneNumbers$Outbound> | undefined;
  emails: Array<UsersAddEmails$Outbound>;
  pass_through?: Array<UsersAddPassThrough$Outbound> | undefined;
};

/** @internal */
export const UsersAddRequestBody$outboundSchema: z.ZodType<
  UsersAddRequestBody$Outbound,
  z.ZodTypeDef,
  UsersAddRequestBody
> = z.object({
  parentId: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UsersAddAddresses$outboundSchema)).optional(),
  phoneNumbers: z.array(z.lazy(() => UsersAddPhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => UsersAddEmails$outboundSchema)),
  passThrough: z.array(z.lazy(() => UsersAddPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    firstName: "first_name",
    lastName: "last_name",
    companyName: "company_name",
    employeeNumber: "employee_number",
    phoneNumbers: "phone_numbers",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddRequestBody$ {
  /** @deprecated use `UsersAddRequestBody$inboundSchema` instead. */
  export const inboundSchema = UsersAddRequestBody$inboundSchema;
  /** @deprecated use `UsersAddRequestBody$outboundSchema` instead. */
  export const outboundSchema = UsersAddRequestBody$outboundSchema;
  /** @deprecated use `UsersAddRequestBody$Outbound` instead. */
  export type Outbound = UsersAddRequestBody$Outbound;
}

export function usersAddRequestBodyToJSON(
  usersAddRequestBody: UsersAddRequestBody,
): string {
  return JSON.stringify(
    UsersAddRequestBody$outboundSchema.parse(usersAddRequestBody),
  );
}

export function usersAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddRequestBody' from JSON`,
  );
}

/** @internal */
export const UsersAddRequest$inboundSchema: z.ZodType<
  UsersAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => UsersAddRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UsersAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  RequestBody: UsersAddRequestBody$Outbound;
};

/** @internal */
export const UsersAddRequest$outboundSchema: z.ZodType<
  UsersAddRequest$Outbound,
  z.ZodTypeDef,
  UsersAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => UsersAddRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddRequest$ {
  /** @deprecated use `UsersAddRequest$inboundSchema` instead. */
  export const inboundSchema = UsersAddRequest$inboundSchema;
  /** @deprecated use `UsersAddRequest$outboundSchema` instead. */
  export const outboundSchema = UsersAddRequest$outboundSchema;
  /** @deprecated use `UsersAddRequest$Outbound` instead. */
  export type Outbound = UsersAddRequest$Outbound;
}

export function usersAddRequestToJSON(
  usersAddRequest: UsersAddRequest,
): string {
  return JSON.stringify(UsersAddRequest$outboundSchema.parse(usersAddRequest));
}

export function usersAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddRequest' from JSON`,
  );
}

/** @internal */
export const UsersAddDetail$inboundSchema: z.ZodType<
  UsersAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersAddDetail$outboundSchema: z.ZodType<
  UsersAddDetail$Outbound,
  z.ZodTypeDef,
  UsersAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddDetail$ {
  /** @deprecated use `UsersAddDetail$inboundSchema` instead. */
  export const inboundSchema = UsersAddDetail$inboundSchema;
  /** @deprecated use `UsersAddDetail$outboundSchema` instead. */
  export const outboundSchema = UsersAddDetail$outboundSchema;
  /** @deprecated use `UsersAddDetail$Outbound` instead. */
  export type Outbound = UsersAddDetail$Outbound;
}

export function usersAddDetailToJSON(usersAddDetail: UsersAddDetail): string {
  return JSON.stringify(UsersAddDetail$outboundSchema.parse(usersAddDetail));
}

export function usersAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddDetail' from JSON`,
  );
}

/** @internal */
export const UsersAddUsersResponseBody$inboundSchema: z.ZodType<
  UsersAddUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type UsersAddUsersResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersAddUsersResponseBody$outboundSchema: z.ZodType<
  UsersAddUsersResponseBody$Outbound,
  z.ZodTypeDef,
  UsersAddUsersResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddUsersResponseBody$ {
  /** @deprecated use `UsersAddUsersResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersAddUsersResponseBody$inboundSchema;
  /** @deprecated use `UsersAddUsersResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersAddUsersResponseBody$outboundSchema;
  /** @deprecated use `UsersAddUsersResponseBody$Outbound` instead. */
  export type Outbound = UsersAddUsersResponseBody$Outbound;
}

export function usersAddUsersResponseBodyToJSON(
  usersAddUsersResponseBody: UsersAddUsersResponseBody,
): string {
  return JSON.stringify(
    UsersAddUsersResponseBody$outboundSchema.parse(usersAddUsersResponseBody),
  );
}

export function usersAddUsersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddUsersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddUsersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddUsersResponseBody' from JSON`,
  );
}

/** @internal */
export const UsersAddUnifiedId$inboundSchema: z.ZodType<
  UsersAddUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UsersAddUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UsersAddUnifiedId$outboundSchema: z.ZodType<
  UsersAddUnifiedId$Outbound,
  z.ZodTypeDef,
  UsersAddUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddUnifiedId$ {
  /** @deprecated use `UsersAddUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UsersAddUnifiedId$inboundSchema;
  /** @deprecated use `UsersAddUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UsersAddUnifiedId$outboundSchema;
  /** @deprecated use `UsersAddUnifiedId$Outbound` instead. */
  export type Outbound = UsersAddUnifiedId$Outbound;
}

export function usersAddUnifiedIdToJSON(
  usersAddUnifiedId: UsersAddUnifiedId,
): string {
  return JSON.stringify(
    UsersAddUnifiedId$outboundSchema.parse(usersAddUnifiedId),
  );
}

export function usersAddUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddUnifiedId' from JSON`,
  );
}

/** @internal */
export const UsersAddResponseBody$inboundSchema: z.ZodType<
  UsersAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UsersAddUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UsersAddResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UsersAddUnifiedId$Outbound;
};

/** @internal */
export const UsersAddResponseBody$outboundSchema: z.ZodType<
  UsersAddResponseBody$Outbound,
  z.ZodTypeDef,
  UsersAddResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UsersAddUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddResponseBody$ {
  /** @deprecated use `UsersAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersAddResponseBody$inboundSchema;
  /** @deprecated use `UsersAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersAddResponseBody$outboundSchema;
  /** @deprecated use `UsersAddResponseBody$Outbound` instead. */
  export type Outbound = UsersAddResponseBody$Outbound;
}

export function usersAddResponseBodyToJSON(
  usersAddResponseBody: UsersAddResponseBody,
): string {
  return JSON.stringify(
    UsersAddResponseBody$outboundSchema.parse(usersAddResponseBody),
  );
}

export function usersAddResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddResponseBody' from JSON`,
  );
}

/** @internal */
export const UsersAddResponse$inboundSchema: z.ZodType<
  UsersAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UsersAddResponseBody$inboundSchema),
  z.lazy(() => UsersAddUsersResponseBody$inboundSchema),
]);

/** @internal */
export type UsersAddResponse$Outbound =
  | UsersAddResponseBody$Outbound
  | UsersAddUsersResponseBody$Outbound;

/** @internal */
export const UsersAddResponse$outboundSchema: z.ZodType<
  UsersAddResponse$Outbound,
  z.ZodTypeDef,
  UsersAddResponse
> = z.union([
  z.lazy(() => UsersAddResponseBody$outboundSchema),
  z.lazy(() => UsersAddUsersResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAddResponse$ {
  /** @deprecated use `UsersAddResponse$inboundSchema` instead. */
  export const inboundSchema = UsersAddResponse$inboundSchema;
  /** @deprecated use `UsersAddResponse$outboundSchema` instead. */
  export const outboundSchema = UsersAddResponse$outboundSchema;
  /** @deprecated use `UsersAddResponse$Outbound` instead. */
  export type Outbound = UsersAddResponse$Outbound;
}

export function usersAddResponseToJSON(
  usersAddResponse: UsersAddResponse,
): string {
  return JSON.stringify(
    UsersAddResponse$outboundSchema.parse(usersAddResponse),
  );
}

export function usersAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsersAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAddResponse' from JSON`,
  );
}
