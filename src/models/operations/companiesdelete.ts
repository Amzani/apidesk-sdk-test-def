/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompaniesDeleteSecurity = {
  apiKey: string;
};

export type CompaniesDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesDeleteDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type CompaniesDeleteCompaniesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type CompaniesDeleteUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Company deleted
 */
export type CompaniesDeleteResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: CompaniesDeleteUnifiedId;
};

export type CompaniesDeleteResponse =
  | CompaniesDeleteResponseBody
  | CompaniesDeleteCompaniesResponseBody;

/** @internal */
export const CompaniesDeleteSecurity$inboundSchema: z.ZodType<
  CompaniesDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type CompaniesDeleteSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const CompaniesDeleteSecurity$outboundSchema: z.ZodType<
  CompaniesDeleteSecurity$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteSecurity$ {
  /** @deprecated use `CompaniesDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteSecurity$inboundSchema;
  /** @deprecated use `CompaniesDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteSecurity$outboundSchema;
  /** @deprecated use `CompaniesDeleteSecurity$Outbound` instead. */
  export type Outbound = CompaniesDeleteSecurity$Outbound;
}

export function companiesDeleteSecurityToJSON(
  companiesDeleteSecurity: CompaniesDeleteSecurity,
): string {
  return JSON.stringify(
    CompaniesDeleteSecurity$outboundSchema.parse(companiesDeleteSecurity),
  );
}

export function companiesDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteRequest$inboundSchema: z.ZodType<
  CompaniesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
});

/** @internal */
export type CompaniesDeleteRequest$Outbound = {
  id: string;
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
};

/** @internal */
export const CompaniesDeleteRequest$outboundSchema: z.ZodType<
  CompaniesDeleteRequest$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteRequest
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteRequest$ {
  /** @deprecated use `CompaniesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteRequest$inboundSchema;
  /** @deprecated use `CompaniesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteRequest$outboundSchema;
  /** @deprecated use `CompaniesDeleteRequest$Outbound` instead. */
  export type Outbound = CompaniesDeleteRequest$Outbound;
}

export function companiesDeleteRequestToJSON(
  companiesDeleteRequest: CompaniesDeleteRequest,
): string {
  return JSON.stringify(
    CompaniesDeleteRequest$outboundSchema.parse(companiesDeleteRequest),
  );
}

export function companiesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteDetail$inboundSchema: z.ZodType<
  CompaniesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const CompaniesDeleteDetail$outboundSchema: z.ZodType<
  CompaniesDeleteDetail$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteDetail$ {
  /** @deprecated use `CompaniesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteDetail$inboundSchema;
  /** @deprecated use `CompaniesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteDetail$outboundSchema;
  /** @deprecated use `CompaniesDeleteDetail$Outbound` instead. */
  export type Outbound = CompaniesDeleteDetail$Outbound;
}

export function companiesDeleteDetailToJSON(
  companiesDeleteDetail: CompaniesDeleteDetail,
): string {
  return JSON.stringify(
    CompaniesDeleteDetail$outboundSchema.parse(companiesDeleteDetail),
  );
}

export function companiesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteCompaniesResponseBody$inboundSchema: z.ZodType<
  CompaniesDeleteCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type CompaniesDeleteCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesDeleteCompaniesResponseBody$outboundSchema: z.ZodType<
  CompaniesDeleteCompaniesResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteCompaniesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteCompaniesResponseBody$ {
  /** @deprecated use `CompaniesDeleteCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesDeleteCompaniesResponseBody$inboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesDeleteCompaniesResponseBody$outboundSchema;
  /** @deprecated use `CompaniesDeleteCompaniesResponseBody$Outbound` instead. */
  export type Outbound = CompaniesDeleteCompaniesResponseBody$Outbound;
}

export function companiesDeleteCompaniesResponseBodyToJSON(
  companiesDeleteCompaniesResponseBody: CompaniesDeleteCompaniesResponseBody,
): string {
  return JSON.stringify(
    CompaniesDeleteCompaniesResponseBody$outboundSchema.parse(
      companiesDeleteCompaniesResponseBody,
    ),
  );
}

export function companiesDeleteCompaniesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteCompaniesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesDeleteCompaniesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteCompaniesResponseBody' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteUnifiedId$inboundSchema: z.ZodType<
  CompaniesDeleteUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CompaniesDeleteUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CompaniesDeleteUnifiedId$outboundSchema: z.ZodType<
  CompaniesDeleteUnifiedId$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteUnifiedId$ {
  /** @deprecated use `CompaniesDeleteUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteUnifiedId$inboundSchema;
  /** @deprecated use `CompaniesDeleteUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteUnifiedId$outboundSchema;
  /** @deprecated use `CompaniesDeleteUnifiedId$Outbound` instead. */
  export type Outbound = CompaniesDeleteUnifiedId$Outbound;
}

export function companiesDeleteUnifiedIdToJSON(
  companiesDeleteUnifiedId: CompaniesDeleteUnifiedId,
): string {
  return JSON.stringify(
    CompaniesDeleteUnifiedId$outboundSchema.parse(companiesDeleteUnifiedId),
  );
}

export function companiesDeleteUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteUnifiedId' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteResponseBody$inboundSchema: z.ZodType<
  CompaniesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CompaniesDeleteUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CompaniesDeleteResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CompaniesDeleteUnifiedId$Outbound;
};

/** @internal */
export const CompaniesDeleteResponseBody$outboundSchema: z.ZodType<
  CompaniesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CompaniesDeleteUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteResponseBody$ {
  /** @deprecated use `CompaniesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteResponseBody$inboundSchema;
  /** @deprecated use `CompaniesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteResponseBody$outboundSchema;
  /** @deprecated use `CompaniesDeleteResponseBody$Outbound` instead. */
  export type Outbound = CompaniesDeleteResponseBody$Outbound;
}

export function companiesDeleteResponseBodyToJSON(
  companiesDeleteResponseBody: CompaniesDeleteResponseBody,
): string {
  return JSON.stringify(
    CompaniesDeleteResponseBody$outboundSchema.parse(
      companiesDeleteResponseBody,
    ),
  );
}

export function companiesDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteResponse$inboundSchema: z.ZodType<
  CompaniesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CompaniesDeleteResponseBody$inboundSchema),
  z.lazy(() => CompaniesDeleteCompaniesResponseBody$inboundSchema),
]);

/** @internal */
export type CompaniesDeleteResponse$Outbound =
  | CompaniesDeleteResponseBody$Outbound
  | CompaniesDeleteCompaniesResponseBody$Outbound;

/** @internal */
export const CompaniesDeleteResponse$outboundSchema: z.ZodType<
  CompaniesDeleteResponse$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteResponse
> = z.union([
  z.lazy(() => CompaniesDeleteResponseBody$outboundSchema),
  z.lazy(() => CompaniesDeleteCompaniesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteResponse$ {
  /** @deprecated use `CompaniesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteResponse$inboundSchema;
  /** @deprecated use `CompaniesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteResponse$outboundSchema;
  /** @deprecated use `CompaniesDeleteResponse$Outbound` instead. */
  export type Outbound = CompaniesDeleteResponse$Outbound;
}

export function companiesDeleteResponseToJSON(
  companiesDeleteResponse: CompaniesDeleteResponse,
): string {
  return JSON.stringify(
    CompaniesDeleteResponse$outboundSchema.parse(companiesDeleteResponse),
  );
}

export function companiesDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteResponse' from JSON`,
  );
}
