/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompaniesDeleteSecurity = {
  apiKey: string;
};

export type CompaniesDeleteRequest = {
  /**
   * The unique identifier of the activity record to be deleted. This parameter is essential as it specifies which activity in the CRM system will be removed. Ensure that the ID corresponds to an existing activity to avoid errors.
   */
  id: string;
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
};

export type CompaniesDeleteResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Company deleted
   */
  companyDeleteResponse?: components.CompanyDeleteResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CompaniesDeleteSecurity$inboundSchema: z.ZodType<
  CompaniesDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type CompaniesDeleteSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const CompaniesDeleteSecurity$outboundSchema: z.ZodType<
  CompaniesDeleteSecurity$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteSecurity$ {
  /** @deprecated use `CompaniesDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteSecurity$inboundSchema;
  /** @deprecated use `CompaniesDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteSecurity$outboundSchema;
  /** @deprecated use `CompaniesDeleteSecurity$Outbound` instead. */
  export type Outbound = CompaniesDeleteSecurity$Outbound;
}

export function companiesDeleteSecurityToJSON(
  companiesDeleteSecurity: CompaniesDeleteSecurity,
): string {
  return JSON.stringify(
    CompaniesDeleteSecurity$outboundSchema.parse(companiesDeleteSecurity),
  );
}

export function companiesDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteRequest$inboundSchema: z.ZodType<
  CompaniesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
});

/** @internal */
export type CompaniesDeleteRequest$Outbound = {
  id: string;
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
};

/** @internal */
export const CompaniesDeleteRequest$outboundSchema: z.ZodType<
  CompaniesDeleteRequest$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteRequest
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteRequest$ {
  /** @deprecated use `CompaniesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteRequest$inboundSchema;
  /** @deprecated use `CompaniesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteRequest$outboundSchema;
  /** @deprecated use `CompaniesDeleteRequest$Outbound` instead. */
  export type Outbound = CompaniesDeleteRequest$Outbound;
}

export function companiesDeleteRequestToJSON(
  companiesDeleteRequest: CompaniesDeleteRequest,
): string {
  return JSON.stringify(
    CompaniesDeleteRequest$outboundSchema.parse(companiesDeleteRequest),
  );
}

export function companiesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const CompaniesDeleteResponse$inboundSchema: z.ZodType<
  CompaniesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CompanyDeleteResponse: components.CompanyDeleteResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CompanyDeleteResponse": "companyDeleteResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CompaniesDeleteResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CompanyDeleteResponse?: components.CompanyDeleteResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CompaniesDeleteResponse$outboundSchema: z.ZodType<
  CompaniesDeleteResponse$Outbound,
  z.ZodTypeDef,
  CompaniesDeleteResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  companyDeleteResponse: components.CompanyDeleteResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    companyDeleteResponse: "CompanyDeleteResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesDeleteResponse$ {
  /** @deprecated use `CompaniesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = CompaniesDeleteResponse$inboundSchema;
  /** @deprecated use `CompaniesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = CompaniesDeleteResponse$outboundSchema;
  /** @deprecated use `CompaniesDeleteResponse$Outbound` instead. */
  export type Outbound = CompaniesDeleteResponse$Outbound;
}

export function companiesDeleteResponseToJSON(
  companiesDeleteResponse: CompaniesDeleteResponse,
): string {
  return JSON.stringify(
    CompaniesDeleteResponse$outboundSchema.parse(companiesDeleteResponse),
  );
}

export function companiesDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesDeleteResponse' from JSON`,
  );
}
