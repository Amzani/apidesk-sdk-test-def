/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisCompaniesAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisCompaniesAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisCompaniesAllHrisCompaniesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export const HrisCompaniesAllStatus = {
  Active: "active",
  Inactive: "inactive",
  Trial: "trial",
  Other: "other",
} as const;
export type HrisCompaniesAllStatus = ClosedEnum<typeof HrisCompaniesAllStatus>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisCompaniesAllCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisCompaniesAllCurrency = ClosedEnum<
  typeof HrisCompaniesAllCurrency
>;

/**
 * The type of address.
 */
export const HrisCompaniesAllType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisCompaniesAllType = ClosedEnum<typeof HrisCompaniesAllType>;

export type HrisCompaniesAllAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisCompaniesAllType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const HrisCompaniesAllHrisCompaniesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type HrisCompaniesAllHrisCompaniesType = ClosedEnum<
  typeof HrisCompaniesAllHrisCompaniesType
>;

export type HrisCompaniesAllPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: HrisCompaniesAllHrisCompaniesType | null | undefined;
};

/**
 * Email type
 */
export const HrisCompaniesAllHrisCompaniesResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type HrisCompaniesAllHrisCompaniesResponseType = ClosedEnum<
  typeof HrisCompaniesAllHrisCompaniesResponseType
>;

export type HrisCompaniesAllEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: HrisCompaniesAllHrisCompaniesResponseType | null | undefined;
};

/**
 * The type of website
 */
export const HrisCompaniesAllHrisCompaniesResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type HrisCompaniesAllHrisCompaniesResponse200Type = ClosedEnum<
  typeof HrisCompaniesAllHrisCompaniesResponse200Type
>;

export type HrisCompaniesAllWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: HrisCompaniesAllHrisCompaniesResponse200Type | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisCompaniesAllCustomMappings = {};

export type HrisCompaniesAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisCompaniesAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisCompaniesAllExtendPaths> | undefined;
};

export type HrisCompaniesAllData = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  legalName: string | null;
  displayName?: string | null | undefined;
  subdomain?: string | null | undefined;
  status?: HrisCompaniesAllStatus | undefined;
  /**
   * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
   */
  companyNumber?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisCompaniesAllCurrency | null | undefined;
  addresses?: Array<HrisCompaniesAllAddresses> | undefined;
  phoneNumbers?: Array<HrisCompaniesAllPhoneNumbers> | undefined;
  emails?: Array<HrisCompaniesAllEmails> | undefined;
  websites?: Array<HrisCompaniesAllWebsites> | undefined;
  debtorId?: string | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: HrisCompaniesAllCustomMappings | null | undefined;
  deleted?: boolean | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisCompaniesAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type HrisCompaniesAllCursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type HrisCompaniesAllMeta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: HrisCompaniesAllCursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type HrisCompaniesAllLinks = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Companies
 */
export type HrisCompaniesAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<HrisCompaniesAllData>;
  /**
   * Response metadata
   */
  meta?: HrisCompaniesAllMeta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: HrisCompaniesAllLinks | undefined;
};

export type HrisCompaniesAllResponseResult =
  | HrisCompaniesAllHrisCompaniesResponseBody
  | HrisCompaniesAllResponseBody;

export type HrisCompaniesAllResponse = {
  result:
    | HrisCompaniesAllHrisCompaniesResponseBody
    | HrisCompaniesAllResponseBody;
};

/** @internal */
export const HrisCompaniesAllGlobals$inboundSchema: z.ZodType<
  HrisCompaniesAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisCompaniesAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisCompaniesAllGlobals$outboundSchema: z.ZodType<
  HrisCompaniesAllGlobals$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllGlobals$ {
  /** @deprecated use `HrisCompaniesAllGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllGlobals$inboundSchema;
  /** @deprecated use `HrisCompaniesAllGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllGlobals$outboundSchema;
  /** @deprecated use `HrisCompaniesAllGlobals$Outbound` instead. */
  export type Outbound = HrisCompaniesAllGlobals$Outbound;
}

export function hrisCompaniesAllGlobalsToJSON(
  hrisCompaniesAllGlobals: HrisCompaniesAllGlobals,
): string {
  return JSON.stringify(
    HrisCompaniesAllGlobals$outboundSchema.parse(hrisCompaniesAllGlobals),
  );
}

export function hrisCompaniesAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllGlobals' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllRequest$inboundSchema: z.ZodType<
  HrisCompaniesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisCompaniesAllRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesAllRequest$outboundSchema: z.ZodType<
  HrisCompaniesAllRequest$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllRequest$ {
  /** @deprecated use `HrisCompaniesAllRequest$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllRequest$inboundSchema;
  /** @deprecated use `HrisCompaniesAllRequest$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllRequest$outboundSchema;
  /** @deprecated use `HrisCompaniesAllRequest$Outbound` instead. */
  export type Outbound = HrisCompaniesAllRequest$Outbound;
}

export function hrisCompaniesAllRequestToJSON(
  hrisCompaniesAllRequest: HrisCompaniesAllRequest,
): string {
  return JSON.stringify(
    HrisCompaniesAllRequest$outboundSchema.parse(hrisCompaniesAllRequest),
  );
}

export function hrisCompaniesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllRequest' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllDetail$inboundSchema: z.ZodType<
  HrisCompaniesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisCompaniesAllDetail$outboundSchema: z.ZodType<
  HrisCompaniesAllDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllDetail$ {
  /** @deprecated use `HrisCompaniesAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesAllDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesAllDetail$Outbound;
}

export function hrisCompaniesAllDetailToJSON(
  hrisCompaniesAllDetail: HrisCompaniesAllDetail,
): string {
  return JSON.stringify(
    HrisCompaniesAllDetail$outboundSchema.parse(hrisCompaniesAllDetail),
  );
}

export function hrisCompaniesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesAllHrisCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type HrisCompaniesAllHrisCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesAllHrisCompaniesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAllHrisCompaniesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesResponseBody$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAllHrisCompaniesResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesAllHrisCompaniesResponseBody$Outbound;
}

export function hrisCompaniesAllHrisCompaniesResponseBodyToJSON(
  hrisCompaniesAllHrisCompaniesResponseBody:
    HrisCompaniesAllHrisCompaniesResponseBody,
): string {
  return JSON.stringify(
    HrisCompaniesAllHrisCompaniesResponseBody$outboundSchema.parse(
      hrisCompaniesAllHrisCompaniesResponseBody,
    ),
  );
}

export function hrisCompaniesAllHrisCompaniesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesAllHrisCompaniesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesAllHrisCompaniesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesAllHrisCompaniesResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAllStatus
> = z.nativeEnum(HrisCompaniesAllStatus);

/** @internal */
export const HrisCompaniesAllStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAllStatus
> = HrisCompaniesAllStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllStatus$ {
  /** @deprecated use `HrisCompaniesAllStatus$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllStatus$inboundSchema;
  /** @deprecated use `HrisCompaniesAllStatus$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllStatus$outboundSchema;
}

/** @internal */
export const HrisCompaniesAllCurrency$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAllCurrency
> = z.nativeEnum(HrisCompaniesAllCurrency);

/** @internal */
export const HrisCompaniesAllCurrency$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAllCurrency
> = HrisCompaniesAllCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllCurrency$ {
  /** @deprecated use `HrisCompaniesAllCurrency$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllCurrency$inboundSchema;
  /** @deprecated use `HrisCompaniesAllCurrency$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllCurrency$outboundSchema;
}

/** @internal */
export const HrisCompaniesAllType$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAllType
> = z.nativeEnum(HrisCompaniesAllType);

/** @internal */
export const HrisCompaniesAllType$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAllType
> = HrisCompaniesAllType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllType$ {
  /** @deprecated use `HrisCompaniesAllType$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllType$inboundSchema;
  /** @deprecated use `HrisCompaniesAllType$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllType$outboundSchema;
}

/** @internal */
export const HrisCompaniesAllAddresses$inboundSchema: z.ZodType<
  HrisCompaniesAllAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesAllType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisCompaniesAllAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesAllAddresses$outboundSchema: z.ZodType<
  HrisCompaniesAllAddresses$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesAllType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllAddresses$ {
  /** @deprecated use `HrisCompaniesAllAddresses$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllAddresses$inboundSchema;
  /** @deprecated use `HrisCompaniesAllAddresses$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllAddresses$outboundSchema;
  /** @deprecated use `HrisCompaniesAllAddresses$Outbound` instead. */
  export type Outbound = HrisCompaniesAllAddresses$Outbound;
}

export function hrisCompaniesAllAddressesToJSON(
  hrisCompaniesAllAddresses: HrisCompaniesAllAddresses,
): string {
  return JSON.stringify(
    HrisCompaniesAllAddresses$outboundSchema.parse(hrisCompaniesAllAddresses),
  );
}

export function hrisCompaniesAllAddressesFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllAddresses' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesType$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAllHrisCompaniesType
> = z.nativeEnum(HrisCompaniesAllHrisCompaniesType);

/** @internal */
export const HrisCompaniesAllHrisCompaniesType$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAllHrisCompaniesType
> = HrisCompaniesAllHrisCompaniesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesType$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesType$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllHrisCompaniesType$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesType$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesType$outboundSchema;
}

/** @internal */
export const HrisCompaniesAllPhoneNumbers$inboundSchema: z.ZodType<
  HrisCompaniesAllPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesAllHrisCompaniesType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type HrisCompaniesAllPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesAllPhoneNumbers$outboundSchema: z.ZodType<
  HrisCompaniesAllPhoneNumbers$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesAllHrisCompaniesType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllPhoneNumbers$ {
  /** @deprecated use `HrisCompaniesAllPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllPhoneNumbers$inboundSchema;
  /** @deprecated use `HrisCompaniesAllPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllPhoneNumbers$outboundSchema;
  /** @deprecated use `HrisCompaniesAllPhoneNumbers$Outbound` instead. */
  export type Outbound = HrisCompaniesAllPhoneNumbers$Outbound;
}

export function hrisCompaniesAllPhoneNumbersToJSON(
  hrisCompaniesAllPhoneNumbers: HrisCompaniesAllPhoneNumbers,
): string {
  return JSON.stringify(
    HrisCompaniesAllPhoneNumbers$outboundSchema.parse(
      hrisCompaniesAllPhoneNumbers,
    ),
  );
}

export function hrisCompaniesAllPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponseType$inboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesAllHrisCompaniesResponseType> = z
    .nativeEnum(HrisCompaniesAllHrisCompaniesResponseType);

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponseType$outboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesAllHrisCompaniesResponseType> =
    HrisCompaniesAllHrisCompaniesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesResponseType$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAllHrisCompaniesResponseType$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesResponseType$outboundSchema;
}

/** @internal */
export const HrisCompaniesAllEmails$inboundSchema: z.ZodType<
  HrisCompaniesAllEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisCompaniesAllHrisCompaniesResponseType$inboundSchema)
    .optional(),
});

/** @internal */
export type HrisCompaniesAllEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesAllEmails$outboundSchema: z.ZodType<
  HrisCompaniesAllEmails$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisCompaniesAllHrisCompaniesResponseType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllEmails$ {
  /** @deprecated use `HrisCompaniesAllEmails$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllEmails$inboundSchema;
  /** @deprecated use `HrisCompaniesAllEmails$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllEmails$outboundSchema;
  /** @deprecated use `HrisCompaniesAllEmails$Outbound` instead. */
  export type Outbound = HrisCompaniesAllEmails$Outbound;
}

export function hrisCompaniesAllEmailsToJSON(
  hrisCompaniesAllEmails: HrisCompaniesAllEmails,
): string {
  return JSON.stringify(
    HrisCompaniesAllEmails$outboundSchema.parse(hrisCompaniesAllEmails),
  );
}

export function hrisCompaniesAllEmailsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllEmails' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesAllHrisCompaniesResponse200Type> = z
    .nativeEnum(HrisCompaniesAllHrisCompaniesResponse200Type);

/** @internal */
export const HrisCompaniesAllHrisCompaniesResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesAllHrisCompaniesResponse200Type> =
    HrisCompaniesAllHrisCompaniesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllHrisCompaniesResponse200Type$ {
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAllHrisCompaniesResponse200Type$inboundSchema;
  /** @deprecated use `HrisCompaniesAllHrisCompaniesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAllHrisCompaniesResponse200Type$outboundSchema;
}

/** @internal */
export const HrisCompaniesAllWebsites$inboundSchema: z.ZodType<
  HrisCompaniesAllWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(HrisCompaniesAllHrisCompaniesResponse200Type$inboundSchema)
    .optional(),
});

/** @internal */
export type HrisCompaniesAllWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesAllWebsites$outboundSchema: z.ZodType<
  HrisCompaniesAllWebsites$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(HrisCompaniesAllHrisCompaniesResponse200Type$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllWebsites$ {
  /** @deprecated use `HrisCompaniesAllWebsites$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllWebsites$inboundSchema;
  /** @deprecated use `HrisCompaniesAllWebsites$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllWebsites$outboundSchema;
  /** @deprecated use `HrisCompaniesAllWebsites$Outbound` instead. */
  export type Outbound = HrisCompaniesAllWebsites$Outbound;
}

export function hrisCompaniesAllWebsitesToJSON(
  hrisCompaniesAllWebsites: HrisCompaniesAllWebsites,
): string {
  return JSON.stringify(
    HrisCompaniesAllWebsites$outboundSchema.parse(hrisCompaniesAllWebsites),
  );
}

export function hrisCompaniesAllWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllWebsites' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllCustomMappings$inboundSchema: z.ZodType<
  HrisCompaniesAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisCompaniesAllCustomMappings$Outbound = {};

/** @internal */
export const HrisCompaniesAllCustomMappings$outboundSchema: z.ZodType<
  HrisCompaniesAllCustomMappings$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllCustomMappings$ {
  /** @deprecated use `HrisCompaniesAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllCustomMappings$inboundSchema;
  /** @deprecated use `HrisCompaniesAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllCustomMappings$outboundSchema;
  /** @deprecated use `HrisCompaniesAllCustomMappings$Outbound` instead. */
  export type Outbound = HrisCompaniesAllCustomMappings$Outbound;
}

export function hrisCompaniesAllCustomMappingsToJSON(
  hrisCompaniesAllCustomMappings: HrisCompaniesAllCustomMappings,
): string {
  return JSON.stringify(
    HrisCompaniesAllCustomMappings$outboundSchema.parse(
      hrisCompaniesAllCustomMappings,
    ),
  );
}

export function hrisCompaniesAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllExtendPaths$inboundSchema: z.ZodType<
  HrisCompaniesAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisCompaniesAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisCompaniesAllExtendPaths$outboundSchema: z.ZodType<
  HrisCompaniesAllExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllExtendPaths$ {
  /** @deprecated use `HrisCompaniesAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllExtendPaths$inboundSchema;
  /** @deprecated use `HrisCompaniesAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllExtendPaths$outboundSchema;
  /** @deprecated use `HrisCompaniesAllExtendPaths$Outbound` instead. */
  export type Outbound = HrisCompaniesAllExtendPaths$Outbound;
}

export function hrisCompaniesAllExtendPathsToJSON(
  hrisCompaniesAllExtendPaths: HrisCompaniesAllExtendPaths,
): string {
  return JSON.stringify(
    HrisCompaniesAllExtendPaths$outboundSchema.parse(
      hrisCompaniesAllExtendPaths,
    ),
  );
}

export function hrisCompaniesAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllPassThrough$inboundSchema: z.ZodType<
  HrisCompaniesAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => HrisCompaniesAllExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisCompaniesAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisCompaniesAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisCompaniesAllPassThrough$outboundSchema: z.ZodType<
  HrisCompaniesAllPassThrough$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => HrisCompaniesAllExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllPassThrough$ {
  /** @deprecated use `HrisCompaniesAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllPassThrough$inboundSchema;
  /** @deprecated use `HrisCompaniesAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllPassThrough$outboundSchema;
  /** @deprecated use `HrisCompaniesAllPassThrough$Outbound` instead. */
  export type Outbound = HrisCompaniesAllPassThrough$Outbound;
}

export function hrisCompaniesAllPassThroughToJSON(
  hrisCompaniesAllPassThrough: HrisCompaniesAllPassThrough,
): string {
  return JSON.stringify(
    HrisCompaniesAllPassThrough$outboundSchema.parse(
      hrisCompaniesAllPassThrough,
    ),
  );
}

export function hrisCompaniesAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllPassThrough' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllData$inboundSchema: z.ZodType<
  HrisCompaniesAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  legal_name: z.nullable(z.string()),
  display_name: z.nullable(z.string()).optional(),
  subdomain: z.nullable(z.string()).optional(),
  status: HrisCompaniesAllStatus$inboundSchema.optional(),
  company_number: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisCompaniesAllCurrency$inboundSchema).optional(),
  addresses: z.array(z.lazy(() => HrisCompaniesAllAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => HrisCompaniesAllPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisCompaniesAllEmails$inboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => HrisCompaniesAllWebsites$inboundSchema))
    .optional(),
  debtor_id: z.nullable(z.string()).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => HrisCompaniesAllCustomMappings$inboundSchema),
  ).optional(),
  deleted: z.boolean().optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(z.lazy(() => HrisCompaniesAllPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "legal_name": "legalName",
    "display_name": "displayName",
    "company_number": "companyNumber",
    "phone_numbers": "phoneNumbers",
    "debtor_id": "debtorId",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisCompaniesAllData$Outbound = {
  id?: string | undefined;
  legal_name: string | null;
  display_name?: string | null | undefined;
  subdomain?: string | null | undefined;
  status?: string | undefined;
  company_number?: string | null | undefined;
  currency?: string | null | undefined;
  addresses?: Array<HrisCompaniesAllAddresses$Outbound> | undefined;
  phone_numbers?: Array<HrisCompaniesAllPhoneNumbers$Outbound> | undefined;
  emails?: Array<HrisCompaniesAllEmails$Outbound> | undefined;
  websites?: Array<HrisCompaniesAllWebsites$Outbound> | undefined;
  debtor_id?: string | null | undefined;
  custom_mappings?: HrisCompaniesAllCustomMappings$Outbound | null | undefined;
  deleted?: boolean | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<HrisCompaniesAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisCompaniesAllData$outboundSchema: z.ZodType<
  HrisCompaniesAllData$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllData
> = z.object({
  id: z.string().optional(),
  legalName: z.nullable(z.string()),
  displayName: z.nullable(z.string()).optional(),
  subdomain: z.nullable(z.string()).optional(),
  status: HrisCompaniesAllStatus$outboundSchema.optional(),
  companyNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisCompaniesAllCurrency$outboundSchema).optional(),
  addresses: z.array(z.lazy(() => HrisCompaniesAllAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => HrisCompaniesAllPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisCompaniesAllEmails$outboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => HrisCompaniesAllWebsites$outboundSchema))
    .optional(),
  debtorId: z.nullable(z.string()).optional(),
  customMappings: z.nullable(
    z.lazy(() => HrisCompaniesAllCustomMappings$outboundSchema),
  ).optional(),
  deleted: z.boolean().optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(z.lazy(() => HrisCompaniesAllPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    legalName: "legal_name",
    displayName: "display_name",
    companyNumber: "company_number",
    phoneNumbers: "phone_numbers",
    debtorId: "debtor_id",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllData$ {
  /** @deprecated use `HrisCompaniesAllData$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllData$inboundSchema;
  /** @deprecated use `HrisCompaniesAllData$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllData$outboundSchema;
  /** @deprecated use `HrisCompaniesAllData$Outbound` instead. */
  export type Outbound = HrisCompaniesAllData$Outbound;
}

export function hrisCompaniesAllDataToJSON(
  hrisCompaniesAllData: HrisCompaniesAllData,
): string {
  return JSON.stringify(
    HrisCompaniesAllData$outboundSchema.parse(hrisCompaniesAllData),
  );
}

export function hrisCompaniesAllDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllData' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllCursors$inboundSchema: z.ZodType<
  HrisCompaniesAllCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisCompaniesAllCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesAllCursors$outboundSchema: z.ZodType<
  HrisCompaniesAllCursors$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllCursors$ {
  /** @deprecated use `HrisCompaniesAllCursors$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllCursors$inboundSchema;
  /** @deprecated use `HrisCompaniesAllCursors$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllCursors$outboundSchema;
  /** @deprecated use `HrisCompaniesAllCursors$Outbound` instead. */
  export type Outbound = HrisCompaniesAllCursors$Outbound;
}

export function hrisCompaniesAllCursorsToJSON(
  hrisCompaniesAllCursors: HrisCompaniesAllCursors,
): string {
  return JSON.stringify(
    HrisCompaniesAllCursors$outboundSchema.parse(hrisCompaniesAllCursors),
  );
}

export function hrisCompaniesAllCursorsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllCursors' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllMeta$inboundSchema: z.ZodType<
  HrisCompaniesAllMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => HrisCompaniesAllCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type HrisCompaniesAllMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: HrisCompaniesAllCursors$Outbound | undefined;
};

/** @internal */
export const HrisCompaniesAllMeta$outboundSchema: z.ZodType<
  HrisCompaniesAllMeta$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => HrisCompaniesAllCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllMeta$ {
  /** @deprecated use `HrisCompaniesAllMeta$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllMeta$inboundSchema;
  /** @deprecated use `HrisCompaniesAllMeta$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllMeta$outboundSchema;
  /** @deprecated use `HrisCompaniesAllMeta$Outbound` instead. */
  export type Outbound = HrisCompaniesAllMeta$Outbound;
}

export function hrisCompaniesAllMetaToJSON(
  hrisCompaniesAllMeta: HrisCompaniesAllMeta,
): string {
  return JSON.stringify(
    HrisCompaniesAllMeta$outboundSchema.parse(hrisCompaniesAllMeta),
  );
}

export function hrisCompaniesAllMetaFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllMeta' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllLinks$inboundSchema: z.ZodType<
  HrisCompaniesAllLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisCompaniesAllLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesAllLinks$outboundSchema: z.ZodType<
  HrisCompaniesAllLinks$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllLinks$ {
  /** @deprecated use `HrisCompaniesAllLinks$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllLinks$inboundSchema;
  /** @deprecated use `HrisCompaniesAllLinks$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllLinks$outboundSchema;
  /** @deprecated use `HrisCompaniesAllLinks$Outbound` instead. */
  export type Outbound = HrisCompaniesAllLinks$Outbound;
}

export function hrisCompaniesAllLinksToJSON(
  hrisCompaniesAllLinks: HrisCompaniesAllLinks,
): string {
  return JSON.stringify(
    HrisCompaniesAllLinks$outboundSchema.parse(hrisCompaniesAllLinks),
  );
}

export function hrisCompaniesAllLinksFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllLinks' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => HrisCompaniesAllData$inboundSchema)),
  meta: z.lazy(() => HrisCompaniesAllMeta$inboundSchema).optional(),
  links: z.lazy(() => HrisCompaniesAllLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisCompaniesAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<HrisCompaniesAllData$Outbound>;
  meta?: HrisCompaniesAllMeta$Outbound | undefined;
  links?: HrisCompaniesAllLinks$Outbound | undefined;
};

/** @internal */
export const HrisCompaniesAllResponseBody$outboundSchema: z.ZodType<
  HrisCompaniesAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => HrisCompaniesAllData$outboundSchema)),
  meta: z.lazy(() => HrisCompaniesAllMeta$outboundSchema).optional(),
  links: z.lazy(() => HrisCompaniesAllLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllResponseBody$ {
  /** @deprecated use `HrisCompaniesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAllResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesAllResponseBody$Outbound;
}

export function hrisCompaniesAllResponseBodyToJSON(
  hrisCompaniesAllResponseBody: HrisCompaniesAllResponseBody,
): string {
  return JSON.stringify(
    HrisCompaniesAllResponseBody$outboundSchema.parse(
      hrisCompaniesAllResponseBody,
    ),
  );
}

export function hrisCompaniesAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllResponseResult$inboundSchema: z.ZodType<
  HrisCompaniesAllResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisCompaniesAllHrisCompaniesResponseBody$inboundSchema),
  z.lazy(() => HrisCompaniesAllResponseBody$inboundSchema),
]);

/** @internal */
export type HrisCompaniesAllResponseResult$Outbound =
  | HrisCompaniesAllHrisCompaniesResponseBody$Outbound
  | HrisCompaniesAllResponseBody$Outbound;

/** @internal */
export const HrisCompaniesAllResponseResult$outboundSchema: z.ZodType<
  HrisCompaniesAllResponseResult$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllResponseResult
> = z.union([
  z.lazy(() => HrisCompaniesAllHrisCompaniesResponseBody$outboundSchema),
  z.lazy(() => HrisCompaniesAllResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllResponseResult$ {
  /** @deprecated use `HrisCompaniesAllResponseResult$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllResponseResult$inboundSchema;
  /** @deprecated use `HrisCompaniesAllResponseResult$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllResponseResult$outboundSchema;
  /** @deprecated use `HrisCompaniesAllResponseResult$Outbound` instead. */
  export type Outbound = HrisCompaniesAllResponseResult$Outbound;
}

export function hrisCompaniesAllResponseResultToJSON(
  hrisCompaniesAllResponseResult: HrisCompaniesAllResponseResult,
): string {
  return JSON.stringify(
    HrisCompaniesAllResponseResult$outboundSchema.parse(
      hrisCompaniesAllResponseResult,
    ),
  );
}

export function hrisCompaniesAllResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllResponseResult' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAllResponse$inboundSchema: z.ZodType<
  HrisCompaniesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.union([
    z.lazy(() => HrisCompaniesAllHrisCompaniesResponseBody$inboundSchema),
    z.lazy(() => HrisCompaniesAllResponseBody$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type HrisCompaniesAllResponse$Outbound = {
  Result:
    | HrisCompaniesAllHrisCompaniesResponseBody$Outbound
    | HrisCompaniesAllResponseBody$Outbound;
};

/** @internal */
export const HrisCompaniesAllResponse$outboundSchema: z.ZodType<
  HrisCompaniesAllResponse$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAllResponse
> = z.object({
  result: z.union([
    z.lazy(() => HrisCompaniesAllHrisCompaniesResponseBody$outboundSchema),
    z.lazy(() => HrisCompaniesAllResponseBody$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAllResponse$ {
  /** @deprecated use `HrisCompaniesAllResponse$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAllResponse$inboundSchema;
  /** @deprecated use `HrisCompaniesAllResponse$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAllResponse$outboundSchema;
  /** @deprecated use `HrisCompaniesAllResponse$Outbound` instead. */
  export type Outbound = HrisCompaniesAllResponse$Outbound;
}

export function hrisCompaniesAllResponseToJSON(
  hrisCompaniesAllResponse: HrisCompaniesAllResponse,
): string {
  return JSON.stringify(
    HrisCompaniesAllResponse$outboundSchema.parse(hrisCompaniesAllResponse),
  );
}

export function hrisCompaniesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAllResponse' from JSON`,
  );
}
