/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OpportunitiesAllSecurity = {
  apiKey: string;
};

/**
 * Apply filters
 */
export type OpportunitiesAllQueryParamFilter = {
  /**
   * Title of the opportunity to filter on
   */
  title?: string | undefined;
  /**
   * Status to filter on
   */
  status?: string | undefined;
  /**
   * Monetary amount to filter on
   */
  monetaryAmount?: number | undefined;
  /**
   * Win probability to filter on
   */
  winProbability?: number | undefined;
  /**
   * Company ID to filter on
   */
  companyId?: string | undefined;
  /**
   * Owner ID to filter on
   */
  ownerId?: string | undefined;
  /**
   * Primary contact ID to filter on
   */
  primaryContactId?: string | undefined;
};

/**
 * The field on which to sort the Opportunities
 */
export const OpportunitiesAllQueryParamBy = {
  CreatedAt: "created_at",
  UpdatedAt: "updated_at",
  Title: "title",
  WinProbability: "win_probability",
  MonetaryAmount: "monetary_amount",
  Status: "status",
} as const;
/**
 * The field on which to sort the Opportunities
 */
export type OpportunitiesAllQueryParamBy = ClosedEnum<
  typeof OpportunitiesAllQueryParamBy
>;

/**
 * The direction in which to sort the results
 */
export const OpportunitiesAllQueryParamDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction in which to sort the results
 */
export type OpportunitiesAllQueryParamDirection = ClosedEnum<
  typeof OpportunitiesAllQueryParamDirection
>;

/**
 * Apply sorting
 */
export type OpportunitiesAllQueryParamSort = {
  /**
   * The field on which to sort the Opportunities
   */
  by?: OpportunitiesAllQueryParamBy | undefined;
  /**
   * The direction in which to sort the results
   */
  direction?: OpportunitiesAllQueryParamDirection | undefined;
};

export type OpportunitiesAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Apply filters
   */
  filter?: OpportunitiesAllQueryParamFilter | undefined;
  /**
   * Apply sorting
   */
  sort?: OpportunitiesAllQueryParamSort | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type OpportunitiesAllOpportunitiesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const OpportunitiesAllCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type OpportunitiesAllCurrency = ClosedEnum<
  typeof OpportunitiesAllCurrency
>;

export type OpportunitiesAllValue6 = {};

export type OpportunitiesAllValue4 = {};

export type OpportunitiesAllValue =
  | OpportunitiesAllValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<OpportunitiesAllValue6>;

export type OpportunitiesAllCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | OpportunitiesAllValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<OpportunitiesAllValue6>
    | null
    | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type OpportunitiesAllCustomMappings = {};

export type OpportunitiesAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type OpportunitiesAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<OpportunitiesAllExtendPaths> | undefined;
};

export type OpportunitiesAllData = {
  /**
   * A unique identifier for the opportunity.
   */
  id?: string | undefined;
  /**
   * The title or name of the opportunity.
   */
  title: string;
  /**
   * The unique identifier of the primary contact associated with the opportunity.
   */
  primaryContactId: string | null;
  /**
   * A description of the opportunity.
   */
  description?: string | null | undefined;
  /**
   * The type of the opportunity
   */
  type?: string | null | undefined;
  /**
   * The monetary value associated with the opportunity
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: OpportunitiesAllCurrency | null | undefined;
  /**
   * The probability of winning the opportunity, expressed as a percentage.
   */
  winProbability?: number | null | undefined;
  /**
   * The expected revenue from the opportunity
   */
  expectedRevenue?: number | null | undefined;
  /**
   * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
   */
  closeDate?: RFCDate | null | undefined;
  /**
   * The unique identifier of the reason why the opportunity was lost.
   */
  lossReasonId?: string | null | undefined;
  /**
   * The reason why the opportunity was lost.
   */
  lossReason?: string | null | undefined;
  /**
   * The unique identifier of the reason why the opportunity was won.
   */
  wonReasonId?: string | null | undefined;
  /**
   * The reason why the opportunity was won.
   */
  wonReason?: string | null | undefined;
  /**
   * The unique identifier of the pipeline associated with the opportunity
   */
  pipelineId?: string | null | undefined;
  /**
   * The unique identifier of the stage in the pipeline associated with the opportunity.
   */
  pipelineStageId?: string | null | undefined;
  /**
   * The unique identifier of the source of the opportunity.
   */
  sourceId?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with the opportunity.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead associated with the opportunity.
   */
  leadSource?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with the opportunity.
   */
  contactId?: string | null | undefined;
  /**
   * An array of unique identifiers of all contacts associated with the opportunity.
   */
  contactIds?: Array<string> | undefined;
  /**
   * The unique identifier of the company associated with the opportunity.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company associated with the opportunity.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier of the user who owns the opportunity.
   */
  ownerId?: string | null | undefined;
  /**
   * The priority level of the opportunity.
   */
  priority?: string | null | undefined;
  /**
   * The current status of the opportunity.
   */
  status?: string | null | undefined;
  /**
   * The unique identifier of the current status of the opportunity.
   */
  statusId?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * The number of interactions with the opportunity.
   */
  interactionCount?: number | null | undefined;
  customFields?: Array<OpportunitiesAllCustomFields> | undefined;
  /**
   * The date and time when the stage of the opportunity was last changed.
   */
  stageLastChangedAt?: Date | null | undefined;
  /**
   * The date and time of the last activity associated with the opportunity.
   */
  lastActivityAt?: string | null | undefined;
  /**
   * Indicates whether the opportunity has been deleted.
   */
  deleted?: boolean | undefined;
  /**
   * The date and time when the stage of the opportunity was last changed.
   */
  dateStageChanged?: Date | null | undefined;
  /**
   * The date and time when the opportunity was last contacted.
   */
  dateLastContacted?: Date | null | undefined;
  /**
   * The date and time when the lead associated with the opportunity was created.
   */
  dateLeadCreated?: Date | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: OpportunitiesAllCustomMappings | null | undefined;
  /**
   * The unique identifier of the user who last updated the opportunity.
   */
  updatedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who created the opportunity.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the opportunity was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the opportunity was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<OpportunitiesAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type OpportunitiesAllCursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type OpportunitiesAllMeta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: OpportunitiesAllCursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type OpportunitiesAllLinks = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Opportunities
 */
export type OpportunitiesAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<OpportunitiesAllData>;
  /**
   * Response metadata
   */
  meta?: OpportunitiesAllMeta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: OpportunitiesAllLinks | undefined;
};

export type OpportunitiesAllResponse =
  | OpportunitiesAllOpportunitiesResponseBody
  | OpportunitiesAllResponseBody;

/** @internal */
export const OpportunitiesAllSecurity$inboundSchema: z.ZodType<
  OpportunitiesAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type OpportunitiesAllSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const OpportunitiesAllSecurity$outboundSchema: z.ZodType<
  OpportunitiesAllSecurity$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllSecurity$ {
  /** @deprecated use `OpportunitiesAllSecurity$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllSecurity$inboundSchema;
  /** @deprecated use `OpportunitiesAllSecurity$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllSecurity$outboundSchema;
  /** @deprecated use `OpportunitiesAllSecurity$Outbound` instead. */
  export type Outbound = OpportunitiesAllSecurity$Outbound;
}

export function opportunitiesAllSecurityToJSON(
  opportunitiesAllSecurity: OpportunitiesAllSecurity,
): string {
  return JSON.stringify(
    OpportunitiesAllSecurity$outboundSchema.parse(opportunitiesAllSecurity),
  );
}

export function opportunitiesAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllSecurity' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllQueryParamFilter$inboundSchema: z.ZodType<
  OpportunitiesAllQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  status: z.string().optional(),
  monetary_amount: z.number().optional(),
  win_probability: z.number().optional(),
  company_id: z.string().optional(),
  owner_id: z.string().optional(),
  primary_contact_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "company_id": "companyId",
    "owner_id": "ownerId",
    "primary_contact_id": "primaryContactId",
  });
});

/** @internal */
export type OpportunitiesAllQueryParamFilter$Outbound = {
  title?: string | undefined;
  status?: string | undefined;
  monetary_amount?: number | undefined;
  win_probability?: number | undefined;
  company_id?: string | undefined;
  owner_id?: string | undefined;
  primary_contact_id?: string | undefined;
};

/** @internal */
export const OpportunitiesAllQueryParamFilter$outboundSchema: z.ZodType<
  OpportunitiesAllQueryParamFilter$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllQueryParamFilter
> = z.object({
  title: z.string().optional(),
  status: z.string().optional(),
  monetaryAmount: z.number().optional(),
  winProbability: z.number().optional(),
  companyId: z.string().optional(),
  ownerId: z.string().optional(),
  primaryContactId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    companyId: "company_id",
    ownerId: "owner_id",
    primaryContactId: "primary_contact_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllQueryParamFilter$ {
  /** @deprecated use `OpportunitiesAllQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllQueryParamFilter$inboundSchema;
  /** @deprecated use `OpportunitiesAllQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllQueryParamFilter$outboundSchema;
  /** @deprecated use `OpportunitiesAllQueryParamFilter$Outbound` instead. */
  export type Outbound = OpportunitiesAllQueryParamFilter$Outbound;
}

export function opportunitiesAllQueryParamFilterToJSON(
  opportunitiesAllQueryParamFilter: OpportunitiesAllQueryParamFilter,
): string {
  return JSON.stringify(
    OpportunitiesAllQueryParamFilter$outboundSchema.parse(
      opportunitiesAllQueryParamFilter,
    ),
  );
}

export function opportunitiesAllQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllQueryParamBy$inboundSchema: z.ZodNativeEnum<
  typeof OpportunitiesAllQueryParamBy
> = z.nativeEnum(OpportunitiesAllQueryParamBy);

/** @internal */
export const OpportunitiesAllQueryParamBy$outboundSchema: z.ZodNativeEnum<
  typeof OpportunitiesAllQueryParamBy
> = OpportunitiesAllQueryParamBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllQueryParamBy$ {
  /** @deprecated use `OpportunitiesAllQueryParamBy$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllQueryParamBy$inboundSchema;
  /** @deprecated use `OpportunitiesAllQueryParamBy$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllQueryParamBy$outboundSchema;
}

/** @internal */
export const OpportunitiesAllQueryParamDirection$inboundSchema: z.ZodNativeEnum<
  typeof OpportunitiesAllQueryParamDirection
> = z.nativeEnum(OpportunitiesAllQueryParamDirection);

/** @internal */
export const OpportunitiesAllQueryParamDirection$outboundSchema:
  z.ZodNativeEnum<typeof OpportunitiesAllQueryParamDirection> =
    OpportunitiesAllQueryParamDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllQueryParamDirection$ {
  /** @deprecated use `OpportunitiesAllQueryParamDirection$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAllQueryParamDirection$inboundSchema;
  /** @deprecated use `OpportunitiesAllQueryParamDirection$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAllQueryParamDirection$outboundSchema;
}

/** @internal */
export const OpportunitiesAllQueryParamSort$inboundSchema: z.ZodType<
  OpportunitiesAllQueryParamSort,
  z.ZodTypeDef,
  unknown
> = z.object({
  by: OpportunitiesAllQueryParamBy$inboundSchema.optional(),
  direction: OpportunitiesAllQueryParamDirection$inboundSchema.default("asc"),
});

/** @internal */
export type OpportunitiesAllQueryParamSort$Outbound = {
  by?: string | undefined;
  direction: string;
};

/** @internal */
export const OpportunitiesAllQueryParamSort$outboundSchema: z.ZodType<
  OpportunitiesAllQueryParamSort$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllQueryParamSort
> = z.object({
  by: OpportunitiesAllQueryParamBy$outboundSchema.optional(),
  direction: OpportunitiesAllQueryParamDirection$outboundSchema.default("asc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllQueryParamSort$ {
  /** @deprecated use `OpportunitiesAllQueryParamSort$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllQueryParamSort$inboundSchema;
  /** @deprecated use `OpportunitiesAllQueryParamSort$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllQueryParamSort$outboundSchema;
  /** @deprecated use `OpportunitiesAllQueryParamSort$Outbound` instead. */
  export type Outbound = OpportunitiesAllQueryParamSort$Outbound;
}

export function opportunitiesAllQueryParamSortToJSON(
  opportunitiesAllQueryParamSort: OpportunitiesAllQueryParamSort,
): string {
  return JSON.stringify(
    OpportunitiesAllQueryParamSort$outboundSchema.parse(
      opportunitiesAllQueryParamSort,
    ),
  );
}

export function opportunitiesAllQueryParamSortFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllQueryParamSort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllQueryParamSort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllQueryParamSort' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllRequest$inboundSchema: z.ZodType<
  OpportunitiesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => OpportunitiesAllQueryParamFilter$inboundSchema)
    .optional(),
  sort: z.lazy(() => OpportunitiesAllQueryParamSort$inboundSchema).optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type OpportunitiesAllRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: OpportunitiesAllQueryParamFilter$Outbound | undefined;
  sort?: OpportunitiesAllQueryParamSort$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const OpportunitiesAllRequest$outboundSchema: z.ZodType<
  OpportunitiesAllRequest$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => OpportunitiesAllQueryParamFilter$outboundSchema)
    .optional(),
  sort: z.lazy(() => OpportunitiesAllQueryParamSort$outboundSchema).optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllRequest$ {
  /** @deprecated use `OpportunitiesAllRequest$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllRequest$inboundSchema;
  /** @deprecated use `OpportunitiesAllRequest$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllRequest$outboundSchema;
  /** @deprecated use `OpportunitiesAllRequest$Outbound` instead. */
  export type Outbound = OpportunitiesAllRequest$Outbound;
}

export function opportunitiesAllRequestToJSON(
  opportunitiesAllRequest: OpportunitiesAllRequest,
): string {
  return JSON.stringify(
    OpportunitiesAllRequest$outboundSchema.parse(opportunitiesAllRequest),
  );
}

export function opportunitiesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllRequest' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllDetail$inboundSchema: z.ZodType<
  OpportunitiesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const OpportunitiesAllDetail$outboundSchema: z.ZodType<
  OpportunitiesAllDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllDetail$ {
  /** @deprecated use `OpportunitiesAllDetail$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllDetail$inboundSchema;
  /** @deprecated use `OpportunitiesAllDetail$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllDetail$outboundSchema;
  /** @deprecated use `OpportunitiesAllDetail$Outbound` instead. */
  export type Outbound = OpportunitiesAllDetail$Outbound;
}

export function opportunitiesAllDetailToJSON(
  opportunitiesAllDetail: OpportunitiesAllDetail,
): string {
  return JSON.stringify(
    OpportunitiesAllDetail$outboundSchema.parse(opportunitiesAllDetail),
  );
}

export function opportunitiesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllOpportunitiesResponseBody$inboundSchema: z.ZodType<
  OpportunitiesAllOpportunitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type OpportunitiesAllOpportunitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAllOpportunitiesResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesAllOpportunitiesResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesAllOpportunitiesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllOpportunitiesResponseBody$ {
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAllOpportunitiesResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAllOpportunitiesResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAllOpportunitiesResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesAllOpportunitiesResponseBody$Outbound;
}

export function opportunitiesAllOpportunitiesResponseBodyToJSON(
  opportunitiesAllOpportunitiesResponseBody:
    OpportunitiesAllOpportunitiesResponseBody,
): string {
  return JSON.stringify(
    OpportunitiesAllOpportunitiesResponseBody$outboundSchema.parse(
      opportunitiesAllOpportunitiesResponseBody,
    ),
  );
}

export function opportunitiesAllOpportunitiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesAllOpportunitiesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesAllOpportunitiesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesAllOpportunitiesResponseBody' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllCurrency$inboundSchema: z.ZodNativeEnum<
  typeof OpportunitiesAllCurrency
> = z.nativeEnum(OpportunitiesAllCurrency);

/** @internal */
export const OpportunitiesAllCurrency$outboundSchema: z.ZodNativeEnum<
  typeof OpportunitiesAllCurrency
> = OpportunitiesAllCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllCurrency$ {
  /** @deprecated use `OpportunitiesAllCurrency$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllCurrency$inboundSchema;
  /** @deprecated use `OpportunitiesAllCurrency$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllCurrency$outboundSchema;
}

/** @internal */
export const OpportunitiesAllValue6$inboundSchema: z.ZodType<
  OpportunitiesAllValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunitiesAllValue6$Outbound = {};

/** @internal */
export const OpportunitiesAllValue6$outboundSchema: z.ZodType<
  OpportunitiesAllValue6$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllValue6$ {
  /** @deprecated use `OpportunitiesAllValue6$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllValue6$inboundSchema;
  /** @deprecated use `OpportunitiesAllValue6$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllValue6$outboundSchema;
  /** @deprecated use `OpportunitiesAllValue6$Outbound` instead. */
  export type Outbound = OpportunitiesAllValue6$Outbound;
}

export function opportunitiesAllValue6ToJSON(
  opportunitiesAllValue6: OpportunitiesAllValue6,
): string {
  return JSON.stringify(
    OpportunitiesAllValue6$outboundSchema.parse(opportunitiesAllValue6),
  );
}

export function opportunitiesAllValue6FromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllValue6' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllValue4$inboundSchema: z.ZodType<
  OpportunitiesAllValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunitiesAllValue4$Outbound = {};

/** @internal */
export const OpportunitiesAllValue4$outboundSchema: z.ZodType<
  OpportunitiesAllValue4$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllValue4$ {
  /** @deprecated use `OpportunitiesAllValue4$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllValue4$inboundSchema;
  /** @deprecated use `OpportunitiesAllValue4$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllValue4$outboundSchema;
  /** @deprecated use `OpportunitiesAllValue4$Outbound` instead. */
  export type Outbound = OpportunitiesAllValue4$Outbound;
}

export function opportunitiesAllValue4ToJSON(
  opportunitiesAllValue4: OpportunitiesAllValue4,
): string {
  return JSON.stringify(
    OpportunitiesAllValue4$outboundSchema.parse(opportunitiesAllValue4),
  );
}

export function opportunitiesAllValue4FromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllValue4' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllValue$inboundSchema: z.ZodType<
  OpportunitiesAllValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpportunitiesAllValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => OpportunitiesAllValue6$inboundSchema)),
]);

/** @internal */
export type OpportunitiesAllValue$Outbound =
  | OpportunitiesAllValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<OpportunitiesAllValue6$Outbound>;

/** @internal */
export const OpportunitiesAllValue$outboundSchema: z.ZodType<
  OpportunitiesAllValue$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllValue
> = z.union([
  z.lazy(() => OpportunitiesAllValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => OpportunitiesAllValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllValue$ {
  /** @deprecated use `OpportunitiesAllValue$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllValue$inboundSchema;
  /** @deprecated use `OpportunitiesAllValue$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllValue$outboundSchema;
  /** @deprecated use `OpportunitiesAllValue$Outbound` instead. */
  export type Outbound = OpportunitiesAllValue$Outbound;
}

export function opportunitiesAllValueToJSON(
  opportunitiesAllValue: OpportunitiesAllValue,
): string {
  return JSON.stringify(
    OpportunitiesAllValue$outboundSchema.parse(opportunitiesAllValue),
  );
}

export function opportunitiesAllValueFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllValue' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllCustomFields$inboundSchema: z.ZodType<
  OpportunitiesAllCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => OpportunitiesAllValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => OpportunitiesAllValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type OpportunitiesAllCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | OpportunitiesAllValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<OpportunitiesAllValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const OpportunitiesAllCustomFields$outboundSchema: z.ZodType<
  OpportunitiesAllCustomFields$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => OpportunitiesAllValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => OpportunitiesAllValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllCustomFields$ {
  /** @deprecated use `OpportunitiesAllCustomFields$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllCustomFields$inboundSchema;
  /** @deprecated use `OpportunitiesAllCustomFields$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllCustomFields$outboundSchema;
  /** @deprecated use `OpportunitiesAllCustomFields$Outbound` instead. */
  export type Outbound = OpportunitiesAllCustomFields$Outbound;
}

export function opportunitiesAllCustomFieldsToJSON(
  opportunitiesAllCustomFields: OpportunitiesAllCustomFields,
): string {
  return JSON.stringify(
    OpportunitiesAllCustomFields$outboundSchema.parse(
      opportunitiesAllCustomFields,
    ),
  );
}

export function opportunitiesAllCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllCustomFields' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllCustomMappings$inboundSchema: z.ZodType<
  OpportunitiesAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunitiesAllCustomMappings$Outbound = {};

/** @internal */
export const OpportunitiesAllCustomMappings$outboundSchema: z.ZodType<
  OpportunitiesAllCustomMappings$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllCustomMappings$ {
  /** @deprecated use `OpportunitiesAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllCustomMappings$inboundSchema;
  /** @deprecated use `OpportunitiesAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllCustomMappings$outboundSchema;
  /** @deprecated use `OpportunitiesAllCustomMappings$Outbound` instead. */
  export type Outbound = OpportunitiesAllCustomMappings$Outbound;
}

export function opportunitiesAllCustomMappingsToJSON(
  opportunitiesAllCustomMappings: OpportunitiesAllCustomMappings,
): string {
  return JSON.stringify(
    OpportunitiesAllCustomMappings$outboundSchema.parse(
      opportunitiesAllCustomMappings,
    ),
  );
}

export function opportunitiesAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllExtendPaths$inboundSchema: z.ZodType<
  OpportunitiesAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type OpportunitiesAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const OpportunitiesAllExtendPaths$outboundSchema: z.ZodType<
  OpportunitiesAllExtendPaths$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllExtendPaths$ {
  /** @deprecated use `OpportunitiesAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllExtendPaths$inboundSchema;
  /** @deprecated use `OpportunitiesAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllExtendPaths$outboundSchema;
  /** @deprecated use `OpportunitiesAllExtendPaths$Outbound` instead. */
  export type Outbound = OpportunitiesAllExtendPaths$Outbound;
}

export function opportunitiesAllExtendPathsToJSON(
  opportunitiesAllExtendPaths: OpportunitiesAllExtendPaths,
): string {
  return JSON.stringify(
    OpportunitiesAllExtendPaths$outboundSchema.parse(
      opportunitiesAllExtendPaths,
    ),
  );
}

export function opportunitiesAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllPassThrough$inboundSchema: z.ZodType<
  OpportunitiesAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => OpportunitiesAllExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type OpportunitiesAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<OpportunitiesAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const OpportunitiesAllPassThrough$outboundSchema: z.ZodType<
  OpportunitiesAllPassThrough$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => OpportunitiesAllExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllPassThrough$ {
  /** @deprecated use `OpportunitiesAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllPassThrough$inboundSchema;
  /** @deprecated use `OpportunitiesAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllPassThrough$outboundSchema;
  /** @deprecated use `OpportunitiesAllPassThrough$Outbound` instead. */
  export type Outbound = OpportunitiesAllPassThrough$Outbound;
}

export function opportunitiesAllPassThroughToJSON(
  opportunitiesAllPassThrough: OpportunitiesAllPassThrough,
): string {
  return JSON.stringify(
    OpportunitiesAllPassThrough$outboundSchema.parse(
      opportunitiesAllPassThrough,
    ),
  );
}

export function opportunitiesAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllPassThrough' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllData$inboundSchema: z.ZodType<
  OpportunitiesAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.string(),
  primary_contact_id: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(OpportunitiesAllCurrency$inboundSchema).optional(),
  win_probability: z.nullable(z.number()).optional(),
  expected_revenue: z.nullable(z.number()).optional(),
  close_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  loss_reason_id: z.nullable(z.string()).optional(),
  loss_reason: z.nullable(z.string()).optional(),
  won_reason_id: z.nullable(z.string()).optional(),
  won_reason: z.nullable(z.string()).optional(),
  pipeline_id: z.nullable(z.string()).optional(),
  pipeline_stage_id: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  contact_ids: z.array(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  status_id: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  interaction_count: z.nullable(z.number()).optional(),
  custom_fields: z.array(
    z.lazy(() => OpportunitiesAllCustomFields$inboundSchema),
  ).optional(),
  stage_last_changed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_activity_at: z.nullable(z.string()).optional(),
  deleted: z.boolean().optional(),
  date_stage_changed: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_last_contacted: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_lead_created: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => OpportunitiesAllCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(z.lazy(() => OpportunitiesAllPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "primary_contact_id": "primaryContactId",
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "expected_revenue": "expectedRevenue",
    "close_date": "closeDate",
    "loss_reason_id": "lossReasonId",
    "loss_reason": "lossReason",
    "won_reason_id": "wonReasonId",
    "won_reason": "wonReason",
    "pipeline_id": "pipelineId",
    "pipeline_stage_id": "pipelineStageId",
    "source_id": "sourceId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "contact_id": "contactId",
    "contact_ids": "contactIds",
    "company_id": "companyId",
    "company_name": "companyName",
    "owner_id": "ownerId",
    "status_id": "statusId",
    "interaction_count": "interactionCount",
    "custom_fields": "customFields",
    "stage_last_changed_at": "stageLastChangedAt",
    "last_activity_at": "lastActivityAt",
    "date_stage_changed": "dateStageChanged",
    "date_last_contacted": "dateLastContacted",
    "date_lead_created": "dateLeadCreated",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type OpportunitiesAllData$Outbound = {
  id?: string | undefined;
  title: string;
  primary_contact_id: string | null;
  description?: string | null | undefined;
  type?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  win_probability?: number | null | undefined;
  expected_revenue?: number | null | undefined;
  close_date?: string | null | undefined;
  loss_reason_id?: string | null | undefined;
  loss_reason?: string | null | undefined;
  won_reason_id?: string | null | undefined;
  won_reason?: string | null | undefined;
  pipeline_id?: string | null | undefined;
  pipeline_stage_id?: string | null | undefined;
  source_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  contact_id?: string | null | undefined;
  contact_ids?: Array<string> | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  owner_id?: string | null | undefined;
  priority?: string | null | undefined;
  status?: string | null | undefined;
  status_id?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  interaction_count?: number | null | undefined;
  custom_fields?: Array<OpportunitiesAllCustomFields$Outbound> | undefined;
  stage_last_changed_at?: string | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  date_stage_changed?: string | null | undefined;
  date_last_contacted?: string | null | undefined;
  date_lead_created?: string | null | undefined;
  custom_mappings?: OpportunitiesAllCustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<OpportunitiesAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const OpportunitiesAllData$outboundSchema: z.ZodType<
  OpportunitiesAllData$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllData
> = z.object({
  id: z.string().optional(),
  title: z.string(),
  primaryContactId: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(OpportunitiesAllCurrency$outboundSchema).optional(),
  winProbability: z.nullable(z.number()).optional(),
  expectedRevenue: z.nullable(z.number()).optional(),
  closeDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  lossReasonId: z.nullable(z.string()).optional(),
  lossReason: z.nullable(z.string()).optional(),
  wonReasonId: z.nullable(z.string()).optional(),
  wonReason: z.nullable(z.string()).optional(),
  pipelineId: z.nullable(z.string()).optional(),
  pipelineStageId: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  contactIds: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  statusId: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  interactionCount: z.nullable(z.number()).optional(),
  customFields: z.array(
    z.lazy(() => OpportunitiesAllCustomFields$outboundSchema),
  ).optional(),
  stageLastChangedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  lastActivityAt: z.nullable(z.string()).optional(),
  deleted: z.boolean().optional(),
  dateStageChanged: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  dateLastContacted: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  dateLeadCreated: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => OpportunitiesAllCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(z.lazy(() => OpportunitiesAllPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    primaryContactId: "primary_contact_id",
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    expectedRevenue: "expected_revenue",
    closeDate: "close_date",
    lossReasonId: "loss_reason_id",
    lossReason: "loss_reason",
    wonReasonId: "won_reason_id",
    wonReason: "won_reason",
    pipelineId: "pipeline_id",
    pipelineStageId: "pipeline_stage_id",
    sourceId: "source_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    contactId: "contact_id",
    contactIds: "contact_ids",
    companyId: "company_id",
    companyName: "company_name",
    ownerId: "owner_id",
    statusId: "status_id",
    interactionCount: "interaction_count",
    customFields: "custom_fields",
    stageLastChangedAt: "stage_last_changed_at",
    lastActivityAt: "last_activity_at",
    dateStageChanged: "date_stage_changed",
    dateLastContacted: "date_last_contacted",
    dateLeadCreated: "date_lead_created",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllData$ {
  /** @deprecated use `OpportunitiesAllData$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllData$inboundSchema;
  /** @deprecated use `OpportunitiesAllData$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllData$outboundSchema;
  /** @deprecated use `OpportunitiesAllData$Outbound` instead. */
  export type Outbound = OpportunitiesAllData$Outbound;
}

export function opportunitiesAllDataToJSON(
  opportunitiesAllData: OpportunitiesAllData,
): string {
  return JSON.stringify(
    OpportunitiesAllData$outboundSchema.parse(opportunitiesAllData),
  );
}

export function opportunitiesAllDataFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllData' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllCursors$inboundSchema: z.ZodType<
  OpportunitiesAllCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type OpportunitiesAllCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const OpportunitiesAllCursors$outboundSchema: z.ZodType<
  OpportunitiesAllCursors$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllCursors$ {
  /** @deprecated use `OpportunitiesAllCursors$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllCursors$inboundSchema;
  /** @deprecated use `OpportunitiesAllCursors$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllCursors$outboundSchema;
  /** @deprecated use `OpportunitiesAllCursors$Outbound` instead. */
  export type Outbound = OpportunitiesAllCursors$Outbound;
}

export function opportunitiesAllCursorsToJSON(
  opportunitiesAllCursors: OpportunitiesAllCursors,
): string {
  return JSON.stringify(
    OpportunitiesAllCursors$outboundSchema.parse(opportunitiesAllCursors),
  );
}

export function opportunitiesAllCursorsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllCursors' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllMeta$inboundSchema: z.ZodType<
  OpportunitiesAllMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => OpportunitiesAllCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type OpportunitiesAllMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: OpportunitiesAllCursors$Outbound | undefined;
};

/** @internal */
export const OpportunitiesAllMeta$outboundSchema: z.ZodType<
  OpportunitiesAllMeta$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => OpportunitiesAllCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllMeta$ {
  /** @deprecated use `OpportunitiesAllMeta$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllMeta$inboundSchema;
  /** @deprecated use `OpportunitiesAllMeta$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllMeta$outboundSchema;
  /** @deprecated use `OpportunitiesAllMeta$Outbound` instead. */
  export type Outbound = OpportunitiesAllMeta$Outbound;
}

export function opportunitiesAllMetaToJSON(
  opportunitiesAllMeta: OpportunitiesAllMeta,
): string {
  return JSON.stringify(
    OpportunitiesAllMeta$outboundSchema.parse(opportunitiesAllMeta),
  );
}

export function opportunitiesAllMetaFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllMeta' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllLinks$inboundSchema: z.ZodType<
  OpportunitiesAllLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type OpportunitiesAllLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const OpportunitiesAllLinks$outboundSchema: z.ZodType<
  OpportunitiesAllLinks$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllLinks$ {
  /** @deprecated use `OpportunitiesAllLinks$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllLinks$inboundSchema;
  /** @deprecated use `OpportunitiesAllLinks$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllLinks$outboundSchema;
  /** @deprecated use `OpportunitiesAllLinks$Outbound` instead. */
  export type Outbound = OpportunitiesAllLinks$Outbound;
}

export function opportunitiesAllLinksToJSON(
  opportunitiesAllLinks: OpportunitiesAllLinks,
): string {
  return JSON.stringify(
    OpportunitiesAllLinks$outboundSchema.parse(opportunitiesAllLinks),
  );
}

export function opportunitiesAllLinksFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllLinks' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllResponseBody$inboundSchema: z.ZodType<
  OpportunitiesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => OpportunitiesAllData$inboundSchema)),
  meta: z.lazy(() => OpportunitiesAllMeta$inboundSchema).optional(),
  links: z.lazy(() => OpportunitiesAllLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type OpportunitiesAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<OpportunitiesAllData$Outbound>;
  meta?: OpportunitiesAllMeta$Outbound | undefined;
  links?: OpportunitiesAllLinks$Outbound | undefined;
};

/** @internal */
export const OpportunitiesAllResponseBody$outboundSchema: z.ZodType<
  OpportunitiesAllResponseBody$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => OpportunitiesAllData$outboundSchema)),
  meta: z.lazy(() => OpportunitiesAllMeta$outboundSchema).optional(),
  links: z.lazy(() => OpportunitiesAllLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllResponseBody$ {
  /** @deprecated use `OpportunitiesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAllResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesAllResponseBody$Outbound;
}

export function opportunitiesAllResponseBodyToJSON(
  opportunitiesAllResponseBody: OpportunitiesAllResponseBody,
): string {
  return JSON.stringify(
    OpportunitiesAllResponseBody$outboundSchema.parse(
      opportunitiesAllResponseBody,
    ),
  );
}

export function opportunitiesAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllResponseBody' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAllResponse$inboundSchema: z.ZodType<
  OpportunitiesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpportunitiesAllOpportunitiesResponseBody$inboundSchema),
  z.lazy(() => OpportunitiesAllResponseBody$inboundSchema),
]);

/** @internal */
export type OpportunitiesAllResponse$Outbound =
  | OpportunitiesAllOpportunitiesResponseBody$Outbound
  | OpportunitiesAllResponseBody$Outbound;

/** @internal */
export const OpportunitiesAllResponse$outboundSchema: z.ZodType<
  OpportunitiesAllResponse$Outbound,
  z.ZodTypeDef,
  OpportunitiesAllResponse
> = z.union([
  z.lazy(() => OpportunitiesAllOpportunitiesResponseBody$outboundSchema),
  z.lazy(() => OpportunitiesAllResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAllResponse$ {
  /** @deprecated use `OpportunitiesAllResponse$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAllResponse$inboundSchema;
  /** @deprecated use `OpportunitiesAllResponse$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAllResponse$outboundSchema;
  /** @deprecated use `OpportunitiesAllResponse$Outbound` instead. */
  export type Outbound = OpportunitiesAllResponse$Outbound;
}

export function opportunitiesAllResponseToJSON(
  opportunitiesAllResponse: OpportunitiesAllResponse,
): string {
  return JSON.stringify(
    OpportunitiesAllResponse$outboundSchema.parse(opportunitiesAllResponse),
  );
}

export function opportunitiesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAllResponse' from JSON`,
  );
}
