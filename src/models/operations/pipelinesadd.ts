/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PipelinesAddSecurity = {
  apiKey: string;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const PipelinesAddCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type PipelinesAddCurrency = ClosedEnum<typeof PipelinesAddCurrency>;

export type Stages = {
  /**
   * The name of the Pipeline Stage.
   */
  name?: string | null | undefined;
  /**
   * The value of the Pipeline Stage.
   */
  value?: string | null | undefined;
  /**
   * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
   */
  winProbability?: number | null | undefined;
  /**
   * The order in which the Pipeline Stage is displayed in the UI.
   */
  displayOrder?: number | null | undefined;
};

export type PipelinesAddExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type PipelinesAddPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<PipelinesAddExtendPaths> | undefined;
};

export type PipelinesAddRequestBody = {
  /**
   * The unique identifier of the Pipeline.
   */
  id?: string | undefined;
  /**
   * The name of the Pipeline.
   */
  name: string;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: PipelinesAddCurrency | null | undefined;
  /**
   * Whether the Pipeline is archived or not.
   */
  archived?: boolean | undefined;
  /**
   * Whether the Pipeline is active or not.
   */
  active?: boolean | undefined;
  /**
   * The order in which the Pipeline is displayed in the UI.
   */
  displayOrder?: number | null | undefined;
  /**
   * Whether the Pipeline has win probability enabled or not.
   */
  winProbabilityEnabled?: boolean | undefined;
  /**
   * The Pipeline Stages.
   */
  stages?: Array<Stages> | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PipelinesAddPassThrough> | undefined;
};

export type PipelinesAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: PipelinesAddRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesAddDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type PipelinesAddPipelinesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type PipelinesAddUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Pipeline created
 */
export type PipelinesAddResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: PipelinesAddUnifiedId;
};

export type PipelinesAddResponse =
  | PipelinesAddResponseBody
  | PipelinesAddPipelinesResponseBody;

/** @internal */
export const PipelinesAddSecurity$inboundSchema: z.ZodType<
  PipelinesAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type PipelinesAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const PipelinesAddSecurity$outboundSchema: z.ZodType<
  PipelinesAddSecurity$Outbound,
  z.ZodTypeDef,
  PipelinesAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddSecurity$ {
  /** @deprecated use `PipelinesAddSecurity$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddSecurity$inboundSchema;
  /** @deprecated use `PipelinesAddSecurity$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddSecurity$outboundSchema;
  /** @deprecated use `PipelinesAddSecurity$Outbound` instead. */
  export type Outbound = PipelinesAddSecurity$Outbound;
}

export function pipelinesAddSecurityToJSON(
  pipelinesAddSecurity: PipelinesAddSecurity,
): string {
  return JSON.stringify(
    PipelinesAddSecurity$outboundSchema.parse(pipelinesAddSecurity),
  );
}

export function pipelinesAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddSecurity' from JSON`,
  );
}

/** @internal */
export const PipelinesAddCurrency$inboundSchema: z.ZodNativeEnum<
  typeof PipelinesAddCurrency
> = z.nativeEnum(PipelinesAddCurrency);

/** @internal */
export const PipelinesAddCurrency$outboundSchema: z.ZodNativeEnum<
  typeof PipelinesAddCurrency
> = PipelinesAddCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddCurrency$ {
  /** @deprecated use `PipelinesAddCurrency$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddCurrency$inboundSchema;
  /** @deprecated use `PipelinesAddCurrency$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddCurrency$outboundSchema;
}

/** @internal */
export const Stages$inboundSchema: z.ZodType<Stages, z.ZodTypeDef, unknown> = z
  .object({
    name: z.nullable(z.string()).optional(),
    value: z.nullable(z.string()).optional(),
    win_probability: z.nullable(z.number().int()).optional(),
    display_order: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "win_probability": "winProbability",
      "display_order": "displayOrder",
    });
  });

/** @internal */
export type Stages$Outbound = {
  name?: string | null | undefined;
  value?: string | null | undefined;
  win_probability?: number | null | undefined;
  display_order?: number | null | undefined;
};

/** @internal */
export const Stages$outboundSchema: z.ZodType<
  Stages$Outbound,
  z.ZodTypeDef,
  Stages
> = z.object({
  name: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  winProbability: z.nullable(z.number().int()).optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    winProbability: "win_probability",
    displayOrder: "display_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stages$ {
  /** @deprecated use `Stages$inboundSchema` instead. */
  export const inboundSchema = Stages$inboundSchema;
  /** @deprecated use `Stages$outboundSchema` instead. */
  export const outboundSchema = Stages$outboundSchema;
  /** @deprecated use `Stages$Outbound` instead. */
  export type Outbound = Stages$Outbound;
}

export function stagesToJSON(stages: Stages): string {
  return JSON.stringify(Stages$outboundSchema.parse(stages));
}

export function stagesFromJSON(
  jsonString: string,
): SafeParseResult<Stages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stages' from JSON`,
  );
}

/** @internal */
export const PipelinesAddExtendPaths$inboundSchema: z.ZodType<
  PipelinesAddExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type PipelinesAddExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const PipelinesAddExtendPaths$outboundSchema: z.ZodType<
  PipelinesAddExtendPaths$Outbound,
  z.ZodTypeDef,
  PipelinesAddExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddExtendPaths$ {
  /** @deprecated use `PipelinesAddExtendPaths$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddExtendPaths$inboundSchema;
  /** @deprecated use `PipelinesAddExtendPaths$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddExtendPaths$outboundSchema;
  /** @deprecated use `PipelinesAddExtendPaths$Outbound` instead. */
  export type Outbound = PipelinesAddExtendPaths$Outbound;
}

export function pipelinesAddExtendPathsToJSON(
  pipelinesAddExtendPaths: PipelinesAddExtendPaths,
): string {
  return JSON.stringify(
    PipelinesAddExtendPaths$outboundSchema.parse(pipelinesAddExtendPaths),
  );
}

export function pipelinesAddExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddExtendPaths' from JSON`,
  );
}

/** @internal */
export const PipelinesAddPassThrough$inboundSchema: z.ZodType<
  PipelinesAddPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => PipelinesAddExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type PipelinesAddPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<PipelinesAddExtendPaths$Outbound> | undefined;
};

/** @internal */
export const PipelinesAddPassThrough$outboundSchema: z.ZodType<
  PipelinesAddPassThrough$Outbound,
  z.ZodTypeDef,
  PipelinesAddPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => PipelinesAddExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddPassThrough$ {
  /** @deprecated use `PipelinesAddPassThrough$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddPassThrough$inboundSchema;
  /** @deprecated use `PipelinesAddPassThrough$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddPassThrough$outboundSchema;
  /** @deprecated use `PipelinesAddPassThrough$Outbound` instead. */
  export type Outbound = PipelinesAddPassThrough$Outbound;
}

export function pipelinesAddPassThroughToJSON(
  pipelinesAddPassThrough: PipelinesAddPassThrough,
): string {
  return JSON.stringify(
    PipelinesAddPassThrough$outboundSchema.parse(pipelinesAddPassThrough),
  );
}

export function pipelinesAddPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddPassThrough' from JSON`,
  );
}

/** @internal */
export const PipelinesAddRequestBody$inboundSchema: z.ZodType<
  PipelinesAddRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(PipelinesAddCurrency$inboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  display_order: z.nullable(z.number().int()).optional(),
  win_probability_enabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => Stages$inboundSchema)).optional(),
  pass_through: z.array(z.lazy(() => PipelinesAddPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "display_order": "displayOrder",
    "win_probability_enabled": "winProbabilityEnabled",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type PipelinesAddRequestBody$Outbound = {
  id?: string | undefined;
  name: string;
  currency?: string | null | undefined;
  archived?: boolean | undefined;
  active?: boolean | undefined;
  display_order?: number | null | undefined;
  win_probability_enabled?: boolean | undefined;
  stages?: Array<Stages$Outbound> | undefined;
  pass_through?: Array<PipelinesAddPassThrough$Outbound> | undefined;
};

/** @internal */
export const PipelinesAddRequestBody$outboundSchema: z.ZodType<
  PipelinesAddRequestBody$Outbound,
  z.ZodTypeDef,
  PipelinesAddRequestBody
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(PipelinesAddCurrency$outboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
  winProbabilityEnabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => Stages$outboundSchema)).optional(),
  passThrough: z.array(z.lazy(() => PipelinesAddPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    displayOrder: "display_order",
    winProbabilityEnabled: "win_probability_enabled",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddRequestBody$ {
  /** @deprecated use `PipelinesAddRequestBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddRequestBody$inboundSchema;
  /** @deprecated use `PipelinesAddRequestBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddRequestBody$outboundSchema;
  /** @deprecated use `PipelinesAddRequestBody$Outbound` instead. */
  export type Outbound = PipelinesAddRequestBody$Outbound;
}

export function pipelinesAddRequestBodyToJSON(
  pipelinesAddRequestBody: PipelinesAddRequestBody,
): string {
  return JSON.stringify(
    PipelinesAddRequestBody$outboundSchema.parse(pipelinesAddRequestBody),
  );
}

export function pipelinesAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddRequestBody' from JSON`,
  );
}

/** @internal */
export const PipelinesAddRequest$inboundSchema: z.ZodType<
  PipelinesAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => PipelinesAddRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PipelinesAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  RequestBody: PipelinesAddRequestBody$Outbound;
};

/** @internal */
export const PipelinesAddRequest$outboundSchema: z.ZodType<
  PipelinesAddRequest$Outbound,
  z.ZodTypeDef,
  PipelinesAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => PipelinesAddRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddRequest$ {
  /** @deprecated use `PipelinesAddRequest$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddRequest$inboundSchema;
  /** @deprecated use `PipelinesAddRequest$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddRequest$outboundSchema;
  /** @deprecated use `PipelinesAddRequest$Outbound` instead. */
  export type Outbound = PipelinesAddRequest$Outbound;
}

export function pipelinesAddRequestToJSON(
  pipelinesAddRequest: PipelinesAddRequest,
): string {
  return JSON.stringify(
    PipelinesAddRequest$outboundSchema.parse(pipelinesAddRequest),
  );
}

export function pipelinesAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddRequest' from JSON`,
  );
}

/** @internal */
export const PipelinesAddDetail$inboundSchema: z.ZodType<
  PipelinesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const PipelinesAddDetail$outboundSchema: z.ZodType<
  PipelinesAddDetail$Outbound,
  z.ZodTypeDef,
  PipelinesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddDetail$ {
  /** @deprecated use `PipelinesAddDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddDetail$inboundSchema;
  /** @deprecated use `PipelinesAddDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddDetail$outboundSchema;
  /** @deprecated use `PipelinesAddDetail$Outbound` instead. */
  export type Outbound = PipelinesAddDetail$Outbound;
}

export function pipelinesAddDetailToJSON(
  pipelinesAddDetail: PipelinesAddDetail,
): string {
  return JSON.stringify(
    PipelinesAddDetail$outboundSchema.parse(pipelinesAddDetail),
  );
}

export function pipelinesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesAddPipelinesResponseBody$inboundSchema: z.ZodType<
  PipelinesAddPipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type PipelinesAddPipelinesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAddPipelinesResponseBody$outboundSchema: z.ZodType<
  PipelinesAddPipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesAddPipelinesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddPipelinesResponseBody$ {
  /** @deprecated use `PipelinesAddPipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddPipelinesResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAddPipelinesResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAddPipelinesResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAddPipelinesResponseBody$Outbound;
}

export function pipelinesAddPipelinesResponseBodyToJSON(
  pipelinesAddPipelinesResponseBody: PipelinesAddPipelinesResponseBody,
): string {
  return JSON.stringify(
    PipelinesAddPipelinesResponseBody$outboundSchema.parse(
      pipelinesAddPipelinesResponseBody,
    ),
  );
}

export function pipelinesAddPipelinesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddPipelinesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddPipelinesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddPipelinesResponseBody' from JSON`,
  );
}

/** @internal */
export const PipelinesAddUnifiedId$inboundSchema: z.ZodType<
  PipelinesAddUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PipelinesAddUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const PipelinesAddUnifiedId$outboundSchema: z.ZodType<
  PipelinesAddUnifiedId$Outbound,
  z.ZodTypeDef,
  PipelinesAddUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddUnifiedId$ {
  /** @deprecated use `PipelinesAddUnifiedId$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddUnifiedId$inboundSchema;
  /** @deprecated use `PipelinesAddUnifiedId$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddUnifiedId$outboundSchema;
  /** @deprecated use `PipelinesAddUnifiedId$Outbound` instead. */
  export type Outbound = PipelinesAddUnifiedId$Outbound;
}

export function pipelinesAddUnifiedIdToJSON(
  pipelinesAddUnifiedId: PipelinesAddUnifiedId,
): string {
  return JSON.stringify(
    PipelinesAddUnifiedId$outboundSchema.parse(pipelinesAddUnifiedId),
  );
}

export function pipelinesAddUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddUnifiedId' from JSON`,
  );
}

/** @internal */
export const PipelinesAddResponseBody$inboundSchema: z.ZodType<
  PipelinesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelinesAddUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type PipelinesAddResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: PipelinesAddUnifiedId$Outbound;
};

/** @internal */
export const PipelinesAddResponseBody$outboundSchema: z.ZodType<
  PipelinesAddResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesAddResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelinesAddUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddResponseBody$ {
  /** @deprecated use `PipelinesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAddResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAddResponseBody$Outbound;
}

export function pipelinesAddResponseBodyToJSON(
  pipelinesAddResponseBody: PipelinesAddResponseBody,
): string {
  return JSON.stringify(
    PipelinesAddResponseBody$outboundSchema.parse(pipelinesAddResponseBody),
  );
}

export function pipelinesAddResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddResponseBody' from JSON`,
  );
}

/** @internal */
export const PipelinesAddResponse$inboundSchema: z.ZodType<
  PipelinesAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PipelinesAddResponseBody$inboundSchema),
  z.lazy(() => PipelinesAddPipelinesResponseBody$inboundSchema),
]);

/** @internal */
export type PipelinesAddResponse$Outbound =
  | PipelinesAddResponseBody$Outbound
  | PipelinesAddPipelinesResponseBody$Outbound;

/** @internal */
export const PipelinesAddResponse$outboundSchema: z.ZodType<
  PipelinesAddResponse$Outbound,
  z.ZodTypeDef,
  PipelinesAddResponse
> = z.union([
  z.lazy(() => PipelinesAddResponseBody$outboundSchema),
  z.lazy(() => PipelinesAddPipelinesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAddResponse$ {
  /** @deprecated use `PipelinesAddResponse$inboundSchema` instead. */
  export const inboundSchema = PipelinesAddResponse$inboundSchema;
  /** @deprecated use `PipelinesAddResponse$outboundSchema` instead. */
  export const outboundSchema = PipelinesAddResponse$outboundSchema;
  /** @deprecated use `PipelinesAddResponse$Outbound` instead. */
  export type Outbound = PipelinesAddResponse$Outbound;
}

export function pipelinesAddResponseToJSON(
  pipelinesAddResponse: PipelinesAddResponse,
): string {
  return JSON.stringify(
    PipelinesAddResponse$outboundSchema.parse(pipelinesAddResponse),
  );
}

export function pipelinesAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAddResponse' from JSON`,
  );
}
