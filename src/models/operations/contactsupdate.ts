/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsUpdateSecurity = {
  apiKey: string;
};

/**
 * The type of the contact.
 */
export const ContactsUpdateType = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * The type of the contact.
 */
export type ContactsUpdateType = ClosedEnum<typeof ContactsUpdateType>;

/**
 * The gender of the contact.
 */
export const ContactsUpdateGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact.
 */
export type ContactsUpdateGender = ClosedEnum<typeof ContactsUpdateGender>;

/**
 * The type of website
 */
export const ContactsUpdateContactsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type ContactsUpdateContactsType = ClosedEnum<
  typeof ContactsUpdateContactsType
>;

export type ContactsUpdateWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: ContactsUpdateContactsType | null | undefined;
};

/**
 * The type of address.
 */
export const ContactsUpdateContactsRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type ContactsUpdateContactsRequestType = ClosedEnum<
  typeof ContactsUpdateContactsRequestType
>;

export type ContactsUpdateAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: ContactsUpdateContactsRequestType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type ContactsUpdateSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const ContactsUpdateContactsRequestRequestBodyType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type ContactsUpdateContactsRequestRequestBodyType = ClosedEnum<
  typeof ContactsUpdateContactsRequestRequestBodyType
>;

export type ContactsUpdatePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: ContactsUpdateContactsRequestRequestBodyType | null | undefined;
};

/**
 * Email type
 */
export const ContactsUpdateContactsRequestRequestBodyEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type ContactsUpdateContactsRequestRequestBodyEmailsType = ClosedEnum<
  typeof ContactsUpdateContactsRequestRequestBodyEmailsType
>;

export type ContactsUpdateEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: ContactsUpdateContactsRequestRequestBodyEmailsType | null | undefined;
};

export type ContactsUpdateValue6 = {};

export type ContactsUpdateValue4 = {};

export type ContactsUpdateValue =
  | ContactsUpdateValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ContactsUpdateValue6>;

export type ContactsUpdateCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | ContactsUpdateValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ContactsUpdateValue6>
    | null
    | undefined;
};

export type ContactsUpdateExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type ContactsUpdatePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<ContactsUpdateExtendPaths> | undefined;
};

export type ContactsUpdateRequestBody = {
  /**
   * Full name of the contact.
   */
  name: string | null;
  /**
   * The owner of the contact.
   */
  ownerId?: string | null | undefined;
  /**
   * The type of the contact.
   */
  type?: ContactsUpdateType | null | undefined;
  /**
   * The company the contact is associated with.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company the contact is associated with.
   */
  companyName?: string | null | undefined;
  /**
   * The lead the contact is associated with.
   */
  leadId?: string | null | undefined;
  /**
   * The first name of the contact.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the contact.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the contact.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the contact.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the contact.
   */
  suffix?: string | null | undefined;
  /**
   * The job title of the contact.
   */
  title?: string | null | undefined;
  /**
   * The department of the contact.
   */
  department?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact.
   */
  gender?: ContactsUpdateGender | null | undefined;
  /**
   * The birthday of the contact.
   */
  birthday?: string | null | undefined;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * The lead source of the contact.
   */
  leadSource?: string | null | undefined;
  /**
   * The fax number of the contact.
   */
  fax?: string | null | undefined;
  /**
   * The description of the contact.
   */
  description?: string | null | undefined;
  /**
   * The current balance of the contact.
   */
  currentBalance?: number | null | undefined;
  /**
   * The status of the contact.
   */
  status?: string | null | undefined;
  /**
   * The active status of the contact.
   */
  active?: boolean | null | undefined;
  websites?: Array<ContactsUpdateWebsites> | undefined;
  addresses?: Array<ContactsUpdateAddresses> | undefined;
  socialLinks?: Array<ContactsUpdateSocialLinks> | undefined;
  phoneNumbers?: Array<ContactsUpdatePhoneNumbers> | undefined;
  emails?: Array<ContactsUpdateEmails> | undefined;
  emailDomain?: string | null | undefined;
  customFields?: Array<ContactsUpdateCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * The opportunity ids of the contact.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<ContactsUpdatePassThrough> | undefined;
};

export type ContactsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  requestBody: ContactsUpdateRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsUpdateDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type ContactsUpdateContactsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type ContactsUpdateUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Contact updated
 */
export type ContactsUpdateResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: ContactsUpdateUnifiedId;
};

export type ContactsUpdateResponse =
  | ContactsUpdateResponseBody
  | ContactsUpdateContactsResponseBody;

/** @internal */
export const ContactsUpdateSecurity$inboundSchema: z.ZodType<
  ContactsUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ContactsUpdateSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ContactsUpdateSecurity$outboundSchema: z.ZodType<
  ContactsUpdateSecurity$Outbound,
  z.ZodTypeDef,
  ContactsUpdateSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateSecurity$ {
  /** @deprecated use `ContactsUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateSecurity$inboundSchema;
  /** @deprecated use `ContactsUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateSecurity$outboundSchema;
  /** @deprecated use `ContactsUpdateSecurity$Outbound` instead. */
  export type Outbound = ContactsUpdateSecurity$Outbound;
}

export function contactsUpdateSecurityToJSON(
  contactsUpdateSecurity: ContactsUpdateSecurity,
): string {
  return JSON.stringify(
    ContactsUpdateSecurity$outboundSchema.parse(contactsUpdateSecurity),
  );
}

export function contactsUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsUpdateType
> = z.nativeEnum(ContactsUpdateType);

/** @internal */
export const ContactsUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsUpdateType
> = ContactsUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateType$ {
  /** @deprecated use `ContactsUpdateType$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateType$inboundSchema;
  /** @deprecated use `ContactsUpdateType$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateType$outboundSchema;
}

/** @internal */
export const ContactsUpdateGender$inboundSchema: z.ZodNativeEnum<
  typeof ContactsUpdateGender
> = z.nativeEnum(ContactsUpdateGender);

/** @internal */
export const ContactsUpdateGender$outboundSchema: z.ZodNativeEnum<
  typeof ContactsUpdateGender
> = ContactsUpdateGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateGender$ {
  /** @deprecated use `ContactsUpdateGender$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateGender$inboundSchema;
  /** @deprecated use `ContactsUpdateGender$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateGender$outboundSchema;
}

/** @internal */
export const ContactsUpdateContactsType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsUpdateContactsType
> = z.nativeEnum(ContactsUpdateContactsType);

/** @internal */
export const ContactsUpdateContactsType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsUpdateContactsType
> = ContactsUpdateContactsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsType$ {
  /** @deprecated use `ContactsUpdateContactsType$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateContactsType$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsType$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateContactsType$outboundSchema;
}

/** @internal */
export const ContactsUpdateWebsites$inboundSchema: z.ZodType<
  ContactsUpdateWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ContactsUpdateContactsType$inboundSchema).optional(),
});

/** @internal */
export type ContactsUpdateWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsUpdateWebsites$outboundSchema: z.ZodType<
  ContactsUpdateWebsites$Outbound,
  z.ZodTypeDef,
  ContactsUpdateWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ContactsUpdateContactsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateWebsites$ {
  /** @deprecated use `ContactsUpdateWebsites$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateWebsites$inboundSchema;
  /** @deprecated use `ContactsUpdateWebsites$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateWebsites$outboundSchema;
  /** @deprecated use `ContactsUpdateWebsites$Outbound` instead. */
  export type Outbound = ContactsUpdateWebsites$Outbound;
}

export function contactsUpdateWebsitesToJSON(
  contactsUpdateWebsites: ContactsUpdateWebsites,
): string {
  return JSON.stringify(
    ContactsUpdateWebsites$outboundSchema.parse(contactsUpdateWebsites),
  );
}

export function contactsUpdateWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateWebsites' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateContactsRequestType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsUpdateContactsRequestType
> = z.nativeEnum(ContactsUpdateContactsRequestType);

/** @internal */
export const ContactsUpdateContactsRequestType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsUpdateContactsRequestType
> = ContactsUpdateContactsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsRequestType$ {
  /** @deprecated use `ContactsUpdateContactsRequestType$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateContactsRequestType$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    ContactsUpdateContactsRequestType$outboundSchema;
}

/** @internal */
export const ContactsUpdateAddresses$inboundSchema: z.ZodType<
  ContactsUpdateAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsUpdateContactsRequestType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ContactsUpdateAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ContactsUpdateAddresses$outboundSchema: z.ZodType<
  ContactsUpdateAddresses$Outbound,
  z.ZodTypeDef,
  ContactsUpdateAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsUpdateContactsRequestType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateAddresses$ {
  /** @deprecated use `ContactsUpdateAddresses$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateAddresses$inboundSchema;
  /** @deprecated use `ContactsUpdateAddresses$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateAddresses$outboundSchema;
  /** @deprecated use `ContactsUpdateAddresses$Outbound` instead. */
  export type Outbound = ContactsUpdateAddresses$Outbound;
}

export function contactsUpdateAddressesToJSON(
  contactsUpdateAddresses: ContactsUpdateAddresses,
): string {
  return JSON.stringify(
    ContactsUpdateAddresses$outboundSchema.parse(contactsUpdateAddresses),
  );
}

export function contactsUpdateAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateAddresses' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateSocialLinks$inboundSchema: z.ZodType<
  ContactsUpdateSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type ContactsUpdateSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsUpdateSocialLinks$outboundSchema: z.ZodType<
  ContactsUpdateSocialLinks$Outbound,
  z.ZodTypeDef,
  ContactsUpdateSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateSocialLinks$ {
  /** @deprecated use `ContactsUpdateSocialLinks$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateSocialLinks$inboundSchema;
  /** @deprecated use `ContactsUpdateSocialLinks$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateSocialLinks$outboundSchema;
  /** @deprecated use `ContactsUpdateSocialLinks$Outbound` instead. */
  export type Outbound = ContactsUpdateSocialLinks$Outbound;
}

export function contactsUpdateSocialLinksToJSON(
  contactsUpdateSocialLinks: ContactsUpdateSocialLinks,
): string {
  return JSON.stringify(
    ContactsUpdateSocialLinks$outboundSchema.parse(contactsUpdateSocialLinks),
  );
}

export function contactsUpdateSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateSocialLinks' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateContactsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof ContactsUpdateContactsRequestRequestBodyType> = z
    .nativeEnum(ContactsUpdateContactsRequestRequestBodyType);

/** @internal */
export const ContactsUpdateContactsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof ContactsUpdateContactsRequestRequestBodyType> =
    ContactsUpdateContactsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsRequestRequestBodyType$ {
  /** @deprecated use `ContactsUpdateContactsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    ContactsUpdateContactsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    ContactsUpdateContactsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const ContactsUpdatePhoneNumbers$inboundSchema: z.ZodType<
  ContactsUpdatePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsUpdateContactsRequestRequestBodyType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ContactsUpdatePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsUpdatePhoneNumbers$outboundSchema: z.ZodType<
  ContactsUpdatePhoneNumbers$Outbound,
  z.ZodTypeDef,
  ContactsUpdatePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsUpdateContactsRequestRequestBodyType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdatePhoneNumbers$ {
  /** @deprecated use `ContactsUpdatePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdatePhoneNumbers$inboundSchema;
  /** @deprecated use `ContactsUpdatePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdatePhoneNumbers$outboundSchema;
  /** @deprecated use `ContactsUpdatePhoneNumbers$Outbound` instead. */
  export type Outbound = ContactsUpdatePhoneNumbers$Outbound;
}

export function contactsUpdatePhoneNumbersToJSON(
  contactsUpdatePhoneNumbers: ContactsUpdatePhoneNumbers,
): string {
  return JSON.stringify(
    ContactsUpdatePhoneNumbers$outboundSchema.parse(contactsUpdatePhoneNumbers),
  );
}

export function contactsUpdatePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdatePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdatePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdatePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateContactsRequestRequestBodyEmailsType$inboundSchema:
  z.ZodNativeEnum<typeof ContactsUpdateContactsRequestRequestBodyEmailsType> = z
    .nativeEnum(ContactsUpdateContactsRequestRequestBodyEmailsType);

/** @internal */
export const ContactsUpdateContactsRequestRequestBodyEmailsType$outboundSchema:
  z.ZodNativeEnum<typeof ContactsUpdateContactsRequestRequestBodyEmailsType> =
    ContactsUpdateContactsRequestRequestBodyEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsRequestRequestBodyEmailsType$ {
  /** @deprecated use `ContactsUpdateContactsRequestRequestBodyEmailsType$inboundSchema` instead. */
  export const inboundSchema =
    ContactsUpdateContactsRequestRequestBodyEmailsType$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsRequestRequestBodyEmailsType$outboundSchema` instead. */
  export const outboundSchema =
    ContactsUpdateContactsRequestRequestBodyEmailsType$outboundSchema;
}

/** @internal */
export const ContactsUpdateEmails$inboundSchema: z.ZodType<
  ContactsUpdateEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    ContactsUpdateContactsRequestRequestBodyEmailsType$inboundSchema,
  ).optional(),
});

/** @internal */
export type ContactsUpdateEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsUpdateEmails$outboundSchema: z.ZodType<
  ContactsUpdateEmails$Outbound,
  z.ZodTypeDef,
  ContactsUpdateEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    ContactsUpdateContactsRequestRequestBodyEmailsType$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateEmails$ {
  /** @deprecated use `ContactsUpdateEmails$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateEmails$inboundSchema;
  /** @deprecated use `ContactsUpdateEmails$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateEmails$outboundSchema;
  /** @deprecated use `ContactsUpdateEmails$Outbound` instead. */
  export type Outbound = ContactsUpdateEmails$Outbound;
}

export function contactsUpdateEmailsToJSON(
  contactsUpdateEmails: ContactsUpdateEmails,
): string {
  return JSON.stringify(
    ContactsUpdateEmails$outboundSchema.parse(contactsUpdateEmails),
  );
}

export function contactsUpdateEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateEmails' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateValue6$inboundSchema: z.ZodType<
  ContactsUpdateValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactsUpdateValue6$Outbound = {};

/** @internal */
export const ContactsUpdateValue6$outboundSchema: z.ZodType<
  ContactsUpdateValue6$Outbound,
  z.ZodTypeDef,
  ContactsUpdateValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateValue6$ {
  /** @deprecated use `ContactsUpdateValue6$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateValue6$inboundSchema;
  /** @deprecated use `ContactsUpdateValue6$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateValue6$outboundSchema;
  /** @deprecated use `ContactsUpdateValue6$Outbound` instead. */
  export type Outbound = ContactsUpdateValue6$Outbound;
}

export function contactsUpdateValue6ToJSON(
  contactsUpdateValue6: ContactsUpdateValue6,
): string {
  return JSON.stringify(
    ContactsUpdateValue6$outboundSchema.parse(contactsUpdateValue6),
  );
}

export function contactsUpdateValue6FromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateValue6' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateValue4$inboundSchema: z.ZodType<
  ContactsUpdateValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactsUpdateValue4$Outbound = {};

/** @internal */
export const ContactsUpdateValue4$outboundSchema: z.ZodType<
  ContactsUpdateValue4$Outbound,
  z.ZodTypeDef,
  ContactsUpdateValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateValue4$ {
  /** @deprecated use `ContactsUpdateValue4$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateValue4$inboundSchema;
  /** @deprecated use `ContactsUpdateValue4$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateValue4$outboundSchema;
  /** @deprecated use `ContactsUpdateValue4$Outbound` instead. */
  export type Outbound = ContactsUpdateValue4$Outbound;
}

export function contactsUpdateValue4ToJSON(
  contactsUpdateValue4: ContactsUpdateValue4,
): string {
  return JSON.stringify(
    ContactsUpdateValue4$outboundSchema.parse(contactsUpdateValue4),
  );
}

export function contactsUpdateValue4FromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateValue4' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateValue$inboundSchema: z.ZodType<
  ContactsUpdateValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContactsUpdateValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ContactsUpdateValue6$inboundSchema)),
]);

/** @internal */
export type ContactsUpdateValue$Outbound =
  | ContactsUpdateValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ContactsUpdateValue6$Outbound>;

/** @internal */
export const ContactsUpdateValue$outboundSchema: z.ZodType<
  ContactsUpdateValue$Outbound,
  z.ZodTypeDef,
  ContactsUpdateValue
> = z.union([
  z.lazy(() => ContactsUpdateValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ContactsUpdateValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateValue$ {
  /** @deprecated use `ContactsUpdateValue$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateValue$inboundSchema;
  /** @deprecated use `ContactsUpdateValue$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateValue$outboundSchema;
  /** @deprecated use `ContactsUpdateValue$Outbound` instead. */
  export type Outbound = ContactsUpdateValue$Outbound;
}

export function contactsUpdateValueToJSON(
  contactsUpdateValue: ContactsUpdateValue,
): string {
  return JSON.stringify(
    ContactsUpdateValue$outboundSchema.parse(contactsUpdateValue),
  );
}

export function contactsUpdateValueFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateValue' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateCustomFields$inboundSchema: z.ZodType<
  ContactsUpdateCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ContactsUpdateValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ContactsUpdateValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ContactsUpdateCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ContactsUpdateValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ContactsUpdateValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ContactsUpdateCustomFields$outboundSchema: z.ZodType<
  ContactsUpdateCustomFields$Outbound,
  z.ZodTypeDef,
  ContactsUpdateCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ContactsUpdateValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ContactsUpdateValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateCustomFields$ {
  /** @deprecated use `ContactsUpdateCustomFields$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateCustomFields$inboundSchema;
  /** @deprecated use `ContactsUpdateCustomFields$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateCustomFields$outboundSchema;
  /** @deprecated use `ContactsUpdateCustomFields$Outbound` instead. */
  export type Outbound = ContactsUpdateCustomFields$Outbound;
}

export function contactsUpdateCustomFieldsToJSON(
  contactsUpdateCustomFields: ContactsUpdateCustomFields,
): string {
  return JSON.stringify(
    ContactsUpdateCustomFields$outboundSchema.parse(contactsUpdateCustomFields),
  );
}

export function contactsUpdateCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateCustomFields' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateExtendPaths$inboundSchema: z.ZodType<
  ContactsUpdateExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ContactsUpdateExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ContactsUpdateExtendPaths$outboundSchema: z.ZodType<
  ContactsUpdateExtendPaths$Outbound,
  z.ZodTypeDef,
  ContactsUpdateExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateExtendPaths$ {
  /** @deprecated use `ContactsUpdateExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateExtendPaths$inboundSchema;
  /** @deprecated use `ContactsUpdateExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateExtendPaths$outboundSchema;
  /** @deprecated use `ContactsUpdateExtendPaths$Outbound` instead. */
  export type Outbound = ContactsUpdateExtendPaths$Outbound;
}

export function contactsUpdateExtendPathsToJSON(
  contactsUpdateExtendPaths: ContactsUpdateExtendPaths,
): string {
  return JSON.stringify(
    ContactsUpdateExtendPaths$outboundSchema.parse(contactsUpdateExtendPaths),
  );
}

export function contactsUpdateExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateExtendPaths' from JSON`,
  );
}

/** @internal */
export const ContactsUpdatePassThrough$inboundSchema: z.ZodType<
  ContactsUpdatePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ContactsUpdateExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ContactsUpdatePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ContactsUpdateExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ContactsUpdatePassThrough$outboundSchema: z.ZodType<
  ContactsUpdatePassThrough$Outbound,
  z.ZodTypeDef,
  ContactsUpdatePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ContactsUpdateExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdatePassThrough$ {
  /** @deprecated use `ContactsUpdatePassThrough$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdatePassThrough$inboundSchema;
  /** @deprecated use `ContactsUpdatePassThrough$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdatePassThrough$outboundSchema;
  /** @deprecated use `ContactsUpdatePassThrough$Outbound` instead. */
  export type Outbound = ContactsUpdatePassThrough$Outbound;
}

export function contactsUpdatePassThroughToJSON(
  contactsUpdatePassThrough: ContactsUpdatePassThrough,
): string {
  return JSON.stringify(
    ContactsUpdatePassThrough$outboundSchema.parse(contactsUpdatePassThrough),
  );
}

export function contactsUpdatePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdatePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdatePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdatePassThrough' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateRequestBody$inboundSchema: z.ZodType<
  ContactsUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsUpdateType$inboundSchema).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(ContactsUpdateGender$inboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ContactsUpdateWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ContactsUpdateAddresses$inboundSchema))
    .optional(),
  social_links: z.array(z.lazy(() => ContactsUpdateSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(z.lazy(() => ContactsUpdatePhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => ContactsUpdateEmails$inboundSchema)).optional(),
  email_domain: z.nullable(z.string()).optional(),
  custom_fields: z.array(z.lazy(() => ContactsUpdateCustomFields$inboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunity_ids: z.array(z.string()).optional(),
  pass_through: z.array(z.lazy(() => ContactsUpdatePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "company_id": "companyId",
    "company_name": "companyName",
    "lead_id": "leadId",
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "photo_url": "photoUrl",
    "lead_source": "leadSource",
    "current_balance": "currentBalance",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "email_domain": "emailDomain",
    "custom_fields": "customFields",
    "opportunity_ids": "opportunityIds",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ContactsUpdateRequestBody$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<ContactsUpdateWebsites$Outbound> | undefined;
  addresses?: Array<ContactsUpdateAddresses$Outbound> | undefined;
  social_links?: Array<ContactsUpdateSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<ContactsUpdatePhoneNumbers$Outbound> | undefined;
  emails?: Array<ContactsUpdateEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<ContactsUpdateCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<ContactsUpdatePassThrough$Outbound> | undefined;
};

/** @internal */
export const ContactsUpdateRequestBody$outboundSchema: z.ZodType<
  ContactsUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  ContactsUpdateRequestBody
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsUpdateType$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(ContactsUpdateGender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ContactsUpdateWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ContactsUpdateAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(z.lazy(() => ContactsUpdateSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => ContactsUpdatePhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => ContactsUpdateEmails$outboundSchema)).optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(z.lazy(() => ContactsUpdateCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(z.lazy(() => ContactsUpdatePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateRequestBody$ {
  /** @deprecated use `ContactsUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateRequestBody$inboundSchema;
  /** @deprecated use `ContactsUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateRequestBody$outboundSchema;
  /** @deprecated use `ContactsUpdateRequestBody$Outbound` instead. */
  export type Outbound = ContactsUpdateRequestBody$Outbound;
}

export function contactsUpdateRequestBodyToJSON(
  contactsUpdateRequestBody: ContactsUpdateRequestBody,
): string {
  return JSON.stringify(
    ContactsUpdateRequestBody$outboundSchema.parse(contactsUpdateRequestBody),
  );
}

export function contactsUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateRequest$inboundSchema: z.ZodType<
  ContactsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  RequestBody: z.lazy(() => ContactsUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ContactsUpdateRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  RequestBody: ContactsUpdateRequestBody$Outbound;
};

/** @internal */
export const ContactsUpdateRequest$outboundSchema: z.ZodType<
  ContactsUpdateRequest$Outbound,
  z.ZodTypeDef,
  ContactsUpdateRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  requestBody: z.lazy(() => ContactsUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateRequest$ {
  /** @deprecated use `ContactsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateRequest$inboundSchema;
  /** @deprecated use `ContactsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateRequest$outboundSchema;
  /** @deprecated use `ContactsUpdateRequest$Outbound` instead. */
  export type Outbound = ContactsUpdateRequest$Outbound;
}

export function contactsUpdateRequestToJSON(
  contactsUpdateRequest: ContactsUpdateRequest,
): string {
  return JSON.stringify(
    ContactsUpdateRequest$outboundSchema.parse(contactsUpdateRequest),
  );
}

export function contactsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateDetail$inboundSchema: z.ZodType<
  ContactsUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsUpdateDetail$outboundSchema: z.ZodType<
  ContactsUpdateDetail$Outbound,
  z.ZodTypeDef,
  ContactsUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateDetail$ {
  /** @deprecated use `ContactsUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateDetail$inboundSchema;
  /** @deprecated use `ContactsUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateDetail$outboundSchema;
  /** @deprecated use `ContactsUpdateDetail$Outbound` instead. */
  export type Outbound = ContactsUpdateDetail$Outbound;
}

export function contactsUpdateDetailToJSON(
  contactsUpdateDetail: ContactsUpdateDetail,
): string {
  return JSON.stringify(
    ContactsUpdateDetail$outboundSchema.parse(contactsUpdateDetail),
  );
}

export function contactsUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateDetail' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateContactsResponseBody$inboundSchema: z.ZodType<
  ContactsUpdateContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type ContactsUpdateContactsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsUpdateContactsResponseBody$outboundSchema: z.ZodType<
  ContactsUpdateContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsUpdateContactsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateContactsResponseBody$ {
  /** @deprecated use `ContactsUpdateContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateContactsResponseBody$inboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsUpdateContactsResponseBody$outboundSchema;
  /** @deprecated use `ContactsUpdateContactsResponseBody$Outbound` instead. */
  export type Outbound = ContactsUpdateContactsResponseBody$Outbound;
}

export function contactsUpdateContactsResponseBodyToJSON(
  contactsUpdateContactsResponseBody: ContactsUpdateContactsResponseBody,
): string {
  return JSON.stringify(
    ContactsUpdateContactsResponseBody$outboundSchema.parse(
      contactsUpdateContactsResponseBody,
    ),
  );
}

export function contactsUpdateContactsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateContactsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContactsUpdateContactsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateContactsResponseBody' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateUnifiedId$inboundSchema: z.ZodType<
  ContactsUpdateUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ContactsUpdateUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ContactsUpdateUnifiedId$outboundSchema: z.ZodType<
  ContactsUpdateUnifiedId$Outbound,
  z.ZodTypeDef,
  ContactsUpdateUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateUnifiedId$ {
  /** @deprecated use `ContactsUpdateUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateUnifiedId$inboundSchema;
  /** @deprecated use `ContactsUpdateUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateUnifiedId$outboundSchema;
  /** @deprecated use `ContactsUpdateUnifiedId$Outbound` instead. */
  export type Outbound = ContactsUpdateUnifiedId$Outbound;
}

export function contactsUpdateUnifiedIdToJSON(
  contactsUpdateUnifiedId: ContactsUpdateUnifiedId,
): string {
  return JSON.stringify(
    ContactsUpdateUnifiedId$outboundSchema.parse(contactsUpdateUnifiedId),
  );
}

export function contactsUpdateUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateUnifiedId' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateResponseBody$inboundSchema: z.ZodType<
  ContactsUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactsUpdateUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ContactsUpdateResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ContactsUpdateUnifiedId$Outbound;
};

/** @internal */
export const ContactsUpdateResponseBody$outboundSchema: z.ZodType<
  ContactsUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsUpdateResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactsUpdateUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateResponseBody$ {
  /** @deprecated use `ContactsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateResponseBody$inboundSchema;
  /** @deprecated use `ContactsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateResponseBody$outboundSchema;
  /** @deprecated use `ContactsUpdateResponseBody$Outbound` instead. */
  export type Outbound = ContactsUpdateResponseBody$Outbound;
}

export function contactsUpdateResponseBodyToJSON(
  contactsUpdateResponseBody: ContactsUpdateResponseBody,
): string {
  return JSON.stringify(
    ContactsUpdateResponseBody$outboundSchema.parse(contactsUpdateResponseBody),
  );
}

export function contactsUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const ContactsUpdateResponse$inboundSchema: z.ZodType<
  ContactsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContactsUpdateResponseBody$inboundSchema),
  z.lazy(() => ContactsUpdateContactsResponseBody$inboundSchema),
]);

/** @internal */
export type ContactsUpdateResponse$Outbound =
  | ContactsUpdateResponseBody$Outbound
  | ContactsUpdateContactsResponseBody$Outbound;

/** @internal */
export const ContactsUpdateResponse$outboundSchema: z.ZodType<
  ContactsUpdateResponse$Outbound,
  z.ZodTypeDef,
  ContactsUpdateResponse
> = z.union([
  z.lazy(() => ContactsUpdateResponseBody$outboundSchema),
  z.lazy(() => ContactsUpdateContactsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsUpdateResponse$ {
  /** @deprecated use `ContactsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = ContactsUpdateResponse$inboundSchema;
  /** @deprecated use `ContactsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = ContactsUpdateResponse$outboundSchema;
  /** @deprecated use `ContactsUpdateResponse$Outbound` instead. */
  export type Outbound = ContactsUpdateResponse$Outbound;
}

export function contactsUpdateResponseToJSON(
  contactsUpdateResponse: ContactsUpdateResponse,
): string {
  return JSON.stringify(
    ContactsUpdateResponse$outboundSchema.parse(contactsUpdateResponse),
  );
}

export function contactsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactsUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsUpdateResponse' from JSON`,
  );
}
