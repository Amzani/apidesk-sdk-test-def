/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OpportunitiesOneSecurity = {
  apiKey: string;
};

export type OpportunitiesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type OpportunitiesOneOpportunitiesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const OpportunitiesOneCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type OpportunitiesOneCurrency = ClosedEnum<
  typeof OpportunitiesOneCurrency
>;

export type OpportunitiesOneValue6 = {};

export type OpportunitiesOneValue4 = {};

export type OpportunitiesOneValue =
  | OpportunitiesOneValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<OpportunitiesOneValue6>;

export type OpportunitiesOneCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | OpportunitiesOneValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<OpportunitiesOneValue6>
    | null
    | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type OpportunitiesOneCustomMappings = {};

export type OpportunitiesOneExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type OpportunitiesOnePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<OpportunitiesOneExtendPaths> | undefined;
};

export type OpportunitiesOneData = {
  /**
   * A unique identifier for the opportunity.
   */
  id?: string | undefined;
  /**
   * The title or name of the opportunity.
   */
  title: string;
  /**
   * The unique identifier of the primary contact associated with the opportunity.
   */
  primaryContactId: string | null;
  /**
   * A description of the opportunity.
   */
  description?: string | null | undefined;
  /**
   * The type of the opportunity
   */
  type?: string | null | undefined;
  /**
   * The monetary value associated with the opportunity
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: OpportunitiesOneCurrency | null | undefined;
  /**
   * The probability of winning the opportunity, expressed as a percentage.
   */
  winProbability?: number | null | undefined;
  /**
   * The expected revenue from the opportunity
   */
  expectedRevenue?: number | null | undefined;
  /**
   * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
   */
  closeDate?: RFCDate | null | undefined;
  /**
   * The unique identifier of the reason why the opportunity was lost.
   */
  lossReasonId?: string | null | undefined;
  /**
   * The reason why the opportunity was lost.
   */
  lossReason?: string | null | undefined;
  /**
   * The unique identifier of the reason why the opportunity was won.
   */
  wonReasonId?: string | null | undefined;
  /**
   * The reason why the opportunity was won.
   */
  wonReason?: string | null | undefined;
  /**
   * The unique identifier of the pipeline associated with the opportunity
   */
  pipelineId?: string | null | undefined;
  /**
   * The unique identifier of the stage in the pipeline associated with the opportunity.
   */
  pipelineStageId?: string | null | undefined;
  /**
   * The unique identifier of the source of the opportunity.
   */
  sourceId?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with the opportunity.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead associated with the opportunity.
   */
  leadSource?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with the opportunity.
   */
  contactId?: string | null | undefined;
  /**
   * An array of unique identifiers of all contacts associated with the opportunity.
   */
  contactIds?: Array<string> | undefined;
  /**
   * The unique identifier of the company associated with the opportunity.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company associated with the opportunity.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier of the user who owns the opportunity.
   */
  ownerId?: string | null | undefined;
  /**
   * The priority level of the opportunity.
   */
  priority?: string | null | undefined;
  /**
   * The current status of the opportunity.
   */
  status?: string | null | undefined;
  /**
   * The unique identifier of the current status of the opportunity.
   */
  statusId?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * The number of interactions with the opportunity.
   */
  interactionCount?: number | null | undefined;
  customFields?: Array<OpportunitiesOneCustomFields> | undefined;
  /**
   * The date and time when the stage of the opportunity was last changed.
   */
  stageLastChangedAt?: Date | null | undefined;
  /**
   * The date and time of the last activity associated with the opportunity.
   */
  lastActivityAt?: string | null | undefined;
  /**
   * Indicates whether the opportunity has been deleted.
   */
  deleted?: boolean | undefined;
  /**
   * The date and time when the stage of the opportunity was last changed.
   */
  dateStageChanged?: Date | null | undefined;
  /**
   * The date and time when the opportunity was last contacted.
   */
  dateLastContacted?: Date | null | undefined;
  /**
   * The date and time when the lead associated with the opportunity was created.
   */
  dateLeadCreated?: Date | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: OpportunitiesOneCustomMappings | null | undefined;
  /**
   * The unique identifier of the user who last updated the opportunity.
   */
  updatedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who created the opportunity.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the opportunity was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the opportunity was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<OpportunitiesOnePassThrough> | undefined;
};

/**
 * Opportunity
 */
export type OpportunitiesOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: OpportunitiesOneData;
};

export type OpportunitiesOneResponse =
  | OpportunitiesOneResponseBody
  | OpportunitiesOneOpportunitiesResponseBody;

/** @internal */
export const OpportunitiesOneSecurity$inboundSchema: z.ZodType<
  OpportunitiesOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type OpportunitiesOneSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const OpportunitiesOneSecurity$outboundSchema: z.ZodType<
  OpportunitiesOneSecurity$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneSecurity$ {
  /** @deprecated use `OpportunitiesOneSecurity$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneSecurity$inboundSchema;
  /** @deprecated use `OpportunitiesOneSecurity$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneSecurity$outboundSchema;
  /** @deprecated use `OpportunitiesOneSecurity$Outbound` instead. */
  export type Outbound = OpportunitiesOneSecurity$Outbound;
}

export function opportunitiesOneSecurityToJSON(
  opportunitiesOneSecurity: OpportunitiesOneSecurity,
): string {
  return JSON.stringify(
    OpportunitiesOneSecurity$outboundSchema.parse(opportunitiesOneSecurity),
  );
}

export function opportunitiesOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneSecurity' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneRequest$inboundSchema: z.ZodType<
  OpportunitiesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type OpportunitiesOneRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const OpportunitiesOneRequest$outboundSchema: z.ZodType<
  OpportunitiesOneRequest$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneRequest$ {
  /** @deprecated use `OpportunitiesOneRequest$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneRequest$inboundSchema;
  /** @deprecated use `OpportunitiesOneRequest$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneRequest$outboundSchema;
  /** @deprecated use `OpportunitiesOneRequest$Outbound` instead. */
  export type Outbound = OpportunitiesOneRequest$Outbound;
}

export function opportunitiesOneRequestToJSON(
  opportunitiesOneRequest: OpportunitiesOneRequest,
): string {
  return JSON.stringify(
    OpportunitiesOneRequest$outboundSchema.parse(opportunitiesOneRequest),
  );
}

export function opportunitiesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneRequest' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneDetail$inboundSchema: z.ZodType<
  OpportunitiesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const OpportunitiesOneDetail$outboundSchema: z.ZodType<
  OpportunitiesOneDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneDetail$ {
  /** @deprecated use `OpportunitiesOneDetail$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneDetail$inboundSchema;
  /** @deprecated use `OpportunitiesOneDetail$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneDetail$outboundSchema;
  /** @deprecated use `OpportunitiesOneDetail$Outbound` instead. */
  export type Outbound = OpportunitiesOneDetail$Outbound;
}

export function opportunitiesOneDetailToJSON(
  opportunitiesOneDetail: OpportunitiesOneDetail,
): string {
  return JSON.stringify(
    OpportunitiesOneDetail$outboundSchema.parse(opportunitiesOneDetail),
  );
}

export function opportunitiesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneOpportunitiesResponseBody$inboundSchema: z.ZodType<
  OpportunitiesOneOpportunitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type OpportunitiesOneOpportunitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesOneOpportunitiesResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesOneOpportunitiesResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesOneOpportunitiesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneOpportunitiesResponseBody$ {
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesOneOpportunitiesResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesOneOpportunitiesResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesOneOpportunitiesResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesOneOpportunitiesResponseBody$Outbound;
}

export function opportunitiesOneOpportunitiesResponseBodyToJSON(
  opportunitiesOneOpportunitiesResponseBody:
    OpportunitiesOneOpportunitiesResponseBody,
): string {
  return JSON.stringify(
    OpportunitiesOneOpportunitiesResponseBody$outboundSchema.parse(
      opportunitiesOneOpportunitiesResponseBody,
    ),
  );
}

export function opportunitiesOneOpportunitiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesOneOpportunitiesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesOneOpportunitiesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesOneOpportunitiesResponseBody' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneCurrency$inboundSchema: z.ZodNativeEnum<
  typeof OpportunitiesOneCurrency
> = z.nativeEnum(OpportunitiesOneCurrency);

/** @internal */
export const OpportunitiesOneCurrency$outboundSchema: z.ZodNativeEnum<
  typeof OpportunitiesOneCurrency
> = OpportunitiesOneCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneCurrency$ {
  /** @deprecated use `OpportunitiesOneCurrency$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneCurrency$inboundSchema;
  /** @deprecated use `OpportunitiesOneCurrency$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneCurrency$outboundSchema;
}

/** @internal */
export const OpportunitiesOneValue6$inboundSchema: z.ZodType<
  OpportunitiesOneValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunitiesOneValue6$Outbound = {};

/** @internal */
export const OpportunitiesOneValue6$outboundSchema: z.ZodType<
  OpportunitiesOneValue6$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneValue6$ {
  /** @deprecated use `OpportunitiesOneValue6$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneValue6$inboundSchema;
  /** @deprecated use `OpportunitiesOneValue6$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneValue6$outboundSchema;
  /** @deprecated use `OpportunitiesOneValue6$Outbound` instead. */
  export type Outbound = OpportunitiesOneValue6$Outbound;
}

export function opportunitiesOneValue6ToJSON(
  opportunitiesOneValue6: OpportunitiesOneValue6,
): string {
  return JSON.stringify(
    OpportunitiesOneValue6$outboundSchema.parse(opportunitiesOneValue6),
  );
}

export function opportunitiesOneValue6FromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneValue6' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneValue4$inboundSchema: z.ZodType<
  OpportunitiesOneValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunitiesOneValue4$Outbound = {};

/** @internal */
export const OpportunitiesOneValue4$outboundSchema: z.ZodType<
  OpportunitiesOneValue4$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneValue4$ {
  /** @deprecated use `OpportunitiesOneValue4$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneValue4$inboundSchema;
  /** @deprecated use `OpportunitiesOneValue4$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneValue4$outboundSchema;
  /** @deprecated use `OpportunitiesOneValue4$Outbound` instead. */
  export type Outbound = OpportunitiesOneValue4$Outbound;
}

export function opportunitiesOneValue4ToJSON(
  opportunitiesOneValue4: OpportunitiesOneValue4,
): string {
  return JSON.stringify(
    OpportunitiesOneValue4$outboundSchema.parse(opportunitiesOneValue4),
  );
}

export function opportunitiesOneValue4FromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneValue4' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneValue$inboundSchema: z.ZodType<
  OpportunitiesOneValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpportunitiesOneValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => OpportunitiesOneValue6$inboundSchema)),
]);

/** @internal */
export type OpportunitiesOneValue$Outbound =
  | OpportunitiesOneValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<OpportunitiesOneValue6$Outbound>;

/** @internal */
export const OpportunitiesOneValue$outboundSchema: z.ZodType<
  OpportunitiesOneValue$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneValue
> = z.union([
  z.lazy(() => OpportunitiesOneValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => OpportunitiesOneValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneValue$ {
  /** @deprecated use `OpportunitiesOneValue$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneValue$inboundSchema;
  /** @deprecated use `OpportunitiesOneValue$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneValue$outboundSchema;
  /** @deprecated use `OpportunitiesOneValue$Outbound` instead. */
  export type Outbound = OpportunitiesOneValue$Outbound;
}

export function opportunitiesOneValueToJSON(
  opportunitiesOneValue: OpportunitiesOneValue,
): string {
  return JSON.stringify(
    OpportunitiesOneValue$outboundSchema.parse(opportunitiesOneValue),
  );
}

export function opportunitiesOneValueFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneValue' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneCustomFields$inboundSchema: z.ZodType<
  OpportunitiesOneCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => OpportunitiesOneValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => OpportunitiesOneValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type OpportunitiesOneCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | OpportunitiesOneValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<OpportunitiesOneValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const OpportunitiesOneCustomFields$outboundSchema: z.ZodType<
  OpportunitiesOneCustomFields$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => OpportunitiesOneValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => OpportunitiesOneValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneCustomFields$ {
  /** @deprecated use `OpportunitiesOneCustomFields$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneCustomFields$inboundSchema;
  /** @deprecated use `OpportunitiesOneCustomFields$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneCustomFields$outboundSchema;
  /** @deprecated use `OpportunitiesOneCustomFields$Outbound` instead. */
  export type Outbound = OpportunitiesOneCustomFields$Outbound;
}

export function opportunitiesOneCustomFieldsToJSON(
  opportunitiesOneCustomFields: OpportunitiesOneCustomFields,
): string {
  return JSON.stringify(
    OpportunitiesOneCustomFields$outboundSchema.parse(
      opportunitiesOneCustomFields,
    ),
  );
}

export function opportunitiesOneCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneCustomFields' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneCustomMappings$inboundSchema: z.ZodType<
  OpportunitiesOneCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunitiesOneCustomMappings$Outbound = {};

/** @internal */
export const OpportunitiesOneCustomMappings$outboundSchema: z.ZodType<
  OpportunitiesOneCustomMappings$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneCustomMappings$ {
  /** @deprecated use `OpportunitiesOneCustomMappings$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneCustomMappings$inboundSchema;
  /** @deprecated use `OpportunitiesOneCustomMappings$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneCustomMappings$outboundSchema;
  /** @deprecated use `OpportunitiesOneCustomMappings$Outbound` instead. */
  export type Outbound = OpportunitiesOneCustomMappings$Outbound;
}

export function opportunitiesOneCustomMappingsToJSON(
  opportunitiesOneCustomMappings: OpportunitiesOneCustomMappings,
): string {
  return JSON.stringify(
    OpportunitiesOneCustomMappings$outboundSchema.parse(
      opportunitiesOneCustomMappings,
    ),
  );
}

export function opportunitiesOneCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneCustomMappings' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneExtendPaths$inboundSchema: z.ZodType<
  OpportunitiesOneExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type OpportunitiesOneExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const OpportunitiesOneExtendPaths$outboundSchema: z.ZodType<
  OpportunitiesOneExtendPaths$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneExtendPaths$ {
  /** @deprecated use `OpportunitiesOneExtendPaths$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneExtendPaths$inboundSchema;
  /** @deprecated use `OpportunitiesOneExtendPaths$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneExtendPaths$outboundSchema;
  /** @deprecated use `OpportunitiesOneExtendPaths$Outbound` instead. */
  export type Outbound = OpportunitiesOneExtendPaths$Outbound;
}

export function opportunitiesOneExtendPathsToJSON(
  opportunitiesOneExtendPaths: OpportunitiesOneExtendPaths,
): string {
  return JSON.stringify(
    OpportunitiesOneExtendPaths$outboundSchema.parse(
      opportunitiesOneExtendPaths,
    ),
  );
}

export function opportunitiesOneExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneExtendPaths' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOnePassThrough$inboundSchema: z.ZodType<
  OpportunitiesOnePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => OpportunitiesOneExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type OpportunitiesOnePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<OpportunitiesOneExtendPaths$Outbound> | undefined;
};

/** @internal */
export const OpportunitiesOnePassThrough$outboundSchema: z.ZodType<
  OpportunitiesOnePassThrough$Outbound,
  z.ZodTypeDef,
  OpportunitiesOnePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => OpportunitiesOneExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOnePassThrough$ {
  /** @deprecated use `OpportunitiesOnePassThrough$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOnePassThrough$inboundSchema;
  /** @deprecated use `OpportunitiesOnePassThrough$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOnePassThrough$outboundSchema;
  /** @deprecated use `OpportunitiesOnePassThrough$Outbound` instead. */
  export type Outbound = OpportunitiesOnePassThrough$Outbound;
}

export function opportunitiesOnePassThroughToJSON(
  opportunitiesOnePassThrough: OpportunitiesOnePassThrough,
): string {
  return JSON.stringify(
    OpportunitiesOnePassThrough$outboundSchema.parse(
      opportunitiesOnePassThrough,
    ),
  );
}

export function opportunitiesOnePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOnePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOnePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOnePassThrough' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneData$inboundSchema: z.ZodType<
  OpportunitiesOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.string(),
  primary_contact_id: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(OpportunitiesOneCurrency$inboundSchema).optional(),
  win_probability: z.nullable(z.number()).optional(),
  expected_revenue: z.nullable(z.number()).optional(),
  close_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  loss_reason_id: z.nullable(z.string()).optional(),
  loss_reason: z.nullable(z.string()).optional(),
  won_reason_id: z.nullable(z.string()).optional(),
  won_reason: z.nullable(z.string()).optional(),
  pipeline_id: z.nullable(z.string()).optional(),
  pipeline_stage_id: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  contact_ids: z.array(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  status_id: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  interaction_count: z.nullable(z.number()).optional(),
  custom_fields: z.array(
    z.lazy(() => OpportunitiesOneCustomFields$inboundSchema),
  ).optional(),
  stage_last_changed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_activity_at: z.nullable(z.string()).optional(),
  deleted: z.boolean().optional(),
  date_stage_changed: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_last_contacted: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  date_lead_created: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => OpportunitiesOneCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(z.lazy(() => OpportunitiesOnePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "primary_contact_id": "primaryContactId",
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "expected_revenue": "expectedRevenue",
    "close_date": "closeDate",
    "loss_reason_id": "lossReasonId",
    "loss_reason": "lossReason",
    "won_reason_id": "wonReasonId",
    "won_reason": "wonReason",
    "pipeline_id": "pipelineId",
    "pipeline_stage_id": "pipelineStageId",
    "source_id": "sourceId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "contact_id": "contactId",
    "contact_ids": "contactIds",
    "company_id": "companyId",
    "company_name": "companyName",
    "owner_id": "ownerId",
    "status_id": "statusId",
    "interaction_count": "interactionCount",
    "custom_fields": "customFields",
    "stage_last_changed_at": "stageLastChangedAt",
    "last_activity_at": "lastActivityAt",
    "date_stage_changed": "dateStageChanged",
    "date_last_contacted": "dateLastContacted",
    "date_lead_created": "dateLeadCreated",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type OpportunitiesOneData$Outbound = {
  id?: string | undefined;
  title: string;
  primary_contact_id: string | null;
  description?: string | null | undefined;
  type?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  win_probability?: number | null | undefined;
  expected_revenue?: number | null | undefined;
  close_date?: string | null | undefined;
  loss_reason_id?: string | null | undefined;
  loss_reason?: string | null | undefined;
  won_reason_id?: string | null | undefined;
  won_reason?: string | null | undefined;
  pipeline_id?: string | null | undefined;
  pipeline_stage_id?: string | null | undefined;
  source_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  contact_id?: string | null | undefined;
  contact_ids?: Array<string> | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  owner_id?: string | null | undefined;
  priority?: string | null | undefined;
  status?: string | null | undefined;
  status_id?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  interaction_count?: number | null | undefined;
  custom_fields?: Array<OpportunitiesOneCustomFields$Outbound> | undefined;
  stage_last_changed_at?: string | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  date_stage_changed?: string | null | undefined;
  date_last_contacted?: string | null | undefined;
  date_lead_created?: string | null | undefined;
  custom_mappings?: OpportunitiesOneCustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<OpportunitiesOnePassThrough$Outbound> | undefined;
};

/** @internal */
export const OpportunitiesOneData$outboundSchema: z.ZodType<
  OpportunitiesOneData$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneData
> = z.object({
  id: z.string().optional(),
  title: z.string(),
  primaryContactId: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(OpportunitiesOneCurrency$outboundSchema).optional(),
  winProbability: z.nullable(z.number()).optional(),
  expectedRevenue: z.nullable(z.number()).optional(),
  closeDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  lossReasonId: z.nullable(z.string()).optional(),
  lossReason: z.nullable(z.string()).optional(),
  wonReasonId: z.nullable(z.string()).optional(),
  wonReason: z.nullable(z.string()).optional(),
  pipelineId: z.nullable(z.string()).optional(),
  pipelineStageId: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  contactIds: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  statusId: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  interactionCount: z.nullable(z.number()).optional(),
  customFields: z.array(
    z.lazy(() => OpportunitiesOneCustomFields$outboundSchema),
  ).optional(),
  stageLastChangedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  lastActivityAt: z.nullable(z.string()).optional(),
  deleted: z.boolean().optional(),
  dateStageChanged: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  dateLastContacted: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  dateLeadCreated: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => OpportunitiesOneCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(z.lazy(() => OpportunitiesOnePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    primaryContactId: "primary_contact_id",
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    expectedRevenue: "expected_revenue",
    closeDate: "close_date",
    lossReasonId: "loss_reason_id",
    lossReason: "loss_reason",
    wonReasonId: "won_reason_id",
    wonReason: "won_reason",
    pipelineId: "pipeline_id",
    pipelineStageId: "pipeline_stage_id",
    sourceId: "source_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    contactId: "contact_id",
    contactIds: "contact_ids",
    companyId: "company_id",
    companyName: "company_name",
    ownerId: "owner_id",
    statusId: "status_id",
    interactionCount: "interaction_count",
    customFields: "custom_fields",
    stageLastChangedAt: "stage_last_changed_at",
    lastActivityAt: "last_activity_at",
    dateStageChanged: "date_stage_changed",
    dateLastContacted: "date_last_contacted",
    dateLeadCreated: "date_lead_created",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneData$ {
  /** @deprecated use `OpportunitiesOneData$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneData$inboundSchema;
  /** @deprecated use `OpportunitiesOneData$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneData$outboundSchema;
  /** @deprecated use `OpportunitiesOneData$Outbound` instead. */
  export type Outbound = OpportunitiesOneData$Outbound;
}

export function opportunitiesOneDataToJSON(
  opportunitiesOneData: OpportunitiesOneData,
): string {
  return JSON.stringify(
    OpportunitiesOneData$outboundSchema.parse(opportunitiesOneData),
  );
}

export function opportunitiesOneDataFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneData' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneResponseBody$inboundSchema: z.ZodType<
  OpportunitiesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunitiesOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type OpportunitiesOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: OpportunitiesOneData$Outbound;
};

/** @internal */
export const OpportunitiesOneResponseBody$outboundSchema: z.ZodType<
  OpportunitiesOneResponseBody$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunitiesOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneResponseBody$ {
  /** @deprecated use `OpportunitiesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesOneResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesOneResponseBody$Outbound;
}

export function opportunitiesOneResponseBodyToJSON(
  opportunitiesOneResponseBody: OpportunitiesOneResponseBody,
): string {
  return JSON.stringify(
    OpportunitiesOneResponseBody$outboundSchema.parse(
      opportunitiesOneResponseBody,
    ),
  );
}

export function opportunitiesOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneResponseBody' from JSON`,
  );
}

/** @internal */
export const OpportunitiesOneResponse$inboundSchema: z.ZodType<
  OpportunitiesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpportunitiesOneResponseBody$inboundSchema),
  z.lazy(() => OpportunitiesOneOpportunitiesResponseBody$inboundSchema),
]);

/** @internal */
export type OpportunitiesOneResponse$Outbound =
  | OpportunitiesOneResponseBody$Outbound
  | OpportunitiesOneOpportunitiesResponseBody$Outbound;

/** @internal */
export const OpportunitiesOneResponse$outboundSchema: z.ZodType<
  OpportunitiesOneResponse$Outbound,
  z.ZodTypeDef,
  OpportunitiesOneResponse
> = z.union([
  z.lazy(() => OpportunitiesOneResponseBody$outboundSchema),
  z.lazy(() => OpportunitiesOneOpportunitiesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesOneResponse$ {
  /** @deprecated use `OpportunitiesOneResponse$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesOneResponse$inboundSchema;
  /** @deprecated use `OpportunitiesOneResponse$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesOneResponse$outboundSchema;
  /** @deprecated use `OpportunitiesOneResponse$Outbound` instead. */
  export type Outbound = OpportunitiesOneResponse$Outbound;
}

export function opportunitiesOneResponseToJSON(
  opportunitiesOneResponse: OpportunitiesOneResponse,
): string {
  return JSON.stringify(
    OpportunitiesOneResponse$outboundSchema.parse(opportunitiesOneResponse),
  );
}

export function opportunitiesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesOneResponse' from JSON`,
  );
}
