/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisEmployeesOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

/**
 * Apply filters
 */
export type QueryParamFilter = {
  /**
   * Company ID to filter on
   */
  companyId?: string | undefined;
};

export type HrisEmployeesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
  /**
   * Apply filters
   */
  filter?: QueryParamFilter | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisEmployeesOneHrisEmployeesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The gender represents the gender identity of a person.
 */
export const HrisEmployeesOneHrisEmployeesGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The gender represents the gender identity of a person.
 */
export type HrisEmployeesOneHrisEmployeesGender = ClosedEnum<
  typeof HrisEmployeesOneHrisEmployeesGender
>;

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisEmployeesOneHrisEmployeesCustomMappings = {};

export type HrisEmployeesOnePerson = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The gender represents the gender identity of a person.
   */
  gender?: HrisEmployeesOneHrisEmployeesGender | null | undefined;
  /**
   * Initials of the person
   */
  initials?: string | null | undefined;
  /**
   * Date of birth
   */
  birthday?: RFCDate | null | undefined;
  /**
   * Date of death
   */
  deceasedOn?: RFCDate | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?:
    | HrisEmployeesOneHrisEmployeesCustomMappings
    | null
    | undefined;
};

/**
 * The team the person is currently in.
 */
export type HrisEmployeesOneTeam = {
  /**
   * The unique identifier of the team.
   */
  id?: string | null | undefined;
  /**
   * The name of the team.
   */
  name?: string | null | undefined;
};

/**
 * The reason because the employment ended.
 */
export const HrisEmployeesOneLeavingReason = {
  Dismissed: "dismissed",
  Resigned: "resigned",
  Redundancy: "redundancy",
  Other: "other",
} as const;
/**
 * The reason because the employment ended.
 */
export type HrisEmployeesOneLeavingReason = ClosedEnum<
  typeof HrisEmployeesOneLeavingReason
>;

/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export const HrisEmployeesOneEmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export type HrisEmployeesOneEmploymentStatus = ClosedEnum<
  typeof HrisEmployeesOneEmploymentStatus
>;

/**
 * The type of employment relationship the employee has with the organization.
 */
export const HrisEmployeesOneEmploymentType = {
  Contractor: "contractor",
  Employee: "employee",
  Freelance: "freelance",
  Temp: "temp",
  Internship: "internship",
  Other: "other",
} as const;
/**
 * The type of employment relationship the employee has with the organization.
 */
export type HrisEmployeesOneEmploymentType = ClosedEnum<
  typeof HrisEmployeesOneEmploymentType
>;

/**
 * The work schedule of the employee.
 */
export const HrisEmployeesOneEmploymentSubType = {
  FullTime: "full_time",
  PartTime: "part_time",
  Hourly: "hourly",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The work schedule of the employee.
 */
export type HrisEmployeesOneEmploymentSubType = ClosedEnum<
  typeof HrisEmployeesOneEmploymentSubType
>;

export type HrisEmployeesOneEmploymentRole = {
  /**
   * The type of employment relationship the employee has with the organization.
   */
  type?: HrisEmployeesOneEmploymentType | null | undefined;
  /**
   * The work schedule of the employee.
   */
  subType?: HrisEmployeesOneEmploymentSubType | null | undefined;
};

/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export const HrisEmployeesOneHrisEmployeesEmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export type HrisEmployeesOneHrisEmployeesEmploymentStatus = ClosedEnum<
  typeof HrisEmployeesOneHrisEmployeesEmploymentStatus
>;

export type HrisEmployeesOneManager = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The name of the manager, often a combination of their first and last names.
   */
  name?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * The email address of the manager.
   */
  email?: string | null | undefined;
  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  employmentStatus?:
    | HrisEmployeesOneHrisEmployeesEmploymentStatus
    | null
    | undefined;
};

/**
 * The gender represents the gender identity of a person.
 */
export const HrisEmployeesOneGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The gender represents the gender identity of a person.
 */
export type HrisEmployeesOneGender = ClosedEnum<typeof HrisEmployeesOneGender>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesOneCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesOneCurrency = ClosedEnum<
  typeof HrisEmployeesOneCurrency
>;

/**
 * Unit of measurement for employee compensation.
 */
export const HrisEmployeesOnePaymentUnit = {
  Hour: "hour",
  Week: "week",
  Month: "month",
  Year: "year",
  Paycheck: "paycheck",
  Other: "other",
} as const;
/**
 * Unit of measurement for employee compensation.
 */
export type HrisEmployeesOnePaymentUnit = ClosedEnum<
  typeof HrisEmployeesOnePaymentUnit
>;

/**
 * Indicates the status of the job.
 */
export const HrisEmployeesOneStatus = {
  Active: "active",
  Inactive: "inactive",
  Other: "other",
} as const;
/**
 * Indicates the status of the job.
 */
export type HrisEmployeesOneStatus = ClosedEnum<typeof HrisEmployeesOneStatus>;

/**
 * The type of address.
 */
export const HrisEmployeesOneHrisEmployeesResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisEmployeesOneHrisEmployeesResponse200Type = ClosedEnum<
  typeof HrisEmployeesOneHrisEmployeesResponse200Type
>;

export type HrisEmployeesOneLocation = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisEmployeesOneHrisEmployeesResponse200Type | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type HrisEmployeesOneJob = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * A unique identifier for an object.
   */
  employeeId?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The position and responsibilities of the person within the organization.
   */
  role?: string | null | undefined;
  /**
   * The date on which the employee starts working in their current job role.
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The date on which the employee leaves or is expected to leave their current job role.
   */
  endDate?: RFCDate | null | undefined;
  /**
   * The rate of pay for the employee in their current job role.
   */
  compensationRate?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesOneCurrency | null | undefined;
  /**
   * Unit of measurement for employee compensation.
   */
  paymentUnit?: HrisEmployeesOnePaymentUnit | null | undefined;
  /**
   * The date on which the employee was hired by the organization
   */
  hiredAt?: RFCDate | null | undefined;
  /**
   * Indicates whether this the employee's primary job.
   */
  isPrimary?: boolean | null | undefined;
  /**
   * Indicates whether this the employee has a manager role.
   */
  isManager?: boolean | null | undefined;
  /**
   * Indicates the status of the job.
   */
  status?: HrisEmployeesOneStatus | null | undefined;
  location?: HrisEmployeesOneLocation | undefined;
};

/**
 * Unit of measurement for employee compensation.
 */
export const HrisEmployeesOneHrisEmployeesPaymentUnit = {
  Hour: "hour",
  Week: "week",
  Month: "month",
  Year: "year",
  Paycheck: "paycheck",
  Other: "other",
} as const;
/**
 * Unit of measurement for employee compensation.
 */
export type HrisEmployeesOneHrisEmployeesPaymentUnit = ClosedEnum<
  typeof HrisEmployeesOneHrisEmployeesPaymentUnit
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesOneHrisEmployeesCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesOneHrisEmployeesCurrency = ClosedEnum<
  typeof HrisEmployeesOneHrisEmployeesCurrency
>;

/**
 * The FLSA status for this compensation.
 */
export const HrisEmployeesOneFlsaStatus = {
  Exempt: "exempt",
  SalariedNonexempt: "salaried-nonexempt",
  Nonexempt: "nonexempt",
  Owner: "owner",
  Other: "other",
} as const;
/**
 * The FLSA status for this compensation.
 */
export type HrisEmployeesOneFlsaStatus = ClosedEnum<
  typeof HrisEmployeesOneFlsaStatus
>;

/**
 * Frequency of employee compensation.
 */
export const HrisEmployeesOnePaymentFrequency = {
  Weekly: "weekly",
  Biweekly: "biweekly",
  Monthly: "monthly",
  ProRata: "pro-rata",
  Other: "other",
} as const;
/**
 * Frequency of employee compensation.
 */
export type HrisEmployeesOnePaymentFrequency = ClosedEnum<
  typeof HrisEmployeesOnePaymentFrequency
>;

export type HrisEmployeesOneCompensation = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The ID of the job to which the compensation belongs.
   */
  jobId?: string | null | undefined;
  /**
   * The amount paid per payment unit.
   */
  rate?: number | null | undefined;
  /**
   * Unit of measurement for employee compensation.
   */
  paymentUnit?: HrisEmployeesOneHrisEmployeesPaymentUnit | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesOneHrisEmployeesCurrency | null | undefined;
  /**
   * The FLSA status for this compensation.
   */
  flsaStatus?: HrisEmployeesOneFlsaStatus | null | undefined;
  /**
   * The date on which a change to an employee's compensation takes effect.
   */
  effectiveDate?: string | null | undefined;
  /**
   * Frequency of employee compensation.
   */
  paymentFrequency?: HrisEmployeesOnePaymentFrequency | null | undefined;
};

/**
 * The type of address.
 */
export const HrisEmployeesOneType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisEmployeesOneType = ClosedEnum<typeof HrisEmployeesOneType>;

export type HrisEmployeesOneAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisEmployeesOneType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const HrisEmployeesOneHrisEmployeesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type HrisEmployeesOneHrisEmployeesType = ClosedEnum<
  typeof HrisEmployeesOneHrisEmployeesType
>;

export type HrisEmployeesOnePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: HrisEmployeesOneHrisEmployeesType | null | undefined;
};

/**
 * Email type
 */
export const HrisEmployeesOneHrisEmployeesResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type HrisEmployeesOneHrisEmployeesResponseType = ClosedEnum<
  typeof HrisEmployeesOneHrisEmployeesResponseType
>;

export type HrisEmployeesOneEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: HrisEmployeesOneHrisEmployeesResponseType | null | undefined;
};

export type HrisEmployeesOneValue6 = {};

export type HrisEmployeesOneValue4 = {};

export type HrisEmployeesOneValue =
  | HrisEmployeesOneValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<HrisEmployeesOneValue6>;

export type HrisEmployeesOneCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | HrisEmployeesOneValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<HrisEmployeesOneValue6>
    | null
    | undefined;
};

export type HrisEmployeesOneSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of bank account.
 */
export const HrisEmployeesOneAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The type of bank account.
 */
export type HrisEmployeesOneAccountType = ClosedEnum<
  typeof HrisEmployeesOneAccountType
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesOneHrisEmployeesResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesOneHrisEmployeesResponseCurrency = ClosedEnum<
  typeof HrisEmployeesOneHrisEmployeesResponseCurrency
>;

export type HrisEmployeesOneBankAccounts = {
  /**
   * The name of the bank
   */
  bankName?: string | null | undefined;
  /**
   * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name which you used in opening your bank account.
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account.
   */
  accountType?: HrisEmployeesOneAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN).
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC).
   */
  bic?: string | null | undefined;
  /**
   * A routing number is a nine-digit code used to identify a financial institution in the United States.
   */
  routingNumber?: string | null | undefined;
  /**
   * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
   */
  bsbNumber?: string | null | undefined;
  /**
   * A branch identifier is a unique identifier for a branch of a bank or financial institution.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
   */
  bankCode?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesOneHrisEmployeesResponseCurrency | null | undefined;
};

export type HrisEmployeesOneProbationPeriod = {
  /**
   * The date that the employee started their probation period at the company.
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The date that the employee ended their probation period at the company.
   */
  endDate?: RFCDate | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisEmployeesOneCustomMappings = {};

export type HrisEmployeesOneExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisEmployeesOnePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisEmployeesOneExtendPaths> | undefined;
};

export type HrisEmployeesOneData = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The name used to display the employee, often a combination of their first and last names.
   */
  displayName?: string | null | undefined;
  /**
   * The name the employee prefers to be addressed by, which may be different from their legal name.
   */
  preferredName?: string | null | undefined;
  /**
   * The initials of the person, usually derived from their first, middle, and last names.
   */
  initials?: string | null | undefined;
  /**
   * A formal salutation for the person. For example, 'Mr', 'Mrs'
   */
  salutation?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The marital status of the employee.
   */
  maritalStatus?: string | null | undefined;
  partner?: HrisEmployeesOnePerson | undefined;
  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  division?: string | null | undefined;
  /**
   * Unique identifier of the division this employee belongs to.
   */
  divisionId?: string | null | undefined;
  /**
   * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * Unique identifier of the department ID this employee belongs to.
   */
  departmentId?: string | null | undefined;
  /**
   * Name of the department this employee belongs to.
   */
  departmentName?: string | null | undefined;
  /**
   * The team the person is currently in.
   */
  team?: HrisEmployeesOneTeam | null | undefined;
  /**
   * The unique identifier of the company.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company.
   */
  companyName?: string | null | undefined;
  /**
   * A Start Date is the date that the employee started working at the company
   */
  employmentStartDate?: string | null | undefined;
  /**
   * An End Date is the date that the employee ended working at the company
   */
  employmentEndDate?: string | null | undefined;
  /**
   * The reason because the employment ended.
   */
  leavingReason?: HrisEmployeesOneLeavingReason | null | undefined;
  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  employeeNumber?: string | null | undefined;
  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  employmentStatus?: HrisEmployeesOneEmploymentStatus | null | undefined;
  employmentRole?: HrisEmployeesOneEmploymentRole | undefined;
  /**
   * The ethnicity of the employee
   */
  ethnicity?: string | null | undefined;
  manager?: HrisEmployeesOneManager | undefined;
  /**
   * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
   */
  directReports?: Array<string> | null | undefined;
  /**
   * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
   */
  socialSecurityNumber?: string | null | undefined;
  /**
   * The date of birth of the person.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * The date the person deceased.
   */
  deceasedOn?: RFCDate | null | undefined;
  /**
   * Country code according to ISO 3166-1 alpha-2.
   */
  countryOfBirth?: string | null | undefined;
  /**
   * A description of the object.
   */
  description?: string | null | undefined;
  /**
   * The gender represents the gender identity of a person.
   */
  gender?: HrisEmployeesOneGender | null | undefined;
  /**
   * The preferred pronouns of the person.
   */
  pronouns?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  preferredLanguage?: string | null | undefined;
  languages?: Array<string> | undefined;
  nationalities?: Array<string> | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
   */
  timezone?: string | null | undefined;
  /**
   * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
   */
  source?: string | null | undefined;
  /**
   * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
   */
  sourceId?: string | null | undefined;
  recordUrl?: string | null | undefined;
  jobs?: Array<HrisEmployeesOneJob> | null | undefined;
  compensations?: Array<HrisEmployeesOneCompensation> | null | undefined;
  /**
   * Indicates if the employee works from a remote location.
   */
  worksRemote?: boolean | null | undefined;
  addresses?: Array<HrisEmployeesOneAddresses> | undefined;
  phoneNumbers?: Array<HrisEmployeesOnePhoneNumbers> | undefined;
  emails?: Array<HrisEmployeesOneEmails> | undefined;
  customFields?: Array<HrisEmployeesOneCustomFields> | undefined;
  socialLinks?: Array<HrisEmployeesOneSocialLinks> | undefined;
  bankAccounts?: Array<HrisEmployeesOneBankAccounts> | undefined;
  taxCode?: string | null | undefined;
  taxId?: string | null | undefined;
  /**
   * Indicate the employee's dietary preference.
   */
  dietaryPreference?: string | null | undefined;
  /**
   * Indicate the employee's food allergies.
   */
  foodAllergies?: Array<string> | null | undefined;
  probationPeriod?: HrisEmployeesOneProbationPeriod | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: HrisEmployeesOneCustomMappings | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisEmployeesOnePassThrough> | undefined;
};

/**
 * Employees
 */
export type HrisEmployeesOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisEmployeesOneData;
};

export type HrisEmployeesOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Employees
   */
  twoHundredApplicationJsonObject?: HrisEmployeesOneResponseBody | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisEmployeesOneHrisEmployeesResponseBody
    | undefined;
};

/** @internal */
export const HrisEmployeesOneGlobals$inboundSchema: z.ZodType<
  HrisEmployeesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisEmployeesOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisEmployeesOneGlobals$outboundSchema: z.ZodType<
  HrisEmployeesOneGlobals$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneGlobals$ {
  /** @deprecated use `HrisEmployeesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneGlobals$inboundSchema;
  /** @deprecated use `HrisEmployeesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneGlobals$outboundSchema;
  /** @deprecated use `HrisEmployeesOneGlobals$Outbound` instead. */
  export type Outbound = HrisEmployeesOneGlobals$Outbound;
}

export function hrisEmployeesOneGlobalsToJSON(
  hrisEmployeesOneGlobals: HrisEmployeesOneGlobals,
): string {
  return JSON.stringify(
    HrisEmployeesOneGlobals$outboundSchema.parse(hrisEmployeesOneGlobals),
  );
}

export function hrisEmployeesOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneGlobals' from JSON`,
  );
}

/** @internal */
export const QueryParamFilter$inboundSchema: z.ZodType<
  QueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
  });
});

/** @internal */
export type QueryParamFilter$Outbound = {
  company_id?: string | undefined;
};

/** @internal */
export const QueryParamFilter$outboundSchema: z.ZodType<
  QueryParamFilter$Outbound,
  z.ZodTypeDef,
  QueryParamFilter
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamFilter$ {
  /** @deprecated use `QueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamFilter$inboundSchema;
  /** @deprecated use `QueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamFilter$outboundSchema;
  /** @deprecated use `QueryParamFilter$Outbound` instead. */
  export type Outbound = QueryParamFilter$Outbound;
}

export function queryParamFilterToJSON(
  queryParamFilter: QueryParamFilter,
): string {
  return JSON.stringify(
    QueryParamFilter$outboundSchema.parse(queryParamFilter),
  );
}

export function queryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamFilter' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneRequest$inboundSchema: z.ZodType<
  HrisEmployeesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
  filter: z.lazy(() => QueryParamFilter$inboundSchema).optional(),
  pass_through: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisEmployeesOneRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
  filter?: QueryParamFilter$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
};

/** @internal */
export const HrisEmployeesOneRequest$outboundSchema: z.ZodType<
  HrisEmployeesOneRequest$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
  filter: z.lazy(() => QueryParamFilter$outboundSchema).optional(),
  passThrough: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneRequest$ {
  /** @deprecated use `HrisEmployeesOneRequest$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneRequest$inboundSchema;
  /** @deprecated use `HrisEmployeesOneRequest$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneRequest$outboundSchema;
  /** @deprecated use `HrisEmployeesOneRequest$Outbound` instead. */
  export type Outbound = HrisEmployeesOneRequest$Outbound;
}

export function hrisEmployeesOneRequestToJSON(
  hrisEmployeesOneRequest: HrisEmployeesOneRequest,
): string {
  return JSON.stringify(
    HrisEmployeesOneRequest$outboundSchema.parse(hrisEmployeesOneRequest),
  );
}

export function hrisEmployeesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneRequest' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneDetail$inboundSchema: z.ZodType<
  HrisEmployeesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisEmployeesOneDetail$outboundSchema: z.ZodType<
  HrisEmployeesOneDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneDetail$ {
  /** @deprecated use `HrisEmployeesOneDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesOneDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesOneDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesOneDetail$Outbound;
}

export function hrisEmployeesOneDetailToJSON(
  hrisEmployeesOneDetail: HrisEmployeesOneDetail,
): string {
  return JSON.stringify(
    HrisEmployeesOneDetail$outboundSchema.parse(hrisEmployeesOneDetail),
  );
}

export function hrisEmployeesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesOneHrisEmployeesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type HrisEmployeesOneHrisEmployeesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesOneHrisEmployeesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesResponseBody$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesOneHrisEmployeesResponseBody$Outbound;
}

export function hrisEmployeesOneHrisEmployeesResponseBodyToJSON(
  hrisEmployeesOneHrisEmployeesResponseBody:
    HrisEmployeesOneHrisEmployeesResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeesOneHrisEmployeesResponseBody$outboundSchema.parse(
      hrisEmployeesOneHrisEmployeesResponseBody,
    ),
  );
}

export function hrisEmployeesOneHrisEmployeesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesOneHrisEmployeesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesOneHrisEmployeesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesOneHrisEmployeesResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesGender$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneHrisEmployeesGender
> = z.nativeEnum(HrisEmployeesOneHrisEmployeesGender);

/** @internal */
export const HrisEmployeesOneHrisEmployeesGender$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesGender> =
    HrisEmployeesOneHrisEmployeesGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesGender$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesGender$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesGender$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesGender$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesGender$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesCustomMappings$inboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesCustomMappings,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type HrisEmployeesOneHrisEmployeesCustomMappings$Outbound = {};

/** @internal */
export const HrisEmployeesOneHrisEmployeesCustomMappings$outboundSchema:
  z.ZodType<
    HrisEmployeesOneHrisEmployeesCustomMappings$Outbound,
    z.ZodTypeDef,
    HrisEmployeesOneHrisEmployeesCustomMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesCustomMappings$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesCustomMappings$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesCustomMappings$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesCustomMappings$outboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesCustomMappings$Outbound` instead. */
  export type Outbound = HrisEmployeesOneHrisEmployeesCustomMappings$Outbound;
}

export function hrisEmployeesOneHrisEmployeesCustomMappingsToJSON(
  hrisEmployeesOneHrisEmployeesCustomMappings:
    HrisEmployeesOneHrisEmployeesCustomMappings,
): string {
  return JSON.stringify(
    HrisEmployeesOneHrisEmployeesCustomMappings$outboundSchema.parse(
      hrisEmployeesOneHrisEmployeesCustomMappings,
    ),
  );
}

export function hrisEmployeesOneHrisEmployeesCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesOneHrisEmployeesCustomMappings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesOneHrisEmployeesCustomMappings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesOneHrisEmployeesCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOnePerson$inboundSchema: z.ZodType<
  HrisEmployeesOnePerson,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesOneHrisEmployeesGender$inboundSchema)
    .optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  deceased_on: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => HrisEmployeesOneHrisEmployeesCustomMappings$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_name": "middleName",
    "deceased_on": "deceasedOn",
    "custom_mappings": "customMappings",
  });
});

/** @internal */
export type HrisEmployeesOnePerson$Outbound = {
  id?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  gender?: string | null | undefined;
  initials?: string | null | undefined;
  birthday?: string | null | undefined;
  deceased_on?: string | null | undefined;
  custom_mappings?:
    | HrisEmployeesOneHrisEmployeesCustomMappings$Outbound
    | null
    | undefined;
};

/** @internal */
export const HrisEmployeesOnePerson$outboundSchema: z.ZodType<
  HrisEmployeesOnePerson$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOnePerson
> = z.object({
  id: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesOneHrisEmployeesGender$outboundSchema)
    .optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  deceasedOn: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => HrisEmployeesOneHrisEmployeesCustomMappings$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    deceasedOn: "deceased_on",
    customMappings: "custom_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOnePerson$ {
  /** @deprecated use `HrisEmployeesOnePerson$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOnePerson$inboundSchema;
  /** @deprecated use `HrisEmployeesOnePerson$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOnePerson$outboundSchema;
  /** @deprecated use `HrisEmployeesOnePerson$Outbound` instead. */
  export type Outbound = HrisEmployeesOnePerson$Outbound;
}

export function hrisEmployeesOnePersonToJSON(
  hrisEmployeesOnePerson: HrisEmployeesOnePerson,
): string {
  return JSON.stringify(
    HrisEmployeesOnePerson$outboundSchema.parse(hrisEmployeesOnePerson),
  );
}

export function hrisEmployeesOnePersonFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOnePerson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOnePerson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOnePerson' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneTeam$inboundSchema: z.ZodType<
  HrisEmployeesOneTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisEmployeesOneTeam$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOneTeam$outboundSchema: z.ZodType<
  HrisEmployeesOneTeam$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneTeam
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneTeam$ {
  /** @deprecated use `HrisEmployeesOneTeam$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneTeam$inboundSchema;
  /** @deprecated use `HrisEmployeesOneTeam$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneTeam$outboundSchema;
  /** @deprecated use `HrisEmployeesOneTeam$Outbound` instead. */
  export type Outbound = HrisEmployeesOneTeam$Outbound;
}

export function hrisEmployeesOneTeamToJSON(
  hrisEmployeesOneTeam: HrisEmployeesOneTeam,
): string {
  return JSON.stringify(
    HrisEmployeesOneTeam$outboundSchema.parse(hrisEmployeesOneTeam),
  );
}

export function hrisEmployeesOneTeamFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneTeam' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneLeavingReason$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneLeavingReason
> = z.nativeEnum(HrisEmployeesOneLeavingReason);

/** @internal */
export const HrisEmployeesOneLeavingReason$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneLeavingReason
> = HrisEmployeesOneLeavingReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneLeavingReason$ {
  /** @deprecated use `HrisEmployeesOneLeavingReason$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneLeavingReason$inboundSchema;
  /** @deprecated use `HrisEmployeesOneLeavingReason$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneLeavingReason$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneEmploymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneEmploymentStatus
> = z.nativeEnum(HrisEmployeesOneEmploymentStatus);

/** @internal */
export const HrisEmployeesOneEmploymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneEmploymentStatus
> = HrisEmployeesOneEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneEmploymentStatus$ {
  /** @deprecated use `HrisEmployeesOneEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneEmploymentStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesOneEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneEmploymentStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneEmploymentType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneEmploymentType
> = z.nativeEnum(HrisEmployeesOneEmploymentType);

/** @internal */
export const HrisEmployeesOneEmploymentType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneEmploymentType
> = HrisEmployeesOneEmploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneEmploymentType$ {
  /** @deprecated use `HrisEmployeesOneEmploymentType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneEmploymentType$inboundSchema;
  /** @deprecated use `HrisEmployeesOneEmploymentType$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneEmploymentType$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneEmploymentSubType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneEmploymentSubType
> = z.nativeEnum(HrisEmployeesOneEmploymentSubType);

/** @internal */
export const HrisEmployeesOneEmploymentSubType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneEmploymentSubType
> = HrisEmployeesOneEmploymentSubType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneEmploymentSubType$ {
  /** @deprecated use `HrisEmployeesOneEmploymentSubType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneEmploymentSubType$inboundSchema;
  /** @deprecated use `HrisEmployeesOneEmploymentSubType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneEmploymentSubType$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneEmploymentRole$inboundSchema: z.ZodType<
  HrisEmployeesOneEmploymentRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(HrisEmployeesOneEmploymentType$inboundSchema).optional(),
  sub_type: z.nullable(HrisEmployeesOneEmploymentSubType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "sub_type": "subType",
  });
});

/** @internal */
export type HrisEmployeesOneEmploymentRole$Outbound = {
  type?: string | null | undefined;
  sub_type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOneEmploymentRole$outboundSchema: z.ZodType<
  HrisEmployeesOneEmploymentRole$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneEmploymentRole
> = z.object({
  type: z.nullable(HrisEmployeesOneEmploymentType$outboundSchema).optional(),
  subType: z.nullable(HrisEmployeesOneEmploymentSubType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    subType: "sub_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneEmploymentRole$ {
  /** @deprecated use `HrisEmployeesOneEmploymentRole$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneEmploymentRole$inboundSchema;
  /** @deprecated use `HrisEmployeesOneEmploymentRole$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneEmploymentRole$outboundSchema;
  /** @deprecated use `HrisEmployeesOneEmploymentRole$Outbound` instead. */
  export type Outbound = HrisEmployeesOneEmploymentRole$Outbound;
}

export function hrisEmployeesOneEmploymentRoleToJSON(
  hrisEmployeesOneEmploymentRole: HrisEmployeesOneEmploymentRole,
): string {
  return JSON.stringify(
    HrisEmployeesOneEmploymentRole$outboundSchema.parse(
      hrisEmployeesOneEmploymentRole,
    ),
  );
}

export function hrisEmployeesOneEmploymentRoleFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneEmploymentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneEmploymentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneEmploymentRole' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesEmploymentStatus$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesEmploymentStatus> = z
    .nativeEnum(HrisEmployeesOneHrisEmployeesEmploymentStatus);

/** @internal */
export const HrisEmployeesOneHrisEmployeesEmploymentStatus$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesEmploymentStatus> =
    HrisEmployeesOneHrisEmployeesEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesEmploymentStatus$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesEmploymentStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesEmploymentStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneManager$inboundSchema: z.ZodType<
  HrisEmployeesOneManager,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  employment_status: z.nullable(
    HrisEmployeesOneHrisEmployeesEmploymentStatus$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "employment_status": "employmentStatus",
  });
});

/** @internal */
export type HrisEmployeesOneManager$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  email?: string | null | undefined;
  employment_status?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOneManager$outboundSchema: z.ZodType<
  HrisEmployeesOneManager$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneManager
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  employmentStatus: z.nullable(
    HrisEmployeesOneHrisEmployeesEmploymentStatus$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    employmentStatus: "employment_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneManager$ {
  /** @deprecated use `HrisEmployeesOneManager$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneManager$inboundSchema;
  /** @deprecated use `HrisEmployeesOneManager$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneManager$outboundSchema;
  /** @deprecated use `HrisEmployeesOneManager$Outbound` instead. */
  export type Outbound = HrisEmployeesOneManager$Outbound;
}

export function hrisEmployeesOneManagerToJSON(
  hrisEmployeesOneManager: HrisEmployeesOneManager,
): string {
  return JSON.stringify(
    HrisEmployeesOneManager$outboundSchema.parse(hrisEmployeesOneManager),
  );
}

export function hrisEmployeesOneManagerFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneManager, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneManager$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneManager' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneGender$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneGender
> = z.nativeEnum(HrisEmployeesOneGender);

/** @internal */
export const HrisEmployeesOneGender$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneGender
> = HrisEmployeesOneGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneGender$ {
  /** @deprecated use `HrisEmployeesOneGender$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneGender$inboundSchema;
  /** @deprecated use `HrisEmployeesOneGender$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneGender$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneCurrency$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneCurrency
> = z.nativeEnum(HrisEmployeesOneCurrency);

/** @internal */
export const HrisEmployeesOneCurrency$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneCurrency
> = HrisEmployeesOneCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneCurrency$ {
  /** @deprecated use `HrisEmployeesOneCurrency$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesOneCurrency$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeesOnePaymentUnit$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOnePaymentUnit
> = z.nativeEnum(HrisEmployeesOnePaymentUnit);

/** @internal */
export const HrisEmployeesOnePaymentUnit$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOnePaymentUnit
> = HrisEmployeesOnePaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOnePaymentUnit$ {
  /** @deprecated use `HrisEmployeesOnePaymentUnit$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOnePaymentUnit$inboundSchema;
  /** @deprecated use `HrisEmployeesOnePaymentUnit$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOnePaymentUnit$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneStatus
> = z.nativeEnum(HrisEmployeesOneStatus);

/** @internal */
export const HrisEmployeesOneStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneStatus
> = HrisEmployeesOneStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneStatus$ {
  /** @deprecated use `HrisEmployeesOneStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesOneStatus$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesResponse200Type> = z
    .nativeEnum(HrisEmployeesOneHrisEmployeesResponse200Type);

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesResponse200Type> =
    HrisEmployeesOneHrisEmployeesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesResponse200Type$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesResponse200Type$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesResponse200Type$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneLocation$inboundSchema: z.ZodType<
  HrisEmployeesOneLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesOneHrisEmployeesResponse200Type$inboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisEmployeesOneLocation$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOneLocation$outboundSchema: z.ZodType<
  HrisEmployeesOneLocation$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneLocation
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesOneHrisEmployeesResponse200Type$outboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneLocation$ {
  /** @deprecated use `HrisEmployeesOneLocation$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneLocation$inboundSchema;
  /** @deprecated use `HrisEmployeesOneLocation$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneLocation$outboundSchema;
  /** @deprecated use `HrisEmployeesOneLocation$Outbound` instead. */
  export type Outbound = HrisEmployeesOneLocation$Outbound;
}

export function hrisEmployeesOneLocationToJSON(
  hrisEmployeesOneLocation: HrisEmployeesOneLocation,
): string {
  return JSON.stringify(
    HrisEmployeesOneLocation$outboundSchema.parse(hrisEmployeesOneLocation),
  );
}

export function hrisEmployeesOneLocationFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneLocation' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneJob$inboundSchema: z.ZodType<
  HrisEmployeesOneJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  employee_id: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  compensation_rate: z.nullable(z.number()).optional(),
  currency: z.nullable(HrisEmployeesOneCurrency$inboundSchema).optional(),
  payment_unit: z.nullable(HrisEmployeesOnePaymentUnit$inboundSchema)
    .optional(),
  hired_at: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  is_primary: z.nullable(z.boolean()).optional(),
  is_manager: z.nullable(z.boolean()).optional(),
  status: z.nullable(HrisEmployeesOneStatus$inboundSchema).optional(),
  location: z.lazy(() => HrisEmployeesOneLocation$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "start_date": "startDate",
    "end_date": "endDate",
    "compensation_rate": "compensationRate",
    "payment_unit": "paymentUnit",
    "hired_at": "hiredAt",
    "is_primary": "isPrimary",
    "is_manager": "isManager",
  });
});

/** @internal */
export type HrisEmployeesOneJob$Outbound = {
  id?: string | null | undefined;
  employee_id?: string | null | undefined;
  title?: string | null | undefined;
  role?: string | null | undefined;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  compensation_rate?: number | null | undefined;
  currency?: string | null | undefined;
  payment_unit?: string | null | undefined;
  hired_at?: string | null | undefined;
  is_primary?: boolean | null | undefined;
  is_manager?: boolean | null | undefined;
  status?: string | null | undefined;
  location?: HrisEmployeesOneLocation$Outbound | undefined;
};

/** @internal */
export const HrisEmployeesOneJob$outboundSchema: z.ZodType<
  HrisEmployeesOneJob$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneJob
> = z.object({
  id: z.nullable(z.string()).optional(),
  employeeId: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  compensationRate: z.nullable(z.number()).optional(),
  currency: z.nullable(HrisEmployeesOneCurrency$outboundSchema).optional(),
  paymentUnit: z.nullable(HrisEmployeesOnePaymentUnit$outboundSchema)
    .optional(),
  hiredAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  isPrimary: z.nullable(z.boolean()).optional(),
  isManager: z.nullable(z.boolean()).optional(),
  status: z.nullable(HrisEmployeesOneStatus$outboundSchema).optional(),
  location: z.lazy(() => HrisEmployeesOneLocation$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    startDate: "start_date",
    endDate: "end_date",
    compensationRate: "compensation_rate",
    paymentUnit: "payment_unit",
    hiredAt: "hired_at",
    isPrimary: "is_primary",
    isManager: "is_manager",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneJob$ {
  /** @deprecated use `HrisEmployeesOneJob$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneJob$inboundSchema;
  /** @deprecated use `HrisEmployeesOneJob$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneJob$outboundSchema;
  /** @deprecated use `HrisEmployeesOneJob$Outbound` instead. */
  export type Outbound = HrisEmployeesOneJob$Outbound;
}

export function hrisEmployeesOneJobToJSON(
  hrisEmployeesOneJob: HrisEmployeesOneJob,
): string {
  return JSON.stringify(
    HrisEmployeesOneJob$outboundSchema.parse(hrisEmployeesOneJob),
  );
}

export function hrisEmployeesOneJobFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneJob' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesPaymentUnit$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesPaymentUnit> = z
    .nativeEnum(HrisEmployeesOneHrisEmployeesPaymentUnit);

/** @internal */
export const HrisEmployeesOneHrisEmployeesPaymentUnit$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesPaymentUnit> =
    HrisEmployeesOneHrisEmployeesPaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesPaymentUnit$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesPaymentUnit$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesPaymentUnit$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesPaymentUnit$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesPaymentUnit$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesCurrency$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesCurrency> = z.nativeEnum(
    HrisEmployeesOneHrisEmployeesCurrency,
  );

/** @internal */
export const HrisEmployeesOneHrisEmployeesCurrency$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesCurrency> =
    HrisEmployeesOneHrisEmployeesCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesCurrency$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesCurrency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesCurrency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneFlsaStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneFlsaStatus
> = z.nativeEnum(HrisEmployeesOneFlsaStatus);

/** @internal */
export const HrisEmployeesOneFlsaStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneFlsaStatus
> = HrisEmployeesOneFlsaStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneFlsaStatus$ {
  /** @deprecated use `HrisEmployeesOneFlsaStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneFlsaStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesOneFlsaStatus$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneFlsaStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesOnePaymentFrequency$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOnePaymentFrequency
> = z.nativeEnum(HrisEmployeesOnePaymentFrequency);

/** @internal */
export const HrisEmployeesOnePaymentFrequency$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOnePaymentFrequency
> = HrisEmployeesOnePaymentFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOnePaymentFrequency$ {
  /** @deprecated use `HrisEmployeesOnePaymentFrequency$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOnePaymentFrequency$inboundSchema;
  /** @deprecated use `HrisEmployeesOnePaymentFrequency$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOnePaymentFrequency$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneCompensation$inboundSchema: z.ZodType<
  HrisEmployeesOneCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  job_id: z.nullable(z.string()).optional(),
  rate: z.nullable(z.number()).optional(),
  payment_unit: z.nullable(
    HrisEmployeesOneHrisEmployeesPaymentUnit$inboundSchema,
  ).optional(),
  currency: z.nullable(HrisEmployeesOneHrisEmployeesCurrency$inboundSchema)
    .optional(),
  flsa_status: z.nullable(HrisEmployeesOneFlsaStatus$inboundSchema).optional(),
  effective_date: z.nullable(z.string()).optional(),
  payment_frequency: z.nullable(HrisEmployeesOnePaymentFrequency$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
    "payment_unit": "paymentUnit",
    "flsa_status": "flsaStatus",
    "effective_date": "effectiveDate",
    "payment_frequency": "paymentFrequency",
  });
});

/** @internal */
export type HrisEmployeesOneCompensation$Outbound = {
  id?: string | null | undefined;
  job_id?: string | null | undefined;
  rate?: number | null | undefined;
  payment_unit?: string | null | undefined;
  currency?: string | null | undefined;
  flsa_status?: string | null | undefined;
  effective_date?: string | null | undefined;
  payment_frequency?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOneCompensation$outboundSchema: z.ZodType<
  HrisEmployeesOneCompensation$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneCompensation
> = z.object({
  id: z.nullable(z.string()).optional(),
  jobId: z.nullable(z.string()).optional(),
  rate: z.nullable(z.number()).optional(),
  paymentUnit: z.nullable(
    HrisEmployeesOneHrisEmployeesPaymentUnit$outboundSchema,
  ).optional(),
  currency: z.nullable(HrisEmployeesOneHrisEmployeesCurrency$outboundSchema)
    .optional(),
  flsaStatus: z.nullable(HrisEmployeesOneFlsaStatus$outboundSchema).optional(),
  effectiveDate: z.nullable(z.string()).optional(),
  paymentFrequency: z.nullable(HrisEmployeesOnePaymentFrequency$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
    paymentUnit: "payment_unit",
    flsaStatus: "flsa_status",
    effectiveDate: "effective_date",
    paymentFrequency: "payment_frequency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneCompensation$ {
  /** @deprecated use `HrisEmployeesOneCompensation$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneCompensation$inboundSchema;
  /** @deprecated use `HrisEmployeesOneCompensation$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneCompensation$outboundSchema;
  /** @deprecated use `HrisEmployeesOneCompensation$Outbound` instead. */
  export type Outbound = HrisEmployeesOneCompensation$Outbound;
}

export function hrisEmployeesOneCompensationToJSON(
  hrisEmployeesOneCompensation: HrisEmployeesOneCompensation,
): string {
  return JSON.stringify(
    HrisEmployeesOneCompensation$outboundSchema.parse(
      hrisEmployeesOneCompensation,
    ),
  );
}

export function hrisEmployeesOneCompensationFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneCompensation' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneType
> = z.nativeEnum(HrisEmployeesOneType);

/** @internal */
export const HrisEmployeesOneType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneType
> = HrisEmployeesOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneType$ {
  /** @deprecated use `HrisEmployeesOneType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneType$inboundSchema;
  /** @deprecated use `HrisEmployeesOneType$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneType$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneAddresses$inboundSchema: z.ZodType<
  HrisEmployeesOneAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesOneType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisEmployeesOneAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOneAddresses$outboundSchema: z.ZodType<
  HrisEmployeesOneAddresses$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesOneType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneAddresses$ {
  /** @deprecated use `HrisEmployeesOneAddresses$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneAddresses$inboundSchema;
  /** @deprecated use `HrisEmployeesOneAddresses$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneAddresses$outboundSchema;
  /** @deprecated use `HrisEmployeesOneAddresses$Outbound` instead. */
  export type Outbound = HrisEmployeesOneAddresses$Outbound;
}

export function hrisEmployeesOneAddressesToJSON(
  hrisEmployeesOneAddresses: HrisEmployeesOneAddresses,
): string {
  return JSON.stringify(
    HrisEmployeesOneAddresses$outboundSchema.parse(hrisEmployeesOneAddresses),
  );
}

export function hrisEmployeesOneAddressesFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneAddresses' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneHrisEmployeesType
> = z.nativeEnum(HrisEmployeesOneHrisEmployeesType);

/** @internal */
export const HrisEmployeesOneHrisEmployeesType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneHrisEmployeesType
> = HrisEmployeesOneHrisEmployeesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesType$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneHrisEmployeesType$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesType$outboundSchema;
}

/** @internal */
export const HrisEmployeesOnePhoneNumbers$inboundSchema: z.ZodType<
  HrisEmployeesOnePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesOneHrisEmployeesType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type HrisEmployeesOnePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOnePhoneNumbers$outboundSchema: z.ZodType<
  HrisEmployeesOnePhoneNumbers$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOnePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesOneHrisEmployeesType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOnePhoneNumbers$ {
  /** @deprecated use `HrisEmployeesOnePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOnePhoneNumbers$inboundSchema;
  /** @deprecated use `HrisEmployeesOnePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOnePhoneNumbers$outboundSchema;
  /** @deprecated use `HrisEmployeesOnePhoneNumbers$Outbound` instead. */
  export type Outbound = HrisEmployeesOnePhoneNumbers$Outbound;
}

export function hrisEmployeesOnePhoneNumbersToJSON(
  hrisEmployeesOnePhoneNumbers: HrisEmployeesOnePhoneNumbers,
): string {
  return JSON.stringify(
    HrisEmployeesOnePhoneNumbers$outboundSchema.parse(
      hrisEmployeesOnePhoneNumbers,
    ),
  );
}

export function hrisEmployeesOnePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOnePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOnePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOnePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseType$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesResponseType> = z
    .nativeEnum(HrisEmployeesOneHrisEmployeesResponseType);

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseType$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesResponseType> =
    HrisEmployeesOneHrisEmployeesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesResponseType$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesResponseType$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesResponseType$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneEmails$inboundSchema: z.ZodType<
  HrisEmployeesOneEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisEmployeesOneHrisEmployeesResponseType$inboundSchema)
    .optional(),
});

/** @internal */
export type HrisEmployeesOneEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOneEmails$outboundSchema: z.ZodType<
  HrisEmployeesOneEmails$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisEmployeesOneHrisEmployeesResponseType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneEmails$ {
  /** @deprecated use `HrisEmployeesOneEmails$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneEmails$inboundSchema;
  /** @deprecated use `HrisEmployeesOneEmails$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneEmails$outboundSchema;
  /** @deprecated use `HrisEmployeesOneEmails$Outbound` instead. */
  export type Outbound = HrisEmployeesOneEmails$Outbound;
}

export function hrisEmployeesOneEmailsToJSON(
  hrisEmployeesOneEmails: HrisEmployeesOneEmails,
): string {
  return JSON.stringify(
    HrisEmployeesOneEmails$outboundSchema.parse(hrisEmployeesOneEmails),
  );
}

export function hrisEmployeesOneEmailsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneEmails' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneValue6$inboundSchema: z.ZodType<
  HrisEmployeesOneValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisEmployeesOneValue6$Outbound = {};

/** @internal */
export const HrisEmployeesOneValue6$outboundSchema: z.ZodType<
  HrisEmployeesOneValue6$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneValue6$ {
  /** @deprecated use `HrisEmployeesOneValue6$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneValue6$inboundSchema;
  /** @deprecated use `HrisEmployeesOneValue6$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneValue6$outboundSchema;
  /** @deprecated use `HrisEmployeesOneValue6$Outbound` instead. */
  export type Outbound = HrisEmployeesOneValue6$Outbound;
}

export function hrisEmployeesOneValue6ToJSON(
  hrisEmployeesOneValue6: HrisEmployeesOneValue6,
): string {
  return JSON.stringify(
    HrisEmployeesOneValue6$outboundSchema.parse(hrisEmployeesOneValue6),
  );
}

export function hrisEmployeesOneValue6FromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneValue6' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneValue4$inboundSchema: z.ZodType<
  HrisEmployeesOneValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisEmployeesOneValue4$Outbound = {};

/** @internal */
export const HrisEmployeesOneValue4$outboundSchema: z.ZodType<
  HrisEmployeesOneValue4$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneValue4$ {
  /** @deprecated use `HrisEmployeesOneValue4$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneValue4$inboundSchema;
  /** @deprecated use `HrisEmployeesOneValue4$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneValue4$outboundSchema;
  /** @deprecated use `HrisEmployeesOneValue4$Outbound` instead. */
  export type Outbound = HrisEmployeesOneValue4$Outbound;
}

export function hrisEmployeesOneValue4ToJSON(
  hrisEmployeesOneValue4: HrisEmployeesOneValue4,
): string {
  return JSON.stringify(
    HrisEmployeesOneValue4$outboundSchema.parse(hrisEmployeesOneValue4),
  );
}

export function hrisEmployeesOneValue4FromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneValue4' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneValue$inboundSchema: z.ZodType<
  HrisEmployeesOneValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisEmployeesOneValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => HrisEmployeesOneValue6$inboundSchema)),
]);

/** @internal */
export type HrisEmployeesOneValue$Outbound =
  | HrisEmployeesOneValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<HrisEmployeesOneValue6$Outbound>;

/** @internal */
export const HrisEmployeesOneValue$outboundSchema: z.ZodType<
  HrisEmployeesOneValue$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneValue
> = z.union([
  z.lazy(() => HrisEmployeesOneValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => HrisEmployeesOneValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneValue$ {
  /** @deprecated use `HrisEmployeesOneValue$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneValue$inboundSchema;
  /** @deprecated use `HrisEmployeesOneValue$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneValue$outboundSchema;
  /** @deprecated use `HrisEmployeesOneValue$Outbound` instead. */
  export type Outbound = HrisEmployeesOneValue$Outbound;
}

export function hrisEmployeesOneValueToJSON(
  hrisEmployeesOneValue: HrisEmployeesOneValue,
): string {
  return JSON.stringify(
    HrisEmployeesOneValue$outboundSchema.parse(hrisEmployeesOneValue),
  );
}

export function hrisEmployeesOneValueFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneValue' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneCustomFields$inboundSchema: z.ZodType<
  HrisEmployeesOneCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => HrisEmployeesOneValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => HrisEmployeesOneValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type HrisEmployeesOneCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | HrisEmployeesOneValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<HrisEmployeesOneValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const HrisEmployeesOneCustomFields$outboundSchema: z.ZodType<
  HrisEmployeesOneCustomFields$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => HrisEmployeesOneValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => HrisEmployeesOneValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneCustomFields$ {
  /** @deprecated use `HrisEmployeesOneCustomFields$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneCustomFields$inboundSchema;
  /** @deprecated use `HrisEmployeesOneCustomFields$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneCustomFields$outboundSchema;
  /** @deprecated use `HrisEmployeesOneCustomFields$Outbound` instead. */
  export type Outbound = HrisEmployeesOneCustomFields$Outbound;
}

export function hrisEmployeesOneCustomFieldsToJSON(
  hrisEmployeesOneCustomFields: HrisEmployeesOneCustomFields,
): string {
  return JSON.stringify(
    HrisEmployeesOneCustomFields$outboundSchema.parse(
      hrisEmployeesOneCustomFields,
    ),
  );
}

export function hrisEmployeesOneCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneCustomFields' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneSocialLinks$inboundSchema: z.ZodType<
  HrisEmployeesOneSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisEmployeesOneSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOneSocialLinks$outboundSchema: z.ZodType<
  HrisEmployeesOneSocialLinks$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneSocialLinks$ {
  /** @deprecated use `HrisEmployeesOneSocialLinks$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneSocialLinks$inboundSchema;
  /** @deprecated use `HrisEmployeesOneSocialLinks$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneSocialLinks$outboundSchema;
  /** @deprecated use `HrisEmployeesOneSocialLinks$Outbound` instead. */
  export type Outbound = HrisEmployeesOneSocialLinks$Outbound;
}

export function hrisEmployeesOneSocialLinksToJSON(
  hrisEmployeesOneSocialLinks: HrisEmployeesOneSocialLinks,
): string {
  return JSON.stringify(
    HrisEmployeesOneSocialLinks$outboundSchema.parse(
      hrisEmployeesOneSocialLinks,
    ),
  );
}

export function hrisEmployeesOneSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneSocialLinks' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneAccountType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneAccountType
> = z.nativeEnum(HrisEmployeesOneAccountType);

/** @internal */
export const HrisEmployeesOneAccountType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesOneAccountType
> = HrisEmployeesOneAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneAccountType$ {
  /** @deprecated use `HrisEmployeesOneAccountType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneAccountType$inboundSchema;
  /** @deprecated use `HrisEmployeesOneAccountType$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneAccountType$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseCurrency$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesResponseCurrency> = z
    .nativeEnum(HrisEmployeesOneHrisEmployeesResponseCurrency);

/** @internal */
export const HrisEmployeesOneHrisEmployeesResponseCurrency$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesOneHrisEmployeesResponseCurrency> =
    HrisEmployeesOneHrisEmployeesResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneHrisEmployeesResponseCurrency$ {
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseCurrency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesOneHrisEmployeesResponseCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesOneHrisEmployeesResponseCurrency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesOneHrisEmployeesResponseCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeesOneBankAccounts$inboundSchema: z.ZodType<
  HrisEmployeesOneBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(HrisEmployeesOneAccountType$inboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(
    HrisEmployeesOneHrisEmployeesResponseCurrency$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type HrisEmployeesOneBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOneBankAccounts$outboundSchema: z.ZodType<
  HrisEmployeesOneBankAccounts$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(HrisEmployeesOneAccountType$outboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(
    HrisEmployeesOneHrisEmployeesResponseCurrency$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneBankAccounts$ {
  /** @deprecated use `HrisEmployeesOneBankAccounts$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneBankAccounts$inboundSchema;
  /** @deprecated use `HrisEmployeesOneBankAccounts$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneBankAccounts$outboundSchema;
  /** @deprecated use `HrisEmployeesOneBankAccounts$Outbound` instead. */
  export type Outbound = HrisEmployeesOneBankAccounts$Outbound;
}

export function hrisEmployeesOneBankAccountsToJSON(
  hrisEmployeesOneBankAccounts: HrisEmployeesOneBankAccounts,
): string {
  return JSON.stringify(
    HrisEmployeesOneBankAccounts$outboundSchema.parse(
      hrisEmployeesOneBankAccounts,
    ),
  );
}

export function hrisEmployeesOneBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneBankAccounts' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneProbationPeriod$inboundSchema: z.ZodType<
  HrisEmployeesOneProbationPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type HrisEmployeesOneProbationPeriod$Outbound = {
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesOneProbationPeriod$outboundSchema: z.ZodType<
  HrisEmployeesOneProbationPeriod$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneProbationPeriod
> = z.object({
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneProbationPeriod$ {
  /** @deprecated use `HrisEmployeesOneProbationPeriod$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneProbationPeriod$inboundSchema;
  /** @deprecated use `HrisEmployeesOneProbationPeriod$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneProbationPeriod$outboundSchema;
  /** @deprecated use `HrisEmployeesOneProbationPeriod$Outbound` instead. */
  export type Outbound = HrisEmployeesOneProbationPeriod$Outbound;
}

export function hrisEmployeesOneProbationPeriodToJSON(
  hrisEmployeesOneProbationPeriod: HrisEmployeesOneProbationPeriod,
): string {
  return JSON.stringify(
    HrisEmployeesOneProbationPeriod$outboundSchema.parse(
      hrisEmployeesOneProbationPeriod,
    ),
  );
}

export function hrisEmployeesOneProbationPeriodFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneProbationPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneProbationPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneProbationPeriod' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneCustomMappings$inboundSchema: z.ZodType<
  HrisEmployeesOneCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisEmployeesOneCustomMappings$Outbound = {};

/** @internal */
export const HrisEmployeesOneCustomMappings$outboundSchema: z.ZodType<
  HrisEmployeesOneCustomMappings$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneCustomMappings$ {
  /** @deprecated use `HrisEmployeesOneCustomMappings$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneCustomMappings$inboundSchema;
  /** @deprecated use `HrisEmployeesOneCustomMappings$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneCustomMappings$outboundSchema;
  /** @deprecated use `HrisEmployeesOneCustomMappings$Outbound` instead. */
  export type Outbound = HrisEmployeesOneCustomMappings$Outbound;
}

export function hrisEmployeesOneCustomMappingsToJSON(
  hrisEmployeesOneCustomMappings: HrisEmployeesOneCustomMappings,
): string {
  return JSON.stringify(
    HrisEmployeesOneCustomMappings$outboundSchema.parse(
      hrisEmployeesOneCustomMappings,
    ),
  );
}

export function hrisEmployeesOneCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneExtendPaths$inboundSchema: z.ZodType<
  HrisEmployeesOneExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisEmployeesOneExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisEmployeesOneExtendPaths$outboundSchema: z.ZodType<
  HrisEmployeesOneExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneExtendPaths$ {
  /** @deprecated use `HrisEmployeesOneExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneExtendPaths$inboundSchema;
  /** @deprecated use `HrisEmployeesOneExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneExtendPaths$outboundSchema;
  /** @deprecated use `HrisEmployeesOneExtendPaths$Outbound` instead. */
  export type Outbound = HrisEmployeesOneExtendPaths$Outbound;
}

export function hrisEmployeesOneExtendPathsToJSON(
  hrisEmployeesOneExtendPaths: HrisEmployeesOneExtendPaths,
): string {
  return JSON.stringify(
    HrisEmployeesOneExtendPaths$outboundSchema.parse(
      hrisEmployeesOneExtendPaths,
    ),
  );
}

export function hrisEmployeesOneExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOnePassThrough$inboundSchema: z.ZodType<
  HrisEmployeesOnePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => HrisEmployeesOneExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisEmployeesOnePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisEmployeesOneExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisEmployeesOnePassThrough$outboundSchema: z.ZodType<
  HrisEmployeesOnePassThrough$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOnePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => HrisEmployeesOneExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOnePassThrough$ {
  /** @deprecated use `HrisEmployeesOnePassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOnePassThrough$inboundSchema;
  /** @deprecated use `HrisEmployeesOnePassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOnePassThrough$outboundSchema;
  /** @deprecated use `HrisEmployeesOnePassThrough$Outbound` instead. */
  export type Outbound = HrisEmployeesOnePassThrough$Outbound;
}

export function hrisEmployeesOnePassThroughToJSON(
  hrisEmployeesOnePassThrough: HrisEmployeesOnePassThrough,
): string {
  return JSON.stringify(
    HrisEmployeesOnePassThrough$outboundSchema.parse(
      hrisEmployeesOnePassThrough,
    ),
  );
}

export function hrisEmployeesOnePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOnePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOnePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOnePassThrough' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneData$inboundSchema: z.ZodType<
  HrisEmployeesOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  display_name: z.nullable(z.string()).optional(),
  preferred_name: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  marital_status: z.nullable(z.string()).optional(),
  partner: z.lazy(() => HrisEmployeesOnePerson$inboundSchema).optional(),
  division: z.nullable(z.string()).optional(),
  division_id: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  department_id: z.nullable(z.string()).optional(),
  department_name: z.nullable(z.string()).optional(),
  team: z.nullable(z.lazy(() => HrisEmployeesOneTeam$inboundSchema)).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employment_start_date: z.nullable(z.string()).optional(),
  employment_end_date: z.nullable(z.string()).optional(),
  leaving_reason: z.nullable(HrisEmployeesOneLeavingReason$inboundSchema)
    .optional(),
  employee_number: z.nullable(z.string()).optional(),
  employment_status: z.nullable(HrisEmployeesOneEmploymentStatus$inboundSchema)
    .optional(),
  employment_role: z.lazy(() => HrisEmployeesOneEmploymentRole$inboundSchema)
    .optional(),
  ethnicity: z.nullable(z.string()).optional(),
  manager: z.lazy(() => HrisEmployeesOneManager$inboundSchema).optional(),
  direct_reports: z.nullable(z.array(z.string())).optional(),
  social_security_number: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  deceased_on: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  country_of_birth: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesOneGender$inboundSchema).optional(),
  pronouns: z.nullable(z.string()).optional(),
  preferred_language: z.nullable(z.string()).optional(),
  languages: z.array(z.string()).optional(),
  nationalities: z.array(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  record_url: z.nullable(z.string()).optional(),
  jobs: z.nullable(z.array(z.lazy(() => HrisEmployeesOneJob$inboundSchema)))
    .optional(),
  compensations: z.nullable(
    z.array(z.lazy(() => HrisEmployeesOneCompensation$inboundSchema)),
  ).optional(),
  works_remote: z.nullable(z.boolean()).optional(),
  addresses: z.array(z.lazy(() => HrisEmployeesOneAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => HrisEmployeesOnePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisEmployeesOneEmails$inboundSchema))
    .optional(),
  custom_fields: z.array(
    z.lazy(() => HrisEmployeesOneCustomFields$inboundSchema),
  ).optional(),
  social_links: z.array(z.lazy(() => HrisEmployeesOneSocialLinks$inboundSchema))
    .optional(),
  bank_accounts: z.array(
    z.lazy(() => HrisEmployeesOneBankAccounts$inboundSchema),
  ).optional(),
  tax_code: z.nullable(z.string()).optional(),
  tax_id: z.nullable(z.string()).optional(),
  dietary_preference: z.nullable(z.string()).optional(),
  food_allergies: z.nullable(z.array(z.string())).optional(),
  probation_period: z.lazy(() => HrisEmployeesOneProbationPeriod$inboundSchema)
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => HrisEmployeesOneCustomMappings$inboundSchema),
  ).optional(),
  row_version: z.nullable(z.string()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(z.lazy(() => HrisEmployeesOnePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_name": "middleName",
    "display_name": "displayName",
    "preferred_name": "preferredName",
    "marital_status": "maritalStatus",
    "division_id": "divisionId",
    "department_id": "departmentId",
    "department_name": "departmentName",
    "company_id": "companyId",
    "company_name": "companyName",
    "employment_start_date": "employmentStartDate",
    "employment_end_date": "employmentEndDate",
    "leaving_reason": "leavingReason",
    "employee_number": "employeeNumber",
    "employment_status": "employmentStatus",
    "employment_role": "employmentRole",
    "direct_reports": "directReports",
    "social_security_number": "socialSecurityNumber",
    "deceased_on": "deceasedOn",
    "country_of_birth": "countryOfBirth",
    "preferred_language": "preferredLanguage",
    "photo_url": "photoUrl",
    "source_id": "sourceId",
    "record_url": "recordUrl",
    "works_remote": "worksRemote",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "social_links": "socialLinks",
    "bank_accounts": "bankAccounts",
    "tax_code": "taxCode",
    "tax_id": "taxId",
    "dietary_preference": "dietaryPreference",
    "food_allergies": "foodAllergies",
    "probation_period": "probationPeriod",
    "custom_mappings": "customMappings",
    "row_version": "rowVersion",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisEmployeesOneData$Outbound = {
  id?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  display_name?: string | null | undefined;
  preferred_name?: string | null | undefined;
  initials?: string | null | undefined;
  salutation?: string | null | undefined;
  title?: string | null | undefined;
  marital_status?: string | null | undefined;
  partner?: HrisEmployeesOnePerson$Outbound | undefined;
  division?: string | null | undefined;
  division_id?: string | null | undefined;
  department?: string | null | undefined;
  department_id?: string | null | undefined;
  department_name?: string | null | undefined;
  team?: HrisEmployeesOneTeam$Outbound | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  employment_start_date?: string | null | undefined;
  employment_end_date?: string | null | undefined;
  leaving_reason?: string | null | undefined;
  employee_number?: string | null | undefined;
  employment_status?: string | null | undefined;
  employment_role?: HrisEmployeesOneEmploymentRole$Outbound | undefined;
  ethnicity?: string | null | undefined;
  manager?: HrisEmployeesOneManager$Outbound | undefined;
  direct_reports?: Array<string> | null | undefined;
  social_security_number?: string | null | undefined;
  birthday?: string | null | undefined;
  deceased_on?: string | null | undefined;
  country_of_birth?: string | null | undefined;
  description?: string | null | undefined;
  gender?: string | null | undefined;
  pronouns?: string | null | undefined;
  preferred_language?: string | null | undefined;
  languages?: Array<string> | undefined;
  nationalities?: Array<string> | undefined;
  photo_url?: string | null | undefined;
  timezone?: string | null | undefined;
  source?: string | null | undefined;
  source_id?: string | null | undefined;
  record_url?: string | null | undefined;
  jobs?: Array<HrisEmployeesOneJob$Outbound> | null | undefined;
  compensations?:
    | Array<HrisEmployeesOneCompensation$Outbound>
    | null
    | undefined;
  works_remote?: boolean | null | undefined;
  addresses?: Array<HrisEmployeesOneAddresses$Outbound> | undefined;
  phone_numbers?: Array<HrisEmployeesOnePhoneNumbers$Outbound> | undefined;
  emails?: Array<HrisEmployeesOneEmails$Outbound> | undefined;
  custom_fields?: Array<HrisEmployeesOneCustomFields$Outbound> | undefined;
  social_links?: Array<HrisEmployeesOneSocialLinks$Outbound> | undefined;
  bank_accounts?: Array<HrisEmployeesOneBankAccounts$Outbound> | undefined;
  tax_code?: string | null | undefined;
  tax_id?: string | null | undefined;
  dietary_preference?: string | null | undefined;
  food_allergies?: Array<string> | null | undefined;
  probation_period?: HrisEmployeesOneProbationPeriod$Outbound | undefined;
  tags?: Array<string> | null | undefined;
  custom_mappings?: HrisEmployeesOneCustomMappings$Outbound | null | undefined;
  row_version?: string | null | undefined;
  deleted?: boolean | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<HrisEmployeesOnePassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisEmployeesOneData$outboundSchema: z.ZodType<
  HrisEmployeesOneData$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneData
> = z.object({
  id: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  preferredName: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  maritalStatus: z.nullable(z.string()).optional(),
  partner: z.lazy(() => HrisEmployeesOnePerson$outboundSchema).optional(),
  division: z.nullable(z.string()).optional(),
  divisionId: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  departmentId: z.nullable(z.string()).optional(),
  departmentName: z.nullable(z.string()).optional(),
  team: z.nullable(z.lazy(() => HrisEmployeesOneTeam$outboundSchema))
    .optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employmentStartDate: z.nullable(z.string()).optional(),
  employmentEndDate: z.nullable(z.string()).optional(),
  leavingReason: z.nullable(HrisEmployeesOneLeavingReason$outboundSchema)
    .optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  employmentStatus: z.nullable(HrisEmployeesOneEmploymentStatus$outboundSchema)
    .optional(),
  employmentRole: z.lazy(() => HrisEmployeesOneEmploymentRole$outboundSchema)
    .optional(),
  ethnicity: z.nullable(z.string()).optional(),
  manager: z.lazy(() => HrisEmployeesOneManager$outboundSchema).optional(),
  directReports: z.nullable(z.array(z.string())).optional(),
  socialSecurityNumber: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  deceasedOn: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  countryOfBirth: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesOneGender$outboundSchema).optional(),
  pronouns: z.nullable(z.string()).optional(),
  preferredLanguage: z.nullable(z.string()).optional(),
  languages: z.array(z.string()).optional(),
  nationalities: z.array(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  recordUrl: z.nullable(z.string()).optional(),
  jobs: z.nullable(z.array(z.lazy(() => HrisEmployeesOneJob$outboundSchema)))
    .optional(),
  compensations: z.nullable(
    z.array(z.lazy(() => HrisEmployeesOneCompensation$outboundSchema)),
  ).optional(),
  worksRemote: z.nullable(z.boolean()).optional(),
  addresses: z.array(z.lazy(() => HrisEmployeesOneAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => HrisEmployeesOnePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisEmployeesOneEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => HrisEmployeesOneCustomFields$outboundSchema),
  ).optional(),
  socialLinks: z.array(z.lazy(() => HrisEmployeesOneSocialLinks$outboundSchema))
    .optional(),
  bankAccounts: z.array(
    z.lazy(() => HrisEmployeesOneBankAccounts$outboundSchema),
  ).optional(),
  taxCode: z.nullable(z.string()).optional(),
  taxId: z.nullable(z.string()).optional(),
  dietaryPreference: z.nullable(z.string()).optional(),
  foodAllergies: z.nullable(z.array(z.string())).optional(),
  probationPeriod: z.lazy(() => HrisEmployeesOneProbationPeriod$outboundSchema)
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customMappings: z.nullable(
    z.lazy(() => HrisEmployeesOneCustomMappings$outboundSchema),
  ).optional(),
  rowVersion: z.nullable(z.string()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(z.lazy(() => HrisEmployeesOnePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    displayName: "display_name",
    preferredName: "preferred_name",
    maritalStatus: "marital_status",
    divisionId: "division_id",
    departmentId: "department_id",
    departmentName: "department_name",
    companyId: "company_id",
    companyName: "company_name",
    employmentStartDate: "employment_start_date",
    employmentEndDate: "employment_end_date",
    leavingReason: "leaving_reason",
    employeeNumber: "employee_number",
    employmentStatus: "employment_status",
    employmentRole: "employment_role",
    directReports: "direct_reports",
    socialSecurityNumber: "social_security_number",
    deceasedOn: "deceased_on",
    countryOfBirth: "country_of_birth",
    preferredLanguage: "preferred_language",
    photoUrl: "photo_url",
    sourceId: "source_id",
    recordUrl: "record_url",
    worksRemote: "works_remote",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    socialLinks: "social_links",
    bankAccounts: "bank_accounts",
    taxCode: "tax_code",
    taxId: "tax_id",
    dietaryPreference: "dietary_preference",
    foodAllergies: "food_allergies",
    probationPeriod: "probation_period",
    customMappings: "custom_mappings",
    rowVersion: "row_version",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneData$ {
  /** @deprecated use `HrisEmployeesOneData$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneData$inboundSchema;
  /** @deprecated use `HrisEmployeesOneData$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneData$outboundSchema;
  /** @deprecated use `HrisEmployeesOneData$Outbound` instead. */
  export type Outbound = HrisEmployeesOneData$Outbound;
}

export function hrisEmployeesOneDataToJSON(
  hrisEmployeesOneData: HrisEmployeesOneData,
): string {
  return JSON.stringify(
    HrisEmployeesOneData$outboundSchema.parse(hrisEmployeesOneData),
  );
}

export function hrisEmployeesOneDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneData' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisEmployeesOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisEmployeesOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisEmployeesOneData$Outbound;
};

/** @internal */
export const HrisEmployeesOneResponseBody$outboundSchema: z.ZodType<
  HrisEmployeesOneResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisEmployeesOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneResponseBody$ {
  /** @deprecated use `HrisEmployeesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesOneResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesOneResponseBody$Outbound;
}

export function hrisEmployeesOneResponseBodyToJSON(
  hrisEmployeesOneResponseBody: HrisEmployeesOneResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeesOneResponseBody$outboundSchema.parse(
      hrisEmployeesOneResponseBody,
    ),
  );
}

export function hrisEmployeesOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesOneResponse$inboundSchema: z.ZodType<
  HrisEmployeesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisEmployeesOneResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisEmployeesOneHrisEmployeesResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisEmployeesOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisEmployeesOneResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisEmployeesOneHrisEmployeesResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisEmployeesOneResponse$outboundSchema: z.ZodType<
  HrisEmployeesOneResponse$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisEmployeesOneResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisEmployeesOneHrisEmployeesResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneResponse$ {
  /** @deprecated use `HrisEmployeesOneResponse$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneResponse$inboundSchema;
  /** @deprecated use `HrisEmployeesOneResponse$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneResponse$outboundSchema;
  /** @deprecated use `HrisEmployeesOneResponse$Outbound` instead. */
  export type Outbound = HrisEmployeesOneResponse$Outbound;
}

export function hrisEmployeesOneResponseToJSON(
  hrisEmployeesOneResponse: HrisEmployeesOneResponse,
): string {
  return JSON.stringify(
    HrisEmployeesOneResponse$outboundSchema.parse(hrisEmployeesOneResponse),
  );
}

export function hrisEmployeesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesOneResponse' from JSON`,
  );
}
