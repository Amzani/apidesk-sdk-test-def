/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivitiesAllSecurity = {
  apiKey: string;
};

/**
 * Apply filters
 */
export type ActivitiesAllQueryParamFilter = {
  /**
   * Company ID to filter on
   */
  companyId?: string | undefined;
  /**
   * Owner ID to filter on
   */
  ownerId?: string | undefined;
  /**
   * Primary contact ID to filter on
   */
  contactId?: string | undefined;
  updatedSince?: Date | undefined;
  /**
   * Type to filter on
   */
  type?: string | undefined;
};

/**
 * The field on which to sort the Activities
 */
export const ActivitiesAllQueryParamBy = {
  CreatedAt: "created_at",
  UpdatedAt: "updated_at",
} as const;
/**
 * The field on which to sort the Activities
 */
export type ActivitiesAllQueryParamBy = ClosedEnum<
  typeof ActivitiesAllQueryParamBy
>;

/**
 * The direction in which to sort the results
 */
export const ActivitiesAllQueryParamDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction in which to sort the results
 */
export type ActivitiesAllQueryParamDirection = ClosedEnum<
  typeof ActivitiesAllQueryParamDirection
>;

/**
 * Apply sorting
 */
export type ActivitiesAllQueryParamSort = {
  /**
   * The field on which to sort the Activities
   */
  by?: ActivitiesAllQueryParamBy | undefined;
  /**
   * The direction in which to sort the results
   */
  direction?: ActivitiesAllQueryParamDirection | undefined;
};

export type ActivitiesAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Apply filters
   */
  filter?: ActivitiesAllQueryParamFilter | undefined;
  /**
   * Apply sorting
   */
  sort?: ActivitiesAllQueryParamSort | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type ActivitiesAllActivitiesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The type of the activity
 */
export const ActivitiesAllType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * The type of the activity
 */
export type ActivitiesAllType = ClosedEnum<typeof ActivitiesAllType>;

/**
 * The type of address.
 */
export const ActivitiesAllActivitiesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type ActivitiesAllActivitiesType = ClosedEnum<
  typeof ActivitiesAllActivitiesType
>;

export type ActivitiesAllLocationAddress = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: ActivitiesAllActivitiesType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export const ActivitiesAllShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
export type ActivitiesAllShowAs = ClosedEnum<typeof ActivitiesAllShowAs>;

export type ActivitiesAllValue6 = {};

export type ActivitiesAllValue4 = {};

export type ActivitiesAllValue =
  | ActivitiesAllValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivitiesAllValue6>;

export type ActivitiesAllCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | ActivitiesAllValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivitiesAllValue6>
    | null
    | undefined;
};

/**
 * Status of the attendee
 */
export const ActivitiesAllStatus = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * Status of the attendee
 */
export type ActivitiesAllStatus = ClosedEnum<typeof ActivitiesAllStatus>;

export type ActivitiesAllAttendees = {
  /**
   * Unique identifier for the attendee
   */
  id?: string | null | undefined;
  /**
   * Full name of the attendee
   */
  name?: string | null | undefined;
  /**
   * First name of the attendee
   */
  firstName?: string | null | undefined;
  /**
   * Middle name of the attendee
   */
  middleName?: string | null | undefined;
  /**
   * Last name of the attendee
   */
  lastName?: string | null | undefined;
  /**
   * Prefix of the attendee
   */
  prefix?: string | null | undefined;
  /**
   * Suffix of the attendee
   */
  suffix?: string | null | undefined;
  /**
   * Email address of the attendee
   */
  emailAddress?: string | null | undefined;
  /**
   * Whether the attendee is the organizer of the activity
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * Status of the attendee
   */
  status?: ActivitiesAllStatus | null | undefined;
  /**
   * The identifier for a related user
   */
  userId?: string | null | undefined;
  /**
   * The identifier for a related contact
   */
  contactId?: string | null | undefined;
  /**
   * The last time the attendee was updated (ISO 8601)
   */
  updatedAt?: Date | null | undefined;
  /**
   * The time the attendee was created (ISO 8601)
   */
  createdAt?: Date | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type ActivitiesAllCustomMappings = {};

export type ActivitiesAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type ActivitiesAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<ActivitiesAllExtendPaths> | undefined;
};

export type ActivitiesAllData = {
  /**
   * The unique identifier of the activity
   */
  id?: string | undefined;
  /**
   * The third-party API ID of original entity
   */
  downstreamId?: string | null | undefined;
  /**
   * The date and time of the activity
   */
  activityDatetime?: string | null | undefined;
  /**
   * The duration of the activity in seconds
   */
  durationSeconds?: number | null | undefined;
  /**
   * The user related to the activity
   */
  userId?: string | null | undefined;
  /**
   * The account related to the activity
   */
  accountId?: string | null | undefined;
  /**
   * The contact related to the activity
   */
  contactId?: string | null | undefined;
  /**
   * The company related to the activity
   */
  companyId?: string | null | undefined;
  /**
   * The opportunity related to the activity
   */
  opportunityId?: string | null | undefined;
  /**
   * The lead related to the activity
   */
  leadId?: string | null | undefined;
  /**
   * The owner of the activity
   */
  ownerId?: string | null | undefined;
  /**
   * The campaign related to the activity
   */
  campaignId?: string | null | undefined;
  /**
   * The case related to the activity
   */
  caseId?: string | null | undefined;
  /**
   * The asset related to the activity
   */
  assetId?: string | null | undefined;
  /**
   * The contract related to the activity
   */
  contractId?: string | null | undefined;
  /**
   * The product related to the activity
   */
  productId?: string | null | undefined;
  /**
   * The solution related to the activity
   */
  solutionId?: string | null | undefined;
  /**
   * The custom object related to the activity
   */
  customObjectId?: string | null | undefined;
  /**
   * The type of the activity
   */
  type: ActivitiesAllType | null;
  /**
   * The title of the activity
   */
  title?: string | null | undefined;
  /**
   * A description of the activity
   */
  description?: string | null | undefined;
  /**
   * An internal note about the activity
   */
  note?: string | null | undefined;
  /**
   * The location of the activity
   */
  location?: string | null | undefined;
  locationAddress?: ActivitiesAllLocationAddress | undefined;
  /**
   * Whether the Activity is an all day event or not
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Whether the Activity is private or not
   */
  private?: boolean | null | undefined;
  /**
   * Whether the Activity is a group event or not
   */
  groupEvent?: boolean | null | undefined;
  /**
   * The sub type of the group event
   */
  eventSubType?: string | null | undefined;
  /**
   * The type of the group event
   */
  groupEventType?: string | null | undefined;
  /**
   * Whether the activity is a child of another activity or not
   */
  child?: boolean | null | undefined;
  /**
   * Whether the activity is archived or not
   */
  archived?: boolean | null | undefined;
  /**
   * Whether the activity is deleted or not
   */
  deleted?: boolean | null | undefined;
  showAs?: ActivitiesAllShowAs | null | undefined;
  /**
   * Whether the Activity is done or not
   */
  done?: boolean | null | undefined;
  /**
   * The start date and time of the activity
   */
  startDatetime?: string | null | undefined;
  /**
   * The end date and time of the activity
   */
  endDatetime?: string | null | undefined;
  /**
   * The duration of the activity in minutes
   */
  durationMinutes?: number | null | undefined;
  /**
   * The date of the activity
   */
  activityDate?: string | null | undefined;
  /**
   * The end date of the activity
   */
  endDate?: string | null | undefined;
  /**
   * Whether the activity is recurrent or not
   */
  recurrent?: boolean | undefined;
  /**
   * The date and time of the reminder
   */
  reminderDatetime?: string | null | undefined;
  /**
   * Whether the reminder is set or not
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The URL of the video conference
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * The ID of the video conference
   */
  videoConferenceId?: string | null | undefined;
  /**
   * Custom fields of the activity
   */
  customFields?: Array<ActivitiesAllCustomFields> | undefined;
  attendees?: Array<ActivitiesAllAttendees> | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: ActivitiesAllCustomMappings | null | undefined;
  /**
   * The user who last updated the activity
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the activity
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the activity was last updated
   */
  updatedAt?: string | null | undefined;
  /**
   * The date and time when the activity was created
   */
  createdAt?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<ActivitiesAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type ActivitiesAllCursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type ActivitiesAllMeta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: ActivitiesAllCursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type ActivitiesAllLinks = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Activities
 */
export type ActivitiesAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<ActivitiesAllData>;
  /**
   * Response metadata
   */
  meta?: ActivitiesAllMeta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: ActivitiesAllLinks | undefined;
};

export type ActivitiesAllResponse =
  | ActivitiesAllActivitiesResponseBody
  | ActivitiesAllResponseBody;

/** @internal */
export const ActivitiesAllSecurity$inboundSchema: z.ZodType<
  ActivitiesAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ActivitiesAllSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ActivitiesAllSecurity$outboundSchema: z.ZodType<
  ActivitiesAllSecurity$Outbound,
  z.ZodTypeDef,
  ActivitiesAllSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllSecurity$ {
  /** @deprecated use `ActivitiesAllSecurity$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllSecurity$inboundSchema;
  /** @deprecated use `ActivitiesAllSecurity$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllSecurity$outboundSchema;
  /** @deprecated use `ActivitiesAllSecurity$Outbound` instead. */
  export type Outbound = ActivitiesAllSecurity$Outbound;
}

export function activitiesAllSecurityToJSON(
  activitiesAllSecurity: ActivitiesAllSecurity,
): string {
  return JSON.stringify(
    ActivitiesAllSecurity$outboundSchema.parse(activitiesAllSecurity),
  );
}

export function activitiesAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllSecurity' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllQueryParamFilter$inboundSchema: z.ZodType<
  ActivitiesAllQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string().optional(),
  owner_id: z.string().optional(),
  contact_id: z.string().optional(),
  updated_since: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "owner_id": "ownerId",
    "contact_id": "contactId",
    "updated_since": "updatedSince",
  });
});

/** @internal */
export type ActivitiesAllQueryParamFilter$Outbound = {
  company_id?: string | undefined;
  owner_id?: string | undefined;
  contact_id?: string | undefined;
  updated_since?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ActivitiesAllQueryParamFilter$outboundSchema: z.ZodType<
  ActivitiesAllQueryParamFilter$Outbound,
  z.ZodTypeDef,
  ActivitiesAllQueryParamFilter
> = z.object({
  companyId: z.string().optional(),
  ownerId: z.string().optional(),
  contactId: z.string().optional(),
  updatedSince: z.date().transform(v => v.toISOString()).optional(),
  type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    ownerId: "owner_id",
    contactId: "contact_id",
    updatedSince: "updated_since",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllQueryParamFilter$ {
  /** @deprecated use `ActivitiesAllQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllQueryParamFilter$inboundSchema;
  /** @deprecated use `ActivitiesAllQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllQueryParamFilter$outboundSchema;
  /** @deprecated use `ActivitiesAllQueryParamFilter$Outbound` instead. */
  export type Outbound = ActivitiesAllQueryParamFilter$Outbound;
}

export function activitiesAllQueryParamFilterToJSON(
  activitiesAllQueryParamFilter: ActivitiesAllQueryParamFilter,
): string {
  return JSON.stringify(
    ActivitiesAllQueryParamFilter$outboundSchema.parse(
      activitiesAllQueryParamFilter,
    ),
  );
}

export function activitiesAllQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllQueryParamBy$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllQueryParamBy
> = z.nativeEnum(ActivitiesAllQueryParamBy);

/** @internal */
export const ActivitiesAllQueryParamBy$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllQueryParamBy
> = ActivitiesAllQueryParamBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllQueryParamBy$ {
  /** @deprecated use `ActivitiesAllQueryParamBy$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllQueryParamBy$inboundSchema;
  /** @deprecated use `ActivitiesAllQueryParamBy$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllQueryParamBy$outboundSchema;
}

/** @internal */
export const ActivitiesAllQueryParamDirection$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllQueryParamDirection
> = z.nativeEnum(ActivitiesAllQueryParamDirection);

/** @internal */
export const ActivitiesAllQueryParamDirection$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllQueryParamDirection
> = ActivitiesAllQueryParamDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllQueryParamDirection$ {
  /** @deprecated use `ActivitiesAllQueryParamDirection$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllQueryParamDirection$inboundSchema;
  /** @deprecated use `ActivitiesAllQueryParamDirection$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllQueryParamDirection$outboundSchema;
}

/** @internal */
export const ActivitiesAllQueryParamSort$inboundSchema: z.ZodType<
  ActivitiesAllQueryParamSort,
  z.ZodTypeDef,
  unknown
> = z.object({
  by: ActivitiesAllQueryParamBy$inboundSchema.optional(),
  direction: ActivitiesAllQueryParamDirection$inboundSchema.default("asc"),
});

/** @internal */
export type ActivitiesAllQueryParamSort$Outbound = {
  by?: string | undefined;
  direction: string;
};

/** @internal */
export const ActivitiesAllQueryParamSort$outboundSchema: z.ZodType<
  ActivitiesAllQueryParamSort$Outbound,
  z.ZodTypeDef,
  ActivitiesAllQueryParamSort
> = z.object({
  by: ActivitiesAllQueryParamBy$outboundSchema.optional(),
  direction: ActivitiesAllQueryParamDirection$outboundSchema.default("asc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllQueryParamSort$ {
  /** @deprecated use `ActivitiesAllQueryParamSort$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllQueryParamSort$inboundSchema;
  /** @deprecated use `ActivitiesAllQueryParamSort$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllQueryParamSort$outboundSchema;
  /** @deprecated use `ActivitiesAllQueryParamSort$Outbound` instead. */
  export type Outbound = ActivitiesAllQueryParamSort$Outbound;
}

export function activitiesAllQueryParamSortToJSON(
  activitiesAllQueryParamSort: ActivitiesAllQueryParamSort,
): string {
  return JSON.stringify(
    ActivitiesAllQueryParamSort$outboundSchema.parse(
      activitiesAllQueryParamSort,
    ),
  );
}

export function activitiesAllQueryParamSortFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllQueryParamSort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllQueryParamSort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllQueryParamSort' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllRequest$inboundSchema: z.ZodType<
  ActivitiesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => ActivitiesAllQueryParamFilter$inboundSchema).optional(),
  sort: z.lazy(() => ActivitiesAllQueryParamSort$inboundSchema).optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ActivitiesAllRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: ActivitiesAllQueryParamFilter$Outbound | undefined;
  sort?: ActivitiesAllQueryParamSort$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const ActivitiesAllRequest$outboundSchema: z.ZodType<
  ActivitiesAllRequest$Outbound,
  z.ZodTypeDef,
  ActivitiesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => ActivitiesAllQueryParamFilter$outboundSchema).optional(),
  sort: z.lazy(() => ActivitiesAllQueryParamSort$outboundSchema).optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllRequest$ {
  /** @deprecated use `ActivitiesAllRequest$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllRequest$inboundSchema;
  /** @deprecated use `ActivitiesAllRequest$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllRequest$outboundSchema;
  /** @deprecated use `ActivitiesAllRequest$Outbound` instead. */
  export type Outbound = ActivitiesAllRequest$Outbound;
}

export function activitiesAllRequestToJSON(
  activitiesAllRequest: ActivitiesAllRequest,
): string {
  return JSON.stringify(
    ActivitiesAllRequest$outboundSchema.parse(activitiesAllRequest),
  );
}

export function activitiesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllRequest' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllDetail$inboundSchema: z.ZodType<
  ActivitiesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ActivitiesAllDetail$outboundSchema: z.ZodType<
  ActivitiesAllDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllDetail$ {
  /** @deprecated use `ActivitiesAllDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllDetail$inboundSchema;
  /** @deprecated use `ActivitiesAllDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllDetail$outboundSchema;
  /** @deprecated use `ActivitiesAllDetail$Outbound` instead. */
  export type Outbound = ActivitiesAllDetail$Outbound;
}

export function activitiesAllDetailToJSON(
  activitiesAllDetail: ActivitiesAllDetail,
): string {
  return JSON.stringify(
    ActivitiesAllDetail$outboundSchema.parse(activitiesAllDetail),
  );
}

export function activitiesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllActivitiesResponseBody$inboundSchema: z.ZodType<
  ActivitiesAllActivitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type ActivitiesAllActivitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAllActivitiesResponseBody$outboundSchema: z.ZodType<
  ActivitiesAllActivitiesResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesAllActivitiesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllActivitiesResponseBody$ {
  /** @deprecated use `ActivitiesAllActivitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAllActivitiesResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAllActivitiesResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesAllActivitiesResponseBody$Outbound;
}

export function activitiesAllActivitiesResponseBodyToJSON(
  activitiesAllActivitiesResponseBody: ActivitiesAllActivitiesResponseBody,
): string {
  return JSON.stringify(
    ActivitiesAllActivitiesResponseBody$outboundSchema.parse(
      activitiesAllActivitiesResponseBody,
    ),
  );
}

export function activitiesAllActivitiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllActivitiesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesAllActivitiesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllActivitiesResponseBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllType$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllType
> = z.nativeEnum(ActivitiesAllType);

/** @internal */
export const ActivitiesAllType$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllType
> = ActivitiesAllType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllType$ {
  /** @deprecated use `ActivitiesAllType$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllType$inboundSchema;
  /** @deprecated use `ActivitiesAllType$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllType$outboundSchema;
}

/** @internal */
export const ActivitiesAllActivitiesType$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllActivitiesType
> = z.nativeEnum(ActivitiesAllActivitiesType);

/** @internal */
export const ActivitiesAllActivitiesType$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllActivitiesType
> = ActivitiesAllActivitiesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllActivitiesType$ {
  /** @deprecated use `ActivitiesAllActivitiesType$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllActivitiesType$inboundSchema;
  /** @deprecated use `ActivitiesAllActivitiesType$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllActivitiesType$outboundSchema;
}

/** @internal */
export const ActivitiesAllLocationAddress$inboundSchema: z.ZodType<
  ActivitiesAllLocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesAllActivitiesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ActivitiesAllLocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ActivitiesAllLocationAddress$outboundSchema: z.ZodType<
  ActivitiesAllLocationAddress$Outbound,
  z.ZodTypeDef,
  ActivitiesAllLocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesAllActivitiesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllLocationAddress$ {
  /** @deprecated use `ActivitiesAllLocationAddress$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllLocationAddress$inboundSchema;
  /** @deprecated use `ActivitiesAllLocationAddress$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllLocationAddress$outboundSchema;
  /** @deprecated use `ActivitiesAllLocationAddress$Outbound` instead. */
  export type Outbound = ActivitiesAllLocationAddress$Outbound;
}

export function activitiesAllLocationAddressToJSON(
  activitiesAllLocationAddress: ActivitiesAllLocationAddress,
): string {
  return JSON.stringify(
    ActivitiesAllLocationAddress$outboundSchema.parse(
      activitiesAllLocationAddress,
    ),
  );
}

export function activitiesAllLocationAddressFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllLocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllLocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllLocationAddress' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllShowAs$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllShowAs
> = z.nativeEnum(ActivitiesAllShowAs);

/** @internal */
export const ActivitiesAllShowAs$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllShowAs
> = ActivitiesAllShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllShowAs$ {
  /** @deprecated use `ActivitiesAllShowAs$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllShowAs$inboundSchema;
  /** @deprecated use `ActivitiesAllShowAs$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllShowAs$outboundSchema;
}

/** @internal */
export const ActivitiesAllValue6$inboundSchema: z.ZodType<
  ActivitiesAllValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivitiesAllValue6$Outbound = {};

/** @internal */
export const ActivitiesAllValue6$outboundSchema: z.ZodType<
  ActivitiesAllValue6$Outbound,
  z.ZodTypeDef,
  ActivitiesAllValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllValue6$ {
  /** @deprecated use `ActivitiesAllValue6$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllValue6$inboundSchema;
  /** @deprecated use `ActivitiesAllValue6$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllValue6$outboundSchema;
  /** @deprecated use `ActivitiesAllValue6$Outbound` instead. */
  export type Outbound = ActivitiesAllValue6$Outbound;
}

export function activitiesAllValue6ToJSON(
  activitiesAllValue6: ActivitiesAllValue6,
): string {
  return JSON.stringify(
    ActivitiesAllValue6$outboundSchema.parse(activitiesAllValue6),
  );
}

export function activitiesAllValue6FromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllValue6' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllValue4$inboundSchema: z.ZodType<
  ActivitiesAllValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivitiesAllValue4$Outbound = {};

/** @internal */
export const ActivitiesAllValue4$outboundSchema: z.ZodType<
  ActivitiesAllValue4$Outbound,
  z.ZodTypeDef,
  ActivitiesAllValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllValue4$ {
  /** @deprecated use `ActivitiesAllValue4$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllValue4$inboundSchema;
  /** @deprecated use `ActivitiesAllValue4$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllValue4$outboundSchema;
  /** @deprecated use `ActivitiesAllValue4$Outbound` instead. */
  export type Outbound = ActivitiesAllValue4$Outbound;
}

export function activitiesAllValue4ToJSON(
  activitiesAllValue4: ActivitiesAllValue4,
): string {
  return JSON.stringify(
    ActivitiesAllValue4$outboundSchema.parse(activitiesAllValue4),
  );
}

export function activitiesAllValue4FromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllValue4' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllValue$inboundSchema: z.ZodType<
  ActivitiesAllValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivitiesAllValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivitiesAllValue6$inboundSchema)),
]);

/** @internal */
export type ActivitiesAllValue$Outbound =
  | ActivitiesAllValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivitiesAllValue6$Outbound>;

/** @internal */
export const ActivitiesAllValue$outboundSchema: z.ZodType<
  ActivitiesAllValue$Outbound,
  z.ZodTypeDef,
  ActivitiesAllValue
> = z.union([
  z.lazy(() => ActivitiesAllValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivitiesAllValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllValue$ {
  /** @deprecated use `ActivitiesAllValue$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllValue$inboundSchema;
  /** @deprecated use `ActivitiesAllValue$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllValue$outboundSchema;
  /** @deprecated use `ActivitiesAllValue$Outbound` instead. */
  export type Outbound = ActivitiesAllValue$Outbound;
}

export function activitiesAllValueToJSON(
  activitiesAllValue: ActivitiesAllValue,
): string {
  return JSON.stringify(
    ActivitiesAllValue$outboundSchema.parse(activitiesAllValue),
  );
}

export function activitiesAllValueFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllValue' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllCustomFields$inboundSchema: z.ZodType<
  ActivitiesAllCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivitiesAllValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivitiesAllValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ActivitiesAllCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ActivitiesAllValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivitiesAllValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ActivitiesAllCustomFields$outboundSchema: z.ZodType<
  ActivitiesAllCustomFields$Outbound,
  z.ZodTypeDef,
  ActivitiesAllCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivitiesAllValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivitiesAllValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllCustomFields$ {
  /** @deprecated use `ActivitiesAllCustomFields$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllCustomFields$inboundSchema;
  /** @deprecated use `ActivitiesAllCustomFields$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllCustomFields$outboundSchema;
  /** @deprecated use `ActivitiesAllCustomFields$Outbound` instead. */
  export type Outbound = ActivitiesAllCustomFields$Outbound;
}

export function activitiesAllCustomFieldsToJSON(
  activitiesAllCustomFields: ActivitiesAllCustomFields,
): string {
  return JSON.stringify(
    ActivitiesAllCustomFields$outboundSchema.parse(activitiesAllCustomFields),
  );
}

export function activitiesAllCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllCustomFields' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllStatus$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllStatus
> = z.nativeEnum(ActivitiesAllStatus);

/** @internal */
export const ActivitiesAllStatus$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAllStatus
> = ActivitiesAllStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllStatus$ {
  /** @deprecated use `ActivitiesAllStatus$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllStatus$inboundSchema;
  /** @deprecated use `ActivitiesAllStatus$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllStatus$outboundSchema;
}

/** @internal */
export const ActivitiesAllAttendees$inboundSchema: z.ZodType<
  ActivitiesAllAttendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ActivitiesAllStatus$inboundSchema).optional(),
  user_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
    "user_id": "userId",
    "contact_id": "contactId",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
  });
});

/** @internal */
export type ActivitiesAllAttendees$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
  user_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const ActivitiesAllAttendees$outboundSchema: z.ZodType<
  ActivitiesAllAttendees$Outbound,
  z.ZodTypeDef,
  ActivitiesAllAttendees
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ActivitiesAllStatus$outboundSchema).optional(),
  userId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
    userId: "user_id",
    contactId: "contact_id",
    updatedAt: "updated_at",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllAttendees$ {
  /** @deprecated use `ActivitiesAllAttendees$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllAttendees$inboundSchema;
  /** @deprecated use `ActivitiesAllAttendees$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllAttendees$outboundSchema;
  /** @deprecated use `ActivitiesAllAttendees$Outbound` instead. */
  export type Outbound = ActivitiesAllAttendees$Outbound;
}

export function activitiesAllAttendeesToJSON(
  activitiesAllAttendees: ActivitiesAllAttendees,
): string {
  return JSON.stringify(
    ActivitiesAllAttendees$outboundSchema.parse(activitiesAllAttendees),
  );
}

export function activitiesAllAttendeesFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllAttendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllAttendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllAttendees' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllCustomMappings$inboundSchema: z.ZodType<
  ActivitiesAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivitiesAllCustomMappings$Outbound = {};

/** @internal */
export const ActivitiesAllCustomMappings$outboundSchema: z.ZodType<
  ActivitiesAllCustomMappings$Outbound,
  z.ZodTypeDef,
  ActivitiesAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllCustomMappings$ {
  /** @deprecated use `ActivitiesAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllCustomMappings$inboundSchema;
  /** @deprecated use `ActivitiesAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllCustomMappings$outboundSchema;
  /** @deprecated use `ActivitiesAllCustomMappings$Outbound` instead. */
  export type Outbound = ActivitiesAllCustomMappings$Outbound;
}

export function activitiesAllCustomMappingsToJSON(
  activitiesAllCustomMappings: ActivitiesAllCustomMappings,
): string {
  return JSON.stringify(
    ActivitiesAllCustomMappings$outboundSchema.parse(
      activitiesAllCustomMappings,
    ),
  );
}

export function activitiesAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllExtendPaths$inboundSchema: z.ZodType<
  ActivitiesAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ActivitiesAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ActivitiesAllExtendPaths$outboundSchema: z.ZodType<
  ActivitiesAllExtendPaths$Outbound,
  z.ZodTypeDef,
  ActivitiesAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllExtendPaths$ {
  /** @deprecated use `ActivitiesAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllExtendPaths$inboundSchema;
  /** @deprecated use `ActivitiesAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllExtendPaths$outboundSchema;
  /** @deprecated use `ActivitiesAllExtendPaths$Outbound` instead. */
  export type Outbound = ActivitiesAllExtendPaths$Outbound;
}

export function activitiesAllExtendPathsToJSON(
  activitiesAllExtendPaths: ActivitiesAllExtendPaths,
): string {
  return JSON.stringify(
    ActivitiesAllExtendPaths$outboundSchema.parse(activitiesAllExtendPaths),
  );
}

export function activitiesAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllPassThrough$inboundSchema: z.ZodType<
  ActivitiesAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ActivitiesAllExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ActivitiesAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ActivitiesAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ActivitiesAllPassThrough$outboundSchema: z.ZodType<
  ActivitiesAllPassThrough$Outbound,
  z.ZodTypeDef,
  ActivitiesAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ActivitiesAllExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllPassThrough$ {
  /** @deprecated use `ActivitiesAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllPassThrough$inboundSchema;
  /** @deprecated use `ActivitiesAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllPassThrough$outboundSchema;
  /** @deprecated use `ActivitiesAllPassThrough$Outbound` instead. */
  export type Outbound = ActivitiesAllPassThrough$Outbound;
}

export function activitiesAllPassThroughToJSON(
  activitiesAllPassThrough: ActivitiesAllPassThrough,
): string {
  return JSON.stringify(
    ActivitiesAllPassThrough$outboundSchema.parse(activitiesAllPassThrough),
  );
}

export function activitiesAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllPassThrough' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllData$inboundSchema: z.ZodType<
  ActivitiesAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  downstream_id: z.nullable(z.string()).optional(),
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesAllType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() => ActivitiesAllLocationAddress$inboundSchema)
    .optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(ActivitiesAllShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  duration_minutes: z.nullable(z.number().int()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(z.lazy(() => ActivitiesAllCustomFields$inboundSchema))
    .optional(),
  attendees: z.array(z.lazy(() => ActivitiesAllAttendees$inboundSchema))
    .optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ActivitiesAllCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => ActivitiesAllPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "downstream_id": "downstreamId",
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "duration_minutes": "durationMinutes",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ActivitiesAllData$Outbound = {
  id?: string | undefined;
  downstream_id?: string | null | undefined;
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: ActivitiesAllLocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  duration_minutes?: number | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<ActivitiesAllCustomFields$Outbound> | undefined;
  attendees?: Array<ActivitiesAllAttendees$Outbound> | undefined;
  custom_mappings?: ActivitiesAllCustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ActivitiesAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const ActivitiesAllData$outboundSchema: z.ZodType<
  ActivitiesAllData$Outbound,
  z.ZodTypeDef,
  ActivitiesAllData
> = z.object({
  id: z.string().optional(),
  downstreamId: z.nullable(z.string()).optional(),
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesAllType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() => ActivitiesAllLocationAddress$outboundSchema)
    .optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(ActivitiesAllShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  durationMinutes: z.nullable(z.number().int()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(z.lazy(() => ActivitiesAllCustomFields$outboundSchema))
    .optional(),
  attendees: z.array(z.lazy(() => ActivitiesAllAttendees$outboundSchema))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => ActivitiesAllCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => ActivitiesAllPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    downstreamId: "downstream_id",
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    durationMinutes: "duration_minutes",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllData$ {
  /** @deprecated use `ActivitiesAllData$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllData$inboundSchema;
  /** @deprecated use `ActivitiesAllData$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllData$outboundSchema;
  /** @deprecated use `ActivitiesAllData$Outbound` instead. */
  export type Outbound = ActivitiesAllData$Outbound;
}

export function activitiesAllDataToJSON(
  activitiesAllData: ActivitiesAllData,
): string {
  return JSON.stringify(
    ActivitiesAllData$outboundSchema.parse(activitiesAllData),
  );
}

export function activitiesAllDataFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllData' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllCursors$inboundSchema: z.ZodType<
  ActivitiesAllCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ActivitiesAllCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ActivitiesAllCursors$outboundSchema: z.ZodType<
  ActivitiesAllCursors$Outbound,
  z.ZodTypeDef,
  ActivitiesAllCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllCursors$ {
  /** @deprecated use `ActivitiesAllCursors$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllCursors$inboundSchema;
  /** @deprecated use `ActivitiesAllCursors$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllCursors$outboundSchema;
  /** @deprecated use `ActivitiesAllCursors$Outbound` instead. */
  export type Outbound = ActivitiesAllCursors$Outbound;
}

export function activitiesAllCursorsToJSON(
  activitiesAllCursors: ActivitiesAllCursors,
): string {
  return JSON.stringify(
    ActivitiesAllCursors$outboundSchema.parse(activitiesAllCursors),
  );
}

export function activitiesAllCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllCursors' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllMeta$inboundSchema: z.ZodType<
  ActivitiesAllMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ActivitiesAllCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ActivitiesAllMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ActivitiesAllCursors$Outbound | undefined;
};

/** @internal */
export const ActivitiesAllMeta$outboundSchema: z.ZodType<
  ActivitiesAllMeta$Outbound,
  z.ZodTypeDef,
  ActivitiesAllMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ActivitiesAllCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllMeta$ {
  /** @deprecated use `ActivitiesAllMeta$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllMeta$inboundSchema;
  /** @deprecated use `ActivitiesAllMeta$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllMeta$outboundSchema;
  /** @deprecated use `ActivitiesAllMeta$Outbound` instead. */
  export type Outbound = ActivitiesAllMeta$Outbound;
}

export function activitiesAllMetaToJSON(
  activitiesAllMeta: ActivitiesAllMeta,
): string {
  return JSON.stringify(
    ActivitiesAllMeta$outboundSchema.parse(activitiesAllMeta),
  );
}

export function activitiesAllMetaFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllMeta' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllLinks$inboundSchema: z.ZodType<
  ActivitiesAllLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ActivitiesAllLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ActivitiesAllLinks$outboundSchema: z.ZodType<
  ActivitiesAllLinks$Outbound,
  z.ZodTypeDef,
  ActivitiesAllLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllLinks$ {
  /** @deprecated use `ActivitiesAllLinks$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllLinks$inboundSchema;
  /** @deprecated use `ActivitiesAllLinks$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllLinks$outboundSchema;
  /** @deprecated use `ActivitiesAllLinks$Outbound` instead. */
  export type Outbound = ActivitiesAllLinks$Outbound;
}

export function activitiesAllLinksToJSON(
  activitiesAllLinks: ActivitiesAllLinks,
): string {
  return JSON.stringify(
    ActivitiesAllLinks$outboundSchema.parse(activitiesAllLinks),
  );
}

export function activitiesAllLinksFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllLinks' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllResponseBody$inboundSchema: z.ZodType<
  ActivitiesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ActivitiesAllData$inboundSchema)),
  meta: z.lazy(() => ActivitiesAllMeta$inboundSchema).optional(),
  links: z.lazy(() => ActivitiesAllLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ActivitiesAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ActivitiesAllData$Outbound>;
  meta?: ActivitiesAllMeta$Outbound | undefined;
  links?: ActivitiesAllLinks$Outbound | undefined;
};

/** @internal */
export const ActivitiesAllResponseBody$outboundSchema: z.ZodType<
  ActivitiesAllResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ActivitiesAllData$outboundSchema)),
  meta: z.lazy(() => ActivitiesAllMeta$outboundSchema).optional(),
  links: z.lazy(() => ActivitiesAllLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllResponseBody$ {
  /** @deprecated use `ActivitiesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAllResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesAllResponseBody$Outbound;
}

export function activitiesAllResponseBodyToJSON(
  activitiesAllResponseBody: ActivitiesAllResponseBody,
): string {
  return JSON.stringify(
    ActivitiesAllResponseBody$outboundSchema.parse(activitiesAllResponseBody),
  );
}

export function activitiesAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllResponseBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesAllResponse$inboundSchema: z.ZodType<
  ActivitiesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivitiesAllActivitiesResponseBody$inboundSchema),
  z.lazy(() => ActivitiesAllResponseBody$inboundSchema),
]);

/** @internal */
export type ActivitiesAllResponse$Outbound =
  | ActivitiesAllActivitiesResponseBody$Outbound
  | ActivitiesAllResponseBody$Outbound;

/** @internal */
export const ActivitiesAllResponse$outboundSchema: z.ZodType<
  ActivitiesAllResponse$Outbound,
  z.ZodTypeDef,
  ActivitiesAllResponse
> = z.union([
  z.lazy(() => ActivitiesAllActivitiesResponseBody$outboundSchema),
  z.lazy(() => ActivitiesAllResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAllResponse$ {
  /** @deprecated use `ActivitiesAllResponse$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAllResponse$inboundSchema;
  /** @deprecated use `ActivitiesAllResponse$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAllResponse$outboundSchema;
  /** @deprecated use `ActivitiesAllResponse$Outbound` instead. */
  export type Outbound = ActivitiesAllResponse$Outbound;
}

export function activitiesAllResponseToJSON(
  activitiesAllResponse: ActivitiesAllResponse,
): string {
  return JSON.stringify(
    ActivitiesAllResponse$outboundSchema.parse(activitiesAllResponse),
  );
}

export function activitiesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAllResponse' from JSON`,
  );
}
