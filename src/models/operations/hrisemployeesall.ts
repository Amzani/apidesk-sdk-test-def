/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisEmployeesAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

/**
 * Employment status to filter on
 */
export const QueryParamEmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * Employment status to filter on
 */
export type QueryParamEmploymentStatus = ClosedEnum<
  typeof QueryParamEmploymentStatus
>;

/**
 * Apply filters
 */
export type Filter = {
  /**
   * Company ID to filter on
   */
  companyId?: string | undefined;
  /**
   * Email to filter on
   */
  email?: string | undefined;
  /**
   * First Name to filter on
   */
  firstName?: string | undefined;
  /**
   * Job title to filter on
   */
  title?: string | undefined;
  /**
   * Last Name to filter on
   */
  lastName?: string | undefined;
  /**
   * Manager id to filter on
   */
  managerId?: string | undefined;
  /**
   * Employment status to filter on
   */
  employmentStatus?: QueryParamEmploymentStatus | undefined;
  /**
   * Employee number to filter on
   */
  employeeNumber?: string | undefined;
  /**
   * ID of the department to filter on
   */
  departmentId?: string | undefined;
};

/**
 * The field on which to sort the Employees
 */
export const By = {
  FirstName: "first_name",
  LastName: "last_name",
  CreatedAt: "created_at",
  UpdatedAt: "updated_at",
} as const;
/**
 * The field on which to sort the Employees
 */
export type By = ClosedEnum<typeof By>;

/**
 * The direction in which to sort the results
 */
export const Direction = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction in which to sort the results
 */
export type Direction = ClosedEnum<typeof Direction>;

/**
 * Apply sorting
 */
export type Sort = {
  /**
   * The field on which to sort the Employees
   */
  by?: By | undefined;
  /**
   * The direction in which to sort the results
   */
  direction?: Direction | undefined;
};

export type HrisEmployeesAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Apply filters
   */
  filter?: Filter | undefined;
  /**
   * Apply sorting
   */
  sort?: Sort | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type Detail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisEmployeesAllHrisEmployeesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The gender represents the gender identity of a person.
 */
export const HrisEmployeesAllHrisEmployeesGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The gender represents the gender identity of a person.
 */
export type HrisEmployeesAllHrisEmployeesGender = ClosedEnum<
  typeof HrisEmployeesAllHrisEmployeesGender
>;

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisEmployeesAllCustomMappings = {};

export type HrisEmployeesAllPerson = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The gender represents the gender identity of a person.
   */
  gender?: HrisEmployeesAllHrisEmployeesGender | null | undefined;
  /**
   * Initials of the person
   */
  initials?: string | null | undefined;
  /**
   * Date of birth
   */
  birthday?: RFCDate | null | undefined;
  /**
   * Date of death
   */
  deceasedOn?: RFCDate | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: HrisEmployeesAllCustomMappings | null | undefined;
};

/**
 * The team the person is currently in.
 */
export type HrisEmployeesAllTeam = {
  /**
   * The unique identifier of the team.
   */
  id?: string | null | undefined;
  /**
   * The name of the team.
   */
  name?: string | null | undefined;
};

/**
 * The reason because the employment ended.
 */
export const HrisEmployeesAllLeavingReason = {
  Dismissed: "dismissed",
  Resigned: "resigned",
  Redundancy: "redundancy",
  Other: "other",
} as const;
/**
 * The reason because the employment ended.
 */
export type HrisEmployeesAllLeavingReason = ClosedEnum<
  typeof HrisEmployeesAllLeavingReason
>;

/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export const HrisEmployeesAllEmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export type HrisEmployeesAllEmploymentStatus = ClosedEnum<
  typeof HrisEmployeesAllEmploymentStatus
>;

/**
 * The type of employment relationship the employee has with the organization.
 */
export const HrisEmployeesAllEmploymentType = {
  Contractor: "contractor",
  Employee: "employee",
  Freelance: "freelance",
  Temp: "temp",
  Internship: "internship",
  Other: "other",
} as const;
/**
 * The type of employment relationship the employee has with the organization.
 */
export type HrisEmployeesAllEmploymentType = ClosedEnum<
  typeof HrisEmployeesAllEmploymentType
>;

/**
 * The work schedule of the employee.
 */
export const HrisEmployeesAllEmploymentSubType = {
  FullTime: "full_time",
  PartTime: "part_time",
  Hourly: "hourly",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The work schedule of the employee.
 */
export type HrisEmployeesAllEmploymentSubType = ClosedEnum<
  typeof HrisEmployeesAllEmploymentSubType
>;

export type HrisEmployeesAllEmploymentRole = {
  /**
   * The type of employment relationship the employee has with the organization.
   */
  type?: HrisEmployeesAllEmploymentType | null | undefined;
  /**
   * The work schedule of the employee.
   */
  subType?: HrisEmployeesAllEmploymentSubType | null | undefined;
};

/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export const HrisEmployeesAllHrisEmployeesEmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export type HrisEmployeesAllHrisEmployeesEmploymentStatus = ClosedEnum<
  typeof HrisEmployeesAllHrisEmployeesEmploymentStatus
>;

export type HrisEmployeesAllManager = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The name of the manager, often a combination of their first and last names.
   */
  name?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * The email address of the manager.
   */
  email?: string | null | undefined;
  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  employmentStatus?:
    | HrisEmployeesAllHrisEmployeesEmploymentStatus
    | null
    | undefined;
};

/**
 * The gender represents the gender identity of a person.
 */
export const HrisEmployeesAllGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The gender represents the gender identity of a person.
 */
export type HrisEmployeesAllGender = ClosedEnum<typeof HrisEmployeesAllGender>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesAllHrisEmployeesResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesAllHrisEmployeesResponseCurrency = ClosedEnum<
  typeof HrisEmployeesAllHrisEmployeesResponseCurrency
>;

/**
 * Unit of measurement for employee compensation.
 */
export const HrisEmployeesAllHrisEmployeesPaymentUnit = {
  Hour: "hour",
  Week: "week",
  Month: "month",
  Year: "year",
  Paycheck: "paycheck",
  Other: "other",
} as const;
/**
 * Unit of measurement for employee compensation.
 */
export type HrisEmployeesAllHrisEmployeesPaymentUnit = ClosedEnum<
  typeof HrisEmployeesAllHrisEmployeesPaymentUnit
>;

/**
 * Indicates the status of the job.
 */
export const HrisEmployeesAllStatus = {
  Active: "active",
  Inactive: "inactive",
  Other: "other",
} as const;
/**
 * Indicates the status of the job.
 */
export type HrisEmployeesAllStatus = ClosedEnum<typeof HrisEmployeesAllStatus>;

/**
 * The type of address.
 */
export const HrisEmployeesAllHrisEmployeesResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisEmployeesAllHrisEmployeesResponse200Type = ClosedEnum<
  typeof HrisEmployeesAllHrisEmployeesResponse200Type
>;

export type HrisEmployeesAllLocation = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisEmployeesAllHrisEmployeesResponse200Type | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type HrisEmployeesAllJob = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * A unique identifier for an object.
   */
  employeeId?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The position and responsibilities of the person within the organization.
   */
  role?: string | null | undefined;
  /**
   * The date on which the employee starts working in their current job role.
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The date on which the employee leaves or is expected to leave their current job role.
   */
  endDate?: RFCDate | null | undefined;
  /**
   * The rate of pay for the employee in their current job role.
   */
  compensationRate?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesAllHrisEmployeesResponseCurrency | null | undefined;
  /**
   * Unit of measurement for employee compensation.
   */
  paymentUnit?: HrisEmployeesAllHrisEmployeesPaymentUnit | null | undefined;
  /**
   * The date on which the employee was hired by the organization
   */
  hiredAt?: RFCDate | null | undefined;
  /**
   * Indicates whether this the employee's primary job.
   */
  isPrimary?: boolean | null | undefined;
  /**
   * Indicates whether this the employee has a manager role.
   */
  isManager?: boolean | null | undefined;
  /**
   * Indicates the status of the job.
   */
  status?: HrisEmployeesAllStatus | null | undefined;
  location?: HrisEmployeesAllLocation | undefined;
};

/**
 * Unit of measurement for employee compensation.
 */
export const HrisEmployeesAllPaymentUnit = {
  Hour: "hour",
  Week: "week",
  Month: "month",
  Year: "year",
  Paycheck: "paycheck",
  Other: "other",
} as const;
/**
 * Unit of measurement for employee compensation.
 */
export type HrisEmployeesAllPaymentUnit = ClosedEnum<
  typeof HrisEmployeesAllPaymentUnit
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesAllCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesAllCurrency = ClosedEnum<
  typeof HrisEmployeesAllCurrency
>;

/**
 * The FLSA status for this compensation.
 */
export const HrisEmployeesAllFlsaStatus = {
  Exempt: "exempt",
  SalariedNonexempt: "salaried-nonexempt",
  Nonexempt: "nonexempt",
  Owner: "owner",
  Other: "other",
} as const;
/**
 * The FLSA status for this compensation.
 */
export type HrisEmployeesAllFlsaStatus = ClosedEnum<
  typeof HrisEmployeesAllFlsaStatus
>;

/**
 * Frequency of employee compensation.
 */
export const HrisEmployeesAllPaymentFrequency = {
  Weekly: "weekly",
  Biweekly: "biweekly",
  Monthly: "monthly",
  ProRata: "pro-rata",
  Other: "other",
} as const;
/**
 * Frequency of employee compensation.
 */
export type HrisEmployeesAllPaymentFrequency = ClosedEnum<
  typeof HrisEmployeesAllPaymentFrequency
>;

export type HrisEmployeesAllCompensation = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The ID of the job to which the compensation belongs.
   */
  jobId?: string | null | undefined;
  /**
   * The amount paid per payment unit.
   */
  rate?: number | null | undefined;
  /**
   * Unit of measurement for employee compensation.
   */
  paymentUnit?: HrisEmployeesAllPaymentUnit | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesAllCurrency | null | undefined;
  /**
   * The FLSA status for this compensation.
   */
  flsaStatus?: HrisEmployeesAllFlsaStatus | null | undefined;
  /**
   * The date on which a change to an employee's compensation takes effect.
   */
  effectiveDate?: string | null | undefined;
  /**
   * Frequency of employee compensation.
   */
  paymentFrequency?: HrisEmployeesAllPaymentFrequency | null | undefined;
};

/**
 * The type of address.
 */
export const HrisEmployeesAllHrisEmployeesResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisEmployeesAllHrisEmployeesResponseType = ClosedEnum<
  typeof HrisEmployeesAllHrisEmployeesResponseType
>;

export type HrisEmployeesAllAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisEmployeesAllHrisEmployeesResponseType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const HrisEmployeesAllType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type HrisEmployeesAllType = ClosedEnum<typeof HrisEmployeesAllType>;

export type HrisEmployeesAllPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: HrisEmployeesAllType | null | undefined;
};

/**
 * Email type
 */
export const HrisEmployeesAllHrisEmployeesType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type HrisEmployeesAllHrisEmployeesType = ClosedEnum<
  typeof HrisEmployeesAllHrisEmployeesType
>;

export type HrisEmployeesAllEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: HrisEmployeesAllHrisEmployeesType | null | undefined;
};

export type HrisEmployeesAllValue6 = {};

export type HrisEmployeesAllValue4 = {};

export type HrisEmployeesAllValue =
  | HrisEmployeesAllValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<HrisEmployeesAllValue6>;

export type HrisEmployeesAllCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | HrisEmployeesAllValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<HrisEmployeesAllValue6>
    | null
    | undefined;
};

export type HrisEmployeesAllSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of bank account.
 */
export const HrisEmployeesAllAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The type of bank account.
 */
export type HrisEmployeesAllAccountType = ClosedEnum<
  typeof HrisEmployeesAllAccountType
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesAllHrisEmployeesCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesAllHrisEmployeesCurrency = ClosedEnum<
  typeof HrisEmployeesAllHrisEmployeesCurrency
>;

export type HrisEmployeesAllBankAccounts = {
  /**
   * The name of the bank
   */
  bankName?: string | null | undefined;
  /**
   * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name which you used in opening your bank account.
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account.
   */
  accountType?: HrisEmployeesAllAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN).
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC).
   */
  bic?: string | null | undefined;
  /**
   * A routing number is a nine-digit code used to identify a financial institution in the United States.
   */
  routingNumber?: string | null | undefined;
  /**
   * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
   */
  bsbNumber?: string | null | undefined;
  /**
   * A branch identifier is a unique identifier for a branch of a bank or financial institution.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
   */
  bankCode?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesAllHrisEmployeesCurrency | null | undefined;
};

export type HrisEmployeesAllProbationPeriod = {
  /**
   * The date that the employee started their probation period at the company.
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The date that the employee ended their probation period at the company.
   */
  endDate?: RFCDate | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type CustomMappings = {};

export type HrisEmployeesAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisEmployeesAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisEmployeesAllExtendPaths> | undefined;
};

export type Data = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The name used to display the employee, often a combination of their first and last names.
   */
  displayName?: string | null | undefined;
  /**
   * The name the employee prefers to be addressed by, which may be different from their legal name.
   */
  preferredName?: string | null | undefined;
  /**
   * The initials of the person, usually derived from their first, middle, and last names.
   */
  initials?: string | null | undefined;
  /**
   * A formal salutation for the person. For example, 'Mr', 'Mrs'
   */
  salutation?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The marital status of the employee.
   */
  maritalStatus?: string | null | undefined;
  partner?: HrisEmployeesAllPerson | undefined;
  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  division?: string | null | undefined;
  /**
   * Unique identifier of the division this employee belongs to.
   */
  divisionId?: string | null | undefined;
  /**
   * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * Unique identifier of the department ID this employee belongs to.
   */
  departmentId?: string | null | undefined;
  /**
   * Name of the department this employee belongs to.
   */
  departmentName?: string | null | undefined;
  /**
   * The team the person is currently in.
   */
  team?: HrisEmployeesAllTeam | null | undefined;
  /**
   * The unique identifier of the company.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company.
   */
  companyName?: string | null | undefined;
  /**
   * A Start Date is the date that the employee started working at the company
   */
  employmentStartDate?: string | null | undefined;
  /**
   * An End Date is the date that the employee ended working at the company
   */
  employmentEndDate?: string | null | undefined;
  /**
   * The reason because the employment ended.
   */
  leavingReason?: HrisEmployeesAllLeavingReason | null | undefined;
  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  employeeNumber?: string | null | undefined;
  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  employmentStatus?: HrisEmployeesAllEmploymentStatus | null | undefined;
  employmentRole?: HrisEmployeesAllEmploymentRole | undefined;
  /**
   * The ethnicity of the employee
   */
  ethnicity?: string | null | undefined;
  manager?: HrisEmployeesAllManager | undefined;
  /**
   * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
   */
  directReports?: Array<string> | null | undefined;
  /**
   * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
   */
  socialSecurityNumber?: string | null | undefined;
  /**
   * The date of birth of the person.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * The date the person deceased.
   */
  deceasedOn?: RFCDate | null | undefined;
  /**
   * Country code according to ISO 3166-1 alpha-2.
   */
  countryOfBirth?: string | null | undefined;
  /**
   * A description of the object.
   */
  description?: string | null | undefined;
  /**
   * The gender represents the gender identity of a person.
   */
  gender?: HrisEmployeesAllGender | null | undefined;
  /**
   * The preferred pronouns of the person.
   */
  pronouns?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  preferredLanguage?: string | null | undefined;
  languages?: Array<string> | undefined;
  nationalities?: Array<string> | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
   */
  timezone?: string | null | undefined;
  /**
   * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
   */
  source?: string | null | undefined;
  /**
   * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
   */
  sourceId?: string | null | undefined;
  recordUrl?: string | null | undefined;
  jobs?: Array<HrisEmployeesAllJob> | null | undefined;
  compensations?: Array<HrisEmployeesAllCompensation> | null | undefined;
  /**
   * Indicates if the employee works from a remote location.
   */
  worksRemote?: boolean | null | undefined;
  addresses?: Array<HrisEmployeesAllAddresses> | undefined;
  phoneNumbers?: Array<HrisEmployeesAllPhoneNumbers> | undefined;
  emails?: Array<HrisEmployeesAllEmails> | undefined;
  customFields?: Array<HrisEmployeesAllCustomFields> | undefined;
  socialLinks?: Array<HrisEmployeesAllSocialLinks> | undefined;
  bankAccounts?: Array<HrisEmployeesAllBankAccounts> | undefined;
  taxCode?: string | null | undefined;
  taxId?: string | null | undefined;
  /**
   * Indicate the employee's dietary preference.
   */
  dietaryPreference?: string | null | undefined;
  /**
   * Indicate the employee's food allergies.
   */
  foodAllergies?: Array<string> | null | undefined;
  probationPeriod?: HrisEmployeesAllProbationPeriod | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisEmployeesAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type Cursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type Meta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: Cursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type Links = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Employees
 */
export type HrisEmployeesAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<Data>;
  /**
   * Response metadata
   */
  meta?: Meta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: Links | undefined;
};

export type HrisEmployeesAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Employees
   */
  twoHundredApplicationJsonObject?: HrisEmployeesAllResponseBody | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisEmployeesAllHrisEmployeesResponseBody
    | undefined;
};

/** @internal */
export const HrisEmployeesAllGlobals$inboundSchema: z.ZodType<
  HrisEmployeesAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisEmployeesAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisEmployeesAllGlobals$outboundSchema: z.ZodType<
  HrisEmployeesAllGlobals$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllGlobals$ {
  /** @deprecated use `HrisEmployeesAllGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllGlobals$inboundSchema;
  /** @deprecated use `HrisEmployeesAllGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllGlobals$outboundSchema;
  /** @deprecated use `HrisEmployeesAllGlobals$Outbound` instead. */
  export type Outbound = HrisEmployeesAllGlobals$Outbound;
}

export function hrisEmployeesAllGlobalsToJSON(
  hrisEmployeesAllGlobals: HrisEmployeesAllGlobals,
): string {
  return JSON.stringify(
    HrisEmployeesAllGlobals$outboundSchema.parse(hrisEmployeesAllGlobals),
  );
}

export function hrisEmployeesAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllGlobals' from JSON`,
  );
}

/** @internal */
export const QueryParamEmploymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamEmploymentStatus
> = z.nativeEnum(QueryParamEmploymentStatus);

/** @internal */
export const QueryParamEmploymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamEmploymentStatus
> = QueryParamEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamEmploymentStatus$ {
  /** @deprecated use `QueryParamEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema = QueryParamEmploymentStatus$inboundSchema;
  /** @deprecated use `QueryParamEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema = QueryParamEmploymentStatus$outboundSchema;
}

/** @internal */
export const Filter$inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
  .object({
    company_id: z.string().optional(),
    email: z.string().optional(),
    first_name: z.string().optional(),
    title: z.string().optional(),
    last_name: z.string().optional(),
    manager_id: z.string().optional(),
    employment_status: QueryParamEmploymentStatus$inboundSchema.optional(),
    employee_number: z.string().optional(),
    department_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "first_name": "firstName",
      "last_name": "lastName",
      "manager_id": "managerId",
      "employment_status": "employmentStatus",
      "employee_number": "employeeNumber",
      "department_id": "departmentId",
    });
  });

/** @internal */
export type Filter$Outbound = {
  company_id?: string | undefined;
  email?: string | undefined;
  first_name?: string | undefined;
  title?: string | undefined;
  last_name?: string | undefined;
  manager_id?: string | undefined;
  employment_status?: string | undefined;
  employee_number?: string | undefined;
  department_id?: string | undefined;
};

/** @internal */
export const Filter$outboundSchema: z.ZodType<
  Filter$Outbound,
  z.ZodTypeDef,
  Filter
> = z.object({
  companyId: z.string().optional(),
  email: z.string().optional(),
  firstName: z.string().optional(),
  title: z.string().optional(),
  lastName: z.string().optional(),
  managerId: z.string().optional(),
  employmentStatus: QueryParamEmploymentStatus$outboundSchema.optional(),
  employeeNumber: z.string().optional(),
  departmentId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    firstName: "first_name",
    lastName: "last_name",
    managerId: "manager_id",
    employmentStatus: "employment_status",
    employeeNumber: "employee_number",
    departmentId: "department_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
  /** @deprecated use `Filter$Outbound` instead. */
  export type Outbound = Filter$Outbound;
}

export function filterToJSON(filter: Filter): string {
  return JSON.stringify(Filter$outboundSchema.parse(filter));
}

export function filterFromJSON(
  jsonString: string,
): SafeParseResult<Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter' from JSON`,
  );
}

/** @internal */
export const By$inboundSchema: z.ZodNativeEnum<typeof By> = z.nativeEnum(By);

/** @internal */
export const By$outboundSchema: z.ZodNativeEnum<typeof By> = By$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace By$ {
  /** @deprecated use `By$inboundSchema` instead. */
  export const inboundSchema = By$inboundSchema;
  /** @deprecated use `By$outboundSchema` instead. */
  export const outboundSchema = By$outboundSchema;
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const Sort$inboundSchema: z.ZodType<Sort, z.ZodTypeDef, unknown> = z
  .object({
    by: By$inboundSchema.optional(),
    direction: Direction$inboundSchema.default("asc"),
  });

/** @internal */
export type Sort$Outbound = {
  by?: string | undefined;
  direction: string;
};

/** @internal */
export const Sort$outboundSchema: z.ZodType<Sort$Outbound, z.ZodTypeDef, Sort> =
  z.object({
    by: By$outboundSchema.optional(),
    direction: Direction$outboundSchema.default("asc"),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
  /** @deprecated use `Sort$inboundSchema` instead. */
  export const inboundSchema = Sort$inboundSchema;
  /** @deprecated use `Sort$outboundSchema` instead. */
  export const outboundSchema = Sort$outboundSchema;
  /** @deprecated use `Sort$Outbound` instead. */
  export type Outbound = Sort$Outbound;
}

export function sortToJSON(sort: Sort): string {
  return JSON.stringify(Sort$outboundSchema.parse(sort));
}

export function sortFromJSON(
  jsonString: string,
): SafeParseResult<Sort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sort' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllRequest$inboundSchema: z.ZodType<
  HrisEmployeesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => Filter$inboundSchema).optional(),
  sort: z.lazy(() => Sort$inboundSchema).optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisEmployeesAllRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: Filter$Outbound | undefined;
  sort?: Sort$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllRequest$outboundSchema: z.ZodType<
  HrisEmployeesAllRequest$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => Filter$outboundSchema).optional(),
  sort: z.lazy(() => Sort$outboundSchema).optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllRequest$ {
  /** @deprecated use `HrisEmployeesAllRequest$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllRequest$inboundSchema;
  /** @deprecated use `HrisEmployeesAllRequest$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllRequest$outboundSchema;
  /** @deprecated use `HrisEmployeesAllRequest$Outbound` instead. */
  export type Outbound = HrisEmployeesAllRequest$Outbound;
}

export function hrisEmployeesAllRequestToJSON(
  hrisEmployeesAllRequest: HrisEmployeesAllRequest,
): string {
  return JSON.stringify(
    HrisEmployeesAllRequest$outboundSchema.parse(hrisEmployeesAllRequest),
  );
}

export function hrisEmployeesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllRequest' from JSON`,
  );
}

/** @internal */
export const Detail$inboundSchema: z.ZodType<Detail, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.record(z.any())]);

/** @internal */
export type Detail$Outbound = string | { [k: string]: any };

/** @internal */
export const Detail$outboundSchema: z.ZodType<
  Detail$Outbound,
  z.ZodTypeDef,
  Detail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Detail$ {
  /** @deprecated use `Detail$inboundSchema` instead. */
  export const inboundSchema = Detail$inboundSchema;
  /** @deprecated use `Detail$outboundSchema` instead. */
  export const outboundSchema = Detail$outboundSchema;
  /** @deprecated use `Detail$Outbound` instead. */
  export type Outbound = Detail$Outbound;
}

export function detailToJSON(detail: Detail): string {
  return JSON.stringify(Detail$outboundSchema.parse(detail));
}

export function detailFromJSON(
  jsonString: string,
): SafeParseResult<Detail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Detail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Detail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesAllHrisEmployeesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type HrisEmployeesAllHrisEmployeesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesAllHrisEmployeesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAllHrisEmployeesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesResponseBody$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesAllHrisEmployeesResponseBody$Outbound;
}

export function hrisEmployeesAllHrisEmployeesResponseBodyToJSON(
  hrisEmployeesAllHrisEmployeesResponseBody:
    HrisEmployeesAllHrisEmployeesResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeesAllHrisEmployeesResponseBody$outboundSchema.parse(
      hrisEmployeesAllHrisEmployeesResponseBody,
    ),
  );
}

export function hrisEmployeesAllHrisEmployeesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesAllHrisEmployeesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesAllHrisEmployeesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesAllHrisEmployeesResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesGender$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllHrisEmployeesGender
> = z.nativeEnum(HrisEmployeesAllHrisEmployeesGender);

/** @internal */
export const HrisEmployeesAllHrisEmployeesGender$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesGender> =
    HrisEmployeesAllHrisEmployeesGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesGender$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesGender$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesGender$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesGender$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesGender$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllCustomMappings$inboundSchema: z.ZodType<
  HrisEmployeesAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisEmployeesAllCustomMappings$Outbound = {};

/** @internal */
export const HrisEmployeesAllCustomMappings$outboundSchema: z.ZodType<
  HrisEmployeesAllCustomMappings$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllCustomMappings$ {
  /** @deprecated use `HrisEmployeesAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllCustomMappings$inboundSchema;
  /** @deprecated use `HrisEmployeesAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllCustomMappings$outboundSchema;
  /** @deprecated use `HrisEmployeesAllCustomMappings$Outbound` instead. */
  export type Outbound = HrisEmployeesAllCustomMappings$Outbound;
}

export function hrisEmployeesAllCustomMappingsToJSON(
  hrisEmployeesAllCustomMappings: HrisEmployeesAllCustomMappings,
): string {
  return JSON.stringify(
    HrisEmployeesAllCustomMappings$outboundSchema.parse(
      hrisEmployeesAllCustomMappings,
    ),
  );
}

export function hrisEmployeesAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllPerson$inboundSchema: z.ZodType<
  HrisEmployeesAllPerson,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesAllHrisEmployeesGender$inboundSchema)
    .optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  deceased_on: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => HrisEmployeesAllCustomMappings$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_name": "middleName",
    "deceased_on": "deceasedOn",
    "custom_mappings": "customMappings",
  });
});

/** @internal */
export type HrisEmployeesAllPerson$Outbound = {
  id?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  gender?: string | null | undefined;
  initials?: string | null | undefined;
  birthday?: string | null | undefined;
  deceased_on?: string | null | undefined;
  custom_mappings?: HrisEmployeesAllCustomMappings$Outbound | null | undefined;
};

/** @internal */
export const HrisEmployeesAllPerson$outboundSchema: z.ZodType<
  HrisEmployeesAllPerson$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllPerson
> = z.object({
  id: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesAllHrisEmployeesGender$outboundSchema)
    .optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  deceasedOn: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => HrisEmployeesAllCustomMappings$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    deceasedOn: "deceased_on",
    customMappings: "custom_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllPerson$ {
  /** @deprecated use `HrisEmployeesAllPerson$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllPerson$inboundSchema;
  /** @deprecated use `HrisEmployeesAllPerson$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllPerson$outboundSchema;
  /** @deprecated use `HrisEmployeesAllPerson$Outbound` instead. */
  export type Outbound = HrisEmployeesAllPerson$Outbound;
}

export function hrisEmployeesAllPersonToJSON(
  hrisEmployeesAllPerson: HrisEmployeesAllPerson,
): string {
  return JSON.stringify(
    HrisEmployeesAllPerson$outboundSchema.parse(hrisEmployeesAllPerson),
  );
}

export function hrisEmployeesAllPersonFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllPerson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllPerson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllPerson' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllTeam$inboundSchema: z.ZodType<
  HrisEmployeesAllTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisEmployeesAllTeam$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllTeam$outboundSchema: z.ZodType<
  HrisEmployeesAllTeam$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllTeam
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllTeam$ {
  /** @deprecated use `HrisEmployeesAllTeam$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllTeam$inboundSchema;
  /** @deprecated use `HrisEmployeesAllTeam$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllTeam$outboundSchema;
  /** @deprecated use `HrisEmployeesAllTeam$Outbound` instead. */
  export type Outbound = HrisEmployeesAllTeam$Outbound;
}

export function hrisEmployeesAllTeamToJSON(
  hrisEmployeesAllTeam: HrisEmployeesAllTeam,
): string {
  return JSON.stringify(
    HrisEmployeesAllTeam$outboundSchema.parse(hrisEmployeesAllTeam),
  );
}

export function hrisEmployeesAllTeamFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllTeam' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllLeavingReason$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllLeavingReason
> = z.nativeEnum(HrisEmployeesAllLeavingReason);

/** @internal */
export const HrisEmployeesAllLeavingReason$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllLeavingReason
> = HrisEmployeesAllLeavingReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllLeavingReason$ {
  /** @deprecated use `HrisEmployeesAllLeavingReason$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllLeavingReason$inboundSchema;
  /** @deprecated use `HrisEmployeesAllLeavingReason$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllLeavingReason$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllEmploymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllEmploymentStatus
> = z.nativeEnum(HrisEmployeesAllEmploymentStatus);

/** @internal */
export const HrisEmployeesAllEmploymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllEmploymentStatus
> = HrisEmployeesAllEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllEmploymentStatus$ {
  /** @deprecated use `HrisEmployeesAllEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllEmploymentStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesAllEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllEmploymentStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllEmploymentType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllEmploymentType
> = z.nativeEnum(HrisEmployeesAllEmploymentType);

/** @internal */
export const HrisEmployeesAllEmploymentType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllEmploymentType
> = HrisEmployeesAllEmploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllEmploymentType$ {
  /** @deprecated use `HrisEmployeesAllEmploymentType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllEmploymentType$inboundSchema;
  /** @deprecated use `HrisEmployeesAllEmploymentType$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllEmploymentType$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllEmploymentSubType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllEmploymentSubType
> = z.nativeEnum(HrisEmployeesAllEmploymentSubType);

/** @internal */
export const HrisEmployeesAllEmploymentSubType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllEmploymentSubType
> = HrisEmployeesAllEmploymentSubType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllEmploymentSubType$ {
  /** @deprecated use `HrisEmployeesAllEmploymentSubType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllEmploymentSubType$inboundSchema;
  /** @deprecated use `HrisEmployeesAllEmploymentSubType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllEmploymentSubType$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllEmploymentRole$inboundSchema: z.ZodType<
  HrisEmployeesAllEmploymentRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(HrisEmployeesAllEmploymentType$inboundSchema).optional(),
  sub_type: z.nullable(HrisEmployeesAllEmploymentSubType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "sub_type": "subType",
  });
});

/** @internal */
export type HrisEmployeesAllEmploymentRole$Outbound = {
  type?: string | null | undefined;
  sub_type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllEmploymentRole$outboundSchema: z.ZodType<
  HrisEmployeesAllEmploymentRole$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllEmploymentRole
> = z.object({
  type: z.nullable(HrisEmployeesAllEmploymentType$outboundSchema).optional(),
  subType: z.nullable(HrisEmployeesAllEmploymentSubType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    subType: "sub_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllEmploymentRole$ {
  /** @deprecated use `HrisEmployeesAllEmploymentRole$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllEmploymentRole$inboundSchema;
  /** @deprecated use `HrisEmployeesAllEmploymentRole$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllEmploymentRole$outboundSchema;
  /** @deprecated use `HrisEmployeesAllEmploymentRole$Outbound` instead. */
  export type Outbound = HrisEmployeesAllEmploymentRole$Outbound;
}

export function hrisEmployeesAllEmploymentRoleToJSON(
  hrisEmployeesAllEmploymentRole: HrisEmployeesAllEmploymentRole,
): string {
  return JSON.stringify(
    HrisEmployeesAllEmploymentRole$outboundSchema.parse(
      hrisEmployeesAllEmploymentRole,
    ),
  );
}

export function hrisEmployeesAllEmploymentRoleFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllEmploymentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllEmploymentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllEmploymentRole' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesEmploymentStatus$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesEmploymentStatus> = z
    .nativeEnum(HrisEmployeesAllHrisEmployeesEmploymentStatus);

/** @internal */
export const HrisEmployeesAllHrisEmployeesEmploymentStatus$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesEmploymentStatus> =
    HrisEmployeesAllHrisEmployeesEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesEmploymentStatus$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesEmploymentStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesEmploymentStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllManager$inboundSchema: z.ZodType<
  HrisEmployeesAllManager,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  employment_status: z.nullable(
    HrisEmployeesAllHrisEmployeesEmploymentStatus$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "employment_status": "employmentStatus",
  });
});

/** @internal */
export type HrisEmployeesAllManager$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  email?: string | null | undefined;
  employment_status?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllManager$outboundSchema: z.ZodType<
  HrisEmployeesAllManager$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllManager
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  employmentStatus: z.nullable(
    HrisEmployeesAllHrisEmployeesEmploymentStatus$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    employmentStatus: "employment_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllManager$ {
  /** @deprecated use `HrisEmployeesAllManager$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllManager$inboundSchema;
  /** @deprecated use `HrisEmployeesAllManager$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllManager$outboundSchema;
  /** @deprecated use `HrisEmployeesAllManager$Outbound` instead. */
  export type Outbound = HrisEmployeesAllManager$Outbound;
}

export function hrisEmployeesAllManagerToJSON(
  hrisEmployeesAllManager: HrisEmployeesAllManager,
): string {
  return JSON.stringify(
    HrisEmployeesAllManager$outboundSchema.parse(hrisEmployeesAllManager),
  );
}

export function hrisEmployeesAllManagerFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllManager, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllManager$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllManager' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllGender$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllGender
> = z.nativeEnum(HrisEmployeesAllGender);

/** @internal */
export const HrisEmployeesAllGender$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllGender
> = HrisEmployeesAllGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllGender$ {
  /** @deprecated use `HrisEmployeesAllGender$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllGender$inboundSchema;
  /** @deprecated use `HrisEmployeesAllGender$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllGender$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseCurrency$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesResponseCurrency> = z
    .nativeEnum(HrisEmployeesAllHrisEmployeesResponseCurrency);

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseCurrency$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesResponseCurrency> =
    HrisEmployeesAllHrisEmployeesResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesResponseCurrency$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseCurrency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesResponseCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseCurrency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesResponseCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesPaymentUnit$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesPaymentUnit> = z
    .nativeEnum(HrisEmployeesAllHrisEmployeesPaymentUnit);

/** @internal */
export const HrisEmployeesAllHrisEmployeesPaymentUnit$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesPaymentUnit> =
    HrisEmployeesAllHrisEmployeesPaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesPaymentUnit$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesPaymentUnit$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesPaymentUnit$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesPaymentUnit$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesPaymentUnit$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllStatus
> = z.nativeEnum(HrisEmployeesAllStatus);

/** @internal */
export const HrisEmployeesAllStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllStatus
> = HrisEmployeesAllStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllStatus$ {
  /** @deprecated use `HrisEmployeesAllStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesAllStatus$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesResponse200Type> = z
    .nativeEnum(HrisEmployeesAllHrisEmployeesResponse200Type);

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesResponse200Type> =
    HrisEmployeesAllHrisEmployeesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesResponse200Type$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesResponse200Type$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesResponse200Type$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllLocation$inboundSchema: z.ZodType<
  HrisEmployeesAllLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesAllHrisEmployeesResponse200Type$inboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisEmployeesAllLocation$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllLocation$outboundSchema: z.ZodType<
  HrisEmployeesAllLocation$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllLocation
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesAllHrisEmployeesResponse200Type$outboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllLocation$ {
  /** @deprecated use `HrisEmployeesAllLocation$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllLocation$inboundSchema;
  /** @deprecated use `HrisEmployeesAllLocation$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllLocation$outboundSchema;
  /** @deprecated use `HrisEmployeesAllLocation$Outbound` instead. */
  export type Outbound = HrisEmployeesAllLocation$Outbound;
}

export function hrisEmployeesAllLocationToJSON(
  hrisEmployeesAllLocation: HrisEmployeesAllLocation,
): string {
  return JSON.stringify(
    HrisEmployeesAllLocation$outboundSchema.parse(hrisEmployeesAllLocation),
  );
}

export function hrisEmployeesAllLocationFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllLocation' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllJob$inboundSchema: z.ZodType<
  HrisEmployeesAllJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  employee_id: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  compensation_rate: z.nullable(z.number()).optional(),
  currency: z.nullable(
    HrisEmployeesAllHrisEmployeesResponseCurrency$inboundSchema,
  ).optional(),
  payment_unit: z.nullable(
    HrisEmployeesAllHrisEmployeesPaymentUnit$inboundSchema,
  ).optional(),
  hired_at: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  is_primary: z.nullable(z.boolean()).optional(),
  is_manager: z.nullable(z.boolean()).optional(),
  status: z.nullable(HrisEmployeesAllStatus$inboundSchema).optional(),
  location: z.lazy(() => HrisEmployeesAllLocation$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "start_date": "startDate",
    "end_date": "endDate",
    "compensation_rate": "compensationRate",
    "payment_unit": "paymentUnit",
    "hired_at": "hiredAt",
    "is_primary": "isPrimary",
    "is_manager": "isManager",
  });
});

/** @internal */
export type HrisEmployeesAllJob$Outbound = {
  id?: string | null | undefined;
  employee_id?: string | null | undefined;
  title?: string | null | undefined;
  role?: string | null | undefined;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  compensation_rate?: number | null | undefined;
  currency?: string | null | undefined;
  payment_unit?: string | null | undefined;
  hired_at?: string | null | undefined;
  is_primary?: boolean | null | undefined;
  is_manager?: boolean | null | undefined;
  status?: string | null | undefined;
  location?: HrisEmployeesAllLocation$Outbound | undefined;
};

/** @internal */
export const HrisEmployeesAllJob$outboundSchema: z.ZodType<
  HrisEmployeesAllJob$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllJob
> = z.object({
  id: z.nullable(z.string()).optional(),
  employeeId: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  compensationRate: z.nullable(z.number()).optional(),
  currency: z.nullable(
    HrisEmployeesAllHrisEmployeesResponseCurrency$outboundSchema,
  ).optional(),
  paymentUnit: z.nullable(
    HrisEmployeesAllHrisEmployeesPaymentUnit$outboundSchema,
  ).optional(),
  hiredAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  isPrimary: z.nullable(z.boolean()).optional(),
  isManager: z.nullable(z.boolean()).optional(),
  status: z.nullable(HrisEmployeesAllStatus$outboundSchema).optional(),
  location: z.lazy(() => HrisEmployeesAllLocation$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    startDate: "start_date",
    endDate: "end_date",
    compensationRate: "compensation_rate",
    paymentUnit: "payment_unit",
    hiredAt: "hired_at",
    isPrimary: "is_primary",
    isManager: "is_manager",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllJob$ {
  /** @deprecated use `HrisEmployeesAllJob$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllJob$inboundSchema;
  /** @deprecated use `HrisEmployeesAllJob$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllJob$outboundSchema;
  /** @deprecated use `HrisEmployeesAllJob$Outbound` instead. */
  export type Outbound = HrisEmployeesAllJob$Outbound;
}

export function hrisEmployeesAllJobToJSON(
  hrisEmployeesAllJob: HrisEmployeesAllJob,
): string {
  return JSON.stringify(
    HrisEmployeesAllJob$outboundSchema.parse(hrisEmployeesAllJob),
  );
}

export function hrisEmployeesAllJobFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllJob' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllPaymentUnit$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllPaymentUnit
> = z.nativeEnum(HrisEmployeesAllPaymentUnit);

/** @internal */
export const HrisEmployeesAllPaymentUnit$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllPaymentUnit
> = HrisEmployeesAllPaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllPaymentUnit$ {
  /** @deprecated use `HrisEmployeesAllPaymentUnit$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllPaymentUnit$inboundSchema;
  /** @deprecated use `HrisEmployeesAllPaymentUnit$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllPaymentUnit$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllCurrency$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllCurrency
> = z.nativeEnum(HrisEmployeesAllCurrency);

/** @internal */
export const HrisEmployeesAllCurrency$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllCurrency
> = HrisEmployeesAllCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllCurrency$ {
  /** @deprecated use `HrisEmployeesAllCurrency$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesAllCurrency$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllFlsaStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllFlsaStatus
> = z.nativeEnum(HrisEmployeesAllFlsaStatus);

/** @internal */
export const HrisEmployeesAllFlsaStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllFlsaStatus
> = HrisEmployeesAllFlsaStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllFlsaStatus$ {
  /** @deprecated use `HrisEmployeesAllFlsaStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllFlsaStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesAllFlsaStatus$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllFlsaStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllPaymentFrequency$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllPaymentFrequency
> = z.nativeEnum(HrisEmployeesAllPaymentFrequency);

/** @internal */
export const HrisEmployeesAllPaymentFrequency$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllPaymentFrequency
> = HrisEmployeesAllPaymentFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllPaymentFrequency$ {
  /** @deprecated use `HrisEmployeesAllPaymentFrequency$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllPaymentFrequency$inboundSchema;
  /** @deprecated use `HrisEmployeesAllPaymentFrequency$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllPaymentFrequency$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllCompensation$inboundSchema: z.ZodType<
  HrisEmployeesAllCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  job_id: z.nullable(z.string()).optional(),
  rate: z.nullable(z.number()).optional(),
  payment_unit: z.nullable(HrisEmployeesAllPaymentUnit$inboundSchema)
    .optional(),
  currency: z.nullable(HrisEmployeesAllCurrency$inboundSchema).optional(),
  flsa_status: z.nullable(HrisEmployeesAllFlsaStatus$inboundSchema).optional(),
  effective_date: z.nullable(z.string()).optional(),
  payment_frequency: z.nullable(HrisEmployeesAllPaymentFrequency$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
    "payment_unit": "paymentUnit",
    "flsa_status": "flsaStatus",
    "effective_date": "effectiveDate",
    "payment_frequency": "paymentFrequency",
  });
});

/** @internal */
export type HrisEmployeesAllCompensation$Outbound = {
  id?: string | null | undefined;
  job_id?: string | null | undefined;
  rate?: number | null | undefined;
  payment_unit?: string | null | undefined;
  currency?: string | null | undefined;
  flsa_status?: string | null | undefined;
  effective_date?: string | null | undefined;
  payment_frequency?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllCompensation$outboundSchema: z.ZodType<
  HrisEmployeesAllCompensation$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllCompensation
> = z.object({
  id: z.nullable(z.string()).optional(),
  jobId: z.nullable(z.string()).optional(),
  rate: z.nullable(z.number()).optional(),
  paymentUnit: z.nullable(HrisEmployeesAllPaymentUnit$outboundSchema)
    .optional(),
  currency: z.nullable(HrisEmployeesAllCurrency$outboundSchema).optional(),
  flsaStatus: z.nullable(HrisEmployeesAllFlsaStatus$outboundSchema).optional(),
  effectiveDate: z.nullable(z.string()).optional(),
  paymentFrequency: z.nullable(HrisEmployeesAllPaymentFrequency$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
    paymentUnit: "payment_unit",
    flsaStatus: "flsa_status",
    effectiveDate: "effective_date",
    paymentFrequency: "payment_frequency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllCompensation$ {
  /** @deprecated use `HrisEmployeesAllCompensation$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllCompensation$inboundSchema;
  /** @deprecated use `HrisEmployeesAllCompensation$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllCompensation$outboundSchema;
  /** @deprecated use `HrisEmployeesAllCompensation$Outbound` instead. */
  export type Outbound = HrisEmployeesAllCompensation$Outbound;
}

export function hrisEmployeesAllCompensationToJSON(
  hrisEmployeesAllCompensation: HrisEmployeesAllCompensation,
): string {
  return JSON.stringify(
    HrisEmployeesAllCompensation$outboundSchema.parse(
      hrisEmployeesAllCompensation,
    ),
  );
}

export function hrisEmployeesAllCompensationFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllCompensation' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseType$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesResponseType> = z
    .nativeEnum(HrisEmployeesAllHrisEmployeesResponseType);

/** @internal */
export const HrisEmployeesAllHrisEmployeesResponseType$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesResponseType> =
    HrisEmployeesAllHrisEmployeesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesResponseType$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesResponseType$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesResponseType$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllAddresses$inboundSchema: z.ZodType<
  HrisEmployeesAllAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesAllHrisEmployeesResponseType$inboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisEmployeesAllAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllAddresses$outboundSchema: z.ZodType<
  HrisEmployeesAllAddresses$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesAllHrisEmployeesResponseType$outboundSchema)
    .optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllAddresses$ {
  /** @deprecated use `HrisEmployeesAllAddresses$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllAddresses$inboundSchema;
  /** @deprecated use `HrisEmployeesAllAddresses$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllAddresses$outboundSchema;
  /** @deprecated use `HrisEmployeesAllAddresses$Outbound` instead. */
  export type Outbound = HrisEmployeesAllAddresses$Outbound;
}

export function hrisEmployeesAllAddressesToJSON(
  hrisEmployeesAllAddresses: HrisEmployeesAllAddresses,
): string {
  return JSON.stringify(
    HrisEmployeesAllAddresses$outboundSchema.parse(hrisEmployeesAllAddresses),
  );
}

export function hrisEmployeesAllAddressesFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllAddresses' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllType
> = z.nativeEnum(HrisEmployeesAllType);

/** @internal */
export const HrisEmployeesAllType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllType
> = HrisEmployeesAllType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllType$ {
  /** @deprecated use `HrisEmployeesAllType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllType$inboundSchema;
  /** @deprecated use `HrisEmployeesAllType$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllType$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllPhoneNumbers$inboundSchema: z.ZodType<
  HrisEmployeesAllPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesAllType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type HrisEmployeesAllPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllPhoneNumbers$outboundSchema: z.ZodType<
  HrisEmployeesAllPhoneNumbers$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesAllType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllPhoneNumbers$ {
  /** @deprecated use `HrisEmployeesAllPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllPhoneNumbers$inboundSchema;
  /** @deprecated use `HrisEmployeesAllPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllPhoneNumbers$outboundSchema;
  /** @deprecated use `HrisEmployeesAllPhoneNumbers$Outbound` instead. */
  export type Outbound = HrisEmployeesAllPhoneNumbers$Outbound;
}

export function hrisEmployeesAllPhoneNumbersToJSON(
  hrisEmployeesAllPhoneNumbers: HrisEmployeesAllPhoneNumbers,
): string {
  return JSON.stringify(
    HrisEmployeesAllPhoneNumbers$outboundSchema.parse(
      hrisEmployeesAllPhoneNumbers,
    ),
  );
}

export function hrisEmployeesAllPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllHrisEmployeesType
> = z.nativeEnum(HrisEmployeesAllHrisEmployeesType);

/** @internal */
export const HrisEmployeesAllHrisEmployeesType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllHrisEmployeesType
> = HrisEmployeesAllHrisEmployeesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesType$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllHrisEmployeesType$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesType$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllEmails$inboundSchema: z.ZodType<
  HrisEmployeesAllEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisEmployeesAllHrisEmployeesType$inboundSchema).optional(),
});

/** @internal */
export type HrisEmployeesAllEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllEmails$outboundSchema: z.ZodType<
  HrisEmployeesAllEmails$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisEmployeesAllHrisEmployeesType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllEmails$ {
  /** @deprecated use `HrisEmployeesAllEmails$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllEmails$inboundSchema;
  /** @deprecated use `HrisEmployeesAllEmails$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllEmails$outboundSchema;
  /** @deprecated use `HrisEmployeesAllEmails$Outbound` instead. */
  export type Outbound = HrisEmployeesAllEmails$Outbound;
}

export function hrisEmployeesAllEmailsToJSON(
  hrisEmployeesAllEmails: HrisEmployeesAllEmails,
): string {
  return JSON.stringify(
    HrisEmployeesAllEmails$outboundSchema.parse(hrisEmployeesAllEmails),
  );
}

export function hrisEmployeesAllEmailsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllEmails' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllValue6$inboundSchema: z.ZodType<
  HrisEmployeesAllValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisEmployeesAllValue6$Outbound = {};

/** @internal */
export const HrisEmployeesAllValue6$outboundSchema: z.ZodType<
  HrisEmployeesAllValue6$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllValue6$ {
  /** @deprecated use `HrisEmployeesAllValue6$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllValue6$inboundSchema;
  /** @deprecated use `HrisEmployeesAllValue6$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllValue6$outboundSchema;
  /** @deprecated use `HrisEmployeesAllValue6$Outbound` instead. */
  export type Outbound = HrisEmployeesAllValue6$Outbound;
}

export function hrisEmployeesAllValue6ToJSON(
  hrisEmployeesAllValue6: HrisEmployeesAllValue6,
): string {
  return JSON.stringify(
    HrisEmployeesAllValue6$outboundSchema.parse(hrisEmployeesAllValue6),
  );
}

export function hrisEmployeesAllValue6FromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllValue6' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllValue4$inboundSchema: z.ZodType<
  HrisEmployeesAllValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisEmployeesAllValue4$Outbound = {};

/** @internal */
export const HrisEmployeesAllValue4$outboundSchema: z.ZodType<
  HrisEmployeesAllValue4$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllValue4$ {
  /** @deprecated use `HrisEmployeesAllValue4$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllValue4$inboundSchema;
  /** @deprecated use `HrisEmployeesAllValue4$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllValue4$outboundSchema;
  /** @deprecated use `HrisEmployeesAllValue4$Outbound` instead. */
  export type Outbound = HrisEmployeesAllValue4$Outbound;
}

export function hrisEmployeesAllValue4ToJSON(
  hrisEmployeesAllValue4: HrisEmployeesAllValue4,
): string {
  return JSON.stringify(
    HrisEmployeesAllValue4$outboundSchema.parse(hrisEmployeesAllValue4),
  );
}

export function hrisEmployeesAllValue4FromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllValue4' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllValue$inboundSchema: z.ZodType<
  HrisEmployeesAllValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisEmployeesAllValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => HrisEmployeesAllValue6$inboundSchema)),
]);

/** @internal */
export type HrisEmployeesAllValue$Outbound =
  | HrisEmployeesAllValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<HrisEmployeesAllValue6$Outbound>;

/** @internal */
export const HrisEmployeesAllValue$outboundSchema: z.ZodType<
  HrisEmployeesAllValue$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllValue
> = z.union([
  z.lazy(() => HrisEmployeesAllValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => HrisEmployeesAllValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllValue$ {
  /** @deprecated use `HrisEmployeesAllValue$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllValue$inboundSchema;
  /** @deprecated use `HrisEmployeesAllValue$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllValue$outboundSchema;
  /** @deprecated use `HrisEmployeesAllValue$Outbound` instead. */
  export type Outbound = HrisEmployeesAllValue$Outbound;
}

export function hrisEmployeesAllValueToJSON(
  hrisEmployeesAllValue: HrisEmployeesAllValue,
): string {
  return JSON.stringify(
    HrisEmployeesAllValue$outboundSchema.parse(hrisEmployeesAllValue),
  );
}

export function hrisEmployeesAllValueFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllValue' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllCustomFields$inboundSchema: z.ZodType<
  HrisEmployeesAllCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => HrisEmployeesAllValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => HrisEmployeesAllValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type HrisEmployeesAllCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | HrisEmployeesAllValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<HrisEmployeesAllValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const HrisEmployeesAllCustomFields$outboundSchema: z.ZodType<
  HrisEmployeesAllCustomFields$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => HrisEmployeesAllValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => HrisEmployeesAllValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllCustomFields$ {
  /** @deprecated use `HrisEmployeesAllCustomFields$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllCustomFields$inboundSchema;
  /** @deprecated use `HrisEmployeesAllCustomFields$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllCustomFields$outboundSchema;
  /** @deprecated use `HrisEmployeesAllCustomFields$Outbound` instead. */
  export type Outbound = HrisEmployeesAllCustomFields$Outbound;
}

export function hrisEmployeesAllCustomFieldsToJSON(
  hrisEmployeesAllCustomFields: HrisEmployeesAllCustomFields,
): string {
  return JSON.stringify(
    HrisEmployeesAllCustomFields$outboundSchema.parse(
      hrisEmployeesAllCustomFields,
    ),
  );
}

export function hrisEmployeesAllCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllCustomFields' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllSocialLinks$inboundSchema: z.ZodType<
  HrisEmployeesAllSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisEmployeesAllSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllSocialLinks$outboundSchema: z.ZodType<
  HrisEmployeesAllSocialLinks$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllSocialLinks$ {
  /** @deprecated use `HrisEmployeesAllSocialLinks$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllSocialLinks$inboundSchema;
  /** @deprecated use `HrisEmployeesAllSocialLinks$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllSocialLinks$outboundSchema;
  /** @deprecated use `HrisEmployeesAllSocialLinks$Outbound` instead. */
  export type Outbound = HrisEmployeesAllSocialLinks$Outbound;
}

export function hrisEmployeesAllSocialLinksToJSON(
  hrisEmployeesAllSocialLinks: HrisEmployeesAllSocialLinks,
): string {
  return JSON.stringify(
    HrisEmployeesAllSocialLinks$outboundSchema.parse(
      hrisEmployeesAllSocialLinks,
    ),
  );
}

export function hrisEmployeesAllSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllSocialLinks' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllAccountType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllAccountType
> = z.nativeEnum(HrisEmployeesAllAccountType);

/** @internal */
export const HrisEmployeesAllAccountType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAllAccountType
> = HrisEmployeesAllAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllAccountType$ {
  /** @deprecated use `HrisEmployeesAllAccountType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllAccountType$inboundSchema;
  /** @deprecated use `HrisEmployeesAllAccountType$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllAccountType$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllHrisEmployeesCurrency$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesCurrency> = z.nativeEnum(
    HrisEmployeesAllHrisEmployeesCurrency,
  );

/** @internal */
export const HrisEmployeesAllHrisEmployeesCurrency$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAllHrisEmployeesCurrency> =
    HrisEmployeesAllHrisEmployeesCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllHrisEmployeesCurrency$ {
  /** @deprecated use `HrisEmployeesAllHrisEmployeesCurrency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAllHrisEmployeesCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesAllHrisEmployeesCurrency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAllHrisEmployeesCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeesAllBankAccounts$inboundSchema: z.ZodType<
  HrisEmployeesAllBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(HrisEmployeesAllAccountType$inboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisEmployeesAllHrisEmployeesCurrency$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type HrisEmployeesAllBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllBankAccounts$outboundSchema: z.ZodType<
  HrisEmployeesAllBankAccounts$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(HrisEmployeesAllAccountType$outboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisEmployeesAllHrisEmployeesCurrency$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllBankAccounts$ {
  /** @deprecated use `HrisEmployeesAllBankAccounts$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllBankAccounts$inboundSchema;
  /** @deprecated use `HrisEmployeesAllBankAccounts$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllBankAccounts$outboundSchema;
  /** @deprecated use `HrisEmployeesAllBankAccounts$Outbound` instead. */
  export type Outbound = HrisEmployeesAllBankAccounts$Outbound;
}

export function hrisEmployeesAllBankAccountsToJSON(
  hrisEmployeesAllBankAccounts: HrisEmployeesAllBankAccounts,
): string {
  return JSON.stringify(
    HrisEmployeesAllBankAccounts$outboundSchema.parse(
      hrisEmployeesAllBankAccounts,
    ),
  );
}

export function hrisEmployeesAllBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllBankAccounts' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllProbationPeriod$inboundSchema: z.ZodType<
  HrisEmployeesAllProbationPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type HrisEmployeesAllProbationPeriod$Outbound = {
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
};

/** @internal */
export const HrisEmployeesAllProbationPeriod$outboundSchema: z.ZodType<
  HrisEmployeesAllProbationPeriod$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllProbationPeriod
> = z.object({
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllProbationPeriod$ {
  /** @deprecated use `HrisEmployeesAllProbationPeriod$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllProbationPeriod$inboundSchema;
  /** @deprecated use `HrisEmployeesAllProbationPeriod$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllProbationPeriod$outboundSchema;
  /** @deprecated use `HrisEmployeesAllProbationPeriod$Outbound` instead. */
  export type Outbound = HrisEmployeesAllProbationPeriod$Outbound;
}

export function hrisEmployeesAllProbationPeriodToJSON(
  hrisEmployeesAllProbationPeriod: HrisEmployeesAllProbationPeriod,
): string {
  return JSON.stringify(
    HrisEmployeesAllProbationPeriod$outboundSchema.parse(
      hrisEmployeesAllProbationPeriod,
    ),
  );
}

export function hrisEmployeesAllProbationPeriodFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllProbationPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllProbationPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllProbationPeriod' from JSON`,
  );
}

/** @internal */
export const CustomMappings$inboundSchema: z.ZodType<
  CustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomMappings$Outbound = {};

/** @internal */
export const CustomMappings$outboundSchema: z.ZodType<
  CustomMappings$Outbound,
  z.ZodTypeDef,
  CustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomMappings$ {
  /** @deprecated use `CustomMappings$inboundSchema` instead. */
  export const inboundSchema = CustomMappings$inboundSchema;
  /** @deprecated use `CustomMappings$outboundSchema` instead. */
  export const outboundSchema = CustomMappings$outboundSchema;
  /** @deprecated use `CustomMappings$Outbound` instead. */
  export type Outbound = CustomMappings$Outbound;
}

export function customMappingsToJSON(customMappings: CustomMappings): string {
  return JSON.stringify(CustomMappings$outboundSchema.parse(customMappings));
}

export function customMappingsFromJSON(
  jsonString: string,
): SafeParseResult<CustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllExtendPaths$inboundSchema: z.ZodType<
  HrisEmployeesAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisEmployeesAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisEmployeesAllExtendPaths$outboundSchema: z.ZodType<
  HrisEmployeesAllExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllExtendPaths$ {
  /** @deprecated use `HrisEmployeesAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllExtendPaths$inboundSchema;
  /** @deprecated use `HrisEmployeesAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllExtendPaths$outboundSchema;
  /** @deprecated use `HrisEmployeesAllExtendPaths$Outbound` instead. */
  export type Outbound = HrisEmployeesAllExtendPaths$Outbound;
}

export function hrisEmployeesAllExtendPathsToJSON(
  hrisEmployeesAllExtendPaths: HrisEmployeesAllExtendPaths,
): string {
  return JSON.stringify(
    HrisEmployeesAllExtendPaths$outboundSchema.parse(
      hrisEmployeesAllExtendPaths,
    ),
  );
}

export function hrisEmployeesAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllPassThrough$inboundSchema: z.ZodType<
  HrisEmployeesAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => HrisEmployeesAllExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisEmployeesAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisEmployeesAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisEmployeesAllPassThrough$outboundSchema: z.ZodType<
  HrisEmployeesAllPassThrough$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => HrisEmployeesAllExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllPassThrough$ {
  /** @deprecated use `HrisEmployeesAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllPassThrough$inboundSchema;
  /** @deprecated use `HrisEmployeesAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllPassThrough$outboundSchema;
  /** @deprecated use `HrisEmployeesAllPassThrough$Outbound` instead. */
  export type Outbound = HrisEmployeesAllPassThrough$Outbound;
}

export function hrisEmployeesAllPassThroughToJSON(
  hrisEmployeesAllPassThrough: HrisEmployeesAllPassThrough,
): string {
  return JSON.stringify(
    HrisEmployeesAllPassThrough$outboundSchema.parse(
      hrisEmployeesAllPassThrough,
    ),
  );
}

export function hrisEmployeesAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllPassThrough' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    first_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    middle_name: z.nullable(z.string()).optional(),
    display_name: z.nullable(z.string()).optional(),
    preferred_name: z.nullable(z.string()).optional(),
    initials: z.nullable(z.string()).optional(),
    salutation: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    marital_status: z.nullable(z.string()).optional(),
    partner: z.lazy(() => HrisEmployeesAllPerson$inboundSchema).optional(),
    division: z.nullable(z.string()).optional(),
    division_id: z.nullable(z.string()).optional(),
    department: z.nullable(z.string()).optional(),
    department_id: z.nullable(z.string()).optional(),
    department_name: z.nullable(z.string()).optional(),
    team: z.nullable(z.lazy(() => HrisEmployeesAllTeam$inboundSchema))
      .optional(),
    company_id: z.nullable(z.string()).optional(),
    company_name: z.nullable(z.string()).optional(),
    employment_start_date: z.nullable(z.string()).optional(),
    employment_end_date: z.nullable(z.string()).optional(),
    leaving_reason: z.nullable(HrisEmployeesAllLeavingReason$inboundSchema)
      .optional(),
    employee_number: z.nullable(z.string()).optional(),
    employment_status: z.nullable(
      HrisEmployeesAllEmploymentStatus$inboundSchema,
    ).optional(),
    employment_role: z.lazy(() => HrisEmployeesAllEmploymentRole$inboundSchema)
      .optional(),
    ethnicity: z.nullable(z.string()).optional(),
    manager: z.lazy(() => HrisEmployeesAllManager$inboundSchema).optional(),
    direct_reports: z.nullable(z.array(z.string())).optional(),
    social_security_number: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    deceased_on: z.nullable(z.string().transform(v => new RFCDate(v)))
      .optional(),
    country_of_birth: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    gender: z.nullable(HrisEmployeesAllGender$inboundSchema).optional(),
    pronouns: z.nullable(z.string()).optional(),
    preferred_language: z.nullable(z.string()).optional(),
    languages: z.array(z.string()).optional(),
    nationalities: z.array(z.string()).optional(),
    photo_url: z.nullable(z.string()).optional(),
    timezone: z.nullable(z.string()).optional(),
    source: z.nullable(z.string()).optional(),
    source_id: z.nullable(z.string()).optional(),
    record_url: z.nullable(z.string()).optional(),
    jobs: z.nullable(z.array(z.lazy(() => HrisEmployeesAllJob$inboundSchema)))
      .optional(),
    compensations: z.nullable(
      z.array(z.lazy(() => HrisEmployeesAllCompensation$inboundSchema)),
    ).optional(),
    works_remote: z.nullable(z.boolean()).optional(),
    addresses: z.array(z.lazy(() => HrisEmployeesAllAddresses$inboundSchema))
      .optional(),
    phone_numbers: z.array(
      z.lazy(() => HrisEmployeesAllPhoneNumbers$inboundSchema),
    ).optional(),
    emails: z.array(z.lazy(() => HrisEmployeesAllEmails$inboundSchema))
      .optional(),
    custom_fields: z.array(
      z.lazy(() => HrisEmployeesAllCustomFields$inboundSchema),
    ).optional(),
    social_links: z.array(
      z.lazy(() => HrisEmployeesAllSocialLinks$inboundSchema),
    ).optional(),
    bank_accounts: z.array(
      z.lazy(() => HrisEmployeesAllBankAccounts$inboundSchema),
    ).optional(),
    tax_code: z.nullable(z.string()).optional(),
    tax_id: z.nullable(z.string()).optional(),
    dietary_preference: z.nullable(z.string()).optional(),
    food_allergies: z.nullable(z.array(z.string())).optional(),
    probation_period: z.lazy(() =>
      HrisEmployeesAllProbationPeriod$inboundSchema
    ).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    custom_mappings: z.nullable(z.lazy(() => CustomMappings$inboundSchema))
      .optional(),
    row_version: z.nullable(z.string()).optional(),
    deleted: z.nullable(z.boolean()).optional(),
    updated_by: z.nullable(z.string()).optional(),
    created_by: z.nullable(z.string()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    pass_through: z.array(
      z.lazy(() => HrisEmployeesAllPassThrough$inboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "first_name": "firstName",
      "last_name": "lastName",
      "middle_name": "middleName",
      "display_name": "displayName",
      "preferred_name": "preferredName",
      "marital_status": "maritalStatus",
      "division_id": "divisionId",
      "department_id": "departmentId",
      "department_name": "departmentName",
      "company_id": "companyId",
      "company_name": "companyName",
      "employment_start_date": "employmentStartDate",
      "employment_end_date": "employmentEndDate",
      "leaving_reason": "leavingReason",
      "employee_number": "employeeNumber",
      "employment_status": "employmentStatus",
      "employment_role": "employmentRole",
      "direct_reports": "directReports",
      "social_security_number": "socialSecurityNumber",
      "deceased_on": "deceasedOn",
      "country_of_birth": "countryOfBirth",
      "preferred_language": "preferredLanguage",
      "photo_url": "photoUrl",
      "source_id": "sourceId",
      "record_url": "recordUrl",
      "works_remote": "worksRemote",
      "phone_numbers": "phoneNumbers",
      "custom_fields": "customFields",
      "social_links": "socialLinks",
      "bank_accounts": "bankAccounts",
      "tax_code": "taxCode",
      "tax_id": "taxId",
      "dietary_preference": "dietaryPreference",
      "food_allergies": "foodAllergies",
      "probation_period": "probationPeriod",
      "custom_mappings": "customMappings",
      "row_version": "rowVersion",
      "updated_by": "updatedBy",
      "created_by": "createdBy",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type Data$Outbound = {
  id?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  display_name?: string | null | undefined;
  preferred_name?: string | null | undefined;
  initials?: string | null | undefined;
  salutation?: string | null | undefined;
  title?: string | null | undefined;
  marital_status?: string | null | undefined;
  partner?: HrisEmployeesAllPerson$Outbound | undefined;
  division?: string | null | undefined;
  division_id?: string | null | undefined;
  department?: string | null | undefined;
  department_id?: string | null | undefined;
  department_name?: string | null | undefined;
  team?: HrisEmployeesAllTeam$Outbound | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  employment_start_date?: string | null | undefined;
  employment_end_date?: string | null | undefined;
  leaving_reason?: string | null | undefined;
  employee_number?: string | null | undefined;
  employment_status?: string | null | undefined;
  employment_role?: HrisEmployeesAllEmploymentRole$Outbound | undefined;
  ethnicity?: string | null | undefined;
  manager?: HrisEmployeesAllManager$Outbound | undefined;
  direct_reports?: Array<string> | null | undefined;
  social_security_number?: string | null | undefined;
  birthday?: string | null | undefined;
  deceased_on?: string | null | undefined;
  country_of_birth?: string | null | undefined;
  description?: string | null | undefined;
  gender?: string | null | undefined;
  pronouns?: string | null | undefined;
  preferred_language?: string | null | undefined;
  languages?: Array<string> | undefined;
  nationalities?: Array<string> | undefined;
  photo_url?: string | null | undefined;
  timezone?: string | null | undefined;
  source?: string | null | undefined;
  source_id?: string | null | undefined;
  record_url?: string | null | undefined;
  jobs?: Array<HrisEmployeesAllJob$Outbound> | null | undefined;
  compensations?:
    | Array<HrisEmployeesAllCompensation$Outbound>
    | null
    | undefined;
  works_remote?: boolean | null | undefined;
  addresses?: Array<HrisEmployeesAllAddresses$Outbound> | undefined;
  phone_numbers?: Array<HrisEmployeesAllPhoneNumbers$Outbound> | undefined;
  emails?: Array<HrisEmployeesAllEmails$Outbound> | undefined;
  custom_fields?: Array<HrisEmployeesAllCustomFields$Outbound> | undefined;
  social_links?: Array<HrisEmployeesAllSocialLinks$Outbound> | undefined;
  bank_accounts?: Array<HrisEmployeesAllBankAccounts$Outbound> | undefined;
  tax_code?: string | null | undefined;
  tax_id?: string | null | undefined;
  dietary_preference?: string | null | undefined;
  food_allergies?: Array<string> | null | undefined;
  probation_period?: HrisEmployeesAllProbationPeriod$Outbound | undefined;
  tags?: Array<string> | null | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  row_version?: string | null | undefined;
  deleted?: boolean | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<HrisEmployeesAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.nullable(z.string()).optional(),
    firstName: z.nullable(z.string()).optional(),
    lastName: z.nullable(z.string()).optional(),
    middleName: z.nullable(z.string()).optional(),
    displayName: z.nullable(z.string()).optional(),
    preferredName: z.nullable(z.string()).optional(),
    initials: z.nullable(z.string()).optional(),
    salutation: z.nullable(z.string()).optional(),
    title: z.nullable(z.string()).optional(),
    maritalStatus: z.nullable(z.string()).optional(),
    partner: z.lazy(() => HrisEmployeesAllPerson$outboundSchema).optional(),
    division: z.nullable(z.string()).optional(),
    divisionId: z.nullable(z.string()).optional(),
    department: z.nullable(z.string()).optional(),
    departmentId: z.nullable(z.string()).optional(),
    departmentName: z.nullable(z.string()).optional(),
    team: z.nullable(z.lazy(() => HrisEmployeesAllTeam$outboundSchema))
      .optional(),
    companyId: z.nullable(z.string()).optional(),
    companyName: z.nullable(z.string()).optional(),
    employmentStartDate: z.nullable(z.string()).optional(),
    employmentEndDate: z.nullable(z.string()).optional(),
    leavingReason: z.nullable(HrisEmployeesAllLeavingReason$outboundSchema)
      .optional(),
    employeeNumber: z.nullable(z.string()).optional(),
    employmentStatus: z.nullable(
      HrisEmployeesAllEmploymentStatus$outboundSchema,
    ).optional(),
    employmentRole: z.lazy(() => HrisEmployeesAllEmploymentRole$outboundSchema)
      .optional(),
    ethnicity: z.nullable(z.string()).optional(),
    manager: z.lazy(() => HrisEmployeesAllManager$outboundSchema).optional(),
    directReports: z.nullable(z.array(z.string())).optional(),
    socialSecurityNumber: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    deceasedOn: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    countryOfBirth: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    gender: z.nullable(HrisEmployeesAllGender$outboundSchema).optional(),
    pronouns: z.nullable(z.string()).optional(),
    preferredLanguage: z.nullable(z.string()).optional(),
    languages: z.array(z.string()).optional(),
    nationalities: z.array(z.string()).optional(),
    photoUrl: z.nullable(z.string()).optional(),
    timezone: z.nullable(z.string()).optional(),
    source: z.nullable(z.string()).optional(),
    sourceId: z.nullable(z.string()).optional(),
    recordUrl: z.nullable(z.string()).optional(),
    jobs: z.nullable(z.array(z.lazy(() => HrisEmployeesAllJob$outboundSchema)))
      .optional(),
    compensations: z.nullable(
      z.array(z.lazy(() => HrisEmployeesAllCompensation$outboundSchema)),
    ).optional(),
    worksRemote: z.nullable(z.boolean()).optional(),
    addresses: z.array(z.lazy(() => HrisEmployeesAllAddresses$outboundSchema))
      .optional(),
    phoneNumbers: z.array(
      z.lazy(() => HrisEmployeesAllPhoneNumbers$outboundSchema),
    ).optional(),
    emails: z.array(z.lazy(() => HrisEmployeesAllEmails$outboundSchema))
      .optional(),
    customFields: z.array(
      z.lazy(() => HrisEmployeesAllCustomFields$outboundSchema),
    ).optional(),
    socialLinks: z.array(
      z.lazy(() => HrisEmployeesAllSocialLinks$outboundSchema),
    ).optional(),
    bankAccounts: z.array(
      z.lazy(() => HrisEmployeesAllBankAccounts$outboundSchema),
    ).optional(),
    taxCode: z.nullable(z.string()).optional(),
    taxId: z.nullable(z.string()).optional(),
    dietaryPreference: z.nullable(z.string()).optional(),
    foodAllergies: z.nullable(z.array(z.string())).optional(),
    probationPeriod: z.lazy(() =>
      HrisEmployeesAllProbationPeriod$outboundSchema
    ).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    customMappings: z.nullable(z.lazy(() => CustomMappings$outboundSchema))
      .optional(),
    rowVersion: z.nullable(z.string()).optional(),
    deleted: z.nullable(z.boolean()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    passThrough: z.array(
      z.lazy(() => HrisEmployeesAllPassThrough$outboundSchema),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      firstName: "first_name",
      lastName: "last_name",
      middleName: "middle_name",
      displayName: "display_name",
      preferredName: "preferred_name",
      maritalStatus: "marital_status",
      divisionId: "division_id",
      departmentId: "department_id",
      departmentName: "department_name",
      companyId: "company_id",
      companyName: "company_name",
      employmentStartDate: "employment_start_date",
      employmentEndDate: "employment_end_date",
      leavingReason: "leaving_reason",
      employeeNumber: "employee_number",
      employmentStatus: "employment_status",
      employmentRole: "employment_role",
      directReports: "direct_reports",
      socialSecurityNumber: "social_security_number",
      deceasedOn: "deceased_on",
      countryOfBirth: "country_of_birth",
      preferredLanguage: "preferred_language",
      photoUrl: "photo_url",
      sourceId: "source_id",
      recordUrl: "record_url",
      worksRemote: "works_remote",
      phoneNumbers: "phone_numbers",
      customFields: "custom_fields",
      socialLinks: "social_links",
      bankAccounts: "bank_accounts",
      taxCode: "tax_code",
      taxId: "tax_id",
      dietaryPreference: "dietary_preference",
      foodAllergies: "food_allergies",
      probationPeriod: "probation_period",
      customMappings: "custom_mappings",
      rowVersion: "row_version",
      updatedBy: "updated_by",
      createdBy: "created_by",
      updatedAt: "updated_at",
      createdAt: "created_at",
      passThrough: "pass_through",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const Cursors$inboundSchema: z.ZodType<Cursors, z.ZodTypeDef, unknown> =
  z.object({
    previous: z.nullable(z.string()).optional(),
    current: z.nullable(z.string()).optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Cursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Cursors$outboundSchema: z.ZodType<
  Cursors$Outbound,
  z.ZodTypeDef,
  Cursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cursors$ {
  /** @deprecated use `Cursors$inboundSchema` instead. */
  export const inboundSchema = Cursors$inboundSchema;
  /** @deprecated use `Cursors$outboundSchema` instead. */
  export const outboundSchema = Cursors$outboundSchema;
  /** @deprecated use `Cursors$Outbound` instead. */
  export type Outbound = Cursors$Outbound;
}

export function cursorsToJSON(cursors: Cursors): string {
  return JSON.stringify(Cursors$outboundSchema.parse(cursors));
}

export function cursorsFromJSON(
  jsonString: string,
): SafeParseResult<Cursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cursors' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    items_on_page: z.number().int().optional(),
    cursors: z.lazy(() => Cursors$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "items_on_page": "itemsOnPage",
    });
  });

/** @internal */
export type Meta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: Cursors$Outbound | undefined;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    itemsOnPage: z.number().int().optional(),
    cursors: z.lazy(() => Cursors$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      itemsOnPage: "items_on_page",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({
    previous: z.nullable(z.string()).optional(),
    current: z.string().optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Links$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

export function linksToJSON(links: Links): string {
  return JSON.stringify(Links$outboundSchema.parse(links));
}

export function linksFromJSON(
  jsonString: string,
): SafeParseResult<Links, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Links$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Links' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => Data$inboundSchema)),
  meta: z.lazy(() => Meta$inboundSchema).optional(),
  links: z.lazy(() => Links$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisEmployeesAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<Data$Outbound>;
  meta?: Meta$Outbound | undefined;
  links?: Links$Outbound | undefined;
};

/** @internal */
export const HrisEmployeesAllResponseBody$outboundSchema: z.ZodType<
  HrisEmployeesAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => Data$outboundSchema)),
  meta: z.lazy(() => Meta$outboundSchema).optional(),
  links: z.lazy(() => Links$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllResponseBody$ {
  /** @deprecated use `HrisEmployeesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAllResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesAllResponseBody$Outbound;
}

export function hrisEmployeesAllResponseBodyToJSON(
  hrisEmployeesAllResponseBody: HrisEmployeesAllResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeesAllResponseBody$outboundSchema.parse(
      hrisEmployeesAllResponseBody,
    ),
  );
}

export function hrisEmployeesAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAllResponse$inboundSchema: z.ZodType<
  HrisEmployeesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisEmployeesAllResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisEmployeesAllHrisEmployeesResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisEmployeesAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisEmployeesAllResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisEmployeesAllHrisEmployeesResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisEmployeesAllResponse$outboundSchema: z.ZodType<
  HrisEmployeesAllResponse$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisEmployeesAllResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisEmployeesAllHrisEmployeesResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAllResponse$ {
  /** @deprecated use `HrisEmployeesAllResponse$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAllResponse$inboundSchema;
  /** @deprecated use `HrisEmployeesAllResponse$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAllResponse$outboundSchema;
  /** @deprecated use `HrisEmployeesAllResponse$Outbound` instead. */
  export type Outbound = HrisEmployeesAllResponse$Outbound;
}

export function hrisEmployeesAllResponseToJSON(
  hrisEmployeesAllResponse: HrisEmployeesAllResponse,
): string {
  return JSON.stringify(
    HrisEmployeesAllResponse$outboundSchema.parse(hrisEmployeesAllResponse),
  );
}

export function hrisEmployeesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAllResponse' from JSON`,
  );
}
