/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisPayrollsAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

/**
 * Apply filters
 */
export type HrisPayrollsAllQueryParamFilter = {
  /**
   * Return payrolls whose pay period is after the start date
   */
  startDate?: string | undefined;
  /**
   * Return payrolls whose pay period is before the end date
   */
  endDate?: string | undefined;
};

export type HrisPayrollsAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Apply filters
   */
  filter?: HrisPayrollsAllQueryParamFilter | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisPayrollsAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisPayrollsAllHrisPayrollsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The overview of the payroll totals.
 */
export type Totals = {
  /**
   * The total company debit for the payroll.
   */
  companyDebit?: number | null | undefined;
  /**
   * The total tax debit for the payroll.
   */
  taxDebit?: number | null | undefined;
  /**
   * The total check amount for the payroll.
   */
  checkAmount?: number | null | undefined;
  /**
   * The net pay amount for the payroll.
   */
  netPay?: number | null | undefined;
  /**
   * The gross pay amount for the payroll.
   */
  grossPay?: number | null | undefined;
  /**
   * The total amount of employer paid taxes for the payroll.
   */
  employerTaxes?: number | null | undefined;
  /**
   * The total amount of employee paid taxes for the payroll.
   */
  employeeTaxes?: number | null | undefined;
  /**
   * The total amount of company contributed benefits for the payroll.
   */
  employerBenefitContributions?: number | null | undefined;
  /**
   * The total amount of employee deducted benefits for the payroll.
   */
  employeeBenefitDeductions?: number | null | undefined;
};

export type Taxes = {
  /**
   * The name of the tax.
   */
  name?: string | null | undefined;
  /**
   * Paid by employer.
   */
  employer?: boolean | null | undefined;
  /**
   * The amount of the tax.
   */
  amount?: number | null | undefined;
};

export type Deductions = {
  /**
   * The name of the deduction.
   */
  name?: string | null | undefined;
  /**
   * The amount deducted.
   */
  amount?: number | null | undefined;
};

export type Benefits = {
  /**
   * The name of the benefit.
   */
  name?: string | null | undefined;
  /**
   * The amount deducted for benefit.
   */
  employeeDeduction?: number | null | undefined;
  /**
   * The amount of employer contribution.
   */
  employerContribution?: number | null | undefined;
};

export type Compensations = {
  /**
   * A unique identifier for an object.
   */
  employeeId: string | null;
  /**
   * The employee's net pay. Only available when payroll has been processed
   */
  netPay?: number | null | undefined;
  /**
   * The employee's gross pay. Only available when payroll has been processed
   */
  grossPay?: number | null | undefined;
  /**
   * An array of employer and employee taxes for the pay period.
   */
  taxes?: Array<Taxes> | null | undefined;
  /**
   * An array of employee deductions for the pay period.
   */
  deductions?: Array<Deductions> | null | undefined;
  /**
   * An array of employee benefits for the pay period.
   */
  benefits?: Array<Benefits> | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisPayrollsAllCustomMappings = {};

export type HrisPayrollsAllData = {
  /**
   * A unique identifier for an object.
   */
  id: string | null;
  /**
   * The unique identifier of the company.
   */
  companyId?: string | null | undefined;
  /**
   * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
   */
  processed: boolean | null;
  /**
   * The date the payroll was processed.
   */
  processedDate?: string | null | undefined;
  /**
   * The date on which employees will be paid for the payroll.
   */
  checkDate: string | null;
  /**
   * The start date, inclusive, of the pay period.
   */
  startDate: string | null;
  /**
   * The end date, inclusive, of the pay period.
   */
  endDate: string | null;
  /**
   * The overview of the payroll totals.
   */
  totals?: Totals | undefined;
  /**
   * An array of compensations for the payroll.
   */
  compensations?: Array<Compensations> | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: HrisPayrollsAllCustomMappings | null | undefined;
};

/**
 * Payrolls
 */
export type HrisPayrollsAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<HrisPayrollsAllData>;
};

export type HrisPayrollsAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Payrolls
   */
  twoHundredApplicationJsonObject?: HrisPayrollsAllResponseBody | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisPayrollsAllHrisPayrollsResponseBody
    | undefined;
};

/** @internal */
export const HrisPayrollsAllGlobals$inboundSchema: z.ZodType<
  HrisPayrollsAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisPayrollsAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisPayrollsAllGlobals$outboundSchema: z.ZodType<
  HrisPayrollsAllGlobals$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllGlobals$ {
  /** @deprecated use `HrisPayrollsAllGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllGlobals$inboundSchema;
  /** @deprecated use `HrisPayrollsAllGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsAllGlobals$outboundSchema;
  /** @deprecated use `HrisPayrollsAllGlobals$Outbound` instead. */
  export type Outbound = HrisPayrollsAllGlobals$Outbound;
}

export function hrisPayrollsAllGlobalsToJSON(
  hrisPayrollsAllGlobals: HrisPayrollsAllGlobals,
): string {
  return JSON.stringify(
    HrisPayrollsAllGlobals$outboundSchema.parse(hrisPayrollsAllGlobals),
  );
}

export function hrisPayrollsAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsAllGlobals' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllQueryParamFilter$inboundSchema: z.ZodType<
  HrisPayrollsAllQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().optional(),
  end_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type HrisPayrollsAllQueryParamFilter$Outbound = {
  start_date?: string | undefined;
  end_date?: string | undefined;
};

/** @internal */
export const HrisPayrollsAllQueryParamFilter$outboundSchema: z.ZodType<
  HrisPayrollsAllQueryParamFilter$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllQueryParamFilter
> = z.object({
  startDate: z.string().optional(),
  endDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllQueryParamFilter$ {
  /** @deprecated use `HrisPayrollsAllQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllQueryParamFilter$inboundSchema;
  /** @deprecated use `HrisPayrollsAllQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsAllQueryParamFilter$outboundSchema;
  /** @deprecated use `HrisPayrollsAllQueryParamFilter$Outbound` instead. */
  export type Outbound = HrisPayrollsAllQueryParamFilter$Outbound;
}

export function hrisPayrollsAllQueryParamFilterToJSON(
  hrisPayrollsAllQueryParamFilter: HrisPayrollsAllQueryParamFilter,
): string {
  return JSON.stringify(
    HrisPayrollsAllQueryParamFilter$outboundSchema.parse(
      hrisPayrollsAllQueryParamFilter,
    ),
  );
}

export function hrisPayrollsAllQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsAllQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsAllQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsAllQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllRequest$inboundSchema: z.ZodType<
  HrisPayrollsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  filter: z.lazy(() => HrisPayrollsAllQueryParamFilter$inboundSchema)
    .optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisPayrollsAllRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  filter?: HrisPayrollsAllQueryParamFilter$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisPayrollsAllRequest$outboundSchema: z.ZodType<
  HrisPayrollsAllRequest$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  filter: z.lazy(() => HrisPayrollsAllQueryParamFilter$outboundSchema)
    .optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllRequest$ {
  /** @deprecated use `HrisPayrollsAllRequest$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllRequest$inboundSchema;
  /** @deprecated use `HrisPayrollsAllRequest$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsAllRequest$outboundSchema;
  /** @deprecated use `HrisPayrollsAllRequest$Outbound` instead. */
  export type Outbound = HrisPayrollsAllRequest$Outbound;
}

export function hrisPayrollsAllRequestToJSON(
  hrisPayrollsAllRequest: HrisPayrollsAllRequest,
): string {
  return JSON.stringify(
    HrisPayrollsAllRequest$outboundSchema.parse(hrisPayrollsAllRequest),
  );
}

export function hrisPayrollsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsAllRequest' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllDetail$inboundSchema: z.ZodType<
  HrisPayrollsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisPayrollsAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisPayrollsAllDetail$outboundSchema: z.ZodType<
  HrisPayrollsAllDetail$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllDetail$ {
  /** @deprecated use `HrisPayrollsAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllDetail$inboundSchema;
  /** @deprecated use `HrisPayrollsAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsAllDetail$outboundSchema;
  /** @deprecated use `HrisPayrollsAllDetail$Outbound` instead. */
  export type Outbound = HrisPayrollsAllDetail$Outbound;
}

export function hrisPayrollsAllDetailToJSON(
  hrisPayrollsAllDetail: HrisPayrollsAllDetail,
): string {
  return JSON.stringify(
    HrisPayrollsAllDetail$outboundSchema.parse(hrisPayrollsAllDetail),
  );
}

export function hrisPayrollsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponseBody$inboundSchema: z.ZodType<
  HrisPayrollsAllHrisPayrollsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type HrisPayrollsAllHrisPayrollsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisPayrollsAllHrisPayrollsResponseBody$outboundSchema: z.ZodType<
  HrisPayrollsAllHrisPayrollsResponseBody$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllHrisPayrollsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllHrisPayrollsResponseBody$ {
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsAllHrisPayrollsResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsAllHrisPayrollsResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsAllHrisPayrollsResponseBody$Outbound` instead. */
  export type Outbound = HrisPayrollsAllHrisPayrollsResponseBody$Outbound;
}

export function hrisPayrollsAllHrisPayrollsResponseBodyToJSON(
  hrisPayrollsAllHrisPayrollsResponseBody:
    HrisPayrollsAllHrisPayrollsResponseBody,
): string {
  return JSON.stringify(
    HrisPayrollsAllHrisPayrollsResponseBody$outboundSchema.parse(
      hrisPayrollsAllHrisPayrollsResponseBody,
    ),
  );
}

export function hrisPayrollsAllHrisPayrollsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisPayrollsAllHrisPayrollsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisPayrollsAllHrisPayrollsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisPayrollsAllHrisPayrollsResponseBody' from JSON`,
  );
}

/** @internal */
export const Totals$inboundSchema: z.ZodType<Totals, z.ZodTypeDef, unknown> = z
  .object({
    company_debit: z.nullable(z.number()).optional(),
    tax_debit: z.nullable(z.number()).optional(),
    check_amount: z.nullable(z.number()).optional(),
    net_pay: z.nullable(z.number()).optional(),
    gross_pay: z.nullable(z.number()).optional(),
    employer_taxes: z.nullable(z.number()).optional(),
    employee_taxes: z.nullable(z.number()).optional(),
    employer_benefit_contributions: z.nullable(z.number()).optional(),
    employee_benefit_deductions: z.nullable(z.number()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "company_debit": "companyDebit",
      "tax_debit": "taxDebit",
      "check_amount": "checkAmount",
      "net_pay": "netPay",
      "gross_pay": "grossPay",
      "employer_taxes": "employerTaxes",
      "employee_taxes": "employeeTaxes",
      "employer_benefit_contributions": "employerBenefitContributions",
      "employee_benefit_deductions": "employeeBenefitDeductions",
    });
  });

/** @internal */
export type Totals$Outbound = {
  company_debit?: number | null | undefined;
  tax_debit?: number | null | undefined;
  check_amount?: number | null | undefined;
  net_pay?: number | null | undefined;
  gross_pay?: number | null | undefined;
  employer_taxes?: number | null | undefined;
  employee_taxes?: number | null | undefined;
  employer_benefit_contributions?: number | null | undefined;
  employee_benefit_deductions?: number | null | undefined;
};

/** @internal */
export const Totals$outboundSchema: z.ZodType<
  Totals$Outbound,
  z.ZodTypeDef,
  Totals
> = z.object({
  companyDebit: z.nullable(z.number()).optional(),
  taxDebit: z.nullable(z.number()).optional(),
  checkAmount: z.nullable(z.number()).optional(),
  netPay: z.nullable(z.number()).optional(),
  grossPay: z.nullable(z.number()).optional(),
  employerTaxes: z.nullable(z.number()).optional(),
  employeeTaxes: z.nullable(z.number()).optional(),
  employerBenefitContributions: z.nullable(z.number()).optional(),
  employeeBenefitDeductions: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    companyDebit: "company_debit",
    taxDebit: "tax_debit",
    checkAmount: "check_amount",
    netPay: "net_pay",
    grossPay: "gross_pay",
    employerTaxes: "employer_taxes",
    employeeTaxes: "employee_taxes",
    employerBenefitContributions: "employer_benefit_contributions",
    employeeBenefitDeductions: "employee_benefit_deductions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Totals$ {
  /** @deprecated use `Totals$inboundSchema` instead. */
  export const inboundSchema = Totals$inboundSchema;
  /** @deprecated use `Totals$outboundSchema` instead. */
  export const outboundSchema = Totals$outboundSchema;
  /** @deprecated use `Totals$Outbound` instead. */
  export type Outbound = Totals$Outbound;
}

export function totalsToJSON(totals: Totals): string {
  return JSON.stringify(Totals$outboundSchema.parse(totals));
}

export function totalsFromJSON(
  jsonString: string,
): SafeParseResult<Totals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Totals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Totals' from JSON`,
  );
}

/** @internal */
export const Taxes$inboundSchema: z.ZodType<Taxes, z.ZodTypeDef, unknown> = z
  .object({
    name: z.nullable(z.string()).optional(),
    employer: z.nullable(z.boolean()).optional(),
    amount: z.nullable(z.number()).optional(),
  });

/** @internal */
export type Taxes$Outbound = {
  name?: string | null | undefined;
  employer?: boolean | null | undefined;
  amount?: number | null | undefined;
};

/** @internal */
export const Taxes$outboundSchema: z.ZodType<
  Taxes$Outbound,
  z.ZodTypeDef,
  Taxes
> = z.object({
  name: z.nullable(z.string()).optional(),
  employer: z.nullable(z.boolean()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Taxes$ {
  /** @deprecated use `Taxes$inboundSchema` instead. */
  export const inboundSchema = Taxes$inboundSchema;
  /** @deprecated use `Taxes$outboundSchema` instead. */
  export const outboundSchema = Taxes$outboundSchema;
  /** @deprecated use `Taxes$Outbound` instead. */
  export type Outbound = Taxes$Outbound;
}

export function taxesToJSON(taxes: Taxes): string {
  return JSON.stringify(Taxes$outboundSchema.parse(taxes));
}

export function taxesFromJSON(
  jsonString: string,
): SafeParseResult<Taxes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Taxes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Taxes' from JSON`,
  );
}

/** @internal */
export const Deductions$inboundSchema: z.ZodType<
  Deductions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/** @internal */
export type Deductions$Outbound = {
  name?: string | null | undefined;
  amount?: number | null | undefined;
};

/** @internal */
export const Deductions$outboundSchema: z.ZodType<
  Deductions$Outbound,
  z.ZodTypeDef,
  Deductions
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deductions$ {
  /** @deprecated use `Deductions$inboundSchema` instead. */
  export const inboundSchema = Deductions$inboundSchema;
  /** @deprecated use `Deductions$outboundSchema` instead. */
  export const outboundSchema = Deductions$outboundSchema;
  /** @deprecated use `Deductions$Outbound` instead. */
  export type Outbound = Deductions$Outbound;
}

export function deductionsToJSON(deductions: Deductions): string {
  return JSON.stringify(Deductions$outboundSchema.parse(deductions));
}

export function deductionsFromJSON(
  jsonString: string,
): SafeParseResult<Deductions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Deductions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deductions' from JSON`,
  );
}

/** @internal */
export const Benefits$inboundSchema: z.ZodType<
  Benefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  employee_deduction: z.nullable(z.number()).optional(),
  employer_contribution: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_deduction": "employeeDeduction",
    "employer_contribution": "employerContribution",
  });
});

/** @internal */
export type Benefits$Outbound = {
  name?: string | null | undefined;
  employee_deduction?: number | null | undefined;
  employer_contribution?: number | null | undefined;
};

/** @internal */
export const Benefits$outboundSchema: z.ZodType<
  Benefits$Outbound,
  z.ZodTypeDef,
  Benefits
> = z.object({
  name: z.nullable(z.string()).optional(),
  employeeDeduction: z.nullable(z.number()).optional(),
  employerContribution: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeDeduction: "employee_deduction",
    employerContribution: "employer_contribution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Benefits$ {
  /** @deprecated use `Benefits$inboundSchema` instead. */
  export const inboundSchema = Benefits$inboundSchema;
  /** @deprecated use `Benefits$outboundSchema` instead. */
  export const outboundSchema = Benefits$outboundSchema;
  /** @deprecated use `Benefits$Outbound` instead. */
  export type Outbound = Benefits$Outbound;
}

export function benefitsToJSON(benefits: Benefits): string {
  return JSON.stringify(Benefits$outboundSchema.parse(benefits));
}

export function benefitsFromJSON(
  jsonString: string,
): SafeParseResult<Benefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Benefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Benefits' from JSON`,
  );
}

/** @internal */
export const Compensations$inboundSchema: z.ZodType<
  Compensations,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.nullable(z.string()),
  net_pay: z.nullable(z.number()).optional(),
  gross_pay: z.nullable(z.number()).optional(),
  taxes: z.nullable(z.array(z.lazy(() => Taxes$inboundSchema))).optional(),
  deductions: z.nullable(z.array(z.lazy(() => Deductions$inboundSchema)))
    .optional(),
  benefits: z.nullable(z.array(z.lazy(() => Benefits$inboundSchema)))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "net_pay": "netPay",
    "gross_pay": "grossPay",
  });
});

/** @internal */
export type Compensations$Outbound = {
  employee_id: string | null;
  net_pay?: number | null | undefined;
  gross_pay?: number | null | undefined;
  taxes?: Array<Taxes$Outbound> | null | undefined;
  deductions?: Array<Deductions$Outbound> | null | undefined;
  benefits?: Array<Benefits$Outbound> | null | undefined;
};

/** @internal */
export const Compensations$outboundSchema: z.ZodType<
  Compensations$Outbound,
  z.ZodTypeDef,
  Compensations
> = z.object({
  employeeId: z.nullable(z.string()),
  netPay: z.nullable(z.number()).optional(),
  grossPay: z.nullable(z.number()).optional(),
  taxes: z.nullable(z.array(z.lazy(() => Taxes$outboundSchema))).optional(),
  deductions: z.nullable(z.array(z.lazy(() => Deductions$outboundSchema)))
    .optional(),
  benefits: z.nullable(z.array(z.lazy(() => Benefits$outboundSchema)))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    netPay: "net_pay",
    grossPay: "gross_pay",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Compensations$ {
  /** @deprecated use `Compensations$inboundSchema` instead. */
  export const inboundSchema = Compensations$inboundSchema;
  /** @deprecated use `Compensations$outboundSchema` instead. */
  export const outboundSchema = Compensations$outboundSchema;
  /** @deprecated use `Compensations$Outbound` instead. */
  export type Outbound = Compensations$Outbound;
}

export function compensationsToJSON(compensations: Compensations): string {
  return JSON.stringify(Compensations$outboundSchema.parse(compensations));
}

export function compensationsFromJSON(
  jsonString: string,
): SafeParseResult<Compensations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Compensations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Compensations' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllCustomMappings$inboundSchema: z.ZodType<
  HrisPayrollsAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisPayrollsAllCustomMappings$Outbound = {};

/** @internal */
export const HrisPayrollsAllCustomMappings$outboundSchema: z.ZodType<
  HrisPayrollsAllCustomMappings$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllCustomMappings$ {
  /** @deprecated use `HrisPayrollsAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllCustomMappings$inboundSchema;
  /** @deprecated use `HrisPayrollsAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsAllCustomMappings$outboundSchema;
  /** @deprecated use `HrisPayrollsAllCustomMappings$Outbound` instead. */
  export type Outbound = HrisPayrollsAllCustomMappings$Outbound;
}

export function hrisPayrollsAllCustomMappingsToJSON(
  hrisPayrollsAllCustomMappings: HrisPayrollsAllCustomMappings,
): string {
  return JSON.stringify(
    HrisPayrollsAllCustomMappings$outboundSchema.parse(
      hrisPayrollsAllCustomMappings,
    ),
  );
}

export function hrisPayrollsAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllData$inboundSchema: z.ZodType<
  HrisPayrollsAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  company_id: z.nullable(z.string()).optional(),
  processed: z.nullable(z.boolean()),
  processed_date: z.nullable(z.string()).optional(),
  check_date: z.nullable(z.string()),
  start_date: z.nullable(z.string()),
  end_date: z.nullable(z.string()),
  totals: z.lazy(() => Totals$inboundSchema).optional(),
  compensations: z.array(z.lazy(() => Compensations$inboundSchema)).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => HrisPayrollsAllCustomMappings$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "processed_date": "processedDate",
    "check_date": "checkDate",
    "start_date": "startDate",
    "end_date": "endDate",
    "custom_mappings": "customMappings",
  });
});

/** @internal */
export type HrisPayrollsAllData$Outbound = {
  id: string | null;
  company_id?: string | null | undefined;
  processed: boolean | null;
  processed_date?: string | null | undefined;
  check_date: string | null;
  start_date: string | null;
  end_date: string | null;
  totals?: Totals$Outbound | undefined;
  compensations?: Array<Compensations$Outbound> | undefined;
  custom_mappings?: HrisPayrollsAllCustomMappings$Outbound | null | undefined;
};

/** @internal */
export const HrisPayrollsAllData$outboundSchema: z.ZodType<
  HrisPayrollsAllData$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllData
> = z.object({
  id: z.nullable(z.string()),
  companyId: z.nullable(z.string()).optional(),
  processed: z.nullable(z.boolean()),
  processedDate: z.nullable(z.string()).optional(),
  checkDate: z.nullable(z.string()),
  startDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
  totals: z.lazy(() => Totals$outboundSchema).optional(),
  compensations: z.array(z.lazy(() => Compensations$outboundSchema)).optional(),
  customMappings: z.nullable(
    z.lazy(() => HrisPayrollsAllCustomMappings$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    processedDate: "processed_date",
    checkDate: "check_date",
    startDate: "start_date",
    endDate: "end_date",
    customMappings: "custom_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllData$ {
  /** @deprecated use `HrisPayrollsAllData$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllData$inboundSchema;
  /** @deprecated use `HrisPayrollsAllData$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsAllData$outboundSchema;
  /** @deprecated use `HrisPayrollsAllData$Outbound` instead. */
  export type Outbound = HrisPayrollsAllData$Outbound;
}

export function hrisPayrollsAllDataToJSON(
  hrisPayrollsAllData: HrisPayrollsAllData,
): string {
  return JSON.stringify(
    HrisPayrollsAllData$outboundSchema.parse(hrisPayrollsAllData),
  );
}

export function hrisPayrollsAllDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsAllData' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllResponseBody$inboundSchema: z.ZodType<
  HrisPayrollsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => HrisPayrollsAllData$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisPayrollsAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<HrisPayrollsAllData$Outbound>;
};

/** @internal */
export const HrisPayrollsAllResponseBody$outboundSchema: z.ZodType<
  HrisPayrollsAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => HrisPayrollsAllData$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllResponseBody$ {
  /** @deprecated use `HrisPayrollsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsAllResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsAllResponseBody$Outbound` instead. */
  export type Outbound = HrisPayrollsAllResponseBody$Outbound;
}

export function hrisPayrollsAllResponseBodyToJSON(
  hrisPayrollsAllResponseBody: HrisPayrollsAllResponseBody,
): string {
  return JSON.stringify(
    HrisPayrollsAllResponseBody$outboundSchema.parse(
      hrisPayrollsAllResponseBody,
    ),
  );
}

export function hrisPayrollsAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsAllResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsAllResponse$inboundSchema: z.ZodType<
  HrisPayrollsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisPayrollsAllResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisPayrollsAllHrisPayrollsResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisPayrollsAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisPayrollsAllResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisPayrollsAllHrisPayrollsResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisPayrollsAllResponse$outboundSchema: z.ZodType<
  HrisPayrollsAllResponse$Outbound,
  z.ZodTypeDef,
  HrisPayrollsAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisPayrollsAllResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisPayrollsAllHrisPayrollsResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsAllResponse$ {
  /** @deprecated use `HrisPayrollsAllResponse$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsAllResponse$inboundSchema;
  /** @deprecated use `HrisPayrollsAllResponse$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsAllResponse$outboundSchema;
  /** @deprecated use `HrisPayrollsAllResponse$Outbound` instead. */
  export type Outbound = HrisPayrollsAllResponse$Outbound;
}

export function hrisPayrollsAllResponseToJSON(
  hrisPayrollsAllResponse: HrisPayrollsAllResponse,
): string {
  return JSON.stringify(
    HrisPayrollsAllResponse$outboundSchema.parse(hrisPayrollsAllResponse),
  );
}

export function hrisPayrollsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsAllResponse' from JSON`,
  );
}
