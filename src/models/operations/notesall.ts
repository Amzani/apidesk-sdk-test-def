/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotesAllSecurity = {
  apiKey: string;
};

export type NotesAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type NotesAllNotesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type NotesAllCustomMappings = {};

export type NotesAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type NotesAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<NotesAllExtendPaths> | undefined;
};

export type NotesAllData = {
  /**
   * The unique identifier of the note
   */
  id?: string | undefined;
  /**
   * The title of the note
   */
  title?: string | null | undefined;
  /**
   * The content of the note.
   */
  content?: string | null | undefined;
  /**
   * The user that owns the note.
   */
  ownerId?: string | null | undefined;
  /**
   * The contact that is related to the note.
   */
  contactId?: string | null | undefined;
  /**
   * The company that is related to the note.
   */
  companyId?: string | null | undefined;
  /**
   * The opportunity that is related to the note.
   */
  opportunityId?: string | null | undefined;
  /**
   * The lead that is related to the note.
   */
  leadId?: string | null | undefined;
  /**
   * Whether the Note is active or not.
   */
  active?: boolean | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: NotesAllCustomMappings | null | undefined;
  /**
   * The user that last updated the note.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user that created the note.
   */
  createdBy?: string | null | undefined;
  /**
   * The timestamp when the note was last updated
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp when the note was created
   */
  createdAt?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<NotesAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type NotesAllCursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type NotesAllMeta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: NotesAllCursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type NotesAllLinks = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Notes
 */
export type NotesAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<NotesAllData>;
  /**
   * Response metadata
   */
  meta?: NotesAllMeta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: NotesAllLinks | undefined;
};

export type NotesAllResponse = NotesAllNotesResponseBody | NotesAllResponseBody;

/** @internal */
export const NotesAllSecurity$inboundSchema: z.ZodType<
  NotesAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type NotesAllSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const NotesAllSecurity$outboundSchema: z.ZodType<
  NotesAllSecurity$Outbound,
  z.ZodTypeDef,
  NotesAllSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllSecurity$ {
  /** @deprecated use `NotesAllSecurity$inboundSchema` instead. */
  export const inboundSchema = NotesAllSecurity$inboundSchema;
  /** @deprecated use `NotesAllSecurity$outboundSchema` instead. */
  export const outboundSchema = NotesAllSecurity$outboundSchema;
  /** @deprecated use `NotesAllSecurity$Outbound` instead. */
  export type Outbound = NotesAllSecurity$Outbound;
}

export function notesAllSecurityToJSON(
  notesAllSecurity: NotesAllSecurity,
): string {
  return JSON.stringify(
    NotesAllSecurity$outboundSchema.parse(notesAllSecurity),
  );
}

export function notesAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllSecurity' from JSON`,
  );
}

/** @internal */
export const NotesAllRequest$inboundSchema: z.ZodType<
  NotesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type NotesAllRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const NotesAllRequest$outboundSchema: z.ZodType<
  NotesAllRequest$Outbound,
  z.ZodTypeDef,
  NotesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllRequest$ {
  /** @deprecated use `NotesAllRequest$inboundSchema` instead. */
  export const inboundSchema = NotesAllRequest$inboundSchema;
  /** @deprecated use `NotesAllRequest$outboundSchema` instead. */
  export const outboundSchema = NotesAllRequest$outboundSchema;
  /** @deprecated use `NotesAllRequest$Outbound` instead. */
  export type Outbound = NotesAllRequest$Outbound;
}

export function notesAllRequestToJSON(
  notesAllRequest: NotesAllRequest,
): string {
  return JSON.stringify(NotesAllRequest$outboundSchema.parse(notesAllRequest));
}

export function notesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllRequest' from JSON`,
  );
}

/** @internal */
export const NotesAllDetail$inboundSchema: z.ZodType<
  NotesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const NotesAllDetail$outboundSchema: z.ZodType<
  NotesAllDetail$Outbound,
  z.ZodTypeDef,
  NotesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllDetail$ {
  /** @deprecated use `NotesAllDetail$inboundSchema` instead. */
  export const inboundSchema = NotesAllDetail$inboundSchema;
  /** @deprecated use `NotesAllDetail$outboundSchema` instead. */
  export const outboundSchema = NotesAllDetail$outboundSchema;
  /** @deprecated use `NotesAllDetail$Outbound` instead. */
  export type Outbound = NotesAllDetail$Outbound;
}

export function notesAllDetailToJSON(notesAllDetail: NotesAllDetail): string {
  return JSON.stringify(NotesAllDetail$outboundSchema.parse(notesAllDetail));
}

export function notesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllDetail' from JSON`,
  );
}

/** @internal */
export const NotesAllNotesResponseBody$inboundSchema: z.ZodType<
  NotesAllNotesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type NotesAllNotesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesAllNotesResponseBody$outboundSchema: z.ZodType<
  NotesAllNotesResponseBody$Outbound,
  z.ZodTypeDef,
  NotesAllNotesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllNotesResponseBody$ {
  /** @deprecated use `NotesAllNotesResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesAllNotesResponseBody$inboundSchema;
  /** @deprecated use `NotesAllNotesResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesAllNotesResponseBody$outboundSchema;
  /** @deprecated use `NotesAllNotesResponseBody$Outbound` instead. */
  export type Outbound = NotesAllNotesResponseBody$Outbound;
}

export function notesAllNotesResponseBodyToJSON(
  notesAllNotesResponseBody: NotesAllNotesResponseBody,
): string {
  return JSON.stringify(
    NotesAllNotesResponseBody$outboundSchema.parse(notesAllNotesResponseBody),
  );
}

export function notesAllNotesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllNotesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllNotesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllNotesResponseBody' from JSON`,
  );
}

/** @internal */
export const NotesAllCustomMappings$inboundSchema: z.ZodType<
  NotesAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NotesAllCustomMappings$Outbound = {};

/** @internal */
export const NotesAllCustomMappings$outboundSchema: z.ZodType<
  NotesAllCustomMappings$Outbound,
  z.ZodTypeDef,
  NotesAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllCustomMappings$ {
  /** @deprecated use `NotesAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema = NotesAllCustomMappings$inboundSchema;
  /** @deprecated use `NotesAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema = NotesAllCustomMappings$outboundSchema;
  /** @deprecated use `NotesAllCustomMappings$Outbound` instead. */
  export type Outbound = NotesAllCustomMappings$Outbound;
}

export function notesAllCustomMappingsToJSON(
  notesAllCustomMappings: NotesAllCustomMappings,
): string {
  return JSON.stringify(
    NotesAllCustomMappings$outboundSchema.parse(notesAllCustomMappings),
  );
}

export function notesAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const NotesAllExtendPaths$inboundSchema: z.ZodType<
  NotesAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type NotesAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const NotesAllExtendPaths$outboundSchema: z.ZodType<
  NotesAllExtendPaths$Outbound,
  z.ZodTypeDef,
  NotesAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllExtendPaths$ {
  /** @deprecated use `NotesAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = NotesAllExtendPaths$inboundSchema;
  /** @deprecated use `NotesAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = NotesAllExtendPaths$outboundSchema;
  /** @deprecated use `NotesAllExtendPaths$Outbound` instead. */
  export type Outbound = NotesAllExtendPaths$Outbound;
}

export function notesAllExtendPathsToJSON(
  notesAllExtendPaths: NotesAllExtendPaths,
): string {
  return JSON.stringify(
    NotesAllExtendPaths$outboundSchema.parse(notesAllExtendPaths),
  );
}

export function notesAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const NotesAllPassThrough$inboundSchema: z.ZodType<
  NotesAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => NotesAllExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type NotesAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<NotesAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const NotesAllPassThrough$outboundSchema: z.ZodType<
  NotesAllPassThrough$Outbound,
  z.ZodTypeDef,
  NotesAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => NotesAllExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllPassThrough$ {
  /** @deprecated use `NotesAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = NotesAllPassThrough$inboundSchema;
  /** @deprecated use `NotesAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = NotesAllPassThrough$outboundSchema;
  /** @deprecated use `NotesAllPassThrough$Outbound` instead. */
  export type Outbound = NotesAllPassThrough$Outbound;
}

export function notesAllPassThroughToJSON(
  notesAllPassThrough: NotesAllPassThrough,
): string {
  return JSON.stringify(
    NotesAllPassThrough$outboundSchema.parse(notesAllPassThrough),
  );
}

export function notesAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllPassThrough' from JSON`,
  );
}

/** @internal */
export const NotesAllData$inboundSchema: z.ZodType<
  NotesAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => NotesAllCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => NotesAllPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type NotesAllData$Outbound = {
  id?: string | undefined;
  title?: string | null | undefined;
  content?: string | null | undefined;
  owner_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  active?: boolean | null | undefined;
  custom_mappings?: NotesAllCustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<NotesAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const NotesAllData$outboundSchema: z.ZodType<
  NotesAllData$Outbound,
  z.ZodTypeDef,
  NotesAllData
> = z.object({
  id: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  content: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  customMappings: z.nullable(
    z.lazy(() => NotesAllCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => NotesAllPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllData$ {
  /** @deprecated use `NotesAllData$inboundSchema` instead. */
  export const inboundSchema = NotesAllData$inboundSchema;
  /** @deprecated use `NotesAllData$outboundSchema` instead. */
  export const outboundSchema = NotesAllData$outboundSchema;
  /** @deprecated use `NotesAllData$Outbound` instead. */
  export type Outbound = NotesAllData$Outbound;
}

export function notesAllDataToJSON(notesAllData: NotesAllData): string {
  return JSON.stringify(NotesAllData$outboundSchema.parse(notesAllData));
}

export function notesAllDataFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllData' from JSON`,
  );
}

/** @internal */
export const NotesAllCursors$inboundSchema: z.ZodType<
  NotesAllCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type NotesAllCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const NotesAllCursors$outboundSchema: z.ZodType<
  NotesAllCursors$Outbound,
  z.ZodTypeDef,
  NotesAllCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllCursors$ {
  /** @deprecated use `NotesAllCursors$inboundSchema` instead. */
  export const inboundSchema = NotesAllCursors$inboundSchema;
  /** @deprecated use `NotesAllCursors$outboundSchema` instead. */
  export const outboundSchema = NotesAllCursors$outboundSchema;
  /** @deprecated use `NotesAllCursors$Outbound` instead. */
  export type Outbound = NotesAllCursors$Outbound;
}

export function notesAllCursorsToJSON(
  notesAllCursors: NotesAllCursors,
): string {
  return JSON.stringify(NotesAllCursors$outboundSchema.parse(notesAllCursors));
}

export function notesAllCursorsFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllCursors' from JSON`,
  );
}

/** @internal */
export const NotesAllMeta$inboundSchema: z.ZodType<
  NotesAllMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => NotesAllCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type NotesAllMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: NotesAllCursors$Outbound | undefined;
};

/** @internal */
export const NotesAllMeta$outboundSchema: z.ZodType<
  NotesAllMeta$Outbound,
  z.ZodTypeDef,
  NotesAllMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => NotesAllCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllMeta$ {
  /** @deprecated use `NotesAllMeta$inboundSchema` instead. */
  export const inboundSchema = NotesAllMeta$inboundSchema;
  /** @deprecated use `NotesAllMeta$outboundSchema` instead. */
  export const outboundSchema = NotesAllMeta$outboundSchema;
  /** @deprecated use `NotesAllMeta$Outbound` instead. */
  export type Outbound = NotesAllMeta$Outbound;
}

export function notesAllMetaToJSON(notesAllMeta: NotesAllMeta): string {
  return JSON.stringify(NotesAllMeta$outboundSchema.parse(notesAllMeta));
}

export function notesAllMetaFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllMeta' from JSON`,
  );
}

/** @internal */
export const NotesAllLinks$inboundSchema: z.ZodType<
  NotesAllLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type NotesAllLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const NotesAllLinks$outboundSchema: z.ZodType<
  NotesAllLinks$Outbound,
  z.ZodTypeDef,
  NotesAllLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllLinks$ {
  /** @deprecated use `NotesAllLinks$inboundSchema` instead. */
  export const inboundSchema = NotesAllLinks$inboundSchema;
  /** @deprecated use `NotesAllLinks$outboundSchema` instead. */
  export const outboundSchema = NotesAllLinks$outboundSchema;
  /** @deprecated use `NotesAllLinks$Outbound` instead. */
  export type Outbound = NotesAllLinks$Outbound;
}

export function notesAllLinksToJSON(notesAllLinks: NotesAllLinks): string {
  return JSON.stringify(NotesAllLinks$outboundSchema.parse(notesAllLinks));
}

export function notesAllLinksFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllLinks' from JSON`,
  );
}

/** @internal */
export const NotesAllResponseBody$inboundSchema: z.ZodType<
  NotesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => NotesAllData$inboundSchema)),
  meta: z.lazy(() => NotesAllMeta$inboundSchema).optional(),
  links: z.lazy(() => NotesAllLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type NotesAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<NotesAllData$Outbound>;
  meta?: NotesAllMeta$Outbound | undefined;
  links?: NotesAllLinks$Outbound | undefined;
};

/** @internal */
export const NotesAllResponseBody$outboundSchema: z.ZodType<
  NotesAllResponseBody$Outbound,
  z.ZodTypeDef,
  NotesAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => NotesAllData$outboundSchema)),
  meta: z.lazy(() => NotesAllMeta$outboundSchema).optional(),
  links: z.lazy(() => NotesAllLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllResponseBody$ {
  /** @deprecated use `NotesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesAllResponseBody$inboundSchema;
  /** @deprecated use `NotesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesAllResponseBody$outboundSchema;
  /** @deprecated use `NotesAllResponseBody$Outbound` instead. */
  export type Outbound = NotesAllResponseBody$Outbound;
}

export function notesAllResponseBodyToJSON(
  notesAllResponseBody: NotesAllResponseBody,
): string {
  return JSON.stringify(
    NotesAllResponseBody$outboundSchema.parse(notesAllResponseBody),
  );
}

export function notesAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllResponseBody' from JSON`,
  );
}

/** @internal */
export const NotesAllResponse$inboundSchema: z.ZodType<
  NotesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => NotesAllNotesResponseBody$inboundSchema),
  z.lazy(() => NotesAllResponseBody$inboundSchema),
]);

/** @internal */
export type NotesAllResponse$Outbound =
  | NotesAllNotesResponseBody$Outbound
  | NotesAllResponseBody$Outbound;

/** @internal */
export const NotesAllResponse$outboundSchema: z.ZodType<
  NotesAllResponse$Outbound,
  z.ZodTypeDef,
  NotesAllResponse
> = z.union([
  z.lazy(() => NotesAllNotesResponseBody$outboundSchema),
  z.lazy(() => NotesAllResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAllResponse$ {
  /** @deprecated use `NotesAllResponse$inboundSchema` instead. */
  export const inboundSchema = NotesAllResponse$inboundSchema;
  /** @deprecated use `NotesAllResponse$outboundSchema` instead. */
  export const outboundSchema = NotesAllResponse$outboundSchema;
  /** @deprecated use `NotesAllResponse$Outbound` instead. */
  export type Outbound = NotesAllResponse$Outbound;
}

export function notesAllResponseToJSON(
  notesAllResponse: NotesAllResponse,
): string {
  return JSON.stringify(
    NotesAllResponse$outboundSchema.parse(notesAllResponse),
  );
}

export function notesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<NotesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAllResponse' from JSON`,
  );
}
