/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OpportunitiesAddSecurity = {
  apiKey: string;
};

export type OpportunitiesAddRequest = {
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
  opportunityCreateRequest: components.OpportunityCreateRequest;
};

export type OpportunitiesAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Opportunity created
   */
  opportunityCreateResponse?: components.OpportunityCreateResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const OpportunitiesAddSecurity$inboundSchema: z.ZodType<
  OpportunitiesAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type OpportunitiesAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const OpportunitiesAddSecurity$outboundSchema: z.ZodType<
  OpportunitiesAddSecurity$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddSecurity$ {
  /** @deprecated use `OpportunitiesAddSecurity$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddSecurity$inboundSchema;
  /** @deprecated use `OpportunitiesAddSecurity$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddSecurity$outboundSchema;
  /** @deprecated use `OpportunitiesAddSecurity$Outbound` instead. */
  export type Outbound = OpportunitiesAddSecurity$Outbound;
}

export function opportunitiesAddSecurityToJSON(
  opportunitiesAddSecurity: OpportunitiesAddSecurity,
): string {
  return JSON.stringify(
    OpportunitiesAddSecurity$outboundSchema.parse(opportunitiesAddSecurity),
  );
}

export function opportunitiesAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddSecurity' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddRequest$inboundSchema: z.ZodType<
  OpportunitiesAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  OpportunityCreateRequest: components.OpportunityCreateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "OpportunityCreateRequest": "opportunityCreateRequest",
  });
});

/** @internal */
export type OpportunitiesAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  OpportunityCreateRequest: components.OpportunityCreateRequest$Outbound;
};

/** @internal */
export const OpportunitiesAddRequest$outboundSchema: z.ZodType<
  OpportunitiesAddRequest$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  opportunityCreateRequest: components.OpportunityCreateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    opportunityCreateRequest: "OpportunityCreateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddRequest$ {
  /** @deprecated use `OpportunitiesAddRequest$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddRequest$inboundSchema;
  /** @deprecated use `OpportunitiesAddRequest$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddRequest$outboundSchema;
  /** @deprecated use `OpportunitiesAddRequest$Outbound` instead. */
  export type Outbound = OpportunitiesAddRequest$Outbound;
}

export function opportunitiesAddRequestToJSON(
  opportunitiesAddRequest: OpportunitiesAddRequest,
): string {
  return JSON.stringify(
    OpportunitiesAddRequest$outboundSchema.parse(opportunitiesAddRequest),
  );
}

export function opportunitiesAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddRequest' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddResponse$inboundSchema: z.ZodType<
  OpportunitiesAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  OpportunityCreateResponse: components.OpportunityCreateResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "OpportunityCreateResponse": "opportunityCreateResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type OpportunitiesAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  OpportunityCreateResponse?:
    | components.OpportunityCreateResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const OpportunitiesAddResponse$outboundSchema: z.ZodType<
  OpportunitiesAddResponse$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  opportunityCreateResponse: components.OpportunityCreateResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    opportunityCreateResponse: "OpportunityCreateResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddResponse$ {
  /** @deprecated use `OpportunitiesAddResponse$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddResponse$inboundSchema;
  /** @deprecated use `OpportunitiesAddResponse$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddResponse$outboundSchema;
  /** @deprecated use `OpportunitiesAddResponse$Outbound` instead. */
  export type Outbound = OpportunitiesAddResponse$Outbound;
}

export function opportunitiesAddResponseToJSON(
  opportunitiesAddResponse: OpportunitiesAddResponse,
): string {
  return JSON.stringify(
    OpportunitiesAddResponse$outboundSchema.parse(opportunitiesAddResponse),
  );
}

export function opportunitiesAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddResponse' from JSON`,
  );
}
