/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OpportunitiesAddSecurity = {
  apiKey: string;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const OpportunitiesAddCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type OpportunitiesAddCurrency = ClosedEnum<
  typeof OpportunitiesAddCurrency
>;

export type OpportunitiesAddValue6 = {};

export type OpportunitiesAddValue4 = {};

export type OpportunitiesAddValue =
  | OpportunitiesAddValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<OpportunitiesAddValue6>;

export type OpportunitiesAddCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | OpportunitiesAddValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<OpportunitiesAddValue6>
    | null
    | undefined;
};

export type OpportunitiesAddExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type OpportunitiesAddPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<OpportunitiesAddExtendPaths> | undefined;
};

export type OpportunitiesAddRequestBody = {
  /**
   * The title or name of the opportunity.
   */
  title: string;
  /**
   * The unique identifier of the primary contact associated with the opportunity.
   */
  primaryContactId: string | null;
  /**
   * A description of the opportunity.
   */
  description?: string | null | undefined;
  /**
   * The type of the opportunity
   */
  type?: string | null | undefined;
  /**
   * The monetary value associated with the opportunity
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: OpportunitiesAddCurrency | null | undefined;
  /**
   * The probability of winning the opportunity, expressed as a percentage.
   */
  winProbability?: number | null | undefined;
  /**
   * The actual closing date for the opportunity. If close_date is null, the opportunity is not closed yet.
   */
  closeDate?: RFCDate | null | undefined;
  /**
   * The unique identifier of the reason why the opportunity was lost.
   */
  lossReasonId?: string | null | undefined;
  /**
   * The reason why the opportunity was lost.
   */
  lossReason?: string | null | undefined;
  /**
   * The unique identifier of the reason why the opportunity was won.
   */
  wonReasonId?: string | null | undefined;
  /**
   * The reason why the opportunity was won.
   */
  wonReason?: string | null | undefined;
  /**
   * The unique identifier of the pipeline associated with the opportunity
   */
  pipelineId?: string | null | undefined;
  /**
   * The unique identifier of the stage in the pipeline associated with the opportunity.
   */
  pipelineStageId?: string | null | undefined;
  /**
   * The unique identifier of the source of the opportunity.
   */
  sourceId?: string | null | undefined;
  /**
   * The unique identifier of the lead associated with the opportunity.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead associated with the opportunity.
   */
  leadSource?: string | null | undefined;
  /**
   * The unique identifier of the contact associated with the opportunity.
   */
  contactId?: string | null | undefined;
  /**
   * An array of unique identifiers of all contacts associated with the opportunity.
   */
  contactIds?: Array<string> | undefined;
  /**
   * The unique identifier of the company associated with the opportunity.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company associated with the opportunity.
   */
  companyName?: string | null | undefined;
  /**
   * The unique identifier of the user who owns the opportunity.
   */
  ownerId?: string | null | undefined;
  /**
   * The priority level of the opportunity.
   */
  priority?: string | null | undefined;
  /**
   * The current status of the opportunity.
   */
  status?: string | null | undefined;
  /**
   * The unique identifier of the current status of the opportunity.
   */
  statusId?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  customFields?: Array<OpportunitiesAddCustomFields> | undefined;
  /**
   * The date and time when the stage of the opportunity was last changed.
   */
  stageLastChangedAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<OpportunitiesAddPassThrough> | undefined;
};

export type OpportunitiesAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: OpportunitiesAddRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesAddDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type OpportunitiesAddOpportunitiesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type OpportunitiesAddUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Opportunity created
 */
export type OpportunitiesAddResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: OpportunitiesAddUnifiedId;
};

export type OpportunitiesAddResponse =
  | OpportunitiesAddResponseBody
  | OpportunitiesAddOpportunitiesResponseBody;

/** @internal */
export const OpportunitiesAddSecurity$inboundSchema: z.ZodType<
  OpportunitiesAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type OpportunitiesAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const OpportunitiesAddSecurity$outboundSchema: z.ZodType<
  OpportunitiesAddSecurity$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddSecurity$ {
  /** @deprecated use `OpportunitiesAddSecurity$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddSecurity$inboundSchema;
  /** @deprecated use `OpportunitiesAddSecurity$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddSecurity$outboundSchema;
  /** @deprecated use `OpportunitiesAddSecurity$Outbound` instead. */
  export type Outbound = OpportunitiesAddSecurity$Outbound;
}

export function opportunitiesAddSecurityToJSON(
  opportunitiesAddSecurity: OpportunitiesAddSecurity,
): string {
  return JSON.stringify(
    OpportunitiesAddSecurity$outboundSchema.parse(opportunitiesAddSecurity),
  );
}

export function opportunitiesAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddSecurity' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddCurrency$inboundSchema: z.ZodNativeEnum<
  typeof OpportunitiesAddCurrency
> = z.nativeEnum(OpportunitiesAddCurrency);

/** @internal */
export const OpportunitiesAddCurrency$outboundSchema: z.ZodNativeEnum<
  typeof OpportunitiesAddCurrency
> = OpportunitiesAddCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddCurrency$ {
  /** @deprecated use `OpportunitiesAddCurrency$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddCurrency$inboundSchema;
  /** @deprecated use `OpportunitiesAddCurrency$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddCurrency$outboundSchema;
}

/** @internal */
export const OpportunitiesAddValue6$inboundSchema: z.ZodType<
  OpportunitiesAddValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunitiesAddValue6$Outbound = {};

/** @internal */
export const OpportunitiesAddValue6$outboundSchema: z.ZodType<
  OpportunitiesAddValue6$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddValue6$ {
  /** @deprecated use `OpportunitiesAddValue6$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddValue6$inboundSchema;
  /** @deprecated use `OpportunitiesAddValue6$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddValue6$outboundSchema;
  /** @deprecated use `OpportunitiesAddValue6$Outbound` instead. */
  export type Outbound = OpportunitiesAddValue6$Outbound;
}

export function opportunitiesAddValue6ToJSON(
  opportunitiesAddValue6: OpportunitiesAddValue6,
): string {
  return JSON.stringify(
    OpportunitiesAddValue6$outboundSchema.parse(opportunitiesAddValue6),
  );
}

export function opportunitiesAddValue6FromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddValue6' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddValue4$inboundSchema: z.ZodType<
  OpportunitiesAddValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpportunitiesAddValue4$Outbound = {};

/** @internal */
export const OpportunitiesAddValue4$outboundSchema: z.ZodType<
  OpportunitiesAddValue4$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddValue4$ {
  /** @deprecated use `OpportunitiesAddValue4$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddValue4$inboundSchema;
  /** @deprecated use `OpportunitiesAddValue4$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddValue4$outboundSchema;
  /** @deprecated use `OpportunitiesAddValue4$Outbound` instead. */
  export type Outbound = OpportunitiesAddValue4$Outbound;
}

export function opportunitiesAddValue4ToJSON(
  opportunitiesAddValue4: OpportunitiesAddValue4,
): string {
  return JSON.stringify(
    OpportunitiesAddValue4$outboundSchema.parse(opportunitiesAddValue4),
  );
}

export function opportunitiesAddValue4FromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddValue4' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddValue$inboundSchema: z.ZodType<
  OpportunitiesAddValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpportunitiesAddValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => OpportunitiesAddValue6$inboundSchema)),
]);

/** @internal */
export type OpportunitiesAddValue$Outbound =
  | OpportunitiesAddValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<OpportunitiesAddValue6$Outbound>;

/** @internal */
export const OpportunitiesAddValue$outboundSchema: z.ZodType<
  OpportunitiesAddValue$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddValue
> = z.union([
  z.lazy(() => OpportunitiesAddValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => OpportunitiesAddValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddValue$ {
  /** @deprecated use `OpportunitiesAddValue$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddValue$inboundSchema;
  /** @deprecated use `OpportunitiesAddValue$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddValue$outboundSchema;
  /** @deprecated use `OpportunitiesAddValue$Outbound` instead. */
  export type Outbound = OpportunitiesAddValue$Outbound;
}

export function opportunitiesAddValueToJSON(
  opportunitiesAddValue: OpportunitiesAddValue,
): string {
  return JSON.stringify(
    OpportunitiesAddValue$outboundSchema.parse(opportunitiesAddValue),
  );
}

export function opportunitiesAddValueFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddValue' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddCustomFields$inboundSchema: z.ZodType<
  OpportunitiesAddCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => OpportunitiesAddValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => OpportunitiesAddValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type OpportunitiesAddCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | OpportunitiesAddValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<OpportunitiesAddValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const OpportunitiesAddCustomFields$outboundSchema: z.ZodType<
  OpportunitiesAddCustomFields$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => OpportunitiesAddValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => OpportunitiesAddValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddCustomFields$ {
  /** @deprecated use `OpportunitiesAddCustomFields$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddCustomFields$inboundSchema;
  /** @deprecated use `OpportunitiesAddCustomFields$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddCustomFields$outboundSchema;
  /** @deprecated use `OpportunitiesAddCustomFields$Outbound` instead. */
  export type Outbound = OpportunitiesAddCustomFields$Outbound;
}

export function opportunitiesAddCustomFieldsToJSON(
  opportunitiesAddCustomFields: OpportunitiesAddCustomFields,
): string {
  return JSON.stringify(
    OpportunitiesAddCustomFields$outboundSchema.parse(
      opportunitiesAddCustomFields,
    ),
  );
}

export function opportunitiesAddCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddCustomFields' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddExtendPaths$inboundSchema: z.ZodType<
  OpportunitiesAddExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type OpportunitiesAddExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const OpportunitiesAddExtendPaths$outboundSchema: z.ZodType<
  OpportunitiesAddExtendPaths$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddExtendPaths$ {
  /** @deprecated use `OpportunitiesAddExtendPaths$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddExtendPaths$inboundSchema;
  /** @deprecated use `OpportunitiesAddExtendPaths$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddExtendPaths$outboundSchema;
  /** @deprecated use `OpportunitiesAddExtendPaths$Outbound` instead. */
  export type Outbound = OpportunitiesAddExtendPaths$Outbound;
}

export function opportunitiesAddExtendPathsToJSON(
  opportunitiesAddExtendPaths: OpportunitiesAddExtendPaths,
): string {
  return JSON.stringify(
    OpportunitiesAddExtendPaths$outboundSchema.parse(
      opportunitiesAddExtendPaths,
    ),
  );
}

export function opportunitiesAddExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddExtendPaths' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddPassThrough$inboundSchema: z.ZodType<
  OpportunitiesAddPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => OpportunitiesAddExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type OpportunitiesAddPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<OpportunitiesAddExtendPaths$Outbound> | undefined;
};

/** @internal */
export const OpportunitiesAddPassThrough$outboundSchema: z.ZodType<
  OpportunitiesAddPassThrough$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => OpportunitiesAddExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddPassThrough$ {
  /** @deprecated use `OpportunitiesAddPassThrough$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddPassThrough$inboundSchema;
  /** @deprecated use `OpportunitiesAddPassThrough$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddPassThrough$outboundSchema;
  /** @deprecated use `OpportunitiesAddPassThrough$Outbound` instead. */
  export type Outbound = OpportunitiesAddPassThrough$Outbound;
}

export function opportunitiesAddPassThroughToJSON(
  opportunitiesAddPassThrough: OpportunitiesAddPassThrough,
): string {
  return JSON.stringify(
    OpportunitiesAddPassThrough$outboundSchema.parse(
      opportunitiesAddPassThrough,
    ),
  );
}

export function opportunitiesAddPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddPassThrough' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddRequestBody$inboundSchema: z.ZodType<
  OpportunitiesAddRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  primary_contact_id: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(OpportunitiesAddCurrency$inboundSchema).optional(),
  win_probability: z.nullable(z.number()).optional(),
  close_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  loss_reason_id: z.nullable(z.string()).optional(),
  loss_reason: z.nullable(z.string()).optional(),
  won_reason_id: z.nullable(z.string()).optional(),
  won_reason: z.nullable(z.string()).optional(),
  pipeline_id: z.nullable(z.string()).optional(),
  pipeline_stage_id: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  contact_ids: z.array(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  status_id: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_fields: z.array(
    z.lazy(() => OpportunitiesAddCustomFields$inboundSchema),
  ).optional(),
  stage_last_changed_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(z.lazy(() => OpportunitiesAddPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "primary_contact_id": "primaryContactId",
    "monetary_amount": "monetaryAmount",
    "win_probability": "winProbability",
    "close_date": "closeDate",
    "loss_reason_id": "lossReasonId",
    "loss_reason": "lossReason",
    "won_reason_id": "wonReasonId",
    "won_reason": "wonReason",
    "pipeline_id": "pipelineId",
    "pipeline_stage_id": "pipelineStageId",
    "source_id": "sourceId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "contact_id": "contactId",
    "contact_ids": "contactIds",
    "company_id": "companyId",
    "company_name": "companyName",
    "owner_id": "ownerId",
    "status_id": "statusId",
    "custom_fields": "customFields",
    "stage_last_changed_at": "stageLastChangedAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type OpportunitiesAddRequestBody$Outbound = {
  title: string;
  primary_contact_id: string | null;
  description?: string | null | undefined;
  type?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  win_probability?: number | null | undefined;
  close_date?: string | null | undefined;
  loss_reason_id?: string | null | undefined;
  loss_reason?: string | null | undefined;
  won_reason_id?: string | null | undefined;
  won_reason?: string | null | undefined;
  pipeline_id?: string | null | undefined;
  pipeline_stage_id?: string | null | undefined;
  source_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  contact_id?: string | null | undefined;
  contact_ids?: Array<string> | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  owner_id?: string | null | undefined;
  priority?: string | null | undefined;
  status?: string | null | undefined;
  status_id?: string | null | undefined;
  tags?: Array<string> | null | undefined;
  custom_fields?: Array<OpportunitiesAddCustomFields$Outbound> | undefined;
  stage_last_changed_at?: string | null | undefined;
  pass_through?: Array<OpportunitiesAddPassThrough$Outbound> | undefined;
};

/** @internal */
export const OpportunitiesAddRequestBody$outboundSchema: z.ZodType<
  OpportunitiesAddRequestBody$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddRequestBody
> = z.object({
  title: z.string(),
  primaryContactId: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(OpportunitiesAddCurrency$outboundSchema).optional(),
  winProbability: z.nullable(z.number()).optional(),
  closeDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  lossReasonId: z.nullable(z.string()).optional(),
  lossReason: z.nullable(z.string()).optional(),
  wonReasonId: z.nullable(z.string()).optional(),
  wonReason: z.nullable(z.string()).optional(),
  pipelineId: z.nullable(z.string()).optional(),
  pipelineStageId: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  contactIds: z.array(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  statusId: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customFields: z.array(
    z.lazy(() => OpportunitiesAddCustomFields$outboundSchema),
  ).optional(),
  stageLastChangedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  passThrough: z.array(z.lazy(() => OpportunitiesAddPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    primaryContactId: "primary_contact_id",
    monetaryAmount: "monetary_amount",
    winProbability: "win_probability",
    closeDate: "close_date",
    lossReasonId: "loss_reason_id",
    lossReason: "loss_reason",
    wonReasonId: "won_reason_id",
    wonReason: "won_reason",
    pipelineId: "pipeline_id",
    pipelineStageId: "pipeline_stage_id",
    sourceId: "source_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    contactId: "contact_id",
    contactIds: "contact_ids",
    companyId: "company_id",
    companyName: "company_name",
    ownerId: "owner_id",
    statusId: "status_id",
    customFields: "custom_fields",
    stageLastChangedAt: "stage_last_changed_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddRequestBody$ {
  /** @deprecated use `OpportunitiesAddRequestBody$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddRequestBody$inboundSchema;
  /** @deprecated use `OpportunitiesAddRequestBody$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddRequestBody$outboundSchema;
  /** @deprecated use `OpportunitiesAddRequestBody$Outbound` instead. */
  export type Outbound = OpportunitiesAddRequestBody$Outbound;
}

export function opportunitiesAddRequestBodyToJSON(
  opportunitiesAddRequestBody: OpportunitiesAddRequestBody,
): string {
  return JSON.stringify(
    OpportunitiesAddRequestBody$outboundSchema.parse(
      opportunitiesAddRequestBody,
    ),
  );
}

export function opportunitiesAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddRequestBody' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddRequest$inboundSchema: z.ZodType<
  OpportunitiesAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => OpportunitiesAddRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type OpportunitiesAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  RequestBody: OpportunitiesAddRequestBody$Outbound;
};

/** @internal */
export const OpportunitiesAddRequest$outboundSchema: z.ZodType<
  OpportunitiesAddRequest$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => OpportunitiesAddRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddRequest$ {
  /** @deprecated use `OpportunitiesAddRequest$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddRequest$inboundSchema;
  /** @deprecated use `OpportunitiesAddRequest$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddRequest$outboundSchema;
  /** @deprecated use `OpportunitiesAddRequest$Outbound` instead. */
  export type Outbound = OpportunitiesAddRequest$Outbound;
}

export function opportunitiesAddRequestToJSON(
  opportunitiesAddRequest: OpportunitiesAddRequest,
): string {
  return JSON.stringify(
    OpportunitiesAddRequest$outboundSchema.parse(opportunitiesAddRequest),
  );
}

export function opportunitiesAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddRequest' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddDetail$inboundSchema: z.ZodType<
  OpportunitiesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const OpportunitiesAddDetail$outboundSchema: z.ZodType<
  OpportunitiesAddDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddDetail$ {
  /** @deprecated use `OpportunitiesAddDetail$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddDetail$inboundSchema;
  /** @deprecated use `OpportunitiesAddDetail$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddDetail$outboundSchema;
  /** @deprecated use `OpportunitiesAddDetail$Outbound` instead. */
  export type Outbound = OpportunitiesAddDetail$Outbound;
}

export function opportunitiesAddDetailToJSON(
  opportunitiesAddDetail: OpportunitiesAddDetail,
): string {
  return JSON.stringify(
    OpportunitiesAddDetail$outboundSchema.parse(opportunitiesAddDetail),
  );
}

export function opportunitiesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddOpportunitiesResponseBody$inboundSchema: z.ZodType<
  OpportunitiesAddOpportunitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type OpportunitiesAddOpportunitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesAddOpportunitiesResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesAddOpportunitiesResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesAddOpportunitiesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddOpportunitiesResponseBody$ {
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesAddOpportunitiesResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesAddOpportunitiesResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAddOpportunitiesResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesAddOpportunitiesResponseBody$Outbound;
}

export function opportunitiesAddOpportunitiesResponseBodyToJSON(
  opportunitiesAddOpportunitiesResponseBody:
    OpportunitiesAddOpportunitiesResponseBody,
): string {
  return JSON.stringify(
    OpportunitiesAddOpportunitiesResponseBody$outboundSchema.parse(
      opportunitiesAddOpportunitiesResponseBody,
    ),
  );
}

export function opportunitiesAddOpportunitiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesAddOpportunitiesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesAddOpportunitiesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesAddOpportunitiesResponseBody' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddUnifiedId$inboundSchema: z.ZodType<
  OpportunitiesAddUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type OpportunitiesAddUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const OpportunitiesAddUnifiedId$outboundSchema: z.ZodType<
  OpportunitiesAddUnifiedId$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddUnifiedId$ {
  /** @deprecated use `OpportunitiesAddUnifiedId$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddUnifiedId$inboundSchema;
  /** @deprecated use `OpportunitiesAddUnifiedId$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddUnifiedId$outboundSchema;
  /** @deprecated use `OpportunitiesAddUnifiedId$Outbound` instead. */
  export type Outbound = OpportunitiesAddUnifiedId$Outbound;
}

export function opportunitiesAddUnifiedIdToJSON(
  opportunitiesAddUnifiedId: OpportunitiesAddUnifiedId,
): string {
  return JSON.stringify(
    OpportunitiesAddUnifiedId$outboundSchema.parse(opportunitiesAddUnifiedId),
  );
}

export function opportunitiesAddUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddUnifiedId' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddResponseBody$inboundSchema: z.ZodType<
  OpportunitiesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunitiesAddUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type OpportunitiesAddResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: OpportunitiesAddUnifiedId$Outbound;
};

/** @internal */
export const OpportunitiesAddResponseBody$outboundSchema: z.ZodType<
  OpportunitiesAddResponseBody$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunitiesAddUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddResponseBody$ {
  /** @deprecated use `OpportunitiesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesAddResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesAddResponseBody$Outbound;
}

export function opportunitiesAddResponseBodyToJSON(
  opportunitiesAddResponseBody: OpportunitiesAddResponseBody,
): string {
  return JSON.stringify(
    OpportunitiesAddResponseBody$outboundSchema.parse(
      opportunitiesAddResponseBody,
    ),
  );
}

export function opportunitiesAddResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddResponseBody' from JSON`,
  );
}

/** @internal */
export const OpportunitiesAddResponse$inboundSchema: z.ZodType<
  OpportunitiesAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpportunitiesAddResponseBody$inboundSchema),
  z.lazy(() => OpportunitiesAddOpportunitiesResponseBody$inboundSchema),
]);

/** @internal */
export type OpportunitiesAddResponse$Outbound =
  | OpportunitiesAddResponseBody$Outbound
  | OpportunitiesAddOpportunitiesResponseBody$Outbound;

/** @internal */
export const OpportunitiesAddResponse$outboundSchema: z.ZodType<
  OpportunitiesAddResponse$Outbound,
  z.ZodTypeDef,
  OpportunitiesAddResponse
> = z.union([
  z.lazy(() => OpportunitiesAddResponseBody$outboundSchema),
  z.lazy(() => OpportunitiesAddOpportunitiesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesAddResponse$ {
  /** @deprecated use `OpportunitiesAddResponse$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesAddResponse$inboundSchema;
  /** @deprecated use `OpportunitiesAddResponse$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesAddResponse$outboundSchema;
  /** @deprecated use `OpportunitiesAddResponse$Outbound` instead. */
  export type Outbound = OpportunitiesAddResponse$Outbound;
}

export function opportunitiesAddResponseToJSON(
  opportunitiesAddResponse: OpportunitiesAddResponse,
): string {
  return JSON.stringify(
    OpportunitiesAddResponse$outboundSchema.parse(opportunitiesAddResponse),
  );
}

export function opportunitiesAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesAddResponse' from JSON`,
  );
}
