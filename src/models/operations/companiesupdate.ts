/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompaniesUpdateSecurity = {
  apiKey: string;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const CompaniesUpdateCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type CompaniesUpdateCurrency = ClosedEnum<
  typeof CompaniesUpdateCurrency
>;

/**
 * The type of bank account.
 */
export const CompaniesUpdateAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The type of bank account.
 */
export type CompaniesUpdateAccountType = ClosedEnum<
  typeof CompaniesUpdateAccountType
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const CompaniesUpdateCompaniesCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type CompaniesUpdateCompaniesCurrency = ClosedEnum<
  typeof CompaniesUpdateCompaniesCurrency
>;

export type CompaniesUpdateBankAccounts = {
  /**
   * The name of the bank
   */
  bankName?: string | null | undefined;
  /**
   * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name which you used in opening your bank account.
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account.
   */
  accountType?: CompaniesUpdateAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN).
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC).
   */
  bic?: string | null | undefined;
  /**
   * A routing number is a nine-digit code used to identify a financial institution in the United States.
   */
  routingNumber?: string | null | undefined;
  /**
   * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
   */
  bsbNumber?: string | null | undefined;
  /**
   * A branch identifier is a unique identifier for a branch of a bank or financial institution.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
   */
  bankCode?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: CompaniesUpdateCompaniesCurrency | null | undefined;
};

/**
 * The type of website
 */
export const CompaniesUpdateType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type CompaniesUpdateType = ClosedEnum<typeof CompaniesUpdateType>;

export type CompaniesUpdateWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: CompaniesUpdateType | null | undefined;
};

/**
 * The type of address.
 */
export const CompaniesUpdateCompaniesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type CompaniesUpdateCompaniesType = ClosedEnum<
  typeof CompaniesUpdateCompaniesType
>;

export type CompaniesUpdateAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: CompaniesUpdateCompaniesType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type CompaniesUpdateSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const CompaniesUpdateCompaniesRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type CompaniesUpdateCompaniesRequestType = ClosedEnum<
  typeof CompaniesUpdateCompaniesRequestType
>;

export type CompaniesUpdatePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: CompaniesUpdateCompaniesRequestType | null | undefined;
};

/**
 * Email type
 */
export const CompaniesUpdateCompaniesRequestRequestBodyType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type CompaniesUpdateCompaniesRequestRequestBodyType = ClosedEnum<
  typeof CompaniesUpdateCompaniesRequestRequestBodyType
>;

export type CompaniesUpdateEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: CompaniesUpdateCompaniesRequestRequestBodyType | null | undefined;
};

export type CompaniesUpdateCompanyRowType = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

export type Value6 = {};

export type Value4 = {};

export type CompaniesUpdateValue =
  | Value4
  | string
  | number
  | boolean
  | Array<string>
  | Array<Value6>;

export type CompaniesUpdateCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | Value4
    | string
    | number
    | boolean
    | Array<string>
    | Array<Value6>
    | null
    | undefined;
};

export type CompaniesUpdateExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type CompaniesUpdatePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<CompaniesUpdateExtendPaths> | undefined;
};

export type CompaniesUpdateRequestBody = {
  /**
   * Name of the company
   */
  name: string | null;
  /**
   * Owner ID
   */
  ownerId?: string | null | undefined;
  /**
   * The Image URL of the company
   */
  image?: string | null | undefined;
  /**
   * A description of the company
   */
  description?: string | null | undefined;
  /**
   * The VAT number of the company
   */
  vatNumber?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: CompaniesUpdateCurrency | null | undefined;
  /**
   * The status of the company
   */
  status?: string | null | undefined;
  /**
   * The fax number of the company
   */
  fax?: string | null | undefined;
  /**
   * The annual revenue of the company
   */
  annualRevenue?: string | null | undefined;
  /**
   * Number of employees
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * The industry represents the type of business the company is in.
   */
  industry?: string | null | undefined;
  /**
   * The ownership indicates the type of ownership of the company.
   */
  ownership?: string | null | undefined;
  /**
   * A sales tax number is a unique number that identifies a company for tax purposes.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * A payee number is a unique number that identifies a payee for tax purposes.
   */
  payeeNumber?: string | null | undefined;
  /**
   * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
   */
  acn?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  bankAccounts?: Array<CompaniesUpdateBankAccounts> | undefined;
  websites?: Array<CompaniesUpdateWebsites> | undefined;
  addresses?: Array<CompaniesUpdateAddresses> | undefined;
  socialLinks?: Array<CompaniesUpdateSocialLinks> | undefined;
  phoneNumbers?: Array<CompaniesUpdatePhoneNumbers> | undefined;
  emails?: Array<CompaniesUpdateEmails> | undefined;
  rowType?: CompaniesUpdateCompanyRowType | undefined;
  customFields?: Array<CompaniesUpdateCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * Whether the company is read-only or not
   */
  readOnly?: boolean | null | undefined;
  /**
   * A formal salutation for the person. For example, 'Mr', 'Mrs'
   */
  salutation?: string | null | undefined;
  /**
   * The date of birth of the person.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<CompaniesUpdatePassThrough> | undefined;
};

export type CompaniesUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: CompaniesUpdateRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesUpdateDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type CompaniesUpdateCompaniesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type CompaniesUpdateUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Company updated
 */
export type CompaniesUpdateResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: CompaniesUpdateUnifiedId;
};

export type CompaniesUpdateResponse =
  | CompaniesUpdateResponseBody
  | CompaniesUpdateCompaniesResponseBody;

/** @internal */
export const CompaniesUpdateSecurity$inboundSchema: z.ZodType<
  CompaniesUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type CompaniesUpdateSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const CompaniesUpdateSecurity$outboundSchema: z.ZodType<
  CompaniesUpdateSecurity$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateSecurity$ {
  /** @deprecated use `CompaniesUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateSecurity$inboundSchema;
  /** @deprecated use `CompaniesUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateSecurity$outboundSchema;
  /** @deprecated use `CompaniesUpdateSecurity$Outbound` instead. */
  export type Outbound = CompaniesUpdateSecurity$Outbound;
}

export function companiesUpdateSecurityToJSON(
  companiesUpdateSecurity: CompaniesUpdateSecurity,
): string {
  return JSON.stringify(
    CompaniesUpdateSecurity$outboundSchema.parse(companiesUpdateSecurity),
  );
}

export function companiesUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateCurrency$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateCurrency
> = z.nativeEnum(CompaniesUpdateCurrency);

/** @internal */
export const CompaniesUpdateCurrency$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateCurrency
> = CompaniesUpdateCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCurrency$ {
  /** @deprecated use `CompaniesUpdateCurrency$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateCurrency$inboundSchema;
  /** @deprecated use `CompaniesUpdateCurrency$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateCurrency$outboundSchema;
}

/** @internal */
export const CompaniesUpdateAccountType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateAccountType
> = z.nativeEnum(CompaniesUpdateAccountType);

/** @internal */
export const CompaniesUpdateAccountType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateAccountType
> = CompaniesUpdateAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateAccountType$ {
  /** @deprecated use `CompaniesUpdateAccountType$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateAccountType$inboundSchema;
  /** @deprecated use `CompaniesUpdateAccountType$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateAccountType$outboundSchema;
}

/** @internal */
export const CompaniesUpdateCompaniesCurrency$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateCompaniesCurrency
> = z.nativeEnum(CompaniesUpdateCompaniesCurrency);

/** @internal */
export const CompaniesUpdateCompaniesCurrency$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateCompaniesCurrency
> = CompaniesUpdateCompaniesCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesCurrency$ {
  /** @deprecated use `CompaniesUpdateCompaniesCurrency$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateCompaniesCurrency$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesCurrency$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateCompaniesCurrency$outboundSchema;
}

/** @internal */
export const CompaniesUpdateBankAccounts$inboundSchema: z.ZodType<
  CompaniesUpdateBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(CompaniesUpdateAccountType$inboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesUpdateCompaniesCurrency$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type CompaniesUpdateBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const CompaniesUpdateBankAccounts$outboundSchema: z.ZodType<
  CompaniesUpdateBankAccounts$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(CompaniesUpdateAccountType$outboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesUpdateCompaniesCurrency$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateBankAccounts$ {
  /** @deprecated use `CompaniesUpdateBankAccounts$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateBankAccounts$inboundSchema;
  /** @deprecated use `CompaniesUpdateBankAccounts$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateBankAccounts$outboundSchema;
  /** @deprecated use `CompaniesUpdateBankAccounts$Outbound` instead. */
  export type Outbound = CompaniesUpdateBankAccounts$Outbound;
}

export function companiesUpdateBankAccountsToJSON(
  companiesUpdateBankAccounts: CompaniesUpdateBankAccounts,
): string {
  return JSON.stringify(
    CompaniesUpdateBankAccounts$outboundSchema.parse(
      companiesUpdateBankAccounts,
    ),
  );
}

export function companiesUpdateBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateBankAccounts' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateType
> = z.nativeEnum(CompaniesUpdateType);

/** @internal */
export const CompaniesUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateType
> = CompaniesUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateType$ {
  /** @deprecated use `CompaniesUpdateType$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateType$inboundSchema;
  /** @deprecated use `CompaniesUpdateType$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateType$outboundSchema;
}

/** @internal */
export const CompaniesUpdateWebsites$inboundSchema: z.ZodType<
  CompaniesUpdateWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CompaniesUpdateType$inboundSchema).optional(),
});

/** @internal */
export type CompaniesUpdateWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesUpdateWebsites$outboundSchema: z.ZodType<
  CompaniesUpdateWebsites$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CompaniesUpdateType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateWebsites$ {
  /** @deprecated use `CompaniesUpdateWebsites$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateWebsites$inboundSchema;
  /** @deprecated use `CompaniesUpdateWebsites$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateWebsites$outboundSchema;
  /** @deprecated use `CompaniesUpdateWebsites$Outbound` instead. */
  export type Outbound = CompaniesUpdateWebsites$Outbound;
}

export function companiesUpdateWebsitesToJSON(
  companiesUpdateWebsites: CompaniesUpdateWebsites,
): string {
  return JSON.stringify(
    CompaniesUpdateWebsites$outboundSchema.parse(companiesUpdateWebsites),
  );
}

export function companiesUpdateWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateWebsites' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateCompaniesType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateCompaniesType
> = z.nativeEnum(CompaniesUpdateCompaniesType);

/** @internal */
export const CompaniesUpdateCompaniesType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateCompaniesType
> = CompaniesUpdateCompaniesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesType$ {
  /** @deprecated use `CompaniesUpdateCompaniesType$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateCompaniesType$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesType$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateCompaniesType$outboundSchema;
}

/** @internal */
export const CompaniesUpdateAddresses$inboundSchema: z.ZodType<
  CompaniesUpdateAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesUpdateCompaniesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type CompaniesUpdateAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const CompaniesUpdateAddresses$outboundSchema: z.ZodType<
  CompaniesUpdateAddresses$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesUpdateCompaniesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateAddresses$ {
  /** @deprecated use `CompaniesUpdateAddresses$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateAddresses$inboundSchema;
  /** @deprecated use `CompaniesUpdateAddresses$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateAddresses$outboundSchema;
  /** @deprecated use `CompaniesUpdateAddresses$Outbound` instead. */
  export type Outbound = CompaniesUpdateAddresses$Outbound;
}

export function companiesUpdateAddressesToJSON(
  companiesUpdateAddresses: CompaniesUpdateAddresses,
): string {
  return JSON.stringify(
    CompaniesUpdateAddresses$outboundSchema.parse(companiesUpdateAddresses),
  );
}

export function companiesUpdateAddressesFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateAddresses' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateSocialLinks$inboundSchema: z.ZodType<
  CompaniesUpdateSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompaniesUpdateSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesUpdateSocialLinks$outboundSchema: z.ZodType<
  CompaniesUpdateSocialLinks$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateSocialLinks$ {
  /** @deprecated use `CompaniesUpdateSocialLinks$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateSocialLinks$inboundSchema;
  /** @deprecated use `CompaniesUpdateSocialLinks$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateSocialLinks$outboundSchema;
  /** @deprecated use `CompaniesUpdateSocialLinks$Outbound` instead. */
  export type Outbound = CompaniesUpdateSocialLinks$Outbound;
}

export function companiesUpdateSocialLinksToJSON(
  companiesUpdateSocialLinks: CompaniesUpdateSocialLinks,
): string {
  return JSON.stringify(
    CompaniesUpdateSocialLinks$outboundSchema.parse(companiesUpdateSocialLinks),
  );
}

export function companiesUpdateSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateSocialLinks' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateCompaniesRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesUpdateCompaniesRequestType
> = z.nativeEnum(CompaniesUpdateCompaniesRequestType);

/** @internal */
export const CompaniesUpdateCompaniesRequestType$outboundSchema:
  z.ZodNativeEnum<typeof CompaniesUpdateCompaniesRequestType> =
    CompaniesUpdateCompaniesRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesRequestType$ {
  /** @deprecated use `CompaniesUpdateCompaniesRequestType$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesUpdateCompaniesRequestType$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesRequestType$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesUpdateCompaniesRequestType$outboundSchema;
}

/** @internal */
export const CompaniesUpdatePhoneNumbers$inboundSchema: z.ZodType<
  CompaniesUpdatePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesUpdateCompaniesRequestType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type CompaniesUpdatePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesUpdatePhoneNumbers$outboundSchema: z.ZodType<
  CompaniesUpdatePhoneNumbers$Outbound,
  z.ZodTypeDef,
  CompaniesUpdatePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesUpdateCompaniesRequestType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdatePhoneNumbers$ {
  /** @deprecated use `CompaniesUpdatePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdatePhoneNumbers$inboundSchema;
  /** @deprecated use `CompaniesUpdatePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdatePhoneNumbers$outboundSchema;
  /** @deprecated use `CompaniesUpdatePhoneNumbers$Outbound` instead. */
  export type Outbound = CompaniesUpdatePhoneNumbers$Outbound;
}

export function companiesUpdatePhoneNumbersToJSON(
  companiesUpdatePhoneNumbers: CompaniesUpdatePhoneNumbers,
): string {
  return JSON.stringify(
    CompaniesUpdatePhoneNumbers$outboundSchema.parse(
      companiesUpdatePhoneNumbers,
    ),
  );
}

export function companiesUpdatePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdatePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdatePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdatePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateCompaniesRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof CompaniesUpdateCompaniesRequestRequestBodyType> = z
    .nativeEnum(CompaniesUpdateCompaniesRequestRequestBodyType);

/** @internal */
export const CompaniesUpdateCompaniesRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof CompaniesUpdateCompaniesRequestRequestBodyType> =
    CompaniesUpdateCompaniesRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesRequestRequestBodyType$ {
  /** @deprecated use `CompaniesUpdateCompaniesRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesUpdateCompaniesRequestRequestBodyType$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesUpdateCompaniesRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const CompaniesUpdateEmails$inboundSchema: z.ZodType<
  CompaniesUpdateEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CompaniesUpdateCompaniesRequestRequestBodyType$inboundSchema)
    .optional(),
});

/** @internal */
export type CompaniesUpdateEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesUpdateEmails$outboundSchema: z.ZodType<
  CompaniesUpdateEmails$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    CompaniesUpdateCompaniesRequestRequestBodyType$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateEmails$ {
  /** @deprecated use `CompaniesUpdateEmails$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateEmails$inboundSchema;
  /** @deprecated use `CompaniesUpdateEmails$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateEmails$outboundSchema;
  /** @deprecated use `CompaniesUpdateEmails$Outbound` instead. */
  export type Outbound = CompaniesUpdateEmails$Outbound;
}

export function companiesUpdateEmailsToJSON(
  companiesUpdateEmails: CompaniesUpdateEmails,
): string {
  return JSON.stringify(
    CompaniesUpdateEmails$outboundSchema.parse(companiesUpdateEmails),
  );
}

export function companiesUpdateEmailsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateEmails' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateCompanyRowType$inboundSchema: z.ZodType<
  CompaniesUpdateCompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompaniesUpdateCompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CompaniesUpdateCompanyRowType$outboundSchema: z.ZodType<
  CompaniesUpdateCompanyRowType$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateCompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompanyRowType$ {
  /** @deprecated use `CompaniesUpdateCompanyRowType$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateCompanyRowType$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompanyRowType$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateCompanyRowType$outboundSchema;
  /** @deprecated use `CompaniesUpdateCompanyRowType$Outbound` instead. */
  export type Outbound = CompaniesUpdateCompanyRowType$Outbound;
}

export function companiesUpdateCompanyRowTypeToJSON(
  companiesUpdateCompanyRowType: CompaniesUpdateCompanyRowType,
): string {
  return JSON.stringify(
    CompaniesUpdateCompanyRowType$outboundSchema.parse(
      companiesUpdateCompanyRowType,
    ),
  );
}

export function companiesUpdateCompanyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateCompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateCompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateCompanyRowType' from JSON`,
  );
}

/** @internal */
export const Value6$inboundSchema: z.ZodType<Value6, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value6$Outbound = {};

/** @internal */
export const Value6$outboundSchema: z.ZodType<
  Value6$Outbound,
  z.ZodTypeDef,
  Value6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value6$ {
  /** @deprecated use `Value6$inboundSchema` instead. */
  export const inboundSchema = Value6$inboundSchema;
  /** @deprecated use `Value6$outboundSchema` instead. */
  export const outboundSchema = Value6$outboundSchema;
  /** @deprecated use `Value6$Outbound` instead. */
  export type Outbound = Value6$Outbound;
}

export function value6ToJSON(value6: Value6): string {
  return JSON.stringify(Value6$outboundSchema.parse(value6));
}

export function value6FromJSON(
  jsonString: string,
): SafeParseResult<Value6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value6' from JSON`,
  );
}

/** @internal */
export const Value4$inboundSchema: z.ZodType<Value4, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value4$Outbound = {};

/** @internal */
export const Value4$outboundSchema: z.ZodType<
  Value4$Outbound,
  z.ZodTypeDef,
  Value4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value4$ {
  /** @deprecated use `Value4$inboundSchema` instead. */
  export const inboundSchema = Value4$inboundSchema;
  /** @deprecated use `Value4$outboundSchema` instead. */
  export const outboundSchema = Value4$outboundSchema;
  /** @deprecated use `Value4$Outbound` instead. */
  export type Outbound = Value4$Outbound;
}

export function value4ToJSON(value4: Value4): string {
  return JSON.stringify(Value4$outboundSchema.parse(value4));
}

export function value4FromJSON(
  jsonString: string,
): SafeParseResult<Value4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value4' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateValue$inboundSchema: z.ZodType<
  CompaniesUpdateValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Value4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Value6$inboundSchema)),
]);

/** @internal */
export type CompaniesUpdateValue$Outbound =
  | Value4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<Value6$Outbound>;

/** @internal */
export const CompaniesUpdateValue$outboundSchema: z.ZodType<
  CompaniesUpdateValue$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateValue
> = z.union([
  z.lazy(() => Value4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Value6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateValue$ {
  /** @deprecated use `CompaniesUpdateValue$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateValue$inboundSchema;
  /** @deprecated use `CompaniesUpdateValue$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateValue$outboundSchema;
  /** @deprecated use `CompaniesUpdateValue$Outbound` instead. */
  export type Outbound = CompaniesUpdateValue$Outbound;
}

export function companiesUpdateValueToJSON(
  companiesUpdateValue: CompaniesUpdateValue,
): string {
  return JSON.stringify(
    CompaniesUpdateValue$outboundSchema.parse(companiesUpdateValue),
  );
}

export function companiesUpdateValueFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateValue' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateCustomFields$inboundSchema: z.ZodType<
  CompaniesUpdateCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Value4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Value6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CompaniesUpdateCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | Value4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<Value6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CompaniesUpdateCustomFields$outboundSchema: z.ZodType<
  CompaniesUpdateCustomFields$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Value4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Value6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCustomFields$ {
  /** @deprecated use `CompaniesUpdateCustomFields$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateCustomFields$inboundSchema;
  /** @deprecated use `CompaniesUpdateCustomFields$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateCustomFields$outboundSchema;
  /** @deprecated use `CompaniesUpdateCustomFields$Outbound` instead. */
  export type Outbound = CompaniesUpdateCustomFields$Outbound;
}

export function companiesUpdateCustomFieldsToJSON(
  companiesUpdateCustomFields: CompaniesUpdateCustomFields,
): string {
  return JSON.stringify(
    CompaniesUpdateCustomFields$outboundSchema.parse(
      companiesUpdateCustomFields,
    ),
  );
}

export function companiesUpdateCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateCustomFields' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateExtendPaths$inboundSchema: z.ZodType<
  CompaniesUpdateExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CompaniesUpdateExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CompaniesUpdateExtendPaths$outboundSchema: z.ZodType<
  CompaniesUpdateExtendPaths$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateExtendPaths$ {
  /** @deprecated use `CompaniesUpdateExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateExtendPaths$inboundSchema;
  /** @deprecated use `CompaniesUpdateExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateExtendPaths$outboundSchema;
  /** @deprecated use `CompaniesUpdateExtendPaths$Outbound` instead. */
  export type Outbound = CompaniesUpdateExtendPaths$Outbound;
}

export function companiesUpdateExtendPathsToJSON(
  companiesUpdateExtendPaths: CompaniesUpdateExtendPaths,
): string {
  return JSON.stringify(
    CompaniesUpdateExtendPaths$outboundSchema.parse(companiesUpdateExtendPaths),
  );
}

export function companiesUpdateExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateExtendPaths' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdatePassThrough$inboundSchema: z.ZodType<
  CompaniesUpdatePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => CompaniesUpdateExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CompaniesUpdatePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CompaniesUpdateExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CompaniesUpdatePassThrough$outboundSchema: z.ZodType<
  CompaniesUpdatePassThrough$Outbound,
  z.ZodTypeDef,
  CompaniesUpdatePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => CompaniesUpdateExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdatePassThrough$ {
  /** @deprecated use `CompaniesUpdatePassThrough$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdatePassThrough$inboundSchema;
  /** @deprecated use `CompaniesUpdatePassThrough$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdatePassThrough$outboundSchema;
  /** @deprecated use `CompaniesUpdatePassThrough$Outbound` instead. */
  export type Outbound = CompaniesUpdatePassThrough$Outbound;
}

export function companiesUpdatePassThroughToJSON(
  companiesUpdatePassThrough: CompaniesUpdatePassThrough,
): string {
  return JSON.stringify(
    CompaniesUpdatePassThrough$outboundSchema.parse(companiesUpdatePassThrough),
  );
}

export function companiesUpdatePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdatePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdatePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdatePassThrough' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateRequestBody$inboundSchema: z.ZodType<
  CompaniesUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vat_number: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesUpdateCurrency$inboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annual_revenue: z.nullable(z.string()).optional(),
  number_of_employees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  sales_tax_number: z.nullable(z.string()).optional(),
  payee_number: z.nullable(z.string()).optional(),
  abn_or_tfn: z.nullable(z.string()).optional(),
  abn_branch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  bank_accounts: z.array(
    z.lazy(() => CompaniesUpdateBankAccounts$inboundSchema),
  ).optional(),
  websites: z.array(z.lazy(() => CompaniesUpdateWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CompaniesUpdateAddresses$inboundSchema))
    .optional(),
  social_links: z.array(z.lazy(() => CompaniesUpdateSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => CompaniesUpdatePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => CompaniesUpdateEmails$inboundSchema)).optional(),
  row_type: z.lazy(() => CompaniesUpdateCompanyRowType$inboundSchema)
    .optional(),
  custom_fields: z.array(
    z.lazy(() => CompaniesUpdateCustomFields$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  read_only: z.nullable(z.boolean()).optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  pass_through: z.array(z.lazy(() => CompaniesUpdatePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "vat_number": "vatNumber",
    "annual_revenue": "annualRevenue",
    "number_of_employees": "numberOfEmployees",
    "sales_tax_number": "salesTaxNumber",
    "payee_number": "payeeNumber",
    "abn_or_tfn": "abnOrTfn",
    "abn_branch": "abnBranch",
    "first_name": "firstName",
    "last_name": "lastName",
    "bank_accounts": "bankAccounts",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "row_type": "rowType",
    "custom_fields": "customFields",
    "read_only": "readOnly",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CompaniesUpdateRequestBody$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  bank_accounts?: Array<CompaniesUpdateBankAccounts$Outbound> | undefined;
  websites?: Array<CompaniesUpdateWebsites$Outbound> | undefined;
  addresses?: Array<CompaniesUpdateAddresses$Outbound> | undefined;
  social_links?: Array<CompaniesUpdateSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<CompaniesUpdatePhoneNumbers$Outbound> | undefined;
  emails?: Array<CompaniesUpdateEmails$Outbound> | undefined;
  row_type?: CompaniesUpdateCompanyRowType$Outbound | undefined;
  custom_fields?: Array<CompaniesUpdateCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  pass_through?: Array<CompaniesUpdatePassThrough$Outbound> | undefined;
};

/** @internal */
export const CompaniesUpdateRequestBody$outboundSchema: z.ZodType<
  CompaniesUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateRequestBody
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesUpdateCurrency$outboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annualRevenue: z.nullable(z.string()).optional(),
  numberOfEmployees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  salesTaxNumber: z.nullable(z.string()).optional(),
  payeeNumber: z.nullable(z.string()).optional(),
  abnOrTfn: z.nullable(z.string()).optional(),
  abnBranch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  bankAccounts: z.array(
    z.lazy(() => CompaniesUpdateBankAccounts$outboundSchema),
  ).optional(),
  websites: z.array(z.lazy(() => CompaniesUpdateWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CompaniesUpdateAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(z.lazy(() => CompaniesUpdateSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => CompaniesUpdatePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => CompaniesUpdateEmails$outboundSchema))
    .optional(),
  rowType: z.lazy(() => CompaniesUpdateCompanyRowType$outboundSchema)
    .optional(),
  customFields: z.array(
    z.lazy(() => CompaniesUpdateCustomFields$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  readOnly: z.nullable(z.boolean()).optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  passThrough: z.array(z.lazy(() => CompaniesUpdatePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    vatNumber: "vat_number",
    annualRevenue: "annual_revenue",
    numberOfEmployees: "number_of_employees",
    salesTaxNumber: "sales_tax_number",
    payeeNumber: "payee_number",
    abnOrTfn: "abn_or_tfn",
    abnBranch: "abn_branch",
    firstName: "first_name",
    lastName: "last_name",
    bankAccounts: "bank_accounts",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    rowType: "row_type",
    customFields: "custom_fields",
    readOnly: "read_only",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateRequestBody$ {
  /** @deprecated use `CompaniesUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateRequestBody$inboundSchema;
  /** @deprecated use `CompaniesUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateRequestBody$outboundSchema;
  /** @deprecated use `CompaniesUpdateRequestBody$Outbound` instead. */
  export type Outbound = CompaniesUpdateRequestBody$Outbound;
}

export function companiesUpdateRequestBodyToJSON(
  companiesUpdateRequestBody: CompaniesUpdateRequestBody,
): string {
  return JSON.stringify(
    CompaniesUpdateRequestBody$outboundSchema.parse(companiesUpdateRequestBody),
  );
}

export function companiesUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateRequest$inboundSchema: z.ZodType<
  CompaniesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => CompaniesUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CompaniesUpdateRequest$Outbound = {
  id: string;
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  RequestBody: CompaniesUpdateRequestBody$Outbound;
};

/** @internal */
export const CompaniesUpdateRequest$outboundSchema: z.ZodType<
  CompaniesUpdateRequest$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateRequest
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => CompaniesUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateRequest$ {
  /** @deprecated use `CompaniesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateRequest$inboundSchema;
  /** @deprecated use `CompaniesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateRequest$outboundSchema;
  /** @deprecated use `CompaniesUpdateRequest$Outbound` instead. */
  export type Outbound = CompaniesUpdateRequest$Outbound;
}

export function companiesUpdateRequestToJSON(
  companiesUpdateRequest: CompaniesUpdateRequest,
): string {
  return JSON.stringify(
    CompaniesUpdateRequest$outboundSchema.parse(companiesUpdateRequest),
  );
}

export function companiesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateRequest' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateDetail$inboundSchema: z.ZodType<
  CompaniesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const CompaniesUpdateDetail$outboundSchema: z.ZodType<
  CompaniesUpdateDetail$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateDetail$ {
  /** @deprecated use `CompaniesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateDetail$inboundSchema;
  /** @deprecated use `CompaniesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateDetail$outboundSchema;
  /** @deprecated use `CompaniesUpdateDetail$Outbound` instead. */
  export type Outbound = CompaniesUpdateDetail$Outbound;
}

export function companiesUpdateDetailToJSON(
  companiesUpdateDetail: CompaniesUpdateDetail,
): string {
  return JSON.stringify(
    CompaniesUpdateDetail$outboundSchema.parse(companiesUpdateDetail),
  );
}

export function companiesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateCompaniesResponseBody$inboundSchema: z.ZodType<
  CompaniesUpdateCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type CompaniesUpdateCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesUpdateCompaniesResponseBody$outboundSchema: z.ZodType<
  CompaniesUpdateCompaniesResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateCompaniesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateCompaniesResponseBody$ {
  /** @deprecated use `CompaniesUpdateCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesUpdateCompaniesResponseBody$inboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesUpdateCompaniesResponseBody$outboundSchema;
  /** @deprecated use `CompaniesUpdateCompaniesResponseBody$Outbound` instead. */
  export type Outbound = CompaniesUpdateCompaniesResponseBody$Outbound;
}

export function companiesUpdateCompaniesResponseBodyToJSON(
  companiesUpdateCompaniesResponseBody: CompaniesUpdateCompaniesResponseBody,
): string {
  return JSON.stringify(
    CompaniesUpdateCompaniesResponseBody$outboundSchema.parse(
      companiesUpdateCompaniesResponseBody,
    ),
  );
}

export function companiesUpdateCompaniesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateCompaniesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompaniesUpdateCompaniesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateCompaniesResponseBody' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateUnifiedId$inboundSchema: z.ZodType<
  CompaniesUpdateUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CompaniesUpdateUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const CompaniesUpdateUnifiedId$outboundSchema: z.ZodType<
  CompaniesUpdateUnifiedId$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateUnifiedId$ {
  /** @deprecated use `CompaniesUpdateUnifiedId$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateUnifiedId$inboundSchema;
  /** @deprecated use `CompaniesUpdateUnifiedId$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateUnifiedId$outboundSchema;
  /** @deprecated use `CompaniesUpdateUnifiedId$Outbound` instead. */
  export type Outbound = CompaniesUpdateUnifiedId$Outbound;
}

export function companiesUpdateUnifiedIdToJSON(
  companiesUpdateUnifiedId: CompaniesUpdateUnifiedId,
): string {
  return JSON.stringify(
    CompaniesUpdateUnifiedId$outboundSchema.parse(companiesUpdateUnifiedId),
  );
}

export function companiesUpdateUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateUnifiedId' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateResponseBody$inboundSchema: z.ZodType<
  CompaniesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CompaniesUpdateUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CompaniesUpdateResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CompaniesUpdateUnifiedId$Outbound;
};

/** @internal */
export const CompaniesUpdateResponseBody$outboundSchema: z.ZodType<
  CompaniesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CompaniesUpdateUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateResponseBody$ {
  /** @deprecated use `CompaniesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateResponseBody$inboundSchema;
  /** @deprecated use `CompaniesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateResponseBody$outboundSchema;
  /** @deprecated use `CompaniesUpdateResponseBody$Outbound` instead. */
  export type Outbound = CompaniesUpdateResponseBody$Outbound;
}

export function companiesUpdateResponseBodyToJSON(
  companiesUpdateResponseBody: CompaniesUpdateResponseBody,
): string {
  return JSON.stringify(
    CompaniesUpdateResponseBody$outboundSchema.parse(
      companiesUpdateResponseBody,
    ),
  );
}

export function companiesUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const CompaniesUpdateResponse$inboundSchema: z.ZodType<
  CompaniesUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CompaniesUpdateResponseBody$inboundSchema),
  z.lazy(() => CompaniesUpdateCompaniesResponseBody$inboundSchema),
]);

/** @internal */
export type CompaniesUpdateResponse$Outbound =
  | CompaniesUpdateResponseBody$Outbound
  | CompaniesUpdateCompaniesResponseBody$Outbound;

/** @internal */
export const CompaniesUpdateResponse$outboundSchema: z.ZodType<
  CompaniesUpdateResponse$Outbound,
  z.ZodTypeDef,
  CompaniesUpdateResponse
> = z.union([
  z.lazy(() => CompaniesUpdateResponseBody$outboundSchema),
  z.lazy(() => CompaniesUpdateCompaniesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesUpdateResponse$ {
  /** @deprecated use `CompaniesUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = CompaniesUpdateResponse$inboundSchema;
  /** @deprecated use `CompaniesUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = CompaniesUpdateResponse$outboundSchema;
  /** @deprecated use `CompaniesUpdateResponse$Outbound` instead. */
  export type Outbound = CompaniesUpdateResponse$Outbound;
}

export function companiesUpdateResponseToJSON(
  companiesUpdateResponse: CompaniesUpdateResponse,
): string {
  return JSON.stringify(
    CompaniesUpdateResponse$outboundSchema.parse(companiesUpdateResponse),
  );
}

export function companiesUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesUpdateResponse' from JSON`,
  );
}
