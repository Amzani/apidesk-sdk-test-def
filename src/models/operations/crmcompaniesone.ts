/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmCompaniesOneGlobals = {
  /**
   * A unique identifier for the consumer, required to specify the data source or destination for the API operation. This ID is essential for authenticating and authorizing the request within the CRM system.
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmCompaniesOneRequest = {
  /**
   * The unique identifier of the activity to be deleted. This parameter is required to specify which activity record should be removed from the CRM system. Ensure that the ID corresponds to an existing activity to avoid errors.
   */
  id: string;
  /**
   * A boolean flag that determines whether to include the raw response in the output. This is primarily used for debugging purposes to gain insights into the API's response structure.
   */
  raw?: boolean | undefined;
  /**
   * An optional identifier for the specific service to be called, such as 'pipedrive'. This is only required when multiple integrations are active, allowing the API to route the request to the appropriate service.
   */
  serviceId?: string | undefined;
  /**
   * Enables selective retrieval of specific fields in the API response, improving performance by reducing data load. Specify fields as a comma-separated list, and use dot notation for nested properties.
   */
  fields?: string | null | undefined;
};

export type CrmCompaniesOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Company
   */
  getCompanyResponse?: components.GetCompanyResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmCompaniesOneGlobals$inboundSchema: z.ZodType<
  CrmCompaniesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmCompaniesOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmCompaniesOneGlobals$outboundSchema: z.ZodType<
  CrmCompaniesOneGlobals$Outbound,
  z.ZodTypeDef,
  CrmCompaniesOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCompaniesOneGlobals$ {
  /** @deprecated use `CrmCompaniesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmCompaniesOneGlobals$inboundSchema;
  /** @deprecated use `CrmCompaniesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmCompaniesOneGlobals$outboundSchema;
  /** @deprecated use `CrmCompaniesOneGlobals$Outbound` instead. */
  export type Outbound = CrmCompaniesOneGlobals$Outbound;
}

export function crmCompaniesOneGlobalsToJSON(
  crmCompaniesOneGlobals: CrmCompaniesOneGlobals,
): string {
  return JSON.stringify(
    CrmCompaniesOneGlobals$outboundSchema.parse(crmCompaniesOneGlobals),
  );
}

export function crmCompaniesOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmCompaniesOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCompaniesOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCompaniesOneGlobals' from JSON`,
  );
}

/** @internal */
export const CrmCompaniesOneRequest$inboundSchema: z.ZodType<
  CrmCompaniesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type CrmCompaniesOneRequest$Outbound = {
  id: string;
  raw: boolean;
  serviceId?: string | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const CrmCompaniesOneRequest$outboundSchema: z.ZodType<
  CrmCompaniesOneRequest$Outbound,
  z.ZodTypeDef,
  CrmCompaniesOneRequest
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCompaniesOneRequest$ {
  /** @deprecated use `CrmCompaniesOneRequest$inboundSchema` instead. */
  export const inboundSchema = CrmCompaniesOneRequest$inboundSchema;
  /** @deprecated use `CrmCompaniesOneRequest$outboundSchema` instead. */
  export const outboundSchema = CrmCompaniesOneRequest$outboundSchema;
  /** @deprecated use `CrmCompaniesOneRequest$Outbound` instead. */
  export type Outbound = CrmCompaniesOneRequest$Outbound;
}

export function crmCompaniesOneRequestToJSON(
  crmCompaniesOneRequest: CrmCompaniesOneRequest,
): string {
  return JSON.stringify(
    CrmCompaniesOneRequest$outboundSchema.parse(crmCompaniesOneRequest),
  );
}

export function crmCompaniesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmCompaniesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCompaniesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCompaniesOneRequest' from JSON`,
  );
}

/** @internal */
export const CrmCompaniesOneResponse$inboundSchema: z.ZodType<
  CrmCompaniesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetCompanyResponse: components.GetCompanyResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetCompanyResponse": "getCompanyResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmCompaniesOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetCompanyResponse?: components.GetCompanyResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmCompaniesOneResponse$outboundSchema: z.ZodType<
  CrmCompaniesOneResponse$Outbound,
  z.ZodTypeDef,
  CrmCompaniesOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getCompanyResponse: components.GetCompanyResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getCompanyResponse: "GetCompanyResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCompaniesOneResponse$ {
  /** @deprecated use `CrmCompaniesOneResponse$inboundSchema` instead. */
  export const inboundSchema = CrmCompaniesOneResponse$inboundSchema;
  /** @deprecated use `CrmCompaniesOneResponse$outboundSchema` instead. */
  export const outboundSchema = CrmCompaniesOneResponse$outboundSchema;
  /** @deprecated use `CrmCompaniesOneResponse$Outbound` instead. */
  export type Outbound = CrmCompaniesOneResponse$Outbound;
}

export function crmCompaniesOneResponseToJSON(
  crmCompaniesOneResponse: CrmCompaniesOneResponse,
): string {
  return JSON.stringify(
    CrmCompaniesOneResponse$outboundSchema.parse(crmCompaniesOneResponse),
  );
}

export function crmCompaniesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmCompaniesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCompaniesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCompaniesOneResponse' from JSON`,
  );
}
