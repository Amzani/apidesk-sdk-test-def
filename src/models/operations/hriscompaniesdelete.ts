/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisCompaniesDeleteGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisCompaniesDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesDeleteDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisCompaniesDeleteHrisCompaniesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type HrisCompaniesDeleteUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Companies
 */
export type HrisCompaniesDeleteResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisCompaniesDeleteUnifiedId;
};

export type HrisCompaniesDeleteResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Companies
   */
  twoHundredApplicationJsonObject?: HrisCompaniesDeleteResponseBody | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisCompaniesDeleteHrisCompaniesResponseBody
    | undefined;
};

/** @internal */
export const HrisCompaniesDeleteGlobals$inboundSchema: z.ZodType<
  HrisCompaniesDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisCompaniesDeleteGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisCompaniesDeleteGlobals$outboundSchema: z.ZodType<
  HrisCompaniesDeleteGlobals$Outbound,
  z.ZodTypeDef,
  HrisCompaniesDeleteGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteGlobals$ {
  /** @deprecated use `HrisCompaniesDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesDeleteGlobals$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesDeleteGlobals$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteGlobals$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteGlobals$Outbound;
}

export function hrisCompaniesDeleteGlobalsToJSON(
  hrisCompaniesDeleteGlobals: HrisCompaniesDeleteGlobals,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteGlobals$outboundSchema.parse(hrisCompaniesDeleteGlobals),
  );
}

export function hrisCompaniesDeleteGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesDeleteGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesDeleteGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesDeleteGlobals' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesDeleteRequest$inboundSchema: z.ZodType<
  HrisCompaniesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type HrisCompaniesDeleteRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const HrisCompaniesDeleteRequest$outboundSchema: z.ZodType<
  HrisCompaniesDeleteRequest$Outbound,
  z.ZodTypeDef,
  HrisCompaniesDeleteRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteRequest$ {
  /** @deprecated use `HrisCompaniesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesDeleteRequest$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesDeleteRequest$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteRequest$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteRequest$Outbound;
}

export function hrisCompaniesDeleteRequestToJSON(
  hrisCompaniesDeleteRequest: HrisCompaniesDeleteRequest,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteRequest$outboundSchema.parse(hrisCompaniesDeleteRequest),
  );
}

export function hrisCompaniesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesDeleteDetail$inboundSchema: z.ZodType<
  HrisCompaniesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisCompaniesDeleteDetail$outboundSchema: z.ZodType<
  HrisCompaniesDeleteDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteDetail$ {
  /** @deprecated use `HrisCompaniesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesDeleteDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesDeleteDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteDetail$Outbound;
}

export function hrisCompaniesDeleteDetailToJSON(
  hrisCompaniesDeleteDetail: HrisCompaniesDeleteDetail,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteDetail$outboundSchema.parse(hrisCompaniesDeleteDetail),
  );
}

export function hrisCompaniesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponseBody$inboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisCompaniesDeleteHrisCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisCompaniesDeleteHrisCompaniesResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesDeleteHrisCompaniesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesDeleteHrisCompaniesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteHrisCompaniesResponseBody$ {
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesDeleteHrisCompaniesResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteHrisCompaniesResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteHrisCompaniesResponseBody$Outbound;
}

export function hrisCompaniesDeleteHrisCompaniesResponseBodyToJSON(
  hrisCompaniesDeleteHrisCompaniesResponseBody:
    HrisCompaniesDeleteHrisCompaniesResponseBody,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteHrisCompaniesResponseBody$outboundSchema.parse(
      hrisCompaniesDeleteHrisCompaniesResponseBody,
    ),
  );
}

export function hrisCompaniesDeleteHrisCompaniesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesDeleteHrisCompaniesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesDeleteHrisCompaniesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesDeleteHrisCompaniesResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesDeleteUnifiedId$inboundSchema: z.ZodType<
  HrisCompaniesDeleteUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type HrisCompaniesDeleteUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const HrisCompaniesDeleteUnifiedId$outboundSchema: z.ZodType<
  HrisCompaniesDeleteUnifiedId$Outbound,
  z.ZodTypeDef,
  HrisCompaniesDeleteUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteUnifiedId$ {
  /** @deprecated use `HrisCompaniesDeleteUnifiedId$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesDeleteUnifiedId$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteUnifiedId$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesDeleteUnifiedId$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteUnifiedId$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteUnifiedId$Outbound;
}

export function hrisCompaniesDeleteUnifiedIdToJSON(
  hrisCompaniesDeleteUnifiedId: HrisCompaniesDeleteUnifiedId,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteUnifiedId$outboundSchema.parse(
      hrisCompaniesDeleteUnifiedId,
    ),
  );
}

export function hrisCompaniesDeleteUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesDeleteUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesDeleteUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesDeleteUnifiedId' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesDeleteResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisCompaniesDeleteUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisCompaniesDeleteResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisCompaniesDeleteUnifiedId$Outbound;
};

/** @internal */
export const HrisCompaniesDeleteResponseBody$outboundSchema: z.ZodType<
  HrisCompaniesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesDeleteResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisCompaniesDeleteUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteResponseBody$ {
  /** @deprecated use `HrisCompaniesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesDeleteResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesDeleteResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteResponseBody$Outbound;
}

export function hrisCompaniesDeleteResponseBodyToJSON(
  hrisCompaniesDeleteResponseBody: HrisCompaniesDeleteResponseBody,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteResponseBody$outboundSchema.parse(
      hrisCompaniesDeleteResponseBody,
    ),
  );
}

export function hrisCompaniesDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesDeleteResponse$inboundSchema: z.ZodType<
  HrisCompaniesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisCompaniesDeleteResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisCompaniesDeleteHrisCompaniesResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisCompaniesDeleteResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisCompaniesDeleteResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisCompaniesDeleteHrisCompaniesResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisCompaniesDeleteResponse$outboundSchema: z.ZodType<
  HrisCompaniesDeleteResponse$Outbound,
  z.ZodTypeDef,
  HrisCompaniesDeleteResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisCompaniesDeleteResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisCompaniesDeleteHrisCompaniesResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesDeleteResponse$ {
  /** @deprecated use `HrisCompaniesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesDeleteResponse$inboundSchema;
  /** @deprecated use `HrisCompaniesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesDeleteResponse$outboundSchema;
  /** @deprecated use `HrisCompaniesDeleteResponse$Outbound` instead. */
  export type Outbound = HrisCompaniesDeleteResponse$Outbound;
}

export function hrisCompaniesDeleteResponseToJSON(
  hrisCompaniesDeleteResponse: HrisCompaniesDeleteResponse,
): string {
  return JSON.stringify(
    HrisCompaniesDeleteResponse$outboundSchema.parse(
      hrisCompaniesDeleteResponse,
    ),
  );
}

export function hrisCompaniesDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesDeleteResponse' from JSON`,
  );
}
