/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OpportunitiesDeleteSecurity = {
  apiKey: string;
};

export type OpportunitiesDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type OpportunitiesDeleteDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type OpportunitiesDeleteOpportunitiesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type OpportunitiesDeleteUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Opportunity deleted
 */
export type OpportunitiesDeleteResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: OpportunitiesDeleteUnifiedId;
};

export type OpportunitiesDeleteResponse =
  | OpportunitiesDeleteResponseBody
  | OpportunitiesDeleteOpportunitiesResponseBody;

/** @internal */
export const OpportunitiesDeleteSecurity$inboundSchema: z.ZodType<
  OpportunitiesDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type OpportunitiesDeleteSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const OpportunitiesDeleteSecurity$outboundSchema: z.ZodType<
  OpportunitiesDeleteSecurity$Outbound,
  z.ZodTypeDef,
  OpportunitiesDeleteSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesDeleteSecurity$ {
  /** @deprecated use `OpportunitiesDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesDeleteSecurity$inboundSchema;
  /** @deprecated use `OpportunitiesDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesDeleteSecurity$outboundSchema;
  /** @deprecated use `OpportunitiesDeleteSecurity$Outbound` instead. */
  export type Outbound = OpportunitiesDeleteSecurity$Outbound;
}

export function opportunitiesDeleteSecurityToJSON(
  opportunitiesDeleteSecurity: OpportunitiesDeleteSecurity,
): string {
  return JSON.stringify(
    OpportunitiesDeleteSecurity$outboundSchema.parse(
      opportunitiesDeleteSecurity,
    ),
  );
}

export function opportunitiesDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const OpportunitiesDeleteRequest$inboundSchema: z.ZodType<
  OpportunitiesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type OpportunitiesDeleteRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const OpportunitiesDeleteRequest$outboundSchema: z.ZodType<
  OpportunitiesDeleteRequest$Outbound,
  z.ZodTypeDef,
  OpportunitiesDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesDeleteRequest$ {
  /** @deprecated use `OpportunitiesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesDeleteRequest$inboundSchema;
  /** @deprecated use `OpportunitiesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesDeleteRequest$outboundSchema;
  /** @deprecated use `OpportunitiesDeleteRequest$Outbound` instead. */
  export type Outbound = OpportunitiesDeleteRequest$Outbound;
}

export function opportunitiesDeleteRequestToJSON(
  opportunitiesDeleteRequest: OpportunitiesDeleteRequest,
): string {
  return JSON.stringify(
    OpportunitiesDeleteRequest$outboundSchema.parse(opportunitiesDeleteRequest),
  );
}

export function opportunitiesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const OpportunitiesDeleteDetail$inboundSchema: z.ZodType<
  OpportunitiesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type OpportunitiesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const OpportunitiesDeleteDetail$outboundSchema: z.ZodType<
  OpportunitiesDeleteDetail$Outbound,
  z.ZodTypeDef,
  OpportunitiesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesDeleteDetail$ {
  /** @deprecated use `OpportunitiesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesDeleteDetail$inboundSchema;
  /** @deprecated use `OpportunitiesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesDeleteDetail$outboundSchema;
  /** @deprecated use `OpportunitiesDeleteDetail$Outbound` instead. */
  export type Outbound = OpportunitiesDeleteDetail$Outbound;
}

export function opportunitiesDeleteDetailToJSON(
  opportunitiesDeleteDetail: OpportunitiesDeleteDetail,
): string {
  return JSON.stringify(
    OpportunitiesDeleteDetail$outboundSchema.parse(opportunitiesDeleteDetail),
  );
}

export function opportunitiesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const OpportunitiesDeleteOpportunitiesResponseBody$inboundSchema:
  z.ZodType<
    OpportunitiesDeleteOpportunitiesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type OpportunitiesDeleteOpportunitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const OpportunitiesDeleteOpportunitiesResponseBody$outboundSchema:
  z.ZodType<
    OpportunitiesDeleteOpportunitiesResponseBody$Outbound,
    z.ZodTypeDef,
    OpportunitiesDeleteOpportunitiesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesDeleteOpportunitiesResponseBody$ {
  /** @deprecated use `OpportunitiesDeleteOpportunitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OpportunitiesDeleteOpportunitiesResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesDeleteOpportunitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OpportunitiesDeleteOpportunitiesResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesDeleteOpportunitiesResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesDeleteOpportunitiesResponseBody$Outbound;
}

export function opportunitiesDeleteOpportunitiesResponseBodyToJSON(
  opportunitiesDeleteOpportunitiesResponseBody:
    OpportunitiesDeleteOpportunitiesResponseBody,
): string {
  return JSON.stringify(
    OpportunitiesDeleteOpportunitiesResponseBody$outboundSchema.parse(
      opportunitiesDeleteOpportunitiesResponseBody,
    ),
  );
}

export function opportunitiesDeleteOpportunitiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  OpportunitiesDeleteOpportunitiesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpportunitiesDeleteOpportunitiesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpportunitiesDeleteOpportunitiesResponseBody' from JSON`,
  );
}

/** @internal */
export const OpportunitiesDeleteUnifiedId$inboundSchema: z.ZodType<
  OpportunitiesDeleteUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type OpportunitiesDeleteUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const OpportunitiesDeleteUnifiedId$outboundSchema: z.ZodType<
  OpportunitiesDeleteUnifiedId$Outbound,
  z.ZodTypeDef,
  OpportunitiesDeleteUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesDeleteUnifiedId$ {
  /** @deprecated use `OpportunitiesDeleteUnifiedId$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesDeleteUnifiedId$inboundSchema;
  /** @deprecated use `OpportunitiesDeleteUnifiedId$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesDeleteUnifiedId$outboundSchema;
  /** @deprecated use `OpportunitiesDeleteUnifiedId$Outbound` instead. */
  export type Outbound = OpportunitiesDeleteUnifiedId$Outbound;
}

export function opportunitiesDeleteUnifiedIdToJSON(
  opportunitiesDeleteUnifiedId: OpportunitiesDeleteUnifiedId,
): string {
  return JSON.stringify(
    OpportunitiesDeleteUnifiedId$outboundSchema.parse(
      opportunitiesDeleteUnifiedId,
    ),
  );
}

export function opportunitiesDeleteUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesDeleteUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesDeleteUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesDeleteUnifiedId' from JSON`,
  );
}

/** @internal */
export const OpportunitiesDeleteResponseBody$inboundSchema: z.ZodType<
  OpportunitiesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunitiesDeleteUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type OpportunitiesDeleteResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: OpportunitiesDeleteUnifiedId$Outbound;
};

/** @internal */
export const OpportunitiesDeleteResponseBody$outboundSchema: z.ZodType<
  OpportunitiesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  OpportunitiesDeleteResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => OpportunitiesDeleteUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesDeleteResponseBody$ {
  /** @deprecated use `OpportunitiesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesDeleteResponseBody$inboundSchema;
  /** @deprecated use `OpportunitiesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesDeleteResponseBody$outboundSchema;
  /** @deprecated use `OpportunitiesDeleteResponseBody$Outbound` instead. */
  export type Outbound = OpportunitiesDeleteResponseBody$Outbound;
}

export function opportunitiesDeleteResponseBodyToJSON(
  opportunitiesDeleteResponseBody: OpportunitiesDeleteResponseBody,
): string {
  return JSON.stringify(
    OpportunitiesDeleteResponseBody$outboundSchema.parse(
      opportunitiesDeleteResponseBody,
    ),
  );
}

export function opportunitiesDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const OpportunitiesDeleteResponse$inboundSchema: z.ZodType<
  OpportunitiesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpportunitiesDeleteResponseBody$inboundSchema),
  z.lazy(() => OpportunitiesDeleteOpportunitiesResponseBody$inboundSchema),
]);

/** @internal */
export type OpportunitiesDeleteResponse$Outbound =
  | OpportunitiesDeleteResponseBody$Outbound
  | OpportunitiesDeleteOpportunitiesResponseBody$Outbound;

/** @internal */
export const OpportunitiesDeleteResponse$outboundSchema: z.ZodType<
  OpportunitiesDeleteResponse$Outbound,
  z.ZodTypeDef,
  OpportunitiesDeleteResponse
> = z.union([
  z.lazy(() => OpportunitiesDeleteResponseBody$outboundSchema),
  z.lazy(() => OpportunitiesDeleteOpportunitiesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpportunitiesDeleteResponse$ {
  /** @deprecated use `OpportunitiesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = OpportunitiesDeleteResponse$inboundSchema;
  /** @deprecated use `OpportunitiesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = OpportunitiesDeleteResponse$outboundSchema;
  /** @deprecated use `OpportunitiesDeleteResponse$Outbound` instead. */
  export type Outbound = OpportunitiesDeleteResponse$Outbound;
}

export function opportunitiesDeleteResponseToJSON(
  opportunitiesDeleteResponse: OpportunitiesDeleteResponse,
): string {
  return JSON.stringify(
    OpportunitiesDeleteResponse$outboundSchema.parse(
      opportunitiesDeleteResponse,
    ),
  );
}

export function opportunitiesDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<OpportunitiesDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpportunitiesDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpportunitiesDeleteResponse' from JSON`,
  );
}
