/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisDepartmentsAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisDepartmentsAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisDepartmentsAllHrisDepartmentsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisDepartmentsAllCustomMappings = {};

export type HrisDepartmentsAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisDepartmentsAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisDepartmentsAllExtendPaths> | undefined;
};

export type HrisDepartmentsAllData = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * Parent ID
   */
  parentId?: string | null | undefined;
  /**
   * Department name
   */
  name?: string | null | undefined;
  code?: string | null | undefined;
  description?: string | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: HrisDepartmentsAllCustomMappings | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisDepartmentsAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type HrisDepartmentsAllCursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type HrisDepartmentsAllMeta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: HrisDepartmentsAllCursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type HrisDepartmentsAllLinks = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Departments
 */
export type HrisDepartmentsAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<HrisDepartmentsAllData>;
  /**
   * Response metadata
   */
  meta?: HrisDepartmentsAllMeta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: HrisDepartmentsAllLinks | undefined;
};

export type HrisDepartmentsAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Departments
   */
  twoHundredApplicationJsonObject?: HrisDepartmentsAllResponseBody | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisDepartmentsAllHrisDepartmentsResponseBody
    | undefined;
};

/** @internal */
export const HrisDepartmentsAllGlobals$inboundSchema: z.ZodType<
  HrisDepartmentsAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisDepartmentsAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisDepartmentsAllGlobals$outboundSchema: z.ZodType<
  HrisDepartmentsAllGlobals$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllGlobals$ {
  /** @deprecated use `HrisDepartmentsAllGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllGlobals$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllGlobals$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllGlobals$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllGlobals$Outbound;
}

export function hrisDepartmentsAllGlobalsToJSON(
  hrisDepartmentsAllGlobals: HrisDepartmentsAllGlobals,
): string {
  return JSON.stringify(
    HrisDepartmentsAllGlobals$outboundSchema.parse(hrisDepartmentsAllGlobals),
  );
}

export function hrisDepartmentsAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllGlobals' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllRequest$inboundSchema: z.ZodType<
  HrisDepartmentsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisDepartmentsAllRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisDepartmentsAllRequest$outboundSchema: z.ZodType<
  HrisDepartmentsAllRequest$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllRequest$ {
  /** @deprecated use `HrisDepartmentsAllRequest$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllRequest$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllRequest$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllRequest$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllRequest$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllRequest$Outbound;
}

export function hrisDepartmentsAllRequestToJSON(
  hrisDepartmentsAllRequest: HrisDepartmentsAllRequest,
): string {
  return JSON.stringify(
    HrisDepartmentsAllRequest$outboundSchema.parse(hrisDepartmentsAllRequest),
  );
}

export function hrisDepartmentsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllRequest' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllDetail$inboundSchema: z.ZodType<
  HrisDepartmentsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisDepartmentsAllDetail$outboundSchema: z.ZodType<
  HrisDepartmentsAllDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllDetail$ {
  /** @deprecated use `HrisDepartmentsAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllDetail$Outbound;
}

export function hrisDepartmentsAllDetailToJSON(
  hrisDepartmentsAllDetail: HrisDepartmentsAllDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsAllDetail$outboundSchema.parse(hrisDepartmentsAllDetail),
  );
}

export function hrisDepartmentsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisDepartmentsAllHrisDepartmentsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsAllHrisDepartmentsResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsAllHrisDepartmentsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAllHrisDepartmentsResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllHrisDepartmentsResponseBody$ {
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAllHrisDepartmentsResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllHrisDepartmentsResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllHrisDepartmentsResponseBody$Outbound;
}

export function hrisDepartmentsAllHrisDepartmentsResponseBodyToJSON(
  hrisDepartmentsAllHrisDepartmentsResponseBody:
    HrisDepartmentsAllHrisDepartmentsResponseBody,
): string {
  return JSON.stringify(
    HrisDepartmentsAllHrisDepartmentsResponseBody$outboundSchema.parse(
      hrisDepartmentsAllHrisDepartmentsResponseBody,
    ),
  );
}

export function hrisDepartmentsAllHrisDepartmentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsAllHrisDepartmentsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsAllHrisDepartmentsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsAllHrisDepartmentsResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllCustomMappings$inboundSchema: z.ZodType<
  HrisDepartmentsAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisDepartmentsAllCustomMappings$Outbound = {};

/** @internal */
export const HrisDepartmentsAllCustomMappings$outboundSchema: z.ZodType<
  HrisDepartmentsAllCustomMappings$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllCustomMappings$ {
  /** @deprecated use `HrisDepartmentsAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllCustomMappings$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllCustomMappings$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllCustomMappings$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllCustomMappings$Outbound;
}

export function hrisDepartmentsAllCustomMappingsToJSON(
  hrisDepartmentsAllCustomMappings: HrisDepartmentsAllCustomMappings,
): string {
  return JSON.stringify(
    HrisDepartmentsAllCustomMappings$outboundSchema.parse(
      hrisDepartmentsAllCustomMappings,
    ),
  );
}

export function hrisDepartmentsAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllExtendPaths$inboundSchema: z.ZodType<
  HrisDepartmentsAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisDepartmentsAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisDepartmentsAllExtendPaths$outboundSchema: z.ZodType<
  HrisDepartmentsAllExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllExtendPaths$ {
  /** @deprecated use `HrisDepartmentsAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllExtendPaths$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllExtendPaths$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllExtendPaths$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllExtendPaths$Outbound;
}

export function hrisDepartmentsAllExtendPathsToJSON(
  hrisDepartmentsAllExtendPaths: HrisDepartmentsAllExtendPaths,
): string {
  return JSON.stringify(
    HrisDepartmentsAllExtendPaths$outboundSchema.parse(
      hrisDepartmentsAllExtendPaths,
    ),
  );
}

export function hrisDepartmentsAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllPassThrough$inboundSchema: z.ZodType<
  HrisDepartmentsAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => HrisDepartmentsAllExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisDepartmentsAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisDepartmentsAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisDepartmentsAllPassThrough$outboundSchema: z.ZodType<
  HrisDepartmentsAllPassThrough$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => HrisDepartmentsAllExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllPassThrough$ {
  /** @deprecated use `HrisDepartmentsAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllPassThrough$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllPassThrough$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllPassThrough$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllPassThrough$Outbound;
}

export function hrisDepartmentsAllPassThroughToJSON(
  hrisDepartmentsAllPassThrough: HrisDepartmentsAllPassThrough,
): string {
  return JSON.stringify(
    HrisDepartmentsAllPassThrough$outboundSchema.parse(
      hrisDepartmentsAllPassThrough,
    ),
  );
}

export function hrisDepartmentsAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllPassThrough' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllData$inboundSchema: z.ZodType<
  HrisDepartmentsAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  parent_id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => HrisDepartmentsAllCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => HrisDepartmentsAllPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisDepartmentsAllData$Outbound = {
  id?: string | undefined;
  parent_id?: string | null | undefined;
  name?: string | null | undefined;
  code?: string | null | undefined;
  description?: string | null | undefined;
  custom_mappings?:
    | HrisDepartmentsAllCustomMappings$Outbound
    | null
    | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<HrisDepartmentsAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisDepartmentsAllData$outboundSchema: z.ZodType<
  HrisDepartmentsAllData$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllData
> = z.object({
  id: z.string().optional(),
  parentId: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  customMappings: z.nullable(
    z.lazy(() => HrisDepartmentsAllCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(
    z.lazy(() => HrisDepartmentsAllPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllData$ {
  /** @deprecated use `HrisDepartmentsAllData$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllData$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllData$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllData$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllData$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllData$Outbound;
}

export function hrisDepartmentsAllDataToJSON(
  hrisDepartmentsAllData: HrisDepartmentsAllData,
): string {
  return JSON.stringify(
    HrisDepartmentsAllData$outboundSchema.parse(hrisDepartmentsAllData),
  );
}

export function hrisDepartmentsAllDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllData' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllCursors$inboundSchema: z.ZodType<
  HrisDepartmentsAllCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisDepartmentsAllCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const HrisDepartmentsAllCursors$outboundSchema: z.ZodType<
  HrisDepartmentsAllCursors$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllCursors$ {
  /** @deprecated use `HrisDepartmentsAllCursors$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllCursors$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllCursors$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllCursors$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllCursors$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllCursors$Outbound;
}

export function hrisDepartmentsAllCursorsToJSON(
  hrisDepartmentsAllCursors: HrisDepartmentsAllCursors,
): string {
  return JSON.stringify(
    HrisDepartmentsAllCursors$outboundSchema.parse(hrisDepartmentsAllCursors),
  );
}

export function hrisDepartmentsAllCursorsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllCursors' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllMeta$inboundSchema: z.ZodType<
  HrisDepartmentsAllMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => HrisDepartmentsAllCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type HrisDepartmentsAllMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: HrisDepartmentsAllCursors$Outbound | undefined;
};

/** @internal */
export const HrisDepartmentsAllMeta$outboundSchema: z.ZodType<
  HrisDepartmentsAllMeta$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => HrisDepartmentsAllCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllMeta$ {
  /** @deprecated use `HrisDepartmentsAllMeta$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllMeta$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllMeta$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllMeta$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllMeta$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllMeta$Outbound;
}

export function hrisDepartmentsAllMetaToJSON(
  hrisDepartmentsAllMeta: HrisDepartmentsAllMeta,
): string {
  return JSON.stringify(
    HrisDepartmentsAllMeta$outboundSchema.parse(hrisDepartmentsAllMeta),
  );
}

export function hrisDepartmentsAllMetaFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllMeta' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllLinks$inboundSchema: z.ZodType<
  HrisDepartmentsAllLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisDepartmentsAllLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const HrisDepartmentsAllLinks$outboundSchema: z.ZodType<
  HrisDepartmentsAllLinks$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllLinks$ {
  /** @deprecated use `HrisDepartmentsAllLinks$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllLinks$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllLinks$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllLinks$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllLinks$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllLinks$Outbound;
}

export function hrisDepartmentsAllLinksToJSON(
  hrisDepartmentsAllLinks: HrisDepartmentsAllLinks,
): string {
  return JSON.stringify(
    HrisDepartmentsAllLinks$outboundSchema.parse(hrisDepartmentsAllLinks),
  );
}

export function hrisDepartmentsAllLinksFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllLinks' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllResponseBody$inboundSchema: z.ZodType<
  HrisDepartmentsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => HrisDepartmentsAllData$inboundSchema)),
  meta: z.lazy(() => HrisDepartmentsAllMeta$inboundSchema).optional(),
  links: z.lazy(() => HrisDepartmentsAllLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisDepartmentsAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<HrisDepartmentsAllData$Outbound>;
  meta?: HrisDepartmentsAllMeta$Outbound | undefined;
  links?: HrisDepartmentsAllLinks$Outbound | undefined;
};

/** @internal */
export const HrisDepartmentsAllResponseBody$outboundSchema: z.ZodType<
  HrisDepartmentsAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => HrisDepartmentsAllData$outboundSchema)),
  meta: z.lazy(() => HrisDepartmentsAllMeta$outboundSchema).optional(),
  links: z.lazy(() => HrisDepartmentsAllLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllResponseBody$ {
  /** @deprecated use `HrisDepartmentsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllResponseBody$Outbound;
}

export function hrisDepartmentsAllResponseBodyToJSON(
  hrisDepartmentsAllResponseBody: HrisDepartmentsAllResponseBody,
): string {
  return JSON.stringify(
    HrisDepartmentsAllResponseBody$outboundSchema.parse(
      hrisDepartmentsAllResponseBody,
    ),
  );
}

export function hrisDepartmentsAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAllResponse$inboundSchema: z.ZodType<
  HrisDepartmentsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisDepartmentsAllResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisDepartmentsAllHrisDepartmentsResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisDepartmentsAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisDepartmentsAllResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisDepartmentsAllHrisDepartmentsResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisDepartmentsAllResponse$outboundSchema: z.ZodType<
  HrisDepartmentsAllResponse$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisDepartmentsAllResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisDepartmentsAllHrisDepartmentsResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAllResponse$ {
  /** @deprecated use `HrisDepartmentsAllResponse$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAllResponse$inboundSchema;
  /** @deprecated use `HrisDepartmentsAllResponse$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAllResponse$outboundSchema;
  /** @deprecated use `HrisDepartmentsAllResponse$Outbound` instead. */
  export type Outbound = HrisDepartmentsAllResponse$Outbound;
}

export function hrisDepartmentsAllResponseToJSON(
  hrisDepartmentsAllResponse: HrisDepartmentsAllResponse,
): string {
  return JSON.stringify(
    HrisDepartmentsAllResponse$outboundSchema.parse(hrisDepartmentsAllResponse),
  );
}

export function hrisDepartmentsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAllResponse' from JSON`,
  );
}
