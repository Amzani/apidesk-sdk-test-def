/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompaniesAllSecurity = {
  apiKey: string;
};

/**
 * A query parameter that allows users to apply specific filters to the data retrieval process. It supports deep object style filtering, enabling precise control over the data returned. For example, filtering by company name can be achieved by specifying the desired name in the filter object.
 */
export type Filter = {
  /**
   * Name of the company to filter on
   */
  name?: string | undefined;
};

/**
 * The field on which to sort the Companies
 */
export const By = {
  CreatedAt: "created_at",
  UpdatedAt: "updated_at",
  Name: "name",
} as const;
/**
 * The field on which to sort the Companies
 */
export type By = ClosedEnum<typeof By>;

/**
 * The direction in which to sort the results
 */
export const Direction = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction in which to sort the results
 */
export type Direction = ClosedEnum<typeof Direction>;

/**
 * This query parameter enables sorting of the returned company data based on specified fields and directions. It supports deep object style sorting, allowing users to define the field (e.g., 'created_at') and direction ('asc' or 'desc') for sorting. This parameter helps in organizing data according to user preferences.
 */
export type Sort = {
  /**
   * The field on which to sort the Companies
   */
  by?: By | undefined;
  /**
   * The direction in which to sort the results
   */
  direction?: Direction | undefined;
};

export type CompaniesAllRequest = {
  /**
   * This query parameter, when set to true, includes the raw response from the API. It is primarily used for debugging purposes to help developers understand the exact data being returned by the API. By default, this parameter is set to false, meaning the response will be processed or formatted according to the API's standard output.
   */
  raw?: boolean | undefined;
  /**
   * A mandatory header parameter that specifies the unique ID of the consumer accessing the API. This ID is crucial for identifying the source of the request and ensuring that data is retrieved or pushed correctly for the specified consumer. It is a string value that must be provided in every request to authenticate the consumer.
   */
  consumerId: string;
  /**
   * This required header parameter represents the unique ID of your Unify application. It is essential for application identification and must be included in every API request to authenticate and authorize the application making the request. This ID helps in tracking and managing API usage across different applications.
   */
  appId: string;
  /**
   * An optional header parameter used to specify the service ID you wish to interact with, such as 'pipedrive' or 'salesforce'. This parameter is necessary only when a consumer has multiple integrations activated for a Unified API, allowing the API to route the request to the correct service.
   */
  serviceId?: string | undefined;
  /**
   * A query parameter used for pagination, indicating the starting point for the next set of results. Cursors for navigating to the next or previous pages are provided in the 'meta.cursors' property of the API response. This parameter is useful for handling large datasets by retrieving data in manageable chunks.
   */
  cursor?: string | null | undefined;
  /**
   * This query parameter defines the maximum number of results to return in a single API response. It helps manage the volume of data returned and can be set between 1 and 200, with a default value of 20. Adjusting this parameter allows for efficient data retrieval based on application needs.
   */
  limit?: number | undefined;
  /**
   * A query parameter that allows users to apply specific filters to the data retrieval process. It supports deep object style filtering, enabling precise control over the data returned. For example, filtering by company name can be achieved by specifying the desired name in the filter object.
   */
  filter?: Filter | undefined;
  /**
   * This query parameter enables sorting of the returned company data based on specified fields and directions. It supports deep object style sorting, allowing users to define the field (e.g., 'created_at') and direction ('asc' or 'desc') for sorting. This parameter helps in organizing data according to user preferences.
   */
  sort?: Sort | undefined;
  /**
   * An optional query parameter that allows users to pass additional unmapped key/value pairs directly to the downstream service as query parameters. This feature is useful for extending the API's functionality by including custom parameters that are not explicitly defined in the API specification.
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' query parameter enables users to specify which fields should be included in the API response. By providing a comma-separated list of field names, users can optimize the response to include only the necessary data, reducing payload size and improving performance. Nested properties can be requested using dot notation.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type CompaniesAllCompaniesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const CompaniesAllCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type CompaniesAllCurrency = ClosedEnum<typeof CompaniesAllCurrency>;

/**
 * The type of bank account.
 */
export const CompaniesAllAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The type of bank account.
 */
export type CompaniesAllAccountType = ClosedEnum<
  typeof CompaniesAllAccountType
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const CompaniesAllCompaniesCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type CompaniesAllCompaniesCurrency = ClosedEnum<
  typeof CompaniesAllCompaniesCurrency
>;

export type CompaniesAllBankAccounts = {
  /**
   * The name of the bank
   */
  bankName?: string | null | undefined;
  /**
   * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name which you used in opening your bank account.
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account.
   */
  accountType?: CompaniesAllAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN).
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC).
   */
  bic?: string | null | undefined;
  /**
   * A routing number is a nine-digit code used to identify a financial institution in the United States.
   */
  routingNumber?: string | null | undefined;
  /**
   * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
   */
  bsbNumber?: string | null | undefined;
  /**
   * A branch identifier is a unique identifier for a branch of a bank or financial institution.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
   */
  bankCode?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: CompaniesAllCompaniesCurrency | null | undefined;
};

/**
 * The type of website
 */
export const CompaniesAllType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type CompaniesAllType = ClosedEnum<typeof CompaniesAllType>;

export type CompaniesAllWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: CompaniesAllType | null | undefined;
};

/**
 * The type of address.
 */
export const CompaniesAllCompaniesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type CompaniesAllCompaniesType = ClosedEnum<
  typeof CompaniesAllCompaniesType
>;

export type CompaniesAllAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: CompaniesAllCompaniesType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type CompaniesAllSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const CompaniesAllCompaniesResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type CompaniesAllCompaniesResponseType = ClosedEnum<
  typeof CompaniesAllCompaniesResponseType
>;

export type CompaniesAllPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: CompaniesAllCompaniesResponseType | null | undefined;
};

/**
 * Email type
 */
export const CompaniesAllCompaniesResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type CompaniesAllCompaniesResponse200Type = ClosedEnum<
  typeof CompaniesAllCompaniesResponse200Type
>;

export type CompaniesAllEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: CompaniesAllCompaniesResponse200Type | null | undefined;
};

export type CompaniesAllCompanyRowType = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

export type CompaniesAllValue6 = {};

export type CompaniesAllValue4 = {};

export type CompaniesAllValue =
  | CompaniesAllValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<CompaniesAllValue6>;

export type CompaniesAllCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | CompaniesAllValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<CompaniesAllValue6>
    | null
    | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type CustomMappings = {};

export type CompaniesAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type CompaniesAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<CompaniesAllExtendPaths> | undefined;
};

export type Data = {
  /**
   * Unique identifier for the company
   */
  id?: string | undefined;
  /**
   * Name of the company
   */
  name: string | null;
  /**
   * Number of interactions
   */
  interactionCount?: number | null | undefined;
  /**
   * Owner ID
   */
  ownerId?: string | null | undefined;
  /**
   * The Image URL of the company
   */
  image?: string | null | undefined;
  /**
   * A description of the company
   */
  description?: string | null | undefined;
  /**
   * The VAT number of the company
   */
  vatNumber?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: CompaniesAllCurrency | null | undefined;
  /**
   * The status of the company
   */
  status?: string | null | undefined;
  /**
   * The fax number of the company
   */
  fax?: string | null | undefined;
  /**
   * The annual revenue of the company
   */
  annualRevenue?: string | null | undefined;
  /**
   * Number of employees
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * The industry represents the type of business the company is in.
   */
  industry?: string | null | undefined;
  /**
   * The ownership indicates the type of ownership of the company.
   */
  ownership?: string | null | undefined;
  /**
   * A sales tax number is a unique number that identifies a company for tax purposes.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * A payee number is a unique number that identifies a payee for tax purposes.
   */
  payeeNumber?: string | null | undefined;
  /**
   * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
   */
  acn?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Parent ID
   */
  parentId?: string | null | undefined;
  bankAccounts?: Array<CompaniesAllBankAccounts> | undefined;
  websites?: Array<CompaniesAllWebsites> | undefined;
  addresses?: Array<CompaniesAllAddresses> | undefined;
  socialLinks?: Array<CompaniesAllSocialLinks> | undefined;
  phoneNumbers?: Array<CompaniesAllPhoneNumbers> | undefined;
  emails?: Array<CompaniesAllEmails> | undefined;
  rowType?: CompaniesAllCompanyRowType | undefined;
  customFields?: Array<CompaniesAllCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * Whether the company is read-only or not
   */
  readOnly?: boolean | null | undefined;
  /**
   * Last activity date
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * Whether the company is deleted or not
   */
  deleted?: boolean | undefined;
  /**
   * A formal salutation for the person. For example, 'Mr', 'Mrs'
   */
  salutation?: string | null | undefined;
  /**
   * The date of birth of the person.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * Updated by user ID
   */
  updatedBy?: string | null | undefined;
  /**
   * Created by user ID
   */
  createdBy?: string | null | undefined;
  /**
   * Last updated date
   */
  updatedAt?: Date | null | undefined;
  /**
   * Creation date
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<CompaniesAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type Cursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type Meta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: Cursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type Links = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Companies
 */
export type CompaniesAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<Data>;
  /**
   * Response metadata
   */
  meta?: Meta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: Links | undefined;
};

export type CompaniesAllResponse =
  | CompaniesAllCompaniesResponseBody
  | CompaniesAllResponseBody;

/** @internal */
export const CompaniesAllSecurity$inboundSchema: z.ZodType<
  CompaniesAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type CompaniesAllSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const CompaniesAllSecurity$outboundSchema: z.ZodType<
  CompaniesAllSecurity$Outbound,
  z.ZodTypeDef,
  CompaniesAllSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllSecurity$ {
  /** @deprecated use `CompaniesAllSecurity$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllSecurity$inboundSchema;
  /** @deprecated use `CompaniesAllSecurity$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllSecurity$outboundSchema;
  /** @deprecated use `CompaniesAllSecurity$Outbound` instead. */
  export type Outbound = CompaniesAllSecurity$Outbound;
}

export function companiesAllSecurityToJSON(
  companiesAllSecurity: CompaniesAllSecurity,
): string {
  return JSON.stringify(
    CompaniesAllSecurity$outboundSchema.parse(companiesAllSecurity),
  );
}

export function companiesAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllSecurity' from JSON`,
  );
}

/** @internal */
export const Filter$inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string().optional(),
  });

/** @internal */
export type Filter$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const Filter$outboundSchema: z.ZodType<
  Filter$Outbound,
  z.ZodTypeDef,
  Filter
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
  /** @deprecated use `Filter$Outbound` instead. */
  export type Outbound = Filter$Outbound;
}

export function filterToJSON(filter: Filter): string {
  return JSON.stringify(Filter$outboundSchema.parse(filter));
}

export function filterFromJSON(
  jsonString: string,
): SafeParseResult<Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter' from JSON`,
  );
}

/** @internal */
export const By$inboundSchema: z.ZodNativeEnum<typeof By> = z.nativeEnum(By);

/** @internal */
export const By$outboundSchema: z.ZodNativeEnum<typeof By> = By$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace By$ {
  /** @deprecated use `By$inboundSchema` instead. */
  export const inboundSchema = By$inboundSchema;
  /** @deprecated use `By$outboundSchema` instead. */
  export const outboundSchema = By$outboundSchema;
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const Sort$inboundSchema: z.ZodType<Sort, z.ZodTypeDef, unknown> = z
  .object({
    by: By$inboundSchema.optional(),
    direction: Direction$inboundSchema.default("asc"),
  });

/** @internal */
export type Sort$Outbound = {
  by?: string | undefined;
  direction: string;
};

/** @internal */
export const Sort$outboundSchema: z.ZodType<Sort$Outbound, z.ZodTypeDef, Sort> =
  z.object({
    by: By$outboundSchema.optional(),
    direction: Direction$outboundSchema.default("asc"),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
  /** @deprecated use `Sort$inboundSchema` instead. */
  export const inboundSchema = Sort$inboundSchema;
  /** @deprecated use `Sort$outboundSchema` instead. */
  export const outboundSchema = Sort$outboundSchema;
  /** @deprecated use `Sort$Outbound` instead. */
  export type Outbound = Sort$Outbound;
}

export function sortToJSON(sort: Sort): string {
  return JSON.stringify(Sort$outboundSchema.parse(sort));
}

export function sortFromJSON(
  jsonString: string,
): SafeParseResult<Sort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sort' from JSON`,
  );
}

/** @internal */
export const CompaniesAllRequest$inboundSchema: z.ZodType<
  CompaniesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => Filter$inboundSchema).optional(),
  sort: z.lazy(() => Sort$inboundSchema).optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CompaniesAllRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: Filter$Outbound | undefined;
  sort?: Sort$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const CompaniesAllRequest$outboundSchema: z.ZodType<
  CompaniesAllRequest$Outbound,
  z.ZodTypeDef,
  CompaniesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => Filter$outboundSchema).optional(),
  sort: z.lazy(() => Sort$outboundSchema).optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllRequest$ {
  /** @deprecated use `CompaniesAllRequest$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllRequest$inboundSchema;
  /** @deprecated use `CompaniesAllRequest$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllRequest$outboundSchema;
  /** @deprecated use `CompaniesAllRequest$Outbound` instead. */
  export type Outbound = CompaniesAllRequest$Outbound;
}

export function companiesAllRequestToJSON(
  companiesAllRequest: CompaniesAllRequest,
): string {
  return JSON.stringify(
    CompaniesAllRequest$outboundSchema.parse(companiesAllRequest),
  );
}

export function companiesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllRequest' from JSON`,
  );
}

/** @internal */
export const CompaniesAllDetail$inboundSchema: z.ZodType<
  CompaniesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const CompaniesAllDetail$outboundSchema: z.ZodType<
  CompaniesAllDetail$Outbound,
  z.ZodTypeDef,
  CompaniesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllDetail$ {
  /** @deprecated use `CompaniesAllDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllDetail$inboundSchema;
  /** @deprecated use `CompaniesAllDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllDetail$outboundSchema;
  /** @deprecated use `CompaniesAllDetail$Outbound` instead. */
  export type Outbound = CompaniesAllDetail$Outbound;
}

export function companiesAllDetailToJSON(
  companiesAllDetail: CompaniesAllDetail,
): string {
  return JSON.stringify(
    CompaniesAllDetail$outboundSchema.parse(companiesAllDetail),
  );
}

export function companiesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesAllCompaniesResponseBody$inboundSchema: z.ZodType<
  CompaniesAllCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type CompaniesAllCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesAllCompaniesResponseBody$outboundSchema: z.ZodType<
  CompaniesAllCompaniesResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesAllCompaniesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesResponseBody$ {
  /** @deprecated use `CompaniesAllCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllCompaniesResponseBody$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesAllCompaniesResponseBody$outboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponseBody$Outbound` instead. */
  export type Outbound = CompaniesAllCompaniesResponseBody$Outbound;
}

export function companiesAllCompaniesResponseBodyToJSON(
  companiesAllCompaniesResponseBody: CompaniesAllCompaniesResponseBody,
): string {
  return JSON.stringify(
    CompaniesAllCompaniesResponseBody$outboundSchema.parse(
      companiesAllCompaniesResponseBody,
    ),
  );
}

export function companiesAllCompaniesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllCompaniesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllCompaniesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllCompaniesResponseBody' from JSON`,
  );
}

/** @internal */
export const CompaniesAllCurrency$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllCurrency
> = z.nativeEnum(CompaniesAllCurrency);

/** @internal */
export const CompaniesAllCurrency$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllCurrency
> = CompaniesAllCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCurrency$ {
  /** @deprecated use `CompaniesAllCurrency$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllCurrency$inboundSchema;
  /** @deprecated use `CompaniesAllCurrency$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllCurrency$outboundSchema;
}

/** @internal */
export const CompaniesAllAccountType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllAccountType
> = z.nativeEnum(CompaniesAllAccountType);

/** @internal */
export const CompaniesAllAccountType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllAccountType
> = CompaniesAllAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllAccountType$ {
  /** @deprecated use `CompaniesAllAccountType$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllAccountType$inboundSchema;
  /** @deprecated use `CompaniesAllAccountType$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllAccountType$outboundSchema;
}

/** @internal */
export const CompaniesAllCompaniesCurrency$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllCompaniesCurrency
> = z.nativeEnum(CompaniesAllCompaniesCurrency);

/** @internal */
export const CompaniesAllCompaniesCurrency$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllCompaniesCurrency
> = CompaniesAllCompaniesCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesCurrency$ {
  /** @deprecated use `CompaniesAllCompaniesCurrency$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllCompaniesCurrency$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesCurrency$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllCompaniesCurrency$outboundSchema;
}

/** @internal */
export const CompaniesAllBankAccounts$inboundSchema: z.ZodType<
  CompaniesAllBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(CompaniesAllAccountType$inboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesAllCompaniesCurrency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type CompaniesAllBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const CompaniesAllBankAccounts$outboundSchema: z.ZodType<
  CompaniesAllBankAccounts$Outbound,
  z.ZodTypeDef,
  CompaniesAllBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(CompaniesAllAccountType$outboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesAllCompaniesCurrency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllBankAccounts$ {
  /** @deprecated use `CompaniesAllBankAccounts$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllBankAccounts$inboundSchema;
  /** @deprecated use `CompaniesAllBankAccounts$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllBankAccounts$outboundSchema;
  /** @deprecated use `CompaniesAllBankAccounts$Outbound` instead. */
  export type Outbound = CompaniesAllBankAccounts$Outbound;
}

export function companiesAllBankAccountsToJSON(
  companiesAllBankAccounts: CompaniesAllBankAccounts,
): string {
  return JSON.stringify(
    CompaniesAllBankAccounts$outboundSchema.parse(companiesAllBankAccounts),
  );
}

export function companiesAllBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllBankAccounts' from JSON`,
  );
}

/** @internal */
export const CompaniesAllType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllType
> = z.nativeEnum(CompaniesAllType);

/** @internal */
export const CompaniesAllType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllType
> = CompaniesAllType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllType$ {
  /** @deprecated use `CompaniesAllType$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllType$inboundSchema;
  /** @deprecated use `CompaniesAllType$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllType$outboundSchema;
}

/** @internal */
export const CompaniesAllWebsites$inboundSchema: z.ZodType<
  CompaniesAllWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CompaniesAllType$inboundSchema).optional(),
});

/** @internal */
export type CompaniesAllWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesAllWebsites$outboundSchema: z.ZodType<
  CompaniesAllWebsites$Outbound,
  z.ZodTypeDef,
  CompaniesAllWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CompaniesAllType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllWebsites$ {
  /** @deprecated use `CompaniesAllWebsites$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllWebsites$inboundSchema;
  /** @deprecated use `CompaniesAllWebsites$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllWebsites$outboundSchema;
  /** @deprecated use `CompaniesAllWebsites$Outbound` instead. */
  export type Outbound = CompaniesAllWebsites$Outbound;
}

export function companiesAllWebsitesToJSON(
  companiesAllWebsites: CompaniesAllWebsites,
): string {
  return JSON.stringify(
    CompaniesAllWebsites$outboundSchema.parse(companiesAllWebsites),
  );
}

export function companiesAllWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllWebsites' from JSON`,
  );
}

/** @internal */
export const CompaniesAllCompaniesType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllCompaniesType
> = z.nativeEnum(CompaniesAllCompaniesType);

/** @internal */
export const CompaniesAllCompaniesType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllCompaniesType
> = CompaniesAllCompaniesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesType$ {
  /** @deprecated use `CompaniesAllCompaniesType$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllCompaniesType$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesType$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllCompaniesType$outboundSchema;
}

/** @internal */
export const CompaniesAllAddresses$inboundSchema: z.ZodType<
  CompaniesAllAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesAllCompaniesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type CompaniesAllAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const CompaniesAllAddresses$outboundSchema: z.ZodType<
  CompaniesAllAddresses$Outbound,
  z.ZodTypeDef,
  CompaniesAllAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesAllCompaniesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllAddresses$ {
  /** @deprecated use `CompaniesAllAddresses$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllAddresses$inboundSchema;
  /** @deprecated use `CompaniesAllAddresses$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllAddresses$outboundSchema;
  /** @deprecated use `CompaniesAllAddresses$Outbound` instead. */
  export type Outbound = CompaniesAllAddresses$Outbound;
}

export function companiesAllAddressesToJSON(
  companiesAllAddresses: CompaniesAllAddresses,
): string {
  return JSON.stringify(
    CompaniesAllAddresses$outboundSchema.parse(companiesAllAddresses),
  );
}

export function companiesAllAddressesFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllAddresses' from JSON`,
  );
}

/** @internal */
export const CompaniesAllSocialLinks$inboundSchema: z.ZodType<
  CompaniesAllSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompaniesAllSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesAllSocialLinks$outboundSchema: z.ZodType<
  CompaniesAllSocialLinks$Outbound,
  z.ZodTypeDef,
  CompaniesAllSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllSocialLinks$ {
  /** @deprecated use `CompaniesAllSocialLinks$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllSocialLinks$inboundSchema;
  /** @deprecated use `CompaniesAllSocialLinks$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllSocialLinks$outboundSchema;
  /** @deprecated use `CompaniesAllSocialLinks$Outbound` instead. */
  export type Outbound = CompaniesAllSocialLinks$Outbound;
}

export function companiesAllSocialLinksToJSON(
  companiesAllSocialLinks: CompaniesAllSocialLinks,
): string {
  return JSON.stringify(
    CompaniesAllSocialLinks$outboundSchema.parse(companiesAllSocialLinks),
  );
}

export function companiesAllSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllSocialLinks' from JSON`,
  );
}

/** @internal */
export const CompaniesAllCompaniesResponseType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllCompaniesResponseType
> = z.nativeEnum(CompaniesAllCompaniesResponseType);

/** @internal */
export const CompaniesAllCompaniesResponseType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesAllCompaniesResponseType
> = CompaniesAllCompaniesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesResponseType$ {
  /** @deprecated use `CompaniesAllCompaniesResponseType$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllCompaniesResponseType$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesAllCompaniesResponseType$outboundSchema;
}

/** @internal */
export const CompaniesAllPhoneNumbers$inboundSchema: z.ZodType<
  CompaniesAllPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesAllCompaniesResponseType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type CompaniesAllPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesAllPhoneNumbers$outboundSchema: z.ZodType<
  CompaniesAllPhoneNumbers$Outbound,
  z.ZodTypeDef,
  CompaniesAllPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesAllCompaniesResponseType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllPhoneNumbers$ {
  /** @deprecated use `CompaniesAllPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllPhoneNumbers$inboundSchema;
  /** @deprecated use `CompaniesAllPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllPhoneNumbers$outboundSchema;
  /** @deprecated use `CompaniesAllPhoneNumbers$Outbound` instead. */
  export type Outbound = CompaniesAllPhoneNumbers$Outbound;
}

export function companiesAllPhoneNumbersToJSON(
  companiesAllPhoneNumbers: CompaniesAllPhoneNumbers,
): string {
  return JSON.stringify(
    CompaniesAllPhoneNumbers$outboundSchema.parse(companiesAllPhoneNumbers),
  );
}

export function companiesAllPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CompaniesAllCompaniesResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CompaniesAllCompaniesResponse200Type> = z.nativeEnum(
    CompaniesAllCompaniesResponse200Type,
  );

/** @internal */
export const CompaniesAllCompaniesResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CompaniesAllCompaniesResponse200Type> =
    CompaniesAllCompaniesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompaniesResponse200Type$ {
  /** @deprecated use `CompaniesAllCompaniesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesAllCompaniesResponse200Type$inboundSchema;
  /** @deprecated use `CompaniesAllCompaniesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesAllCompaniesResponse200Type$outboundSchema;
}

/** @internal */
export const CompaniesAllEmails$inboundSchema: z.ZodType<
  CompaniesAllEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CompaniesAllCompaniesResponse200Type$inboundSchema)
    .optional(),
});

/** @internal */
export type CompaniesAllEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesAllEmails$outboundSchema: z.ZodType<
  CompaniesAllEmails$Outbound,
  z.ZodTypeDef,
  CompaniesAllEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CompaniesAllCompaniesResponse200Type$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllEmails$ {
  /** @deprecated use `CompaniesAllEmails$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllEmails$inboundSchema;
  /** @deprecated use `CompaniesAllEmails$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllEmails$outboundSchema;
  /** @deprecated use `CompaniesAllEmails$Outbound` instead. */
  export type Outbound = CompaniesAllEmails$Outbound;
}

export function companiesAllEmailsToJSON(
  companiesAllEmails: CompaniesAllEmails,
): string {
  return JSON.stringify(
    CompaniesAllEmails$outboundSchema.parse(companiesAllEmails),
  );
}

export function companiesAllEmailsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllEmails' from JSON`,
  );
}

/** @internal */
export const CompaniesAllCompanyRowType$inboundSchema: z.ZodType<
  CompaniesAllCompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompaniesAllCompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CompaniesAllCompanyRowType$outboundSchema: z.ZodType<
  CompaniesAllCompanyRowType$Outbound,
  z.ZodTypeDef,
  CompaniesAllCompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCompanyRowType$ {
  /** @deprecated use `CompaniesAllCompanyRowType$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllCompanyRowType$inboundSchema;
  /** @deprecated use `CompaniesAllCompanyRowType$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllCompanyRowType$outboundSchema;
  /** @deprecated use `CompaniesAllCompanyRowType$Outbound` instead. */
  export type Outbound = CompaniesAllCompanyRowType$Outbound;
}

export function companiesAllCompanyRowTypeToJSON(
  companiesAllCompanyRowType: CompaniesAllCompanyRowType,
): string {
  return JSON.stringify(
    CompaniesAllCompanyRowType$outboundSchema.parse(companiesAllCompanyRowType),
  );
}

export function companiesAllCompanyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllCompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllCompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllCompanyRowType' from JSON`,
  );
}

/** @internal */
export const CompaniesAllValue6$inboundSchema: z.ZodType<
  CompaniesAllValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CompaniesAllValue6$Outbound = {};

/** @internal */
export const CompaniesAllValue6$outboundSchema: z.ZodType<
  CompaniesAllValue6$Outbound,
  z.ZodTypeDef,
  CompaniesAllValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllValue6$ {
  /** @deprecated use `CompaniesAllValue6$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllValue6$inboundSchema;
  /** @deprecated use `CompaniesAllValue6$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllValue6$outboundSchema;
  /** @deprecated use `CompaniesAllValue6$Outbound` instead. */
  export type Outbound = CompaniesAllValue6$Outbound;
}

export function companiesAllValue6ToJSON(
  companiesAllValue6: CompaniesAllValue6,
): string {
  return JSON.stringify(
    CompaniesAllValue6$outboundSchema.parse(companiesAllValue6),
  );
}

export function companiesAllValue6FromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllValue6' from JSON`,
  );
}

/** @internal */
export const CompaniesAllValue4$inboundSchema: z.ZodType<
  CompaniesAllValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CompaniesAllValue4$Outbound = {};

/** @internal */
export const CompaniesAllValue4$outboundSchema: z.ZodType<
  CompaniesAllValue4$Outbound,
  z.ZodTypeDef,
  CompaniesAllValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllValue4$ {
  /** @deprecated use `CompaniesAllValue4$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllValue4$inboundSchema;
  /** @deprecated use `CompaniesAllValue4$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllValue4$outboundSchema;
  /** @deprecated use `CompaniesAllValue4$Outbound` instead. */
  export type Outbound = CompaniesAllValue4$Outbound;
}

export function companiesAllValue4ToJSON(
  companiesAllValue4: CompaniesAllValue4,
): string {
  return JSON.stringify(
    CompaniesAllValue4$outboundSchema.parse(companiesAllValue4),
  );
}

export function companiesAllValue4FromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllValue4' from JSON`,
  );
}

/** @internal */
export const CompaniesAllValue$inboundSchema: z.ZodType<
  CompaniesAllValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CompaniesAllValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CompaniesAllValue6$inboundSchema)),
]);

/** @internal */
export type CompaniesAllValue$Outbound =
  | CompaniesAllValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<CompaniesAllValue6$Outbound>;

/** @internal */
export const CompaniesAllValue$outboundSchema: z.ZodType<
  CompaniesAllValue$Outbound,
  z.ZodTypeDef,
  CompaniesAllValue
> = z.union([
  z.lazy(() => CompaniesAllValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CompaniesAllValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllValue$ {
  /** @deprecated use `CompaniesAllValue$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllValue$inboundSchema;
  /** @deprecated use `CompaniesAllValue$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllValue$outboundSchema;
  /** @deprecated use `CompaniesAllValue$Outbound` instead. */
  export type Outbound = CompaniesAllValue$Outbound;
}

export function companiesAllValueToJSON(
  companiesAllValue: CompaniesAllValue,
): string {
  return JSON.stringify(
    CompaniesAllValue$outboundSchema.parse(companiesAllValue),
  );
}

export function companiesAllValueFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllValue' from JSON`,
  );
}

/** @internal */
export const CompaniesAllCustomFields$inboundSchema: z.ZodType<
  CompaniesAllCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CompaniesAllValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CompaniesAllValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CompaniesAllCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | CompaniesAllValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<CompaniesAllValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CompaniesAllCustomFields$outboundSchema: z.ZodType<
  CompaniesAllCustomFields$Outbound,
  z.ZodTypeDef,
  CompaniesAllCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CompaniesAllValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CompaniesAllValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllCustomFields$ {
  /** @deprecated use `CompaniesAllCustomFields$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllCustomFields$inboundSchema;
  /** @deprecated use `CompaniesAllCustomFields$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllCustomFields$outboundSchema;
  /** @deprecated use `CompaniesAllCustomFields$Outbound` instead. */
  export type Outbound = CompaniesAllCustomFields$Outbound;
}

export function companiesAllCustomFieldsToJSON(
  companiesAllCustomFields: CompaniesAllCustomFields,
): string {
  return JSON.stringify(
    CompaniesAllCustomFields$outboundSchema.parse(companiesAllCustomFields),
  );
}

export function companiesAllCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllCustomFields' from JSON`,
  );
}

/** @internal */
export const CustomMappings$inboundSchema: z.ZodType<
  CustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomMappings$Outbound = {};

/** @internal */
export const CustomMappings$outboundSchema: z.ZodType<
  CustomMappings$Outbound,
  z.ZodTypeDef,
  CustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomMappings$ {
  /** @deprecated use `CustomMappings$inboundSchema` instead. */
  export const inboundSchema = CustomMappings$inboundSchema;
  /** @deprecated use `CustomMappings$outboundSchema` instead. */
  export const outboundSchema = CustomMappings$outboundSchema;
  /** @deprecated use `CustomMappings$Outbound` instead. */
  export type Outbound = CustomMappings$Outbound;
}

export function customMappingsToJSON(customMappings: CustomMappings): string {
  return JSON.stringify(CustomMappings$outboundSchema.parse(customMappings));
}

export function customMappingsFromJSON(
  jsonString: string,
): SafeParseResult<CustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomMappings' from JSON`,
  );
}

/** @internal */
export const CompaniesAllExtendPaths$inboundSchema: z.ZodType<
  CompaniesAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CompaniesAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CompaniesAllExtendPaths$outboundSchema: z.ZodType<
  CompaniesAllExtendPaths$Outbound,
  z.ZodTypeDef,
  CompaniesAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllExtendPaths$ {
  /** @deprecated use `CompaniesAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllExtendPaths$inboundSchema;
  /** @deprecated use `CompaniesAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllExtendPaths$outboundSchema;
  /** @deprecated use `CompaniesAllExtendPaths$Outbound` instead. */
  export type Outbound = CompaniesAllExtendPaths$Outbound;
}

export function companiesAllExtendPathsToJSON(
  companiesAllExtendPaths: CompaniesAllExtendPaths,
): string {
  return JSON.stringify(
    CompaniesAllExtendPaths$outboundSchema.parse(companiesAllExtendPaths),
  );
}

export function companiesAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const CompaniesAllPassThrough$inboundSchema: z.ZodType<
  CompaniesAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => CompaniesAllExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CompaniesAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CompaniesAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CompaniesAllPassThrough$outboundSchema: z.ZodType<
  CompaniesAllPassThrough$Outbound,
  z.ZodTypeDef,
  CompaniesAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => CompaniesAllExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllPassThrough$ {
  /** @deprecated use `CompaniesAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllPassThrough$inboundSchema;
  /** @deprecated use `CompaniesAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllPassThrough$outboundSchema;
  /** @deprecated use `CompaniesAllPassThrough$Outbound` instead. */
  export type Outbound = CompaniesAllPassThrough$Outbound;
}

export function companiesAllPassThroughToJSON(
  companiesAllPassThrough: CompaniesAllPassThrough,
): string {
  return JSON.stringify(
    CompaniesAllPassThrough$outboundSchema.parse(companiesAllPassThrough),
  );
}

export function companiesAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllPassThrough' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.nullable(z.string()),
    interaction_count: z.nullable(z.number().int()).optional(),
    owner_id: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    vat_number: z.nullable(z.string()).optional(),
    currency: z.nullable(CompaniesAllCurrency$inboundSchema).optional(),
    status: z.nullable(z.string()).optional(),
    fax: z.nullable(z.string()).optional(),
    annual_revenue: z.nullable(z.string()).optional(),
    number_of_employees: z.nullable(z.string()).optional(),
    industry: z.nullable(z.string()).optional(),
    ownership: z.nullable(z.string()).optional(),
    sales_tax_number: z.nullable(z.string()).optional(),
    payee_number: z.nullable(z.string()).optional(),
    abn_or_tfn: z.nullable(z.string()).optional(),
    abn_branch: z.nullable(z.string()).optional(),
    acn: z.nullable(z.string()).optional(),
    first_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    parent_id: z.nullable(z.string()).optional(),
    bank_accounts: z.array(z.lazy(() => CompaniesAllBankAccounts$inboundSchema))
      .optional(),
    websites: z.array(z.lazy(() => CompaniesAllWebsites$inboundSchema))
      .optional(),
    addresses: z.array(z.lazy(() => CompaniesAllAddresses$inboundSchema))
      .optional(),
    social_links: z.array(z.lazy(() => CompaniesAllSocialLinks$inboundSchema))
      .optional(),
    phone_numbers: z.array(z.lazy(() => CompaniesAllPhoneNumbers$inboundSchema))
      .optional(),
    emails: z.array(z.lazy(() => CompaniesAllEmails$inboundSchema)).optional(),
    row_type: z.lazy(() => CompaniesAllCompanyRowType$inboundSchema).optional(),
    custom_fields: z.array(z.lazy(() => CompaniesAllCustomFields$inboundSchema))
      .optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    read_only: z.nullable(z.boolean()).optional(),
    last_activity_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    deleted: z.boolean().optional(),
    salutation: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    custom_mappings: z.nullable(z.lazy(() => CustomMappings$inboundSchema))
      .optional(),
    updated_by: z.nullable(z.string()).optional(),
    created_by: z.nullable(z.string()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    pass_through: z.array(z.lazy(() => CompaniesAllPassThrough$inboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "interaction_count": "interactionCount",
      "owner_id": "ownerId",
      "vat_number": "vatNumber",
      "annual_revenue": "annualRevenue",
      "number_of_employees": "numberOfEmployees",
      "sales_tax_number": "salesTaxNumber",
      "payee_number": "payeeNumber",
      "abn_or_tfn": "abnOrTfn",
      "abn_branch": "abnBranch",
      "first_name": "firstName",
      "last_name": "lastName",
      "parent_id": "parentId",
      "bank_accounts": "bankAccounts",
      "social_links": "socialLinks",
      "phone_numbers": "phoneNumbers",
      "row_type": "rowType",
      "custom_fields": "customFields",
      "read_only": "readOnly",
      "last_activity_at": "lastActivityAt",
      "custom_mappings": "customMappings",
      "updated_by": "updatedBy",
      "created_by": "createdBy",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type Data$Outbound = {
  id?: string | undefined;
  name: string | null;
  interaction_count?: number | null | undefined;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  parent_id?: string | null | undefined;
  bank_accounts?: Array<CompaniesAllBankAccounts$Outbound> | undefined;
  websites?: Array<CompaniesAllWebsites$Outbound> | undefined;
  addresses?: Array<CompaniesAllAddresses$Outbound> | undefined;
  social_links?: Array<CompaniesAllSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<CompaniesAllPhoneNumbers$Outbound> | undefined;
  emails?: Array<CompaniesAllEmails$Outbound> | undefined;
  row_type?: CompaniesAllCompanyRowType$Outbound | undefined;
  custom_fields?: Array<CompaniesAllCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<CompaniesAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string().optional(),
    name: z.nullable(z.string()),
    interactionCount: z.nullable(z.number().int()).optional(),
    ownerId: z.nullable(z.string()).optional(),
    image: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    vatNumber: z.nullable(z.string()).optional(),
    currency: z.nullable(CompaniesAllCurrency$outboundSchema).optional(),
    status: z.nullable(z.string()).optional(),
    fax: z.nullable(z.string()).optional(),
    annualRevenue: z.nullable(z.string()).optional(),
    numberOfEmployees: z.nullable(z.string()).optional(),
    industry: z.nullable(z.string()).optional(),
    ownership: z.nullable(z.string()).optional(),
    salesTaxNumber: z.nullable(z.string()).optional(),
    payeeNumber: z.nullable(z.string()).optional(),
    abnOrTfn: z.nullable(z.string()).optional(),
    abnBranch: z.nullable(z.string()).optional(),
    acn: z.nullable(z.string()).optional(),
    firstName: z.nullable(z.string()).optional(),
    lastName: z.nullable(z.string()).optional(),
    parentId: z.nullable(z.string()).optional(),
    bankAccounts: z.array(z.lazy(() => CompaniesAllBankAccounts$outboundSchema))
      .optional(),
    websites: z.array(z.lazy(() => CompaniesAllWebsites$outboundSchema))
      .optional(),
    addresses: z.array(z.lazy(() => CompaniesAllAddresses$outboundSchema))
      .optional(),
    socialLinks: z.array(z.lazy(() => CompaniesAllSocialLinks$outboundSchema))
      .optional(),
    phoneNumbers: z.array(z.lazy(() => CompaniesAllPhoneNumbers$outboundSchema))
      .optional(),
    emails: z.array(z.lazy(() => CompaniesAllEmails$outboundSchema)).optional(),
    rowType: z.lazy(() => CompaniesAllCompanyRowType$outboundSchema).optional(),
    customFields: z.array(z.lazy(() => CompaniesAllCustomFields$outboundSchema))
      .optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    readOnly: z.nullable(z.boolean()).optional(),
    lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
      .optional(),
    deleted: z.boolean().optional(),
    salutation: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    customMappings: z.nullable(z.lazy(() => CustomMappings$outboundSchema))
      .optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    passThrough: z.array(z.lazy(() => CompaniesAllPassThrough$outboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      interactionCount: "interaction_count",
      ownerId: "owner_id",
      vatNumber: "vat_number",
      annualRevenue: "annual_revenue",
      numberOfEmployees: "number_of_employees",
      salesTaxNumber: "sales_tax_number",
      payeeNumber: "payee_number",
      abnOrTfn: "abn_or_tfn",
      abnBranch: "abn_branch",
      firstName: "first_name",
      lastName: "last_name",
      parentId: "parent_id",
      bankAccounts: "bank_accounts",
      socialLinks: "social_links",
      phoneNumbers: "phone_numbers",
      rowType: "row_type",
      customFields: "custom_fields",
      readOnly: "read_only",
      lastActivityAt: "last_activity_at",
      customMappings: "custom_mappings",
      updatedBy: "updated_by",
      createdBy: "created_by",
      updatedAt: "updated_at",
      createdAt: "created_at",
      passThrough: "pass_through",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const Cursors$inboundSchema: z.ZodType<Cursors, z.ZodTypeDef, unknown> =
  z.object({
    previous: z.nullable(z.string()).optional(),
    current: z.nullable(z.string()).optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Cursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Cursors$outboundSchema: z.ZodType<
  Cursors$Outbound,
  z.ZodTypeDef,
  Cursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cursors$ {
  /** @deprecated use `Cursors$inboundSchema` instead. */
  export const inboundSchema = Cursors$inboundSchema;
  /** @deprecated use `Cursors$outboundSchema` instead. */
  export const outboundSchema = Cursors$outboundSchema;
  /** @deprecated use `Cursors$Outbound` instead. */
  export type Outbound = Cursors$Outbound;
}

export function cursorsToJSON(cursors: Cursors): string {
  return JSON.stringify(Cursors$outboundSchema.parse(cursors));
}

export function cursorsFromJSON(
  jsonString: string,
): SafeParseResult<Cursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cursors' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    items_on_page: z.number().int().optional(),
    cursors: z.lazy(() => Cursors$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "items_on_page": "itemsOnPage",
    });
  });

/** @internal */
export type Meta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: Cursors$Outbound | undefined;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    itemsOnPage: z.number().int().optional(),
    cursors: z.lazy(() => Cursors$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      itemsOnPage: "items_on_page",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({
    previous: z.nullable(z.string()).optional(),
    current: z.string().optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Links$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

export function linksToJSON(links: Links): string {
  return JSON.stringify(Links$outboundSchema.parse(links));
}

export function linksFromJSON(
  jsonString: string,
): SafeParseResult<Links, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Links$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Links' from JSON`,
  );
}

/** @internal */
export const CompaniesAllResponseBody$inboundSchema: z.ZodType<
  CompaniesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => Data$inboundSchema)),
  meta: z.lazy(() => Meta$inboundSchema).optional(),
  links: z.lazy(() => Links$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CompaniesAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<Data$Outbound>;
  meta?: Meta$Outbound | undefined;
  links?: Links$Outbound | undefined;
};

/** @internal */
export const CompaniesAllResponseBody$outboundSchema: z.ZodType<
  CompaniesAllResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => Data$outboundSchema)),
  meta: z.lazy(() => Meta$outboundSchema).optional(),
  links: z.lazy(() => Links$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllResponseBody$ {
  /** @deprecated use `CompaniesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllResponseBody$inboundSchema;
  /** @deprecated use `CompaniesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllResponseBody$outboundSchema;
  /** @deprecated use `CompaniesAllResponseBody$Outbound` instead. */
  export type Outbound = CompaniesAllResponseBody$Outbound;
}

export function companiesAllResponseBodyToJSON(
  companiesAllResponseBody: CompaniesAllResponseBody,
): string {
  return JSON.stringify(
    CompaniesAllResponseBody$outboundSchema.parse(companiesAllResponseBody),
  );
}

export function companiesAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllResponseBody' from JSON`,
  );
}

/** @internal */
export const CompaniesAllResponse$inboundSchema: z.ZodType<
  CompaniesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CompaniesAllCompaniesResponseBody$inboundSchema),
  z.lazy(() => CompaniesAllResponseBody$inboundSchema),
]);

/** @internal */
export type CompaniesAllResponse$Outbound =
  | CompaniesAllCompaniesResponseBody$Outbound
  | CompaniesAllResponseBody$Outbound;

/** @internal */
export const CompaniesAllResponse$outboundSchema: z.ZodType<
  CompaniesAllResponse$Outbound,
  z.ZodTypeDef,
  CompaniesAllResponse
> = z.union([
  z.lazy(() => CompaniesAllCompaniesResponseBody$outboundSchema),
  z.lazy(() => CompaniesAllResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAllResponse$ {
  /** @deprecated use `CompaniesAllResponse$inboundSchema` instead. */
  export const inboundSchema = CompaniesAllResponse$inboundSchema;
  /** @deprecated use `CompaniesAllResponse$outboundSchema` instead. */
  export const outboundSchema = CompaniesAllResponse$outboundSchema;
  /** @deprecated use `CompaniesAllResponse$Outbound` instead. */
  export type Outbound = CompaniesAllResponse$Outbound;
}

export function companiesAllResponseToJSON(
  companiesAllResponse: CompaniesAllResponse,
): string {
  return JSON.stringify(
    CompaniesAllResponse$outboundSchema.parse(companiesAllResponse),
  );
}

export function companiesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAllResponse' from JSON`,
  );
}
