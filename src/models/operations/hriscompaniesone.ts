/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisCompaniesOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisCompaniesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisCompaniesOneHrisCompaniesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export const HrisCompaniesOneStatus = {
  Active: "active",
  Inactive: "inactive",
  Trial: "trial",
  Other: "other",
} as const;
export type HrisCompaniesOneStatus = ClosedEnum<typeof HrisCompaniesOneStatus>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisCompaniesOneCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisCompaniesOneCurrency = ClosedEnum<
  typeof HrisCompaniesOneCurrency
>;

/**
 * The type of address.
 */
export const HrisCompaniesOneType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisCompaniesOneType = ClosedEnum<typeof HrisCompaniesOneType>;

export type HrisCompaniesOneAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisCompaniesOneType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const HrisCompaniesOneHrisCompaniesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type HrisCompaniesOneHrisCompaniesType = ClosedEnum<
  typeof HrisCompaniesOneHrisCompaniesType
>;

export type HrisCompaniesOnePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: HrisCompaniesOneHrisCompaniesType | null | undefined;
};

/**
 * Email type
 */
export const HrisCompaniesOneHrisCompaniesResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type HrisCompaniesOneHrisCompaniesResponseType = ClosedEnum<
  typeof HrisCompaniesOneHrisCompaniesResponseType
>;

export type HrisCompaniesOneEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: HrisCompaniesOneHrisCompaniesResponseType | null | undefined;
};

/**
 * The type of website
 */
export const HrisCompaniesOneHrisCompaniesResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type HrisCompaniesOneHrisCompaniesResponse200Type = ClosedEnum<
  typeof HrisCompaniesOneHrisCompaniesResponse200Type
>;

export type HrisCompaniesOneWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: HrisCompaniesOneHrisCompaniesResponse200Type | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisCompaniesOneCustomMappings = {};

export type HrisCompaniesOneExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisCompaniesOnePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisCompaniesOneExtendPaths> | undefined;
};

export type HrisCompaniesOneData = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  legalName: string | null;
  displayName?: string | null | undefined;
  subdomain?: string | null | undefined;
  status?: HrisCompaniesOneStatus | undefined;
  /**
   * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
   */
  companyNumber?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisCompaniesOneCurrency | null | undefined;
  addresses?: Array<HrisCompaniesOneAddresses> | undefined;
  phoneNumbers?: Array<HrisCompaniesOnePhoneNumbers> | undefined;
  emails?: Array<HrisCompaniesOneEmails> | undefined;
  websites?: Array<HrisCompaniesOneWebsites> | undefined;
  debtorId?: string | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: HrisCompaniesOneCustomMappings | null | undefined;
  deleted?: boolean | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisCompaniesOnePassThrough> | undefined;
};

/**
 * Company
 */
export type HrisCompaniesOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisCompaniesOneData;
};

export type HrisCompaniesOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Company
   */
  twoHundredApplicationJsonObject?: HrisCompaniesOneResponseBody | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisCompaniesOneHrisCompaniesResponseBody
    | undefined;
};

/** @internal */
export const HrisCompaniesOneGlobals$inboundSchema: z.ZodType<
  HrisCompaniesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisCompaniesOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisCompaniesOneGlobals$outboundSchema: z.ZodType<
  HrisCompaniesOneGlobals$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneGlobals$ {
  /** @deprecated use `HrisCompaniesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneGlobals$inboundSchema;
  /** @deprecated use `HrisCompaniesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneGlobals$outboundSchema;
  /** @deprecated use `HrisCompaniesOneGlobals$Outbound` instead. */
  export type Outbound = HrisCompaniesOneGlobals$Outbound;
}

export function hrisCompaniesOneGlobalsToJSON(
  hrisCompaniesOneGlobals: HrisCompaniesOneGlobals,
): string {
  return JSON.stringify(
    HrisCompaniesOneGlobals$outboundSchema.parse(hrisCompaniesOneGlobals),
  );
}

export function hrisCompaniesOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneGlobals' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneRequest$inboundSchema: z.ZodType<
  HrisCompaniesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisCompaniesOneRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesOneRequest$outboundSchema: z.ZodType<
  HrisCompaniesOneRequest$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneRequest$ {
  /** @deprecated use `HrisCompaniesOneRequest$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneRequest$inboundSchema;
  /** @deprecated use `HrisCompaniesOneRequest$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneRequest$outboundSchema;
  /** @deprecated use `HrisCompaniesOneRequest$Outbound` instead. */
  export type Outbound = HrisCompaniesOneRequest$Outbound;
}

export function hrisCompaniesOneRequestToJSON(
  hrisCompaniesOneRequest: HrisCompaniesOneRequest,
): string {
  return JSON.stringify(
    HrisCompaniesOneRequest$outboundSchema.parse(hrisCompaniesOneRequest),
  );
}

export function hrisCompaniesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneRequest' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneDetail$inboundSchema: z.ZodType<
  HrisCompaniesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisCompaniesOneDetail$outboundSchema: z.ZodType<
  HrisCompaniesOneDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneDetail$ {
  /** @deprecated use `HrisCompaniesOneDetail$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesOneDetail$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesOneDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesOneDetail$Outbound;
}

export function hrisCompaniesOneDetailToJSON(
  hrisCompaniesOneDetail: HrisCompaniesOneDetail,
): string {
  return JSON.stringify(
    HrisCompaniesOneDetail$outboundSchema.parse(hrisCompaniesOneDetail),
  );
}

export function hrisCompaniesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneHrisCompaniesResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesOneHrisCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type HrisCompaniesOneHrisCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisCompaniesOneHrisCompaniesResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesOneHrisCompaniesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesOneHrisCompaniesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneHrisCompaniesResponseBody$ {
  /** @deprecated use `HrisCompaniesOneHrisCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesOneHrisCompaniesResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesOneHrisCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesOneHrisCompaniesResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesOneHrisCompaniesResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesOneHrisCompaniesResponseBody$Outbound;
}

export function hrisCompaniesOneHrisCompaniesResponseBodyToJSON(
  hrisCompaniesOneHrisCompaniesResponseBody:
    HrisCompaniesOneHrisCompaniesResponseBody,
): string {
  return JSON.stringify(
    HrisCompaniesOneHrisCompaniesResponseBody$outboundSchema.parse(
      hrisCompaniesOneHrisCompaniesResponseBody,
    ),
  );
}

export function hrisCompaniesOneHrisCompaniesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesOneHrisCompaniesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesOneHrisCompaniesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesOneHrisCompaniesResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesOneStatus
> = z.nativeEnum(HrisCompaniesOneStatus);

/** @internal */
export const HrisCompaniesOneStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesOneStatus
> = HrisCompaniesOneStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneStatus$ {
  /** @deprecated use `HrisCompaniesOneStatus$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneStatus$inboundSchema;
  /** @deprecated use `HrisCompaniesOneStatus$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneStatus$outboundSchema;
}

/** @internal */
export const HrisCompaniesOneCurrency$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesOneCurrency
> = z.nativeEnum(HrisCompaniesOneCurrency);

/** @internal */
export const HrisCompaniesOneCurrency$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesOneCurrency
> = HrisCompaniesOneCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneCurrency$ {
  /** @deprecated use `HrisCompaniesOneCurrency$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneCurrency$inboundSchema;
  /** @deprecated use `HrisCompaniesOneCurrency$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneCurrency$outboundSchema;
}

/** @internal */
export const HrisCompaniesOneType$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesOneType
> = z.nativeEnum(HrisCompaniesOneType);

/** @internal */
export const HrisCompaniesOneType$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesOneType
> = HrisCompaniesOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneType$ {
  /** @deprecated use `HrisCompaniesOneType$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneType$inboundSchema;
  /** @deprecated use `HrisCompaniesOneType$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneType$outboundSchema;
}

/** @internal */
export const HrisCompaniesOneAddresses$inboundSchema: z.ZodType<
  HrisCompaniesOneAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesOneType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisCompaniesOneAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesOneAddresses$outboundSchema: z.ZodType<
  HrisCompaniesOneAddresses$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesOneType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneAddresses$ {
  /** @deprecated use `HrisCompaniesOneAddresses$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneAddresses$inboundSchema;
  /** @deprecated use `HrisCompaniesOneAddresses$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneAddresses$outboundSchema;
  /** @deprecated use `HrisCompaniesOneAddresses$Outbound` instead. */
  export type Outbound = HrisCompaniesOneAddresses$Outbound;
}

export function hrisCompaniesOneAddressesToJSON(
  hrisCompaniesOneAddresses: HrisCompaniesOneAddresses,
): string {
  return JSON.stringify(
    HrisCompaniesOneAddresses$outboundSchema.parse(hrisCompaniesOneAddresses),
  );
}

export function hrisCompaniesOneAddressesFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneAddresses' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneHrisCompaniesType$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesOneHrisCompaniesType
> = z.nativeEnum(HrisCompaniesOneHrisCompaniesType);

/** @internal */
export const HrisCompaniesOneHrisCompaniesType$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesOneHrisCompaniesType
> = HrisCompaniesOneHrisCompaniesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneHrisCompaniesType$ {
  /** @deprecated use `HrisCompaniesOneHrisCompaniesType$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneHrisCompaniesType$inboundSchema;
  /** @deprecated use `HrisCompaniesOneHrisCompaniesType$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesOneHrisCompaniesType$outboundSchema;
}

/** @internal */
export const HrisCompaniesOnePhoneNumbers$inboundSchema: z.ZodType<
  HrisCompaniesOnePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesOneHrisCompaniesType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type HrisCompaniesOnePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesOnePhoneNumbers$outboundSchema: z.ZodType<
  HrisCompaniesOnePhoneNumbers$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOnePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesOneHrisCompaniesType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOnePhoneNumbers$ {
  /** @deprecated use `HrisCompaniesOnePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOnePhoneNumbers$inboundSchema;
  /** @deprecated use `HrisCompaniesOnePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOnePhoneNumbers$outboundSchema;
  /** @deprecated use `HrisCompaniesOnePhoneNumbers$Outbound` instead. */
  export type Outbound = HrisCompaniesOnePhoneNumbers$Outbound;
}

export function hrisCompaniesOnePhoneNumbersToJSON(
  hrisCompaniesOnePhoneNumbers: HrisCompaniesOnePhoneNumbers,
): string {
  return JSON.stringify(
    HrisCompaniesOnePhoneNumbers$outboundSchema.parse(
      hrisCompaniesOnePhoneNumbers,
    ),
  );
}

export function hrisCompaniesOnePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOnePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOnePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOnePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneHrisCompaniesResponseType$inboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesOneHrisCompaniesResponseType> = z
    .nativeEnum(HrisCompaniesOneHrisCompaniesResponseType);

/** @internal */
export const HrisCompaniesOneHrisCompaniesResponseType$outboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesOneHrisCompaniesResponseType> =
    HrisCompaniesOneHrisCompaniesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneHrisCompaniesResponseType$ {
  /** @deprecated use `HrisCompaniesOneHrisCompaniesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesOneHrisCompaniesResponseType$inboundSchema;
  /** @deprecated use `HrisCompaniesOneHrisCompaniesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesOneHrisCompaniesResponseType$outboundSchema;
}

/** @internal */
export const HrisCompaniesOneEmails$inboundSchema: z.ZodType<
  HrisCompaniesOneEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisCompaniesOneHrisCompaniesResponseType$inboundSchema)
    .optional(),
});

/** @internal */
export type HrisCompaniesOneEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesOneEmails$outboundSchema: z.ZodType<
  HrisCompaniesOneEmails$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisCompaniesOneHrisCompaniesResponseType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneEmails$ {
  /** @deprecated use `HrisCompaniesOneEmails$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneEmails$inboundSchema;
  /** @deprecated use `HrisCompaniesOneEmails$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneEmails$outboundSchema;
  /** @deprecated use `HrisCompaniesOneEmails$Outbound` instead. */
  export type Outbound = HrisCompaniesOneEmails$Outbound;
}

export function hrisCompaniesOneEmailsToJSON(
  hrisCompaniesOneEmails: HrisCompaniesOneEmails,
): string {
  return JSON.stringify(
    HrisCompaniesOneEmails$outboundSchema.parse(hrisCompaniesOneEmails),
  );
}

export function hrisCompaniesOneEmailsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneEmails' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneHrisCompaniesResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesOneHrisCompaniesResponse200Type> = z
    .nativeEnum(HrisCompaniesOneHrisCompaniesResponse200Type);

/** @internal */
export const HrisCompaniesOneHrisCompaniesResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesOneHrisCompaniesResponse200Type> =
    HrisCompaniesOneHrisCompaniesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneHrisCompaniesResponse200Type$ {
  /** @deprecated use `HrisCompaniesOneHrisCompaniesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesOneHrisCompaniesResponse200Type$inboundSchema;
  /** @deprecated use `HrisCompaniesOneHrisCompaniesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesOneHrisCompaniesResponse200Type$outboundSchema;
}

/** @internal */
export const HrisCompaniesOneWebsites$inboundSchema: z.ZodType<
  HrisCompaniesOneWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(HrisCompaniesOneHrisCompaniesResponse200Type$inboundSchema)
    .optional(),
});

/** @internal */
export type HrisCompaniesOneWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesOneWebsites$outboundSchema: z.ZodType<
  HrisCompaniesOneWebsites$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(HrisCompaniesOneHrisCompaniesResponse200Type$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneWebsites$ {
  /** @deprecated use `HrisCompaniesOneWebsites$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneWebsites$inboundSchema;
  /** @deprecated use `HrisCompaniesOneWebsites$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneWebsites$outboundSchema;
  /** @deprecated use `HrisCompaniesOneWebsites$Outbound` instead. */
  export type Outbound = HrisCompaniesOneWebsites$Outbound;
}

export function hrisCompaniesOneWebsitesToJSON(
  hrisCompaniesOneWebsites: HrisCompaniesOneWebsites,
): string {
  return JSON.stringify(
    HrisCompaniesOneWebsites$outboundSchema.parse(hrisCompaniesOneWebsites),
  );
}

export function hrisCompaniesOneWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneWebsites' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneCustomMappings$inboundSchema: z.ZodType<
  HrisCompaniesOneCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisCompaniesOneCustomMappings$Outbound = {};

/** @internal */
export const HrisCompaniesOneCustomMappings$outboundSchema: z.ZodType<
  HrisCompaniesOneCustomMappings$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneCustomMappings$ {
  /** @deprecated use `HrisCompaniesOneCustomMappings$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneCustomMappings$inboundSchema;
  /** @deprecated use `HrisCompaniesOneCustomMappings$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneCustomMappings$outboundSchema;
  /** @deprecated use `HrisCompaniesOneCustomMappings$Outbound` instead. */
  export type Outbound = HrisCompaniesOneCustomMappings$Outbound;
}

export function hrisCompaniesOneCustomMappingsToJSON(
  hrisCompaniesOneCustomMappings: HrisCompaniesOneCustomMappings,
): string {
  return JSON.stringify(
    HrisCompaniesOneCustomMappings$outboundSchema.parse(
      hrisCompaniesOneCustomMappings,
    ),
  );
}

export function hrisCompaniesOneCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneExtendPaths$inboundSchema: z.ZodType<
  HrisCompaniesOneExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisCompaniesOneExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisCompaniesOneExtendPaths$outboundSchema: z.ZodType<
  HrisCompaniesOneExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneExtendPaths$ {
  /** @deprecated use `HrisCompaniesOneExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneExtendPaths$inboundSchema;
  /** @deprecated use `HrisCompaniesOneExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneExtendPaths$outboundSchema;
  /** @deprecated use `HrisCompaniesOneExtendPaths$Outbound` instead. */
  export type Outbound = HrisCompaniesOneExtendPaths$Outbound;
}

export function hrisCompaniesOneExtendPathsToJSON(
  hrisCompaniesOneExtendPaths: HrisCompaniesOneExtendPaths,
): string {
  return JSON.stringify(
    HrisCompaniesOneExtendPaths$outboundSchema.parse(
      hrisCompaniesOneExtendPaths,
    ),
  );
}

export function hrisCompaniesOneExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOnePassThrough$inboundSchema: z.ZodType<
  HrisCompaniesOnePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => HrisCompaniesOneExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisCompaniesOnePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisCompaniesOneExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisCompaniesOnePassThrough$outboundSchema: z.ZodType<
  HrisCompaniesOnePassThrough$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOnePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => HrisCompaniesOneExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOnePassThrough$ {
  /** @deprecated use `HrisCompaniesOnePassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOnePassThrough$inboundSchema;
  /** @deprecated use `HrisCompaniesOnePassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOnePassThrough$outboundSchema;
  /** @deprecated use `HrisCompaniesOnePassThrough$Outbound` instead. */
  export type Outbound = HrisCompaniesOnePassThrough$Outbound;
}

export function hrisCompaniesOnePassThroughToJSON(
  hrisCompaniesOnePassThrough: HrisCompaniesOnePassThrough,
): string {
  return JSON.stringify(
    HrisCompaniesOnePassThrough$outboundSchema.parse(
      hrisCompaniesOnePassThrough,
    ),
  );
}

export function hrisCompaniesOnePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOnePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOnePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOnePassThrough' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneData$inboundSchema: z.ZodType<
  HrisCompaniesOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  legal_name: z.nullable(z.string()),
  display_name: z.nullable(z.string()).optional(),
  subdomain: z.nullable(z.string()).optional(),
  status: HrisCompaniesOneStatus$inboundSchema.optional(),
  company_number: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisCompaniesOneCurrency$inboundSchema).optional(),
  addresses: z.array(z.lazy(() => HrisCompaniesOneAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => HrisCompaniesOnePhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisCompaniesOneEmails$inboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => HrisCompaniesOneWebsites$inboundSchema))
    .optional(),
  debtor_id: z.nullable(z.string()).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => HrisCompaniesOneCustomMappings$inboundSchema),
  ).optional(),
  deleted: z.boolean().optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(z.lazy(() => HrisCompaniesOnePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "legal_name": "legalName",
    "display_name": "displayName",
    "company_number": "companyNumber",
    "phone_numbers": "phoneNumbers",
    "debtor_id": "debtorId",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisCompaniesOneData$Outbound = {
  id?: string | undefined;
  legal_name: string | null;
  display_name?: string | null | undefined;
  subdomain?: string | null | undefined;
  status?: string | undefined;
  company_number?: string | null | undefined;
  currency?: string | null | undefined;
  addresses?: Array<HrisCompaniesOneAddresses$Outbound> | undefined;
  phone_numbers?: Array<HrisCompaniesOnePhoneNumbers$Outbound> | undefined;
  emails?: Array<HrisCompaniesOneEmails$Outbound> | undefined;
  websites?: Array<HrisCompaniesOneWebsites$Outbound> | undefined;
  debtor_id?: string | null | undefined;
  custom_mappings?: HrisCompaniesOneCustomMappings$Outbound | null | undefined;
  deleted?: boolean | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<HrisCompaniesOnePassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisCompaniesOneData$outboundSchema: z.ZodType<
  HrisCompaniesOneData$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneData
> = z.object({
  id: z.string().optional(),
  legalName: z.nullable(z.string()),
  displayName: z.nullable(z.string()).optional(),
  subdomain: z.nullable(z.string()).optional(),
  status: HrisCompaniesOneStatus$outboundSchema.optional(),
  companyNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisCompaniesOneCurrency$outboundSchema).optional(),
  addresses: z.array(z.lazy(() => HrisCompaniesOneAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => HrisCompaniesOnePhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisCompaniesOneEmails$outboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => HrisCompaniesOneWebsites$outboundSchema))
    .optional(),
  debtorId: z.nullable(z.string()).optional(),
  customMappings: z.nullable(
    z.lazy(() => HrisCompaniesOneCustomMappings$outboundSchema),
  ).optional(),
  deleted: z.boolean().optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(z.lazy(() => HrisCompaniesOnePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    legalName: "legal_name",
    displayName: "display_name",
    companyNumber: "company_number",
    phoneNumbers: "phone_numbers",
    debtorId: "debtor_id",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneData$ {
  /** @deprecated use `HrisCompaniesOneData$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneData$inboundSchema;
  /** @deprecated use `HrisCompaniesOneData$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneData$outboundSchema;
  /** @deprecated use `HrisCompaniesOneData$Outbound` instead. */
  export type Outbound = HrisCompaniesOneData$Outbound;
}

export function hrisCompaniesOneDataToJSON(
  hrisCompaniesOneData: HrisCompaniesOneData,
): string {
  return JSON.stringify(
    HrisCompaniesOneData$outboundSchema.parse(hrisCompaniesOneData),
  );
}

export function hrisCompaniesOneDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneData' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisCompaniesOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisCompaniesOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisCompaniesOneData$Outbound;
};

/** @internal */
export const HrisCompaniesOneResponseBody$outboundSchema: z.ZodType<
  HrisCompaniesOneResponseBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisCompaniesOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneResponseBody$ {
  /** @deprecated use `HrisCompaniesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesOneResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesOneResponseBody$Outbound;
}

export function hrisCompaniesOneResponseBodyToJSON(
  hrisCompaniesOneResponseBody: HrisCompaniesOneResponseBody,
): string {
  return JSON.stringify(
    HrisCompaniesOneResponseBody$outboundSchema.parse(
      hrisCompaniesOneResponseBody,
    ),
  );
}

export function hrisCompaniesOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesOneResponse$inboundSchema: z.ZodType<
  HrisCompaniesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisCompaniesOneResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisCompaniesOneHrisCompaniesResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisCompaniesOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisCompaniesOneResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisCompaniesOneHrisCompaniesResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisCompaniesOneResponse$outboundSchema: z.ZodType<
  HrisCompaniesOneResponse$Outbound,
  z.ZodTypeDef,
  HrisCompaniesOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisCompaniesOneResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisCompaniesOneHrisCompaniesResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesOneResponse$ {
  /** @deprecated use `HrisCompaniesOneResponse$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesOneResponse$inboundSchema;
  /** @deprecated use `HrisCompaniesOneResponse$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesOneResponse$outboundSchema;
  /** @deprecated use `HrisCompaniesOneResponse$Outbound` instead. */
  export type Outbound = HrisCompaniesOneResponse$Outbound;
}

export function hrisCompaniesOneResponseToJSON(
  hrisCompaniesOneResponse: HrisCompaniesOneResponse,
): string {
  return JSON.stringify(
    HrisCompaniesOneResponse$outboundSchema.parse(hrisCompaniesOneResponse),
  );
}

export function hrisCompaniesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesOneResponse' from JSON`,
  );
}
