/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivitiesOneSecurity = {
  apiKey: string;
};

export type ActivitiesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type ActivitiesOneActivitiesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The type of the activity
 */
export const ActivitiesOneType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * The type of the activity
 */
export type ActivitiesOneType = ClosedEnum<typeof ActivitiesOneType>;

/**
 * The type of address.
 */
export const ActivitiesOneActivitiesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type ActivitiesOneActivitiesType = ClosedEnum<
  typeof ActivitiesOneActivitiesType
>;

export type ActivitiesOneLocationAddress = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: ActivitiesOneActivitiesType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export const ActivitiesOneShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
export type ActivitiesOneShowAs = ClosedEnum<typeof ActivitiesOneShowAs>;

export type ActivitiesOneValue6 = {};

export type ActivitiesOneValue4 = {};

export type ActivitiesOneValue =
  | ActivitiesOneValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivitiesOneValue6>;

export type ActivitiesOneCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | ActivitiesOneValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivitiesOneValue6>
    | null
    | undefined;
};

/**
 * Status of the attendee
 */
export const ActivitiesOneStatus = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * Status of the attendee
 */
export type ActivitiesOneStatus = ClosedEnum<typeof ActivitiesOneStatus>;

export type ActivitiesOneAttendees = {
  /**
   * Unique identifier for the attendee
   */
  id?: string | null | undefined;
  /**
   * Full name of the attendee
   */
  name?: string | null | undefined;
  /**
   * First name of the attendee
   */
  firstName?: string | null | undefined;
  /**
   * Middle name of the attendee
   */
  middleName?: string | null | undefined;
  /**
   * Last name of the attendee
   */
  lastName?: string | null | undefined;
  /**
   * Prefix of the attendee
   */
  prefix?: string | null | undefined;
  /**
   * Suffix of the attendee
   */
  suffix?: string | null | undefined;
  /**
   * Email address of the attendee
   */
  emailAddress?: string | null | undefined;
  /**
   * Whether the attendee is the organizer of the activity
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * Status of the attendee
   */
  status?: ActivitiesOneStatus | null | undefined;
  /**
   * The identifier for a related user
   */
  userId?: string | null | undefined;
  /**
   * The identifier for a related contact
   */
  contactId?: string | null | undefined;
  /**
   * The last time the attendee was updated (ISO 8601)
   */
  updatedAt?: Date | null | undefined;
  /**
   * The time the attendee was created (ISO 8601)
   */
  createdAt?: Date | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type ActivitiesOneCustomMappings = {};

export type ActivitiesOneExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type ActivitiesOnePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<ActivitiesOneExtendPaths> | undefined;
};

export type ActivitiesOneData = {
  /**
   * The unique identifier of the activity
   */
  id?: string | undefined;
  /**
   * The third-party API ID of original entity
   */
  downstreamId?: string | null | undefined;
  /**
   * The date and time of the activity
   */
  activityDatetime?: string | null | undefined;
  /**
   * The duration of the activity in seconds
   */
  durationSeconds?: number | null | undefined;
  /**
   * The user related to the activity
   */
  userId?: string | null | undefined;
  /**
   * The account related to the activity
   */
  accountId?: string | null | undefined;
  /**
   * The contact related to the activity
   */
  contactId?: string | null | undefined;
  /**
   * The company related to the activity
   */
  companyId?: string | null | undefined;
  /**
   * The opportunity related to the activity
   */
  opportunityId?: string | null | undefined;
  /**
   * The lead related to the activity
   */
  leadId?: string | null | undefined;
  /**
   * The owner of the activity
   */
  ownerId?: string | null | undefined;
  /**
   * The campaign related to the activity
   */
  campaignId?: string | null | undefined;
  /**
   * The case related to the activity
   */
  caseId?: string | null | undefined;
  /**
   * The asset related to the activity
   */
  assetId?: string | null | undefined;
  /**
   * The contract related to the activity
   */
  contractId?: string | null | undefined;
  /**
   * The product related to the activity
   */
  productId?: string | null | undefined;
  /**
   * The solution related to the activity
   */
  solutionId?: string | null | undefined;
  /**
   * The custom object related to the activity
   */
  customObjectId?: string | null | undefined;
  /**
   * The type of the activity
   */
  type: ActivitiesOneType | null;
  /**
   * The title of the activity
   */
  title?: string | null | undefined;
  /**
   * A description of the activity
   */
  description?: string | null | undefined;
  /**
   * An internal note about the activity
   */
  note?: string | null | undefined;
  /**
   * The location of the activity
   */
  location?: string | null | undefined;
  locationAddress?: ActivitiesOneLocationAddress | undefined;
  /**
   * Whether the Activity is an all day event or not
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Whether the Activity is private or not
   */
  private?: boolean | null | undefined;
  /**
   * Whether the Activity is a group event or not
   */
  groupEvent?: boolean | null | undefined;
  /**
   * The sub type of the group event
   */
  eventSubType?: string | null | undefined;
  /**
   * The type of the group event
   */
  groupEventType?: string | null | undefined;
  /**
   * Whether the activity is a child of another activity or not
   */
  child?: boolean | null | undefined;
  /**
   * Whether the activity is archived or not
   */
  archived?: boolean | null | undefined;
  /**
   * Whether the activity is deleted or not
   */
  deleted?: boolean | null | undefined;
  showAs?: ActivitiesOneShowAs | null | undefined;
  /**
   * Whether the Activity is done or not
   */
  done?: boolean | null | undefined;
  /**
   * The start date and time of the activity
   */
  startDatetime?: string | null | undefined;
  /**
   * The end date and time of the activity
   */
  endDatetime?: string | null | undefined;
  /**
   * The duration of the activity in minutes
   */
  durationMinutes?: number | null | undefined;
  /**
   * The date of the activity
   */
  activityDate?: string | null | undefined;
  /**
   * The end date of the activity
   */
  endDate?: string | null | undefined;
  /**
   * Whether the activity is recurrent or not
   */
  recurrent?: boolean | undefined;
  /**
   * The date and time of the reminder
   */
  reminderDatetime?: string | null | undefined;
  /**
   * Whether the reminder is set or not
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The URL of the video conference
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * The ID of the video conference
   */
  videoConferenceId?: string | null | undefined;
  /**
   * Custom fields of the activity
   */
  customFields?: Array<ActivitiesOneCustomFields> | undefined;
  attendees?: Array<ActivitiesOneAttendees> | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: ActivitiesOneCustomMappings | null | undefined;
  /**
   * The user who last updated the activity
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the activity
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the activity was last updated
   */
  updatedAt?: string | null | undefined;
  /**
   * The date and time when the activity was created
   */
  createdAt?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<ActivitiesOnePassThrough> | undefined;
};

/**
 * Activity
 */
export type ActivitiesOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: ActivitiesOneData;
};

export type ActivitiesOneResponse =
  | ActivitiesOneResponseBody
  | ActivitiesOneActivitiesResponseBody;

/** @internal */
export const ActivitiesOneSecurity$inboundSchema: z.ZodType<
  ActivitiesOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ActivitiesOneSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ActivitiesOneSecurity$outboundSchema: z.ZodType<
  ActivitiesOneSecurity$Outbound,
  z.ZodTypeDef,
  ActivitiesOneSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneSecurity$ {
  /** @deprecated use `ActivitiesOneSecurity$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneSecurity$inboundSchema;
  /** @deprecated use `ActivitiesOneSecurity$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneSecurity$outboundSchema;
  /** @deprecated use `ActivitiesOneSecurity$Outbound` instead. */
  export type Outbound = ActivitiesOneSecurity$Outbound;
}

export function activitiesOneSecurityToJSON(
  activitiesOneSecurity: ActivitiesOneSecurity,
): string {
  return JSON.stringify(
    ActivitiesOneSecurity$outboundSchema.parse(activitiesOneSecurity),
  );
}

export function activitiesOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneSecurity' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneRequest$inboundSchema: z.ZodType<
  ActivitiesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type ActivitiesOneRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const ActivitiesOneRequest$outboundSchema: z.ZodType<
  ActivitiesOneRequest$Outbound,
  z.ZodTypeDef,
  ActivitiesOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneRequest$ {
  /** @deprecated use `ActivitiesOneRequest$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneRequest$inboundSchema;
  /** @deprecated use `ActivitiesOneRequest$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneRequest$outboundSchema;
  /** @deprecated use `ActivitiesOneRequest$Outbound` instead. */
  export type Outbound = ActivitiesOneRequest$Outbound;
}

export function activitiesOneRequestToJSON(
  activitiesOneRequest: ActivitiesOneRequest,
): string {
  return JSON.stringify(
    ActivitiesOneRequest$outboundSchema.parse(activitiesOneRequest),
  );
}

export function activitiesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneRequest' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneDetail$inboundSchema: z.ZodType<
  ActivitiesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ActivitiesOneDetail$outboundSchema: z.ZodType<
  ActivitiesOneDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneDetail$ {
  /** @deprecated use `ActivitiesOneDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneDetail$inboundSchema;
  /** @deprecated use `ActivitiesOneDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneDetail$outboundSchema;
  /** @deprecated use `ActivitiesOneDetail$Outbound` instead. */
  export type Outbound = ActivitiesOneDetail$Outbound;
}

export function activitiesOneDetailToJSON(
  activitiesOneDetail: ActivitiesOneDetail,
): string {
  return JSON.stringify(
    ActivitiesOneDetail$outboundSchema.parse(activitiesOneDetail),
  );
}

export function activitiesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneActivitiesResponseBody$inboundSchema: z.ZodType<
  ActivitiesOneActivitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type ActivitiesOneActivitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesOneActivitiesResponseBody$outboundSchema: z.ZodType<
  ActivitiesOneActivitiesResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesOneActivitiesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneActivitiesResponseBody$ {
  /** @deprecated use `ActivitiesOneActivitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesOneActivitiesResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesOneActivitiesResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesOneActivitiesResponseBody$Outbound;
}

export function activitiesOneActivitiesResponseBodyToJSON(
  activitiesOneActivitiesResponseBody: ActivitiesOneActivitiesResponseBody,
): string {
  return JSON.stringify(
    ActivitiesOneActivitiesResponseBody$outboundSchema.parse(
      activitiesOneActivitiesResponseBody,
    ),
  );
}

export function activitiesOneActivitiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneActivitiesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesOneActivitiesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneActivitiesResponseBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneType$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesOneType
> = z.nativeEnum(ActivitiesOneType);

/** @internal */
export const ActivitiesOneType$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesOneType
> = ActivitiesOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneType$ {
  /** @deprecated use `ActivitiesOneType$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneType$inboundSchema;
  /** @deprecated use `ActivitiesOneType$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneType$outboundSchema;
}

/** @internal */
export const ActivitiesOneActivitiesType$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesOneActivitiesType
> = z.nativeEnum(ActivitiesOneActivitiesType);

/** @internal */
export const ActivitiesOneActivitiesType$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesOneActivitiesType
> = ActivitiesOneActivitiesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneActivitiesType$ {
  /** @deprecated use `ActivitiesOneActivitiesType$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneActivitiesType$inboundSchema;
  /** @deprecated use `ActivitiesOneActivitiesType$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneActivitiesType$outboundSchema;
}

/** @internal */
export const ActivitiesOneLocationAddress$inboundSchema: z.ZodType<
  ActivitiesOneLocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesOneActivitiesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ActivitiesOneLocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ActivitiesOneLocationAddress$outboundSchema: z.ZodType<
  ActivitiesOneLocationAddress$Outbound,
  z.ZodTypeDef,
  ActivitiesOneLocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesOneActivitiesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneLocationAddress$ {
  /** @deprecated use `ActivitiesOneLocationAddress$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneLocationAddress$inboundSchema;
  /** @deprecated use `ActivitiesOneLocationAddress$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneLocationAddress$outboundSchema;
  /** @deprecated use `ActivitiesOneLocationAddress$Outbound` instead. */
  export type Outbound = ActivitiesOneLocationAddress$Outbound;
}

export function activitiesOneLocationAddressToJSON(
  activitiesOneLocationAddress: ActivitiesOneLocationAddress,
): string {
  return JSON.stringify(
    ActivitiesOneLocationAddress$outboundSchema.parse(
      activitiesOneLocationAddress,
    ),
  );
}

export function activitiesOneLocationAddressFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneLocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneLocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneLocationAddress' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneShowAs$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesOneShowAs
> = z.nativeEnum(ActivitiesOneShowAs);

/** @internal */
export const ActivitiesOneShowAs$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesOneShowAs
> = ActivitiesOneShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneShowAs$ {
  /** @deprecated use `ActivitiesOneShowAs$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneShowAs$inboundSchema;
  /** @deprecated use `ActivitiesOneShowAs$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneShowAs$outboundSchema;
}

/** @internal */
export const ActivitiesOneValue6$inboundSchema: z.ZodType<
  ActivitiesOneValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivitiesOneValue6$Outbound = {};

/** @internal */
export const ActivitiesOneValue6$outboundSchema: z.ZodType<
  ActivitiesOneValue6$Outbound,
  z.ZodTypeDef,
  ActivitiesOneValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneValue6$ {
  /** @deprecated use `ActivitiesOneValue6$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneValue6$inboundSchema;
  /** @deprecated use `ActivitiesOneValue6$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneValue6$outboundSchema;
  /** @deprecated use `ActivitiesOneValue6$Outbound` instead. */
  export type Outbound = ActivitiesOneValue6$Outbound;
}

export function activitiesOneValue6ToJSON(
  activitiesOneValue6: ActivitiesOneValue6,
): string {
  return JSON.stringify(
    ActivitiesOneValue6$outboundSchema.parse(activitiesOneValue6),
  );
}

export function activitiesOneValue6FromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneValue6' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneValue4$inboundSchema: z.ZodType<
  ActivitiesOneValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivitiesOneValue4$Outbound = {};

/** @internal */
export const ActivitiesOneValue4$outboundSchema: z.ZodType<
  ActivitiesOneValue4$Outbound,
  z.ZodTypeDef,
  ActivitiesOneValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneValue4$ {
  /** @deprecated use `ActivitiesOneValue4$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneValue4$inboundSchema;
  /** @deprecated use `ActivitiesOneValue4$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneValue4$outboundSchema;
  /** @deprecated use `ActivitiesOneValue4$Outbound` instead. */
  export type Outbound = ActivitiesOneValue4$Outbound;
}

export function activitiesOneValue4ToJSON(
  activitiesOneValue4: ActivitiesOneValue4,
): string {
  return JSON.stringify(
    ActivitiesOneValue4$outboundSchema.parse(activitiesOneValue4),
  );
}

export function activitiesOneValue4FromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneValue4' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneValue$inboundSchema: z.ZodType<
  ActivitiesOneValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivitiesOneValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivitiesOneValue6$inboundSchema)),
]);

/** @internal */
export type ActivitiesOneValue$Outbound =
  | ActivitiesOneValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivitiesOneValue6$Outbound>;

/** @internal */
export const ActivitiesOneValue$outboundSchema: z.ZodType<
  ActivitiesOneValue$Outbound,
  z.ZodTypeDef,
  ActivitiesOneValue
> = z.union([
  z.lazy(() => ActivitiesOneValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivitiesOneValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneValue$ {
  /** @deprecated use `ActivitiesOneValue$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneValue$inboundSchema;
  /** @deprecated use `ActivitiesOneValue$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneValue$outboundSchema;
  /** @deprecated use `ActivitiesOneValue$Outbound` instead. */
  export type Outbound = ActivitiesOneValue$Outbound;
}

export function activitiesOneValueToJSON(
  activitiesOneValue: ActivitiesOneValue,
): string {
  return JSON.stringify(
    ActivitiesOneValue$outboundSchema.parse(activitiesOneValue),
  );
}

export function activitiesOneValueFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneValue' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneCustomFields$inboundSchema: z.ZodType<
  ActivitiesOneCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivitiesOneValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivitiesOneValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ActivitiesOneCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ActivitiesOneValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivitiesOneValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ActivitiesOneCustomFields$outboundSchema: z.ZodType<
  ActivitiesOneCustomFields$Outbound,
  z.ZodTypeDef,
  ActivitiesOneCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivitiesOneValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivitiesOneValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneCustomFields$ {
  /** @deprecated use `ActivitiesOneCustomFields$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneCustomFields$inboundSchema;
  /** @deprecated use `ActivitiesOneCustomFields$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneCustomFields$outboundSchema;
  /** @deprecated use `ActivitiesOneCustomFields$Outbound` instead. */
  export type Outbound = ActivitiesOneCustomFields$Outbound;
}

export function activitiesOneCustomFieldsToJSON(
  activitiesOneCustomFields: ActivitiesOneCustomFields,
): string {
  return JSON.stringify(
    ActivitiesOneCustomFields$outboundSchema.parse(activitiesOneCustomFields),
  );
}

export function activitiesOneCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneCustomFields' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneStatus$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesOneStatus
> = z.nativeEnum(ActivitiesOneStatus);

/** @internal */
export const ActivitiesOneStatus$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesOneStatus
> = ActivitiesOneStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneStatus$ {
  /** @deprecated use `ActivitiesOneStatus$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneStatus$inboundSchema;
  /** @deprecated use `ActivitiesOneStatus$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneStatus$outboundSchema;
}

/** @internal */
export const ActivitiesOneAttendees$inboundSchema: z.ZodType<
  ActivitiesOneAttendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ActivitiesOneStatus$inboundSchema).optional(),
  user_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
    "user_id": "userId",
    "contact_id": "contactId",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
  });
});

/** @internal */
export type ActivitiesOneAttendees$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
  user_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const ActivitiesOneAttendees$outboundSchema: z.ZodType<
  ActivitiesOneAttendees$Outbound,
  z.ZodTypeDef,
  ActivitiesOneAttendees
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ActivitiesOneStatus$outboundSchema).optional(),
  userId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
    userId: "user_id",
    contactId: "contact_id",
    updatedAt: "updated_at",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneAttendees$ {
  /** @deprecated use `ActivitiesOneAttendees$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneAttendees$inboundSchema;
  /** @deprecated use `ActivitiesOneAttendees$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneAttendees$outboundSchema;
  /** @deprecated use `ActivitiesOneAttendees$Outbound` instead. */
  export type Outbound = ActivitiesOneAttendees$Outbound;
}

export function activitiesOneAttendeesToJSON(
  activitiesOneAttendees: ActivitiesOneAttendees,
): string {
  return JSON.stringify(
    ActivitiesOneAttendees$outboundSchema.parse(activitiesOneAttendees),
  );
}

export function activitiesOneAttendeesFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneAttendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneAttendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneAttendees' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneCustomMappings$inboundSchema: z.ZodType<
  ActivitiesOneCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivitiesOneCustomMappings$Outbound = {};

/** @internal */
export const ActivitiesOneCustomMappings$outboundSchema: z.ZodType<
  ActivitiesOneCustomMappings$Outbound,
  z.ZodTypeDef,
  ActivitiesOneCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneCustomMappings$ {
  /** @deprecated use `ActivitiesOneCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneCustomMappings$inboundSchema;
  /** @deprecated use `ActivitiesOneCustomMappings$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneCustomMappings$outboundSchema;
  /** @deprecated use `ActivitiesOneCustomMappings$Outbound` instead. */
  export type Outbound = ActivitiesOneCustomMappings$Outbound;
}

export function activitiesOneCustomMappingsToJSON(
  activitiesOneCustomMappings: ActivitiesOneCustomMappings,
): string {
  return JSON.stringify(
    ActivitiesOneCustomMappings$outboundSchema.parse(
      activitiesOneCustomMappings,
    ),
  );
}

export function activitiesOneCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneCustomMappings' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneExtendPaths$inboundSchema: z.ZodType<
  ActivitiesOneExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ActivitiesOneExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ActivitiesOneExtendPaths$outboundSchema: z.ZodType<
  ActivitiesOneExtendPaths$Outbound,
  z.ZodTypeDef,
  ActivitiesOneExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneExtendPaths$ {
  /** @deprecated use `ActivitiesOneExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneExtendPaths$inboundSchema;
  /** @deprecated use `ActivitiesOneExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneExtendPaths$outboundSchema;
  /** @deprecated use `ActivitiesOneExtendPaths$Outbound` instead. */
  export type Outbound = ActivitiesOneExtendPaths$Outbound;
}

export function activitiesOneExtendPathsToJSON(
  activitiesOneExtendPaths: ActivitiesOneExtendPaths,
): string {
  return JSON.stringify(
    ActivitiesOneExtendPaths$outboundSchema.parse(activitiesOneExtendPaths),
  );
}

export function activitiesOneExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneExtendPaths' from JSON`,
  );
}

/** @internal */
export const ActivitiesOnePassThrough$inboundSchema: z.ZodType<
  ActivitiesOnePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ActivitiesOneExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ActivitiesOnePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ActivitiesOneExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ActivitiesOnePassThrough$outboundSchema: z.ZodType<
  ActivitiesOnePassThrough$Outbound,
  z.ZodTypeDef,
  ActivitiesOnePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ActivitiesOneExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOnePassThrough$ {
  /** @deprecated use `ActivitiesOnePassThrough$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOnePassThrough$inboundSchema;
  /** @deprecated use `ActivitiesOnePassThrough$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOnePassThrough$outboundSchema;
  /** @deprecated use `ActivitiesOnePassThrough$Outbound` instead. */
  export type Outbound = ActivitiesOnePassThrough$Outbound;
}

export function activitiesOnePassThroughToJSON(
  activitiesOnePassThrough: ActivitiesOnePassThrough,
): string {
  return JSON.stringify(
    ActivitiesOnePassThrough$outboundSchema.parse(activitiesOnePassThrough),
  );
}

export function activitiesOnePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOnePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOnePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOnePassThrough' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneData$inboundSchema: z.ZodType<
  ActivitiesOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  downstream_id: z.nullable(z.string()).optional(),
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesOneType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() => ActivitiesOneLocationAddress$inboundSchema)
    .optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(ActivitiesOneShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  duration_minutes: z.nullable(z.number().int()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(z.lazy(() => ActivitiesOneCustomFields$inboundSchema))
    .optional(),
  attendees: z.array(z.lazy(() => ActivitiesOneAttendees$inboundSchema))
    .optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ActivitiesOneCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => ActivitiesOnePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "downstream_id": "downstreamId",
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "duration_minutes": "durationMinutes",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ActivitiesOneData$Outbound = {
  id?: string | undefined;
  downstream_id?: string | null | undefined;
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: ActivitiesOneLocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  duration_minutes?: number | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<ActivitiesOneCustomFields$Outbound> | undefined;
  attendees?: Array<ActivitiesOneAttendees$Outbound> | undefined;
  custom_mappings?: ActivitiesOneCustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<ActivitiesOnePassThrough$Outbound> | undefined;
};

/** @internal */
export const ActivitiesOneData$outboundSchema: z.ZodType<
  ActivitiesOneData$Outbound,
  z.ZodTypeDef,
  ActivitiesOneData
> = z.object({
  id: z.string().optional(),
  downstreamId: z.nullable(z.string()).optional(),
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesOneType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() => ActivitiesOneLocationAddress$outboundSchema)
    .optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(ActivitiesOneShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  durationMinutes: z.nullable(z.number().int()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(z.lazy(() => ActivitiesOneCustomFields$outboundSchema))
    .optional(),
  attendees: z.array(z.lazy(() => ActivitiesOneAttendees$outboundSchema))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => ActivitiesOneCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => ActivitiesOnePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    downstreamId: "downstream_id",
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    durationMinutes: "duration_minutes",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneData$ {
  /** @deprecated use `ActivitiesOneData$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneData$inboundSchema;
  /** @deprecated use `ActivitiesOneData$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneData$outboundSchema;
  /** @deprecated use `ActivitiesOneData$Outbound` instead. */
  export type Outbound = ActivitiesOneData$Outbound;
}

export function activitiesOneDataToJSON(
  activitiesOneData: ActivitiesOneData,
): string {
  return JSON.stringify(
    ActivitiesOneData$outboundSchema.parse(activitiesOneData),
  );
}

export function activitiesOneDataFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneData' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneResponseBody$inboundSchema: z.ZodType<
  ActivitiesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivitiesOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ActivitiesOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ActivitiesOneData$Outbound;
};

/** @internal */
export const ActivitiesOneResponseBody$outboundSchema: z.ZodType<
  ActivitiesOneResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivitiesOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneResponseBody$ {
  /** @deprecated use `ActivitiesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesOneResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesOneResponseBody$Outbound;
}

export function activitiesOneResponseBodyToJSON(
  activitiesOneResponseBody: ActivitiesOneResponseBody,
): string {
  return JSON.stringify(
    ActivitiesOneResponseBody$outboundSchema.parse(activitiesOneResponseBody),
  );
}

export function activitiesOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneResponseBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesOneResponse$inboundSchema: z.ZodType<
  ActivitiesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivitiesOneResponseBody$inboundSchema),
  z.lazy(() => ActivitiesOneActivitiesResponseBody$inboundSchema),
]);

/** @internal */
export type ActivitiesOneResponse$Outbound =
  | ActivitiesOneResponseBody$Outbound
  | ActivitiesOneActivitiesResponseBody$Outbound;

/** @internal */
export const ActivitiesOneResponse$outboundSchema: z.ZodType<
  ActivitiesOneResponse$Outbound,
  z.ZodTypeDef,
  ActivitiesOneResponse
> = z.union([
  z.lazy(() => ActivitiesOneResponseBody$outboundSchema),
  z.lazy(() => ActivitiesOneActivitiesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesOneResponse$ {
  /** @deprecated use `ActivitiesOneResponse$inboundSchema` instead. */
  export const inboundSchema = ActivitiesOneResponse$inboundSchema;
  /** @deprecated use `ActivitiesOneResponse$outboundSchema` instead. */
  export const outboundSchema = ActivitiesOneResponse$outboundSchema;
  /** @deprecated use `ActivitiesOneResponse$Outbound` instead. */
  export type Outbound = ActivitiesOneResponse$Outbound;
}

export function activitiesOneResponseToJSON(
  activitiesOneResponse: ActivitiesOneResponse,
): string {
  return JSON.stringify(
    ActivitiesOneResponse$outboundSchema.parse(activitiesOneResponse),
  );
}

export function activitiesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesOneResponse' from JSON`,
  );
}
