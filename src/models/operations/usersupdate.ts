/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsersUpdateSecurity = {
  apiKey: string;
};

/**
 * The type of address.
 */
export const UsersUpdateType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type UsersUpdateType = ClosedEnum<typeof UsersUpdateType>;

export type UsersUpdateAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: UsersUpdateType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const UsersUpdateUsersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type UsersUpdateUsersType = ClosedEnum<typeof UsersUpdateUsersType>;

export type UsersUpdatePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: UsersUpdateUsersType | null | undefined;
};

/**
 * Email type
 */
export const UsersUpdateUsersRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type UsersUpdateUsersRequestType = ClosedEnum<
  typeof UsersUpdateUsersRequestType
>;

export type UsersUpdateEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: UsersUpdateUsersRequestType | null | undefined;
};

export type UsersUpdateExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type UsersUpdatePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<UsersUpdateExtendPaths> | undefined;
};

export type UsersUpdateRequestBody = {
  /**
   * The parent user id
   */
  parentId?: string | null | undefined;
  /**
   * The username of the user
   */
  username?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  division?: string | null | undefined;
  /**
   * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * The name of the company.
   */
  companyName?: string | null | undefined;
  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  employeeNumber?: string | null | undefined;
  /**
   * A description of the object.
   */
  description?: string | null | undefined;
  /**
   * The URL of the user's avatar
   */
  image?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  /**
   * The status of the user
   */
  status?: string | null | undefined;
  /**
   * The password of the user
   */
  password?: string | null | undefined;
  addresses?: Array<UsersUpdateAddresses> | undefined;
  phoneNumbers?: Array<UsersUpdatePhoneNumbers> | undefined;
  emails: Array<UsersUpdateEmails>;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<UsersUpdatePassThrough> | undefined;
};

export type UsersUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  requestBody: UsersUpdateRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersUpdateDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type UsersUpdateUsersResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type UsersUpdateUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * User updated
 */
export type UsersUpdateResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: UsersUpdateUnifiedId;
};

export type UsersUpdateResponse =
  | UsersUpdateResponseBody
  | UsersUpdateUsersResponseBody;

/** @internal */
export const UsersUpdateSecurity$inboundSchema: z.ZodType<
  UsersUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type UsersUpdateSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const UsersUpdateSecurity$outboundSchema: z.ZodType<
  UsersUpdateSecurity$Outbound,
  z.ZodTypeDef,
  UsersUpdateSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateSecurity$ {
  /** @deprecated use `UsersUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateSecurity$inboundSchema;
  /** @deprecated use `UsersUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateSecurity$outboundSchema;
  /** @deprecated use `UsersUpdateSecurity$Outbound` instead. */
  export type Outbound = UsersUpdateSecurity$Outbound;
}

export function usersUpdateSecurityToJSON(
  usersUpdateSecurity: UsersUpdateSecurity,
): string {
  return JSON.stringify(
    UsersUpdateSecurity$outboundSchema.parse(usersUpdateSecurity),
  );
}

export function usersUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const UsersUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof UsersUpdateType
> = z.nativeEnum(UsersUpdateType);

/** @internal */
export const UsersUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof UsersUpdateType
> = UsersUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateType$ {
  /** @deprecated use `UsersUpdateType$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateType$inboundSchema;
  /** @deprecated use `UsersUpdateType$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateType$outboundSchema;
}

/** @internal */
export const UsersUpdateAddresses$inboundSchema: z.ZodType<
  UsersUpdateAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UsersUpdateType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UsersUpdateAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UsersUpdateAddresses$outboundSchema: z.ZodType<
  UsersUpdateAddresses$Outbound,
  z.ZodTypeDef,
  UsersUpdateAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UsersUpdateType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateAddresses$ {
  /** @deprecated use `UsersUpdateAddresses$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateAddresses$inboundSchema;
  /** @deprecated use `UsersUpdateAddresses$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateAddresses$outboundSchema;
  /** @deprecated use `UsersUpdateAddresses$Outbound` instead. */
  export type Outbound = UsersUpdateAddresses$Outbound;
}

export function usersUpdateAddressesToJSON(
  usersUpdateAddresses: UsersUpdateAddresses,
): string {
  return JSON.stringify(
    UsersUpdateAddresses$outboundSchema.parse(usersUpdateAddresses),
  );
}

export function usersUpdateAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateAddresses' from JSON`,
  );
}

/** @internal */
export const UsersUpdateUsersType$inboundSchema: z.ZodNativeEnum<
  typeof UsersUpdateUsersType
> = z.nativeEnum(UsersUpdateUsersType);

/** @internal */
export const UsersUpdateUsersType$outboundSchema: z.ZodNativeEnum<
  typeof UsersUpdateUsersType
> = UsersUpdateUsersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUsersType$ {
  /** @deprecated use `UsersUpdateUsersType$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateUsersType$inboundSchema;
  /** @deprecated use `UsersUpdateUsersType$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateUsersType$outboundSchema;
}

/** @internal */
export const UsersUpdatePhoneNumbers$inboundSchema: z.ZodType<
  UsersUpdatePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UsersUpdateUsersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UsersUpdatePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UsersUpdatePhoneNumbers$outboundSchema: z.ZodType<
  UsersUpdatePhoneNumbers$Outbound,
  z.ZodTypeDef,
  UsersUpdatePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UsersUpdateUsersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdatePhoneNumbers$ {
  /** @deprecated use `UsersUpdatePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UsersUpdatePhoneNumbers$inboundSchema;
  /** @deprecated use `UsersUpdatePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UsersUpdatePhoneNumbers$outboundSchema;
  /** @deprecated use `UsersUpdatePhoneNumbers$Outbound` instead. */
  export type Outbound = UsersUpdatePhoneNumbers$Outbound;
}

export function usersUpdatePhoneNumbersToJSON(
  usersUpdatePhoneNumbers: UsersUpdatePhoneNumbers,
): string {
  return JSON.stringify(
    UsersUpdatePhoneNumbers$outboundSchema.parse(usersUpdatePhoneNumbers),
  );
}

export function usersUpdatePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdatePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdatePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdatePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UsersUpdateUsersRequestType$inboundSchema: z.ZodNativeEnum<
  typeof UsersUpdateUsersRequestType
> = z.nativeEnum(UsersUpdateUsersRequestType);

/** @internal */
export const UsersUpdateUsersRequestType$outboundSchema: z.ZodNativeEnum<
  typeof UsersUpdateUsersRequestType
> = UsersUpdateUsersRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUsersRequestType$ {
  /** @deprecated use `UsersUpdateUsersRequestType$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateUsersRequestType$inboundSchema;
  /** @deprecated use `UsersUpdateUsersRequestType$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateUsersRequestType$outboundSchema;
}

/** @internal */
export const UsersUpdateEmails$inboundSchema: z.ZodType<
  UsersUpdateEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UsersUpdateUsersRequestType$inboundSchema).optional(),
});

/** @internal */
export type UsersUpdateEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UsersUpdateEmails$outboundSchema: z.ZodType<
  UsersUpdateEmails$Outbound,
  z.ZodTypeDef,
  UsersUpdateEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UsersUpdateUsersRequestType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateEmails$ {
  /** @deprecated use `UsersUpdateEmails$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateEmails$inboundSchema;
  /** @deprecated use `UsersUpdateEmails$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateEmails$outboundSchema;
  /** @deprecated use `UsersUpdateEmails$Outbound` instead. */
  export type Outbound = UsersUpdateEmails$Outbound;
}

export function usersUpdateEmailsToJSON(
  usersUpdateEmails: UsersUpdateEmails,
): string {
  return JSON.stringify(
    UsersUpdateEmails$outboundSchema.parse(usersUpdateEmails),
  );
}

export function usersUpdateEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateEmails' from JSON`,
  );
}

/** @internal */
export const UsersUpdateExtendPaths$inboundSchema: z.ZodType<
  UsersUpdateExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UsersUpdateExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UsersUpdateExtendPaths$outboundSchema: z.ZodType<
  UsersUpdateExtendPaths$Outbound,
  z.ZodTypeDef,
  UsersUpdateExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateExtendPaths$ {
  /** @deprecated use `UsersUpdateExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateExtendPaths$inboundSchema;
  /** @deprecated use `UsersUpdateExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateExtendPaths$outboundSchema;
  /** @deprecated use `UsersUpdateExtendPaths$Outbound` instead. */
  export type Outbound = UsersUpdateExtendPaths$Outbound;
}

export function usersUpdateExtendPathsToJSON(
  usersUpdateExtendPaths: UsersUpdateExtendPaths,
): string {
  return JSON.stringify(
    UsersUpdateExtendPaths$outboundSchema.parse(usersUpdateExtendPaths),
  );
}

export function usersUpdateExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateExtendPaths' from JSON`,
  );
}

/** @internal */
export const UsersUpdatePassThrough$inboundSchema: z.ZodType<
  UsersUpdatePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => UsersUpdateExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UsersUpdatePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UsersUpdateExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UsersUpdatePassThrough$outboundSchema: z.ZodType<
  UsersUpdatePassThrough$Outbound,
  z.ZodTypeDef,
  UsersUpdatePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => UsersUpdateExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdatePassThrough$ {
  /** @deprecated use `UsersUpdatePassThrough$inboundSchema` instead. */
  export const inboundSchema = UsersUpdatePassThrough$inboundSchema;
  /** @deprecated use `UsersUpdatePassThrough$outboundSchema` instead. */
  export const outboundSchema = UsersUpdatePassThrough$outboundSchema;
  /** @deprecated use `UsersUpdatePassThrough$Outbound` instead. */
  export type Outbound = UsersUpdatePassThrough$Outbound;
}

export function usersUpdatePassThroughToJSON(
  usersUpdatePassThrough: UsersUpdatePassThrough,
): string {
  return JSON.stringify(
    UsersUpdatePassThrough$outboundSchema.parse(usersUpdatePassThrough),
  );
}

export function usersUpdatePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdatePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdatePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdatePassThrough' from JSON`,
  );
}

/** @internal */
export const UsersUpdateRequestBody$inboundSchema: z.ZodType<
  UsersUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  parent_id: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employee_number: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UsersUpdateAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(z.lazy(() => UsersUpdatePhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => UsersUpdateEmails$inboundSchema)),
  pass_through: z.array(z.lazy(() => UsersUpdatePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "first_name": "firstName",
    "last_name": "lastName",
    "company_name": "companyName",
    "employee_number": "employeeNumber",
    "phone_numbers": "phoneNumbers",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UsersUpdateRequestBody$Outbound = {
  parent_id?: string | null | undefined;
  username?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  title?: string | null | undefined;
  division?: string | null | undefined;
  department?: string | null | undefined;
  company_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  password?: string | null | undefined;
  addresses?: Array<UsersUpdateAddresses$Outbound> | undefined;
  phone_numbers?: Array<UsersUpdatePhoneNumbers$Outbound> | undefined;
  emails: Array<UsersUpdateEmails$Outbound>;
  pass_through?: Array<UsersUpdatePassThrough$Outbound> | undefined;
};

/** @internal */
export const UsersUpdateRequestBody$outboundSchema: z.ZodType<
  UsersUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  UsersUpdateRequestBody
> = z.object({
  parentId: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UsersUpdateAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => UsersUpdatePhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => UsersUpdateEmails$outboundSchema)),
  passThrough: z.array(z.lazy(() => UsersUpdatePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    firstName: "first_name",
    lastName: "last_name",
    companyName: "company_name",
    employeeNumber: "employee_number",
    phoneNumbers: "phone_numbers",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateRequestBody$ {
  /** @deprecated use `UsersUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateRequestBody$inboundSchema;
  /** @deprecated use `UsersUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateRequestBody$outboundSchema;
  /** @deprecated use `UsersUpdateRequestBody$Outbound` instead. */
  export type Outbound = UsersUpdateRequestBody$Outbound;
}

export function usersUpdateRequestBodyToJSON(
  usersUpdateRequestBody: UsersUpdateRequestBody,
): string {
  return JSON.stringify(
    UsersUpdateRequestBody$outboundSchema.parse(usersUpdateRequestBody),
  );
}

export function usersUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const UsersUpdateRequest$inboundSchema: z.ZodType<
  UsersUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  RequestBody: z.lazy(() => UsersUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UsersUpdateRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  RequestBody: UsersUpdateRequestBody$Outbound;
};

/** @internal */
export const UsersUpdateRequest$outboundSchema: z.ZodType<
  UsersUpdateRequest$Outbound,
  z.ZodTypeDef,
  UsersUpdateRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  requestBody: z.lazy(() => UsersUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateRequest$ {
  /** @deprecated use `UsersUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateRequest$inboundSchema;
  /** @deprecated use `UsersUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateRequest$outboundSchema;
  /** @deprecated use `UsersUpdateRequest$Outbound` instead. */
  export type Outbound = UsersUpdateRequest$Outbound;
}

export function usersUpdateRequestToJSON(
  usersUpdateRequest: UsersUpdateRequest,
): string {
  return JSON.stringify(
    UsersUpdateRequest$outboundSchema.parse(usersUpdateRequest),
  );
}

export function usersUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateRequest' from JSON`,
  );
}

/** @internal */
export const UsersUpdateDetail$inboundSchema: z.ZodType<
  UsersUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersUpdateDetail$outboundSchema: z.ZodType<
  UsersUpdateDetail$Outbound,
  z.ZodTypeDef,
  UsersUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateDetail$ {
  /** @deprecated use `UsersUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateDetail$inboundSchema;
  /** @deprecated use `UsersUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateDetail$outboundSchema;
  /** @deprecated use `UsersUpdateDetail$Outbound` instead. */
  export type Outbound = UsersUpdateDetail$Outbound;
}

export function usersUpdateDetailToJSON(
  usersUpdateDetail: UsersUpdateDetail,
): string {
  return JSON.stringify(
    UsersUpdateDetail$outboundSchema.parse(usersUpdateDetail),
  );
}

export function usersUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateDetail' from JSON`,
  );
}

/** @internal */
export const UsersUpdateUsersResponseBody$inboundSchema: z.ZodType<
  UsersUpdateUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type UsersUpdateUsersResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersUpdateUsersResponseBody$outboundSchema: z.ZodType<
  UsersUpdateUsersResponseBody$Outbound,
  z.ZodTypeDef,
  UsersUpdateUsersResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUsersResponseBody$ {
  /** @deprecated use `UsersUpdateUsersResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateUsersResponseBody$inboundSchema;
  /** @deprecated use `UsersUpdateUsersResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateUsersResponseBody$outboundSchema;
  /** @deprecated use `UsersUpdateUsersResponseBody$Outbound` instead. */
  export type Outbound = UsersUpdateUsersResponseBody$Outbound;
}

export function usersUpdateUsersResponseBodyToJSON(
  usersUpdateUsersResponseBody: UsersUpdateUsersResponseBody,
): string {
  return JSON.stringify(
    UsersUpdateUsersResponseBody$outboundSchema.parse(
      usersUpdateUsersResponseBody,
    ),
  );
}

export function usersUpdateUsersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateUsersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateUsersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateUsersResponseBody' from JSON`,
  );
}

/** @internal */
export const UsersUpdateUnifiedId$inboundSchema: z.ZodType<
  UsersUpdateUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UsersUpdateUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UsersUpdateUnifiedId$outboundSchema: z.ZodType<
  UsersUpdateUnifiedId$Outbound,
  z.ZodTypeDef,
  UsersUpdateUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateUnifiedId$ {
  /** @deprecated use `UsersUpdateUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateUnifiedId$inboundSchema;
  /** @deprecated use `UsersUpdateUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateUnifiedId$outboundSchema;
  /** @deprecated use `UsersUpdateUnifiedId$Outbound` instead. */
  export type Outbound = UsersUpdateUnifiedId$Outbound;
}

export function usersUpdateUnifiedIdToJSON(
  usersUpdateUnifiedId: UsersUpdateUnifiedId,
): string {
  return JSON.stringify(
    UsersUpdateUnifiedId$outboundSchema.parse(usersUpdateUnifiedId),
  );
}

export function usersUpdateUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateUnifiedId' from JSON`,
  );
}

/** @internal */
export const UsersUpdateResponseBody$inboundSchema: z.ZodType<
  UsersUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UsersUpdateUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UsersUpdateResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UsersUpdateUnifiedId$Outbound;
};

/** @internal */
export const UsersUpdateResponseBody$outboundSchema: z.ZodType<
  UsersUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  UsersUpdateResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UsersUpdateUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateResponseBody$ {
  /** @deprecated use `UsersUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateResponseBody$inboundSchema;
  /** @deprecated use `UsersUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateResponseBody$outboundSchema;
  /** @deprecated use `UsersUpdateResponseBody$Outbound` instead. */
  export type Outbound = UsersUpdateResponseBody$Outbound;
}

export function usersUpdateResponseBodyToJSON(
  usersUpdateResponseBody: UsersUpdateResponseBody,
): string {
  return JSON.stringify(
    UsersUpdateResponseBody$outboundSchema.parse(usersUpdateResponseBody),
  );
}

export function usersUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const UsersUpdateResponse$inboundSchema: z.ZodType<
  UsersUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UsersUpdateResponseBody$inboundSchema),
  z.lazy(() => UsersUpdateUsersResponseBody$inboundSchema),
]);

/** @internal */
export type UsersUpdateResponse$Outbound =
  | UsersUpdateResponseBody$Outbound
  | UsersUpdateUsersResponseBody$Outbound;

/** @internal */
export const UsersUpdateResponse$outboundSchema: z.ZodType<
  UsersUpdateResponse$Outbound,
  z.ZodTypeDef,
  UsersUpdateResponse
> = z.union([
  z.lazy(() => UsersUpdateResponseBody$outboundSchema),
  z.lazy(() => UsersUpdateUsersResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersUpdateResponse$ {
  /** @deprecated use `UsersUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = UsersUpdateResponse$inboundSchema;
  /** @deprecated use `UsersUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = UsersUpdateResponse$outboundSchema;
  /** @deprecated use `UsersUpdateResponse$Outbound` instead. */
  export type Outbound = UsersUpdateResponse$Outbound;
}

export function usersUpdateResponseToJSON(
  usersUpdateResponse: UsersUpdateResponse,
): string {
  return JSON.stringify(
    UsersUpdateResponse$outboundSchema.parse(usersUpdateResponse),
  );
}

export function usersUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsersUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersUpdateResponse' from JSON`,
  );
}
