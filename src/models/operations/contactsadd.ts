/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsAddSecurity = {
  apiKey: string;
};

/**
 * The type of the contact.
 */
export const ContactsAddType = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * The type of the contact.
 */
export type ContactsAddType = ClosedEnum<typeof ContactsAddType>;

/**
 * The gender of the contact.
 */
export const Gender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact.
 */
export type Gender = ClosedEnum<typeof Gender>;

/**
 * The type of website
 */
export const ContactsAddContactsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type ContactsAddContactsType = ClosedEnum<
  typeof ContactsAddContactsType
>;

export type ContactsAddWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: ContactsAddContactsType | null | undefined;
};

/**
 * The type of address.
 */
export const ContactsAddContactsRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type ContactsAddContactsRequestType = ClosedEnum<
  typeof ContactsAddContactsRequestType
>;

export type ContactsAddAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: ContactsAddContactsRequestType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type ContactsAddSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const ContactsAddContactsRequestRequestBodyType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type ContactsAddContactsRequestRequestBodyType = ClosedEnum<
  typeof ContactsAddContactsRequestRequestBodyType
>;

export type ContactsAddPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: ContactsAddContactsRequestRequestBodyType | null | undefined;
};

/**
 * Email type
 */
export const ContactsAddContactsRequestRequestBodyEmailsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type ContactsAddContactsRequestRequestBodyEmailsType = ClosedEnum<
  typeof ContactsAddContactsRequestRequestBodyEmailsType
>;

export type ContactsAddEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: ContactsAddContactsRequestRequestBodyEmailsType | null | undefined;
};

export type ContactsAddValue6 = {};

export type ContactsAddValue4 = {};

export type ContactsAddValue =
  | ContactsAddValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ContactsAddValue6>;

export type ContactsAddCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | ContactsAddValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ContactsAddValue6>
    | null
    | undefined;
};

export type ContactsAddExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type ContactsAddPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<ContactsAddExtendPaths> | undefined;
};

export type ContactsAddRequestBody = {
  /**
   * Full name of the contact.
   */
  name: string | null;
  /**
   * The owner of the contact.
   */
  ownerId?: string | null | undefined;
  /**
   * The type of the contact.
   */
  type?: ContactsAddType | null | undefined;
  /**
   * The company the contact is associated with.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company the contact is associated with.
   */
  companyName?: string | null | undefined;
  /**
   * The lead the contact is associated with.
   */
  leadId?: string | null | undefined;
  /**
   * The first name of the contact.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the contact.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the contact.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the contact.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the contact.
   */
  suffix?: string | null | undefined;
  /**
   * The job title of the contact.
   */
  title?: string | null | undefined;
  /**
   * The department of the contact.
   */
  department?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact.
   */
  gender?: Gender | null | undefined;
  /**
   * The birthday of the contact.
   */
  birthday?: string | null | undefined;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * The lead source of the contact.
   */
  leadSource?: string | null | undefined;
  /**
   * The fax number of the contact.
   */
  fax?: string | null | undefined;
  /**
   * The description of the contact.
   */
  description?: string | null | undefined;
  /**
   * The current balance of the contact.
   */
  currentBalance?: number | null | undefined;
  /**
   * The status of the contact.
   */
  status?: string | null | undefined;
  /**
   * The active status of the contact.
   */
  active?: boolean | null | undefined;
  websites?: Array<ContactsAddWebsites> | undefined;
  addresses?: Array<ContactsAddAddresses> | undefined;
  socialLinks?: Array<ContactsAddSocialLinks> | undefined;
  phoneNumbers?: Array<ContactsAddPhoneNumbers> | undefined;
  emails?: Array<ContactsAddEmails> | undefined;
  emailDomain?: string | null | undefined;
  customFields?: Array<ContactsAddCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * The opportunity ids of the contact.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<ContactsAddPassThrough> | undefined;
};

export type ContactsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: ContactsAddRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsAddDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type ContactsAddContactsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type ContactsAddUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Contact created
 */
export type ContactsAddResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: ContactsAddUnifiedId;
};

export type ContactsAddResponse =
  | ContactsAddResponseBody
  | ContactsAddContactsResponseBody;

/** @internal */
export const ContactsAddSecurity$inboundSchema: z.ZodType<
  ContactsAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ContactsAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ContactsAddSecurity$outboundSchema: z.ZodType<
  ContactsAddSecurity$Outbound,
  z.ZodTypeDef,
  ContactsAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddSecurity$ {
  /** @deprecated use `ContactsAddSecurity$inboundSchema` instead. */
  export const inboundSchema = ContactsAddSecurity$inboundSchema;
  /** @deprecated use `ContactsAddSecurity$outboundSchema` instead. */
  export const outboundSchema = ContactsAddSecurity$outboundSchema;
  /** @deprecated use `ContactsAddSecurity$Outbound` instead. */
  export type Outbound = ContactsAddSecurity$Outbound;
}

export function contactsAddSecurityToJSON(
  contactsAddSecurity: ContactsAddSecurity,
): string {
  return JSON.stringify(
    ContactsAddSecurity$outboundSchema.parse(contactsAddSecurity),
  );
}

export function contactsAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddSecurity' from JSON`,
  );
}

/** @internal */
export const ContactsAddType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsAddType
> = z.nativeEnum(ContactsAddType);

/** @internal */
export const ContactsAddType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsAddType
> = ContactsAddType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddType$ {
  /** @deprecated use `ContactsAddType$inboundSchema` instead. */
  export const inboundSchema = ContactsAddType$inboundSchema;
  /** @deprecated use `ContactsAddType$outboundSchema` instead. */
  export const outboundSchema = ContactsAddType$outboundSchema;
}

/** @internal */
export const Gender$inboundSchema: z.ZodNativeEnum<typeof Gender> = z
  .nativeEnum(Gender);

/** @internal */
export const Gender$outboundSchema: z.ZodNativeEnum<typeof Gender> =
  Gender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Gender$ {
  /** @deprecated use `Gender$inboundSchema` instead. */
  export const inboundSchema = Gender$inboundSchema;
  /** @deprecated use `Gender$outboundSchema` instead. */
  export const outboundSchema = Gender$outboundSchema;
}

/** @internal */
export const ContactsAddContactsType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsAddContactsType
> = z.nativeEnum(ContactsAddContactsType);

/** @internal */
export const ContactsAddContactsType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsAddContactsType
> = ContactsAddContactsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsType$ {
  /** @deprecated use `ContactsAddContactsType$inboundSchema` instead. */
  export const inboundSchema = ContactsAddContactsType$inboundSchema;
  /** @deprecated use `ContactsAddContactsType$outboundSchema` instead. */
  export const outboundSchema = ContactsAddContactsType$outboundSchema;
}

/** @internal */
export const ContactsAddWebsites$inboundSchema: z.ZodType<
  ContactsAddWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ContactsAddContactsType$inboundSchema).optional(),
});

/** @internal */
export type ContactsAddWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsAddWebsites$outboundSchema: z.ZodType<
  ContactsAddWebsites$Outbound,
  z.ZodTypeDef,
  ContactsAddWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ContactsAddContactsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddWebsites$ {
  /** @deprecated use `ContactsAddWebsites$inboundSchema` instead. */
  export const inboundSchema = ContactsAddWebsites$inboundSchema;
  /** @deprecated use `ContactsAddWebsites$outboundSchema` instead. */
  export const outboundSchema = ContactsAddWebsites$outboundSchema;
  /** @deprecated use `ContactsAddWebsites$Outbound` instead. */
  export type Outbound = ContactsAddWebsites$Outbound;
}

export function contactsAddWebsitesToJSON(
  contactsAddWebsites: ContactsAddWebsites,
): string {
  return JSON.stringify(
    ContactsAddWebsites$outboundSchema.parse(contactsAddWebsites),
  );
}

export function contactsAddWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddWebsites' from JSON`,
  );
}

/** @internal */
export const ContactsAddContactsRequestType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsAddContactsRequestType
> = z.nativeEnum(ContactsAddContactsRequestType);

/** @internal */
export const ContactsAddContactsRequestType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsAddContactsRequestType
> = ContactsAddContactsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsRequestType$ {
  /** @deprecated use `ContactsAddContactsRequestType$inboundSchema` instead. */
  export const inboundSchema = ContactsAddContactsRequestType$inboundSchema;
  /** @deprecated use `ContactsAddContactsRequestType$outboundSchema` instead. */
  export const outboundSchema = ContactsAddContactsRequestType$outboundSchema;
}

/** @internal */
export const ContactsAddAddresses$inboundSchema: z.ZodType<
  ContactsAddAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAddContactsRequestType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ContactsAddAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ContactsAddAddresses$outboundSchema: z.ZodType<
  ContactsAddAddresses$Outbound,
  z.ZodTypeDef,
  ContactsAddAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAddContactsRequestType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddAddresses$ {
  /** @deprecated use `ContactsAddAddresses$inboundSchema` instead. */
  export const inboundSchema = ContactsAddAddresses$inboundSchema;
  /** @deprecated use `ContactsAddAddresses$outboundSchema` instead. */
  export const outboundSchema = ContactsAddAddresses$outboundSchema;
  /** @deprecated use `ContactsAddAddresses$Outbound` instead. */
  export type Outbound = ContactsAddAddresses$Outbound;
}

export function contactsAddAddressesToJSON(
  contactsAddAddresses: ContactsAddAddresses,
): string {
  return JSON.stringify(
    ContactsAddAddresses$outboundSchema.parse(contactsAddAddresses),
  );
}

export function contactsAddAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddAddresses' from JSON`,
  );
}

/** @internal */
export const ContactsAddSocialLinks$inboundSchema: z.ZodType<
  ContactsAddSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type ContactsAddSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsAddSocialLinks$outboundSchema: z.ZodType<
  ContactsAddSocialLinks$Outbound,
  z.ZodTypeDef,
  ContactsAddSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddSocialLinks$ {
  /** @deprecated use `ContactsAddSocialLinks$inboundSchema` instead. */
  export const inboundSchema = ContactsAddSocialLinks$inboundSchema;
  /** @deprecated use `ContactsAddSocialLinks$outboundSchema` instead. */
  export const outboundSchema = ContactsAddSocialLinks$outboundSchema;
  /** @deprecated use `ContactsAddSocialLinks$Outbound` instead. */
  export type Outbound = ContactsAddSocialLinks$Outbound;
}

export function contactsAddSocialLinksToJSON(
  contactsAddSocialLinks: ContactsAddSocialLinks,
): string {
  return JSON.stringify(
    ContactsAddSocialLinks$outboundSchema.parse(contactsAddSocialLinks),
  );
}

export function contactsAddSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddSocialLinks' from JSON`,
  );
}

/** @internal */
export const ContactsAddContactsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof ContactsAddContactsRequestRequestBodyType> = z
    .nativeEnum(ContactsAddContactsRequestRequestBodyType);

/** @internal */
export const ContactsAddContactsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof ContactsAddContactsRequestRequestBodyType> =
    ContactsAddContactsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsRequestRequestBodyType$ {
  /** @deprecated use `ContactsAddContactsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAddContactsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `ContactsAddContactsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAddContactsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const ContactsAddPhoneNumbers$inboundSchema: z.ZodType<
  ContactsAddPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAddContactsRequestRequestBodyType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ContactsAddPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsAddPhoneNumbers$outboundSchema: z.ZodType<
  ContactsAddPhoneNumbers$Outbound,
  z.ZodTypeDef,
  ContactsAddPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAddContactsRequestRequestBodyType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddPhoneNumbers$ {
  /** @deprecated use `ContactsAddPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ContactsAddPhoneNumbers$inboundSchema;
  /** @deprecated use `ContactsAddPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = ContactsAddPhoneNumbers$outboundSchema;
  /** @deprecated use `ContactsAddPhoneNumbers$Outbound` instead. */
  export type Outbound = ContactsAddPhoneNumbers$Outbound;
}

export function contactsAddPhoneNumbersToJSON(
  contactsAddPhoneNumbers: ContactsAddPhoneNumbers,
): string {
  return JSON.stringify(
    ContactsAddPhoneNumbers$outboundSchema.parse(contactsAddPhoneNumbers),
  );
}

export function contactsAddPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ContactsAddContactsRequestRequestBodyEmailsType$inboundSchema:
  z.ZodNativeEnum<typeof ContactsAddContactsRequestRequestBodyEmailsType> = z
    .nativeEnum(ContactsAddContactsRequestRequestBodyEmailsType);

/** @internal */
export const ContactsAddContactsRequestRequestBodyEmailsType$outboundSchema:
  z.ZodNativeEnum<typeof ContactsAddContactsRequestRequestBodyEmailsType> =
    ContactsAddContactsRequestRequestBodyEmailsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsRequestRequestBodyEmailsType$ {
  /** @deprecated use `ContactsAddContactsRequestRequestBodyEmailsType$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAddContactsRequestRequestBodyEmailsType$inboundSchema;
  /** @deprecated use `ContactsAddContactsRequestRequestBodyEmailsType$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAddContactsRequestRequestBodyEmailsType$outboundSchema;
}

/** @internal */
export const ContactsAddEmails$inboundSchema: z.ZodType<
  ContactsAddEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    ContactsAddContactsRequestRequestBodyEmailsType$inboundSchema,
  ).optional(),
});

/** @internal */
export type ContactsAddEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsAddEmails$outboundSchema: z.ZodType<
  ContactsAddEmails$Outbound,
  z.ZodTypeDef,
  ContactsAddEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    ContactsAddContactsRequestRequestBodyEmailsType$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddEmails$ {
  /** @deprecated use `ContactsAddEmails$inboundSchema` instead. */
  export const inboundSchema = ContactsAddEmails$inboundSchema;
  /** @deprecated use `ContactsAddEmails$outboundSchema` instead. */
  export const outboundSchema = ContactsAddEmails$outboundSchema;
  /** @deprecated use `ContactsAddEmails$Outbound` instead. */
  export type Outbound = ContactsAddEmails$Outbound;
}

export function contactsAddEmailsToJSON(
  contactsAddEmails: ContactsAddEmails,
): string {
  return JSON.stringify(
    ContactsAddEmails$outboundSchema.parse(contactsAddEmails),
  );
}

export function contactsAddEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddEmails' from JSON`,
  );
}

/** @internal */
export const ContactsAddValue6$inboundSchema: z.ZodType<
  ContactsAddValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactsAddValue6$Outbound = {};

/** @internal */
export const ContactsAddValue6$outboundSchema: z.ZodType<
  ContactsAddValue6$Outbound,
  z.ZodTypeDef,
  ContactsAddValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddValue6$ {
  /** @deprecated use `ContactsAddValue6$inboundSchema` instead. */
  export const inboundSchema = ContactsAddValue6$inboundSchema;
  /** @deprecated use `ContactsAddValue6$outboundSchema` instead. */
  export const outboundSchema = ContactsAddValue6$outboundSchema;
  /** @deprecated use `ContactsAddValue6$Outbound` instead. */
  export type Outbound = ContactsAddValue6$Outbound;
}

export function contactsAddValue6ToJSON(
  contactsAddValue6: ContactsAddValue6,
): string {
  return JSON.stringify(
    ContactsAddValue6$outboundSchema.parse(contactsAddValue6),
  );
}

export function contactsAddValue6FromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddValue6' from JSON`,
  );
}

/** @internal */
export const ContactsAddValue4$inboundSchema: z.ZodType<
  ContactsAddValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactsAddValue4$Outbound = {};

/** @internal */
export const ContactsAddValue4$outboundSchema: z.ZodType<
  ContactsAddValue4$Outbound,
  z.ZodTypeDef,
  ContactsAddValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddValue4$ {
  /** @deprecated use `ContactsAddValue4$inboundSchema` instead. */
  export const inboundSchema = ContactsAddValue4$inboundSchema;
  /** @deprecated use `ContactsAddValue4$outboundSchema` instead. */
  export const outboundSchema = ContactsAddValue4$outboundSchema;
  /** @deprecated use `ContactsAddValue4$Outbound` instead. */
  export type Outbound = ContactsAddValue4$Outbound;
}

export function contactsAddValue4ToJSON(
  contactsAddValue4: ContactsAddValue4,
): string {
  return JSON.stringify(
    ContactsAddValue4$outboundSchema.parse(contactsAddValue4),
  );
}

export function contactsAddValue4FromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddValue4' from JSON`,
  );
}

/** @internal */
export const ContactsAddValue$inboundSchema: z.ZodType<
  ContactsAddValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContactsAddValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ContactsAddValue6$inboundSchema)),
]);

/** @internal */
export type ContactsAddValue$Outbound =
  | ContactsAddValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ContactsAddValue6$Outbound>;

/** @internal */
export const ContactsAddValue$outboundSchema: z.ZodType<
  ContactsAddValue$Outbound,
  z.ZodTypeDef,
  ContactsAddValue
> = z.union([
  z.lazy(() => ContactsAddValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ContactsAddValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddValue$ {
  /** @deprecated use `ContactsAddValue$inboundSchema` instead. */
  export const inboundSchema = ContactsAddValue$inboundSchema;
  /** @deprecated use `ContactsAddValue$outboundSchema` instead. */
  export const outboundSchema = ContactsAddValue$outboundSchema;
  /** @deprecated use `ContactsAddValue$Outbound` instead. */
  export type Outbound = ContactsAddValue$Outbound;
}

export function contactsAddValueToJSON(
  contactsAddValue: ContactsAddValue,
): string {
  return JSON.stringify(
    ContactsAddValue$outboundSchema.parse(contactsAddValue),
  );
}

export function contactsAddValueFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddValue' from JSON`,
  );
}

/** @internal */
export const ContactsAddCustomFields$inboundSchema: z.ZodType<
  ContactsAddCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ContactsAddValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ContactsAddValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ContactsAddCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ContactsAddValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ContactsAddValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ContactsAddCustomFields$outboundSchema: z.ZodType<
  ContactsAddCustomFields$Outbound,
  z.ZodTypeDef,
  ContactsAddCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ContactsAddValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ContactsAddValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddCustomFields$ {
  /** @deprecated use `ContactsAddCustomFields$inboundSchema` instead. */
  export const inboundSchema = ContactsAddCustomFields$inboundSchema;
  /** @deprecated use `ContactsAddCustomFields$outboundSchema` instead. */
  export const outboundSchema = ContactsAddCustomFields$outboundSchema;
  /** @deprecated use `ContactsAddCustomFields$Outbound` instead. */
  export type Outbound = ContactsAddCustomFields$Outbound;
}

export function contactsAddCustomFieldsToJSON(
  contactsAddCustomFields: ContactsAddCustomFields,
): string {
  return JSON.stringify(
    ContactsAddCustomFields$outboundSchema.parse(contactsAddCustomFields),
  );
}

export function contactsAddCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddCustomFields' from JSON`,
  );
}

/** @internal */
export const ContactsAddExtendPaths$inboundSchema: z.ZodType<
  ContactsAddExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ContactsAddExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ContactsAddExtendPaths$outboundSchema: z.ZodType<
  ContactsAddExtendPaths$Outbound,
  z.ZodTypeDef,
  ContactsAddExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddExtendPaths$ {
  /** @deprecated use `ContactsAddExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ContactsAddExtendPaths$inboundSchema;
  /** @deprecated use `ContactsAddExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ContactsAddExtendPaths$outboundSchema;
  /** @deprecated use `ContactsAddExtendPaths$Outbound` instead. */
  export type Outbound = ContactsAddExtendPaths$Outbound;
}

export function contactsAddExtendPathsToJSON(
  contactsAddExtendPaths: ContactsAddExtendPaths,
): string {
  return JSON.stringify(
    ContactsAddExtendPaths$outboundSchema.parse(contactsAddExtendPaths),
  );
}

export function contactsAddExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddExtendPaths' from JSON`,
  );
}

/** @internal */
export const ContactsAddPassThrough$inboundSchema: z.ZodType<
  ContactsAddPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ContactsAddExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ContactsAddPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ContactsAddExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ContactsAddPassThrough$outboundSchema: z.ZodType<
  ContactsAddPassThrough$Outbound,
  z.ZodTypeDef,
  ContactsAddPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ContactsAddExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddPassThrough$ {
  /** @deprecated use `ContactsAddPassThrough$inboundSchema` instead. */
  export const inboundSchema = ContactsAddPassThrough$inboundSchema;
  /** @deprecated use `ContactsAddPassThrough$outboundSchema` instead. */
  export const outboundSchema = ContactsAddPassThrough$outboundSchema;
  /** @deprecated use `ContactsAddPassThrough$Outbound` instead. */
  export type Outbound = ContactsAddPassThrough$Outbound;
}

export function contactsAddPassThroughToJSON(
  contactsAddPassThrough: ContactsAddPassThrough,
): string {
  return JSON.stringify(
    ContactsAddPassThrough$outboundSchema.parse(contactsAddPassThrough),
  );
}

export function contactsAddPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddPassThrough' from JSON`,
  );
}

/** @internal */
export const ContactsAddRequestBody$inboundSchema: z.ZodType<
  ContactsAddRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAddType$inboundSchema).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(Gender$inboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ContactsAddWebsites$inboundSchema)).optional(),
  addresses: z.array(z.lazy(() => ContactsAddAddresses$inboundSchema))
    .optional(),
  social_links: z.array(z.lazy(() => ContactsAddSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(z.lazy(() => ContactsAddPhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => ContactsAddEmails$inboundSchema)).optional(),
  email_domain: z.nullable(z.string()).optional(),
  custom_fields: z.array(z.lazy(() => ContactsAddCustomFields$inboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunity_ids: z.array(z.string()).optional(),
  pass_through: z.array(z.lazy(() => ContactsAddPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "company_id": "companyId",
    "company_name": "companyName",
    "lead_id": "leadId",
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "photo_url": "photoUrl",
    "lead_source": "leadSource",
    "current_balance": "currentBalance",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "email_domain": "emailDomain",
    "custom_fields": "customFields",
    "opportunity_ids": "opportunityIds",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ContactsAddRequestBody$Outbound = {
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<ContactsAddWebsites$Outbound> | undefined;
  addresses?: Array<ContactsAddAddresses$Outbound> | undefined;
  social_links?: Array<ContactsAddSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<ContactsAddPhoneNumbers$Outbound> | undefined;
  emails?: Array<ContactsAddEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<ContactsAddCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<ContactsAddPassThrough$Outbound> | undefined;
};

/** @internal */
export const ContactsAddRequestBody$outboundSchema: z.ZodType<
  ContactsAddRequestBody$Outbound,
  z.ZodTypeDef,
  ContactsAddRequestBody
> = z.object({
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAddType$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(Gender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ContactsAddWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ContactsAddAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(z.lazy(() => ContactsAddSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => ContactsAddPhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => ContactsAddEmails$outboundSchema)).optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(z.lazy(() => ContactsAddCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(z.lazy(() => ContactsAddPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddRequestBody$ {
  /** @deprecated use `ContactsAddRequestBody$inboundSchema` instead. */
  export const inboundSchema = ContactsAddRequestBody$inboundSchema;
  /** @deprecated use `ContactsAddRequestBody$outboundSchema` instead. */
  export const outboundSchema = ContactsAddRequestBody$outboundSchema;
  /** @deprecated use `ContactsAddRequestBody$Outbound` instead. */
  export type Outbound = ContactsAddRequestBody$Outbound;
}

export function contactsAddRequestBodyToJSON(
  contactsAddRequestBody: ContactsAddRequestBody,
): string {
  return JSON.stringify(
    ContactsAddRequestBody$outboundSchema.parse(contactsAddRequestBody),
  );
}

export function contactsAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddRequestBody' from JSON`,
  );
}

/** @internal */
export const ContactsAddRequest$inboundSchema: z.ZodType<
  ContactsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => ContactsAddRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ContactsAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  RequestBody: ContactsAddRequestBody$Outbound;
};

/** @internal */
export const ContactsAddRequest$outboundSchema: z.ZodType<
  ContactsAddRequest$Outbound,
  z.ZodTypeDef,
  ContactsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => ContactsAddRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddRequest$ {
  /** @deprecated use `ContactsAddRequest$inboundSchema` instead. */
  export const inboundSchema = ContactsAddRequest$inboundSchema;
  /** @deprecated use `ContactsAddRequest$outboundSchema` instead. */
  export const outboundSchema = ContactsAddRequest$outboundSchema;
  /** @deprecated use `ContactsAddRequest$Outbound` instead. */
  export type Outbound = ContactsAddRequest$Outbound;
}

export function contactsAddRequestToJSON(
  contactsAddRequest: ContactsAddRequest,
): string {
  return JSON.stringify(
    ContactsAddRequest$outboundSchema.parse(contactsAddRequest),
  );
}

export function contactsAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddRequest' from JSON`,
  );
}

/** @internal */
export const ContactsAddDetail$inboundSchema: z.ZodType<
  ContactsAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsAddDetail$outboundSchema: z.ZodType<
  ContactsAddDetail$Outbound,
  z.ZodTypeDef,
  ContactsAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddDetail$ {
  /** @deprecated use `ContactsAddDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsAddDetail$inboundSchema;
  /** @deprecated use `ContactsAddDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsAddDetail$outboundSchema;
  /** @deprecated use `ContactsAddDetail$Outbound` instead. */
  export type Outbound = ContactsAddDetail$Outbound;
}

export function contactsAddDetailToJSON(
  contactsAddDetail: ContactsAddDetail,
): string {
  return JSON.stringify(
    ContactsAddDetail$outboundSchema.parse(contactsAddDetail),
  );
}

export function contactsAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddDetail' from JSON`,
  );
}

/** @internal */
export const ContactsAddContactsResponseBody$inboundSchema: z.ZodType<
  ContactsAddContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type ContactsAddContactsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAddContactsResponseBody$outboundSchema: z.ZodType<
  ContactsAddContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsAddContactsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddContactsResponseBody$ {
  /** @deprecated use `ContactsAddContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsAddContactsResponseBody$inboundSchema;
  /** @deprecated use `ContactsAddContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsAddContactsResponseBody$outboundSchema;
  /** @deprecated use `ContactsAddContactsResponseBody$Outbound` instead. */
  export type Outbound = ContactsAddContactsResponseBody$Outbound;
}

export function contactsAddContactsResponseBodyToJSON(
  contactsAddContactsResponseBody: ContactsAddContactsResponseBody,
): string {
  return JSON.stringify(
    ContactsAddContactsResponseBody$outboundSchema.parse(
      contactsAddContactsResponseBody,
    ),
  );
}

export function contactsAddContactsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddContactsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddContactsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddContactsResponseBody' from JSON`,
  );
}

/** @internal */
export const ContactsAddUnifiedId$inboundSchema: z.ZodType<
  ContactsAddUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ContactsAddUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ContactsAddUnifiedId$outboundSchema: z.ZodType<
  ContactsAddUnifiedId$Outbound,
  z.ZodTypeDef,
  ContactsAddUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddUnifiedId$ {
  /** @deprecated use `ContactsAddUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ContactsAddUnifiedId$inboundSchema;
  /** @deprecated use `ContactsAddUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ContactsAddUnifiedId$outboundSchema;
  /** @deprecated use `ContactsAddUnifiedId$Outbound` instead. */
  export type Outbound = ContactsAddUnifiedId$Outbound;
}

export function contactsAddUnifiedIdToJSON(
  contactsAddUnifiedId: ContactsAddUnifiedId,
): string {
  return JSON.stringify(
    ContactsAddUnifiedId$outboundSchema.parse(contactsAddUnifiedId),
  );
}

export function contactsAddUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddUnifiedId' from JSON`,
  );
}

/** @internal */
export const ContactsAddResponseBody$inboundSchema: z.ZodType<
  ContactsAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactsAddUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ContactsAddResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ContactsAddUnifiedId$Outbound;
};

/** @internal */
export const ContactsAddResponseBody$outboundSchema: z.ZodType<
  ContactsAddResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsAddResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactsAddUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddResponseBody$ {
  /** @deprecated use `ContactsAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsAddResponseBody$inboundSchema;
  /** @deprecated use `ContactsAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsAddResponseBody$outboundSchema;
  /** @deprecated use `ContactsAddResponseBody$Outbound` instead. */
  export type Outbound = ContactsAddResponseBody$Outbound;
}

export function contactsAddResponseBodyToJSON(
  contactsAddResponseBody: ContactsAddResponseBody,
): string {
  return JSON.stringify(
    ContactsAddResponseBody$outboundSchema.parse(contactsAddResponseBody),
  );
}

export function contactsAddResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddResponseBody' from JSON`,
  );
}

/** @internal */
export const ContactsAddResponse$inboundSchema: z.ZodType<
  ContactsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContactsAddResponseBody$inboundSchema),
  z.lazy(() => ContactsAddContactsResponseBody$inboundSchema),
]);

/** @internal */
export type ContactsAddResponse$Outbound =
  | ContactsAddResponseBody$Outbound
  | ContactsAddContactsResponseBody$Outbound;

/** @internal */
export const ContactsAddResponse$outboundSchema: z.ZodType<
  ContactsAddResponse$Outbound,
  z.ZodTypeDef,
  ContactsAddResponse
> = z.union([
  z.lazy(() => ContactsAddResponseBody$outboundSchema),
  z.lazy(() => ContactsAddContactsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAddResponse$ {
  /** @deprecated use `ContactsAddResponse$inboundSchema` instead. */
  export const inboundSchema = ContactsAddResponse$inboundSchema;
  /** @deprecated use `ContactsAddResponse$outboundSchema` instead. */
  export const outboundSchema = ContactsAddResponse$outboundSchema;
  /** @deprecated use `ContactsAddResponse$Outbound` instead. */
  export type Outbound = ContactsAddResponse$Outbound;
}

export function contactsAddResponseToJSON(
  contactsAddResponse: ContactsAddResponse,
): string {
  return JSON.stringify(
    ContactsAddResponse$outboundSchema.parse(contactsAddResponse),
  );
}

export function contactsAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAddResponse' from JSON`,
  );
}
