/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivitiesUpdateSecurity = {
  apiKey: string;
};

/**
 * The type of the activity
 */
export const ActivitiesUpdateType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * The type of the activity
 */
export type ActivitiesUpdateType = ClosedEnum<typeof ActivitiesUpdateType>;

/**
 * The type of address.
 */
export const ActivitiesUpdateActivitiesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type ActivitiesUpdateActivitiesType = ClosedEnum<
  typeof ActivitiesUpdateActivitiesType
>;

export type ActivitiesUpdateLocationAddress = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: ActivitiesUpdateActivitiesType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export const ActivitiesUpdateShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
export type ActivitiesUpdateShowAs = ClosedEnum<typeof ActivitiesUpdateShowAs>;

export type ActivitiesUpdateValue6 = {};

export type ActivitiesUpdateValue4 = {};

export type ActivitiesUpdateValue =
  | ActivitiesUpdateValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivitiesUpdateValue6>;

export type ActivitiesUpdateCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | ActivitiesUpdateValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivitiesUpdateValue6>
    | null
    | undefined;
};

/**
 * Status of the attendee
 */
export const ActivitiesUpdateStatus = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * Status of the attendee
 */
export type ActivitiesUpdateStatus = ClosedEnum<typeof ActivitiesUpdateStatus>;

export type ActivitiesUpdateAttendees = {
  /**
   * Full name of the attendee
   */
  name?: string | null | undefined;
  /**
   * First name of the attendee
   */
  firstName?: string | null | undefined;
  /**
   * Middle name of the attendee
   */
  middleName?: string | null | undefined;
  /**
   * Last name of the attendee
   */
  lastName?: string | null | undefined;
  /**
   * Prefix of the attendee
   */
  prefix?: string | null | undefined;
  /**
   * Suffix of the attendee
   */
  suffix?: string | null | undefined;
  /**
   * Email address of the attendee
   */
  emailAddress?: string | null | undefined;
  /**
   * Whether the attendee is the organizer of the activity
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * Status of the attendee
   */
  status?: ActivitiesUpdateStatus | null | undefined;
};

export type ActivitiesUpdateExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type ActivitiesUpdatePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<ActivitiesUpdateExtendPaths> | undefined;
};

export type ActivitiesUpdateRequestBody = {
  /**
   * The date and time of the activity
   */
  activityDatetime?: string | null | undefined;
  /**
   * The duration of the activity in seconds
   */
  durationSeconds?: number | null | undefined;
  /**
   * The user related to the activity
   */
  userId?: string | null | undefined;
  /**
   * The account related to the activity
   */
  accountId?: string | null | undefined;
  /**
   * The contact related to the activity
   */
  contactId?: string | null | undefined;
  /**
   * The company related to the activity
   */
  companyId?: string | null | undefined;
  /**
   * The opportunity related to the activity
   */
  opportunityId?: string | null | undefined;
  /**
   * The lead related to the activity
   */
  leadId?: string | null | undefined;
  /**
   * The owner of the activity
   */
  ownerId?: string | null | undefined;
  /**
   * The campaign related to the activity
   */
  campaignId?: string | null | undefined;
  /**
   * The case related to the activity
   */
  caseId?: string | null | undefined;
  /**
   * The asset related to the activity
   */
  assetId?: string | null | undefined;
  /**
   * The contract related to the activity
   */
  contractId?: string | null | undefined;
  /**
   * The product related to the activity
   */
  productId?: string | null | undefined;
  /**
   * The solution related to the activity
   */
  solutionId?: string | null | undefined;
  /**
   * The custom object related to the activity
   */
  customObjectId?: string | null | undefined;
  /**
   * The type of the activity
   */
  type: ActivitiesUpdateType | null;
  /**
   * The title of the activity
   */
  title?: string | null | undefined;
  /**
   * A description of the activity
   */
  description?: string | null | undefined;
  /**
   * An internal note about the activity
   */
  note?: string | null | undefined;
  /**
   * The location of the activity
   */
  location?: string | null | undefined;
  locationAddress?: ActivitiesUpdateLocationAddress | undefined;
  /**
   * Whether the Activity is an all day event or not
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Whether the Activity is private or not
   */
  private?: boolean | null | undefined;
  /**
   * Whether the Activity is a group event or not
   */
  groupEvent?: boolean | null | undefined;
  /**
   * The sub type of the group event
   */
  eventSubType?: string | null | undefined;
  /**
   * The type of the group event
   */
  groupEventType?: string | null | undefined;
  /**
   * Whether the activity is a child of another activity or not
   */
  child?: boolean | null | undefined;
  /**
   * Whether the activity is archived or not
   */
  archived?: boolean | null | undefined;
  /**
   * Whether the activity is deleted or not
   */
  deleted?: boolean | null | undefined;
  showAs?: ActivitiesUpdateShowAs | null | undefined;
  /**
   * Whether the Activity is done or not
   */
  done?: boolean | null | undefined;
  /**
   * The start date and time of the activity
   */
  startDatetime?: string | null | undefined;
  /**
   * The end date and time of the activity
   */
  endDatetime?: string | null | undefined;
  /**
   * The date of the activity
   */
  activityDate?: string | null | undefined;
  /**
   * The end date of the activity
   */
  endDate?: string | null | undefined;
  /**
   * Whether the activity is recurrent or not
   */
  recurrent?: boolean | undefined;
  /**
   * The date and time of the reminder
   */
  reminderDatetime?: string | null | undefined;
  /**
   * Whether the reminder is set or not
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The URL of the video conference
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * The ID of the video conference
   */
  videoConferenceId?: string | null | undefined;
  /**
   * Custom fields of the activity
   */
  customFields?: Array<ActivitiesUpdateCustomFields> | undefined;
  attendees?: Array<ActivitiesUpdateAttendees> | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<ActivitiesUpdatePassThrough> | undefined;
};

export type ActivitiesUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  requestBody: ActivitiesUpdateRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesUpdateDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type ActivitiesUpdateActivitiesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type ActivitiesUpdateUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Activity updated
 */
export type ActivitiesUpdateResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: ActivitiesUpdateUnifiedId;
};

export type ActivitiesUpdateResponse =
  | ActivitiesUpdateResponseBody
  | ActivitiesUpdateActivitiesResponseBody;

/** @internal */
export const ActivitiesUpdateSecurity$inboundSchema: z.ZodType<
  ActivitiesUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ActivitiesUpdateSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ActivitiesUpdateSecurity$outboundSchema: z.ZodType<
  ActivitiesUpdateSecurity$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateSecurity$ {
  /** @deprecated use `ActivitiesUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateSecurity$inboundSchema;
  /** @deprecated use `ActivitiesUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateSecurity$outboundSchema;
  /** @deprecated use `ActivitiesUpdateSecurity$Outbound` instead. */
  export type Outbound = ActivitiesUpdateSecurity$Outbound;
}

export function activitiesUpdateSecurityToJSON(
  activitiesUpdateSecurity: ActivitiesUpdateSecurity,
): string {
  return JSON.stringify(
    ActivitiesUpdateSecurity$outboundSchema.parse(activitiesUpdateSecurity),
  );
}

export function activitiesUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateType$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesUpdateType
> = z.nativeEnum(ActivitiesUpdateType);

/** @internal */
export const ActivitiesUpdateType$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesUpdateType
> = ActivitiesUpdateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateType$ {
  /** @deprecated use `ActivitiesUpdateType$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateType$inboundSchema;
  /** @deprecated use `ActivitiesUpdateType$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateType$outboundSchema;
}

/** @internal */
export const ActivitiesUpdateActivitiesType$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesUpdateActivitiesType
> = z.nativeEnum(ActivitiesUpdateActivitiesType);

/** @internal */
export const ActivitiesUpdateActivitiesType$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesUpdateActivitiesType
> = ActivitiesUpdateActivitiesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateActivitiesType$ {
  /** @deprecated use `ActivitiesUpdateActivitiesType$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateActivitiesType$inboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesType$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateActivitiesType$outboundSchema;
}

/** @internal */
export const ActivitiesUpdateLocationAddress$inboundSchema: z.ZodType<
  ActivitiesUpdateLocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesUpdateActivitiesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ActivitiesUpdateLocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ActivitiesUpdateLocationAddress$outboundSchema: z.ZodType<
  ActivitiesUpdateLocationAddress$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateLocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesUpdateActivitiesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateLocationAddress$ {
  /** @deprecated use `ActivitiesUpdateLocationAddress$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateLocationAddress$inboundSchema;
  /** @deprecated use `ActivitiesUpdateLocationAddress$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateLocationAddress$outboundSchema;
  /** @deprecated use `ActivitiesUpdateLocationAddress$Outbound` instead. */
  export type Outbound = ActivitiesUpdateLocationAddress$Outbound;
}

export function activitiesUpdateLocationAddressToJSON(
  activitiesUpdateLocationAddress: ActivitiesUpdateLocationAddress,
): string {
  return JSON.stringify(
    ActivitiesUpdateLocationAddress$outboundSchema.parse(
      activitiesUpdateLocationAddress,
    ),
  );
}

export function activitiesUpdateLocationAddressFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateLocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateLocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateLocationAddress' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateShowAs$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesUpdateShowAs
> = z.nativeEnum(ActivitiesUpdateShowAs);

/** @internal */
export const ActivitiesUpdateShowAs$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesUpdateShowAs
> = ActivitiesUpdateShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateShowAs$ {
  /** @deprecated use `ActivitiesUpdateShowAs$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateShowAs$inboundSchema;
  /** @deprecated use `ActivitiesUpdateShowAs$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateShowAs$outboundSchema;
}

/** @internal */
export const ActivitiesUpdateValue6$inboundSchema: z.ZodType<
  ActivitiesUpdateValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivitiesUpdateValue6$Outbound = {};

/** @internal */
export const ActivitiesUpdateValue6$outboundSchema: z.ZodType<
  ActivitiesUpdateValue6$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateValue6$ {
  /** @deprecated use `ActivitiesUpdateValue6$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateValue6$inboundSchema;
  /** @deprecated use `ActivitiesUpdateValue6$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateValue6$outboundSchema;
  /** @deprecated use `ActivitiesUpdateValue6$Outbound` instead. */
  export type Outbound = ActivitiesUpdateValue6$Outbound;
}

export function activitiesUpdateValue6ToJSON(
  activitiesUpdateValue6: ActivitiesUpdateValue6,
): string {
  return JSON.stringify(
    ActivitiesUpdateValue6$outboundSchema.parse(activitiesUpdateValue6),
  );
}

export function activitiesUpdateValue6FromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateValue6' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateValue4$inboundSchema: z.ZodType<
  ActivitiesUpdateValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivitiesUpdateValue4$Outbound = {};

/** @internal */
export const ActivitiesUpdateValue4$outboundSchema: z.ZodType<
  ActivitiesUpdateValue4$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateValue4$ {
  /** @deprecated use `ActivitiesUpdateValue4$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateValue4$inboundSchema;
  /** @deprecated use `ActivitiesUpdateValue4$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateValue4$outboundSchema;
  /** @deprecated use `ActivitiesUpdateValue4$Outbound` instead. */
  export type Outbound = ActivitiesUpdateValue4$Outbound;
}

export function activitiesUpdateValue4ToJSON(
  activitiesUpdateValue4: ActivitiesUpdateValue4,
): string {
  return JSON.stringify(
    ActivitiesUpdateValue4$outboundSchema.parse(activitiesUpdateValue4),
  );
}

export function activitiesUpdateValue4FromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateValue4' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateValue$inboundSchema: z.ZodType<
  ActivitiesUpdateValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivitiesUpdateValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivitiesUpdateValue6$inboundSchema)),
]);

/** @internal */
export type ActivitiesUpdateValue$Outbound =
  | ActivitiesUpdateValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivitiesUpdateValue6$Outbound>;

/** @internal */
export const ActivitiesUpdateValue$outboundSchema: z.ZodType<
  ActivitiesUpdateValue$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateValue
> = z.union([
  z.lazy(() => ActivitiesUpdateValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivitiesUpdateValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateValue$ {
  /** @deprecated use `ActivitiesUpdateValue$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateValue$inboundSchema;
  /** @deprecated use `ActivitiesUpdateValue$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateValue$outboundSchema;
  /** @deprecated use `ActivitiesUpdateValue$Outbound` instead. */
  export type Outbound = ActivitiesUpdateValue$Outbound;
}

export function activitiesUpdateValueToJSON(
  activitiesUpdateValue: ActivitiesUpdateValue,
): string {
  return JSON.stringify(
    ActivitiesUpdateValue$outboundSchema.parse(activitiesUpdateValue),
  );
}

export function activitiesUpdateValueFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateValue' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateCustomFields$inboundSchema: z.ZodType<
  ActivitiesUpdateCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivitiesUpdateValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivitiesUpdateValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ActivitiesUpdateCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ActivitiesUpdateValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivitiesUpdateValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ActivitiesUpdateCustomFields$outboundSchema: z.ZodType<
  ActivitiesUpdateCustomFields$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivitiesUpdateValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivitiesUpdateValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateCustomFields$ {
  /** @deprecated use `ActivitiesUpdateCustomFields$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateCustomFields$inboundSchema;
  /** @deprecated use `ActivitiesUpdateCustomFields$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateCustomFields$outboundSchema;
  /** @deprecated use `ActivitiesUpdateCustomFields$Outbound` instead. */
  export type Outbound = ActivitiesUpdateCustomFields$Outbound;
}

export function activitiesUpdateCustomFieldsToJSON(
  activitiesUpdateCustomFields: ActivitiesUpdateCustomFields,
): string {
  return JSON.stringify(
    ActivitiesUpdateCustomFields$outboundSchema.parse(
      activitiesUpdateCustomFields,
    ),
  );
}

export function activitiesUpdateCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateCustomFields' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateStatus$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesUpdateStatus
> = z.nativeEnum(ActivitiesUpdateStatus);

/** @internal */
export const ActivitiesUpdateStatus$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesUpdateStatus
> = ActivitiesUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateStatus$ {
  /** @deprecated use `ActivitiesUpdateStatus$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateStatus$inboundSchema;
  /** @deprecated use `ActivitiesUpdateStatus$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateStatus$outboundSchema;
}

/** @internal */
export const ActivitiesUpdateAttendees$inboundSchema: z.ZodType<
  ActivitiesUpdateAttendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ActivitiesUpdateStatus$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
  });
});

/** @internal */
export type ActivitiesUpdateAttendees$Outbound = {
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const ActivitiesUpdateAttendees$outboundSchema: z.ZodType<
  ActivitiesUpdateAttendees$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateAttendees
> = z.object({
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(ActivitiesUpdateStatus$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateAttendees$ {
  /** @deprecated use `ActivitiesUpdateAttendees$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateAttendees$inboundSchema;
  /** @deprecated use `ActivitiesUpdateAttendees$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateAttendees$outboundSchema;
  /** @deprecated use `ActivitiesUpdateAttendees$Outbound` instead. */
  export type Outbound = ActivitiesUpdateAttendees$Outbound;
}

export function activitiesUpdateAttendeesToJSON(
  activitiesUpdateAttendees: ActivitiesUpdateAttendees,
): string {
  return JSON.stringify(
    ActivitiesUpdateAttendees$outboundSchema.parse(activitiesUpdateAttendees),
  );
}

export function activitiesUpdateAttendeesFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateAttendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateAttendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateAttendees' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateExtendPaths$inboundSchema: z.ZodType<
  ActivitiesUpdateExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ActivitiesUpdateExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ActivitiesUpdateExtendPaths$outboundSchema: z.ZodType<
  ActivitiesUpdateExtendPaths$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateExtendPaths$ {
  /** @deprecated use `ActivitiesUpdateExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateExtendPaths$inboundSchema;
  /** @deprecated use `ActivitiesUpdateExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateExtendPaths$outboundSchema;
  /** @deprecated use `ActivitiesUpdateExtendPaths$Outbound` instead. */
  export type Outbound = ActivitiesUpdateExtendPaths$Outbound;
}

export function activitiesUpdateExtendPathsToJSON(
  activitiesUpdateExtendPaths: ActivitiesUpdateExtendPaths,
): string {
  return JSON.stringify(
    ActivitiesUpdateExtendPaths$outboundSchema.parse(
      activitiesUpdateExtendPaths,
    ),
  );
}

export function activitiesUpdateExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateExtendPaths' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdatePassThrough$inboundSchema: z.ZodType<
  ActivitiesUpdatePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ActivitiesUpdateExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ActivitiesUpdatePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ActivitiesUpdateExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ActivitiesUpdatePassThrough$outboundSchema: z.ZodType<
  ActivitiesUpdatePassThrough$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdatePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ActivitiesUpdateExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdatePassThrough$ {
  /** @deprecated use `ActivitiesUpdatePassThrough$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdatePassThrough$inboundSchema;
  /** @deprecated use `ActivitiesUpdatePassThrough$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdatePassThrough$outboundSchema;
  /** @deprecated use `ActivitiesUpdatePassThrough$Outbound` instead. */
  export type Outbound = ActivitiesUpdatePassThrough$Outbound;
}

export function activitiesUpdatePassThroughToJSON(
  activitiesUpdatePassThrough: ActivitiesUpdatePassThrough,
): string {
  return JSON.stringify(
    ActivitiesUpdatePassThrough$outboundSchema.parse(
      activitiesUpdatePassThrough,
    ),
  );
}

export function activitiesUpdatePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdatePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdatePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdatePassThrough' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateRequestBody$inboundSchema: z.ZodType<
  ActivitiesUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesUpdateType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() => ActivitiesUpdateLocationAddress$inboundSchema)
    .optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(ActivitiesUpdateShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(
    z.lazy(() => ActivitiesUpdateCustomFields$inboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => ActivitiesUpdateAttendees$inboundSchema))
    .optional(),
  pass_through: z.array(z.lazy(() => ActivitiesUpdatePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ActivitiesUpdateRequestBody$Outbound = {
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: ActivitiesUpdateLocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<ActivitiesUpdateCustomFields$Outbound> | undefined;
  attendees?: Array<ActivitiesUpdateAttendees$Outbound> | undefined;
  pass_through?: Array<ActivitiesUpdatePassThrough$Outbound> | undefined;
};

/** @internal */
export const ActivitiesUpdateRequestBody$outboundSchema: z.ZodType<
  ActivitiesUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateRequestBody
> = z.object({
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesUpdateType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() => ActivitiesUpdateLocationAddress$outboundSchema)
    .optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(ActivitiesUpdateShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(
    z.lazy(() => ActivitiesUpdateCustomFields$outboundSchema),
  ).optional(),
  attendees: z.array(z.lazy(() => ActivitiesUpdateAttendees$outboundSchema))
    .optional(),
  passThrough: z.array(z.lazy(() => ActivitiesUpdatePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateRequestBody$ {
  /** @deprecated use `ActivitiesUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateRequestBody$inboundSchema;
  /** @deprecated use `ActivitiesUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateRequestBody$outboundSchema;
  /** @deprecated use `ActivitiesUpdateRequestBody$Outbound` instead. */
  export type Outbound = ActivitiesUpdateRequestBody$Outbound;
}

export function activitiesUpdateRequestBodyToJSON(
  activitiesUpdateRequestBody: ActivitiesUpdateRequestBody,
): string {
  return JSON.stringify(
    ActivitiesUpdateRequestBody$outboundSchema.parse(
      activitiesUpdateRequestBody,
    ),
  );
}

export function activitiesUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateRequest$inboundSchema: z.ZodType<
  ActivitiesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  RequestBody: z.lazy(() => ActivitiesUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ActivitiesUpdateRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  RequestBody: ActivitiesUpdateRequestBody$Outbound;
};

/** @internal */
export const ActivitiesUpdateRequest$outboundSchema: z.ZodType<
  ActivitiesUpdateRequest$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  requestBody: z.lazy(() => ActivitiesUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateRequest$ {
  /** @deprecated use `ActivitiesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateRequest$inboundSchema;
  /** @deprecated use `ActivitiesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateRequest$outboundSchema;
  /** @deprecated use `ActivitiesUpdateRequest$Outbound` instead. */
  export type Outbound = ActivitiesUpdateRequest$Outbound;
}

export function activitiesUpdateRequestToJSON(
  activitiesUpdateRequest: ActivitiesUpdateRequest,
): string {
  return JSON.stringify(
    ActivitiesUpdateRequest$outboundSchema.parse(activitiesUpdateRequest),
  );
}

export function activitiesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateRequest' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateDetail$inboundSchema: z.ZodType<
  ActivitiesUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesUpdateDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ActivitiesUpdateDetail$outboundSchema: z.ZodType<
  ActivitiesUpdateDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateDetail$ {
  /** @deprecated use `ActivitiesUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateDetail$inboundSchema;
  /** @deprecated use `ActivitiesUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateDetail$outboundSchema;
  /** @deprecated use `ActivitiesUpdateDetail$Outbound` instead. */
  export type Outbound = ActivitiesUpdateDetail$Outbound;
}

export function activitiesUpdateDetailToJSON(
  activitiesUpdateDetail: ActivitiesUpdateDetail,
): string {
  return JSON.stringify(
    ActivitiesUpdateDetail$outboundSchema.parse(activitiesUpdateDetail),
  );
}

export function activitiesUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateActivitiesResponseBody$inboundSchema: z.ZodType<
  ActivitiesUpdateActivitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type ActivitiesUpdateActivitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesUpdateActivitiesResponseBody$outboundSchema: z.ZodType<
  ActivitiesUpdateActivitiesResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateActivitiesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateActivitiesResponseBody$ {
  /** @deprecated use `ActivitiesUpdateActivitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesUpdateActivitiesResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesUpdateActivitiesResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesUpdateActivitiesResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesUpdateActivitiesResponseBody$Outbound;
}

export function activitiesUpdateActivitiesResponseBodyToJSON(
  activitiesUpdateActivitiesResponseBody:
    ActivitiesUpdateActivitiesResponseBody,
): string {
  return JSON.stringify(
    ActivitiesUpdateActivitiesResponseBody$outboundSchema.parse(
      activitiesUpdateActivitiesResponseBody,
    ),
  );
}

export function activitiesUpdateActivitiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateActivitiesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesUpdateActivitiesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateActivitiesResponseBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateUnifiedId$inboundSchema: z.ZodType<
  ActivitiesUpdateUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ActivitiesUpdateUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ActivitiesUpdateUnifiedId$outboundSchema: z.ZodType<
  ActivitiesUpdateUnifiedId$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateUnifiedId$ {
  /** @deprecated use `ActivitiesUpdateUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateUnifiedId$inboundSchema;
  /** @deprecated use `ActivitiesUpdateUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateUnifiedId$outboundSchema;
  /** @deprecated use `ActivitiesUpdateUnifiedId$Outbound` instead. */
  export type Outbound = ActivitiesUpdateUnifiedId$Outbound;
}

export function activitiesUpdateUnifiedIdToJSON(
  activitiesUpdateUnifiedId: ActivitiesUpdateUnifiedId,
): string {
  return JSON.stringify(
    ActivitiesUpdateUnifiedId$outboundSchema.parse(activitiesUpdateUnifiedId),
  );
}

export function activitiesUpdateUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateUnifiedId' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateResponseBody$inboundSchema: z.ZodType<
  ActivitiesUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivitiesUpdateUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ActivitiesUpdateResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ActivitiesUpdateUnifiedId$Outbound;
};

/** @internal */
export const ActivitiesUpdateResponseBody$outboundSchema: z.ZodType<
  ActivitiesUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivitiesUpdateUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateResponseBody$ {
  /** @deprecated use `ActivitiesUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesUpdateResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesUpdateResponseBody$Outbound;
}

export function activitiesUpdateResponseBodyToJSON(
  activitiesUpdateResponseBody: ActivitiesUpdateResponseBody,
): string {
  return JSON.stringify(
    ActivitiesUpdateResponseBody$outboundSchema.parse(
      activitiesUpdateResponseBody,
    ),
  );
}

export function activitiesUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesUpdateResponse$inboundSchema: z.ZodType<
  ActivitiesUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivitiesUpdateResponseBody$inboundSchema),
  z.lazy(() => ActivitiesUpdateActivitiesResponseBody$inboundSchema),
]);

/** @internal */
export type ActivitiesUpdateResponse$Outbound =
  | ActivitiesUpdateResponseBody$Outbound
  | ActivitiesUpdateActivitiesResponseBody$Outbound;

/** @internal */
export const ActivitiesUpdateResponse$outboundSchema: z.ZodType<
  ActivitiesUpdateResponse$Outbound,
  z.ZodTypeDef,
  ActivitiesUpdateResponse
> = z.union([
  z.lazy(() => ActivitiesUpdateResponseBody$outboundSchema),
  z.lazy(() => ActivitiesUpdateActivitiesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesUpdateResponse$ {
  /** @deprecated use `ActivitiesUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = ActivitiesUpdateResponse$inboundSchema;
  /** @deprecated use `ActivitiesUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = ActivitiesUpdateResponse$outboundSchema;
  /** @deprecated use `ActivitiesUpdateResponse$Outbound` instead. */
  export type Outbound = ActivitiesUpdateResponse$Outbound;
}

export function activitiesUpdateResponseToJSON(
  activitiesUpdateResponse: ActivitiesUpdateResponse,
): string {
  return JSON.stringify(
    ActivitiesUpdateResponse$outboundSchema.parse(activitiesUpdateResponse),
  );
}

export function activitiesUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesUpdateResponse' from JSON`,
  );
}
