/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsersOneSecurity = {
  apiKey: string;
};

export type UsersOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type UsersOneResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The type of address.
 */
export const UsersOneType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type UsersOneType = ClosedEnum<typeof UsersOneType>;

export type UsersOneAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: UsersOneType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const UsersOneUsersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type UsersOneUsersType = ClosedEnum<typeof UsersOneUsersType>;

export type UsersOnePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: UsersOneUsersType | null | undefined;
};

/**
 * Email type
 */
export const UsersOneUsersResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type UsersOneUsersResponseType = ClosedEnum<
  typeof UsersOneUsersResponseType
>;

export type UsersOneEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: UsersOneUsersResponseType | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type UsersOneCustomMappings = {};

export type UsersOneExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type UsersOnePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<UsersOneExtendPaths> | undefined;
};

export type UsersOneData = {
  /**
   * The unique identifier for the user
   */
  id?: string | undefined;
  /**
   * The parent user id
   */
  parentId?: string | null | undefined;
  /**
   * The username of the user
   */
  username?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  division?: string | null | undefined;
  /**
   * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * The name of the company.
   */
  companyName?: string | null | undefined;
  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  employeeNumber?: string | null | undefined;
  /**
   * A description of the object.
   */
  description?: string | null | undefined;
  /**
   * The URL of the user's avatar
   */
  image?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  /**
   * The status of the user
   */
  status?: string | null | undefined;
  addresses?: Array<UsersOneAddresses> | undefined;
  phoneNumbers?: Array<UsersOnePhoneNumbers> | undefined;
  emails: Array<UsersOneEmails>;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: UsersOneCustomMappings | null | undefined;
  /**
   * The date and time when the user was last updated.
   */
  updatedAt?: string | null | undefined;
  /**
   * The date and time when the user was created.
   */
  createdAt?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<UsersOnePassThrough> | undefined;
};

/**
 * User
 */
export type UsersOneResponseBodyOutput = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: UsersOneData;
};

export type UsersOneResponse =
  | UsersOneResponseBodyOutput
  | UsersOneResponseBody;

/** @internal */
export const UsersOneSecurity$inboundSchema: z.ZodType<
  UsersOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type UsersOneSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const UsersOneSecurity$outboundSchema: z.ZodType<
  UsersOneSecurity$Outbound,
  z.ZodTypeDef,
  UsersOneSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneSecurity$ {
  /** @deprecated use `UsersOneSecurity$inboundSchema` instead. */
  export const inboundSchema = UsersOneSecurity$inboundSchema;
  /** @deprecated use `UsersOneSecurity$outboundSchema` instead. */
  export const outboundSchema = UsersOneSecurity$outboundSchema;
  /** @deprecated use `UsersOneSecurity$Outbound` instead. */
  export type Outbound = UsersOneSecurity$Outbound;
}

export function usersOneSecurityToJSON(
  usersOneSecurity: UsersOneSecurity,
): string {
  return JSON.stringify(
    UsersOneSecurity$outboundSchema.parse(usersOneSecurity),
  );
}

export function usersOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneSecurity' from JSON`,
  );
}

/** @internal */
export const UsersOneRequest$inboundSchema: z.ZodType<
  UsersOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type UsersOneRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const UsersOneRequest$outboundSchema: z.ZodType<
  UsersOneRequest$Outbound,
  z.ZodTypeDef,
  UsersOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneRequest$ {
  /** @deprecated use `UsersOneRequest$inboundSchema` instead. */
  export const inboundSchema = UsersOneRequest$inboundSchema;
  /** @deprecated use `UsersOneRequest$outboundSchema` instead. */
  export const outboundSchema = UsersOneRequest$outboundSchema;
  /** @deprecated use `UsersOneRequest$Outbound` instead. */
  export type Outbound = UsersOneRequest$Outbound;
}

export function usersOneRequestToJSON(
  usersOneRequest: UsersOneRequest,
): string {
  return JSON.stringify(UsersOneRequest$outboundSchema.parse(usersOneRequest));
}

export function usersOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneRequest' from JSON`,
  );
}

/** @internal */
export const UsersOneDetail$inboundSchema: z.ZodType<
  UsersOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersOneDetail$outboundSchema: z.ZodType<
  UsersOneDetail$Outbound,
  z.ZodTypeDef,
  UsersOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneDetail$ {
  /** @deprecated use `UsersOneDetail$inboundSchema` instead. */
  export const inboundSchema = UsersOneDetail$inboundSchema;
  /** @deprecated use `UsersOneDetail$outboundSchema` instead. */
  export const outboundSchema = UsersOneDetail$outboundSchema;
  /** @deprecated use `UsersOneDetail$Outbound` instead. */
  export type Outbound = UsersOneDetail$Outbound;
}

export function usersOneDetailToJSON(usersOneDetail: UsersOneDetail): string {
  return JSON.stringify(UsersOneDetail$outboundSchema.parse(usersOneDetail));
}

export function usersOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneDetail' from JSON`,
  );
}

/** @internal */
export const UsersOneResponseBody$inboundSchema: z.ZodType<
  UsersOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type UsersOneResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersOneResponseBody$outboundSchema: z.ZodType<
  UsersOneResponseBody$Outbound,
  z.ZodTypeDef,
  UsersOneResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneResponseBody$ {
  /** @deprecated use `UsersOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersOneResponseBody$inboundSchema;
  /** @deprecated use `UsersOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersOneResponseBody$outboundSchema;
  /** @deprecated use `UsersOneResponseBody$Outbound` instead. */
  export type Outbound = UsersOneResponseBody$Outbound;
}

export function usersOneResponseBodyToJSON(
  usersOneResponseBody: UsersOneResponseBody,
): string {
  return JSON.stringify(
    UsersOneResponseBody$outboundSchema.parse(usersOneResponseBody),
  );
}

export function usersOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneResponseBody' from JSON`,
  );
}

/** @internal */
export const UsersOneType$inboundSchema: z.ZodNativeEnum<typeof UsersOneType> =
  z.nativeEnum(UsersOneType);

/** @internal */
export const UsersOneType$outboundSchema: z.ZodNativeEnum<typeof UsersOneType> =
  UsersOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneType$ {
  /** @deprecated use `UsersOneType$inboundSchema` instead. */
  export const inboundSchema = UsersOneType$inboundSchema;
  /** @deprecated use `UsersOneType$outboundSchema` instead. */
  export const outboundSchema = UsersOneType$outboundSchema;
}

/** @internal */
export const UsersOneAddresses$inboundSchema: z.ZodType<
  UsersOneAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UsersOneType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UsersOneAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UsersOneAddresses$outboundSchema: z.ZodType<
  UsersOneAddresses$Outbound,
  z.ZodTypeDef,
  UsersOneAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UsersOneType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneAddresses$ {
  /** @deprecated use `UsersOneAddresses$inboundSchema` instead. */
  export const inboundSchema = UsersOneAddresses$inboundSchema;
  /** @deprecated use `UsersOneAddresses$outboundSchema` instead. */
  export const outboundSchema = UsersOneAddresses$outboundSchema;
  /** @deprecated use `UsersOneAddresses$Outbound` instead. */
  export type Outbound = UsersOneAddresses$Outbound;
}

export function usersOneAddressesToJSON(
  usersOneAddresses: UsersOneAddresses,
): string {
  return JSON.stringify(
    UsersOneAddresses$outboundSchema.parse(usersOneAddresses),
  );
}

export function usersOneAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneAddresses' from JSON`,
  );
}

/** @internal */
export const UsersOneUsersType$inboundSchema: z.ZodNativeEnum<
  typeof UsersOneUsersType
> = z.nativeEnum(UsersOneUsersType);

/** @internal */
export const UsersOneUsersType$outboundSchema: z.ZodNativeEnum<
  typeof UsersOneUsersType
> = UsersOneUsersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneUsersType$ {
  /** @deprecated use `UsersOneUsersType$inboundSchema` instead. */
  export const inboundSchema = UsersOneUsersType$inboundSchema;
  /** @deprecated use `UsersOneUsersType$outboundSchema` instead. */
  export const outboundSchema = UsersOneUsersType$outboundSchema;
}

/** @internal */
export const UsersOnePhoneNumbers$inboundSchema: z.ZodType<
  UsersOnePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UsersOneUsersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UsersOnePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UsersOnePhoneNumbers$outboundSchema: z.ZodType<
  UsersOnePhoneNumbers$Outbound,
  z.ZodTypeDef,
  UsersOnePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UsersOneUsersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOnePhoneNumbers$ {
  /** @deprecated use `UsersOnePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UsersOnePhoneNumbers$inboundSchema;
  /** @deprecated use `UsersOnePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UsersOnePhoneNumbers$outboundSchema;
  /** @deprecated use `UsersOnePhoneNumbers$Outbound` instead. */
  export type Outbound = UsersOnePhoneNumbers$Outbound;
}

export function usersOnePhoneNumbersToJSON(
  usersOnePhoneNumbers: UsersOnePhoneNumbers,
): string {
  return JSON.stringify(
    UsersOnePhoneNumbers$outboundSchema.parse(usersOnePhoneNumbers),
  );
}

export function usersOnePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UsersOnePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOnePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOnePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UsersOneUsersResponseType$inboundSchema: z.ZodNativeEnum<
  typeof UsersOneUsersResponseType
> = z.nativeEnum(UsersOneUsersResponseType);

/** @internal */
export const UsersOneUsersResponseType$outboundSchema: z.ZodNativeEnum<
  typeof UsersOneUsersResponseType
> = UsersOneUsersResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneUsersResponseType$ {
  /** @deprecated use `UsersOneUsersResponseType$inboundSchema` instead. */
  export const inboundSchema = UsersOneUsersResponseType$inboundSchema;
  /** @deprecated use `UsersOneUsersResponseType$outboundSchema` instead. */
  export const outboundSchema = UsersOneUsersResponseType$outboundSchema;
}

/** @internal */
export const UsersOneEmails$inboundSchema: z.ZodType<
  UsersOneEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UsersOneUsersResponseType$inboundSchema).optional(),
});

/** @internal */
export type UsersOneEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UsersOneEmails$outboundSchema: z.ZodType<
  UsersOneEmails$Outbound,
  z.ZodTypeDef,
  UsersOneEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UsersOneUsersResponseType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneEmails$ {
  /** @deprecated use `UsersOneEmails$inboundSchema` instead. */
  export const inboundSchema = UsersOneEmails$inboundSchema;
  /** @deprecated use `UsersOneEmails$outboundSchema` instead. */
  export const outboundSchema = UsersOneEmails$outboundSchema;
  /** @deprecated use `UsersOneEmails$Outbound` instead. */
  export type Outbound = UsersOneEmails$Outbound;
}

export function usersOneEmailsToJSON(usersOneEmails: UsersOneEmails): string {
  return JSON.stringify(UsersOneEmails$outboundSchema.parse(usersOneEmails));
}

export function usersOneEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneEmails' from JSON`,
  );
}

/** @internal */
export const UsersOneCustomMappings$inboundSchema: z.ZodType<
  UsersOneCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UsersOneCustomMappings$Outbound = {};

/** @internal */
export const UsersOneCustomMappings$outboundSchema: z.ZodType<
  UsersOneCustomMappings$Outbound,
  z.ZodTypeDef,
  UsersOneCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneCustomMappings$ {
  /** @deprecated use `UsersOneCustomMappings$inboundSchema` instead. */
  export const inboundSchema = UsersOneCustomMappings$inboundSchema;
  /** @deprecated use `UsersOneCustomMappings$outboundSchema` instead. */
  export const outboundSchema = UsersOneCustomMappings$outboundSchema;
  /** @deprecated use `UsersOneCustomMappings$Outbound` instead. */
  export type Outbound = UsersOneCustomMappings$Outbound;
}

export function usersOneCustomMappingsToJSON(
  usersOneCustomMappings: UsersOneCustomMappings,
): string {
  return JSON.stringify(
    UsersOneCustomMappings$outboundSchema.parse(usersOneCustomMappings),
  );
}

export function usersOneCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneCustomMappings' from JSON`,
  );
}

/** @internal */
export const UsersOneExtendPaths$inboundSchema: z.ZodType<
  UsersOneExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UsersOneExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UsersOneExtendPaths$outboundSchema: z.ZodType<
  UsersOneExtendPaths$Outbound,
  z.ZodTypeDef,
  UsersOneExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneExtendPaths$ {
  /** @deprecated use `UsersOneExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UsersOneExtendPaths$inboundSchema;
  /** @deprecated use `UsersOneExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UsersOneExtendPaths$outboundSchema;
  /** @deprecated use `UsersOneExtendPaths$Outbound` instead. */
  export type Outbound = UsersOneExtendPaths$Outbound;
}

export function usersOneExtendPathsToJSON(
  usersOneExtendPaths: UsersOneExtendPaths,
): string {
  return JSON.stringify(
    UsersOneExtendPaths$outboundSchema.parse(usersOneExtendPaths),
  );
}

export function usersOneExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneExtendPaths' from JSON`,
  );
}

/** @internal */
export const UsersOnePassThrough$inboundSchema: z.ZodType<
  UsersOnePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => UsersOneExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UsersOnePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UsersOneExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UsersOnePassThrough$outboundSchema: z.ZodType<
  UsersOnePassThrough$Outbound,
  z.ZodTypeDef,
  UsersOnePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => UsersOneExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOnePassThrough$ {
  /** @deprecated use `UsersOnePassThrough$inboundSchema` instead. */
  export const inboundSchema = UsersOnePassThrough$inboundSchema;
  /** @deprecated use `UsersOnePassThrough$outboundSchema` instead. */
  export const outboundSchema = UsersOnePassThrough$outboundSchema;
  /** @deprecated use `UsersOnePassThrough$Outbound` instead. */
  export type Outbound = UsersOnePassThrough$Outbound;
}

export function usersOnePassThroughToJSON(
  usersOnePassThrough: UsersOnePassThrough,
): string {
  return JSON.stringify(
    UsersOnePassThrough$outboundSchema.parse(usersOnePassThrough),
  );
}

export function usersOnePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UsersOnePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOnePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOnePassThrough' from JSON`,
  );
}

/** @internal */
export const UsersOneData$inboundSchema: z.ZodType<
  UsersOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  parent_id: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employee_number: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UsersOneAddresses$inboundSchema)).optional(),
  phone_numbers: z.array(z.lazy(() => UsersOnePhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => UsersOneEmails$inboundSchema)),
  custom_mappings: z.nullable(
    z.lazy(() => UsersOneCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => UsersOnePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "first_name": "firstName",
    "last_name": "lastName",
    "company_name": "companyName",
    "employee_number": "employeeNumber",
    "phone_numbers": "phoneNumbers",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UsersOneData$Outbound = {
  id?: string | undefined;
  parent_id?: string | null | undefined;
  username?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  title?: string | null | undefined;
  division?: string | null | undefined;
  department?: string | null | undefined;
  company_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  addresses?: Array<UsersOneAddresses$Outbound> | undefined;
  phone_numbers?: Array<UsersOnePhoneNumbers$Outbound> | undefined;
  emails: Array<UsersOneEmails$Outbound>;
  custom_mappings?: UsersOneCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<UsersOnePassThrough$Outbound> | undefined;
};

/** @internal */
export const UsersOneData$outboundSchema: z.ZodType<
  UsersOneData$Outbound,
  z.ZodTypeDef,
  UsersOneData
> = z.object({
  id: z.string().optional(),
  parentId: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UsersOneAddresses$outboundSchema)).optional(),
  phoneNumbers: z.array(z.lazy(() => UsersOnePhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => UsersOneEmails$outboundSchema)),
  customMappings: z.nullable(
    z.lazy(() => UsersOneCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => UsersOnePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    firstName: "first_name",
    lastName: "last_name",
    companyName: "company_name",
    employeeNumber: "employee_number",
    phoneNumbers: "phone_numbers",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneData$ {
  /** @deprecated use `UsersOneData$inboundSchema` instead. */
  export const inboundSchema = UsersOneData$inboundSchema;
  /** @deprecated use `UsersOneData$outboundSchema` instead. */
  export const outboundSchema = UsersOneData$outboundSchema;
  /** @deprecated use `UsersOneData$Outbound` instead. */
  export type Outbound = UsersOneData$Outbound;
}

export function usersOneDataToJSON(usersOneData: UsersOneData): string {
  return JSON.stringify(UsersOneData$outboundSchema.parse(usersOneData));
}

export function usersOneDataFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneData' from JSON`,
  );
}

/** @internal */
export const UsersOneResponseBodyOutput$inboundSchema: z.ZodType<
  UsersOneResponseBodyOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UsersOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UsersOneResponseBodyOutput$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UsersOneData$Outbound;
};

/** @internal */
export const UsersOneResponseBodyOutput$outboundSchema: z.ZodType<
  UsersOneResponseBodyOutput$Outbound,
  z.ZodTypeDef,
  UsersOneResponseBodyOutput
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UsersOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneResponseBodyOutput$ {
  /** @deprecated use `UsersOneResponseBodyOutput$inboundSchema` instead. */
  export const inboundSchema = UsersOneResponseBodyOutput$inboundSchema;
  /** @deprecated use `UsersOneResponseBodyOutput$outboundSchema` instead. */
  export const outboundSchema = UsersOneResponseBodyOutput$outboundSchema;
  /** @deprecated use `UsersOneResponseBodyOutput$Outbound` instead. */
  export type Outbound = UsersOneResponseBodyOutput$Outbound;
}

export function usersOneResponseBodyOutputToJSON(
  usersOneResponseBodyOutput: UsersOneResponseBodyOutput,
): string {
  return JSON.stringify(
    UsersOneResponseBodyOutput$outboundSchema.parse(usersOneResponseBodyOutput),
  );
}

export function usersOneResponseBodyOutputFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneResponseBodyOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneResponseBodyOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneResponseBodyOutput' from JSON`,
  );
}

/** @internal */
export const UsersOneResponse$inboundSchema: z.ZodType<
  UsersOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UsersOneResponseBodyOutput$inboundSchema),
  z.lazy(() => UsersOneResponseBody$inboundSchema),
]);

/** @internal */
export type UsersOneResponse$Outbound =
  | UsersOneResponseBodyOutput$Outbound
  | UsersOneResponseBody$Outbound;

/** @internal */
export const UsersOneResponse$outboundSchema: z.ZodType<
  UsersOneResponse$Outbound,
  z.ZodTypeDef,
  UsersOneResponse
> = z.union([
  z.lazy(() => UsersOneResponseBodyOutput$outboundSchema),
  z.lazy(() => UsersOneResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersOneResponse$ {
  /** @deprecated use `UsersOneResponse$inboundSchema` instead. */
  export const inboundSchema = UsersOneResponse$inboundSchema;
  /** @deprecated use `UsersOneResponse$outboundSchema` instead. */
  export const outboundSchema = UsersOneResponse$outboundSchema;
  /** @deprecated use `UsersOneResponse$Outbound` instead. */
  export type Outbound = UsersOneResponse$Outbound;
}

export function usersOneResponseToJSON(
  usersOneResponse: UsersOneResponse,
): string {
  return JSON.stringify(
    UsersOneResponse$outboundSchema.parse(usersOneResponse),
  );
}

export function usersOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsersOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersOneResponse' from JSON`,
  );
}
