/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivitiesAddSecurity = {
  apiKey: string;
};

export type ActivitiesAddRequest = {
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
  activityCreateRequest: components.ActivityCreateRequest;
};

export type ActivitiesAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Activity created
   */
  activityCreateResponse?: components.ActivityCreateResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const ActivitiesAddSecurity$inboundSchema: z.ZodType<
  ActivitiesAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ActivitiesAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ActivitiesAddSecurity$outboundSchema: z.ZodType<
  ActivitiesAddSecurity$Outbound,
  z.ZodTypeDef,
  ActivitiesAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddSecurity$ {
  /** @deprecated use `ActivitiesAddSecurity$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddSecurity$inboundSchema;
  /** @deprecated use `ActivitiesAddSecurity$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddSecurity$outboundSchema;
  /** @deprecated use `ActivitiesAddSecurity$Outbound` instead. */
  export type Outbound = ActivitiesAddSecurity$Outbound;
}

export function activitiesAddSecurityToJSON(
  activitiesAddSecurity: ActivitiesAddSecurity,
): string {
  return JSON.stringify(
    ActivitiesAddSecurity$outboundSchema.parse(activitiesAddSecurity),
  );
}

export function activitiesAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddSecurity' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddRequest$inboundSchema: z.ZodType<
  ActivitiesAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  ActivityCreateRequest: components.ActivityCreateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ActivityCreateRequest": "activityCreateRequest",
  });
});

/** @internal */
export type ActivitiesAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  ActivityCreateRequest: components.ActivityCreateRequest$Outbound;
};

/** @internal */
export const ActivitiesAddRequest$outboundSchema: z.ZodType<
  ActivitiesAddRequest$Outbound,
  z.ZodTypeDef,
  ActivitiesAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  activityCreateRequest: components.ActivityCreateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    activityCreateRequest: "ActivityCreateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddRequest$ {
  /** @deprecated use `ActivitiesAddRequest$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddRequest$inboundSchema;
  /** @deprecated use `ActivitiesAddRequest$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddRequest$outboundSchema;
  /** @deprecated use `ActivitiesAddRequest$Outbound` instead. */
  export type Outbound = ActivitiesAddRequest$Outbound;
}

export function activitiesAddRequestToJSON(
  activitiesAddRequest: ActivitiesAddRequest,
): string {
  return JSON.stringify(
    ActivitiesAddRequest$outboundSchema.parse(activitiesAddRequest),
  );
}

export function activitiesAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddRequest' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddResponse$inboundSchema: z.ZodType<
  ActivitiesAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ActivityCreateResponse: components.ActivityCreateResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ActivityCreateResponse": "activityCreateResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type ActivitiesAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ActivityCreateResponse?:
    | components.ActivityCreateResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const ActivitiesAddResponse$outboundSchema: z.ZodType<
  ActivitiesAddResponse$Outbound,
  z.ZodTypeDef,
  ActivitiesAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  activityCreateResponse: components.ActivityCreateResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    activityCreateResponse: "ActivityCreateResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddResponse$ {
  /** @deprecated use `ActivitiesAddResponse$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddResponse$inboundSchema;
  /** @deprecated use `ActivitiesAddResponse$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddResponse$outboundSchema;
  /** @deprecated use `ActivitiesAddResponse$Outbound` instead. */
  export type Outbound = ActivitiesAddResponse$Outbound;
}

export function activitiesAddResponseToJSON(
  activitiesAddResponse: ActivitiesAddResponse,
): string {
  return JSON.stringify(
    ActivitiesAddResponse$outboundSchema.parse(activitiesAddResponse),
  );
}

export function activitiesAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddResponse' from JSON`,
  );
}
