/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivitiesAddSecurity = {
  apiKey: string;
};

/**
 * The type of the activity
 */
export const ActivitiesAddType = {
  Call: "call",
  Meeting: "meeting",
  Email: "email",
  Note: "note",
  Task: "task",
  Deadline: "deadline",
  SendLetter: "send-letter",
  SendQuote: "send-quote",
  Other: "other",
} as const;
/**
 * The type of the activity
 */
export type ActivitiesAddType = ClosedEnum<typeof ActivitiesAddType>;

/**
 * The type of address.
 */
export const ActivitiesAddActivitiesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type ActivitiesAddActivitiesType = ClosedEnum<
  typeof ActivitiesAddActivitiesType
>;

export type LocationAddress = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: ActivitiesAddActivitiesType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export const ShowAs = {
  Free: "free",
  Busy: "busy",
} as const;
export type ShowAs = ClosedEnum<typeof ShowAs>;

export type ActivitiesAddValue6 = {};

export type ActivitiesAddValue4 = {};

export type ActivitiesAddValue =
  | ActivitiesAddValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivitiesAddValue6>;

export type ActivitiesAddCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | ActivitiesAddValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivitiesAddValue6>
    | null
    | undefined;
};

/**
 * Status of the attendee
 */
export const Status = {
  Accepted: "accepted",
  Tentative: "tentative",
  Declined: "declined",
} as const;
/**
 * Status of the attendee
 */
export type Status = ClosedEnum<typeof Status>;

export type Attendees = {
  /**
   * Full name of the attendee
   */
  name?: string | null | undefined;
  /**
   * First name of the attendee
   */
  firstName?: string | null | undefined;
  /**
   * Middle name of the attendee
   */
  middleName?: string | null | undefined;
  /**
   * Last name of the attendee
   */
  lastName?: string | null | undefined;
  /**
   * Prefix of the attendee
   */
  prefix?: string | null | undefined;
  /**
   * Suffix of the attendee
   */
  suffix?: string | null | undefined;
  /**
   * Email address of the attendee
   */
  emailAddress?: string | null | undefined;
  /**
   * Whether the attendee is the organizer of the activity
   */
  isOrganizer?: boolean | null | undefined;
  /**
   * Status of the attendee
   */
  status?: Status | null | undefined;
};

export type ActivitiesAddExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type ActivitiesAddPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<ActivitiesAddExtendPaths> | undefined;
};

export type ActivitiesAddRequestBody = {
  /**
   * The date and time of the activity
   */
  activityDatetime?: string | null | undefined;
  /**
   * The duration of the activity in seconds
   */
  durationSeconds?: number | null | undefined;
  /**
   * The user related to the activity
   */
  userId?: string | null | undefined;
  /**
   * The account related to the activity
   */
  accountId?: string | null | undefined;
  /**
   * The contact related to the activity
   */
  contactId?: string | null | undefined;
  /**
   * The company related to the activity
   */
  companyId?: string | null | undefined;
  /**
   * The opportunity related to the activity
   */
  opportunityId?: string | null | undefined;
  /**
   * The lead related to the activity
   */
  leadId?: string | null | undefined;
  /**
   * The owner of the activity
   */
  ownerId?: string | null | undefined;
  /**
   * The campaign related to the activity
   */
  campaignId?: string | null | undefined;
  /**
   * The case related to the activity
   */
  caseId?: string | null | undefined;
  /**
   * The asset related to the activity
   */
  assetId?: string | null | undefined;
  /**
   * The contract related to the activity
   */
  contractId?: string | null | undefined;
  /**
   * The product related to the activity
   */
  productId?: string | null | undefined;
  /**
   * The solution related to the activity
   */
  solutionId?: string | null | undefined;
  /**
   * The custom object related to the activity
   */
  customObjectId?: string | null | undefined;
  /**
   * The type of the activity
   */
  type: ActivitiesAddType | null;
  /**
   * The title of the activity
   */
  title?: string | null | undefined;
  /**
   * A description of the activity
   */
  description?: string | null | undefined;
  /**
   * An internal note about the activity
   */
  note?: string | null | undefined;
  /**
   * The location of the activity
   */
  location?: string | null | undefined;
  locationAddress?: LocationAddress | undefined;
  /**
   * Whether the Activity is an all day event or not
   */
  allDayEvent?: boolean | null | undefined;
  /**
   * Whether the Activity is private or not
   */
  private?: boolean | null | undefined;
  /**
   * Whether the Activity is a group event or not
   */
  groupEvent?: boolean | null | undefined;
  /**
   * The sub type of the group event
   */
  eventSubType?: string | null | undefined;
  /**
   * The type of the group event
   */
  groupEventType?: string | null | undefined;
  /**
   * Whether the activity is a child of another activity or not
   */
  child?: boolean | null | undefined;
  /**
   * Whether the activity is archived or not
   */
  archived?: boolean | null | undefined;
  /**
   * Whether the activity is deleted or not
   */
  deleted?: boolean | null | undefined;
  showAs?: ShowAs | null | undefined;
  /**
   * Whether the Activity is done or not
   */
  done?: boolean | null | undefined;
  /**
   * The start date and time of the activity
   */
  startDatetime?: string | null | undefined;
  /**
   * The end date and time of the activity
   */
  endDatetime?: string | null | undefined;
  /**
   * The date of the activity
   */
  activityDate?: string | null | undefined;
  /**
   * The end date of the activity
   */
  endDate?: string | null | undefined;
  /**
   * Whether the activity is recurrent or not
   */
  recurrent?: boolean | undefined;
  /**
   * The date and time of the reminder
   */
  reminderDatetime?: string | null | undefined;
  /**
   * Whether the reminder is set or not
   */
  reminderSet?: boolean | null | undefined;
  /**
   * The URL of the video conference
   */
  videoConferenceUrl?: string | null | undefined;
  /**
   * The ID of the video conference
   */
  videoConferenceId?: string | null | undefined;
  /**
   * Custom fields of the activity
   */
  customFields?: Array<ActivitiesAddCustomFields> | undefined;
  attendees?: Array<Attendees> | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<ActivitiesAddPassThrough> | undefined;
};

export type ActivitiesAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: ActivitiesAddRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesAddDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type ActivitiesAddActivitiesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type ActivitiesAddUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Activity created
 */
export type ActivitiesAddResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: ActivitiesAddUnifiedId;
};

export type ActivitiesAddResponse =
  | ActivitiesAddResponseBody
  | ActivitiesAddActivitiesResponseBody;

/** @internal */
export const ActivitiesAddSecurity$inboundSchema: z.ZodType<
  ActivitiesAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ActivitiesAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ActivitiesAddSecurity$outboundSchema: z.ZodType<
  ActivitiesAddSecurity$Outbound,
  z.ZodTypeDef,
  ActivitiesAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddSecurity$ {
  /** @deprecated use `ActivitiesAddSecurity$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddSecurity$inboundSchema;
  /** @deprecated use `ActivitiesAddSecurity$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddSecurity$outboundSchema;
  /** @deprecated use `ActivitiesAddSecurity$Outbound` instead. */
  export type Outbound = ActivitiesAddSecurity$Outbound;
}

export function activitiesAddSecurityToJSON(
  activitiesAddSecurity: ActivitiesAddSecurity,
): string {
  return JSON.stringify(
    ActivitiesAddSecurity$outboundSchema.parse(activitiesAddSecurity),
  );
}

export function activitiesAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddSecurity' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddType$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAddType
> = z.nativeEnum(ActivitiesAddType);

/** @internal */
export const ActivitiesAddType$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAddType
> = ActivitiesAddType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddType$ {
  /** @deprecated use `ActivitiesAddType$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddType$inboundSchema;
  /** @deprecated use `ActivitiesAddType$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddType$outboundSchema;
}

/** @internal */
export const ActivitiesAddActivitiesType$inboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAddActivitiesType
> = z.nativeEnum(ActivitiesAddActivitiesType);

/** @internal */
export const ActivitiesAddActivitiesType$outboundSchema: z.ZodNativeEnum<
  typeof ActivitiesAddActivitiesType
> = ActivitiesAddActivitiesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddActivitiesType$ {
  /** @deprecated use `ActivitiesAddActivitiesType$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddActivitiesType$inboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesType$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddActivitiesType$outboundSchema;
}

/** @internal */
export const LocationAddress$inboundSchema: z.ZodType<
  LocationAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesAddActivitiesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type LocationAddress$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const LocationAddress$outboundSchema: z.ZodType<
  LocationAddress$Outbound,
  z.ZodTypeDef,
  LocationAddress
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesAddActivitiesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationAddress$ {
  /** @deprecated use `LocationAddress$inboundSchema` instead. */
  export const inboundSchema = LocationAddress$inboundSchema;
  /** @deprecated use `LocationAddress$outboundSchema` instead. */
  export const outboundSchema = LocationAddress$outboundSchema;
  /** @deprecated use `LocationAddress$Outbound` instead. */
  export type Outbound = LocationAddress$Outbound;
}

export function locationAddressToJSON(
  locationAddress: LocationAddress,
): string {
  return JSON.stringify(LocationAddress$outboundSchema.parse(locationAddress));
}

export function locationAddressFromJSON(
  jsonString: string,
): SafeParseResult<LocationAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LocationAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LocationAddress' from JSON`,
  );
}

/** @internal */
export const ShowAs$inboundSchema: z.ZodNativeEnum<typeof ShowAs> = z
  .nativeEnum(ShowAs);

/** @internal */
export const ShowAs$outboundSchema: z.ZodNativeEnum<typeof ShowAs> =
  ShowAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShowAs$ {
  /** @deprecated use `ShowAs$inboundSchema` instead. */
  export const inboundSchema = ShowAs$inboundSchema;
  /** @deprecated use `ShowAs$outboundSchema` instead. */
  export const outboundSchema = ShowAs$outboundSchema;
}

/** @internal */
export const ActivitiesAddValue6$inboundSchema: z.ZodType<
  ActivitiesAddValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivitiesAddValue6$Outbound = {};

/** @internal */
export const ActivitiesAddValue6$outboundSchema: z.ZodType<
  ActivitiesAddValue6$Outbound,
  z.ZodTypeDef,
  ActivitiesAddValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddValue6$ {
  /** @deprecated use `ActivitiesAddValue6$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddValue6$inboundSchema;
  /** @deprecated use `ActivitiesAddValue6$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddValue6$outboundSchema;
  /** @deprecated use `ActivitiesAddValue6$Outbound` instead. */
  export type Outbound = ActivitiesAddValue6$Outbound;
}

export function activitiesAddValue6ToJSON(
  activitiesAddValue6: ActivitiesAddValue6,
): string {
  return JSON.stringify(
    ActivitiesAddValue6$outboundSchema.parse(activitiesAddValue6),
  );
}

export function activitiesAddValue6FromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddValue6' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddValue4$inboundSchema: z.ZodType<
  ActivitiesAddValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivitiesAddValue4$Outbound = {};

/** @internal */
export const ActivitiesAddValue4$outboundSchema: z.ZodType<
  ActivitiesAddValue4$Outbound,
  z.ZodTypeDef,
  ActivitiesAddValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddValue4$ {
  /** @deprecated use `ActivitiesAddValue4$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddValue4$inboundSchema;
  /** @deprecated use `ActivitiesAddValue4$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddValue4$outboundSchema;
  /** @deprecated use `ActivitiesAddValue4$Outbound` instead. */
  export type Outbound = ActivitiesAddValue4$Outbound;
}

export function activitiesAddValue4ToJSON(
  activitiesAddValue4: ActivitiesAddValue4,
): string {
  return JSON.stringify(
    ActivitiesAddValue4$outboundSchema.parse(activitiesAddValue4),
  );
}

export function activitiesAddValue4FromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddValue4' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddValue$inboundSchema: z.ZodType<
  ActivitiesAddValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivitiesAddValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivitiesAddValue6$inboundSchema)),
]);

/** @internal */
export type ActivitiesAddValue$Outbound =
  | ActivitiesAddValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ActivitiesAddValue6$Outbound>;

/** @internal */
export const ActivitiesAddValue$outboundSchema: z.ZodType<
  ActivitiesAddValue$Outbound,
  z.ZodTypeDef,
  ActivitiesAddValue
> = z.union([
  z.lazy(() => ActivitiesAddValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ActivitiesAddValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddValue$ {
  /** @deprecated use `ActivitiesAddValue$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddValue$inboundSchema;
  /** @deprecated use `ActivitiesAddValue$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddValue$outboundSchema;
  /** @deprecated use `ActivitiesAddValue$Outbound` instead. */
  export type Outbound = ActivitiesAddValue$Outbound;
}

export function activitiesAddValueToJSON(
  activitiesAddValue: ActivitiesAddValue,
): string {
  return JSON.stringify(
    ActivitiesAddValue$outboundSchema.parse(activitiesAddValue),
  );
}

export function activitiesAddValueFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddValue' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddCustomFields$inboundSchema: z.ZodType<
  ActivitiesAddCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivitiesAddValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivitiesAddValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ActivitiesAddCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ActivitiesAddValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ActivitiesAddValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ActivitiesAddCustomFields$outboundSchema: z.ZodType<
  ActivitiesAddCustomFields$Outbound,
  z.ZodTypeDef,
  ActivitiesAddCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ActivitiesAddValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ActivitiesAddValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddCustomFields$ {
  /** @deprecated use `ActivitiesAddCustomFields$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddCustomFields$inboundSchema;
  /** @deprecated use `ActivitiesAddCustomFields$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddCustomFields$outboundSchema;
  /** @deprecated use `ActivitiesAddCustomFields$Outbound` instead. */
  export type Outbound = ActivitiesAddCustomFields$Outbound;
}

export function activitiesAddCustomFieldsToJSON(
  activitiesAddCustomFields: ActivitiesAddCustomFields,
): string {
  return JSON.stringify(
    ActivitiesAddCustomFields$outboundSchema.parse(activitiesAddCustomFields),
  );
}

export function activitiesAddCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddCustomFields' from JSON`,
  );
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Attendees$inboundSchema: z.ZodType<
  Attendees,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  email_address: z.nullable(z.string()).optional(),
  is_organizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(Status$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "email_address": "emailAddress",
    "is_organizer": "isOrganizer",
  });
});

/** @internal */
export type Attendees$Outbound = {
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  email_address?: string | null | undefined;
  is_organizer?: boolean | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const Attendees$outboundSchema: z.ZodType<
  Attendees$Outbound,
  z.ZodTypeDef,
  Attendees
> = z.object({
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  emailAddress: z.nullable(z.string()).optional(),
  isOrganizer: z.nullable(z.boolean()).optional(),
  status: z.nullable(Status$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    emailAddress: "email_address",
    isOrganizer: "is_organizer",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attendees$ {
  /** @deprecated use `Attendees$inboundSchema` instead. */
  export const inboundSchema = Attendees$inboundSchema;
  /** @deprecated use `Attendees$outboundSchema` instead. */
  export const outboundSchema = Attendees$outboundSchema;
  /** @deprecated use `Attendees$Outbound` instead. */
  export type Outbound = Attendees$Outbound;
}

export function attendeesToJSON(attendees: Attendees): string {
  return JSON.stringify(Attendees$outboundSchema.parse(attendees));
}

export function attendeesFromJSON(
  jsonString: string,
): SafeParseResult<Attendees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attendees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attendees' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddExtendPaths$inboundSchema: z.ZodType<
  ActivitiesAddExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ActivitiesAddExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ActivitiesAddExtendPaths$outboundSchema: z.ZodType<
  ActivitiesAddExtendPaths$Outbound,
  z.ZodTypeDef,
  ActivitiesAddExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddExtendPaths$ {
  /** @deprecated use `ActivitiesAddExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddExtendPaths$inboundSchema;
  /** @deprecated use `ActivitiesAddExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddExtendPaths$outboundSchema;
  /** @deprecated use `ActivitiesAddExtendPaths$Outbound` instead. */
  export type Outbound = ActivitiesAddExtendPaths$Outbound;
}

export function activitiesAddExtendPathsToJSON(
  activitiesAddExtendPaths: ActivitiesAddExtendPaths,
): string {
  return JSON.stringify(
    ActivitiesAddExtendPaths$outboundSchema.parse(activitiesAddExtendPaths),
  );
}

export function activitiesAddExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddExtendPaths' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddPassThrough$inboundSchema: z.ZodType<
  ActivitiesAddPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ActivitiesAddExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ActivitiesAddPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ActivitiesAddExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ActivitiesAddPassThrough$outboundSchema: z.ZodType<
  ActivitiesAddPassThrough$Outbound,
  z.ZodTypeDef,
  ActivitiesAddPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ActivitiesAddExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddPassThrough$ {
  /** @deprecated use `ActivitiesAddPassThrough$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddPassThrough$inboundSchema;
  /** @deprecated use `ActivitiesAddPassThrough$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddPassThrough$outboundSchema;
  /** @deprecated use `ActivitiesAddPassThrough$Outbound` instead. */
  export type Outbound = ActivitiesAddPassThrough$Outbound;
}

export function activitiesAddPassThroughToJSON(
  activitiesAddPassThrough: ActivitiesAddPassThrough,
): string {
  return JSON.stringify(
    ActivitiesAddPassThrough$outboundSchema.parse(activitiesAddPassThrough),
  );
}

export function activitiesAddPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddPassThrough' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddRequestBody$inboundSchema: z.ZodType<
  ActivitiesAddRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  activity_datetime: z.nullable(z.string()).optional(),
  duration_seconds: z.nullable(z.number().int()).optional(),
  user_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  opportunity_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  campaign_id: z.nullable(z.string()).optional(),
  case_id: z.nullable(z.string()).optional(),
  asset_id: z.nullable(z.string()).optional(),
  contract_id: z.nullable(z.string()).optional(),
  product_id: z.nullable(z.string()).optional(),
  solution_id: z.nullable(z.string()).optional(),
  custom_object_id: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesAddType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  location_address: z.lazy(() => LocationAddress$inboundSchema).optional(),
  all_day_event: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  group_event: z.nullable(z.boolean()).optional(),
  event_sub_type: z.nullable(z.string()).optional(),
  group_event_type: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  show_as: z.nullable(ShowAs$inboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  start_datetime: z.nullable(z.string()).optional(),
  end_datetime: z.nullable(z.string()).optional(),
  activity_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminder_datetime: z.nullable(z.string()).optional(),
  reminder_set: z.nullable(z.boolean()).optional(),
  video_conference_url: z.nullable(z.string()).optional(),
  video_conference_id: z.nullable(z.string()).optional(),
  custom_fields: z.array(z.lazy(() => ActivitiesAddCustomFields$inboundSchema))
    .optional(),
  attendees: z.array(z.lazy(() => Attendees$inboundSchema)).optional(),
  pass_through: z.array(z.lazy(() => ActivitiesAddPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "activity_datetime": "activityDatetime",
    "duration_seconds": "durationSeconds",
    "user_id": "userId",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_id": "companyId",
    "opportunity_id": "opportunityId",
    "lead_id": "leadId",
    "owner_id": "ownerId",
    "campaign_id": "campaignId",
    "case_id": "caseId",
    "asset_id": "assetId",
    "contract_id": "contractId",
    "product_id": "productId",
    "solution_id": "solutionId",
    "custom_object_id": "customObjectId",
    "location_address": "locationAddress",
    "all_day_event": "allDayEvent",
    "group_event": "groupEvent",
    "event_sub_type": "eventSubType",
    "group_event_type": "groupEventType",
    "show_as": "showAs",
    "start_datetime": "startDatetime",
    "end_datetime": "endDatetime",
    "activity_date": "activityDate",
    "end_date": "endDate",
    "reminder_datetime": "reminderDatetime",
    "reminder_set": "reminderSet",
    "video_conference_url": "videoConferenceUrl",
    "video_conference_id": "videoConferenceId",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ActivitiesAddRequestBody$Outbound = {
  activity_datetime?: string | null | undefined;
  duration_seconds?: number | null | undefined;
  user_id?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  opportunity_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  owner_id?: string | null | undefined;
  campaign_id?: string | null | undefined;
  case_id?: string | null | undefined;
  asset_id?: string | null | undefined;
  contract_id?: string | null | undefined;
  product_id?: string | null | undefined;
  solution_id?: string | null | undefined;
  custom_object_id?: string | null | undefined;
  type: string | null;
  title?: string | null | undefined;
  description?: string | null | undefined;
  note?: string | null | undefined;
  location?: string | null | undefined;
  location_address?: LocationAddress$Outbound | undefined;
  all_day_event?: boolean | null | undefined;
  private?: boolean | null | undefined;
  group_event?: boolean | null | undefined;
  event_sub_type?: string | null | undefined;
  group_event_type?: string | null | undefined;
  child?: boolean | null | undefined;
  archived?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  show_as?: string | null | undefined;
  done?: boolean | null | undefined;
  start_datetime?: string | null | undefined;
  end_datetime?: string | null | undefined;
  activity_date?: string | null | undefined;
  end_date?: string | null | undefined;
  recurrent?: boolean | undefined;
  reminder_datetime?: string | null | undefined;
  reminder_set?: boolean | null | undefined;
  video_conference_url?: string | null | undefined;
  video_conference_id?: string | null | undefined;
  custom_fields?: Array<ActivitiesAddCustomFields$Outbound> | undefined;
  attendees?: Array<Attendees$Outbound> | undefined;
  pass_through?: Array<ActivitiesAddPassThrough$Outbound> | undefined;
};

/** @internal */
export const ActivitiesAddRequestBody$outboundSchema: z.ZodType<
  ActivitiesAddRequestBody$Outbound,
  z.ZodTypeDef,
  ActivitiesAddRequestBody
> = z.object({
  activityDatetime: z.nullable(z.string()).optional(),
  durationSeconds: z.nullable(z.number().int()).optional(),
  userId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  opportunityId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  campaignId: z.nullable(z.string()).optional(),
  caseId: z.nullable(z.string()).optional(),
  assetId: z.nullable(z.string()).optional(),
  contractId: z.nullable(z.string()).optional(),
  productId: z.nullable(z.string()).optional(),
  solutionId: z.nullable(z.string()).optional(),
  customObjectId: z.nullable(z.string()).optional(),
  type: z.nullable(ActivitiesAddType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  locationAddress: z.lazy(() => LocationAddress$outboundSchema).optional(),
  allDayEvent: z.nullable(z.boolean()).optional(),
  private: z.nullable(z.boolean()).optional(),
  groupEvent: z.nullable(z.boolean()).optional(),
  eventSubType: z.nullable(z.string()).optional(),
  groupEventType: z.nullable(z.string()).optional(),
  child: z.nullable(z.boolean()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  showAs: z.nullable(ShowAs$outboundSchema).optional(),
  done: z.nullable(z.boolean()).optional(),
  startDatetime: z.nullable(z.string()).optional(),
  endDatetime: z.nullable(z.string()).optional(),
  activityDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  recurrent: z.boolean().optional(),
  reminderDatetime: z.nullable(z.string()).optional(),
  reminderSet: z.nullable(z.boolean()).optional(),
  videoConferenceUrl: z.nullable(z.string()).optional(),
  videoConferenceId: z.nullable(z.string()).optional(),
  customFields: z.array(z.lazy(() => ActivitiesAddCustomFields$outboundSchema))
    .optional(),
  attendees: z.array(z.lazy(() => Attendees$outboundSchema)).optional(),
  passThrough: z.array(z.lazy(() => ActivitiesAddPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    activityDatetime: "activity_datetime",
    durationSeconds: "duration_seconds",
    userId: "user_id",
    accountId: "account_id",
    contactId: "contact_id",
    companyId: "company_id",
    opportunityId: "opportunity_id",
    leadId: "lead_id",
    ownerId: "owner_id",
    campaignId: "campaign_id",
    caseId: "case_id",
    assetId: "asset_id",
    contractId: "contract_id",
    productId: "product_id",
    solutionId: "solution_id",
    customObjectId: "custom_object_id",
    locationAddress: "location_address",
    allDayEvent: "all_day_event",
    groupEvent: "group_event",
    eventSubType: "event_sub_type",
    groupEventType: "group_event_type",
    showAs: "show_as",
    startDatetime: "start_datetime",
    endDatetime: "end_datetime",
    activityDate: "activity_date",
    endDate: "end_date",
    reminderDatetime: "reminder_datetime",
    reminderSet: "reminder_set",
    videoConferenceUrl: "video_conference_url",
    videoConferenceId: "video_conference_id",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddRequestBody$ {
  /** @deprecated use `ActivitiesAddRequestBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddRequestBody$inboundSchema;
  /** @deprecated use `ActivitiesAddRequestBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddRequestBody$outboundSchema;
  /** @deprecated use `ActivitiesAddRequestBody$Outbound` instead. */
  export type Outbound = ActivitiesAddRequestBody$Outbound;
}

export function activitiesAddRequestBodyToJSON(
  activitiesAddRequestBody: ActivitiesAddRequestBody,
): string {
  return JSON.stringify(
    ActivitiesAddRequestBody$outboundSchema.parse(activitiesAddRequestBody),
  );
}

export function activitiesAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddRequestBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddRequest$inboundSchema: z.ZodType<
  ActivitiesAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => ActivitiesAddRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ActivitiesAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  RequestBody: ActivitiesAddRequestBody$Outbound;
};

/** @internal */
export const ActivitiesAddRequest$outboundSchema: z.ZodType<
  ActivitiesAddRequest$Outbound,
  z.ZodTypeDef,
  ActivitiesAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => ActivitiesAddRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddRequest$ {
  /** @deprecated use `ActivitiesAddRequest$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddRequest$inboundSchema;
  /** @deprecated use `ActivitiesAddRequest$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddRequest$outboundSchema;
  /** @deprecated use `ActivitiesAddRequest$Outbound` instead. */
  export type Outbound = ActivitiesAddRequest$Outbound;
}

export function activitiesAddRequestToJSON(
  activitiesAddRequest: ActivitiesAddRequest,
): string {
  return JSON.stringify(
    ActivitiesAddRequest$outboundSchema.parse(activitiesAddRequest),
  );
}

export function activitiesAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddRequest' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddDetail$inboundSchema: z.ZodType<
  ActivitiesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ActivitiesAddDetail$outboundSchema: z.ZodType<
  ActivitiesAddDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddDetail$ {
  /** @deprecated use `ActivitiesAddDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddDetail$inboundSchema;
  /** @deprecated use `ActivitiesAddDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddDetail$outboundSchema;
  /** @deprecated use `ActivitiesAddDetail$Outbound` instead. */
  export type Outbound = ActivitiesAddDetail$Outbound;
}

export function activitiesAddDetailToJSON(
  activitiesAddDetail: ActivitiesAddDetail,
): string {
  return JSON.stringify(
    ActivitiesAddDetail$outboundSchema.parse(activitiesAddDetail),
  );
}

export function activitiesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddActivitiesResponseBody$inboundSchema: z.ZodType<
  ActivitiesAddActivitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type ActivitiesAddActivitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesAddActivitiesResponseBody$outboundSchema: z.ZodType<
  ActivitiesAddActivitiesResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesAddActivitiesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddActivitiesResponseBody$ {
  /** @deprecated use `ActivitiesAddActivitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesAddActivitiesResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesAddActivitiesResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAddActivitiesResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesAddActivitiesResponseBody$Outbound;
}

export function activitiesAddActivitiesResponseBodyToJSON(
  activitiesAddActivitiesResponseBody: ActivitiesAddActivitiesResponseBody,
): string {
  return JSON.stringify(
    ActivitiesAddActivitiesResponseBody$outboundSchema.parse(
      activitiesAddActivitiesResponseBody,
    ),
  );
}

export function activitiesAddActivitiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddActivitiesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesAddActivitiesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddActivitiesResponseBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddUnifiedId$inboundSchema: z.ZodType<
  ActivitiesAddUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ActivitiesAddUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ActivitiesAddUnifiedId$outboundSchema: z.ZodType<
  ActivitiesAddUnifiedId$Outbound,
  z.ZodTypeDef,
  ActivitiesAddUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddUnifiedId$ {
  /** @deprecated use `ActivitiesAddUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddUnifiedId$inboundSchema;
  /** @deprecated use `ActivitiesAddUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddUnifiedId$outboundSchema;
  /** @deprecated use `ActivitiesAddUnifiedId$Outbound` instead. */
  export type Outbound = ActivitiesAddUnifiedId$Outbound;
}

export function activitiesAddUnifiedIdToJSON(
  activitiesAddUnifiedId: ActivitiesAddUnifiedId,
): string {
  return JSON.stringify(
    ActivitiesAddUnifiedId$outboundSchema.parse(activitiesAddUnifiedId),
  );
}

export function activitiesAddUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddUnifiedId' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddResponseBody$inboundSchema: z.ZodType<
  ActivitiesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivitiesAddUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ActivitiesAddResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ActivitiesAddUnifiedId$Outbound;
};

/** @internal */
export const ActivitiesAddResponseBody$outboundSchema: z.ZodType<
  ActivitiesAddResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesAddResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivitiesAddUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddResponseBody$ {
  /** @deprecated use `ActivitiesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesAddResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesAddResponseBody$Outbound;
}

export function activitiesAddResponseBodyToJSON(
  activitiesAddResponseBody: ActivitiesAddResponseBody,
): string {
  return JSON.stringify(
    ActivitiesAddResponseBody$outboundSchema.parse(activitiesAddResponseBody),
  );
}

export function activitiesAddResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddResponseBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesAddResponse$inboundSchema: z.ZodType<
  ActivitiesAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivitiesAddResponseBody$inboundSchema),
  z.lazy(() => ActivitiesAddActivitiesResponseBody$inboundSchema),
]);

/** @internal */
export type ActivitiesAddResponse$Outbound =
  | ActivitiesAddResponseBody$Outbound
  | ActivitiesAddActivitiesResponseBody$Outbound;

/** @internal */
export const ActivitiesAddResponse$outboundSchema: z.ZodType<
  ActivitiesAddResponse$Outbound,
  z.ZodTypeDef,
  ActivitiesAddResponse
> = z.union([
  z.lazy(() => ActivitiesAddResponseBody$outboundSchema),
  z.lazy(() => ActivitiesAddActivitiesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesAddResponse$ {
  /** @deprecated use `ActivitiesAddResponse$inboundSchema` instead. */
  export const inboundSchema = ActivitiesAddResponse$inboundSchema;
  /** @deprecated use `ActivitiesAddResponse$outboundSchema` instead. */
  export const outboundSchema = ActivitiesAddResponse$outboundSchema;
  /** @deprecated use `ActivitiesAddResponse$Outbound` instead. */
  export type Outbound = ActivitiesAddResponse$Outbound;
}

export function activitiesAddResponseToJSON(
  activitiesAddResponse: ActivitiesAddResponse,
): string {
  return JSON.stringify(
    ActivitiesAddResponse$outboundSchema.parse(activitiesAddResponse),
  );
}

export function activitiesAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesAddResponse' from JSON`,
  );
}
