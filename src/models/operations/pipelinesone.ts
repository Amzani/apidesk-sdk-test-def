/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PipelinesOneSecurity = {
  apiKey: string;
};

export type PipelinesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type PipelinesOnePipelinesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const PipelinesOneCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type PipelinesOneCurrency = ClosedEnum<typeof PipelinesOneCurrency>;

export type PipelinesOneStages = {
  /**
   * The unique identifier of the Pipeline Stage.
   */
  id?: string | null | undefined;
  /**
   * The name of the Pipeline Stage.
   */
  name?: string | null | undefined;
  /**
   * The value of the Pipeline Stage.
   */
  value?: string | null | undefined;
  /**
   * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
   */
  winProbability?: number | null | undefined;
  /**
   * The order in which the Pipeline Stage is displayed in the UI.
   */
  displayOrder?: number | null | undefined;
};

export type PipelinesOneExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type PipelinesOnePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<PipelinesOneExtendPaths> | undefined;
};

export type PipelinesOneData = {
  /**
   * The unique identifier of the Pipeline.
   */
  id?: string | undefined;
  /**
   * The name of the Pipeline.
   */
  name: string;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: PipelinesOneCurrency | null | undefined;
  /**
   * Whether the Pipeline is archived or not.
   */
  archived?: boolean | undefined;
  /**
   * Whether the Pipeline is active or not.
   */
  active?: boolean | undefined;
  /**
   * The order in which the Pipeline is displayed in the UI.
   */
  displayOrder?: number | null | undefined;
  /**
   * Whether the Pipeline has win probability enabled or not.
   */
  winProbabilityEnabled?: boolean | undefined;
  /**
   * The Pipeline Stages.
   */
  stages?: Array<PipelinesOneStages> | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PipelinesOnePassThrough> | undefined;
};

/**
 * Pipeline
 */
export type PipelinesOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: PipelinesOneData;
};

export type PipelinesOneResponse =
  | PipelinesOneResponseBody
  | PipelinesOnePipelinesResponseBody;

/** @internal */
export const PipelinesOneSecurity$inboundSchema: z.ZodType<
  PipelinesOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type PipelinesOneSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const PipelinesOneSecurity$outboundSchema: z.ZodType<
  PipelinesOneSecurity$Outbound,
  z.ZodTypeDef,
  PipelinesOneSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneSecurity$ {
  /** @deprecated use `PipelinesOneSecurity$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneSecurity$inboundSchema;
  /** @deprecated use `PipelinesOneSecurity$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneSecurity$outboundSchema;
  /** @deprecated use `PipelinesOneSecurity$Outbound` instead. */
  export type Outbound = PipelinesOneSecurity$Outbound;
}

export function pipelinesOneSecurityToJSON(
  pipelinesOneSecurity: PipelinesOneSecurity,
): string {
  return JSON.stringify(
    PipelinesOneSecurity$outboundSchema.parse(pipelinesOneSecurity),
  );
}

export function pipelinesOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOneSecurity' from JSON`,
  );
}

/** @internal */
export const PipelinesOneRequest$inboundSchema: z.ZodType<
  PipelinesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type PipelinesOneRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const PipelinesOneRequest$outboundSchema: z.ZodType<
  PipelinesOneRequest$Outbound,
  z.ZodTypeDef,
  PipelinesOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneRequest$ {
  /** @deprecated use `PipelinesOneRequest$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneRequest$inboundSchema;
  /** @deprecated use `PipelinesOneRequest$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneRequest$outboundSchema;
  /** @deprecated use `PipelinesOneRequest$Outbound` instead. */
  export type Outbound = PipelinesOneRequest$Outbound;
}

export function pipelinesOneRequestToJSON(
  pipelinesOneRequest: PipelinesOneRequest,
): string {
  return JSON.stringify(
    PipelinesOneRequest$outboundSchema.parse(pipelinesOneRequest),
  );
}

export function pipelinesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOneRequest' from JSON`,
  );
}

/** @internal */
export const PipelinesOneDetail$inboundSchema: z.ZodType<
  PipelinesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const PipelinesOneDetail$outboundSchema: z.ZodType<
  PipelinesOneDetail$Outbound,
  z.ZodTypeDef,
  PipelinesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneDetail$ {
  /** @deprecated use `PipelinesOneDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneDetail$inboundSchema;
  /** @deprecated use `PipelinesOneDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneDetail$outboundSchema;
  /** @deprecated use `PipelinesOneDetail$Outbound` instead. */
  export type Outbound = PipelinesOneDetail$Outbound;
}

export function pipelinesOneDetailToJSON(
  pipelinesOneDetail: PipelinesOneDetail,
): string {
  return JSON.stringify(
    PipelinesOneDetail$outboundSchema.parse(pipelinesOneDetail),
  );
}

export function pipelinesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOneDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesOnePipelinesResponseBody$inboundSchema: z.ZodType<
  PipelinesOnePipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type PipelinesOnePipelinesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesOnePipelinesResponseBody$outboundSchema: z.ZodType<
  PipelinesOnePipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesOnePipelinesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOnePipelinesResponseBody$ {
  /** @deprecated use `PipelinesOnePipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesOnePipelinesResponseBody$inboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesOnePipelinesResponseBody$outboundSchema;
  /** @deprecated use `PipelinesOnePipelinesResponseBody$Outbound` instead. */
  export type Outbound = PipelinesOnePipelinesResponseBody$Outbound;
}

export function pipelinesOnePipelinesResponseBodyToJSON(
  pipelinesOnePipelinesResponseBody: PipelinesOnePipelinesResponseBody,
): string {
  return JSON.stringify(
    PipelinesOnePipelinesResponseBody$outboundSchema.parse(
      pipelinesOnePipelinesResponseBody,
    ),
  );
}

export function pipelinesOnePipelinesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOnePipelinesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOnePipelinesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOnePipelinesResponseBody' from JSON`,
  );
}

/** @internal */
export const PipelinesOneCurrency$inboundSchema: z.ZodNativeEnum<
  typeof PipelinesOneCurrency
> = z.nativeEnum(PipelinesOneCurrency);

/** @internal */
export const PipelinesOneCurrency$outboundSchema: z.ZodNativeEnum<
  typeof PipelinesOneCurrency
> = PipelinesOneCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneCurrency$ {
  /** @deprecated use `PipelinesOneCurrency$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneCurrency$inboundSchema;
  /** @deprecated use `PipelinesOneCurrency$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneCurrency$outboundSchema;
}

/** @internal */
export const PipelinesOneStages$inboundSchema: z.ZodType<
  PipelinesOneStages,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  win_probability: z.nullable(z.number().int()).optional(),
  display_order: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "win_probability": "winProbability",
    "display_order": "displayOrder",
  });
});

/** @internal */
export type PipelinesOneStages$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  value?: string | null | undefined;
  win_probability?: number | null | undefined;
  display_order?: number | null | undefined;
};

/** @internal */
export const PipelinesOneStages$outboundSchema: z.ZodType<
  PipelinesOneStages$Outbound,
  z.ZodTypeDef,
  PipelinesOneStages
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  winProbability: z.nullable(z.number().int()).optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    winProbability: "win_probability",
    displayOrder: "display_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneStages$ {
  /** @deprecated use `PipelinesOneStages$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneStages$inboundSchema;
  /** @deprecated use `PipelinesOneStages$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneStages$outboundSchema;
  /** @deprecated use `PipelinesOneStages$Outbound` instead. */
  export type Outbound = PipelinesOneStages$Outbound;
}

export function pipelinesOneStagesToJSON(
  pipelinesOneStages: PipelinesOneStages,
): string {
  return JSON.stringify(
    PipelinesOneStages$outboundSchema.parse(pipelinesOneStages),
  );
}

export function pipelinesOneStagesFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOneStages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOneStages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOneStages' from JSON`,
  );
}

/** @internal */
export const PipelinesOneExtendPaths$inboundSchema: z.ZodType<
  PipelinesOneExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type PipelinesOneExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const PipelinesOneExtendPaths$outboundSchema: z.ZodType<
  PipelinesOneExtendPaths$Outbound,
  z.ZodTypeDef,
  PipelinesOneExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneExtendPaths$ {
  /** @deprecated use `PipelinesOneExtendPaths$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneExtendPaths$inboundSchema;
  /** @deprecated use `PipelinesOneExtendPaths$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneExtendPaths$outboundSchema;
  /** @deprecated use `PipelinesOneExtendPaths$Outbound` instead. */
  export type Outbound = PipelinesOneExtendPaths$Outbound;
}

export function pipelinesOneExtendPathsToJSON(
  pipelinesOneExtendPaths: PipelinesOneExtendPaths,
): string {
  return JSON.stringify(
    PipelinesOneExtendPaths$outboundSchema.parse(pipelinesOneExtendPaths),
  );
}

export function pipelinesOneExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOneExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOneExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOneExtendPaths' from JSON`,
  );
}

/** @internal */
export const PipelinesOnePassThrough$inboundSchema: z.ZodType<
  PipelinesOnePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => PipelinesOneExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type PipelinesOnePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<PipelinesOneExtendPaths$Outbound> | undefined;
};

/** @internal */
export const PipelinesOnePassThrough$outboundSchema: z.ZodType<
  PipelinesOnePassThrough$Outbound,
  z.ZodTypeDef,
  PipelinesOnePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => PipelinesOneExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOnePassThrough$ {
  /** @deprecated use `PipelinesOnePassThrough$inboundSchema` instead. */
  export const inboundSchema = PipelinesOnePassThrough$inboundSchema;
  /** @deprecated use `PipelinesOnePassThrough$outboundSchema` instead. */
  export const outboundSchema = PipelinesOnePassThrough$outboundSchema;
  /** @deprecated use `PipelinesOnePassThrough$Outbound` instead. */
  export type Outbound = PipelinesOnePassThrough$Outbound;
}

export function pipelinesOnePassThroughToJSON(
  pipelinesOnePassThrough: PipelinesOnePassThrough,
): string {
  return JSON.stringify(
    PipelinesOnePassThrough$outboundSchema.parse(pipelinesOnePassThrough),
  );
}

export function pipelinesOnePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOnePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOnePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOnePassThrough' from JSON`,
  );
}

/** @internal */
export const PipelinesOneData$inboundSchema: z.ZodType<
  PipelinesOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(PipelinesOneCurrency$inboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  display_order: z.nullable(z.number().int()).optional(),
  win_probability_enabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => PipelinesOneStages$inboundSchema)).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(z.lazy(() => PipelinesOnePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "display_order": "displayOrder",
    "win_probability_enabled": "winProbabilityEnabled",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type PipelinesOneData$Outbound = {
  id?: string | undefined;
  name: string;
  currency?: string | null | undefined;
  archived?: boolean | undefined;
  active?: boolean | undefined;
  display_order?: number | null | undefined;
  win_probability_enabled?: boolean | undefined;
  stages?: Array<PipelinesOneStages$Outbound> | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PipelinesOnePassThrough$Outbound> | undefined;
};

/** @internal */
export const PipelinesOneData$outboundSchema: z.ZodType<
  PipelinesOneData$Outbound,
  z.ZodTypeDef,
  PipelinesOneData
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(PipelinesOneCurrency$outboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
  winProbabilityEnabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => PipelinesOneStages$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(z.lazy(() => PipelinesOnePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    displayOrder: "display_order",
    winProbabilityEnabled: "win_probability_enabled",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneData$ {
  /** @deprecated use `PipelinesOneData$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneData$inboundSchema;
  /** @deprecated use `PipelinesOneData$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneData$outboundSchema;
  /** @deprecated use `PipelinesOneData$Outbound` instead. */
  export type Outbound = PipelinesOneData$Outbound;
}

export function pipelinesOneDataToJSON(
  pipelinesOneData: PipelinesOneData,
): string {
  return JSON.stringify(
    PipelinesOneData$outboundSchema.parse(pipelinesOneData),
  );
}

export function pipelinesOneDataFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOneData' from JSON`,
  );
}

/** @internal */
export const PipelinesOneResponseBody$inboundSchema: z.ZodType<
  PipelinesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelinesOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type PipelinesOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: PipelinesOneData$Outbound;
};

/** @internal */
export const PipelinesOneResponseBody$outboundSchema: z.ZodType<
  PipelinesOneResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelinesOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneResponseBody$ {
  /** @deprecated use `PipelinesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneResponseBody$inboundSchema;
  /** @deprecated use `PipelinesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneResponseBody$outboundSchema;
  /** @deprecated use `PipelinesOneResponseBody$Outbound` instead. */
  export type Outbound = PipelinesOneResponseBody$Outbound;
}

export function pipelinesOneResponseBodyToJSON(
  pipelinesOneResponseBody: PipelinesOneResponseBody,
): string {
  return JSON.stringify(
    PipelinesOneResponseBody$outboundSchema.parse(pipelinesOneResponseBody),
  );
}

export function pipelinesOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOneResponseBody' from JSON`,
  );
}

/** @internal */
export const PipelinesOneResponse$inboundSchema: z.ZodType<
  PipelinesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PipelinesOneResponseBody$inboundSchema),
  z.lazy(() => PipelinesOnePipelinesResponseBody$inboundSchema),
]);

/** @internal */
export type PipelinesOneResponse$Outbound =
  | PipelinesOneResponseBody$Outbound
  | PipelinesOnePipelinesResponseBody$Outbound;

/** @internal */
export const PipelinesOneResponse$outboundSchema: z.ZodType<
  PipelinesOneResponse$Outbound,
  z.ZodTypeDef,
  PipelinesOneResponse
> = z.union([
  z.lazy(() => PipelinesOneResponseBody$outboundSchema),
  z.lazy(() => PipelinesOnePipelinesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesOneResponse$ {
  /** @deprecated use `PipelinesOneResponse$inboundSchema` instead. */
  export const inboundSchema = PipelinesOneResponse$inboundSchema;
  /** @deprecated use `PipelinesOneResponse$outboundSchema` instead. */
  export const outboundSchema = PipelinesOneResponse$outboundSchema;
  /** @deprecated use `PipelinesOneResponse$Outbound` instead. */
  export type Outbound = PipelinesOneResponse$Outbound;
}

export function pipelinesOneResponseToJSON(
  pipelinesOneResponse: PipelinesOneResponse,
): string {
  return JSON.stringify(
    PipelinesOneResponse$outboundSchema.parse(pipelinesOneResponse),
  );
}

export function pipelinesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesOneResponse' from JSON`,
  );
}
