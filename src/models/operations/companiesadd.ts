/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompaniesAddSecurity = {
  apiKey: string;
};

export type CompaniesAddRequest = {
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
  companyCreateRequest: components.CompanyCreateRequest;
};

export type CompaniesAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Company created
   */
  companyCreateResponse?: components.CompanyCreateResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CompaniesAddSecurity$inboundSchema: z.ZodType<
  CompaniesAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type CompaniesAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const CompaniesAddSecurity$outboundSchema: z.ZodType<
  CompaniesAddSecurity$Outbound,
  z.ZodTypeDef,
  CompaniesAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAddSecurity$ {
  /** @deprecated use `CompaniesAddSecurity$inboundSchema` instead. */
  export const inboundSchema = CompaniesAddSecurity$inboundSchema;
  /** @deprecated use `CompaniesAddSecurity$outboundSchema` instead. */
  export const outboundSchema = CompaniesAddSecurity$outboundSchema;
  /** @deprecated use `CompaniesAddSecurity$Outbound` instead. */
  export type Outbound = CompaniesAddSecurity$Outbound;
}

export function companiesAddSecurityToJSON(
  companiesAddSecurity: CompaniesAddSecurity,
): string {
  return JSON.stringify(
    CompaniesAddSecurity$outboundSchema.parse(companiesAddSecurity),
  );
}

export function companiesAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAddSecurity' from JSON`,
  );
}

/** @internal */
export const CompaniesAddRequest$inboundSchema: z.ZodType<
  CompaniesAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  CompanyCreateRequest: components.CompanyCreateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CompanyCreateRequest": "companyCreateRequest",
  });
});

/** @internal */
export type CompaniesAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  CompanyCreateRequest: components.CompanyCreateRequest$Outbound;
};

/** @internal */
export const CompaniesAddRequest$outboundSchema: z.ZodType<
  CompaniesAddRequest$Outbound,
  z.ZodTypeDef,
  CompaniesAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  companyCreateRequest: components.CompanyCreateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    companyCreateRequest: "CompanyCreateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAddRequest$ {
  /** @deprecated use `CompaniesAddRequest$inboundSchema` instead. */
  export const inboundSchema = CompaniesAddRequest$inboundSchema;
  /** @deprecated use `CompaniesAddRequest$outboundSchema` instead. */
  export const outboundSchema = CompaniesAddRequest$outboundSchema;
  /** @deprecated use `CompaniesAddRequest$Outbound` instead. */
  export type Outbound = CompaniesAddRequest$Outbound;
}

export function companiesAddRequestToJSON(
  companiesAddRequest: CompaniesAddRequest,
): string {
  return JSON.stringify(
    CompaniesAddRequest$outboundSchema.parse(companiesAddRequest),
  );
}

export function companiesAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAddRequest' from JSON`,
  );
}

/** @internal */
export const CompaniesAddResponse$inboundSchema: z.ZodType<
  CompaniesAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CompanyCreateResponse: components.CompanyCreateResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CompanyCreateResponse": "companyCreateResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CompaniesAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CompanyCreateResponse?: components.CompanyCreateResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CompaniesAddResponse$outboundSchema: z.ZodType<
  CompaniesAddResponse$Outbound,
  z.ZodTypeDef,
  CompaniesAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  companyCreateResponse: components.CompanyCreateResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    companyCreateResponse: "CompanyCreateResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesAddResponse$ {
  /** @deprecated use `CompaniesAddResponse$inboundSchema` instead. */
  export const inboundSchema = CompaniesAddResponse$inboundSchema;
  /** @deprecated use `CompaniesAddResponse$outboundSchema` instead. */
  export const outboundSchema = CompaniesAddResponse$outboundSchema;
  /** @deprecated use `CompaniesAddResponse$Outbound` instead. */
  export type Outbound = CompaniesAddResponse$Outbound;
}

export function companiesAddResponseToJSON(
  companiesAddResponse: CompaniesAddResponse,
): string {
  return JSON.stringify(
    CompaniesAddResponse$outboundSchema.parse(companiesAddResponse),
  );
}

export function companiesAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesAddResponse' from JSON`,
  );
}
