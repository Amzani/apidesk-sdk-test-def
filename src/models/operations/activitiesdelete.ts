/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivitiesDeleteSecurity = {
  apiKey: string;
};

export type ActivitiesDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ActivitiesDeleteDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type ActivitiesDeleteActivitiesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type ActivitiesDeleteUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Activity deleted
 */
export type ActivitiesDeleteResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: ActivitiesDeleteUnifiedId;
};

export type ActivitiesDeleteResponse =
  | ActivitiesDeleteResponseBody
  | ActivitiesDeleteActivitiesResponseBody;

/** @internal */
export const ActivitiesDeleteSecurity$inboundSchema: z.ZodType<
  ActivitiesDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ActivitiesDeleteSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ActivitiesDeleteSecurity$outboundSchema: z.ZodType<
  ActivitiesDeleteSecurity$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteSecurity$ {
  /** @deprecated use `ActivitiesDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = ActivitiesDeleteSecurity$inboundSchema;
  /** @deprecated use `ActivitiesDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = ActivitiesDeleteSecurity$outboundSchema;
  /** @deprecated use `ActivitiesDeleteSecurity$Outbound` instead. */
  export type Outbound = ActivitiesDeleteSecurity$Outbound;
}

export function activitiesDeleteSecurityToJSON(
  activitiesDeleteSecurity: ActivitiesDeleteSecurity,
): string {
  return JSON.stringify(
    ActivitiesDeleteSecurity$outboundSchema.parse(activitiesDeleteSecurity),
  );
}

export function activitiesDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const ActivitiesDeleteRequest$inboundSchema: z.ZodType<
  ActivitiesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type ActivitiesDeleteRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const ActivitiesDeleteRequest$outboundSchema: z.ZodType<
  ActivitiesDeleteRequest$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteRequest$ {
  /** @deprecated use `ActivitiesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = ActivitiesDeleteRequest$inboundSchema;
  /** @deprecated use `ActivitiesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = ActivitiesDeleteRequest$outboundSchema;
  /** @deprecated use `ActivitiesDeleteRequest$Outbound` instead. */
  export type Outbound = ActivitiesDeleteRequest$Outbound;
}

export function activitiesDeleteRequestToJSON(
  activitiesDeleteRequest: ActivitiesDeleteRequest,
): string {
  return JSON.stringify(
    ActivitiesDeleteRequest$outboundSchema.parse(activitiesDeleteRequest),
  );
}

export function activitiesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const ActivitiesDeleteDetail$inboundSchema: z.ZodType<
  ActivitiesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ActivitiesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ActivitiesDeleteDetail$outboundSchema: z.ZodType<
  ActivitiesDeleteDetail$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteDetail$ {
  /** @deprecated use `ActivitiesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = ActivitiesDeleteDetail$inboundSchema;
  /** @deprecated use `ActivitiesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = ActivitiesDeleteDetail$outboundSchema;
  /** @deprecated use `ActivitiesDeleteDetail$Outbound` instead. */
  export type Outbound = ActivitiesDeleteDetail$Outbound;
}

export function activitiesDeleteDetailToJSON(
  activitiesDeleteDetail: ActivitiesDeleteDetail,
): string {
  return JSON.stringify(
    ActivitiesDeleteDetail$outboundSchema.parse(activitiesDeleteDetail),
  );
}

export function activitiesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const ActivitiesDeleteActivitiesResponseBody$inboundSchema: z.ZodType<
  ActivitiesDeleteActivitiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type ActivitiesDeleteActivitiesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ActivitiesDeleteActivitiesResponseBody$outboundSchema: z.ZodType<
  ActivitiesDeleteActivitiesResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteActivitiesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteActivitiesResponseBody$ {
  /** @deprecated use `ActivitiesDeleteActivitiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ActivitiesDeleteActivitiesResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ActivitiesDeleteActivitiesResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesDeleteActivitiesResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesDeleteActivitiesResponseBody$Outbound;
}

export function activitiesDeleteActivitiesResponseBodyToJSON(
  activitiesDeleteActivitiesResponseBody:
    ActivitiesDeleteActivitiesResponseBody,
): string {
  return JSON.stringify(
    ActivitiesDeleteActivitiesResponseBody$outboundSchema.parse(
      activitiesDeleteActivitiesResponseBody,
    ),
  );
}

export function activitiesDeleteActivitiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesDeleteActivitiesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivitiesDeleteActivitiesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesDeleteActivitiesResponseBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesDeleteUnifiedId$inboundSchema: z.ZodType<
  ActivitiesDeleteUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ActivitiesDeleteUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ActivitiesDeleteUnifiedId$outboundSchema: z.ZodType<
  ActivitiesDeleteUnifiedId$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteUnifiedId$ {
  /** @deprecated use `ActivitiesDeleteUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ActivitiesDeleteUnifiedId$inboundSchema;
  /** @deprecated use `ActivitiesDeleteUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ActivitiesDeleteUnifiedId$outboundSchema;
  /** @deprecated use `ActivitiesDeleteUnifiedId$Outbound` instead. */
  export type Outbound = ActivitiesDeleteUnifiedId$Outbound;
}

export function activitiesDeleteUnifiedIdToJSON(
  activitiesDeleteUnifiedId: ActivitiesDeleteUnifiedId,
): string {
  return JSON.stringify(
    ActivitiesDeleteUnifiedId$outboundSchema.parse(activitiesDeleteUnifiedId),
  );
}

export function activitiesDeleteUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesDeleteUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesDeleteUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesDeleteUnifiedId' from JSON`,
  );
}

/** @internal */
export const ActivitiesDeleteResponseBody$inboundSchema: z.ZodType<
  ActivitiesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivitiesDeleteUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ActivitiesDeleteResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ActivitiesDeleteUnifiedId$Outbound;
};

/** @internal */
export const ActivitiesDeleteResponseBody$outboundSchema: z.ZodType<
  ActivitiesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ActivitiesDeleteUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteResponseBody$ {
  /** @deprecated use `ActivitiesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = ActivitiesDeleteResponseBody$inboundSchema;
  /** @deprecated use `ActivitiesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = ActivitiesDeleteResponseBody$outboundSchema;
  /** @deprecated use `ActivitiesDeleteResponseBody$Outbound` instead. */
  export type Outbound = ActivitiesDeleteResponseBody$Outbound;
}

export function activitiesDeleteResponseBodyToJSON(
  activitiesDeleteResponseBody: ActivitiesDeleteResponseBody,
): string {
  return JSON.stringify(
    ActivitiesDeleteResponseBody$outboundSchema.parse(
      activitiesDeleteResponseBody,
    ),
  );
}

export function activitiesDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const ActivitiesDeleteResponse$inboundSchema: z.ZodType<
  ActivitiesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ActivitiesDeleteResponseBody$inboundSchema),
  z.lazy(() => ActivitiesDeleteActivitiesResponseBody$inboundSchema),
]);

/** @internal */
export type ActivitiesDeleteResponse$Outbound =
  | ActivitiesDeleteResponseBody$Outbound
  | ActivitiesDeleteActivitiesResponseBody$Outbound;

/** @internal */
export const ActivitiesDeleteResponse$outboundSchema: z.ZodType<
  ActivitiesDeleteResponse$Outbound,
  z.ZodTypeDef,
  ActivitiesDeleteResponse
> = z.union([
  z.lazy(() => ActivitiesDeleteResponseBody$outboundSchema),
  z.lazy(() => ActivitiesDeleteActivitiesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivitiesDeleteResponse$ {
  /** @deprecated use `ActivitiesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = ActivitiesDeleteResponse$inboundSchema;
  /** @deprecated use `ActivitiesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = ActivitiesDeleteResponse$outboundSchema;
  /** @deprecated use `ActivitiesDeleteResponse$Outbound` instead. */
  export type Outbound = ActivitiesDeleteResponse$Outbound;
}

export function activitiesDeleteResponseToJSON(
  activitiesDeleteResponse: ActivitiesDeleteResponse,
): string {
  return JSON.stringify(
    ActivitiesDeleteResponse$outboundSchema.parse(activitiesDeleteResponse),
  );
}

export function activitiesDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivitiesDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivitiesDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivitiesDeleteResponse' from JSON`,
  );
}
