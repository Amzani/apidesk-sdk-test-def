/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsDeleteSecurity = {
  apiKey: string;
};

export type ContactsDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsDeleteDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type ContactsDeleteContactsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type ContactsDeleteUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Contact deleted
 */
export type ContactsDeleteResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: ContactsDeleteUnifiedId;
};

export type ContactsDeleteResponse =
  | ContactsDeleteResponseBody
  | ContactsDeleteContactsResponseBody;

/** @internal */
export const ContactsDeleteSecurity$inboundSchema: z.ZodType<
  ContactsDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ContactsDeleteSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ContactsDeleteSecurity$outboundSchema: z.ZodType<
  ContactsDeleteSecurity$Outbound,
  z.ZodTypeDef,
  ContactsDeleteSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteSecurity$ {
  /** @deprecated use `ContactsDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteSecurity$inboundSchema;
  /** @deprecated use `ContactsDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteSecurity$outboundSchema;
  /** @deprecated use `ContactsDeleteSecurity$Outbound` instead. */
  export type Outbound = ContactsDeleteSecurity$Outbound;
}

export function contactsDeleteSecurityToJSON(
  contactsDeleteSecurity: ContactsDeleteSecurity,
): string {
  return JSON.stringify(
    ContactsDeleteSecurity$outboundSchema.parse(contactsDeleteSecurity),
  );
}

export function contactsDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteRequest$inboundSchema: z.ZodType<
  ContactsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type ContactsDeleteRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const ContactsDeleteRequest$outboundSchema: z.ZodType<
  ContactsDeleteRequest$Outbound,
  z.ZodTypeDef,
  ContactsDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteRequest$ {
  /** @deprecated use `ContactsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteRequest$inboundSchema;
  /** @deprecated use `ContactsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteRequest$outboundSchema;
  /** @deprecated use `ContactsDeleteRequest$Outbound` instead. */
  export type Outbound = ContactsDeleteRequest$Outbound;
}

export function contactsDeleteRequestToJSON(
  contactsDeleteRequest: ContactsDeleteRequest,
): string {
  return JSON.stringify(
    ContactsDeleteRequest$outboundSchema.parse(contactsDeleteRequest),
  );
}

export function contactsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteDetail$inboundSchema: z.ZodType<
  ContactsDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsDeleteDetail$outboundSchema: z.ZodType<
  ContactsDeleteDetail$Outbound,
  z.ZodTypeDef,
  ContactsDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteDetail$ {
  /** @deprecated use `ContactsDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteDetail$inboundSchema;
  /** @deprecated use `ContactsDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteDetail$outboundSchema;
  /** @deprecated use `ContactsDeleteDetail$Outbound` instead. */
  export type Outbound = ContactsDeleteDetail$Outbound;
}

export function contactsDeleteDetailToJSON(
  contactsDeleteDetail: ContactsDeleteDetail,
): string {
  return JSON.stringify(
    ContactsDeleteDetail$outboundSchema.parse(contactsDeleteDetail),
  );
}

export function contactsDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteDetail' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteContactsResponseBody$inboundSchema: z.ZodType<
  ContactsDeleteContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type ContactsDeleteContactsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsDeleteContactsResponseBody$outboundSchema: z.ZodType<
  ContactsDeleteContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsDeleteContactsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteContactsResponseBody$ {
  /** @deprecated use `ContactsDeleteContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteContactsResponseBody$inboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ContactsDeleteContactsResponseBody$outboundSchema;
  /** @deprecated use `ContactsDeleteContactsResponseBody$Outbound` instead. */
  export type Outbound = ContactsDeleteContactsResponseBody$Outbound;
}

export function contactsDeleteContactsResponseBodyToJSON(
  contactsDeleteContactsResponseBody: ContactsDeleteContactsResponseBody,
): string {
  return JSON.stringify(
    ContactsDeleteContactsResponseBody$outboundSchema.parse(
      contactsDeleteContactsResponseBody,
    ),
  );
}

export function contactsDeleteContactsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteContactsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContactsDeleteContactsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteContactsResponseBody' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteUnifiedId$inboundSchema: z.ZodType<
  ContactsDeleteUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ContactsDeleteUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const ContactsDeleteUnifiedId$outboundSchema: z.ZodType<
  ContactsDeleteUnifiedId$Outbound,
  z.ZodTypeDef,
  ContactsDeleteUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteUnifiedId$ {
  /** @deprecated use `ContactsDeleteUnifiedId$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteUnifiedId$inboundSchema;
  /** @deprecated use `ContactsDeleteUnifiedId$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteUnifiedId$outboundSchema;
  /** @deprecated use `ContactsDeleteUnifiedId$Outbound` instead. */
  export type Outbound = ContactsDeleteUnifiedId$Outbound;
}

export function contactsDeleteUnifiedIdToJSON(
  contactsDeleteUnifiedId: ContactsDeleteUnifiedId,
): string {
  return JSON.stringify(
    ContactsDeleteUnifiedId$outboundSchema.parse(contactsDeleteUnifiedId),
  );
}

export function contactsDeleteUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteUnifiedId' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteResponseBody$inboundSchema: z.ZodType<
  ContactsDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactsDeleteUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ContactsDeleteResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: ContactsDeleteUnifiedId$Outbound;
};

/** @internal */
export const ContactsDeleteResponseBody$outboundSchema: z.ZodType<
  ContactsDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsDeleteResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => ContactsDeleteUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteResponseBody$ {
  /** @deprecated use `ContactsDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteResponseBody$inboundSchema;
  /** @deprecated use `ContactsDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteResponseBody$outboundSchema;
  /** @deprecated use `ContactsDeleteResponseBody$Outbound` instead. */
  export type Outbound = ContactsDeleteResponseBody$Outbound;
}

export function contactsDeleteResponseBodyToJSON(
  contactsDeleteResponseBody: ContactsDeleteResponseBody,
): string {
  return JSON.stringify(
    ContactsDeleteResponseBody$outboundSchema.parse(contactsDeleteResponseBody),
  );
}

export function contactsDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteResponse$inboundSchema: z.ZodType<
  ContactsDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContactsDeleteResponseBody$inboundSchema),
  z.lazy(() => ContactsDeleteContactsResponseBody$inboundSchema),
]);

/** @internal */
export type ContactsDeleteResponse$Outbound =
  | ContactsDeleteResponseBody$Outbound
  | ContactsDeleteContactsResponseBody$Outbound;

/** @internal */
export const ContactsDeleteResponse$outboundSchema: z.ZodType<
  ContactsDeleteResponse$Outbound,
  z.ZodTypeDef,
  ContactsDeleteResponse
> = z.union([
  z.lazy(() => ContactsDeleteResponseBody$outboundSchema),
  z.lazy(() => ContactsDeleteContactsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteResponse$ {
  /** @deprecated use `ContactsDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteResponse$inboundSchema;
  /** @deprecated use `ContactsDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteResponse$outboundSchema;
  /** @deprecated use `ContactsDeleteResponse$Outbound` instead. */
  export type Outbound = ContactsDeleteResponse$Outbound;
}

export function contactsDeleteResponseToJSON(
  contactsDeleteResponse: ContactsDeleteResponse,
): string {
  return JSON.stringify(
    ContactsDeleteResponse$outboundSchema.parse(contactsDeleteResponse),
  );
}

export function contactsDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteResponse' from JSON`,
  );
}
