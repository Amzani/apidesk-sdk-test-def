/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsDeleteSecurity = {
  apiKey: string;
};

export type ContactsDeleteRequest = {
  /**
   * The unique identifier of the activity record to be deleted. This parameter is essential as it specifies which activity in the CRM system will be removed. Ensure that the ID corresponds to an existing activity to avoid errors.
   */
  id: string;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
};

export type ContactsDeleteResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Contact deleted
   */
  contactDeleteResponse?: components.ContactDeleteResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const ContactsDeleteSecurity$inboundSchema: z.ZodType<
  ContactsDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ContactsDeleteSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ContactsDeleteSecurity$outboundSchema: z.ZodType<
  ContactsDeleteSecurity$Outbound,
  z.ZodTypeDef,
  ContactsDeleteSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteSecurity$ {
  /** @deprecated use `ContactsDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteSecurity$inboundSchema;
  /** @deprecated use `ContactsDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteSecurity$outboundSchema;
  /** @deprecated use `ContactsDeleteSecurity$Outbound` instead. */
  export type Outbound = ContactsDeleteSecurity$Outbound;
}

export function contactsDeleteSecurityToJSON(
  contactsDeleteSecurity: ContactsDeleteSecurity,
): string {
  return JSON.stringify(
    ContactsDeleteSecurity$outboundSchema.parse(contactsDeleteSecurity),
  );
}

export function contactsDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteRequest$inboundSchema: z.ZodType<
  ContactsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type ContactsDeleteRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const ContactsDeleteRequest$outboundSchema: z.ZodType<
  ContactsDeleteRequest$Outbound,
  z.ZodTypeDef,
  ContactsDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteRequest$ {
  /** @deprecated use `ContactsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteRequest$inboundSchema;
  /** @deprecated use `ContactsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteRequest$outboundSchema;
  /** @deprecated use `ContactsDeleteRequest$Outbound` instead. */
  export type Outbound = ContactsDeleteRequest$Outbound;
}

export function contactsDeleteRequestToJSON(
  contactsDeleteRequest: ContactsDeleteRequest,
): string {
  return JSON.stringify(
    ContactsDeleteRequest$outboundSchema.parse(contactsDeleteRequest),
  );
}

export function contactsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteResponse$inboundSchema: z.ZodType<
  ContactsDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ContactDeleteResponse: components.ContactDeleteResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ContactDeleteResponse": "contactDeleteResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type ContactsDeleteResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ContactDeleteResponse?: components.ContactDeleteResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const ContactsDeleteResponse$outboundSchema: z.ZodType<
  ContactsDeleteResponse$Outbound,
  z.ZodTypeDef,
  ContactsDeleteResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  contactDeleteResponse: components.ContactDeleteResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    contactDeleteResponse: "ContactDeleteResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteResponse$ {
  /** @deprecated use `ContactsDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteResponse$inboundSchema;
  /** @deprecated use `ContactsDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteResponse$outboundSchema;
  /** @deprecated use `ContactsDeleteResponse$Outbound` instead. */
  export type Outbound = ContactsDeleteResponse$Outbound;
}

export function contactsDeleteResponseToJSON(
  contactsDeleteResponse: ContactsDeleteResponse,
): string {
  return JSON.stringify(
    ContactsDeleteResponse$outboundSchema.parse(contactsDeleteResponse),
  );
}

export function contactsDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteResponse' from JSON`,
  );
}
