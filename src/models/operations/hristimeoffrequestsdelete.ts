/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisTimeOffRequestsDeleteGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisTimeOffRequestsDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the employee you are acting upon.
   */
  employeeId: string;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsDeleteDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type HrisTimeOffRequestsDeleteUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * TimeOffRequests
 */
export type HrisTimeOffRequestsDeleteResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisTimeOffRequestsDeleteUnifiedId;
};

export type HrisTimeOffRequestsDeleteResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * TimeOffRequests
   */
  twoHundredApplicationJsonObject?:
    | HrisTimeOffRequestsDeleteResponseBody
    | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody
    | undefined;
};

/** @internal */
export const HrisTimeOffRequestsDeleteGlobals$inboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisTimeOffRequestsDeleteGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisTimeOffRequestsDeleteGlobals$outboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteGlobals$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsDeleteGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteGlobals$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsDeleteGlobals$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsDeleteGlobals$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteGlobals$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsDeleteGlobals$Outbound;
}

export function hrisTimeOffRequestsDeleteGlobalsToJSON(
  hrisTimeOffRequestsDeleteGlobals: HrisTimeOffRequestsDeleteGlobals,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteGlobals$outboundSchema.parse(
      hrisTimeOffRequestsDeleteGlobals,
    ),
  );
}

export function hrisTimeOffRequestsDeleteGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsDeleteGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsDeleteGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsDeleteGlobals' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsDeleteRequest$inboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  employee_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
  });
});

/** @internal */
export type HrisTimeOffRequestsDeleteRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  employee_id: string;
};

/** @internal */
export const HrisTimeOffRequestsDeleteRequest$outboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteRequest$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsDeleteRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  employeeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteRequest$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsDeleteRequest$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsDeleteRequest$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteRequest$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsDeleteRequest$Outbound;
}

export function hrisTimeOffRequestsDeleteRequestToJSON(
  hrisTimeOffRequestsDeleteRequest: HrisTimeOffRequestsDeleteRequest,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteRequest$outboundSchema.parse(
      hrisTimeOffRequestsDeleteRequest,
    ),
  );
}

export function hrisTimeOffRequestsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsDeleteDetail$inboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsDeleteDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisTimeOffRequestsDeleteDetail$outboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteDetail$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteDetail$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsDeleteDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsDeleteDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteDetail$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsDeleteDetail$Outbound;
}

export function hrisTimeOffRequestsDeleteDetailToJSON(
  hrisTimeOffRequestsDeleteDetail: HrisTimeOffRequestsDeleteDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteDetail$outboundSchema.parse(
      hrisTimeOffRequestsDeleteDetail,
    ),
  );
}

export function hrisTimeOffRequestsDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsDeleteDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$Outbound;
}

export function hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBodyToJSON(
  hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody:
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$outboundSchema
      .parse(hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody),
  );
}

export function hrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsDeleteUnifiedId$inboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type HrisTimeOffRequestsDeleteUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const HrisTimeOffRequestsDeleteUnifiedId$outboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteUnifiedId$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsDeleteUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteUnifiedId$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteUnifiedId$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsDeleteUnifiedId$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteUnifiedId$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteUnifiedId$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteUnifiedId$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsDeleteUnifiedId$Outbound;
}

export function hrisTimeOffRequestsDeleteUnifiedIdToJSON(
  hrisTimeOffRequestsDeleteUnifiedId: HrisTimeOffRequestsDeleteUnifiedId,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteUnifiedId$outboundSchema.parse(
      hrisTimeOffRequestsDeleteUnifiedId,
    ),
  );
}

export function hrisTimeOffRequestsDeleteUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsDeleteUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsDeleteUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsDeleteUnifiedId' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsDeleteResponseBody$inboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisTimeOffRequestsDeleteUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisTimeOffRequestsDeleteResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisTimeOffRequestsDeleteUnifiedId$Outbound;
};

/** @internal */
export const HrisTimeOffRequestsDeleteResponseBody$outboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsDeleteResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisTimeOffRequestsDeleteUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsDeleteResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteResponseBody$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsDeleteResponseBody$Outbound;
}

export function hrisTimeOffRequestsDeleteResponseBodyToJSON(
  hrisTimeOffRequestsDeleteResponseBody: HrisTimeOffRequestsDeleteResponseBody,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteResponseBody$outboundSchema.parse(
      hrisTimeOffRequestsDeleteResponseBody,
    ),
  );
}

export function hrisTimeOffRequestsDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsDeleteResponse$inboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisTimeOffRequestsDeleteResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisTimeOffRequestsDeleteResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisTimeOffRequestsDeleteResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisTimeOffRequestsDeleteResponse$outboundSchema: z.ZodType<
  HrisTimeOffRequestsDeleteResponse$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsDeleteResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisTimeOffRequestsDeleteResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisTimeOffRequestsDeleteHrisTimeOffRequestsResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsDeleteResponse$ {
  /** @deprecated use `HrisTimeOffRequestsDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsDeleteResponse$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteResponse$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsDeleteResponse$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsDeleteResponse$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsDeleteResponse$Outbound;
}

export function hrisTimeOffRequestsDeleteResponseToJSON(
  hrisTimeOffRequestsDeleteResponse: HrisTimeOffRequestsDeleteResponse,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsDeleteResponse$outboundSchema.parse(
      hrisTimeOffRequestsDeleteResponse,
    ),
  );
}

export function hrisTimeOffRequestsDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsDeleteResponse' from JSON`,
  );
}
