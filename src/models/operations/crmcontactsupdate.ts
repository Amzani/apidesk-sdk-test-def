/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmContactsUpdateGlobals = {
  /**
   * A unique identifier for the consumer, required to specify the data source or destination for the API operation. This ID is essential for authenticating and authorizing the request within the CRM system.
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmContactsUpdateRequest = {
  /**
   * The unique identifier of the activity to be deleted. This parameter is required to specify which activity record should be removed from the CRM system. Ensure that the ID corresponds to an existing activity to avoid errors.
   */
  id: string;
  /**
   * An optional identifier for the specific service to be called, such as 'pipedrive'. This is only required when multiple integrations are active, allowing the API to route the request to the appropriate service.
   */
  serviceId?: string | undefined;
  /**
   * A boolean flag that determines whether to include the raw response in the output. This is primarily used for debugging purposes to gain insights into the API's response structure.
   */
  raw?: boolean | undefined;
  updateContactRequest: components.UpdateContactRequest;
};

export type CrmContactsUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Contact updated
   */
  updateContactResponse?: components.UpdateContactResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmContactsUpdateGlobals$inboundSchema: z.ZodType<
  CrmContactsUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmContactsUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmContactsUpdateGlobals$outboundSchema: z.ZodType<
  CrmContactsUpdateGlobals$Outbound,
  z.ZodTypeDef,
  CrmContactsUpdateGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmContactsUpdateGlobals$ {
  /** @deprecated use `CrmContactsUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmContactsUpdateGlobals$inboundSchema;
  /** @deprecated use `CrmContactsUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmContactsUpdateGlobals$outboundSchema;
  /** @deprecated use `CrmContactsUpdateGlobals$Outbound` instead. */
  export type Outbound = CrmContactsUpdateGlobals$Outbound;
}

export function crmContactsUpdateGlobalsToJSON(
  crmContactsUpdateGlobals: CrmContactsUpdateGlobals,
): string {
  return JSON.stringify(
    CrmContactsUpdateGlobals$outboundSchema.parse(crmContactsUpdateGlobals),
  );
}

export function crmContactsUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmContactsUpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmContactsUpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmContactsUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const CrmContactsUpdateRequest$inboundSchema: z.ZodType<
  CrmContactsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  UpdateContactRequest: components.UpdateContactRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateContactRequest": "updateContactRequest",
  });
});

/** @internal */
export type CrmContactsUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  UpdateContactRequest: components.UpdateContactRequest$Outbound;
};

/** @internal */
export const CrmContactsUpdateRequest$outboundSchema: z.ZodType<
  CrmContactsUpdateRequest$Outbound,
  z.ZodTypeDef,
  CrmContactsUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  updateContactRequest: components.UpdateContactRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateContactRequest: "UpdateContactRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmContactsUpdateRequest$ {
  /** @deprecated use `CrmContactsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = CrmContactsUpdateRequest$inboundSchema;
  /** @deprecated use `CrmContactsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = CrmContactsUpdateRequest$outboundSchema;
  /** @deprecated use `CrmContactsUpdateRequest$Outbound` instead. */
  export type Outbound = CrmContactsUpdateRequest$Outbound;
}

export function crmContactsUpdateRequestToJSON(
  crmContactsUpdateRequest: CrmContactsUpdateRequest,
): string {
  return JSON.stringify(
    CrmContactsUpdateRequest$outboundSchema.parse(crmContactsUpdateRequest),
  );
}

export function crmContactsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmContactsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmContactsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmContactsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const CrmContactsUpdateResponse$inboundSchema: z.ZodType<
  CrmContactsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UpdateContactResponse: components.UpdateContactResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UpdateContactResponse": "updateContactResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmContactsUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateContactResponse?: components.UpdateContactResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmContactsUpdateResponse$outboundSchema: z.ZodType<
  CrmContactsUpdateResponse$Outbound,
  z.ZodTypeDef,
  CrmContactsUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  updateContactResponse: components.UpdateContactResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    updateContactResponse: "UpdateContactResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmContactsUpdateResponse$ {
  /** @deprecated use `CrmContactsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = CrmContactsUpdateResponse$inboundSchema;
  /** @deprecated use `CrmContactsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = CrmContactsUpdateResponse$outboundSchema;
  /** @deprecated use `CrmContactsUpdateResponse$Outbound` instead. */
  export type Outbound = CrmContactsUpdateResponse$Outbound;
}

export function crmContactsUpdateResponseToJSON(
  crmContactsUpdateResponse: CrmContactsUpdateResponse,
): string {
  return JSON.stringify(
    CrmContactsUpdateResponse$outboundSchema.parse(crmContactsUpdateResponse),
  );
}

export function crmContactsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmContactsUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmContactsUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmContactsUpdateResponse' from JSON`,
  );
}
