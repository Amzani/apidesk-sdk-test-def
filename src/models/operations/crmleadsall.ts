/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmLeadsAllGlobals = {
  /**
   * A unique identifier for the consumer, required to specify the data source or destination for the API operation. This ID is essential for authenticating and authorizing the request within the CRM system.
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmLeadsAllRequest = {
  /**
   * A boolean flag that determines whether to include the raw response in the output. This is primarily used for debugging purposes to gain insights into the API's response structure.
   */
  raw?: boolean | undefined;
  /**
   * An optional identifier for the specific service to be called, such as 'pipedrive'. This is only required when multiple integrations are active, allowing the API to route the request to the appropriate service.
   */
  serviceId?: string | undefined;
  /**
   * The 'cursor' parameter is used for pagination, allowing you to specify the starting point for the next set of results. It is particularly useful for navigating through large datasets efficiently. You can find the cursor for the next or previous page in the 'meta.cursors' property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * The 'limit' parameter specifies the maximum number of results to return in a single response. It helps manage the size of the response and can be set between 1 and 200, with a default value of 20 if not specified.
   */
  limit?: number | undefined;
  /**
   * The 'filter' parameter allows you to refine the results by applying specific criteria. It supports nested properties such as 'company_id' and 'owner_id' to filter activities based on company or owner identifiers.
   */
  filter?: components.LeadsFilter | undefined;
  /**
   * Define sorting preferences for the retrieved activities. Use nested properties to specify the field and order for sorting.
   */
  sort?: components.LeadsSort | undefined;
  /**
   * Allows additional query parameters to be sent directly to the downstream service without modification. This is useful for leveraging specific features of the downstream API that are not directly exposed by this API.
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * Enables selective retrieval of specific fields in the API response, improving performance by reducing data load. Specify fields as a comma-separated list, and use dot notation for nested properties.
   */
  fields?: string | null | undefined;
};

export type CrmLeadsAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Leads
   */
  listLeadsResponse?: components.ListLeadsResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmLeadsAllGlobals$inboundSchema: z.ZodType<
  CrmLeadsAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmLeadsAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmLeadsAllGlobals$outboundSchema: z.ZodType<
  CrmLeadsAllGlobals$Outbound,
  z.ZodTypeDef,
  CrmLeadsAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmLeadsAllGlobals$ {
  /** @deprecated use `CrmLeadsAllGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmLeadsAllGlobals$inboundSchema;
  /** @deprecated use `CrmLeadsAllGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmLeadsAllGlobals$outboundSchema;
  /** @deprecated use `CrmLeadsAllGlobals$Outbound` instead. */
  export type Outbound = CrmLeadsAllGlobals$Outbound;
}

export function crmLeadsAllGlobalsToJSON(
  crmLeadsAllGlobals: CrmLeadsAllGlobals,
): string {
  return JSON.stringify(
    CrmLeadsAllGlobals$outboundSchema.parse(crmLeadsAllGlobals),
  );
}

export function crmLeadsAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmLeadsAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmLeadsAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmLeadsAllGlobals' from JSON`,
  );
}

/** @internal */
export const CrmLeadsAllRequest$inboundSchema: z.ZodType<
  CrmLeadsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: components.LeadsFilter$inboundSchema.optional(),
  sort: components.LeadsSort$inboundSchema.optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CrmLeadsAllRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: components.LeadsFilter$Outbound | undefined;
  sort?: components.LeadsSort$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const CrmLeadsAllRequest$outboundSchema: z.ZodType<
  CrmLeadsAllRequest$Outbound,
  z.ZodTypeDef,
  CrmLeadsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: components.LeadsFilter$outboundSchema.optional(),
  sort: components.LeadsSort$outboundSchema.optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmLeadsAllRequest$ {
  /** @deprecated use `CrmLeadsAllRequest$inboundSchema` instead. */
  export const inboundSchema = CrmLeadsAllRequest$inboundSchema;
  /** @deprecated use `CrmLeadsAllRequest$outboundSchema` instead. */
  export const outboundSchema = CrmLeadsAllRequest$outboundSchema;
  /** @deprecated use `CrmLeadsAllRequest$Outbound` instead. */
  export type Outbound = CrmLeadsAllRequest$Outbound;
}

export function crmLeadsAllRequestToJSON(
  crmLeadsAllRequest: CrmLeadsAllRequest,
): string {
  return JSON.stringify(
    CrmLeadsAllRequest$outboundSchema.parse(crmLeadsAllRequest),
  );
}

export function crmLeadsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmLeadsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmLeadsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmLeadsAllRequest' from JSON`,
  );
}

/** @internal */
export const CrmLeadsAllResponse$inboundSchema: z.ZodType<
  CrmLeadsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ListLeadsResponse: components.ListLeadsResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ListLeadsResponse": "listLeadsResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmLeadsAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ListLeadsResponse?: components.ListLeadsResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmLeadsAllResponse$outboundSchema: z.ZodType<
  CrmLeadsAllResponse$Outbound,
  z.ZodTypeDef,
  CrmLeadsAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  listLeadsResponse: components.ListLeadsResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    listLeadsResponse: "ListLeadsResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmLeadsAllResponse$ {
  /** @deprecated use `CrmLeadsAllResponse$inboundSchema` instead. */
  export const inboundSchema = CrmLeadsAllResponse$inboundSchema;
  /** @deprecated use `CrmLeadsAllResponse$outboundSchema` instead. */
  export const outboundSchema = CrmLeadsAllResponse$outboundSchema;
  /** @deprecated use `CrmLeadsAllResponse$Outbound` instead. */
  export type Outbound = CrmLeadsAllResponse$Outbound;
}

export function crmLeadsAllResponseToJSON(
  crmLeadsAllResponse: CrmLeadsAllResponse,
): string {
  return JSON.stringify(
    CrmLeadsAllResponse$outboundSchema.parse(crmLeadsAllResponse),
  );
}

export function crmLeadsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmLeadsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmLeadsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmLeadsAllResponse' from JSON`,
  );
}
