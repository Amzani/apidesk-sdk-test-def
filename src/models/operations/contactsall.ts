/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsAllSecurity = {
  apiKey: string;
};

export type ContactsAllRequest = {
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
  /**
   * The 'cursor' parameter is used for pagination, allowing the API to return a specific subset of results. It indicates the starting point for the next set of results, which can be found in the 'meta.cursors' property of the previous response. This parameter is essential for navigating through large datasets efficiently.
   */
  cursor?: string | null | undefined;
  /**
   * The 'limit' parameter controls the number of results returned by the API in a single request. It accepts values ranging from 1 to 200, with a default of 20. This parameter is important for managing the volume of data returned, helping to optimize performance and reduce load times by limiting the number of results processed at once.
   */
  limit?: number | undefined;
  /**
   * An optional query parameter that allows users to apply filters to the data being retrieved. This parameter supports complex filtering using a deep object style, enabling precise data retrieval based on specific criteria such as name, email, or associated company ID. Filters help in narrowing down the results to match specific conditions, enhancing the relevance of the data returned.
   */
  filter?: components.ContactsFilter | undefined;
  /**
   * The 'sort' parameter enables you to order the results based on specified fields. It supports sorting by fields such as 'created_at', 'updated_at', 'name', 'first_name', 'last_name', and 'email'. You can also specify the direction of sorting, either ascending ('asc') or descending ('desc'). This parameter is useful for organizing the data in a meaningful way.
   */
  sort?: components.ContactsSort | undefined;
  /**
   * The 'pass_through' parameter allows users to include additional, unmapped query parameters in the API request. These parameters are passed directly to the downstream service, enabling custom queries that are not explicitly defined in the API. This feature is useful for advanced users who need to leverage specific functionalities of the underlying service.
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' query parameter allows API users to customize the response by specifying which fields to include. This parameter accepts a comma-separated string of field names, enabling users to retrieve only the necessary data. If omitted, the API returns all available fields. Nested properties can be requested using dot notation, enhancing the flexibility of data retrieval.
   */
  fields?: string | null | undefined;
};

export type ContactsAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Contacts
   */
  contactsListResponse?: components.ContactsListResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const ContactsAllSecurity$inboundSchema: z.ZodType<
  ContactsAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ContactsAllSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ContactsAllSecurity$outboundSchema: z.ZodType<
  ContactsAllSecurity$Outbound,
  z.ZodTypeDef,
  ContactsAllSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllSecurity$ {
  /** @deprecated use `ContactsAllSecurity$inboundSchema` instead. */
  export const inboundSchema = ContactsAllSecurity$inboundSchema;
  /** @deprecated use `ContactsAllSecurity$outboundSchema` instead. */
  export const outboundSchema = ContactsAllSecurity$outboundSchema;
  /** @deprecated use `ContactsAllSecurity$Outbound` instead. */
  export type Outbound = ContactsAllSecurity$Outbound;
}

export function contactsAllSecurityToJSON(
  contactsAllSecurity: ContactsAllSecurity,
): string {
  return JSON.stringify(
    ContactsAllSecurity$outboundSchema.parse(contactsAllSecurity),
  );
}

export function contactsAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllSecurity' from JSON`,
  );
}

/** @internal */
export const ContactsAllRequest$inboundSchema: z.ZodType<
  ContactsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: components.ContactsFilter$inboundSchema.optional(),
  sort: components.ContactsSort$inboundSchema.optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ContactsAllRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: components.ContactsFilter$Outbound | undefined;
  sort?: components.ContactsSort$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const ContactsAllRequest$outboundSchema: z.ZodType<
  ContactsAllRequest$Outbound,
  z.ZodTypeDef,
  ContactsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: components.ContactsFilter$outboundSchema.optional(),
  sort: components.ContactsSort$outboundSchema.optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllRequest$ {
  /** @deprecated use `ContactsAllRequest$inboundSchema` instead. */
  export const inboundSchema = ContactsAllRequest$inboundSchema;
  /** @deprecated use `ContactsAllRequest$outboundSchema` instead. */
  export const outboundSchema = ContactsAllRequest$outboundSchema;
  /** @deprecated use `ContactsAllRequest$Outbound` instead. */
  export type Outbound = ContactsAllRequest$Outbound;
}

export function contactsAllRequestToJSON(
  contactsAllRequest: ContactsAllRequest,
): string {
  return JSON.stringify(
    ContactsAllRequest$outboundSchema.parse(contactsAllRequest),
  );
}

export function contactsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllRequest' from JSON`,
  );
}

/** @internal */
export const ContactsAllResponse$inboundSchema: z.ZodType<
  ContactsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  ContactsListResponse: components.ContactsListResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "ContactsListResponse": "contactsListResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type ContactsAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  ContactsListResponse?: components.ContactsListResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const ContactsAllResponse$outboundSchema: z.ZodType<
  ContactsAllResponse$Outbound,
  z.ZodTypeDef,
  ContactsAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  contactsListResponse: components.ContactsListResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    contactsListResponse: "ContactsListResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllResponse$ {
  /** @deprecated use `ContactsAllResponse$inboundSchema` instead. */
  export const inboundSchema = ContactsAllResponse$inboundSchema;
  /** @deprecated use `ContactsAllResponse$outboundSchema` instead. */
  export const outboundSchema = ContactsAllResponse$outboundSchema;
  /** @deprecated use `ContactsAllResponse$Outbound` instead. */
  export type Outbound = ContactsAllResponse$Outbound;
}

export function contactsAllResponseToJSON(
  contactsAllResponse: ContactsAllResponse,
): string {
  return JSON.stringify(
    ContactsAllResponse$outboundSchema.parse(contactsAllResponse),
  );
}

export function contactsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllResponse' from JSON`,
  );
}
