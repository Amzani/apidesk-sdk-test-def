/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsAllSecurity = {
  apiKey: string;
};

/**
 * Apply filters
 */
export type QueryParamFilter = {
  /**
   * Name of the contact to filter on
   */
  name?: string | undefined;
  /**
   * First name of the contact to filter on
   */
  firstName?: string | undefined;
  /**
   * Last name of the contact to filter on
   */
  lastName?: string | undefined;
  /**
   * Email of the contact to filter on
   */
  email?: string | undefined;
  /**
   * Phone number of the contact to filter on
   */
  phoneNumber?: string | undefined;
  /**
   * Unique identifier for the associated company of the contact to filter on
   */
  companyId?: string | undefined;
  /**
   * Unique identifier for the owner of the contact to filter on
   */
  ownerId?: string | undefined;
};

/**
 * The field on which to sort the Contacts
 */
export const QueryParamBy = {
  CreatedAt: "created_at",
  UpdatedAt: "updated_at",
  Name: "name",
  FirstName: "first_name",
  LastName: "last_name",
  Email: "email",
} as const;
/**
 * The field on which to sort the Contacts
 */
export type QueryParamBy = ClosedEnum<typeof QueryParamBy>;

/**
 * The direction in which to sort the results
 */
export const QueryParamDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction in which to sort the results
 */
export type QueryParamDirection = ClosedEnum<typeof QueryParamDirection>;

/**
 * Apply sorting
 */
export type QueryParamSort = {
  /**
   * The field on which to sort the Contacts
   */
  by?: QueryParamBy | undefined;
  /**
   * The direction in which to sort the results
   */
  direction?: QueryParamDirection | undefined;
};

export type ContactsAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Apply filters
   */
  filter?: QueryParamFilter | undefined;
  /**
   * Apply sorting
   */
  sort?: QueryParamSort | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type ContactsAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type ContactsAllContactsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The type of the contact.
 */
export const ContactsAllType = {
  Customer: "customer",
  Supplier: "supplier",
  Employee: "employee",
  Personal: "personal",
} as const;
/**
 * The type of the contact.
 */
export type ContactsAllType = ClosedEnum<typeof ContactsAllType>;

/**
 * The gender of the contact.
 */
export const ContactsAllGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
} as const;
/**
 * The gender of the contact.
 */
export type ContactsAllGender = ClosedEnum<typeof ContactsAllGender>;

/**
 * The type of website
 */
export const ContactsAllContactsType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type ContactsAllContactsType = ClosedEnum<
  typeof ContactsAllContactsType
>;

export type ContactsAllWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: ContactsAllContactsType | null | undefined;
};

/**
 * The type of address.
 */
export const ContactsAllContactsResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type ContactsAllContactsResponseType = ClosedEnum<
  typeof ContactsAllContactsResponseType
>;

export type ContactsAllAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: ContactsAllContactsResponseType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type ContactsAllSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const ContactsAllContactsResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type ContactsAllContactsResponse200Type = ClosedEnum<
  typeof ContactsAllContactsResponse200Type
>;

export type ContactsAllPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: ContactsAllContactsResponse200Type | null | undefined;
};

/**
 * Email type
 */
export const ContactsAllContactsResponse200ApplicationJSONType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type ContactsAllContactsResponse200ApplicationJSONType = ClosedEnum<
  typeof ContactsAllContactsResponse200ApplicationJSONType
>;

export type ContactsAllEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: ContactsAllContactsResponse200ApplicationJSONType | null | undefined;
};

export type ContactsAllValue6 = {};

export type ContactsAllValue4 = {};

export type ContactsAllValue =
  | ContactsAllValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<ContactsAllValue6>;

export type ContactsAllCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | ContactsAllValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<ContactsAllValue6>
    | null
    | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type ContactsAllCustomMappings = {};

export type ContactsAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type ContactsAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<ContactsAllExtendPaths> | undefined;
};

export type ContactsAllData = {
  /**
   * Unique identifier for the contact.
   */
  id?: string | undefined;
  /**
   * Full name of the contact.
   */
  name: string | null;
  /**
   * The owner of the contact.
   */
  ownerId?: string | null | undefined;
  /**
   * The type of the contact.
   */
  type?: ContactsAllType | null | undefined;
  /**
   * The company the contact is associated with.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company the contact is associated with.
   */
  companyName?: string | null | undefined;
  /**
   * The lead the contact is associated with.
   */
  leadId?: string | null | undefined;
  /**
   * The first name of the contact.
   */
  firstName?: string | null | undefined;
  /**
   * The middle name of the contact.
   */
  middleName?: string | null | undefined;
  /**
   * The last name of the contact.
   */
  lastName?: string | null | undefined;
  /**
   * The prefix of the contact.
   */
  prefix?: string | null | undefined;
  /**
   * The suffix of the contact.
   */
  suffix?: string | null | undefined;
  /**
   * The job title of the contact.
   */
  title?: string | null | undefined;
  /**
   * The department of the contact.
   */
  department?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  /**
   * The gender of the contact.
   */
  gender?: ContactsAllGender | null | undefined;
  /**
   * The birthday of the contact.
   */
  birthday?: string | null | undefined;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  image?: string | null | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * The lead source of the contact.
   */
  leadSource?: string | null | undefined;
  /**
   * The fax number of the contact.
   */
  fax?: string | null | undefined;
  /**
   * The description of the contact.
   */
  description?: string | null | undefined;
  /**
   * The current balance of the contact.
   */
  currentBalance?: number | null | undefined;
  /**
   * The status of the contact.
   */
  status?: string | null | undefined;
  /**
   * The active status of the contact.
   */
  active?: boolean | null | undefined;
  websites?: Array<ContactsAllWebsites> | undefined;
  addresses?: Array<ContactsAllAddresses> | undefined;
  socialLinks?: Array<ContactsAllSocialLinks> | undefined;
  phoneNumbers?: Array<ContactsAllPhoneNumbers> | undefined;
  emails?: Array<ContactsAllEmails> | undefined;
  emailDomain?: string | null | undefined;
  customFields?: Array<ContactsAllCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * The first call date of the contact.
   */
  firstCallAt?: Date | null | undefined;
  /**
   * The first email date of the contact.
   */
  firstEmailAt?: Date | null | undefined;
  /**
   * The last activity date of the contact.
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: ContactsAllCustomMappings | null | undefined;
  /**
   * The last update date of the contact.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The creation date of the contact.
   */
  createdAt?: Date | null | undefined;
  /**
   * The opportunity ids of the contact.
   */
  opportunityIds?: Array<string> | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<ContactsAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type ContactsAllCursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type ContactsAllMeta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: ContactsAllCursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type ContactsAllLinks = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Contacts
 */
export type ContactsAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<ContactsAllData>;
  /**
   * Response metadata
   */
  meta?: ContactsAllMeta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: ContactsAllLinks | undefined;
};

export type ContactsAllResponse =
  | ContactsAllContactsResponseBody
  | ContactsAllResponseBody;

/** @internal */
export const ContactsAllSecurity$inboundSchema: z.ZodType<
  ContactsAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type ContactsAllSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const ContactsAllSecurity$outboundSchema: z.ZodType<
  ContactsAllSecurity$Outbound,
  z.ZodTypeDef,
  ContactsAllSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllSecurity$ {
  /** @deprecated use `ContactsAllSecurity$inboundSchema` instead. */
  export const inboundSchema = ContactsAllSecurity$inboundSchema;
  /** @deprecated use `ContactsAllSecurity$outboundSchema` instead. */
  export const outboundSchema = ContactsAllSecurity$outboundSchema;
  /** @deprecated use `ContactsAllSecurity$Outbound` instead. */
  export type Outbound = ContactsAllSecurity$Outbound;
}

export function contactsAllSecurityToJSON(
  contactsAllSecurity: ContactsAllSecurity,
): string {
  return JSON.stringify(
    ContactsAllSecurity$outboundSchema.parse(contactsAllSecurity),
  );
}

export function contactsAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllSecurity' from JSON`,
  );
}

/** @internal */
export const QueryParamFilter$inboundSchema: z.ZodType<
  QueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone_number: z.string().optional(),
  company_id: z.string().optional(),
  owner_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "phone_number": "phoneNumber",
    "company_id": "companyId",
    "owner_id": "ownerId",
  });
});

/** @internal */
export type QueryParamFilter$Outbound = {
  name?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone_number?: string | undefined;
  company_id?: string | undefined;
  owner_id?: string | undefined;
};

/** @internal */
export const QueryParamFilter$outboundSchema: z.ZodType<
  QueryParamFilter$Outbound,
  z.ZodTypeDef,
  QueryParamFilter
> = z.object({
  name: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phoneNumber: z.string().optional(),
  companyId: z.string().optional(),
  ownerId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    phoneNumber: "phone_number",
    companyId: "company_id",
    ownerId: "owner_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamFilter$ {
  /** @deprecated use `QueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamFilter$inboundSchema;
  /** @deprecated use `QueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamFilter$outboundSchema;
  /** @deprecated use `QueryParamFilter$Outbound` instead. */
  export type Outbound = QueryParamFilter$Outbound;
}

export function queryParamFilterToJSON(
  queryParamFilter: QueryParamFilter,
): string {
  return JSON.stringify(
    QueryParamFilter$outboundSchema.parse(queryParamFilter),
  );
}

export function queryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamBy$inboundSchema: z.ZodNativeEnum<typeof QueryParamBy> =
  z.nativeEnum(QueryParamBy);

/** @internal */
export const QueryParamBy$outboundSchema: z.ZodNativeEnum<typeof QueryParamBy> =
  QueryParamBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamBy$ {
  /** @deprecated use `QueryParamBy$inboundSchema` instead. */
  export const inboundSchema = QueryParamBy$inboundSchema;
  /** @deprecated use `QueryParamBy$outboundSchema` instead. */
  export const outboundSchema = QueryParamBy$outboundSchema;
}

/** @internal */
export const QueryParamDirection$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamDirection
> = z.nativeEnum(QueryParamDirection);

/** @internal */
export const QueryParamDirection$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamDirection
> = QueryParamDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamDirection$ {
  /** @deprecated use `QueryParamDirection$inboundSchema` instead. */
  export const inboundSchema = QueryParamDirection$inboundSchema;
  /** @deprecated use `QueryParamDirection$outboundSchema` instead. */
  export const outboundSchema = QueryParamDirection$outboundSchema;
}

/** @internal */
export const QueryParamSort$inboundSchema: z.ZodType<
  QueryParamSort,
  z.ZodTypeDef,
  unknown
> = z.object({
  by: QueryParamBy$inboundSchema.optional(),
  direction: QueryParamDirection$inboundSchema.default("asc"),
});

/** @internal */
export type QueryParamSort$Outbound = {
  by?: string | undefined;
  direction: string;
};

/** @internal */
export const QueryParamSort$outboundSchema: z.ZodType<
  QueryParamSort$Outbound,
  z.ZodTypeDef,
  QueryParamSort
> = z.object({
  by: QueryParamBy$outboundSchema.optional(),
  direction: QueryParamDirection$outboundSchema.default("asc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSort$ {
  /** @deprecated use `QueryParamSort$inboundSchema` instead. */
  export const inboundSchema = QueryParamSort$inboundSchema;
  /** @deprecated use `QueryParamSort$outboundSchema` instead. */
  export const outboundSchema = QueryParamSort$outboundSchema;
  /** @deprecated use `QueryParamSort$Outbound` instead. */
  export type Outbound = QueryParamSort$Outbound;
}

export function queryParamSortToJSON(queryParamSort: QueryParamSort): string {
  return JSON.stringify(QueryParamSort$outboundSchema.parse(queryParamSort));
}

export function queryParamSortFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamSort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamSort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamSort' from JSON`,
  );
}

/** @internal */
export const ContactsAllRequest$inboundSchema: z.ZodType<
  ContactsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => QueryParamFilter$inboundSchema).optional(),
  sort: z.lazy(() => QueryParamSort$inboundSchema).optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ContactsAllRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: QueryParamFilter$Outbound | undefined;
  sort?: QueryParamSort$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const ContactsAllRequest$outboundSchema: z.ZodType<
  ContactsAllRequest$Outbound,
  z.ZodTypeDef,
  ContactsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => QueryParamFilter$outboundSchema).optional(),
  sort: z.lazy(() => QueryParamSort$outboundSchema).optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllRequest$ {
  /** @deprecated use `ContactsAllRequest$inboundSchema` instead. */
  export const inboundSchema = ContactsAllRequest$inboundSchema;
  /** @deprecated use `ContactsAllRequest$outboundSchema` instead. */
  export const outboundSchema = ContactsAllRequest$outboundSchema;
  /** @deprecated use `ContactsAllRequest$Outbound` instead. */
  export type Outbound = ContactsAllRequest$Outbound;
}

export function contactsAllRequestToJSON(
  contactsAllRequest: ContactsAllRequest,
): string {
  return JSON.stringify(
    ContactsAllRequest$outboundSchema.parse(contactsAllRequest),
  );
}

export function contactsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllRequest' from JSON`,
  );
}

/** @internal */
export const ContactsAllDetail$inboundSchema: z.ZodType<
  ContactsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type ContactsAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const ContactsAllDetail$outboundSchema: z.ZodType<
  ContactsAllDetail$Outbound,
  z.ZodTypeDef,
  ContactsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllDetail$ {
  /** @deprecated use `ContactsAllDetail$inboundSchema` instead. */
  export const inboundSchema = ContactsAllDetail$inboundSchema;
  /** @deprecated use `ContactsAllDetail$outboundSchema` instead. */
  export const outboundSchema = ContactsAllDetail$outboundSchema;
  /** @deprecated use `ContactsAllDetail$Outbound` instead. */
  export type Outbound = ContactsAllDetail$Outbound;
}

export function contactsAllDetailToJSON(
  contactsAllDetail: ContactsAllDetail,
): string {
  return JSON.stringify(
    ContactsAllDetail$outboundSchema.parse(contactsAllDetail),
  );
}

export function contactsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllDetail' from JSON`,
  );
}

/** @internal */
export const ContactsAllContactsResponseBody$inboundSchema: z.ZodType<
  ContactsAllContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type ContactsAllContactsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const ContactsAllContactsResponseBody$outboundSchema: z.ZodType<
  ContactsAllContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsAllContactsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsResponseBody$ {
  /** @deprecated use `ContactsAllContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsAllContactsResponseBody$inboundSchema;
  /** @deprecated use `ContactsAllContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsAllContactsResponseBody$outboundSchema;
  /** @deprecated use `ContactsAllContactsResponseBody$Outbound` instead. */
  export type Outbound = ContactsAllContactsResponseBody$Outbound;
}

export function contactsAllContactsResponseBodyToJSON(
  contactsAllContactsResponseBody: ContactsAllContactsResponseBody,
): string {
  return JSON.stringify(
    ContactsAllContactsResponseBody$outboundSchema.parse(
      contactsAllContactsResponseBody,
    ),
  );
}

export function contactsAllContactsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllContactsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllContactsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllContactsResponseBody' from JSON`,
  );
}

/** @internal */
export const ContactsAllType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsAllType
> = z.nativeEnum(ContactsAllType);

/** @internal */
export const ContactsAllType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsAllType
> = ContactsAllType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllType$ {
  /** @deprecated use `ContactsAllType$inboundSchema` instead. */
  export const inboundSchema = ContactsAllType$inboundSchema;
  /** @deprecated use `ContactsAllType$outboundSchema` instead. */
  export const outboundSchema = ContactsAllType$outboundSchema;
}

/** @internal */
export const ContactsAllGender$inboundSchema: z.ZodNativeEnum<
  typeof ContactsAllGender
> = z.nativeEnum(ContactsAllGender);

/** @internal */
export const ContactsAllGender$outboundSchema: z.ZodNativeEnum<
  typeof ContactsAllGender
> = ContactsAllGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllGender$ {
  /** @deprecated use `ContactsAllGender$inboundSchema` instead. */
  export const inboundSchema = ContactsAllGender$inboundSchema;
  /** @deprecated use `ContactsAllGender$outboundSchema` instead. */
  export const outboundSchema = ContactsAllGender$outboundSchema;
}

/** @internal */
export const ContactsAllContactsType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsAllContactsType
> = z.nativeEnum(ContactsAllContactsType);

/** @internal */
export const ContactsAllContactsType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsAllContactsType
> = ContactsAllContactsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsType$ {
  /** @deprecated use `ContactsAllContactsType$inboundSchema` instead. */
  export const inboundSchema = ContactsAllContactsType$inboundSchema;
  /** @deprecated use `ContactsAllContactsType$outboundSchema` instead. */
  export const outboundSchema = ContactsAllContactsType$outboundSchema;
}

/** @internal */
export const ContactsAllWebsites$inboundSchema: z.ZodType<
  ContactsAllWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ContactsAllContactsType$inboundSchema).optional(),
});

/** @internal */
export type ContactsAllWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsAllWebsites$outboundSchema: z.ZodType<
  ContactsAllWebsites$Outbound,
  z.ZodTypeDef,
  ContactsAllWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ContactsAllContactsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllWebsites$ {
  /** @deprecated use `ContactsAllWebsites$inboundSchema` instead. */
  export const inboundSchema = ContactsAllWebsites$inboundSchema;
  /** @deprecated use `ContactsAllWebsites$outboundSchema` instead. */
  export const outboundSchema = ContactsAllWebsites$outboundSchema;
  /** @deprecated use `ContactsAllWebsites$Outbound` instead. */
  export type Outbound = ContactsAllWebsites$Outbound;
}

export function contactsAllWebsitesToJSON(
  contactsAllWebsites: ContactsAllWebsites,
): string {
  return JSON.stringify(
    ContactsAllWebsites$outboundSchema.parse(contactsAllWebsites),
  );
}

export function contactsAllWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllWebsites' from JSON`,
  );
}

/** @internal */
export const ContactsAllContactsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ContactsAllContactsResponseType
> = z.nativeEnum(ContactsAllContactsResponseType);

/** @internal */
export const ContactsAllContactsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ContactsAllContactsResponseType
> = ContactsAllContactsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsResponseType$ {
  /** @deprecated use `ContactsAllContactsResponseType$inboundSchema` instead. */
  export const inboundSchema = ContactsAllContactsResponseType$inboundSchema;
  /** @deprecated use `ContactsAllContactsResponseType$outboundSchema` instead. */
  export const outboundSchema = ContactsAllContactsResponseType$outboundSchema;
}

/** @internal */
export const ContactsAllAddresses$inboundSchema: z.ZodType<
  ContactsAllAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAllContactsResponseType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type ContactsAllAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const ContactsAllAddresses$outboundSchema: z.ZodType<
  ContactsAllAddresses$Outbound,
  z.ZodTypeDef,
  ContactsAllAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAllContactsResponseType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllAddresses$ {
  /** @deprecated use `ContactsAllAddresses$inboundSchema` instead. */
  export const inboundSchema = ContactsAllAddresses$inboundSchema;
  /** @deprecated use `ContactsAllAddresses$outboundSchema` instead. */
  export const outboundSchema = ContactsAllAddresses$outboundSchema;
  /** @deprecated use `ContactsAllAddresses$Outbound` instead. */
  export type Outbound = ContactsAllAddresses$Outbound;
}

export function contactsAllAddressesToJSON(
  contactsAllAddresses: ContactsAllAddresses,
): string {
  return JSON.stringify(
    ContactsAllAddresses$outboundSchema.parse(contactsAllAddresses),
  );
}

export function contactsAllAddressesFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllAddresses' from JSON`,
  );
}

/** @internal */
export const ContactsAllSocialLinks$inboundSchema: z.ZodType<
  ContactsAllSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type ContactsAllSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsAllSocialLinks$outboundSchema: z.ZodType<
  ContactsAllSocialLinks$Outbound,
  z.ZodTypeDef,
  ContactsAllSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllSocialLinks$ {
  /** @deprecated use `ContactsAllSocialLinks$inboundSchema` instead. */
  export const inboundSchema = ContactsAllSocialLinks$inboundSchema;
  /** @deprecated use `ContactsAllSocialLinks$outboundSchema` instead. */
  export const outboundSchema = ContactsAllSocialLinks$outboundSchema;
  /** @deprecated use `ContactsAllSocialLinks$Outbound` instead. */
  export type Outbound = ContactsAllSocialLinks$Outbound;
}

export function contactsAllSocialLinksToJSON(
  contactsAllSocialLinks: ContactsAllSocialLinks,
): string {
  return JSON.stringify(
    ContactsAllSocialLinks$outboundSchema.parse(contactsAllSocialLinks),
  );
}

export function contactsAllSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllSocialLinks' from JSON`,
  );
}

/** @internal */
export const ContactsAllContactsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof ContactsAllContactsResponse200Type
> = z.nativeEnum(ContactsAllContactsResponse200Type);

/** @internal */
export const ContactsAllContactsResponse200Type$outboundSchema: z.ZodNativeEnum<
  typeof ContactsAllContactsResponse200Type
> = ContactsAllContactsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsResponse200Type$ {
  /** @deprecated use `ContactsAllContactsResponse200Type$inboundSchema` instead. */
  export const inboundSchema = ContactsAllContactsResponse200Type$inboundSchema;
  /** @deprecated use `ContactsAllContactsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAllContactsResponse200Type$outboundSchema;
}

/** @internal */
export const ContactsAllPhoneNumbers$inboundSchema: z.ZodType<
  ContactsAllPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAllContactsResponse200Type$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type ContactsAllPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsAllPhoneNumbers$outboundSchema: z.ZodType<
  ContactsAllPhoneNumbers$Outbound,
  z.ZodTypeDef,
  ContactsAllPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAllContactsResponse200Type$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllPhoneNumbers$ {
  /** @deprecated use `ContactsAllPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = ContactsAllPhoneNumbers$inboundSchema;
  /** @deprecated use `ContactsAllPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = ContactsAllPhoneNumbers$outboundSchema;
  /** @deprecated use `ContactsAllPhoneNumbers$Outbound` instead. */
  export type Outbound = ContactsAllPhoneNumbers$Outbound;
}

export function contactsAllPhoneNumbersToJSON(
  contactsAllPhoneNumbers: ContactsAllPhoneNumbers,
): string {
  return JSON.stringify(
    ContactsAllPhoneNumbers$outboundSchema.parse(contactsAllPhoneNumbers),
  );
}

export function contactsAllPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const ContactsAllContactsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof ContactsAllContactsResponse200ApplicationJSONType> = z
    .nativeEnum(ContactsAllContactsResponse200ApplicationJSONType);

/** @internal */
export const ContactsAllContactsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof ContactsAllContactsResponse200ApplicationJSONType> =
    ContactsAllContactsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllContactsResponse200ApplicationJSONType$ {
  /** @deprecated use `ContactsAllContactsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    ContactsAllContactsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `ContactsAllContactsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    ContactsAllContactsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const ContactsAllEmails$inboundSchema: z.ZodType<
  ContactsAllEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    ContactsAllContactsResponse200ApplicationJSONType$inboundSchema,
  ).optional(),
});

/** @internal */
export type ContactsAllEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const ContactsAllEmails$outboundSchema: z.ZodType<
  ContactsAllEmails$Outbound,
  z.ZodTypeDef,
  ContactsAllEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    ContactsAllContactsResponse200ApplicationJSONType$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllEmails$ {
  /** @deprecated use `ContactsAllEmails$inboundSchema` instead. */
  export const inboundSchema = ContactsAllEmails$inboundSchema;
  /** @deprecated use `ContactsAllEmails$outboundSchema` instead. */
  export const outboundSchema = ContactsAllEmails$outboundSchema;
  /** @deprecated use `ContactsAllEmails$Outbound` instead. */
  export type Outbound = ContactsAllEmails$Outbound;
}

export function contactsAllEmailsToJSON(
  contactsAllEmails: ContactsAllEmails,
): string {
  return JSON.stringify(
    ContactsAllEmails$outboundSchema.parse(contactsAllEmails),
  );
}

export function contactsAllEmailsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllEmails' from JSON`,
  );
}

/** @internal */
export const ContactsAllValue6$inboundSchema: z.ZodType<
  ContactsAllValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactsAllValue6$Outbound = {};

/** @internal */
export const ContactsAllValue6$outboundSchema: z.ZodType<
  ContactsAllValue6$Outbound,
  z.ZodTypeDef,
  ContactsAllValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllValue6$ {
  /** @deprecated use `ContactsAllValue6$inboundSchema` instead. */
  export const inboundSchema = ContactsAllValue6$inboundSchema;
  /** @deprecated use `ContactsAllValue6$outboundSchema` instead. */
  export const outboundSchema = ContactsAllValue6$outboundSchema;
  /** @deprecated use `ContactsAllValue6$Outbound` instead. */
  export type Outbound = ContactsAllValue6$Outbound;
}

export function contactsAllValue6ToJSON(
  contactsAllValue6: ContactsAllValue6,
): string {
  return JSON.stringify(
    ContactsAllValue6$outboundSchema.parse(contactsAllValue6),
  );
}

export function contactsAllValue6FromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllValue6' from JSON`,
  );
}

/** @internal */
export const ContactsAllValue4$inboundSchema: z.ZodType<
  ContactsAllValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactsAllValue4$Outbound = {};

/** @internal */
export const ContactsAllValue4$outboundSchema: z.ZodType<
  ContactsAllValue4$Outbound,
  z.ZodTypeDef,
  ContactsAllValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllValue4$ {
  /** @deprecated use `ContactsAllValue4$inboundSchema` instead. */
  export const inboundSchema = ContactsAllValue4$inboundSchema;
  /** @deprecated use `ContactsAllValue4$outboundSchema` instead. */
  export const outboundSchema = ContactsAllValue4$outboundSchema;
  /** @deprecated use `ContactsAllValue4$Outbound` instead. */
  export type Outbound = ContactsAllValue4$Outbound;
}

export function contactsAllValue4ToJSON(
  contactsAllValue4: ContactsAllValue4,
): string {
  return JSON.stringify(
    ContactsAllValue4$outboundSchema.parse(contactsAllValue4),
  );
}

export function contactsAllValue4FromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllValue4' from JSON`,
  );
}

/** @internal */
export const ContactsAllValue$inboundSchema: z.ZodType<
  ContactsAllValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContactsAllValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ContactsAllValue6$inboundSchema)),
]);

/** @internal */
export type ContactsAllValue$Outbound =
  | ContactsAllValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<ContactsAllValue6$Outbound>;

/** @internal */
export const ContactsAllValue$outboundSchema: z.ZodType<
  ContactsAllValue$Outbound,
  z.ZodTypeDef,
  ContactsAllValue
> = z.union([
  z.lazy(() => ContactsAllValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => ContactsAllValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllValue$ {
  /** @deprecated use `ContactsAllValue$inboundSchema` instead. */
  export const inboundSchema = ContactsAllValue$inboundSchema;
  /** @deprecated use `ContactsAllValue$outboundSchema` instead. */
  export const outboundSchema = ContactsAllValue$outboundSchema;
  /** @deprecated use `ContactsAllValue$Outbound` instead. */
  export type Outbound = ContactsAllValue$Outbound;
}

export function contactsAllValueToJSON(
  contactsAllValue: ContactsAllValue,
): string {
  return JSON.stringify(
    ContactsAllValue$outboundSchema.parse(contactsAllValue),
  );
}

export function contactsAllValueFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllValue' from JSON`,
  );
}

/** @internal */
export const ContactsAllCustomFields$inboundSchema: z.ZodType<
  ContactsAllCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ContactsAllValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ContactsAllValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type ContactsAllCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | ContactsAllValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<ContactsAllValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ContactsAllCustomFields$outboundSchema: z.ZodType<
  ContactsAllCustomFields$Outbound,
  z.ZodTypeDef,
  ContactsAllCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => ContactsAllValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => ContactsAllValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllCustomFields$ {
  /** @deprecated use `ContactsAllCustomFields$inboundSchema` instead. */
  export const inboundSchema = ContactsAllCustomFields$inboundSchema;
  /** @deprecated use `ContactsAllCustomFields$outboundSchema` instead. */
  export const outboundSchema = ContactsAllCustomFields$outboundSchema;
  /** @deprecated use `ContactsAllCustomFields$Outbound` instead. */
  export type Outbound = ContactsAllCustomFields$Outbound;
}

export function contactsAllCustomFieldsToJSON(
  contactsAllCustomFields: ContactsAllCustomFields,
): string {
  return JSON.stringify(
    ContactsAllCustomFields$outboundSchema.parse(contactsAllCustomFields),
  );
}

export function contactsAllCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllCustomFields' from JSON`,
  );
}

/** @internal */
export const ContactsAllCustomMappings$inboundSchema: z.ZodType<
  ContactsAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ContactsAllCustomMappings$Outbound = {};

/** @internal */
export const ContactsAllCustomMappings$outboundSchema: z.ZodType<
  ContactsAllCustomMappings$Outbound,
  z.ZodTypeDef,
  ContactsAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllCustomMappings$ {
  /** @deprecated use `ContactsAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema = ContactsAllCustomMappings$inboundSchema;
  /** @deprecated use `ContactsAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema = ContactsAllCustomMappings$outboundSchema;
  /** @deprecated use `ContactsAllCustomMappings$Outbound` instead. */
  export type Outbound = ContactsAllCustomMappings$Outbound;
}

export function contactsAllCustomMappingsToJSON(
  contactsAllCustomMappings: ContactsAllCustomMappings,
): string {
  return JSON.stringify(
    ContactsAllCustomMappings$outboundSchema.parse(contactsAllCustomMappings),
  );
}

export function contactsAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const ContactsAllExtendPaths$inboundSchema: z.ZodType<
  ContactsAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ContactsAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ContactsAllExtendPaths$outboundSchema: z.ZodType<
  ContactsAllExtendPaths$Outbound,
  z.ZodTypeDef,
  ContactsAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllExtendPaths$ {
  /** @deprecated use `ContactsAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ContactsAllExtendPaths$inboundSchema;
  /** @deprecated use `ContactsAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ContactsAllExtendPaths$outboundSchema;
  /** @deprecated use `ContactsAllExtendPaths$Outbound` instead. */
  export type Outbound = ContactsAllExtendPaths$Outbound;
}

export function contactsAllExtendPathsToJSON(
  contactsAllExtendPaths: ContactsAllExtendPaths,
): string {
  return JSON.stringify(
    ContactsAllExtendPaths$outboundSchema.parse(contactsAllExtendPaths),
  );
}

export function contactsAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const ContactsAllPassThrough$inboundSchema: z.ZodType<
  ContactsAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ContactsAllExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type ContactsAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ContactsAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const ContactsAllPassThrough$outboundSchema: z.ZodType<
  ContactsAllPassThrough$Outbound,
  z.ZodTypeDef,
  ContactsAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ContactsAllExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllPassThrough$ {
  /** @deprecated use `ContactsAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = ContactsAllPassThrough$inboundSchema;
  /** @deprecated use `ContactsAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = ContactsAllPassThrough$outboundSchema;
  /** @deprecated use `ContactsAllPassThrough$Outbound` instead. */
  export type Outbound = ContactsAllPassThrough$Outbound;
}

export function contactsAllPassThroughToJSON(
  contactsAllPassThrough: ContactsAllPassThrough,
): string {
  return JSON.stringify(
    ContactsAllPassThrough$outboundSchema.parse(contactsAllPassThrough),
  );
}

export function contactsAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllPassThrough' from JSON`,
  );
}

/** @internal */
export const ContactsAllData$inboundSchema: z.ZodType<
  ContactsAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAllType$inboundSchema).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(ContactsAllGender$inboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ContactsAllWebsites$inboundSchema)).optional(),
  addresses: z.array(z.lazy(() => ContactsAllAddresses$inboundSchema))
    .optional(),
  social_links: z.array(z.lazy(() => ContactsAllSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(z.lazy(() => ContactsAllPhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => ContactsAllEmails$inboundSchema)).optional(),
  email_domain: z.nullable(z.string()).optional(),
  custom_fields: z.array(z.lazy(() => ContactsAllCustomFields$inboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  first_call_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  first_email_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_activity_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => ContactsAllCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  opportunity_ids: z.array(z.string()).optional(),
  pass_through: z.array(z.lazy(() => ContactsAllPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "company_id": "companyId",
    "company_name": "companyName",
    "lead_id": "leadId",
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "photo_url": "photoUrl",
    "lead_source": "leadSource",
    "current_balance": "currentBalance",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "email_domain": "emailDomain",
    "custom_fields": "customFields",
    "first_call_at": "firstCallAt",
    "first_email_at": "firstEmailAt",
    "last_activity_at": "lastActivityAt",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "opportunity_ids": "opportunityIds",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ContactsAllData$Outbound = {
  id?: string | undefined;
  name: string | null;
  owner_id?: string | null | undefined;
  type?: string | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  lead_id?: string | null | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  prefix?: string | null | undefined;
  suffix?: string | null | undefined;
  title?: string | null | undefined;
  department?: string | null | undefined;
  language?: string | null | undefined;
  gender?: string | null | undefined;
  birthday?: string | null | undefined;
  image?: string | null | undefined;
  photo_url?: string | null | undefined;
  lead_source?: string | null | undefined;
  fax?: string | null | undefined;
  description?: string | null | undefined;
  current_balance?: number | null | undefined;
  status?: string | null | undefined;
  active?: boolean | null | undefined;
  websites?: Array<ContactsAllWebsites$Outbound> | undefined;
  addresses?: Array<ContactsAllAddresses$Outbound> | undefined;
  social_links?: Array<ContactsAllSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<ContactsAllPhoneNumbers$Outbound> | undefined;
  emails?: Array<ContactsAllEmails$Outbound> | undefined;
  email_domain?: string | null | undefined;
  custom_fields?: Array<ContactsAllCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  first_call_at?: string | null | undefined;
  first_email_at?: string | null | undefined;
  last_activity_at?: string | null | undefined;
  custom_mappings?: ContactsAllCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  opportunity_ids?: Array<string> | undefined;
  pass_through?: Array<ContactsAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const ContactsAllData$outboundSchema: z.ZodType<
  ContactsAllData$Outbound,
  z.ZodTypeDef,
  ContactsAllData
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  type: z.nullable(ContactsAllType$outboundSchema).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  suffix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  gender: z.nullable(ContactsAllGender$outboundSchema).optional(),
  birthday: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  status: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  websites: z.array(z.lazy(() => ContactsAllWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => ContactsAllAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(z.lazy(() => ContactsAllSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => ContactsAllPhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => ContactsAllEmails$outboundSchema)).optional(),
  emailDomain: z.nullable(z.string()).optional(),
  customFields: z.array(z.lazy(() => ContactsAllCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  firstCallAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  firstEmailAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => ContactsAllCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  opportunityIds: z.array(z.string()).optional(),
  passThrough: z.array(z.lazy(() => ContactsAllPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    companyId: "company_id",
    companyName: "company_name",
    leadId: "lead_id",
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    photoUrl: "photo_url",
    leadSource: "lead_source",
    currentBalance: "current_balance",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    emailDomain: "email_domain",
    customFields: "custom_fields",
    firstCallAt: "first_call_at",
    firstEmailAt: "first_email_at",
    lastActivityAt: "last_activity_at",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    opportunityIds: "opportunity_ids",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllData$ {
  /** @deprecated use `ContactsAllData$inboundSchema` instead. */
  export const inboundSchema = ContactsAllData$inboundSchema;
  /** @deprecated use `ContactsAllData$outboundSchema` instead. */
  export const outboundSchema = ContactsAllData$outboundSchema;
  /** @deprecated use `ContactsAllData$Outbound` instead. */
  export type Outbound = ContactsAllData$Outbound;
}

export function contactsAllDataToJSON(
  contactsAllData: ContactsAllData,
): string {
  return JSON.stringify(ContactsAllData$outboundSchema.parse(contactsAllData));
}

export function contactsAllDataFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllData' from JSON`,
  );
}

/** @internal */
export const ContactsAllCursors$inboundSchema: z.ZodType<
  ContactsAllCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ContactsAllCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ContactsAllCursors$outboundSchema: z.ZodType<
  ContactsAllCursors$Outbound,
  z.ZodTypeDef,
  ContactsAllCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllCursors$ {
  /** @deprecated use `ContactsAllCursors$inboundSchema` instead. */
  export const inboundSchema = ContactsAllCursors$inboundSchema;
  /** @deprecated use `ContactsAllCursors$outboundSchema` instead. */
  export const outboundSchema = ContactsAllCursors$outboundSchema;
  /** @deprecated use `ContactsAllCursors$Outbound` instead. */
  export type Outbound = ContactsAllCursors$Outbound;
}

export function contactsAllCursorsToJSON(
  contactsAllCursors: ContactsAllCursors,
): string {
  return JSON.stringify(
    ContactsAllCursors$outboundSchema.parse(contactsAllCursors),
  );
}

export function contactsAllCursorsFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllCursors' from JSON`,
  );
}

/** @internal */
export const ContactsAllMeta$inboundSchema: z.ZodType<
  ContactsAllMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => ContactsAllCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type ContactsAllMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: ContactsAllCursors$Outbound | undefined;
};

/** @internal */
export const ContactsAllMeta$outboundSchema: z.ZodType<
  ContactsAllMeta$Outbound,
  z.ZodTypeDef,
  ContactsAllMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => ContactsAllCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllMeta$ {
  /** @deprecated use `ContactsAllMeta$inboundSchema` instead. */
  export const inboundSchema = ContactsAllMeta$inboundSchema;
  /** @deprecated use `ContactsAllMeta$outboundSchema` instead. */
  export const outboundSchema = ContactsAllMeta$outboundSchema;
  /** @deprecated use `ContactsAllMeta$Outbound` instead. */
  export type Outbound = ContactsAllMeta$Outbound;
}

export function contactsAllMetaToJSON(
  contactsAllMeta: ContactsAllMeta,
): string {
  return JSON.stringify(ContactsAllMeta$outboundSchema.parse(contactsAllMeta));
}

export function contactsAllMetaFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllMeta' from JSON`,
  );
}

/** @internal */
export const ContactsAllLinks$inboundSchema: z.ZodType<
  ContactsAllLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type ContactsAllLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const ContactsAllLinks$outboundSchema: z.ZodType<
  ContactsAllLinks$Outbound,
  z.ZodTypeDef,
  ContactsAllLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllLinks$ {
  /** @deprecated use `ContactsAllLinks$inboundSchema` instead. */
  export const inboundSchema = ContactsAllLinks$inboundSchema;
  /** @deprecated use `ContactsAllLinks$outboundSchema` instead. */
  export const outboundSchema = ContactsAllLinks$outboundSchema;
  /** @deprecated use `ContactsAllLinks$Outbound` instead. */
  export type Outbound = ContactsAllLinks$Outbound;
}

export function contactsAllLinksToJSON(
  contactsAllLinks: ContactsAllLinks,
): string {
  return JSON.stringify(
    ContactsAllLinks$outboundSchema.parse(contactsAllLinks),
  );
}

export function contactsAllLinksFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllLinks' from JSON`,
  );
}

/** @internal */
export const ContactsAllResponseBody$inboundSchema: z.ZodType<
  ContactsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ContactsAllData$inboundSchema)),
  meta: z.lazy(() => ContactsAllMeta$inboundSchema).optional(),
  links: z.lazy(() => ContactsAllLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type ContactsAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<ContactsAllData$Outbound>;
  meta?: ContactsAllMeta$Outbound | undefined;
  links?: ContactsAllLinks$Outbound | undefined;
};

/** @internal */
export const ContactsAllResponseBody$outboundSchema: z.ZodType<
  ContactsAllResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => ContactsAllData$outboundSchema)),
  meta: z.lazy(() => ContactsAllMeta$outboundSchema).optional(),
  links: z.lazy(() => ContactsAllLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllResponseBody$ {
  /** @deprecated use `ContactsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsAllResponseBody$inboundSchema;
  /** @deprecated use `ContactsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsAllResponseBody$outboundSchema;
  /** @deprecated use `ContactsAllResponseBody$Outbound` instead. */
  export type Outbound = ContactsAllResponseBody$Outbound;
}

export function contactsAllResponseBodyToJSON(
  contactsAllResponseBody: ContactsAllResponseBody,
): string {
  return JSON.stringify(
    ContactsAllResponseBody$outboundSchema.parse(contactsAllResponseBody),
  );
}

export function contactsAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllResponseBody' from JSON`,
  );
}

/** @internal */
export const ContactsAllResponse$inboundSchema: z.ZodType<
  ContactsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContactsAllContactsResponseBody$inboundSchema),
  z.lazy(() => ContactsAllResponseBody$inboundSchema),
]);

/** @internal */
export type ContactsAllResponse$Outbound =
  | ContactsAllContactsResponseBody$Outbound
  | ContactsAllResponseBody$Outbound;

/** @internal */
export const ContactsAllResponse$outboundSchema: z.ZodType<
  ContactsAllResponse$Outbound,
  z.ZodTypeDef,
  ContactsAllResponse
> = z.union([
  z.lazy(() => ContactsAllContactsResponseBody$outboundSchema),
  z.lazy(() => ContactsAllResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsAllResponse$ {
  /** @deprecated use `ContactsAllResponse$inboundSchema` instead. */
  export const inboundSchema = ContactsAllResponse$inboundSchema;
  /** @deprecated use `ContactsAllResponse$outboundSchema` instead. */
  export const outboundSchema = ContactsAllResponse$outboundSchema;
  /** @deprecated use `ContactsAllResponse$Outbound` instead. */
  export type Outbound = ContactsAllResponse$Outbound;
}

export function contactsAllResponseToJSON(
  contactsAllResponse: ContactsAllResponse,
): string {
  return JSON.stringify(
    ContactsAllResponse$outboundSchema.parse(contactsAllResponse),
  );
}

export function contactsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsAllResponse' from JSON`,
  );
}
