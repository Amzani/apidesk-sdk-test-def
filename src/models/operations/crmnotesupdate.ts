/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmNotesUpdateGlobals = {
  /**
   * A unique identifier for the consumer, required to specify the data source or destination for the API operation. This ID is essential for authenticating and authorizing the request within the CRM system.
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmNotesUpdateRequest = {
  /**
   * The unique identifier of the activity to be deleted. This parameter is required to specify which activity record should be removed from the CRM system. Ensure that the ID corresponds to an existing activity to avoid errors.
   */
  id: string;
  /**
   * An optional identifier for the specific service to be called, such as 'pipedrive'. This is only required when multiple integrations are active, allowing the API to route the request to the appropriate service.
   */
  serviceId?: string | undefined;
  /**
   * A boolean flag that determines whether to include the raw response in the output. This is primarily used for debugging purposes to gain insights into the API's response structure.
   */
  raw?: boolean | undefined;
  updateNoteRequest: components.UpdateNoteRequest;
};

export type CrmNotesUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Note updated
   */
  updateNoteResponse?: components.UpdateNoteResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmNotesUpdateGlobals$inboundSchema: z.ZodType<
  CrmNotesUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmNotesUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmNotesUpdateGlobals$outboundSchema: z.ZodType<
  CrmNotesUpdateGlobals$Outbound,
  z.ZodTypeDef,
  CrmNotesUpdateGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmNotesUpdateGlobals$ {
  /** @deprecated use `CrmNotesUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmNotesUpdateGlobals$inboundSchema;
  /** @deprecated use `CrmNotesUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmNotesUpdateGlobals$outboundSchema;
  /** @deprecated use `CrmNotesUpdateGlobals$Outbound` instead. */
  export type Outbound = CrmNotesUpdateGlobals$Outbound;
}

export function crmNotesUpdateGlobalsToJSON(
  crmNotesUpdateGlobals: CrmNotesUpdateGlobals,
): string {
  return JSON.stringify(
    CrmNotesUpdateGlobals$outboundSchema.parse(crmNotesUpdateGlobals),
  );
}

export function crmNotesUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmNotesUpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmNotesUpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmNotesUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const CrmNotesUpdateRequest$inboundSchema: z.ZodType<
  CrmNotesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  UpdateNoteRequest: components.UpdateNoteRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateNoteRequest": "updateNoteRequest",
  });
});

/** @internal */
export type CrmNotesUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  UpdateNoteRequest: components.UpdateNoteRequest$Outbound;
};

/** @internal */
export const CrmNotesUpdateRequest$outboundSchema: z.ZodType<
  CrmNotesUpdateRequest$Outbound,
  z.ZodTypeDef,
  CrmNotesUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  updateNoteRequest: components.UpdateNoteRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateNoteRequest: "UpdateNoteRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmNotesUpdateRequest$ {
  /** @deprecated use `CrmNotesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = CrmNotesUpdateRequest$inboundSchema;
  /** @deprecated use `CrmNotesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = CrmNotesUpdateRequest$outboundSchema;
  /** @deprecated use `CrmNotesUpdateRequest$Outbound` instead. */
  export type Outbound = CrmNotesUpdateRequest$Outbound;
}

export function crmNotesUpdateRequestToJSON(
  crmNotesUpdateRequest: CrmNotesUpdateRequest,
): string {
  return JSON.stringify(
    CrmNotesUpdateRequest$outboundSchema.parse(crmNotesUpdateRequest),
  );
}

export function crmNotesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmNotesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmNotesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmNotesUpdateRequest' from JSON`,
  );
}

/** @internal */
export const CrmNotesUpdateResponse$inboundSchema: z.ZodType<
  CrmNotesUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UpdateNoteResponse: components.UpdateNoteResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UpdateNoteResponse": "updateNoteResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmNotesUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateNoteResponse?: components.UpdateNoteResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmNotesUpdateResponse$outboundSchema: z.ZodType<
  CrmNotesUpdateResponse$Outbound,
  z.ZodTypeDef,
  CrmNotesUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  updateNoteResponse: components.UpdateNoteResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    updateNoteResponse: "UpdateNoteResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmNotesUpdateResponse$ {
  /** @deprecated use `CrmNotesUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = CrmNotesUpdateResponse$inboundSchema;
  /** @deprecated use `CrmNotesUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = CrmNotesUpdateResponse$outboundSchema;
  /** @deprecated use `CrmNotesUpdateResponse$Outbound` instead. */
  export type Outbound = CrmNotesUpdateResponse$Outbound;
}

export function crmNotesUpdateResponseToJSON(
  crmNotesUpdateResponse: CrmNotesUpdateResponse,
): string {
  return JSON.stringify(
    CrmNotesUpdateResponse$outboundSchema.parse(crmNotesUpdateResponse),
  );
}

export function crmNotesUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmNotesUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmNotesUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmNotesUpdateResponse' from JSON`,
  );
}
