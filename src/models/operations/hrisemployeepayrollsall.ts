/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisEmployeePayrollsAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

/**
 * Apply filters
 */
export type HrisEmployeePayrollsAllQueryParamFilter = {
  /**
   * Return payrolls whose pay period is after the start date
   */
  startDate?: string | undefined;
  /**
   * Return payrolls whose pay period is before the end date
   */
  endDate?: string | undefined;
};

export type HrisEmployeePayrollsAllRequest = {
  /**
   * ID of the employee you are acting upon.
   */
  employeeId: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Apply filters
   */
  filter?: HrisEmployeePayrollsAllQueryParamFilter | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeePayrollsAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The overview of the payroll totals.
 */
export type HrisEmployeePayrollsAllTotals = {
  /**
   * The total company debit for the payroll.
   */
  companyDebit?: number | null | undefined;
  /**
   * The total tax debit for the payroll.
   */
  taxDebit?: number | null | undefined;
  /**
   * The total check amount for the payroll.
   */
  checkAmount?: number | null | undefined;
  /**
   * The net pay amount for the payroll.
   */
  netPay?: number | null | undefined;
  /**
   * The gross pay amount for the payroll.
   */
  grossPay?: number | null | undefined;
  /**
   * The total amount of employer paid taxes for the payroll.
   */
  employerTaxes?: number | null | undefined;
  /**
   * The total amount of employee paid taxes for the payroll.
   */
  employeeTaxes?: number | null | undefined;
  /**
   * The total amount of company contributed benefits for the payroll.
   */
  employerBenefitContributions?: number | null | undefined;
  /**
   * The total amount of employee deducted benefits for the payroll.
   */
  employeeBenefitDeductions?: number | null | undefined;
};

export type HrisEmployeePayrollsAllTaxes = {
  /**
   * The name of the tax.
   */
  name?: string | null | undefined;
  /**
   * Paid by employer.
   */
  employer?: boolean | null | undefined;
  /**
   * The amount of the tax.
   */
  amount?: number | null | undefined;
};

export type HrisEmployeePayrollsAllDeductions = {
  /**
   * The name of the deduction.
   */
  name?: string | null | undefined;
  /**
   * The amount deducted.
   */
  amount?: number | null | undefined;
};

export type HrisEmployeePayrollsAllBenefits = {
  /**
   * The name of the benefit.
   */
  name?: string | null | undefined;
  /**
   * The amount deducted for benefit.
   */
  employeeDeduction?: number | null | undefined;
  /**
   * The amount of employer contribution.
   */
  employerContribution?: number | null | undefined;
};

export type HrisEmployeePayrollsAllCompensations = {
  /**
   * A unique identifier for an object.
   */
  employeeId: string | null;
  /**
   * The employee's net pay. Only available when payroll has been processed
   */
  netPay?: number | null | undefined;
  /**
   * The employee's gross pay. Only available when payroll has been processed
   */
  grossPay?: number | null | undefined;
  /**
   * An array of employer and employee taxes for the pay period.
   */
  taxes?: Array<HrisEmployeePayrollsAllTaxes> | null | undefined;
  /**
   * An array of employee deductions for the pay period.
   */
  deductions?: Array<HrisEmployeePayrollsAllDeductions> | null | undefined;
  /**
   * An array of employee benefits for the pay period.
   */
  benefits?: Array<HrisEmployeePayrollsAllBenefits> | null | undefined;
};

export type HrisEmployeePayrollsAllData = {
  /**
   * A unique identifier for an object.
   */
  id: string | null;
  /**
   * ID of the employee
   */
  employeeId?: string | null | undefined;
  /**
   * The unique identifier of the company.
   */
  companyId?: string | null | undefined;
  /**
   * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
   */
  processed: boolean | null;
  /**
   * The date the payroll was processed.
   */
  processedDate?: string | null | undefined;
  /**
   * The date on which employees will be paid for the payroll.
   */
  checkDate: string | null;
  /**
   * The start date, inclusive, of the pay period.
   */
  startDate: string | null;
  /**
   * The end date, inclusive, of the pay period.
   */
  endDate: string | null;
  /**
   * The overview of the payroll totals.
   */
  totals?: HrisEmployeePayrollsAllTotals | undefined;
  /**
   * An array of compensations for the payroll.
   */
  compensations?: Array<HrisEmployeePayrollsAllCompensations> | undefined;
};

/**
 * EmployeePayrolls
 */
export type HrisEmployeePayrollsAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<HrisEmployeePayrollsAllData>;
};

export type HrisEmployeePayrollsAllResponse =
  | HrisEmployeePayrollsAllResponseBody
  | HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody;

/** @internal */
export const HrisEmployeePayrollsAllGlobals$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisEmployeePayrollsAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllGlobals$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllGlobals$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllGlobals$ {
  /** @deprecated use `HrisEmployeePayrollsAllGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsAllGlobals$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsAllGlobals$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllGlobals$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllGlobals$Outbound;
}

export function hrisEmployeePayrollsAllGlobalsToJSON(
  hrisEmployeePayrollsAllGlobals: HrisEmployeePayrollsAllGlobals,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllGlobals$outboundSchema.parse(
      hrisEmployeePayrollsAllGlobals,
    ),
  );
}

export function hrisEmployeePayrollsAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllGlobals' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllQueryParamFilter$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().optional(),
  end_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type HrisEmployeePayrollsAllQueryParamFilter$Outbound = {
  start_date?: string | undefined;
  end_date?: string | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllQueryParamFilter$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllQueryParamFilter$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllQueryParamFilter
> = z.object({
  startDate: z.string().optional(),
  endDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllQueryParamFilter$ {
  /** @deprecated use `HrisEmployeePayrollsAllQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllQueryParamFilter$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllQueryParamFilter$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllQueryParamFilter$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllQueryParamFilter$Outbound;
}

export function hrisEmployeePayrollsAllQueryParamFilterToJSON(
  hrisEmployeePayrollsAllQueryParamFilter:
    HrisEmployeePayrollsAllQueryParamFilter,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllQueryParamFilter$outboundSchema.parse(
      hrisEmployeePayrollsAllQueryParamFilter,
    ),
  );
}

export function hrisEmployeePayrollsAllQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeePayrollsAllQueryParamFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsAllQueryParamFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeePayrollsAllQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllRequest$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  filter: z.lazy(() => HrisEmployeePayrollsAllQueryParamFilter$inboundSchema)
    .optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisEmployeePayrollsAllRequest$Outbound = {
  employee_id: string;
  raw: boolean;
  serviceId?: string | undefined;
  filter?: HrisEmployeePayrollsAllQueryParamFilter$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllRequest$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllRequest$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllRequest
> = z.object({
  employeeId: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  filter: z.lazy(() => HrisEmployeePayrollsAllQueryParamFilter$outboundSchema)
    .optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllRequest$ {
  /** @deprecated use `HrisEmployeePayrollsAllRequest$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsAllRequest$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllRequest$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsAllRequest$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllRequest$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllRequest$Outbound;
}

export function hrisEmployeePayrollsAllRequestToJSON(
  hrisEmployeePayrollsAllRequest: HrisEmployeePayrollsAllRequest,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllRequest$outboundSchema.parse(
      hrisEmployeePayrollsAllRequest,
    ),
  );
}

export function hrisEmployeePayrollsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllRequest' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllDetail$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeePayrollsAllDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeePayrollsAllDetail$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllDetail$ {
  /** @deprecated use `HrisEmployeePayrollsAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsAllDetail$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsAllDetail$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllDetail$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllDetail$Outbound;
}

export function hrisEmployeePayrollsAllDetailToJSON(
  hrisEmployeePayrollsAllDetail: HrisEmployeePayrollsAllDetail,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllDetail$outboundSchema.parse(
      hrisEmployeePayrollsAllDetail,
    ),
  );
}

export function hrisEmployeePayrollsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$Outbound;
}

export function hrisEmployeePayrollsAllHrisEmployeePayrollsResponseBodyToJSON(
  hrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody:
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$outboundSchema
      .parse(hrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody),
  );
}

export function hrisEmployeePayrollsAllHrisEmployeePayrollsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllTotals$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_debit: z.nullable(z.number()).optional(),
  tax_debit: z.nullable(z.number()).optional(),
  check_amount: z.nullable(z.number()).optional(),
  net_pay: z.nullable(z.number()).optional(),
  gross_pay: z.nullable(z.number()).optional(),
  employer_taxes: z.nullable(z.number()).optional(),
  employee_taxes: z.nullable(z.number()).optional(),
  employer_benefit_contributions: z.nullable(z.number()).optional(),
  employee_benefit_deductions: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_debit": "companyDebit",
    "tax_debit": "taxDebit",
    "check_amount": "checkAmount",
    "net_pay": "netPay",
    "gross_pay": "grossPay",
    "employer_taxes": "employerTaxes",
    "employee_taxes": "employeeTaxes",
    "employer_benefit_contributions": "employerBenefitContributions",
    "employee_benefit_deductions": "employeeBenefitDeductions",
  });
});

/** @internal */
export type HrisEmployeePayrollsAllTotals$Outbound = {
  company_debit?: number | null | undefined;
  tax_debit?: number | null | undefined;
  check_amount?: number | null | undefined;
  net_pay?: number | null | undefined;
  gross_pay?: number | null | undefined;
  employer_taxes?: number | null | undefined;
  employee_taxes?: number | null | undefined;
  employer_benefit_contributions?: number | null | undefined;
  employee_benefit_deductions?: number | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllTotals$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllTotals$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllTotals
> = z.object({
  companyDebit: z.nullable(z.number()).optional(),
  taxDebit: z.nullable(z.number()).optional(),
  checkAmount: z.nullable(z.number()).optional(),
  netPay: z.nullable(z.number()).optional(),
  grossPay: z.nullable(z.number()).optional(),
  employerTaxes: z.nullable(z.number()).optional(),
  employeeTaxes: z.nullable(z.number()).optional(),
  employerBenefitContributions: z.nullable(z.number()).optional(),
  employeeBenefitDeductions: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    companyDebit: "company_debit",
    taxDebit: "tax_debit",
    checkAmount: "check_amount",
    netPay: "net_pay",
    grossPay: "gross_pay",
    employerTaxes: "employer_taxes",
    employeeTaxes: "employee_taxes",
    employerBenefitContributions: "employer_benefit_contributions",
    employeeBenefitDeductions: "employee_benefit_deductions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllTotals$ {
  /** @deprecated use `HrisEmployeePayrollsAllTotals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsAllTotals$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllTotals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsAllTotals$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllTotals$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllTotals$Outbound;
}

export function hrisEmployeePayrollsAllTotalsToJSON(
  hrisEmployeePayrollsAllTotals: HrisEmployeePayrollsAllTotals,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllTotals$outboundSchema.parse(
      hrisEmployeePayrollsAllTotals,
    ),
  );
}

export function hrisEmployeePayrollsAllTotalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsAllTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllTotals' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllTaxes$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllTaxes,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  employer: z.nullable(z.boolean()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/** @internal */
export type HrisEmployeePayrollsAllTaxes$Outbound = {
  name?: string | null | undefined;
  employer?: boolean | null | undefined;
  amount?: number | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllTaxes$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllTaxes$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllTaxes
> = z.object({
  name: z.nullable(z.string()).optional(),
  employer: z.nullable(z.boolean()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllTaxes$ {
  /** @deprecated use `HrisEmployeePayrollsAllTaxes$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsAllTaxes$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllTaxes$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsAllTaxes$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllTaxes$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllTaxes$Outbound;
}

export function hrisEmployeePayrollsAllTaxesToJSON(
  hrisEmployeePayrollsAllTaxes: HrisEmployeePayrollsAllTaxes,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllTaxes$outboundSchema.parse(
      hrisEmployeePayrollsAllTaxes,
    ),
  );
}

export function hrisEmployeePayrollsAllTaxesFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllTaxes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsAllTaxes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllTaxes' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllDeductions$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllDeductions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/** @internal */
export type HrisEmployeePayrollsAllDeductions$Outbound = {
  name?: string | null | undefined;
  amount?: number | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllDeductions$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllDeductions$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllDeductions
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllDeductions$ {
  /** @deprecated use `HrisEmployeePayrollsAllDeductions$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsAllDeductions$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllDeductions$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllDeductions$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllDeductions$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllDeductions$Outbound;
}

export function hrisEmployeePayrollsAllDeductionsToJSON(
  hrisEmployeePayrollsAllDeductions: HrisEmployeePayrollsAllDeductions,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllDeductions$outboundSchema.parse(
      hrisEmployeePayrollsAllDeductions,
    ),
  );
}

export function hrisEmployeePayrollsAllDeductionsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllDeductions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsAllDeductions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllDeductions' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllBenefits$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllBenefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  employee_deduction: z.nullable(z.number()).optional(),
  employer_contribution: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_deduction": "employeeDeduction",
    "employer_contribution": "employerContribution",
  });
});

/** @internal */
export type HrisEmployeePayrollsAllBenefits$Outbound = {
  name?: string | null | undefined;
  employee_deduction?: number | null | undefined;
  employer_contribution?: number | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllBenefits$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllBenefits$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllBenefits
> = z.object({
  name: z.nullable(z.string()).optional(),
  employeeDeduction: z.nullable(z.number()).optional(),
  employerContribution: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeDeduction: "employee_deduction",
    employerContribution: "employer_contribution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllBenefits$ {
  /** @deprecated use `HrisEmployeePayrollsAllBenefits$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsAllBenefits$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllBenefits$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsAllBenefits$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllBenefits$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllBenefits$Outbound;
}

export function hrisEmployeePayrollsAllBenefitsToJSON(
  hrisEmployeePayrollsAllBenefits: HrisEmployeePayrollsAllBenefits,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllBenefits$outboundSchema.parse(
      hrisEmployeePayrollsAllBenefits,
    ),
  );
}

export function hrisEmployeePayrollsAllBenefitsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllBenefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsAllBenefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllBenefits' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllCompensations$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllCompensations,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.nullable(z.string()),
  net_pay: z.nullable(z.number()).optional(),
  gross_pay: z.nullable(z.number()).optional(),
  taxes: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsAllTaxes$inboundSchema)),
  ).optional(),
  deductions: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsAllDeductions$inboundSchema)),
  ).optional(),
  benefits: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsAllBenefits$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "net_pay": "netPay",
    "gross_pay": "grossPay",
  });
});

/** @internal */
export type HrisEmployeePayrollsAllCompensations$Outbound = {
  employee_id: string | null;
  net_pay?: number | null | undefined;
  gross_pay?: number | null | undefined;
  taxes?: Array<HrisEmployeePayrollsAllTaxes$Outbound> | null | undefined;
  deductions?:
    | Array<HrisEmployeePayrollsAllDeductions$Outbound>
    | null
    | undefined;
  benefits?: Array<HrisEmployeePayrollsAllBenefits$Outbound> | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllCompensations$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllCompensations$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllCompensations
> = z.object({
  employeeId: z.nullable(z.string()),
  netPay: z.nullable(z.number()).optional(),
  grossPay: z.nullable(z.number()).optional(),
  taxes: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsAllTaxes$outboundSchema)),
  ).optional(),
  deductions: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsAllDeductions$outboundSchema)),
  ).optional(),
  benefits: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsAllBenefits$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    netPay: "net_pay",
    grossPay: "gross_pay",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllCompensations$ {
  /** @deprecated use `HrisEmployeePayrollsAllCompensations$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllCompensations$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllCompensations$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllCompensations$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllCompensations$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllCompensations$Outbound;
}

export function hrisEmployeePayrollsAllCompensationsToJSON(
  hrisEmployeePayrollsAllCompensations: HrisEmployeePayrollsAllCompensations,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllCompensations$outboundSchema.parse(
      hrisEmployeePayrollsAllCompensations,
    ),
  );
}

export function hrisEmployeePayrollsAllCompensationsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllCompensations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsAllCompensations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllCompensations' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllData$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  employee_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  processed: z.nullable(z.boolean()),
  processed_date: z.nullable(z.string()).optional(),
  check_date: z.nullable(z.string()),
  start_date: z.nullable(z.string()),
  end_date: z.nullable(z.string()),
  totals: z.lazy(() => HrisEmployeePayrollsAllTotals$inboundSchema).optional(),
  compensations: z.array(
    z.lazy(() => HrisEmployeePayrollsAllCompensations$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "company_id": "companyId",
    "processed_date": "processedDate",
    "check_date": "checkDate",
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type HrisEmployeePayrollsAllData$Outbound = {
  id: string | null;
  employee_id?: string | null | undefined;
  company_id?: string | null | undefined;
  processed: boolean | null;
  processed_date?: string | null | undefined;
  check_date: string | null;
  start_date: string | null;
  end_date: string | null;
  totals?: HrisEmployeePayrollsAllTotals$Outbound | undefined;
  compensations?:
    | Array<HrisEmployeePayrollsAllCompensations$Outbound>
    | undefined;
};

/** @internal */
export const HrisEmployeePayrollsAllData$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllData$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllData
> = z.object({
  id: z.nullable(z.string()),
  employeeId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  processed: z.nullable(z.boolean()),
  processedDate: z.nullable(z.string()).optional(),
  checkDate: z.nullable(z.string()),
  startDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
  totals: z.lazy(() => HrisEmployeePayrollsAllTotals$outboundSchema).optional(),
  compensations: z.array(
    z.lazy(() => HrisEmployeePayrollsAllCompensations$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    companyId: "company_id",
    processedDate: "processed_date",
    checkDate: "check_date",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllData$ {
  /** @deprecated use `HrisEmployeePayrollsAllData$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsAllData$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllData$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsAllData$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllData$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllData$Outbound;
}

export function hrisEmployeePayrollsAllDataToJSON(
  hrisEmployeePayrollsAllData: HrisEmployeePayrollsAllData,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllData$outboundSchema.parse(
      hrisEmployeePayrollsAllData,
    ),
  );
}

export function hrisEmployeePayrollsAllDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllData' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllResponseBody$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => HrisEmployeePayrollsAllData$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisEmployeePayrollsAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<HrisEmployeePayrollsAllData$Outbound>;
};

/** @internal */
export const HrisEmployeePayrollsAllResponseBody$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => HrisEmployeePayrollsAllData$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsAllResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsAllResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllResponseBody$Outbound;
}

export function hrisEmployeePayrollsAllResponseBodyToJSON(
  hrisEmployeePayrollsAllResponseBody: HrisEmployeePayrollsAllResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllResponseBody$outboundSchema.parse(
      hrisEmployeePayrollsAllResponseBody,
    ),
  );
}

export function hrisEmployeePayrollsAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsAllResponse$inboundSchema: z.ZodType<
  HrisEmployeePayrollsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisEmployeePayrollsAllResponseBody$inboundSchema),
  z.lazy(() =>
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$inboundSchema
  ),
]);

/** @internal */
export type HrisEmployeePayrollsAllResponse$Outbound =
  | HrisEmployeePayrollsAllResponseBody$Outbound
  | HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$Outbound;

/** @internal */
export const HrisEmployeePayrollsAllResponse$outboundSchema: z.ZodType<
  HrisEmployeePayrollsAllResponse$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsAllResponse
> = z.union([
  z.lazy(() => HrisEmployeePayrollsAllResponseBody$outboundSchema),
  z.lazy(() =>
    HrisEmployeePayrollsAllHrisEmployeePayrollsResponseBody$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsAllResponse$ {
  /** @deprecated use `HrisEmployeePayrollsAllResponse$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsAllResponse$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllResponse$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsAllResponse$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsAllResponse$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsAllResponse$Outbound;
}

export function hrisEmployeePayrollsAllResponseToJSON(
  hrisEmployeePayrollsAllResponse: HrisEmployeePayrollsAllResponse,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsAllResponse$outboundSchema.parse(
      hrisEmployeePayrollsAllResponse,
    ),
  );
}

export function hrisEmployeePayrollsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsAllResponse' from JSON`,
  );
}
