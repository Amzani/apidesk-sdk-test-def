/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisEmployeesAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

/**
 * The gender represents the gender identity of a person.
 */
export const Gender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The gender represents the gender identity of a person.
 */
export type Gender = ClosedEnum<typeof Gender>;

export type Person = {
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The gender represents the gender identity of a person.
   */
  gender?: Gender | null | undefined;
  /**
   * Initials of the person
   */
  initials?: string | null | undefined;
  /**
   * Date of birth
   */
  birthday?: RFCDate | null | undefined;
  /**
   * Date of death
   */
  deceasedOn?: RFCDate | null | undefined;
};

/**
 * The team the person is currently in.
 */
export type Team = {
  /**
   * The unique identifier of the team.
   */
  id?: string | null | undefined;
  /**
   * The name of the team.
   */
  name?: string | null | undefined;
};

/**
 * The reason because the employment ended.
 */
export const LeavingReason = {
  Dismissed: "dismissed",
  Resigned: "resigned",
  Redundancy: "redundancy",
  Other: "other",
} as const;
/**
 * The reason because the employment ended.
 */
export type LeavingReason = ClosedEnum<typeof LeavingReason>;

/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export const EmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export type EmploymentStatus = ClosedEnum<typeof EmploymentStatus>;

/**
 * The type of employment relationship the employee has with the organization.
 */
export const EmploymentType = {
  Contractor: "contractor",
  Employee: "employee",
  Freelance: "freelance",
  Temp: "temp",
  Internship: "internship",
  Other: "other",
} as const;
/**
 * The type of employment relationship the employee has with the organization.
 */
export type EmploymentType = ClosedEnum<typeof EmploymentType>;

/**
 * The work schedule of the employee.
 */
export const EmploymentSubType = {
  FullTime: "full_time",
  PartTime: "part_time",
  Hourly: "hourly",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The work schedule of the employee.
 */
export type EmploymentSubType = ClosedEnum<typeof EmploymentSubType>;

export type EmploymentRole = {
  /**
   * The type of employment relationship the employee has with the organization.
   */
  type?: EmploymentType | null | undefined;
  /**
   * The work schedule of the employee.
   */
  subType?: EmploymentSubType | null | undefined;
};

/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export const HrisEmployeesAddEmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export type HrisEmployeesAddEmploymentStatus = ClosedEnum<
  typeof HrisEmployeesAddEmploymentStatus
>;

export type Manager = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The name of the manager, often a combination of their first and last names.
   */
  name?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * The email address of the manager.
   */
  email?: string | null | undefined;
  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  employmentStatus?: HrisEmployeesAddEmploymentStatus | null | undefined;
};

/**
 * The gender represents the gender identity of a person.
 */
export const HrisEmployeesAddGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The gender represents the gender identity of a person.
 */
export type HrisEmployeesAddGender = ClosedEnum<typeof HrisEmployeesAddGender>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const Currency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type Currency = ClosedEnum<typeof Currency>;

/**
 * Unit of measurement for employee compensation.
 */
export const PaymentUnit = {
  Hour: "hour",
  Week: "week",
  Month: "month",
  Year: "year",
  Paycheck: "paycheck",
  Other: "other",
} as const;
/**
 * Unit of measurement for employee compensation.
 */
export type PaymentUnit = ClosedEnum<typeof PaymentUnit>;

/**
 * Indicates the status of the job.
 */
export const Status = {
  Active: "active",
  Inactive: "inactive",
  Other: "other",
} as const;
/**
 * Indicates the status of the job.
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * The type of address.
 */
export const Type = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type Type = ClosedEnum<typeof Type>;

export type Location = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: Type | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type Job = {
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The position and responsibilities of the person within the organization.
   */
  role?: string | null | undefined;
  /**
   * The date on which the employee starts working in their current job role.
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The date on which the employee leaves or is expected to leave their current job role.
   */
  endDate?: RFCDate | null | undefined;
  /**
   * The rate of pay for the employee in their current job role.
   */
  compensationRate?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  /**
   * Unit of measurement for employee compensation.
   */
  paymentUnit?: PaymentUnit | null | undefined;
  /**
   * The date on which the employee was hired by the organization
   */
  hiredAt?: RFCDate | null | undefined;
  /**
   * Indicates whether this the employee's primary job.
   */
  isPrimary?: boolean | null | undefined;
  /**
   * Indicates whether this the employee has a manager role.
   */
  isManager?: boolean | null | undefined;
  /**
   * Indicates the status of the job.
   */
  status?: Status | null | undefined;
  location?: Location | undefined;
};

/**
 * Unit of measurement for employee compensation.
 */
export const HrisEmployeesAddPaymentUnit = {
  Hour: "hour",
  Week: "week",
  Month: "month",
  Year: "year",
  Paycheck: "paycheck",
  Other: "other",
} as const;
/**
 * Unit of measurement for employee compensation.
 */
export type HrisEmployeesAddPaymentUnit = ClosedEnum<
  typeof HrisEmployeesAddPaymentUnit
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesAddCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesAddCurrency = ClosedEnum<
  typeof HrisEmployeesAddCurrency
>;

/**
 * The FLSA status for this compensation.
 */
export const FlsaStatus = {
  Exempt: "exempt",
  SalariedNonexempt: "salaried-nonexempt",
  Nonexempt: "nonexempt",
  Owner: "owner",
  Other: "other",
} as const;
/**
 * The FLSA status for this compensation.
 */
export type FlsaStatus = ClosedEnum<typeof FlsaStatus>;

/**
 * Frequency of employee compensation.
 */
export const PaymentFrequency = {
  Weekly: "weekly",
  Biweekly: "biweekly",
  Monthly: "monthly",
  ProRata: "pro-rata",
  Other: "other",
} as const;
/**
 * Frequency of employee compensation.
 */
export type PaymentFrequency = ClosedEnum<typeof PaymentFrequency>;

export type Compensation = {
  /**
   * The amount paid per payment unit.
   */
  rate?: number | null | undefined;
  /**
   * Unit of measurement for employee compensation.
   */
  paymentUnit?: HrisEmployeesAddPaymentUnit | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesAddCurrency | null | undefined;
  /**
   * The FLSA status for this compensation.
   */
  flsaStatus?: FlsaStatus | null | undefined;
  /**
   * The date on which a change to an employee's compensation takes effect.
   */
  effectiveDate?: string | null | undefined;
  /**
   * Frequency of employee compensation.
   */
  paymentFrequency?: PaymentFrequency | null | undefined;
};

/**
 * The type of address.
 */
export const HrisEmployeesAddType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisEmployeesAddType = ClosedEnum<typeof HrisEmployeesAddType>;

export type Addresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisEmployeesAddType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const HrisEmployeesAddHrisEmployeesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type HrisEmployeesAddHrisEmployeesType = ClosedEnum<
  typeof HrisEmployeesAddHrisEmployeesType
>;

export type PhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: HrisEmployeesAddHrisEmployeesType | null | undefined;
};

/**
 * Email type
 */
export const HrisEmployeesAddHrisEmployeesRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type HrisEmployeesAddHrisEmployeesRequestType = ClosedEnum<
  typeof HrisEmployeesAddHrisEmployeesRequestType
>;

export type Emails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: HrisEmployeesAddHrisEmployeesRequestType | null | undefined;
};

export type Six = {};

export type Four = {};

export type Value =
  | Four
  | string
  | number
  | boolean
  | Array<string>
  | Array<Six>;

export type CustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | Four
    | string
    | number
    | boolean
    | Array<string>
    | Array<Six>
    | null
    | undefined;
};

export type SocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of bank account.
 */
export const AccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The type of bank account.
 */
export type AccountType = ClosedEnum<typeof AccountType>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeesAddHrisEmployeesCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeesAddHrisEmployeesCurrency = ClosedEnum<
  typeof HrisEmployeesAddHrisEmployeesCurrency
>;

export type BankAccounts = {
  /**
   * The name of the bank
   */
  bankName?: string | null | undefined;
  /**
   * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name which you used in opening your bank account.
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account.
   */
  accountType?: AccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN).
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC).
   */
  bic?: string | null | undefined;
  /**
   * A routing number is a nine-digit code used to identify a financial institution in the United States.
   */
  routingNumber?: string | null | undefined;
  /**
   * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
   */
  bsbNumber?: string | null | undefined;
  /**
   * A branch identifier is a unique identifier for a branch of a bank or financial institution.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
   */
  bankCode?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeesAddHrisEmployeesCurrency | null | undefined;
};

export type ProbationPeriod = {
  /**
   * The date that the employee started their probation period at the company.
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The date that the employee ended their probation period at the company.
   */
  endDate?: RFCDate | null | undefined;
};

export type ExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type PassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<ExtendPaths> | undefined;
};

export type HrisEmployeesAddRequestBody = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The name used to display the employee, often a combination of their first and last names.
   */
  displayName?: string | null | undefined;
  /**
   * The name the employee prefers to be addressed by, which may be different from their legal name.
   */
  preferredName?: string | null | undefined;
  /**
   * The initials of the person, usually derived from their first, middle, and last names.
   */
  initials?: string | null | undefined;
  /**
   * A formal salutation for the person. For example, 'Mr', 'Mrs'
   */
  salutation?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The marital status of the employee.
   */
  maritalStatus?: string | null | undefined;
  partner?: Person | undefined;
  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  division?: string | null | undefined;
  /**
   * Unique identifier of the division this employee belongs to.
   */
  divisionId?: string | null | undefined;
  /**
   * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * Unique identifier of the department ID this employee belongs to.
   */
  departmentId?: string | null | undefined;
  /**
   * Name of the department this employee belongs to.
   */
  departmentName?: string | null | undefined;
  /**
   * The team the person is currently in.
   */
  team?: Team | null | undefined;
  /**
   * The unique identifier of the company.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company.
   */
  companyName?: string | null | undefined;
  /**
   * A Start Date is the date that the employee started working at the company
   */
  employmentStartDate?: string | null | undefined;
  /**
   * An End Date is the date that the employee ended working at the company
   */
  employmentEndDate?: string | null | undefined;
  /**
   * The reason because the employment ended.
   */
  leavingReason?: LeavingReason | null | undefined;
  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  employeeNumber?: string | null | undefined;
  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  employmentStatus?: EmploymentStatus | null | undefined;
  employmentRole?: EmploymentRole | undefined;
  /**
   * The ethnicity of the employee
   */
  ethnicity?: string | null | undefined;
  manager?: Manager | undefined;
  /**
   * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
   */
  directReports?: Array<string> | null | undefined;
  /**
   * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
   */
  socialSecurityNumber?: string | null | undefined;
  /**
   * The date of birth of the person.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * The date the person deceased.
   */
  deceasedOn?: RFCDate | null | undefined;
  /**
   * Country code according to ISO 3166-1 alpha-2.
   */
  countryOfBirth?: string | null | undefined;
  /**
   * A description of the object.
   */
  description?: string | null | undefined;
  /**
   * The gender represents the gender identity of a person.
   */
  gender?: HrisEmployeesAddGender | null | undefined;
  /**
   * The preferred pronouns of the person.
   */
  pronouns?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  preferredLanguage?: string | null | undefined;
  languages?: Array<string> | undefined;
  nationalities?: Array<string> | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
   */
  timezone?: string | null | undefined;
  /**
   * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
   */
  source?: string | null | undefined;
  /**
   * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
   */
  sourceId?: string | null | undefined;
  recordUrl?: string | null | undefined;
  jobs?: Array<Job> | null | undefined;
  compensations?: Array<Compensation> | null | undefined;
  /**
   * Indicates if the employee works from a remote location.
   */
  worksRemote?: boolean | null | undefined;
  addresses?: Array<Addresses> | undefined;
  phoneNumbers?: Array<PhoneNumbers> | undefined;
  emails?: Array<Emails> | undefined;
  customFields?: Array<CustomFields> | undefined;
  socialLinks?: Array<SocialLinks> | undefined;
  bankAccounts?: Array<BankAccounts> | undefined;
  taxCode?: string | null | undefined;
  taxId?: string | null | undefined;
  /**
   * Indicate the employee's dietary preference.
   */
  dietaryPreference?: string | null | undefined;
  /**
   * Indicate the employee's food allergies.
   */
  foodAllergies?: Array<string> | null | undefined;
  probationPeriod?: ProbationPeriod | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThrough> | undefined;
};

export type HrisEmployeesAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: HrisEmployeesAddRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeesAddDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisEmployeesAddHrisEmployeesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type UnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Employees
 */
export type HrisEmployeesAddResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: UnifiedId;
};

export type HrisEmployeesAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Employees
   */
  twoHundredAndOneApplicationJsonObject?:
    | HrisEmployeesAddResponseBody
    | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisEmployeesAddHrisEmployeesResponseBody
    | undefined;
};

/** @internal */
export const HrisEmployeesAddGlobals$inboundSchema: z.ZodType<
  HrisEmployeesAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisEmployeesAddGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisEmployeesAddGlobals$outboundSchema: z.ZodType<
  HrisEmployeesAddGlobals$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAddGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddGlobals$ {
  /** @deprecated use `HrisEmployeesAddGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddGlobals$inboundSchema;
  /** @deprecated use `HrisEmployeesAddGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddGlobals$outboundSchema;
  /** @deprecated use `HrisEmployeesAddGlobals$Outbound` instead. */
  export type Outbound = HrisEmployeesAddGlobals$Outbound;
}

export function hrisEmployeesAddGlobalsToJSON(
  hrisEmployeesAddGlobals: HrisEmployeesAddGlobals,
): string {
  return JSON.stringify(
    HrisEmployeesAddGlobals$outboundSchema.parse(hrisEmployeesAddGlobals),
  );
}

export function hrisEmployeesAddGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAddGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAddGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAddGlobals' from JSON`,
  );
}

/** @internal */
export const Gender$inboundSchema: z.ZodNativeEnum<typeof Gender> = z
  .nativeEnum(Gender);

/** @internal */
export const Gender$outboundSchema: z.ZodNativeEnum<typeof Gender> =
  Gender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Gender$ {
  /** @deprecated use `Gender$inboundSchema` instead. */
  export const inboundSchema = Gender$inboundSchema;
  /** @deprecated use `Gender$outboundSchema` instead. */
  export const outboundSchema = Gender$outboundSchema;
}

/** @internal */
export const Person$inboundSchema: z.ZodType<Person, z.ZodTypeDef, unknown> = z
  .object({
    first_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    middle_name: z.nullable(z.string()).optional(),
    gender: z.nullable(Gender$inboundSchema).optional(),
    initials: z.nullable(z.string()).optional(),
    birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    deceased_on: z.nullable(z.string().transform(v => new RFCDate(v)))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "first_name": "firstName",
      "last_name": "lastName",
      "middle_name": "middleName",
      "deceased_on": "deceasedOn",
    });
  });

/** @internal */
export type Person$Outbound = {
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  gender?: string | null | undefined;
  initials?: string | null | undefined;
  birthday?: string | null | undefined;
  deceased_on?: string | null | undefined;
};

/** @internal */
export const Person$outboundSchema: z.ZodType<
  Person$Outbound,
  z.ZodTypeDef,
  Person
> = z.object({
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  gender: z.nullable(Gender$outboundSchema).optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  deceasedOn: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    deceasedOn: "deceased_on",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Person$ {
  /** @deprecated use `Person$inboundSchema` instead. */
  export const inboundSchema = Person$inboundSchema;
  /** @deprecated use `Person$outboundSchema` instead. */
  export const outboundSchema = Person$outboundSchema;
  /** @deprecated use `Person$Outbound` instead. */
  export type Outbound = Person$Outbound;
}

export function personToJSON(person: Person): string {
  return JSON.stringify(Person$outboundSchema.parse(person));
}

export function personFromJSON(
  jsonString: string,
): SafeParseResult<Person, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Person$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Person' from JSON`,
  );
}

/** @internal */
export const Team$inboundSchema: z.ZodType<Team, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Team$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const Team$outboundSchema: z.ZodType<Team$Outbound, z.ZodTypeDef, Team> =
  z.object({
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Team$ {
  /** @deprecated use `Team$inboundSchema` instead. */
  export const inboundSchema = Team$inboundSchema;
  /** @deprecated use `Team$outboundSchema` instead. */
  export const outboundSchema = Team$outboundSchema;
  /** @deprecated use `Team$Outbound` instead. */
  export type Outbound = Team$Outbound;
}

export function teamToJSON(team: Team): string {
  return JSON.stringify(Team$outboundSchema.parse(team));
}

export function teamFromJSON(
  jsonString: string,
): SafeParseResult<Team, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Team$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Team' from JSON`,
  );
}

/** @internal */
export const LeavingReason$inboundSchema: z.ZodNativeEnum<
  typeof LeavingReason
> = z.nativeEnum(LeavingReason);

/** @internal */
export const LeavingReason$outboundSchema: z.ZodNativeEnum<
  typeof LeavingReason
> = LeavingReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeavingReason$ {
  /** @deprecated use `LeavingReason$inboundSchema` instead. */
  export const inboundSchema = LeavingReason$inboundSchema;
  /** @deprecated use `LeavingReason$outboundSchema` instead. */
  export const outboundSchema = LeavingReason$outboundSchema;
}

/** @internal */
export const EmploymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof EmploymentStatus
> = z.nativeEnum(EmploymentStatus);

/** @internal */
export const EmploymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof EmploymentStatus
> = EmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentStatus$ {
  /** @deprecated use `EmploymentStatus$inboundSchema` instead. */
  export const inboundSchema = EmploymentStatus$inboundSchema;
  /** @deprecated use `EmploymentStatus$outboundSchema` instead. */
  export const outboundSchema = EmploymentStatus$outboundSchema;
}

/** @internal */
export const EmploymentType$inboundSchema: z.ZodNativeEnum<
  typeof EmploymentType
> = z.nativeEnum(EmploymentType);

/** @internal */
export const EmploymentType$outboundSchema: z.ZodNativeEnum<
  typeof EmploymentType
> = EmploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentType$ {
  /** @deprecated use `EmploymentType$inboundSchema` instead. */
  export const inboundSchema = EmploymentType$inboundSchema;
  /** @deprecated use `EmploymentType$outboundSchema` instead. */
  export const outboundSchema = EmploymentType$outboundSchema;
}

/** @internal */
export const EmploymentSubType$inboundSchema: z.ZodNativeEnum<
  typeof EmploymentSubType
> = z.nativeEnum(EmploymentSubType);

/** @internal */
export const EmploymentSubType$outboundSchema: z.ZodNativeEnum<
  typeof EmploymentSubType
> = EmploymentSubType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentSubType$ {
  /** @deprecated use `EmploymentSubType$inboundSchema` instead. */
  export const inboundSchema = EmploymentSubType$inboundSchema;
  /** @deprecated use `EmploymentSubType$outboundSchema` instead. */
  export const outboundSchema = EmploymentSubType$outboundSchema;
}

/** @internal */
export const EmploymentRole$inboundSchema: z.ZodType<
  EmploymentRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(EmploymentType$inboundSchema).optional(),
  sub_type: z.nullable(EmploymentSubType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub_type": "subType",
  });
});

/** @internal */
export type EmploymentRole$Outbound = {
  type?: string | null | undefined;
  sub_type?: string | null | undefined;
};

/** @internal */
export const EmploymentRole$outboundSchema: z.ZodType<
  EmploymentRole$Outbound,
  z.ZodTypeDef,
  EmploymentRole
> = z.object({
  type: z.nullable(EmploymentType$outboundSchema).optional(),
  subType: z.nullable(EmploymentSubType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    subType: "sub_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentRole$ {
  /** @deprecated use `EmploymentRole$inboundSchema` instead. */
  export const inboundSchema = EmploymentRole$inboundSchema;
  /** @deprecated use `EmploymentRole$outboundSchema` instead. */
  export const outboundSchema = EmploymentRole$outboundSchema;
  /** @deprecated use `EmploymentRole$Outbound` instead. */
  export type Outbound = EmploymentRole$Outbound;
}

export function employmentRoleToJSON(employmentRole: EmploymentRole): string {
  return JSON.stringify(EmploymentRole$outboundSchema.parse(employmentRole));
}

export function employmentRoleFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentRole' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddEmploymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddEmploymentStatus
> = z.nativeEnum(HrisEmployeesAddEmploymentStatus);

/** @internal */
export const HrisEmployeesAddEmploymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddEmploymentStatus
> = HrisEmployeesAddEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddEmploymentStatus$ {
  /** @deprecated use `HrisEmployeesAddEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddEmploymentStatus$inboundSchema;
  /** @deprecated use `HrisEmployeesAddEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddEmploymentStatus$outboundSchema;
}

/** @internal */
export const Manager$inboundSchema: z.ZodType<Manager, z.ZodTypeDef, unknown> =
  z.object({
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    first_name: z.nullable(z.string()).optional(),
    last_name: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    employment_status: z.nullable(
      HrisEmployeesAddEmploymentStatus$inboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "first_name": "firstName",
      "last_name": "lastName",
      "employment_status": "employmentStatus",
    });
  });

/** @internal */
export type Manager$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  email?: string | null | undefined;
  employment_status?: string | null | undefined;
};

/** @internal */
export const Manager$outboundSchema: z.ZodType<
  Manager$Outbound,
  z.ZodTypeDef,
  Manager
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  employmentStatus: z.nullable(HrisEmployeesAddEmploymentStatus$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    employmentStatus: "employment_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Manager$ {
  /** @deprecated use `Manager$inboundSchema` instead. */
  export const inboundSchema = Manager$inboundSchema;
  /** @deprecated use `Manager$outboundSchema` instead. */
  export const outboundSchema = Manager$outboundSchema;
  /** @deprecated use `Manager$Outbound` instead. */
  export type Outbound = Manager$Outbound;
}

export function managerToJSON(manager: Manager): string {
  return JSON.stringify(Manager$outboundSchema.parse(manager));
}

export function managerFromJSON(
  jsonString: string,
): SafeParseResult<Manager, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Manager$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Manager' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddGender$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddGender
> = z.nativeEnum(HrisEmployeesAddGender);

/** @internal */
export const HrisEmployeesAddGender$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddGender
> = HrisEmployeesAddGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddGender$ {
  /** @deprecated use `HrisEmployeesAddGender$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddGender$inboundSchema;
  /** @deprecated use `HrisEmployeesAddGender$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddGender$outboundSchema;
}

/** @internal */
export const Currency$inboundSchema: z.ZodNativeEnum<typeof Currency> = z
  .nativeEnum(Currency);

/** @internal */
export const Currency$outboundSchema: z.ZodNativeEnum<typeof Currency> =
  Currency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Currency$ {
  /** @deprecated use `Currency$inboundSchema` instead. */
  export const inboundSchema = Currency$inboundSchema;
  /** @deprecated use `Currency$outboundSchema` instead. */
  export const outboundSchema = Currency$outboundSchema;
}

/** @internal */
export const PaymentUnit$inboundSchema: z.ZodNativeEnum<typeof PaymentUnit> = z
  .nativeEnum(PaymentUnit);

/** @internal */
export const PaymentUnit$outboundSchema: z.ZodNativeEnum<typeof PaymentUnit> =
  PaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentUnit$ {
  /** @deprecated use `PaymentUnit$inboundSchema` instead. */
  export const inboundSchema = PaymentUnit$inboundSchema;
  /** @deprecated use `PaymentUnit$outboundSchema` instead. */
  export const outboundSchema = PaymentUnit$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Location$inboundSchema: z.ZodType<
  Location,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(Type$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type Location$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const Location$outboundSchema: z.ZodType<
  Location$Outbound,
  z.ZodTypeDef,
  Location
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(Type$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Location$ {
  /** @deprecated use `Location$inboundSchema` instead. */
  export const inboundSchema = Location$inboundSchema;
  /** @deprecated use `Location$outboundSchema` instead. */
  export const outboundSchema = Location$outboundSchema;
  /** @deprecated use `Location$Outbound` instead. */
  export type Outbound = Location$Outbound;
}

export function locationToJSON(location: Location): string {
  return JSON.stringify(Location$outboundSchema.parse(location));
}

export function locationFromJSON(
  jsonString: string,
): SafeParseResult<Location, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Location$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Location' from JSON`,
  );
}

/** @internal */
export const Job$inboundSchema: z.ZodType<Job, z.ZodTypeDef, unknown> = z
  .object({
    title: z.nullable(z.string()).optional(),
    role: z.nullable(z.string()).optional(),
    start_date: z.nullable(z.string().transform(v => new RFCDate(v)))
      .optional(),
    end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    compensation_rate: z.nullable(z.number()).optional(),
    currency: z.nullable(Currency$inboundSchema).optional(),
    payment_unit: z.nullable(PaymentUnit$inboundSchema).optional(),
    hired_at: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    is_primary: z.nullable(z.boolean()).optional(),
    is_manager: z.nullable(z.boolean()).optional(),
    status: z.nullable(Status$inboundSchema).optional(),
    location: z.lazy(() => Location$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "start_date": "startDate",
      "end_date": "endDate",
      "compensation_rate": "compensationRate",
      "payment_unit": "paymentUnit",
      "hired_at": "hiredAt",
      "is_primary": "isPrimary",
      "is_manager": "isManager",
    });
  });

/** @internal */
export type Job$Outbound = {
  title?: string | null | undefined;
  role?: string | null | undefined;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  compensation_rate?: number | null | undefined;
  currency?: string | null | undefined;
  payment_unit?: string | null | undefined;
  hired_at?: string | null | undefined;
  is_primary?: boolean | null | undefined;
  is_manager?: boolean | null | undefined;
  status?: string | null | undefined;
  location?: Location$Outbound | undefined;
};

/** @internal */
export const Job$outboundSchema: z.ZodType<Job$Outbound, z.ZodTypeDef, Job> = z
  .object({
    title: z.nullable(z.string()).optional(),
    role: z.nullable(z.string()).optional(),
    startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    compensationRate: z.nullable(z.number()).optional(),
    currency: z.nullable(Currency$outboundSchema).optional(),
    paymentUnit: z.nullable(PaymentUnit$outboundSchema).optional(),
    hiredAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
      .optional(),
    isPrimary: z.nullable(z.boolean()).optional(),
    isManager: z.nullable(z.boolean()).optional(),
    status: z.nullable(Status$outboundSchema).optional(),
    location: z.lazy(() => Location$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      startDate: "start_date",
      endDate: "end_date",
      compensationRate: "compensation_rate",
      paymentUnit: "payment_unit",
      hiredAt: "hired_at",
      isPrimary: "is_primary",
      isManager: "is_manager",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Job$ {
  /** @deprecated use `Job$inboundSchema` instead. */
  export const inboundSchema = Job$inboundSchema;
  /** @deprecated use `Job$outboundSchema` instead. */
  export const outboundSchema = Job$outboundSchema;
  /** @deprecated use `Job$Outbound` instead. */
  export type Outbound = Job$Outbound;
}

export function jobToJSON(job: Job): string {
  return JSON.stringify(Job$outboundSchema.parse(job));
}

export function jobFromJSON(
  jsonString: string,
): SafeParseResult<Job, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Job$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Job' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddPaymentUnit$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddPaymentUnit
> = z.nativeEnum(HrisEmployeesAddPaymentUnit);

/** @internal */
export const HrisEmployeesAddPaymentUnit$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddPaymentUnit
> = HrisEmployeesAddPaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddPaymentUnit$ {
  /** @deprecated use `HrisEmployeesAddPaymentUnit$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddPaymentUnit$inboundSchema;
  /** @deprecated use `HrisEmployeesAddPaymentUnit$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddPaymentUnit$outboundSchema;
}

/** @internal */
export const HrisEmployeesAddCurrency$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddCurrency
> = z.nativeEnum(HrisEmployeesAddCurrency);

/** @internal */
export const HrisEmployeesAddCurrency$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddCurrency
> = HrisEmployeesAddCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddCurrency$ {
  /** @deprecated use `HrisEmployeesAddCurrency$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesAddCurrency$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddCurrency$outboundSchema;
}

/** @internal */
export const FlsaStatus$inboundSchema: z.ZodNativeEnum<typeof FlsaStatus> = z
  .nativeEnum(FlsaStatus);

/** @internal */
export const FlsaStatus$outboundSchema: z.ZodNativeEnum<typeof FlsaStatus> =
  FlsaStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlsaStatus$ {
  /** @deprecated use `FlsaStatus$inboundSchema` instead. */
  export const inboundSchema = FlsaStatus$inboundSchema;
  /** @deprecated use `FlsaStatus$outboundSchema` instead. */
  export const outboundSchema = FlsaStatus$outboundSchema;
}

/** @internal */
export const PaymentFrequency$inboundSchema: z.ZodNativeEnum<
  typeof PaymentFrequency
> = z.nativeEnum(PaymentFrequency);

/** @internal */
export const PaymentFrequency$outboundSchema: z.ZodNativeEnum<
  typeof PaymentFrequency
> = PaymentFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentFrequency$ {
  /** @deprecated use `PaymentFrequency$inboundSchema` instead. */
  export const inboundSchema = PaymentFrequency$inboundSchema;
  /** @deprecated use `PaymentFrequency$outboundSchema` instead. */
  export const outboundSchema = PaymentFrequency$outboundSchema;
}

/** @internal */
export const Compensation$inboundSchema: z.ZodType<
  Compensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  rate: z.nullable(z.number()).optional(),
  payment_unit: z.nullable(HrisEmployeesAddPaymentUnit$inboundSchema)
    .optional(),
  currency: z.nullable(HrisEmployeesAddCurrency$inboundSchema).optional(),
  flsa_status: z.nullable(FlsaStatus$inboundSchema).optional(),
  effective_date: z.nullable(z.string()).optional(),
  payment_frequency: z.nullable(PaymentFrequency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_unit": "paymentUnit",
    "flsa_status": "flsaStatus",
    "effective_date": "effectiveDate",
    "payment_frequency": "paymentFrequency",
  });
});

/** @internal */
export type Compensation$Outbound = {
  rate?: number | null | undefined;
  payment_unit?: string | null | undefined;
  currency?: string | null | undefined;
  flsa_status?: string | null | undefined;
  effective_date?: string | null | undefined;
  payment_frequency?: string | null | undefined;
};

/** @internal */
export const Compensation$outboundSchema: z.ZodType<
  Compensation$Outbound,
  z.ZodTypeDef,
  Compensation
> = z.object({
  rate: z.nullable(z.number()).optional(),
  paymentUnit: z.nullable(HrisEmployeesAddPaymentUnit$outboundSchema)
    .optional(),
  currency: z.nullable(HrisEmployeesAddCurrency$outboundSchema).optional(),
  flsaStatus: z.nullable(FlsaStatus$outboundSchema).optional(),
  effectiveDate: z.nullable(z.string()).optional(),
  paymentFrequency: z.nullable(PaymentFrequency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentUnit: "payment_unit",
    flsaStatus: "flsa_status",
    effectiveDate: "effective_date",
    paymentFrequency: "payment_frequency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Compensation$ {
  /** @deprecated use `Compensation$inboundSchema` instead. */
  export const inboundSchema = Compensation$inboundSchema;
  /** @deprecated use `Compensation$outboundSchema` instead. */
  export const outboundSchema = Compensation$outboundSchema;
  /** @deprecated use `Compensation$Outbound` instead. */
  export type Outbound = Compensation$Outbound;
}

export function compensationToJSON(compensation: Compensation): string {
  return JSON.stringify(Compensation$outboundSchema.parse(compensation));
}

export function compensationFromJSON(
  jsonString: string,
): SafeParseResult<Compensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Compensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Compensation' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddType
> = z.nativeEnum(HrisEmployeesAddType);

/** @internal */
export const HrisEmployeesAddType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddType
> = HrisEmployeesAddType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddType$ {
  /** @deprecated use `HrisEmployeesAddType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddType$inboundSchema;
  /** @deprecated use `HrisEmployeesAddType$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddType$outboundSchema;
}

/** @internal */
export const Addresses$inboundSchema: z.ZodType<
  Addresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesAddType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type Addresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const Addresses$outboundSchema: z.ZodType<
  Addresses$Outbound,
  z.ZodTypeDef,
  Addresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesAddType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Addresses$ {
  /** @deprecated use `Addresses$inboundSchema` instead. */
  export const inboundSchema = Addresses$inboundSchema;
  /** @deprecated use `Addresses$outboundSchema` instead. */
  export const outboundSchema = Addresses$outboundSchema;
  /** @deprecated use `Addresses$Outbound` instead. */
  export type Outbound = Addresses$Outbound;
}

export function addressesToJSON(addresses: Addresses): string {
  return JSON.stringify(Addresses$outboundSchema.parse(addresses));
}

export function addressesFromJSON(
  jsonString: string,
): SafeParseResult<Addresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Addresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Addresses' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddHrisEmployeesType
> = z.nativeEnum(HrisEmployeesAddHrisEmployeesType);

/** @internal */
export const HrisEmployeesAddHrisEmployeesType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeesAddHrisEmployeesType
> = HrisEmployeesAddHrisEmployeesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesType$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddHrisEmployeesType$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesType$outboundSchema;
}

/** @internal */
export const PhoneNumbers$inboundSchema: z.ZodType<
  PhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesAddHrisEmployeesType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type PhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const PhoneNumbers$outboundSchema: z.ZodType<
  PhoneNumbers$Outbound,
  z.ZodTypeDef,
  PhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeesAddHrisEmployeesType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhoneNumbers$ {
  /** @deprecated use `PhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = PhoneNumbers$inboundSchema;
  /** @deprecated use `PhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = PhoneNumbers$outboundSchema;
  /** @deprecated use `PhoneNumbers$Outbound` instead. */
  export type Outbound = PhoneNumbers$Outbound;
}

export function phoneNumbersToJSON(phoneNumbers: PhoneNumbers): string {
  return JSON.stringify(PhoneNumbers$outboundSchema.parse(phoneNumbers));
}

export function phoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<PhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PhoneNumbers' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesRequestType$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAddHrisEmployeesRequestType> = z
    .nativeEnum(HrisEmployeesAddHrisEmployeesRequestType);

/** @internal */
export const HrisEmployeesAddHrisEmployeesRequestType$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAddHrisEmployeesRequestType> =
    HrisEmployeesAddHrisEmployeesRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesRequestType$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesRequestType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAddHrisEmployeesRequestType$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesRequestType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesRequestType$outboundSchema;
}

/** @internal */
export const Emails$inboundSchema: z.ZodType<Emails, z.ZodTypeDef, unknown> = z
  .object({
    id: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()),
    type: z.nullable(HrisEmployeesAddHrisEmployeesRequestType$inboundSchema)
      .optional(),
  });

/** @internal */
export type Emails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const Emails$outboundSchema: z.ZodType<
  Emails$Outbound,
  z.ZodTypeDef,
  Emails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisEmployeesAddHrisEmployeesRequestType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Emails$ {
  /** @deprecated use `Emails$inboundSchema` instead. */
  export const inboundSchema = Emails$inboundSchema;
  /** @deprecated use `Emails$outboundSchema` instead. */
  export const outboundSchema = Emails$outboundSchema;
  /** @deprecated use `Emails$Outbound` instead. */
  export type Outbound = Emails$Outbound;
}

export function emailsToJSON(emails: Emails): string {
  return JSON.stringify(Emails$outboundSchema.parse(emails));
}

export function emailsFromJSON(
  jsonString: string,
): SafeParseResult<Emails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Emails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Emails' from JSON`,
  );
}

/** @internal */
export const Six$inboundSchema: z.ZodType<Six, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Six$Outbound = {};

/** @internal */
export const Six$outboundSchema: z.ZodType<Six$Outbound, z.ZodTypeDef, Six> = z
  .object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Six$ {
  /** @deprecated use `Six$inboundSchema` instead. */
  export const inboundSchema = Six$inboundSchema;
  /** @deprecated use `Six$outboundSchema` instead. */
  export const outboundSchema = Six$outboundSchema;
  /** @deprecated use `Six$Outbound` instead. */
  export type Outbound = Six$Outbound;
}

export function sixToJSON(six: Six): string {
  return JSON.stringify(Six$outboundSchema.parse(six));
}

export function sixFromJSON(
  jsonString: string,
): SafeParseResult<Six, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Six$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Six' from JSON`,
  );
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Four$Outbound = {};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Four$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.string()),
    z.array(z.lazy(() => Six$inboundSchema)),
  ]);

/** @internal */
export type Value$Outbound =
  | Four$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<Six$Outbound>;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([
  z.lazy(() => Four$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => Six$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const CustomFields$inboundSchema: z.ZodType<
  CustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Six$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | Four$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<Six$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CustomFields$outboundSchema: z.ZodType<
  CustomFields$Outbound,
  z.ZodTypeDef,
  CustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => Six$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFields$ {
  /** @deprecated use `CustomFields$inboundSchema` instead. */
  export const inboundSchema = CustomFields$inboundSchema;
  /** @deprecated use `CustomFields$outboundSchema` instead. */
  export const outboundSchema = CustomFields$outboundSchema;
  /** @deprecated use `CustomFields$Outbound` instead. */
  export type Outbound = CustomFields$Outbound;
}

export function customFieldsToJSON(customFields: CustomFields): string {
  return JSON.stringify(CustomFields$outboundSchema.parse(customFields));
}

export function customFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFields' from JSON`,
  );
}

/** @internal */
export const SocialLinks$inboundSchema: z.ZodType<
  SocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type SocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const SocialLinks$outboundSchema: z.ZodType<
  SocialLinks$Outbound,
  z.ZodTypeDef,
  SocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SocialLinks$ {
  /** @deprecated use `SocialLinks$inboundSchema` instead. */
  export const inboundSchema = SocialLinks$inboundSchema;
  /** @deprecated use `SocialLinks$outboundSchema` instead. */
  export const outboundSchema = SocialLinks$outboundSchema;
  /** @deprecated use `SocialLinks$Outbound` instead. */
  export type Outbound = SocialLinks$Outbound;
}

export function socialLinksToJSON(socialLinks: SocialLinks): string {
  return JSON.stringify(SocialLinks$outboundSchema.parse(socialLinks));
}

export function socialLinksFromJSON(
  jsonString: string,
): SafeParseResult<SocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SocialLinks' from JSON`,
  );
}

/** @internal */
export const AccountType$inboundSchema: z.ZodNativeEnum<typeof AccountType> = z
  .nativeEnum(AccountType);

/** @internal */
export const AccountType$outboundSchema: z.ZodNativeEnum<typeof AccountType> =
  AccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
  /** @deprecated use `AccountType$inboundSchema` instead. */
  export const inboundSchema = AccountType$inboundSchema;
  /** @deprecated use `AccountType$outboundSchema` instead. */
  export const outboundSchema = AccountType$outboundSchema;
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesCurrency$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAddHrisEmployeesCurrency> = z.nativeEnum(
    HrisEmployeesAddHrisEmployeesCurrency,
  );

/** @internal */
export const HrisEmployeesAddHrisEmployeesCurrency$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeesAddHrisEmployeesCurrency> =
    HrisEmployeesAddHrisEmployeesCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesCurrency$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesCurrency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAddHrisEmployeesCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesCurrency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesCurrency$outboundSchema;
}

/** @internal */
export const BankAccounts$inboundSchema: z.ZodType<
  BankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(AccountType$inboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisEmployeesAddHrisEmployeesCurrency$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type BankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const BankAccounts$outboundSchema: z.ZodType<
  BankAccounts$Outbound,
  z.ZodTypeDef,
  BankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(AccountType$outboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisEmployeesAddHrisEmployeesCurrency$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccounts$ {
  /** @deprecated use `BankAccounts$inboundSchema` instead. */
  export const inboundSchema = BankAccounts$inboundSchema;
  /** @deprecated use `BankAccounts$outboundSchema` instead. */
  export const outboundSchema = BankAccounts$outboundSchema;
  /** @deprecated use `BankAccounts$Outbound` instead. */
  export type Outbound = BankAccounts$Outbound;
}

export function bankAccountsToJSON(bankAccounts: BankAccounts): string {
  return JSON.stringify(BankAccounts$outboundSchema.parse(bankAccounts));
}

export function bankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<BankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccounts' from JSON`,
  );
}

/** @internal */
export const ProbationPeriod$inboundSchema: z.ZodType<
  ProbationPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type ProbationPeriod$Outbound = {
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
};

/** @internal */
export const ProbationPeriod$outboundSchema: z.ZodType<
  ProbationPeriod$Outbound,
  z.ZodTypeDef,
  ProbationPeriod
> = z.object({
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProbationPeriod$ {
  /** @deprecated use `ProbationPeriod$inboundSchema` instead. */
  export const inboundSchema = ProbationPeriod$inboundSchema;
  /** @deprecated use `ProbationPeriod$outboundSchema` instead. */
  export const outboundSchema = ProbationPeriod$outboundSchema;
  /** @deprecated use `ProbationPeriod$Outbound` instead. */
  export type Outbound = ProbationPeriod$Outbound;
}

export function probationPeriodToJSON(
  probationPeriod: ProbationPeriod,
): string {
  return JSON.stringify(ProbationPeriod$outboundSchema.parse(probationPeriod));
}

export function probationPeriodFromJSON(
  jsonString: string,
): SafeParseResult<ProbationPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProbationPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProbationPeriod' from JSON`,
  );
}

/** @internal */
export const ExtendPaths$inboundSchema: z.ZodType<
  ExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const ExtendPaths$outboundSchema: z.ZodType<
  ExtendPaths$Outbound,
  z.ZodTypeDef,
  ExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtendPaths$ {
  /** @deprecated use `ExtendPaths$inboundSchema` instead. */
  export const inboundSchema = ExtendPaths$inboundSchema;
  /** @deprecated use `ExtendPaths$outboundSchema` instead. */
  export const outboundSchema = ExtendPaths$outboundSchema;
  /** @deprecated use `ExtendPaths$Outbound` instead. */
  export type Outbound = ExtendPaths$Outbound;
}

export function extendPathsToJSON(extendPaths: ExtendPaths): string {
  return JSON.stringify(ExtendPaths$outboundSchema.parse(extendPaths));
}

export function extendPathsFromJSON(
  jsonString: string,
): SafeParseResult<ExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtendPaths' from JSON`,
  );
}

/** @internal */
export const PassThrough$inboundSchema: z.ZodType<
  PassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => ExtendPaths$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type PassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<ExtendPaths$Outbound> | undefined;
};

/** @internal */
export const PassThrough$outboundSchema: z.ZodType<
  PassThrough$Outbound,
  z.ZodTypeDef,
  PassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => ExtendPaths$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PassThrough$ {
  /** @deprecated use `PassThrough$inboundSchema` instead. */
  export const inboundSchema = PassThrough$inboundSchema;
  /** @deprecated use `PassThrough$outboundSchema` instead. */
  export const outboundSchema = PassThrough$outboundSchema;
  /** @deprecated use `PassThrough$Outbound` instead. */
  export type Outbound = PassThrough$Outbound;
}

export function passThroughToJSON(passThrough: PassThrough): string {
  return JSON.stringify(PassThrough$outboundSchema.parse(passThrough));
}

export function passThroughFromJSON(
  jsonString: string,
): SafeParseResult<PassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PassThrough' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddRequestBody$inboundSchema: z.ZodType<
  HrisEmployeesAddRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  display_name: z.nullable(z.string()).optional(),
  preferred_name: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  marital_status: z.nullable(z.string()).optional(),
  partner: z.lazy(() => Person$inboundSchema).optional(),
  division: z.nullable(z.string()).optional(),
  division_id: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  department_id: z.nullable(z.string()).optional(),
  department_name: z.nullable(z.string()).optional(),
  team: z.nullable(z.lazy(() => Team$inboundSchema)).optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employment_start_date: z.nullable(z.string()).optional(),
  employment_end_date: z.nullable(z.string()).optional(),
  leaving_reason: z.nullable(LeavingReason$inboundSchema).optional(),
  employee_number: z.nullable(z.string()).optional(),
  employment_status: z.nullable(EmploymentStatus$inboundSchema).optional(),
  employment_role: z.lazy(() => EmploymentRole$inboundSchema).optional(),
  ethnicity: z.nullable(z.string()).optional(),
  manager: z.lazy(() => Manager$inboundSchema).optional(),
  direct_reports: z.nullable(z.array(z.string())).optional(),
  social_security_number: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  deceased_on: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  country_of_birth: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesAddGender$inboundSchema).optional(),
  pronouns: z.nullable(z.string()).optional(),
  preferred_language: z.nullable(z.string()).optional(),
  languages: z.array(z.string()).optional(),
  nationalities: z.array(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  record_url: z.nullable(z.string()).optional(),
  jobs: z.nullable(z.array(z.lazy(() => Job$inboundSchema))).optional(),
  compensations: z.nullable(z.array(z.lazy(() => Compensation$inboundSchema)))
    .optional(),
  works_remote: z.nullable(z.boolean()).optional(),
  addresses: z.array(z.lazy(() => Addresses$inboundSchema)).optional(),
  phone_numbers: z.array(z.lazy(() => PhoneNumbers$inboundSchema)).optional(),
  emails: z.array(z.lazy(() => Emails$inboundSchema)).optional(),
  custom_fields: z.array(z.lazy(() => CustomFields$inboundSchema)).optional(),
  social_links: z.array(z.lazy(() => SocialLinks$inboundSchema)).optional(),
  bank_accounts: z.array(z.lazy(() => BankAccounts$inboundSchema)).optional(),
  tax_code: z.nullable(z.string()).optional(),
  tax_id: z.nullable(z.string()).optional(),
  dietary_preference: z.nullable(z.string()).optional(),
  food_allergies: z.nullable(z.array(z.string())).optional(),
  probation_period: z.lazy(() => ProbationPeriod$inboundSchema).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  row_version: z.nullable(z.string()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  pass_through: z.array(z.lazy(() => PassThrough$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_name": "middleName",
    "display_name": "displayName",
    "preferred_name": "preferredName",
    "marital_status": "maritalStatus",
    "division_id": "divisionId",
    "department_id": "departmentId",
    "department_name": "departmentName",
    "company_id": "companyId",
    "company_name": "companyName",
    "employment_start_date": "employmentStartDate",
    "employment_end_date": "employmentEndDate",
    "leaving_reason": "leavingReason",
    "employee_number": "employeeNumber",
    "employment_status": "employmentStatus",
    "employment_role": "employmentRole",
    "direct_reports": "directReports",
    "social_security_number": "socialSecurityNumber",
    "deceased_on": "deceasedOn",
    "country_of_birth": "countryOfBirth",
    "preferred_language": "preferredLanguage",
    "photo_url": "photoUrl",
    "source_id": "sourceId",
    "record_url": "recordUrl",
    "works_remote": "worksRemote",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "social_links": "socialLinks",
    "bank_accounts": "bankAccounts",
    "tax_code": "taxCode",
    "tax_id": "taxId",
    "dietary_preference": "dietaryPreference",
    "food_allergies": "foodAllergies",
    "probation_period": "probationPeriod",
    "row_version": "rowVersion",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisEmployeesAddRequestBody$Outbound = {
  id?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  display_name?: string | null | undefined;
  preferred_name?: string | null | undefined;
  initials?: string | null | undefined;
  salutation?: string | null | undefined;
  title?: string | null | undefined;
  marital_status?: string | null | undefined;
  partner?: Person$Outbound | undefined;
  division?: string | null | undefined;
  division_id?: string | null | undefined;
  department?: string | null | undefined;
  department_id?: string | null | undefined;
  department_name?: string | null | undefined;
  team?: Team$Outbound | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  employment_start_date?: string | null | undefined;
  employment_end_date?: string | null | undefined;
  leaving_reason?: string | null | undefined;
  employee_number?: string | null | undefined;
  employment_status?: string | null | undefined;
  employment_role?: EmploymentRole$Outbound | undefined;
  ethnicity?: string | null | undefined;
  manager?: Manager$Outbound | undefined;
  direct_reports?: Array<string> | null | undefined;
  social_security_number?: string | null | undefined;
  birthday?: string | null | undefined;
  deceased_on?: string | null | undefined;
  country_of_birth?: string | null | undefined;
  description?: string | null | undefined;
  gender?: string | null | undefined;
  pronouns?: string | null | undefined;
  preferred_language?: string | null | undefined;
  languages?: Array<string> | undefined;
  nationalities?: Array<string> | undefined;
  photo_url?: string | null | undefined;
  timezone?: string | null | undefined;
  source?: string | null | undefined;
  source_id?: string | null | undefined;
  record_url?: string | null | undefined;
  jobs?: Array<Job$Outbound> | null | undefined;
  compensations?: Array<Compensation$Outbound> | null | undefined;
  works_remote?: boolean | null | undefined;
  addresses?: Array<Addresses$Outbound> | undefined;
  phone_numbers?: Array<PhoneNumbers$Outbound> | undefined;
  emails?: Array<Emails$Outbound> | undefined;
  custom_fields?: Array<CustomFields$Outbound> | undefined;
  social_links?: Array<SocialLinks$Outbound> | undefined;
  bank_accounts?: Array<BankAccounts$Outbound> | undefined;
  tax_code?: string | null | undefined;
  tax_id?: string | null | undefined;
  dietary_preference?: string | null | undefined;
  food_allergies?: Array<string> | null | undefined;
  probation_period?: ProbationPeriod$Outbound | undefined;
  tags?: Array<string> | null | undefined;
  row_version?: string | null | undefined;
  deleted?: boolean | null | undefined;
  pass_through?: Array<PassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisEmployeesAddRequestBody$outboundSchema: z.ZodType<
  HrisEmployeesAddRequestBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAddRequestBody
> = z.object({
  id: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  preferredName: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  maritalStatus: z.nullable(z.string()).optional(),
  partner: z.lazy(() => Person$outboundSchema).optional(),
  division: z.nullable(z.string()).optional(),
  divisionId: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  departmentId: z.nullable(z.string()).optional(),
  departmentName: z.nullable(z.string()).optional(),
  team: z.nullable(z.lazy(() => Team$outboundSchema)).optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employmentStartDate: z.nullable(z.string()).optional(),
  employmentEndDate: z.nullable(z.string()).optional(),
  leavingReason: z.nullable(LeavingReason$outboundSchema).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  employmentStatus: z.nullable(EmploymentStatus$outboundSchema).optional(),
  employmentRole: z.lazy(() => EmploymentRole$outboundSchema).optional(),
  ethnicity: z.nullable(z.string()).optional(),
  manager: z.lazy(() => Manager$outboundSchema).optional(),
  directReports: z.nullable(z.array(z.string())).optional(),
  socialSecurityNumber: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  deceasedOn: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  countryOfBirth: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeesAddGender$outboundSchema).optional(),
  pronouns: z.nullable(z.string()).optional(),
  preferredLanguage: z.nullable(z.string()).optional(),
  languages: z.array(z.string()).optional(),
  nationalities: z.array(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  recordUrl: z.nullable(z.string()).optional(),
  jobs: z.nullable(z.array(z.lazy(() => Job$outboundSchema))).optional(),
  compensations: z.nullable(z.array(z.lazy(() => Compensation$outboundSchema)))
    .optional(),
  worksRemote: z.nullable(z.boolean()).optional(),
  addresses: z.array(z.lazy(() => Addresses$outboundSchema)).optional(),
  phoneNumbers: z.array(z.lazy(() => PhoneNumbers$outboundSchema)).optional(),
  emails: z.array(z.lazy(() => Emails$outboundSchema)).optional(),
  customFields: z.array(z.lazy(() => CustomFields$outboundSchema)).optional(),
  socialLinks: z.array(z.lazy(() => SocialLinks$outboundSchema)).optional(),
  bankAccounts: z.array(z.lazy(() => BankAccounts$outboundSchema)).optional(),
  taxCode: z.nullable(z.string()).optional(),
  taxId: z.nullable(z.string()).optional(),
  dietaryPreference: z.nullable(z.string()).optional(),
  foodAllergies: z.nullable(z.array(z.string())).optional(),
  probationPeriod: z.lazy(() => ProbationPeriod$outboundSchema).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  rowVersion: z.nullable(z.string()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  passThrough: z.array(z.lazy(() => PassThrough$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    displayName: "display_name",
    preferredName: "preferred_name",
    maritalStatus: "marital_status",
    divisionId: "division_id",
    departmentId: "department_id",
    departmentName: "department_name",
    companyId: "company_id",
    companyName: "company_name",
    employmentStartDate: "employment_start_date",
    employmentEndDate: "employment_end_date",
    leavingReason: "leaving_reason",
    employeeNumber: "employee_number",
    employmentStatus: "employment_status",
    employmentRole: "employment_role",
    directReports: "direct_reports",
    socialSecurityNumber: "social_security_number",
    deceasedOn: "deceased_on",
    countryOfBirth: "country_of_birth",
    preferredLanguage: "preferred_language",
    photoUrl: "photo_url",
    sourceId: "source_id",
    recordUrl: "record_url",
    worksRemote: "works_remote",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    socialLinks: "social_links",
    bankAccounts: "bank_accounts",
    taxCode: "tax_code",
    taxId: "tax_id",
    dietaryPreference: "dietary_preference",
    foodAllergies: "food_allergies",
    probationPeriod: "probation_period",
    rowVersion: "row_version",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddRequestBody$ {
  /** @deprecated use `HrisEmployeesAddRequestBody$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddRequestBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAddRequestBody$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddRequestBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAddRequestBody$Outbound` instead. */
  export type Outbound = HrisEmployeesAddRequestBody$Outbound;
}

export function hrisEmployeesAddRequestBodyToJSON(
  hrisEmployeesAddRequestBody: HrisEmployeesAddRequestBody,
): string {
  return JSON.stringify(
    HrisEmployeesAddRequestBody$outboundSchema.parse(
      hrisEmployeesAddRequestBody,
    ),
  );
}

export function hrisEmployeesAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAddRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAddRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAddRequestBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddRequest$inboundSchema: z.ZodType<
  HrisEmployeesAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => HrisEmployeesAddRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type HrisEmployeesAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  RequestBody: HrisEmployeesAddRequestBody$Outbound;
};

/** @internal */
export const HrisEmployeesAddRequest$outboundSchema: z.ZodType<
  HrisEmployeesAddRequest$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => HrisEmployeesAddRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddRequest$ {
  /** @deprecated use `HrisEmployeesAddRequest$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddRequest$inboundSchema;
  /** @deprecated use `HrisEmployeesAddRequest$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddRequest$outboundSchema;
  /** @deprecated use `HrisEmployeesAddRequest$Outbound` instead. */
  export type Outbound = HrisEmployeesAddRequest$Outbound;
}

export function hrisEmployeesAddRequestToJSON(
  hrisEmployeesAddRequest: HrisEmployeesAddRequest,
): string {
  return JSON.stringify(
    HrisEmployeesAddRequest$outboundSchema.parse(hrisEmployeesAddRequest),
  );
}

export function hrisEmployeesAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAddRequest' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddDetail$inboundSchema: z.ZodType<
  HrisEmployeesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisEmployeesAddDetail$outboundSchema: z.ZodType<
  HrisEmployeesAddDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddDetail$ {
  /** @deprecated use `HrisEmployeesAddDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddDetail$inboundSchema;
  /** @deprecated use `HrisEmployeesAddDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddDetail$outboundSchema;
  /** @deprecated use `HrisEmployeesAddDetail$Outbound` instead. */
  export type Outbound = HrisEmployeesAddDetail$Outbound;
}

export function hrisEmployeesAddDetailToJSON(
  hrisEmployeesAddDetail: HrisEmployeesAddDetail,
): string {
  return JSON.stringify(
    HrisEmployeesAddDetail$outboundSchema.parse(hrisEmployeesAddDetail),
  );
}

export function hrisEmployeesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAddDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesAddHrisEmployeesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type HrisEmployeesAddHrisEmployeesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeesAddHrisEmployeesResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeesAddHrisEmployeesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeesAddHrisEmployeesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddHrisEmployeesResponseBody$ {
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeesAddHrisEmployeesResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeesAddHrisEmployeesResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAddHrisEmployeesResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesAddHrisEmployeesResponseBody$Outbound;
}

export function hrisEmployeesAddHrisEmployeesResponseBodyToJSON(
  hrisEmployeesAddHrisEmployeesResponseBody:
    HrisEmployeesAddHrisEmployeesResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeesAddHrisEmployeesResponseBody$outboundSchema.parse(
      hrisEmployeesAddHrisEmployeesResponseBody,
    ),
  );
}

export function hrisEmployeesAddHrisEmployeesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeesAddHrisEmployeesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeesAddHrisEmployeesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeesAddHrisEmployeesResponseBody' from JSON`,
  );
}

/** @internal */
export const UnifiedId$inboundSchema: z.ZodType<
  UnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UnifiedId$outboundSchema: z.ZodType<
  UnifiedId$Outbound,
  z.ZodTypeDef,
  UnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedId$ {
  /** @deprecated use `UnifiedId$inboundSchema` instead. */
  export const inboundSchema = UnifiedId$inboundSchema;
  /** @deprecated use `UnifiedId$outboundSchema` instead. */
  export const outboundSchema = UnifiedId$outboundSchema;
  /** @deprecated use `UnifiedId$Outbound` instead. */
  export type Outbound = UnifiedId$Outbound;
}

export function unifiedIdToJSON(unifiedId: UnifiedId): string {
  return JSON.stringify(UnifiedId$outboundSchema.parse(unifiedId));
}

export function unifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedId' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddResponseBody$inboundSchema: z.ZodType<
  HrisEmployeesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisEmployeesAddResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UnifiedId$Outbound;
};

/** @internal */
export const HrisEmployeesAddResponseBody$outboundSchema: z.ZodType<
  HrisEmployeesAddResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAddResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddResponseBody$ {
  /** @deprecated use `HrisEmployeesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeesAddResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeesAddResponseBody$Outbound;
}

export function hrisEmployeesAddResponseBodyToJSON(
  hrisEmployeesAddResponseBody: HrisEmployeesAddResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeesAddResponseBody$outboundSchema.parse(
      hrisEmployeesAddResponseBody,
    ),
  );
}

export function hrisEmployeesAddResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAddResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAddResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAddResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeesAddResponse$inboundSchema: z.ZodType<
  HrisEmployeesAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "201_application/json_object": z.lazy(() =>
    HrisEmployeesAddResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisEmployeesAddHrisEmployeesResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "201_application/json_object": "twoHundredAndOneApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisEmployeesAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "201_application/json_object"?:
    | HrisEmployeesAddResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisEmployeesAddHrisEmployeesResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisEmployeesAddResponse$outboundSchema: z.ZodType<
  HrisEmployeesAddResponse$Outbound,
  z.ZodTypeDef,
  HrisEmployeesAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredAndOneApplicationJsonObject: z.lazy(() =>
    HrisEmployeesAddResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisEmployeesAddHrisEmployeesResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredAndOneApplicationJsonObject: "201_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesAddResponse$ {
  /** @deprecated use `HrisEmployeesAddResponse$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesAddResponse$inboundSchema;
  /** @deprecated use `HrisEmployeesAddResponse$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesAddResponse$outboundSchema;
  /** @deprecated use `HrisEmployeesAddResponse$Outbound` instead. */
  export type Outbound = HrisEmployeesAddResponse$Outbound;
}

export function hrisEmployeesAddResponseToJSON(
  hrisEmployeesAddResponse: HrisEmployeesAddResponse,
): string {
  return JSON.stringify(
    HrisEmployeesAddResponse$outboundSchema.parse(hrisEmployeesAddResponse),
  );
}

export function hrisEmployeesAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeesAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeesAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeesAddResponse' from JSON`,
  );
}
