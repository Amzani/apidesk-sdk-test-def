/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LeadsAddSecurity = {
  apiKey: string;
};

export type LeadsAddRequest = {
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
  leadCreateRequest: components.LeadCreateRequest;
};

export type LeadsAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Lead created
   */
  leadCreateResponse?: components.LeadCreateResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const LeadsAddSecurity$inboundSchema: z.ZodType<
  LeadsAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type LeadsAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const LeadsAddSecurity$outboundSchema: z.ZodType<
  LeadsAddSecurity$Outbound,
  z.ZodTypeDef,
  LeadsAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddSecurity$ {
  /** @deprecated use `LeadsAddSecurity$inboundSchema` instead. */
  export const inboundSchema = LeadsAddSecurity$inboundSchema;
  /** @deprecated use `LeadsAddSecurity$outboundSchema` instead. */
  export const outboundSchema = LeadsAddSecurity$outboundSchema;
  /** @deprecated use `LeadsAddSecurity$Outbound` instead. */
  export type Outbound = LeadsAddSecurity$Outbound;
}

export function leadsAddSecurityToJSON(
  leadsAddSecurity: LeadsAddSecurity,
): string {
  return JSON.stringify(
    LeadsAddSecurity$outboundSchema.parse(leadsAddSecurity),
  );
}

export function leadsAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddSecurity' from JSON`,
  );
}

/** @internal */
export const LeadsAddRequest$inboundSchema: z.ZodType<
  LeadsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  LeadCreateRequest: components.LeadCreateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "LeadCreateRequest": "leadCreateRequest",
  });
});

/** @internal */
export type LeadsAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  LeadCreateRequest: components.LeadCreateRequest$Outbound;
};

/** @internal */
export const LeadsAddRequest$outboundSchema: z.ZodType<
  LeadsAddRequest$Outbound,
  z.ZodTypeDef,
  LeadsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  leadCreateRequest: components.LeadCreateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    leadCreateRequest: "LeadCreateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddRequest$ {
  /** @deprecated use `LeadsAddRequest$inboundSchema` instead. */
  export const inboundSchema = LeadsAddRequest$inboundSchema;
  /** @deprecated use `LeadsAddRequest$outboundSchema` instead. */
  export const outboundSchema = LeadsAddRequest$outboundSchema;
  /** @deprecated use `LeadsAddRequest$Outbound` instead. */
  export type Outbound = LeadsAddRequest$Outbound;
}

export function leadsAddRequestToJSON(
  leadsAddRequest: LeadsAddRequest,
): string {
  return JSON.stringify(LeadsAddRequest$outboundSchema.parse(leadsAddRequest));
}

export function leadsAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddRequest' from JSON`,
  );
}

/** @internal */
export const LeadsAddResponse$inboundSchema: z.ZodType<
  LeadsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  LeadCreateResponse: components.LeadCreateResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "LeadCreateResponse": "leadCreateResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type LeadsAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  LeadCreateResponse?: components.LeadCreateResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const LeadsAddResponse$outboundSchema: z.ZodType<
  LeadsAddResponse$Outbound,
  z.ZodTypeDef,
  LeadsAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  leadCreateResponse: components.LeadCreateResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    leadCreateResponse: "LeadCreateResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddResponse$ {
  /** @deprecated use `LeadsAddResponse$inboundSchema` instead. */
  export const inboundSchema = LeadsAddResponse$inboundSchema;
  /** @deprecated use `LeadsAddResponse$outboundSchema` instead. */
  export const outboundSchema = LeadsAddResponse$outboundSchema;
  /** @deprecated use `LeadsAddResponse$Outbound` instead. */
  export type Outbound = LeadsAddResponse$Outbound;
}

export function leadsAddResponseToJSON(
  leadsAddResponse: LeadsAddResponse,
): string {
  return JSON.stringify(
    LeadsAddResponse$outboundSchema.parse(leadsAddResponse),
  );
}

export function leadsAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddResponse' from JSON`,
  );
}
