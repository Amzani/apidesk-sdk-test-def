/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LeadsAddSecurity = {
  apiKey: string;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const LeadsAddCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type LeadsAddCurrency = ClosedEnum<typeof LeadsAddCurrency>;

/**
 * The type of website
 */
export const LeadsAddType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type LeadsAddType = ClosedEnum<typeof LeadsAddType>;

export type LeadsAddWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: LeadsAddType | null | undefined;
};

/**
 * The type of address.
 */
export const LeadsAddLeadsType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type LeadsAddLeadsType = ClosedEnum<typeof LeadsAddLeadsType>;

export type LeadsAddAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: LeadsAddLeadsType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type LeadsAddSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const LeadsAddLeadsRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type LeadsAddLeadsRequestType = ClosedEnum<
  typeof LeadsAddLeadsRequestType
>;

export type LeadsAddPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: LeadsAddLeadsRequestType | null | undefined;
};

/**
 * Email type
 */
export const LeadsAddLeadsRequestRequestBodyType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type LeadsAddLeadsRequestRequestBodyType = ClosedEnum<
  typeof LeadsAddLeadsRequestRequestBodyType
>;

export type LeadsAddEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: LeadsAddLeadsRequestRequestBodyType | null | undefined;
};

export type LeadsAddValue6 = {};

export type LeadsAddValue4 = {};

export type LeadsAddValue =
  | LeadsAddValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadsAddValue6>;

export type LeadsAddCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | LeadsAddValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadsAddValue6>
    | null
    | undefined;
};

export type LeadsAddExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type LeadsAddPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<LeadsAddExtendPaths> | undefined;
};

export type LeadsAddRequestBody = {
  /**
   * Full name of the lead.
   */
  name: string;
  /**
   * The name of the company the lead is associated with.
   */
  companyName: string | null;
  /**
   * The owner of the lead.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the owner of the lead.
   */
  ownerName?: string | null | undefined;
  /**
   * The company the lead is associated with.
   */
  companyId?: string | null | undefined;
  /**
   * The identifier of the lead.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead.
   */
  lastName?: string | null | undefined;
  /**
   * The description of the lead.
   */
  description?: string | null | undefined;
  /**
   * The prefix of the lead.
   */
  prefix?: string | null | undefined;
  /**
   * The job title of the lead.
   */
  title?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  status?: string | null | undefined;
  /**
   * The monetary amount of the lead.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: LeadsAddCurrency | null | undefined;
  /**
   * The fax number of the lead.
   */
  fax?: string | null | undefined;
  websites?: Array<LeadsAddWebsites> | undefined;
  addresses?: Array<LeadsAddAddresses> | undefined;
  socialLinks?: Array<LeadsAddSocialLinks> | undefined;
  phoneNumbers?: Array<LeadsAddPhoneNumbers> | undefined;
  emails?: Array<LeadsAddEmails> | undefined;
  customFields?: Array<LeadsAddCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<LeadsAddPassThrough> | undefined;
};

export type LeadsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: LeadsAddRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsAddDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type LeadsAddLeadsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type LeadsAddUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Lead created
 */
export type LeadsAddResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: LeadsAddUnifiedId;
};

export type LeadsAddResponse = LeadsAddResponseBody | LeadsAddLeadsResponseBody;

/** @internal */
export const LeadsAddSecurity$inboundSchema: z.ZodType<
  LeadsAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type LeadsAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const LeadsAddSecurity$outboundSchema: z.ZodType<
  LeadsAddSecurity$Outbound,
  z.ZodTypeDef,
  LeadsAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddSecurity$ {
  /** @deprecated use `LeadsAddSecurity$inboundSchema` instead. */
  export const inboundSchema = LeadsAddSecurity$inboundSchema;
  /** @deprecated use `LeadsAddSecurity$outboundSchema` instead. */
  export const outboundSchema = LeadsAddSecurity$outboundSchema;
  /** @deprecated use `LeadsAddSecurity$Outbound` instead. */
  export type Outbound = LeadsAddSecurity$Outbound;
}

export function leadsAddSecurityToJSON(
  leadsAddSecurity: LeadsAddSecurity,
): string {
  return JSON.stringify(
    LeadsAddSecurity$outboundSchema.parse(leadsAddSecurity),
  );
}

export function leadsAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddSecurity' from JSON`,
  );
}

/** @internal */
export const LeadsAddCurrency$inboundSchema: z.ZodNativeEnum<
  typeof LeadsAddCurrency
> = z.nativeEnum(LeadsAddCurrency);

/** @internal */
export const LeadsAddCurrency$outboundSchema: z.ZodNativeEnum<
  typeof LeadsAddCurrency
> = LeadsAddCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddCurrency$ {
  /** @deprecated use `LeadsAddCurrency$inboundSchema` instead. */
  export const inboundSchema = LeadsAddCurrency$inboundSchema;
  /** @deprecated use `LeadsAddCurrency$outboundSchema` instead. */
  export const outboundSchema = LeadsAddCurrency$outboundSchema;
}

/** @internal */
export const LeadsAddType$inboundSchema: z.ZodNativeEnum<typeof LeadsAddType> =
  z.nativeEnum(LeadsAddType);

/** @internal */
export const LeadsAddType$outboundSchema: z.ZodNativeEnum<typeof LeadsAddType> =
  LeadsAddType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddType$ {
  /** @deprecated use `LeadsAddType$inboundSchema` instead. */
  export const inboundSchema = LeadsAddType$inboundSchema;
  /** @deprecated use `LeadsAddType$outboundSchema` instead. */
  export const outboundSchema = LeadsAddType$outboundSchema;
}

/** @internal */
export const LeadsAddWebsites$inboundSchema: z.ZodType<
  LeadsAddWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadsAddType$inboundSchema).optional(),
});

/** @internal */
export type LeadsAddWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsAddWebsites$outboundSchema: z.ZodType<
  LeadsAddWebsites$Outbound,
  z.ZodTypeDef,
  LeadsAddWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadsAddType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddWebsites$ {
  /** @deprecated use `LeadsAddWebsites$inboundSchema` instead. */
  export const inboundSchema = LeadsAddWebsites$inboundSchema;
  /** @deprecated use `LeadsAddWebsites$outboundSchema` instead. */
  export const outboundSchema = LeadsAddWebsites$outboundSchema;
  /** @deprecated use `LeadsAddWebsites$Outbound` instead. */
  export type Outbound = LeadsAddWebsites$Outbound;
}

export function leadsAddWebsitesToJSON(
  leadsAddWebsites: LeadsAddWebsites,
): string {
  return JSON.stringify(
    LeadsAddWebsites$outboundSchema.parse(leadsAddWebsites),
  );
}

export function leadsAddWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddWebsites' from JSON`,
  );
}

/** @internal */
export const LeadsAddLeadsType$inboundSchema: z.ZodNativeEnum<
  typeof LeadsAddLeadsType
> = z.nativeEnum(LeadsAddLeadsType);

/** @internal */
export const LeadsAddLeadsType$outboundSchema: z.ZodNativeEnum<
  typeof LeadsAddLeadsType
> = LeadsAddLeadsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsType$ {
  /** @deprecated use `LeadsAddLeadsType$inboundSchema` instead. */
  export const inboundSchema = LeadsAddLeadsType$inboundSchema;
  /** @deprecated use `LeadsAddLeadsType$outboundSchema` instead. */
  export const outboundSchema = LeadsAddLeadsType$outboundSchema;
}

/** @internal */
export const LeadsAddAddresses$inboundSchema: z.ZodType<
  LeadsAddAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsAddLeadsType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type LeadsAddAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const LeadsAddAddresses$outboundSchema: z.ZodType<
  LeadsAddAddresses$Outbound,
  z.ZodTypeDef,
  LeadsAddAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsAddLeadsType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddAddresses$ {
  /** @deprecated use `LeadsAddAddresses$inboundSchema` instead. */
  export const inboundSchema = LeadsAddAddresses$inboundSchema;
  /** @deprecated use `LeadsAddAddresses$outboundSchema` instead. */
  export const outboundSchema = LeadsAddAddresses$outboundSchema;
  /** @deprecated use `LeadsAddAddresses$Outbound` instead. */
  export type Outbound = LeadsAddAddresses$Outbound;
}

export function leadsAddAddressesToJSON(
  leadsAddAddresses: LeadsAddAddresses,
): string {
  return JSON.stringify(
    LeadsAddAddresses$outboundSchema.parse(leadsAddAddresses),
  );
}

export function leadsAddAddressesFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddAddresses' from JSON`,
  );
}

/** @internal */
export const LeadsAddSocialLinks$inboundSchema: z.ZodType<
  LeadsAddSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type LeadsAddSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsAddSocialLinks$outboundSchema: z.ZodType<
  LeadsAddSocialLinks$Outbound,
  z.ZodTypeDef,
  LeadsAddSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddSocialLinks$ {
  /** @deprecated use `LeadsAddSocialLinks$inboundSchema` instead. */
  export const inboundSchema = LeadsAddSocialLinks$inboundSchema;
  /** @deprecated use `LeadsAddSocialLinks$outboundSchema` instead. */
  export const outboundSchema = LeadsAddSocialLinks$outboundSchema;
  /** @deprecated use `LeadsAddSocialLinks$Outbound` instead. */
  export type Outbound = LeadsAddSocialLinks$Outbound;
}

export function leadsAddSocialLinksToJSON(
  leadsAddSocialLinks: LeadsAddSocialLinks,
): string {
  return JSON.stringify(
    LeadsAddSocialLinks$outboundSchema.parse(leadsAddSocialLinks),
  );
}

export function leadsAddSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddSocialLinks' from JSON`,
  );
}

/** @internal */
export const LeadsAddLeadsRequestType$inboundSchema: z.ZodNativeEnum<
  typeof LeadsAddLeadsRequestType
> = z.nativeEnum(LeadsAddLeadsRequestType);

/** @internal */
export const LeadsAddLeadsRequestType$outboundSchema: z.ZodNativeEnum<
  typeof LeadsAddLeadsRequestType
> = LeadsAddLeadsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsRequestType$ {
  /** @deprecated use `LeadsAddLeadsRequestType$inboundSchema` instead. */
  export const inboundSchema = LeadsAddLeadsRequestType$inboundSchema;
  /** @deprecated use `LeadsAddLeadsRequestType$outboundSchema` instead. */
  export const outboundSchema = LeadsAddLeadsRequestType$outboundSchema;
}

/** @internal */
export const LeadsAddPhoneNumbers$inboundSchema: z.ZodType<
  LeadsAddPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsAddLeadsRequestType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type LeadsAddPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsAddPhoneNumbers$outboundSchema: z.ZodType<
  LeadsAddPhoneNumbers$Outbound,
  z.ZodTypeDef,
  LeadsAddPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsAddLeadsRequestType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddPhoneNumbers$ {
  /** @deprecated use `LeadsAddPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = LeadsAddPhoneNumbers$inboundSchema;
  /** @deprecated use `LeadsAddPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = LeadsAddPhoneNumbers$outboundSchema;
  /** @deprecated use `LeadsAddPhoneNumbers$Outbound` instead. */
  export type Outbound = LeadsAddPhoneNumbers$Outbound;
}

export function leadsAddPhoneNumbersToJSON(
  leadsAddPhoneNumbers: LeadsAddPhoneNumbers,
): string {
  return JSON.stringify(
    LeadsAddPhoneNumbers$outboundSchema.parse(leadsAddPhoneNumbers),
  );
}

export function leadsAddPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const LeadsAddLeadsRequestRequestBodyType$inboundSchema: z.ZodNativeEnum<
  typeof LeadsAddLeadsRequestRequestBodyType
> = z.nativeEnum(LeadsAddLeadsRequestRequestBodyType);

/** @internal */
export const LeadsAddLeadsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof LeadsAddLeadsRequestRequestBodyType> =
    LeadsAddLeadsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsRequestRequestBodyType$ {
  /** @deprecated use `LeadsAddLeadsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    LeadsAddLeadsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `LeadsAddLeadsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    LeadsAddLeadsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const LeadsAddEmails$inboundSchema: z.ZodType<
  LeadsAddEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadsAddLeadsRequestRequestBodyType$inboundSchema)
    .optional(),
});

/** @internal */
export type LeadsAddEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsAddEmails$outboundSchema: z.ZodType<
  LeadsAddEmails$Outbound,
  z.ZodTypeDef,
  LeadsAddEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadsAddLeadsRequestRequestBodyType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddEmails$ {
  /** @deprecated use `LeadsAddEmails$inboundSchema` instead. */
  export const inboundSchema = LeadsAddEmails$inboundSchema;
  /** @deprecated use `LeadsAddEmails$outboundSchema` instead. */
  export const outboundSchema = LeadsAddEmails$outboundSchema;
  /** @deprecated use `LeadsAddEmails$Outbound` instead. */
  export type Outbound = LeadsAddEmails$Outbound;
}

export function leadsAddEmailsToJSON(leadsAddEmails: LeadsAddEmails): string {
  return JSON.stringify(LeadsAddEmails$outboundSchema.parse(leadsAddEmails));
}

export function leadsAddEmailsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddEmails' from JSON`,
  );
}

/** @internal */
export const LeadsAddValue6$inboundSchema: z.ZodType<
  LeadsAddValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadsAddValue6$Outbound = {};

/** @internal */
export const LeadsAddValue6$outboundSchema: z.ZodType<
  LeadsAddValue6$Outbound,
  z.ZodTypeDef,
  LeadsAddValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddValue6$ {
  /** @deprecated use `LeadsAddValue6$inboundSchema` instead. */
  export const inboundSchema = LeadsAddValue6$inboundSchema;
  /** @deprecated use `LeadsAddValue6$outboundSchema` instead. */
  export const outboundSchema = LeadsAddValue6$outboundSchema;
  /** @deprecated use `LeadsAddValue6$Outbound` instead. */
  export type Outbound = LeadsAddValue6$Outbound;
}

export function leadsAddValue6ToJSON(leadsAddValue6: LeadsAddValue6): string {
  return JSON.stringify(LeadsAddValue6$outboundSchema.parse(leadsAddValue6));
}

export function leadsAddValue6FromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddValue6' from JSON`,
  );
}

/** @internal */
export const LeadsAddValue4$inboundSchema: z.ZodType<
  LeadsAddValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadsAddValue4$Outbound = {};

/** @internal */
export const LeadsAddValue4$outboundSchema: z.ZodType<
  LeadsAddValue4$Outbound,
  z.ZodTypeDef,
  LeadsAddValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddValue4$ {
  /** @deprecated use `LeadsAddValue4$inboundSchema` instead. */
  export const inboundSchema = LeadsAddValue4$inboundSchema;
  /** @deprecated use `LeadsAddValue4$outboundSchema` instead. */
  export const outboundSchema = LeadsAddValue4$outboundSchema;
  /** @deprecated use `LeadsAddValue4$Outbound` instead. */
  export type Outbound = LeadsAddValue4$Outbound;
}

export function leadsAddValue4ToJSON(leadsAddValue4: LeadsAddValue4): string {
  return JSON.stringify(LeadsAddValue4$outboundSchema.parse(leadsAddValue4));
}

export function leadsAddValue4FromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddValue4' from JSON`,
  );
}

/** @internal */
export const LeadsAddValue$inboundSchema: z.ZodType<
  LeadsAddValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadsAddValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadsAddValue6$inboundSchema)),
]);

/** @internal */
export type LeadsAddValue$Outbound =
  | LeadsAddValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadsAddValue6$Outbound>;

/** @internal */
export const LeadsAddValue$outboundSchema: z.ZodType<
  LeadsAddValue$Outbound,
  z.ZodTypeDef,
  LeadsAddValue
> = z.union([
  z.lazy(() => LeadsAddValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadsAddValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddValue$ {
  /** @deprecated use `LeadsAddValue$inboundSchema` instead. */
  export const inboundSchema = LeadsAddValue$inboundSchema;
  /** @deprecated use `LeadsAddValue$outboundSchema` instead. */
  export const outboundSchema = LeadsAddValue$outboundSchema;
  /** @deprecated use `LeadsAddValue$Outbound` instead. */
  export type Outbound = LeadsAddValue$Outbound;
}

export function leadsAddValueToJSON(leadsAddValue: LeadsAddValue): string {
  return JSON.stringify(LeadsAddValue$outboundSchema.parse(leadsAddValue));
}

export function leadsAddValueFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddValue' from JSON`,
  );
}

/** @internal */
export const LeadsAddCustomFields$inboundSchema: z.ZodType<
  LeadsAddCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadsAddValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadsAddValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type LeadsAddCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | LeadsAddValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadsAddValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const LeadsAddCustomFields$outboundSchema: z.ZodType<
  LeadsAddCustomFields$Outbound,
  z.ZodTypeDef,
  LeadsAddCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadsAddValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadsAddValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddCustomFields$ {
  /** @deprecated use `LeadsAddCustomFields$inboundSchema` instead. */
  export const inboundSchema = LeadsAddCustomFields$inboundSchema;
  /** @deprecated use `LeadsAddCustomFields$outboundSchema` instead. */
  export const outboundSchema = LeadsAddCustomFields$outboundSchema;
  /** @deprecated use `LeadsAddCustomFields$Outbound` instead. */
  export type Outbound = LeadsAddCustomFields$Outbound;
}

export function leadsAddCustomFieldsToJSON(
  leadsAddCustomFields: LeadsAddCustomFields,
): string {
  return JSON.stringify(
    LeadsAddCustomFields$outboundSchema.parse(leadsAddCustomFields),
  );
}

export function leadsAddCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddCustomFields' from JSON`,
  );
}

/** @internal */
export const LeadsAddExtendPaths$inboundSchema: z.ZodType<
  LeadsAddExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type LeadsAddExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const LeadsAddExtendPaths$outboundSchema: z.ZodType<
  LeadsAddExtendPaths$Outbound,
  z.ZodTypeDef,
  LeadsAddExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddExtendPaths$ {
  /** @deprecated use `LeadsAddExtendPaths$inboundSchema` instead. */
  export const inboundSchema = LeadsAddExtendPaths$inboundSchema;
  /** @deprecated use `LeadsAddExtendPaths$outboundSchema` instead. */
  export const outboundSchema = LeadsAddExtendPaths$outboundSchema;
  /** @deprecated use `LeadsAddExtendPaths$Outbound` instead. */
  export type Outbound = LeadsAddExtendPaths$Outbound;
}

export function leadsAddExtendPathsToJSON(
  leadsAddExtendPaths: LeadsAddExtendPaths,
): string {
  return JSON.stringify(
    LeadsAddExtendPaths$outboundSchema.parse(leadsAddExtendPaths),
  );
}

export function leadsAddExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddExtendPaths' from JSON`,
  );
}

/** @internal */
export const LeadsAddPassThrough$inboundSchema: z.ZodType<
  LeadsAddPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => LeadsAddExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type LeadsAddPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<LeadsAddExtendPaths$Outbound> | undefined;
};

/** @internal */
export const LeadsAddPassThrough$outboundSchema: z.ZodType<
  LeadsAddPassThrough$Outbound,
  z.ZodTypeDef,
  LeadsAddPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => LeadsAddExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddPassThrough$ {
  /** @deprecated use `LeadsAddPassThrough$inboundSchema` instead. */
  export const inboundSchema = LeadsAddPassThrough$inboundSchema;
  /** @deprecated use `LeadsAddPassThrough$outboundSchema` instead. */
  export const outboundSchema = LeadsAddPassThrough$outboundSchema;
  /** @deprecated use `LeadsAddPassThrough$Outbound` instead. */
  export type Outbound = LeadsAddPassThrough$Outbound;
}

export function leadsAddPassThroughToJSON(
  leadsAddPassThrough: LeadsAddPassThrough,
): string {
  return JSON.stringify(
    LeadsAddPassThrough$outboundSchema.parse(leadsAddPassThrough),
  );
}

export function leadsAddPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddPassThrough' from JSON`,
  );
}

/** @internal */
export const LeadsAddRequestBody$inboundSchema: z.ZodType<
  LeadsAddRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(LeadsAddCurrency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => LeadsAddWebsites$inboundSchema)).optional(),
  addresses: z.array(z.lazy(() => LeadsAddAddresses$inboundSchema)).optional(),
  social_links: z.array(z.lazy(() => LeadsAddSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(z.lazy(() => LeadsAddPhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => LeadsAddEmails$inboundSchema)).optional(),
  custom_fields: z.array(z.lazy(() => LeadsAddCustomFields$inboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  pass_through: z.array(z.lazy(() => LeadsAddPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type LeadsAddRequestBody$Outbound = {
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<LeadsAddWebsites$Outbound> | undefined;
  addresses?: Array<LeadsAddAddresses$Outbound> | undefined;
  social_links?: Array<LeadsAddSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<LeadsAddPhoneNumbers$Outbound> | undefined;
  emails?: Array<LeadsAddEmails$Outbound> | undefined;
  custom_fields?: Array<LeadsAddCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  pass_through?: Array<LeadsAddPassThrough$Outbound> | undefined;
};

/** @internal */
export const LeadsAddRequestBody$outboundSchema: z.ZodType<
  LeadsAddRequestBody$Outbound,
  z.ZodTypeDef,
  LeadsAddRequestBody
> = z.object({
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(LeadsAddCurrency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => LeadsAddWebsites$outboundSchema)).optional(),
  addresses: z.array(z.lazy(() => LeadsAddAddresses$outboundSchema)).optional(),
  socialLinks: z.array(z.lazy(() => LeadsAddSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => LeadsAddPhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => LeadsAddEmails$outboundSchema)).optional(),
  customFields: z.array(z.lazy(() => LeadsAddCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  passThrough: z.array(z.lazy(() => LeadsAddPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddRequestBody$ {
  /** @deprecated use `LeadsAddRequestBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAddRequestBody$inboundSchema;
  /** @deprecated use `LeadsAddRequestBody$outboundSchema` instead. */
  export const outboundSchema = LeadsAddRequestBody$outboundSchema;
  /** @deprecated use `LeadsAddRequestBody$Outbound` instead. */
  export type Outbound = LeadsAddRequestBody$Outbound;
}

export function leadsAddRequestBodyToJSON(
  leadsAddRequestBody: LeadsAddRequestBody,
): string {
  return JSON.stringify(
    LeadsAddRequestBody$outboundSchema.parse(leadsAddRequestBody),
  );
}

export function leadsAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddRequestBody' from JSON`,
  );
}

/** @internal */
export const LeadsAddRequest$inboundSchema: z.ZodType<
  LeadsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => LeadsAddRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type LeadsAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  RequestBody: LeadsAddRequestBody$Outbound;
};

/** @internal */
export const LeadsAddRequest$outboundSchema: z.ZodType<
  LeadsAddRequest$Outbound,
  z.ZodTypeDef,
  LeadsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => LeadsAddRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddRequest$ {
  /** @deprecated use `LeadsAddRequest$inboundSchema` instead. */
  export const inboundSchema = LeadsAddRequest$inboundSchema;
  /** @deprecated use `LeadsAddRequest$outboundSchema` instead. */
  export const outboundSchema = LeadsAddRequest$outboundSchema;
  /** @deprecated use `LeadsAddRequest$Outbound` instead. */
  export type Outbound = LeadsAddRequest$Outbound;
}

export function leadsAddRequestToJSON(
  leadsAddRequest: LeadsAddRequest,
): string {
  return JSON.stringify(LeadsAddRequest$outboundSchema.parse(leadsAddRequest));
}

export function leadsAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddRequest' from JSON`,
  );
}

/** @internal */
export const LeadsAddDetail$inboundSchema: z.ZodType<
  LeadsAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsAddDetail$outboundSchema: z.ZodType<
  LeadsAddDetail$Outbound,
  z.ZodTypeDef,
  LeadsAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddDetail$ {
  /** @deprecated use `LeadsAddDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsAddDetail$inboundSchema;
  /** @deprecated use `LeadsAddDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsAddDetail$outboundSchema;
  /** @deprecated use `LeadsAddDetail$Outbound` instead. */
  export type Outbound = LeadsAddDetail$Outbound;
}

export function leadsAddDetailToJSON(leadsAddDetail: LeadsAddDetail): string {
  return JSON.stringify(LeadsAddDetail$outboundSchema.parse(leadsAddDetail));
}

export function leadsAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddDetail' from JSON`,
  );
}

/** @internal */
export const LeadsAddLeadsResponseBody$inboundSchema: z.ZodType<
  LeadsAddLeadsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type LeadsAddLeadsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAddLeadsResponseBody$outboundSchema: z.ZodType<
  LeadsAddLeadsResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAddLeadsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddLeadsResponseBody$ {
  /** @deprecated use `LeadsAddLeadsResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAddLeadsResponseBody$inboundSchema;
  /** @deprecated use `LeadsAddLeadsResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsAddLeadsResponseBody$outboundSchema;
  /** @deprecated use `LeadsAddLeadsResponseBody$Outbound` instead. */
  export type Outbound = LeadsAddLeadsResponseBody$Outbound;
}

export function leadsAddLeadsResponseBodyToJSON(
  leadsAddLeadsResponseBody: LeadsAddLeadsResponseBody,
): string {
  return JSON.stringify(
    LeadsAddLeadsResponseBody$outboundSchema.parse(leadsAddLeadsResponseBody),
  );
}

export function leadsAddLeadsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddLeadsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddLeadsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddLeadsResponseBody' from JSON`,
  );
}

/** @internal */
export const LeadsAddUnifiedId$inboundSchema: z.ZodType<
  LeadsAddUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type LeadsAddUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const LeadsAddUnifiedId$outboundSchema: z.ZodType<
  LeadsAddUnifiedId$Outbound,
  z.ZodTypeDef,
  LeadsAddUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddUnifiedId$ {
  /** @deprecated use `LeadsAddUnifiedId$inboundSchema` instead. */
  export const inboundSchema = LeadsAddUnifiedId$inboundSchema;
  /** @deprecated use `LeadsAddUnifiedId$outboundSchema` instead. */
  export const outboundSchema = LeadsAddUnifiedId$outboundSchema;
  /** @deprecated use `LeadsAddUnifiedId$Outbound` instead. */
  export type Outbound = LeadsAddUnifiedId$Outbound;
}

export function leadsAddUnifiedIdToJSON(
  leadsAddUnifiedId: LeadsAddUnifiedId,
): string {
  return JSON.stringify(
    LeadsAddUnifiedId$outboundSchema.parse(leadsAddUnifiedId),
  );
}

export function leadsAddUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddUnifiedId' from JSON`,
  );
}

/** @internal */
export const LeadsAddResponseBody$inboundSchema: z.ZodType<
  LeadsAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => LeadsAddUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type LeadsAddResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: LeadsAddUnifiedId$Outbound;
};

/** @internal */
export const LeadsAddResponseBody$outboundSchema: z.ZodType<
  LeadsAddResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAddResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => LeadsAddUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddResponseBody$ {
  /** @deprecated use `LeadsAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAddResponseBody$inboundSchema;
  /** @deprecated use `LeadsAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsAddResponseBody$outboundSchema;
  /** @deprecated use `LeadsAddResponseBody$Outbound` instead. */
  export type Outbound = LeadsAddResponseBody$Outbound;
}

export function leadsAddResponseBodyToJSON(
  leadsAddResponseBody: LeadsAddResponseBody,
): string {
  return JSON.stringify(
    LeadsAddResponseBody$outboundSchema.parse(leadsAddResponseBody),
  );
}

export function leadsAddResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddResponseBody' from JSON`,
  );
}

/** @internal */
export const LeadsAddResponse$inboundSchema: z.ZodType<
  LeadsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadsAddResponseBody$inboundSchema),
  z.lazy(() => LeadsAddLeadsResponseBody$inboundSchema),
]);

/** @internal */
export type LeadsAddResponse$Outbound =
  | LeadsAddResponseBody$Outbound
  | LeadsAddLeadsResponseBody$Outbound;

/** @internal */
export const LeadsAddResponse$outboundSchema: z.ZodType<
  LeadsAddResponse$Outbound,
  z.ZodTypeDef,
  LeadsAddResponse
> = z.union([
  z.lazy(() => LeadsAddResponseBody$outboundSchema),
  z.lazy(() => LeadsAddLeadsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAddResponse$ {
  /** @deprecated use `LeadsAddResponse$inboundSchema` instead. */
  export const inboundSchema = LeadsAddResponse$inboundSchema;
  /** @deprecated use `LeadsAddResponse$outboundSchema` instead. */
  export const outboundSchema = LeadsAddResponse$outboundSchema;
  /** @deprecated use `LeadsAddResponse$Outbound` instead. */
  export type Outbound = LeadsAddResponse$Outbound;
}

export function leadsAddResponseToJSON(
  leadsAddResponse: LeadsAddResponse,
): string {
  return JSON.stringify(
    LeadsAddResponse$outboundSchema.parse(leadsAddResponse),
  );
}

export function leadsAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAddResponse' from JSON`,
  );
}
