/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisDepartmentsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisDepartmentsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisDepartmentsOneHrisDepartmentsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisDepartmentsOneCustomMappings = {};

export type HrisDepartmentsOneExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisDepartmentsOnePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisDepartmentsOneExtendPaths> | undefined;
};

export type HrisDepartmentsOneData = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * Parent ID
   */
  parentId?: string | null | undefined;
  /**
   * Department name
   */
  name?: string | null | undefined;
  code?: string | null | undefined;
  description?: string | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: HrisDepartmentsOneCustomMappings | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisDepartmentsOnePassThrough> | undefined;
};

/**
 * Departments
 */
export type HrisDepartmentsOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisDepartmentsOneData;
};

export type HrisDepartmentsOneResponse =
  | HrisDepartmentsOneResponseBody
  | HrisDepartmentsOneHrisDepartmentsResponseBody;

/** @internal */
export const HrisDepartmentsOneGlobals$inboundSchema: z.ZodType<
  HrisDepartmentsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisDepartmentsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisDepartmentsOneGlobals$outboundSchema: z.ZodType<
  HrisDepartmentsOneGlobals$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneGlobals$ {
  /** @deprecated use `HrisDepartmentsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOneGlobals$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOneGlobals$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneGlobals$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneGlobals$Outbound;
}

export function hrisDepartmentsOneGlobalsToJSON(
  hrisDepartmentsOneGlobals: HrisDepartmentsOneGlobals,
): string {
  return JSON.stringify(
    HrisDepartmentsOneGlobals$outboundSchema.parse(hrisDepartmentsOneGlobals),
  );
}

export function hrisDepartmentsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsOneGlobals' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneRequest$inboundSchema: z.ZodType<
  HrisDepartmentsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisDepartmentsOneRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisDepartmentsOneRequest$outboundSchema: z.ZodType<
  HrisDepartmentsOneRequest$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneRequest$ {
  /** @deprecated use `HrisDepartmentsOneRequest$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOneRequest$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneRequest$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOneRequest$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneRequest$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneRequest$Outbound;
}

export function hrisDepartmentsOneRequestToJSON(
  hrisDepartmentsOneRequest: HrisDepartmentsOneRequest,
): string {
  return JSON.stringify(
    HrisDepartmentsOneRequest$outboundSchema.parse(hrisDepartmentsOneRequest),
  );
}

export function hrisDepartmentsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsOneRequest' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneDetail$inboundSchema: z.ZodType<
  HrisDepartmentsOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisDepartmentsOneDetail$outboundSchema: z.ZodType<
  HrisDepartmentsOneDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneDetail$ {
  /** @deprecated use `HrisDepartmentsOneDetail$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOneDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneDetail$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOneDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneDetail$Outbound;
}

export function hrisDepartmentsOneDetailToJSON(
  hrisDepartmentsOneDetail: HrisDepartmentsOneDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsOneDetail$outboundSchema.parse(hrisDepartmentsOneDetail),
  );
}

export function hrisDepartmentsOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsOneDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisDepartmentsOneHrisDepartmentsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsOneHrisDepartmentsResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsOneHrisDepartmentsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsOneHrisDepartmentsResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneHrisDepartmentsResponseBody$ {
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsOneHrisDepartmentsResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneHrisDepartmentsResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneHrisDepartmentsResponseBody$Outbound;
}

export function hrisDepartmentsOneHrisDepartmentsResponseBodyToJSON(
  hrisDepartmentsOneHrisDepartmentsResponseBody:
    HrisDepartmentsOneHrisDepartmentsResponseBody,
): string {
  return JSON.stringify(
    HrisDepartmentsOneHrisDepartmentsResponseBody$outboundSchema.parse(
      hrisDepartmentsOneHrisDepartmentsResponseBody,
    ),
  );
}

export function hrisDepartmentsOneHrisDepartmentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsOneHrisDepartmentsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsOneHrisDepartmentsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsOneHrisDepartmentsResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneCustomMappings$inboundSchema: z.ZodType<
  HrisDepartmentsOneCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisDepartmentsOneCustomMappings$Outbound = {};

/** @internal */
export const HrisDepartmentsOneCustomMappings$outboundSchema: z.ZodType<
  HrisDepartmentsOneCustomMappings$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneCustomMappings$ {
  /** @deprecated use `HrisDepartmentsOneCustomMappings$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOneCustomMappings$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneCustomMappings$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOneCustomMappings$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneCustomMappings$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneCustomMappings$Outbound;
}

export function hrisDepartmentsOneCustomMappingsToJSON(
  hrisDepartmentsOneCustomMappings: HrisDepartmentsOneCustomMappings,
): string {
  return JSON.stringify(
    HrisDepartmentsOneCustomMappings$outboundSchema.parse(
      hrisDepartmentsOneCustomMappings,
    ),
  );
}

export function hrisDepartmentsOneCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsOneCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsOneCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsOneCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneExtendPaths$inboundSchema: z.ZodType<
  HrisDepartmentsOneExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisDepartmentsOneExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisDepartmentsOneExtendPaths$outboundSchema: z.ZodType<
  HrisDepartmentsOneExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneExtendPaths$ {
  /** @deprecated use `HrisDepartmentsOneExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOneExtendPaths$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOneExtendPaths$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneExtendPaths$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneExtendPaths$Outbound;
}

export function hrisDepartmentsOneExtendPathsToJSON(
  hrisDepartmentsOneExtendPaths: HrisDepartmentsOneExtendPaths,
): string {
  return JSON.stringify(
    HrisDepartmentsOneExtendPaths$outboundSchema.parse(
      hrisDepartmentsOneExtendPaths,
    ),
  );
}

export function hrisDepartmentsOneExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsOneExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsOneExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsOneExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOnePassThrough$inboundSchema: z.ZodType<
  HrisDepartmentsOnePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => HrisDepartmentsOneExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisDepartmentsOnePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisDepartmentsOneExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisDepartmentsOnePassThrough$outboundSchema: z.ZodType<
  HrisDepartmentsOnePassThrough$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOnePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => HrisDepartmentsOneExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOnePassThrough$ {
  /** @deprecated use `HrisDepartmentsOnePassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOnePassThrough$inboundSchema;
  /** @deprecated use `HrisDepartmentsOnePassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOnePassThrough$outboundSchema;
  /** @deprecated use `HrisDepartmentsOnePassThrough$Outbound` instead. */
  export type Outbound = HrisDepartmentsOnePassThrough$Outbound;
}

export function hrisDepartmentsOnePassThroughToJSON(
  hrisDepartmentsOnePassThrough: HrisDepartmentsOnePassThrough,
): string {
  return JSON.stringify(
    HrisDepartmentsOnePassThrough$outboundSchema.parse(
      hrisDepartmentsOnePassThrough,
    ),
  );
}

export function hrisDepartmentsOnePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsOnePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsOnePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsOnePassThrough' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneData$inboundSchema: z.ZodType<
  HrisDepartmentsOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  parent_id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => HrisDepartmentsOneCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => HrisDepartmentsOnePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisDepartmentsOneData$Outbound = {
  id?: string | undefined;
  parent_id?: string | null | undefined;
  name?: string | null | undefined;
  code?: string | null | undefined;
  description?: string | null | undefined;
  custom_mappings?:
    | HrisDepartmentsOneCustomMappings$Outbound
    | null
    | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<HrisDepartmentsOnePassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisDepartmentsOneData$outboundSchema: z.ZodType<
  HrisDepartmentsOneData$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneData
> = z.object({
  id: z.string().optional(),
  parentId: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  customMappings: z.nullable(
    z.lazy(() => HrisDepartmentsOneCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(
    z.lazy(() => HrisDepartmentsOnePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneData$ {
  /** @deprecated use `HrisDepartmentsOneData$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOneData$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneData$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOneData$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneData$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneData$Outbound;
}

export function hrisDepartmentsOneDataToJSON(
  hrisDepartmentsOneData: HrisDepartmentsOneData,
): string {
  return JSON.stringify(
    HrisDepartmentsOneData$outboundSchema.parse(hrisDepartmentsOneData),
  );
}

export function hrisDepartmentsOneDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsOneData' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneResponseBody$inboundSchema: z.ZodType<
  HrisDepartmentsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisDepartmentsOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisDepartmentsOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisDepartmentsOneData$Outbound;
};

/** @internal */
export const HrisDepartmentsOneResponseBody$outboundSchema: z.ZodType<
  HrisDepartmentsOneResponseBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisDepartmentsOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneResponseBody$ {
  /** @deprecated use `HrisDepartmentsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOneResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOneResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneResponseBody$Outbound;
}

export function hrisDepartmentsOneResponseBodyToJSON(
  hrisDepartmentsOneResponseBody: HrisDepartmentsOneResponseBody,
): string {
  return JSON.stringify(
    HrisDepartmentsOneResponseBody$outboundSchema.parse(
      hrisDepartmentsOneResponseBody,
    ),
  );
}

export function hrisDepartmentsOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsOneResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsOneResponse$inboundSchema: z.ZodType<
  HrisDepartmentsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisDepartmentsOneResponseBody$inboundSchema),
  z.lazy(() => HrisDepartmentsOneHrisDepartmentsResponseBody$inboundSchema),
]);

/** @internal */
export type HrisDepartmentsOneResponse$Outbound =
  | HrisDepartmentsOneResponseBody$Outbound
  | HrisDepartmentsOneHrisDepartmentsResponseBody$Outbound;

/** @internal */
export const HrisDepartmentsOneResponse$outboundSchema: z.ZodType<
  HrisDepartmentsOneResponse$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsOneResponse
> = z.union([
  z.lazy(() => HrisDepartmentsOneResponseBody$outboundSchema),
  z.lazy(() => HrisDepartmentsOneHrisDepartmentsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsOneResponse$ {
  /** @deprecated use `HrisDepartmentsOneResponse$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsOneResponse$inboundSchema;
  /** @deprecated use `HrisDepartmentsOneResponse$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsOneResponse$outboundSchema;
  /** @deprecated use `HrisDepartmentsOneResponse$Outbound` instead. */
  export type Outbound = HrisDepartmentsOneResponse$Outbound;
}

export function hrisDepartmentsOneResponseToJSON(
  hrisDepartmentsOneResponse: HrisDepartmentsOneResponse,
): string {
  return JSON.stringify(
    HrisDepartmentsOneResponse$outboundSchema.parse(hrisDepartmentsOneResponse),
  );
}

export function hrisDepartmentsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsOneResponse' from JSON`,
  );
}
