/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsersAllSecurity = {
  apiKey: string;
};

export type UsersAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type UsersAllResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The type of address.
 */
export const UsersAllType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type UsersAllType = ClosedEnum<typeof UsersAllType>;

export type UsersAllAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: UsersAllType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const UsersAllUsersType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type UsersAllUsersType = ClosedEnum<typeof UsersAllUsersType>;

export type UsersAllPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: UsersAllUsersType | null | undefined;
};

/**
 * Email type
 */
export const UsersAllUsersResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type UsersAllUsersResponseType = ClosedEnum<
  typeof UsersAllUsersResponseType
>;

export type UsersAllEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: UsersAllUsersResponseType | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type UsersAllCustomMappings = {};

export type UsersAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type UsersAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<UsersAllExtendPaths> | undefined;
};

export type UsersAllData = {
  /**
   * The unique identifier for the user
   */
  id?: string | undefined;
  /**
   * The parent user id
   */
  parentId?: string | null | undefined;
  /**
   * The username of the user
   */
  username?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  division?: string | null | undefined;
  /**
   * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * The name of the company.
   */
  companyName?: string | null | undefined;
  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  employeeNumber?: string | null | undefined;
  /**
   * A description of the object.
   */
  description?: string | null | undefined;
  /**
   * The URL of the user's avatar
   */
  image?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  /**
   * The status of the user
   */
  status?: string | null | undefined;
  addresses?: Array<UsersAllAddresses> | undefined;
  phoneNumbers?: Array<UsersAllPhoneNumbers> | undefined;
  emails: Array<UsersAllEmails>;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: UsersAllCustomMappings | null | undefined;
  /**
   * The date and time when the user was last updated.
   */
  updatedAt?: string | null | undefined;
  /**
   * The date and time when the user was created.
   */
  createdAt?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<UsersAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type UsersAllCursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type UsersAllMeta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: UsersAllCursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type UsersAllLinks = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Users
 */
export type UsersAllResponseBodyOutput = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<UsersAllData>;
  /**
   * Response metadata
   */
  meta?: UsersAllMeta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: UsersAllLinks | undefined;
};

export type UsersAllResponse =
  | UsersAllResponseBody
  | UsersAllResponseBodyOutput;

/** @internal */
export const UsersAllSecurity$inboundSchema: z.ZodType<
  UsersAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type UsersAllSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const UsersAllSecurity$outboundSchema: z.ZodType<
  UsersAllSecurity$Outbound,
  z.ZodTypeDef,
  UsersAllSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllSecurity$ {
  /** @deprecated use `UsersAllSecurity$inboundSchema` instead. */
  export const inboundSchema = UsersAllSecurity$inboundSchema;
  /** @deprecated use `UsersAllSecurity$outboundSchema` instead. */
  export const outboundSchema = UsersAllSecurity$outboundSchema;
  /** @deprecated use `UsersAllSecurity$Outbound` instead. */
  export type Outbound = UsersAllSecurity$Outbound;
}

export function usersAllSecurityToJSON(
  usersAllSecurity: UsersAllSecurity,
): string {
  return JSON.stringify(
    UsersAllSecurity$outboundSchema.parse(usersAllSecurity),
  );
}

export function usersAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllSecurity' from JSON`,
  );
}

/** @internal */
export const UsersAllRequest$inboundSchema: z.ZodType<
  UsersAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UsersAllRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const UsersAllRequest$outboundSchema: z.ZodType<
  UsersAllRequest$Outbound,
  z.ZodTypeDef,
  UsersAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllRequest$ {
  /** @deprecated use `UsersAllRequest$inboundSchema` instead. */
  export const inboundSchema = UsersAllRequest$inboundSchema;
  /** @deprecated use `UsersAllRequest$outboundSchema` instead. */
  export const outboundSchema = UsersAllRequest$outboundSchema;
  /** @deprecated use `UsersAllRequest$Outbound` instead. */
  export type Outbound = UsersAllRequest$Outbound;
}

export function usersAllRequestToJSON(
  usersAllRequest: UsersAllRequest,
): string {
  return JSON.stringify(UsersAllRequest$outboundSchema.parse(usersAllRequest));
}

export function usersAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllRequest' from JSON`,
  );
}

/** @internal */
export const UsersAllDetail$inboundSchema: z.ZodType<
  UsersAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersAllDetail$outboundSchema: z.ZodType<
  UsersAllDetail$Outbound,
  z.ZodTypeDef,
  UsersAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllDetail$ {
  /** @deprecated use `UsersAllDetail$inboundSchema` instead. */
  export const inboundSchema = UsersAllDetail$inboundSchema;
  /** @deprecated use `UsersAllDetail$outboundSchema` instead. */
  export const outboundSchema = UsersAllDetail$outboundSchema;
  /** @deprecated use `UsersAllDetail$Outbound` instead. */
  export type Outbound = UsersAllDetail$Outbound;
}

export function usersAllDetailToJSON(usersAllDetail: UsersAllDetail): string {
  return JSON.stringify(UsersAllDetail$outboundSchema.parse(usersAllDetail));
}

export function usersAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllDetail' from JSON`,
  );
}

/** @internal */
export const UsersAllResponseBody$inboundSchema: z.ZodType<
  UsersAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type UsersAllResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersAllResponseBody$outboundSchema: z.ZodType<
  UsersAllResponseBody$Outbound,
  z.ZodTypeDef,
  UsersAllResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllResponseBody$ {
  /** @deprecated use `UsersAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersAllResponseBody$inboundSchema;
  /** @deprecated use `UsersAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersAllResponseBody$outboundSchema;
  /** @deprecated use `UsersAllResponseBody$Outbound` instead. */
  export type Outbound = UsersAllResponseBody$Outbound;
}

export function usersAllResponseBodyToJSON(
  usersAllResponseBody: UsersAllResponseBody,
): string {
  return JSON.stringify(
    UsersAllResponseBody$outboundSchema.parse(usersAllResponseBody),
  );
}

export function usersAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllResponseBody' from JSON`,
  );
}

/** @internal */
export const UsersAllType$inboundSchema: z.ZodNativeEnum<typeof UsersAllType> =
  z.nativeEnum(UsersAllType);

/** @internal */
export const UsersAllType$outboundSchema: z.ZodNativeEnum<typeof UsersAllType> =
  UsersAllType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllType$ {
  /** @deprecated use `UsersAllType$inboundSchema` instead. */
  export const inboundSchema = UsersAllType$inboundSchema;
  /** @deprecated use `UsersAllType$outboundSchema` instead. */
  export const outboundSchema = UsersAllType$outboundSchema;
}

/** @internal */
export const UsersAllAddresses$inboundSchema: z.ZodType<
  UsersAllAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UsersAllType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type UsersAllAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const UsersAllAddresses$outboundSchema: z.ZodType<
  UsersAllAddresses$Outbound,
  z.ZodTypeDef,
  UsersAllAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(UsersAllType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllAddresses$ {
  /** @deprecated use `UsersAllAddresses$inboundSchema` instead. */
  export const inboundSchema = UsersAllAddresses$inboundSchema;
  /** @deprecated use `UsersAllAddresses$outboundSchema` instead. */
  export const outboundSchema = UsersAllAddresses$outboundSchema;
  /** @deprecated use `UsersAllAddresses$Outbound` instead. */
  export type Outbound = UsersAllAddresses$Outbound;
}

export function usersAllAddressesToJSON(
  usersAllAddresses: UsersAllAddresses,
): string {
  return JSON.stringify(
    UsersAllAddresses$outboundSchema.parse(usersAllAddresses),
  );
}

export function usersAllAddressesFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllAddresses' from JSON`,
  );
}

/** @internal */
export const UsersAllUsersType$inboundSchema: z.ZodNativeEnum<
  typeof UsersAllUsersType
> = z.nativeEnum(UsersAllUsersType);

/** @internal */
export const UsersAllUsersType$outboundSchema: z.ZodNativeEnum<
  typeof UsersAllUsersType
> = UsersAllUsersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllUsersType$ {
  /** @deprecated use `UsersAllUsersType$inboundSchema` instead. */
  export const inboundSchema = UsersAllUsersType$inboundSchema;
  /** @deprecated use `UsersAllUsersType$outboundSchema` instead. */
  export const outboundSchema = UsersAllUsersType$outboundSchema;
}

/** @internal */
export const UsersAllPhoneNumbers$inboundSchema: z.ZodType<
  UsersAllPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UsersAllUsersType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type UsersAllPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const UsersAllPhoneNumbers$outboundSchema: z.ZodType<
  UsersAllPhoneNumbers$Outbound,
  z.ZodTypeDef,
  UsersAllPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(UsersAllUsersType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllPhoneNumbers$ {
  /** @deprecated use `UsersAllPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = UsersAllPhoneNumbers$inboundSchema;
  /** @deprecated use `UsersAllPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = UsersAllPhoneNumbers$outboundSchema;
  /** @deprecated use `UsersAllPhoneNumbers$Outbound` instead. */
  export type Outbound = UsersAllPhoneNumbers$Outbound;
}

export function usersAllPhoneNumbersToJSON(
  usersAllPhoneNumbers: UsersAllPhoneNumbers,
): string {
  return JSON.stringify(
    UsersAllPhoneNumbers$outboundSchema.parse(usersAllPhoneNumbers),
  );
}

export function usersAllPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const UsersAllUsersResponseType$inboundSchema: z.ZodNativeEnum<
  typeof UsersAllUsersResponseType
> = z.nativeEnum(UsersAllUsersResponseType);

/** @internal */
export const UsersAllUsersResponseType$outboundSchema: z.ZodNativeEnum<
  typeof UsersAllUsersResponseType
> = UsersAllUsersResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllUsersResponseType$ {
  /** @deprecated use `UsersAllUsersResponseType$inboundSchema` instead. */
  export const inboundSchema = UsersAllUsersResponseType$inboundSchema;
  /** @deprecated use `UsersAllUsersResponseType$outboundSchema` instead. */
  export const outboundSchema = UsersAllUsersResponseType$outboundSchema;
}

/** @internal */
export const UsersAllEmails$inboundSchema: z.ZodType<
  UsersAllEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UsersAllUsersResponseType$inboundSchema).optional(),
});

/** @internal */
export type UsersAllEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const UsersAllEmails$outboundSchema: z.ZodType<
  UsersAllEmails$Outbound,
  z.ZodTypeDef,
  UsersAllEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(UsersAllUsersResponseType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllEmails$ {
  /** @deprecated use `UsersAllEmails$inboundSchema` instead. */
  export const inboundSchema = UsersAllEmails$inboundSchema;
  /** @deprecated use `UsersAllEmails$outboundSchema` instead. */
  export const outboundSchema = UsersAllEmails$outboundSchema;
  /** @deprecated use `UsersAllEmails$Outbound` instead. */
  export type Outbound = UsersAllEmails$Outbound;
}

export function usersAllEmailsToJSON(usersAllEmails: UsersAllEmails): string {
  return JSON.stringify(UsersAllEmails$outboundSchema.parse(usersAllEmails));
}

export function usersAllEmailsFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllEmails' from JSON`,
  );
}

/** @internal */
export const UsersAllCustomMappings$inboundSchema: z.ZodType<
  UsersAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UsersAllCustomMappings$Outbound = {};

/** @internal */
export const UsersAllCustomMappings$outboundSchema: z.ZodType<
  UsersAllCustomMappings$Outbound,
  z.ZodTypeDef,
  UsersAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllCustomMappings$ {
  /** @deprecated use `UsersAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema = UsersAllCustomMappings$inboundSchema;
  /** @deprecated use `UsersAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema = UsersAllCustomMappings$outboundSchema;
  /** @deprecated use `UsersAllCustomMappings$Outbound` instead. */
  export type Outbound = UsersAllCustomMappings$Outbound;
}

export function usersAllCustomMappingsToJSON(
  usersAllCustomMappings: UsersAllCustomMappings,
): string {
  return JSON.stringify(
    UsersAllCustomMappings$outboundSchema.parse(usersAllCustomMappings),
  );
}

export function usersAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const UsersAllExtendPaths$inboundSchema: z.ZodType<
  UsersAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type UsersAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const UsersAllExtendPaths$outboundSchema: z.ZodType<
  UsersAllExtendPaths$Outbound,
  z.ZodTypeDef,
  UsersAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllExtendPaths$ {
  /** @deprecated use `UsersAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = UsersAllExtendPaths$inboundSchema;
  /** @deprecated use `UsersAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = UsersAllExtendPaths$outboundSchema;
  /** @deprecated use `UsersAllExtendPaths$Outbound` instead. */
  export type Outbound = UsersAllExtendPaths$Outbound;
}

export function usersAllExtendPathsToJSON(
  usersAllExtendPaths: UsersAllExtendPaths,
): string {
  return JSON.stringify(
    UsersAllExtendPaths$outboundSchema.parse(usersAllExtendPaths),
  );
}

export function usersAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const UsersAllPassThrough$inboundSchema: z.ZodType<
  UsersAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => UsersAllExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type UsersAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<UsersAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const UsersAllPassThrough$outboundSchema: z.ZodType<
  UsersAllPassThrough$Outbound,
  z.ZodTypeDef,
  UsersAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => UsersAllExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllPassThrough$ {
  /** @deprecated use `UsersAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = UsersAllPassThrough$inboundSchema;
  /** @deprecated use `UsersAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = UsersAllPassThrough$outboundSchema;
  /** @deprecated use `UsersAllPassThrough$Outbound` instead. */
  export type Outbound = UsersAllPassThrough$Outbound;
}

export function usersAllPassThroughToJSON(
  usersAllPassThrough: UsersAllPassThrough,
): string {
  return JSON.stringify(
    UsersAllPassThrough$outboundSchema.parse(usersAllPassThrough),
  );
}

export function usersAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllPassThrough' from JSON`,
  );
}

/** @internal */
export const UsersAllData$inboundSchema: z.ZodType<
  UsersAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  parent_id: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employee_number: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UsersAllAddresses$inboundSchema)).optional(),
  phone_numbers: z.array(z.lazy(() => UsersAllPhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => UsersAllEmails$inboundSchema)),
  custom_mappings: z.nullable(
    z.lazy(() => UsersAllCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => UsersAllPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "first_name": "firstName",
    "last_name": "lastName",
    "company_name": "companyName",
    "employee_number": "employeeNumber",
    "phone_numbers": "phoneNumbers",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type UsersAllData$Outbound = {
  id?: string | undefined;
  parent_id?: string | null | undefined;
  username?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  title?: string | null | undefined;
  division?: string | null | undefined;
  department?: string | null | undefined;
  company_name?: string | null | undefined;
  employee_number?: string | null | undefined;
  description?: string | null | undefined;
  image?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  addresses?: Array<UsersAllAddresses$Outbound> | undefined;
  phone_numbers?: Array<UsersAllPhoneNumbers$Outbound> | undefined;
  emails: Array<UsersAllEmails$Outbound>;
  custom_mappings?: UsersAllCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<UsersAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const UsersAllData$outboundSchema: z.ZodType<
  UsersAllData$Outbound,
  z.ZodTypeDef,
  UsersAllData
> = z.object({
  id: z.string().optional(),
  parentId: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  division: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  addresses: z.array(z.lazy(() => UsersAllAddresses$outboundSchema)).optional(),
  phoneNumbers: z.array(z.lazy(() => UsersAllPhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => UsersAllEmails$outboundSchema)),
  customMappings: z.nullable(
    z.lazy(() => UsersAllCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => UsersAllPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    firstName: "first_name",
    lastName: "last_name",
    companyName: "company_name",
    employeeNumber: "employee_number",
    phoneNumbers: "phone_numbers",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllData$ {
  /** @deprecated use `UsersAllData$inboundSchema` instead. */
  export const inboundSchema = UsersAllData$inboundSchema;
  /** @deprecated use `UsersAllData$outboundSchema` instead. */
  export const outboundSchema = UsersAllData$outboundSchema;
  /** @deprecated use `UsersAllData$Outbound` instead. */
  export type Outbound = UsersAllData$Outbound;
}

export function usersAllDataToJSON(usersAllData: UsersAllData): string {
  return JSON.stringify(UsersAllData$outboundSchema.parse(usersAllData));
}

export function usersAllDataFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllData' from JSON`,
  );
}

/** @internal */
export const UsersAllCursors$inboundSchema: z.ZodType<
  UsersAllCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type UsersAllCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const UsersAllCursors$outboundSchema: z.ZodType<
  UsersAllCursors$Outbound,
  z.ZodTypeDef,
  UsersAllCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllCursors$ {
  /** @deprecated use `UsersAllCursors$inboundSchema` instead. */
  export const inboundSchema = UsersAllCursors$inboundSchema;
  /** @deprecated use `UsersAllCursors$outboundSchema` instead. */
  export const outboundSchema = UsersAllCursors$outboundSchema;
  /** @deprecated use `UsersAllCursors$Outbound` instead. */
  export type Outbound = UsersAllCursors$Outbound;
}

export function usersAllCursorsToJSON(
  usersAllCursors: UsersAllCursors,
): string {
  return JSON.stringify(UsersAllCursors$outboundSchema.parse(usersAllCursors));
}

export function usersAllCursorsFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllCursors' from JSON`,
  );
}

/** @internal */
export const UsersAllMeta$inboundSchema: z.ZodType<
  UsersAllMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => UsersAllCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type UsersAllMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: UsersAllCursors$Outbound | undefined;
};

/** @internal */
export const UsersAllMeta$outboundSchema: z.ZodType<
  UsersAllMeta$Outbound,
  z.ZodTypeDef,
  UsersAllMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => UsersAllCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllMeta$ {
  /** @deprecated use `UsersAllMeta$inboundSchema` instead. */
  export const inboundSchema = UsersAllMeta$inboundSchema;
  /** @deprecated use `UsersAllMeta$outboundSchema` instead. */
  export const outboundSchema = UsersAllMeta$outboundSchema;
  /** @deprecated use `UsersAllMeta$Outbound` instead. */
  export type Outbound = UsersAllMeta$Outbound;
}

export function usersAllMetaToJSON(usersAllMeta: UsersAllMeta): string {
  return JSON.stringify(UsersAllMeta$outboundSchema.parse(usersAllMeta));
}

export function usersAllMetaFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllMeta' from JSON`,
  );
}

/** @internal */
export const UsersAllLinks$inboundSchema: z.ZodType<
  UsersAllLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type UsersAllLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const UsersAllLinks$outboundSchema: z.ZodType<
  UsersAllLinks$Outbound,
  z.ZodTypeDef,
  UsersAllLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllLinks$ {
  /** @deprecated use `UsersAllLinks$inboundSchema` instead. */
  export const inboundSchema = UsersAllLinks$inboundSchema;
  /** @deprecated use `UsersAllLinks$outboundSchema` instead. */
  export const outboundSchema = UsersAllLinks$outboundSchema;
  /** @deprecated use `UsersAllLinks$Outbound` instead. */
  export type Outbound = UsersAllLinks$Outbound;
}

export function usersAllLinksToJSON(usersAllLinks: UsersAllLinks): string {
  return JSON.stringify(UsersAllLinks$outboundSchema.parse(usersAllLinks));
}

export function usersAllLinksFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllLinks' from JSON`,
  );
}

/** @internal */
export const UsersAllResponseBodyOutput$inboundSchema: z.ZodType<
  UsersAllResponseBodyOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => UsersAllData$inboundSchema)),
  meta: z.lazy(() => UsersAllMeta$inboundSchema).optional(),
  links: z.lazy(() => UsersAllLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UsersAllResponseBodyOutput$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<UsersAllData$Outbound>;
  meta?: UsersAllMeta$Outbound | undefined;
  links?: UsersAllLinks$Outbound | undefined;
};

/** @internal */
export const UsersAllResponseBodyOutput$outboundSchema: z.ZodType<
  UsersAllResponseBodyOutput$Outbound,
  z.ZodTypeDef,
  UsersAllResponseBodyOutput
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => UsersAllData$outboundSchema)),
  meta: z.lazy(() => UsersAllMeta$outboundSchema).optional(),
  links: z.lazy(() => UsersAllLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllResponseBodyOutput$ {
  /** @deprecated use `UsersAllResponseBodyOutput$inboundSchema` instead. */
  export const inboundSchema = UsersAllResponseBodyOutput$inboundSchema;
  /** @deprecated use `UsersAllResponseBodyOutput$outboundSchema` instead. */
  export const outboundSchema = UsersAllResponseBodyOutput$outboundSchema;
  /** @deprecated use `UsersAllResponseBodyOutput$Outbound` instead. */
  export type Outbound = UsersAllResponseBodyOutput$Outbound;
}

export function usersAllResponseBodyOutputToJSON(
  usersAllResponseBodyOutput: UsersAllResponseBodyOutput,
): string {
  return JSON.stringify(
    UsersAllResponseBodyOutput$outboundSchema.parse(usersAllResponseBodyOutput),
  );
}

export function usersAllResponseBodyOutputFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllResponseBodyOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllResponseBodyOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllResponseBodyOutput' from JSON`,
  );
}

/** @internal */
export const UsersAllResponse$inboundSchema: z.ZodType<
  UsersAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UsersAllResponseBody$inboundSchema),
  z.lazy(() => UsersAllResponseBodyOutput$inboundSchema),
]);

/** @internal */
export type UsersAllResponse$Outbound =
  | UsersAllResponseBody$Outbound
  | UsersAllResponseBodyOutput$Outbound;

/** @internal */
export const UsersAllResponse$outboundSchema: z.ZodType<
  UsersAllResponse$Outbound,
  z.ZodTypeDef,
  UsersAllResponse
> = z.union([
  z.lazy(() => UsersAllResponseBody$outboundSchema),
  z.lazy(() => UsersAllResponseBodyOutput$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAllResponse$ {
  /** @deprecated use `UsersAllResponse$inboundSchema` instead. */
  export const inboundSchema = UsersAllResponse$inboundSchema;
  /** @deprecated use `UsersAllResponse$outboundSchema` instead. */
  export const outboundSchema = UsersAllResponse$outboundSchema;
  /** @deprecated use `UsersAllResponse$Outbound` instead. */
  export type Outbound = UsersAllResponse$Outbound;
}

export function usersAllResponseToJSON(
  usersAllResponse: UsersAllResponse,
): string {
  return JSON.stringify(
    UsersAllResponse$outboundSchema.parse(usersAllResponse),
  );
}

export function usersAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsersAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAllResponse' from JSON`,
  );
}
