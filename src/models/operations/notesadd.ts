/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotesAddSecurity = {
  apiKey: string;
};

export type NotesAddRequest = {
  /**
   * A boolean flag that, when set to true, includes the raw response in the output. This is primarily used for debugging purposes to provide more detailed information about the response. By default, this is set to false.
   */
  raw?: boolean | undefined;
  /**
   * A unique identifier for the consumer making the request. This ID is crucial for authenticating the consumer and ensuring that the correct data is accessed or modified. It must be a valid consumer ID associated with your account.
   */
  consumerId: string;
  /**
   * The unique identifier of your Unify application. This ID is used to authenticate the application making the request and must match the ID assigned to your application in the Apideck platform.
   */
  appId: string;
  /**
   * An optional parameter used to specify the target service when multiple integrations are active. This ID helps direct the request to the correct service, such as 'pipedrive' or 'salesforce'. It is only necessary if your setup includes multiple services.
   */
  serviceId?: string | undefined;
  noteCreateRequest: components.NoteCreateRequest;
};

export type NotesAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Note created
   */
  noteCreateResponse?: components.NoteCreateResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const NotesAddSecurity$inboundSchema: z.ZodType<
  NotesAddSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type NotesAddSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const NotesAddSecurity$outboundSchema: z.ZodType<
  NotesAddSecurity$Outbound,
  z.ZodTypeDef,
  NotesAddSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddSecurity$ {
  /** @deprecated use `NotesAddSecurity$inboundSchema` instead. */
  export const inboundSchema = NotesAddSecurity$inboundSchema;
  /** @deprecated use `NotesAddSecurity$outboundSchema` instead. */
  export const outboundSchema = NotesAddSecurity$outboundSchema;
  /** @deprecated use `NotesAddSecurity$Outbound` instead. */
  export type Outbound = NotesAddSecurity$Outbound;
}

export function notesAddSecurityToJSON(
  notesAddSecurity: NotesAddSecurity,
): string {
  return JSON.stringify(
    NotesAddSecurity$outboundSchema.parse(notesAddSecurity),
  );
}

export function notesAddSecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotesAddSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAddSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAddSecurity' from JSON`,
  );
}

/** @internal */
export const NotesAddRequest$inboundSchema: z.ZodType<
  NotesAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  NoteCreateRequest: components.NoteCreateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "NoteCreateRequest": "noteCreateRequest",
  });
});

/** @internal */
export type NotesAddRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  NoteCreateRequest: components.NoteCreateRequest$Outbound;
};

/** @internal */
export const NotesAddRequest$outboundSchema: z.ZodType<
  NotesAddRequest$Outbound,
  z.ZodTypeDef,
  NotesAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  noteCreateRequest: components.NoteCreateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    noteCreateRequest: "NoteCreateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddRequest$ {
  /** @deprecated use `NotesAddRequest$inboundSchema` instead. */
  export const inboundSchema = NotesAddRequest$inboundSchema;
  /** @deprecated use `NotesAddRequest$outboundSchema` instead. */
  export const outboundSchema = NotesAddRequest$outboundSchema;
  /** @deprecated use `NotesAddRequest$Outbound` instead. */
  export type Outbound = NotesAddRequest$Outbound;
}

export function notesAddRequestToJSON(
  notesAddRequest: NotesAddRequest,
): string {
  return JSON.stringify(NotesAddRequest$outboundSchema.parse(notesAddRequest));
}

export function notesAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotesAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAddRequest' from JSON`,
  );
}

/** @internal */
export const NotesAddResponse$inboundSchema: z.ZodType<
  NotesAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  NoteCreateResponse: components.NoteCreateResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "NoteCreateResponse": "noteCreateResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type NotesAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  NoteCreateResponse?: components.NoteCreateResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const NotesAddResponse$outboundSchema: z.ZodType<
  NotesAddResponse$Outbound,
  z.ZodTypeDef,
  NotesAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  noteCreateResponse: components.NoteCreateResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    noteCreateResponse: "NoteCreateResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesAddResponse$ {
  /** @deprecated use `NotesAddResponse$inboundSchema` instead. */
  export const inboundSchema = NotesAddResponse$inboundSchema;
  /** @deprecated use `NotesAddResponse$outboundSchema` instead. */
  export const outboundSchema = NotesAddResponse$outboundSchema;
  /** @deprecated use `NotesAddResponse$Outbound` instead. */
  export type Outbound = NotesAddResponse$Outbound;
}

export function notesAddResponseToJSON(
  notesAddResponse: NotesAddResponse,
): string {
  return JSON.stringify(
    NotesAddResponse$outboundSchema.parse(notesAddResponse),
  );
}

export function notesAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<NotesAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesAddResponse' from JSON`,
  );
}
