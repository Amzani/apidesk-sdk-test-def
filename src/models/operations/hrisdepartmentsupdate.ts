/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisDepartmentsUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisDepartmentsUpdateExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisDepartmentsUpdatePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisDepartmentsUpdateExtendPaths> | undefined;
};

export type HrisDepartmentsUpdateRequestBody = {
  /**
   * Department name
   */
  name?: string | null | undefined;
  code?: string | null | undefined;
  description?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisDepartmentsUpdatePassThrough> | undefined;
};

export type HrisDepartmentsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  requestBody: HrisDepartmentsUpdateRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsUpdateDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisDepartmentsUpdateHrisDepartmentsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type HrisDepartmentsUpdateUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Departments
 */
export type HrisDepartmentsUpdateResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisDepartmentsUpdateUnifiedId;
};

export type HrisDepartmentsUpdateResponse =
  | HrisDepartmentsUpdateResponseBody
  | HrisDepartmentsUpdateHrisDepartmentsResponseBody;

/** @internal */
export const HrisDepartmentsUpdateGlobals$inboundSchema: z.ZodType<
  HrisDepartmentsUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisDepartmentsUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisDepartmentsUpdateGlobals$outboundSchema: z.ZodType<
  HrisDepartmentsUpdateGlobals$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdateGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateGlobals$ {
  /** @deprecated use `HrisDepartmentsUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdateGlobals$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsUpdateGlobals$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateGlobals$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateGlobals$Outbound;
}

export function hrisDepartmentsUpdateGlobalsToJSON(
  hrisDepartmentsUpdateGlobals: HrisDepartmentsUpdateGlobals,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateGlobals$outboundSchema.parse(
      hrisDepartmentsUpdateGlobals,
    ),
  );
}

export function hrisDepartmentsUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsUpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsUpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateExtendPaths$inboundSchema: z.ZodType<
  HrisDepartmentsUpdateExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisDepartmentsUpdateExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisDepartmentsUpdateExtendPaths$outboundSchema: z.ZodType<
  HrisDepartmentsUpdateExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdateExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateExtendPaths$ {
  /** @deprecated use `HrisDepartmentsUpdateExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdateExtendPaths$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsUpdateExtendPaths$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateExtendPaths$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateExtendPaths$Outbound;
}

export function hrisDepartmentsUpdateExtendPathsToJSON(
  hrisDepartmentsUpdateExtendPaths: HrisDepartmentsUpdateExtendPaths,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateExtendPaths$outboundSchema.parse(
      hrisDepartmentsUpdateExtendPaths,
    ),
  );
}

export function hrisDepartmentsUpdateExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsUpdateExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsUpdateExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsUpdateExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdatePassThrough$inboundSchema: z.ZodType<
  HrisDepartmentsUpdatePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => HrisDepartmentsUpdateExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisDepartmentsUpdatePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisDepartmentsUpdateExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisDepartmentsUpdatePassThrough$outboundSchema: z.ZodType<
  HrisDepartmentsUpdatePassThrough$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdatePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => HrisDepartmentsUpdateExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdatePassThrough$ {
  /** @deprecated use `HrisDepartmentsUpdatePassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdatePassThrough$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdatePassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsUpdatePassThrough$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdatePassThrough$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdatePassThrough$Outbound;
}

export function hrisDepartmentsUpdatePassThroughToJSON(
  hrisDepartmentsUpdatePassThrough: HrisDepartmentsUpdatePassThrough,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdatePassThrough$outboundSchema.parse(
      hrisDepartmentsUpdatePassThrough,
    ),
  );
}

export function hrisDepartmentsUpdatePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsUpdatePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsUpdatePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsUpdatePassThrough' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateRequestBody$inboundSchema: z.ZodType<
  HrisDepartmentsUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => HrisDepartmentsUpdatePassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisDepartmentsUpdateRequestBody$Outbound = {
  name?: string | null | undefined;
  code?: string | null | undefined;
  description?: string | null | undefined;
  pass_through?: Array<HrisDepartmentsUpdatePassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisDepartmentsUpdateRequestBody$outboundSchema: z.ZodType<
  HrisDepartmentsUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdateRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => HrisDepartmentsUpdatePassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateRequestBody$ {
  /** @deprecated use `HrisDepartmentsUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdateRequestBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsUpdateRequestBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateRequestBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateRequestBody$Outbound;
}

export function hrisDepartmentsUpdateRequestBodyToJSON(
  hrisDepartmentsUpdateRequestBody: HrisDepartmentsUpdateRequestBody,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateRequestBody$outboundSchema.parse(
      hrisDepartmentsUpdateRequestBody,
    ),
  );
}

export function hrisDepartmentsUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateRequest$inboundSchema: z.ZodType<
  HrisDepartmentsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  RequestBody: z.lazy(() => HrisDepartmentsUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type HrisDepartmentsUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  RequestBody: HrisDepartmentsUpdateRequestBody$Outbound;
};

/** @internal */
export const HrisDepartmentsUpdateRequest$outboundSchema: z.ZodType<
  HrisDepartmentsUpdateRequest$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  requestBody: z.lazy(() => HrisDepartmentsUpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateRequest$ {
  /** @deprecated use `HrisDepartmentsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdateRequest$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsUpdateRequest$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateRequest$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateRequest$Outbound;
}

export function hrisDepartmentsUpdateRequestToJSON(
  hrisDepartmentsUpdateRequest: HrisDepartmentsUpdateRequest,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateRequest$outboundSchema.parse(
      hrisDepartmentsUpdateRequest,
    ),
  );
}

export function hrisDepartmentsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateDetail$inboundSchema: z.ZodType<
  HrisDepartmentsUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsUpdateDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisDepartmentsUpdateDetail$outboundSchema: z.ZodType<
  HrisDepartmentsUpdateDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateDetail$ {
  /** @deprecated use `HrisDepartmentsUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdateDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsUpdateDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateDetail$Outbound;
}

export function hrisDepartmentsUpdateDetailToJSON(
  hrisDepartmentsUpdateDetail: HrisDepartmentsUpdateDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateDetail$outboundSchema.parse(
      hrisDepartmentsUpdateDetail,
    ),
  );
}

export function hrisDepartmentsUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsUpdateDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisDepartmentsUpdateHrisDepartmentsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsUpdateHrisDepartmentsResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsUpdateHrisDepartmentsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsUpdateHrisDepartmentsResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateHrisDepartmentsResponseBody$ {
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsUpdateHrisDepartmentsResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateHrisDepartmentsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisDepartmentsUpdateHrisDepartmentsResponseBody$Outbound;
}

export function hrisDepartmentsUpdateHrisDepartmentsResponseBodyToJSON(
  hrisDepartmentsUpdateHrisDepartmentsResponseBody:
    HrisDepartmentsUpdateHrisDepartmentsResponseBody,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateHrisDepartmentsResponseBody$outboundSchema.parse(
      hrisDepartmentsUpdateHrisDepartmentsResponseBody,
    ),
  );
}

export function hrisDepartmentsUpdateHrisDepartmentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsUpdateHrisDepartmentsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsUpdateHrisDepartmentsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsUpdateHrisDepartmentsResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateUnifiedId$inboundSchema: z.ZodType<
  HrisDepartmentsUpdateUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type HrisDepartmentsUpdateUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const HrisDepartmentsUpdateUnifiedId$outboundSchema: z.ZodType<
  HrisDepartmentsUpdateUnifiedId$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdateUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateUnifiedId$ {
  /** @deprecated use `HrisDepartmentsUpdateUnifiedId$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdateUnifiedId$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateUnifiedId$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsUpdateUnifiedId$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateUnifiedId$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateUnifiedId$Outbound;
}

export function hrisDepartmentsUpdateUnifiedIdToJSON(
  hrisDepartmentsUpdateUnifiedId: HrisDepartmentsUpdateUnifiedId,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateUnifiedId$outboundSchema.parse(
      hrisDepartmentsUpdateUnifiedId,
    ),
  );
}

export function hrisDepartmentsUpdateUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsUpdateUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsUpdateUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsUpdateUnifiedId' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateResponseBody$inboundSchema: z.ZodType<
  HrisDepartmentsUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisDepartmentsUpdateUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisDepartmentsUpdateResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisDepartmentsUpdateUnifiedId$Outbound;
};

/** @internal */
export const HrisDepartmentsUpdateResponseBody$outboundSchema: z.ZodType<
  HrisDepartmentsUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdateResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisDepartmentsUpdateUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateResponseBody$ {
  /** @deprecated use `HrisDepartmentsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdateResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsUpdateResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateResponseBody$Outbound;
}

export function hrisDepartmentsUpdateResponseBodyToJSON(
  hrisDepartmentsUpdateResponseBody: HrisDepartmentsUpdateResponseBody,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateResponseBody$outboundSchema.parse(
      hrisDepartmentsUpdateResponseBody,
    ),
  );
}

export function hrisDepartmentsUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsUpdateResponse$inboundSchema: z.ZodType<
  HrisDepartmentsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisDepartmentsUpdateResponseBody$inboundSchema),
  z.lazy(() => HrisDepartmentsUpdateHrisDepartmentsResponseBody$inboundSchema),
]);

/** @internal */
export type HrisDepartmentsUpdateResponse$Outbound =
  | HrisDepartmentsUpdateResponseBody$Outbound
  | HrisDepartmentsUpdateHrisDepartmentsResponseBody$Outbound;

/** @internal */
export const HrisDepartmentsUpdateResponse$outboundSchema: z.ZodType<
  HrisDepartmentsUpdateResponse$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsUpdateResponse
> = z.union([
  z.lazy(() => HrisDepartmentsUpdateResponseBody$outboundSchema),
  z.lazy(() => HrisDepartmentsUpdateHrisDepartmentsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsUpdateResponse$ {
  /** @deprecated use `HrisDepartmentsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsUpdateResponse$inboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsUpdateResponse$outboundSchema;
  /** @deprecated use `HrisDepartmentsUpdateResponse$Outbound` instead. */
  export type Outbound = HrisDepartmentsUpdateResponse$Outbound;
}

export function hrisDepartmentsUpdateResponseToJSON(
  hrisDepartmentsUpdateResponse: HrisDepartmentsUpdateResponse,
): string {
  return JSON.stringify(
    HrisDepartmentsUpdateResponse$outboundSchema.parse(
      hrisDepartmentsUpdateResponse,
    ),
  );
}

export function hrisDepartmentsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsUpdateResponse' from JSON`,
  );
}
