/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisEmployeePayrollsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisEmployeePayrollsOneRequest = {
  /**
   * ID of the payroll you are acting upon.
   */
  payrollId: string;
  /**
   * ID of the employee you are acting upon.
   */
  employeeId: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeePayrollsOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The overview of the payroll totals.
 */
export type HrisEmployeePayrollsOneTotals = {
  /**
   * The total company debit for the payroll.
   */
  companyDebit?: number | null | undefined;
  /**
   * The total tax debit for the payroll.
   */
  taxDebit?: number | null | undefined;
  /**
   * The total check amount for the payroll.
   */
  checkAmount?: number | null | undefined;
  /**
   * The net pay amount for the payroll.
   */
  netPay?: number | null | undefined;
  /**
   * The gross pay amount for the payroll.
   */
  grossPay?: number | null | undefined;
  /**
   * The total amount of employer paid taxes for the payroll.
   */
  employerTaxes?: number | null | undefined;
  /**
   * The total amount of employee paid taxes for the payroll.
   */
  employeeTaxes?: number | null | undefined;
  /**
   * The total amount of company contributed benefits for the payroll.
   */
  employerBenefitContributions?: number | null | undefined;
  /**
   * The total amount of employee deducted benefits for the payroll.
   */
  employeeBenefitDeductions?: number | null | undefined;
};

export type HrisEmployeePayrollsOneTaxes = {
  /**
   * The name of the tax.
   */
  name?: string | null | undefined;
  /**
   * Paid by employer.
   */
  employer?: boolean | null | undefined;
  /**
   * The amount of the tax.
   */
  amount?: number | null | undefined;
};

export type HrisEmployeePayrollsOneDeductions = {
  /**
   * The name of the deduction.
   */
  name?: string | null | undefined;
  /**
   * The amount deducted.
   */
  amount?: number | null | undefined;
};

export type HrisEmployeePayrollsOneBenefits = {
  /**
   * The name of the benefit.
   */
  name?: string | null | undefined;
  /**
   * The amount deducted for benefit.
   */
  employeeDeduction?: number | null | undefined;
  /**
   * The amount of employer contribution.
   */
  employerContribution?: number | null | undefined;
};

export type HrisEmployeePayrollsOneCompensations = {
  /**
   * A unique identifier for an object.
   */
  employeeId: string | null;
  /**
   * The employee's net pay. Only available when payroll has been processed
   */
  netPay?: number | null | undefined;
  /**
   * The employee's gross pay. Only available when payroll has been processed
   */
  grossPay?: number | null | undefined;
  /**
   * An array of employer and employee taxes for the pay period.
   */
  taxes?: Array<HrisEmployeePayrollsOneTaxes> | null | undefined;
  /**
   * An array of employee deductions for the pay period.
   */
  deductions?: Array<HrisEmployeePayrollsOneDeductions> | null | undefined;
  /**
   * An array of employee benefits for the pay period.
   */
  benefits?: Array<HrisEmployeePayrollsOneBenefits> | null | undefined;
};

export type HrisEmployeePayrollsOneData = {
  /**
   * A unique identifier for an object.
   */
  id: string | null;
  /**
   * ID of the employee
   */
  employeeId?: string | null | undefined;
  /**
   * The unique identifier of the company.
   */
  companyId?: string | null | undefined;
  /**
   * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
   */
  processed: boolean | null;
  /**
   * The date the payroll was processed.
   */
  processedDate?: string | null | undefined;
  /**
   * The date on which employees will be paid for the payroll.
   */
  checkDate: string | null;
  /**
   * The start date, inclusive, of the pay period.
   */
  startDate: string | null;
  /**
   * The end date, inclusive, of the pay period.
   */
  endDate: string | null;
  /**
   * The overview of the payroll totals.
   */
  totals?: HrisEmployeePayrollsOneTotals | undefined;
  /**
   * An array of compensations for the payroll.
   */
  compensations?: Array<HrisEmployeePayrollsOneCompensations> | undefined;
};

/**
 * Payrolls
 */
export type HrisEmployeePayrollsOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisEmployeePayrollsOneData;
};

export type HrisEmployeePayrollsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Payrolls
   */
  twoHundredApplicationJsonObject?:
    | HrisEmployeePayrollsOneResponseBody
    | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody
    | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneGlobals$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisEmployeePayrollsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneGlobals$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneGlobals$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneGlobals$ {
  /** @deprecated use `HrisEmployeePayrollsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsOneGlobals$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsOneGlobals$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneGlobals$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneGlobals$Outbound;
}

export function hrisEmployeePayrollsOneGlobalsToJSON(
  hrisEmployeePayrollsOneGlobals: HrisEmployeePayrollsOneGlobals,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneGlobals$outboundSchema.parse(
      hrisEmployeePayrollsOneGlobals,
    ),
  );
}

export function hrisEmployeePayrollsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneGlobals' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneRequest$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  payroll_id: z.string(),
  employee_id: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payroll_id": "payrollId",
    "employee_id": "employeeId",
  });
});

/** @internal */
export type HrisEmployeePayrollsOneRequest$Outbound = {
  payroll_id: string;
  employee_id: string;
  raw: boolean;
  serviceId?: string | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneRequest$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneRequest$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneRequest
> = z.object({
  payrollId: z.string(),
  employeeId: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    payrollId: "payroll_id",
    employeeId: "employee_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneRequest$ {
  /** @deprecated use `HrisEmployeePayrollsOneRequest$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsOneRequest$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneRequest$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsOneRequest$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneRequest$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneRequest$Outbound;
}

export function hrisEmployeePayrollsOneRequestToJSON(
  hrisEmployeePayrollsOneRequest: HrisEmployeePayrollsOneRequest,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneRequest$outboundSchema.parse(
      hrisEmployeePayrollsOneRequest,
    ),
  );
}

export function hrisEmployeePayrollsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneRequest' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneDetail$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeePayrollsOneDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeePayrollsOneDetail$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneDetail$ {
  /** @deprecated use `HrisEmployeePayrollsOneDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsOneDetail$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsOneDetail$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneDetail$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneDetail$Outbound;
}

export function hrisEmployeePayrollsOneDetailToJSON(
  hrisEmployeePayrollsOneDetail: HrisEmployeePayrollsOneDetail,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneDetail$outboundSchema.parse(
      hrisEmployeePayrollsOneDetail,
    ),
  );
}

export function hrisEmployeePayrollsOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$Outbound;
}

export function hrisEmployeePayrollsOneHrisEmployeePayrollsResponseBodyToJSON(
  hrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody:
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$outboundSchema
      .parse(hrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody),
  );
}

export function hrisEmployeePayrollsOneHrisEmployeePayrollsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneTotals$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_debit: z.nullable(z.number()).optional(),
  tax_debit: z.nullable(z.number()).optional(),
  check_amount: z.nullable(z.number()).optional(),
  net_pay: z.nullable(z.number()).optional(),
  gross_pay: z.nullable(z.number()).optional(),
  employer_taxes: z.nullable(z.number()).optional(),
  employee_taxes: z.nullable(z.number()).optional(),
  employer_benefit_contributions: z.nullable(z.number()).optional(),
  employee_benefit_deductions: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_debit": "companyDebit",
    "tax_debit": "taxDebit",
    "check_amount": "checkAmount",
    "net_pay": "netPay",
    "gross_pay": "grossPay",
    "employer_taxes": "employerTaxes",
    "employee_taxes": "employeeTaxes",
    "employer_benefit_contributions": "employerBenefitContributions",
    "employee_benefit_deductions": "employeeBenefitDeductions",
  });
});

/** @internal */
export type HrisEmployeePayrollsOneTotals$Outbound = {
  company_debit?: number | null | undefined;
  tax_debit?: number | null | undefined;
  check_amount?: number | null | undefined;
  net_pay?: number | null | undefined;
  gross_pay?: number | null | undefined;
  employer_taxes?: number | null | undefined;
  employee_taxes?: number | null | undefined;
  employer_benefit_contributions?: number | null | undefined;
  employee_benefit_deductions?: number | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneTotals$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneTotals$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneTotals
> = z.object({
  companyDebit: z.nullable(z.number()).optional(),
  taxDebit: z.nullable(z.number()).optional(),
  checkAmount: z.nullable(z.number()).optional(),
  netPay: z.nullable(z.number()).optional(),
  grossPay: z.nullable(z.number()).optional(),
  employerTaxes: z.nullable(z.number()).optional(),
  employeeTaxes: z.nullable(z.number()).optional(),
  employerBenefitContributions: z.nullable(z.number()).optional(),
  employeeBenefitDeductions: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    companyDebit: "company_debit",
    taxDebit: "tax_debit",
    checkAmount: "check_amount",
    netPay: "net_pay",
    grossPay: "gross_pay",
    employerTaxes: "employer_taxes",
    employeeTaxes: "employee_taxes",
    employerBenefitContributions: "employer_benefit_contributions",
    employeeBenefitDeductions: "employee_benefit_deductions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneTotals$ {
  /** @deprecated use `HrisEmployeePayrollsOneTotals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsOneTotals$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneTotals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsOneTotals$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneTotals$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneTotals$Outbound;
}

export function hrisEmployeePayrollsOneTotalsToJSON(
  hrisEmployeePayrollsOneTotals: HrisEmployeePayrollsOneTotals,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneTotals$outboundSchema.parse(
      hrisEmployeePayrollsOneTotals,
    ),
  );
}

export function hrisEmployeePayrollsOneTotalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsOneTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneTotals' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneTaxes$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneTaxes,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  employer: z.nullable(z.boolean()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/** @internal */
export type HrisEmployeePayrollsOneTaxes$Outbound = {
  name?: string | null | undefined;
  employer?: boolean | null | undefined;
  amount?: number | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneTaxes$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneTaxes$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneTaxes
> = z.object({
  name: z.nullable(z.string()).optional(),
  employer: z.nullable(z.boolean()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneTaxes$ {
  /** @deprecated use `HrisEmployeePayrollsOneTaxes$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsOneTaxes$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneTaxes$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsOneTaxes$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneTaxes$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneTaxes$Outbound;
}

export function hrisEmployeePayrollsOneTaxesToJSON(
  hrisEmployeePayrollsOneTaxes: HrisEmployeePayrollsOneTaxes,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneTaxes$outboundSchema.parse(
      hrisEmployeePayrollsOneTaxes,
    ),
  );
}

export function hrisEmployeePayrollsOneTaxesFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneTaxes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsOneTaxes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneTaxes' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneDeductions$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneDeductions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/** @internal */
export type HrisEmployeePayrollsOneDeductions$Outbound = {
  name?: string | null | undefined;
  amount?: number | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneDeductions$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneDeductions$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneDeductions
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneDeductions$ {
  /** @deprecated use `HrisEmployeePayrollsOneDeductions$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsOneDeductions$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneDeductions$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneDeductions$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneDeductions$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneDeductions$Outbound;
}

export function hrisEmployeePayrollsOneDeductionsToJSON(
  hrisEmployeePayrollsOneDeductions: HrisEmployeePayrollsOneDeductions,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneDeductions$outboundSchema.parse(
      hrisEmployeePayrollsOneDeductions,
    ),
  );
}

export function hrisEmployeePayrollsOneDeductionsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneDeductions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsOneDeductions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneDeductions' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneBenefits$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneBenefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  employee_deduction: z.nullable(z.number()).optional(),
  employer_contribution: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_deduction": "employeeDeduction",
    "employer_contribution": "employerContribution",
  });
});

/** @internal */
export type HrisEmployeePayrollsOneBenefits$Outbound = {
  name?: string | null | undefined;
  employee_deduction?: number | null | undefined;
  employer_contribution?: number | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneBenefits$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneBenefits$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneBenefits
> = z.object({
  name: z.nullable(z.string()).optional(),
  employeeDeduction: z.nullable(z.number()).optional(),
  employerContribution: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeDeduction: "employee_deduction",
    employerContribution: "employer_contribution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneBenefits$ {
  /** @deprecated use `HrisEmployeePayrollsOneBenefits$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsOneBenefits$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneBenefits$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsOneBenefits$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneBenefits$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneBenefits$Outbound;
}

export function hrisEmployeePayrollsOneBenefitsToJSON(
  hrisEmployeePayrollsOneBenefits: HrisEmployeePayrollsOneBenefits,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneBenefits$outboundSchema.parse(
      hrisEmployeePayrollsOneBenefits,
    ),
  );
}

export function hrisEmployeePayrollsOneBenefitsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneBenefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsOneBenefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneBenefits' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneCompensations$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneCompensations,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.nullable(z.string()),
  net_pay: z.nullable(z.number()).optional(),
  gross_pay: z.nullable(z.number()).optional(),
  taxes: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsOneTaxes$inboundSchema)),
  ).optional(),
  deductions: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsOneDeductions$inboundSchema)),
  ).optional(),
  benefits: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsOneBenefits$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "net_pay": "netPay",
    "gross_pay": "grossPay",
  });
});

/** @internal */
export type HrisEmployeePayrollsOneCompensations$Outbound = {
  employee_id: string | null;
  net_pay?: number | null | undefined;
  gross_pay?: number | null | undefined;
  taxes?: Array<HrisEmployeePayrollsOneTaxes$Outbound> | null | undefined;
  deductions?:
    | Array<HrisEmployeePayrollsOneDeductions$Outbound>
    | null
    | undefined;
  benefits?: Array<HrisEmployeePayrollsOneBenefits$Outbound> | null | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneCompensations$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneCompensations$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneCompensations
> = z.object({
  employeeId: z.nullable(z.string()),
  netPay: z.nullable(z.number()).optional(),
  grossPay: z.nullable(z.number()).optional(),
  taxes: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsOneTaxes$outboundSchema)),
  ).optional(),
  deductions: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsOneDeductions$outboundSchema)),
  ).optional(),
  benefits: z.nullable(
    z.array(z.lazy(() => HrisEmployeePayrollsOneBenefits$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    netPay: "net_pay",
    grossPay: "gross_pay",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneCompensations$ {
  /** @deprecated use `HrisEmployeePayrollsOneCompensations$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneCompensations$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneCompensations$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneCompensations$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneCompensations$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneCompensations$Outbound;
}

export function hrisEmployeePayrollsOneCompensationsToJSON(
  hrisEmployeePayrollsOneCompensations: HrisEmployeePayrollsOneCompensations,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneCompensations$outboundSchema.parse(
      hrisEmployeePayrollsOneCompensations,
    ),
  );
}

export function hrisEmployeePayrollsOneCompensationsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneCompensations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsOneCompensations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneCompensations' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneData$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  employee_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  processed: z.nullable(z.boolean()),
  processed_date: z.nullable(z.string()).optional(),
  check_date: z.nullable(z.string()),
  start_date: z.nullable(z.string()),
  end_date: z.nullable(z.string()),
  totals: z.lazy(() => HrisEmployeePayrollsOneTotals$inboundSchema).optional(),
  compensations: z.array(
    z.lazy(() => HrisEmployeePayrollsOneCompensations$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "company_id": "companyId",
    "processed_date": "processedDate",
    "check_date": "checkDate",
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type HrisEmployeePayrollsOneData$Outbound = {
  id: string | null;
  employee_id?: string | null | undefined;
  company_id?: string | null | undefined;
  processed: boolean | null;
  processed_date?: string | null | undefined;
  check_date: string | null;
  start_date: string | null;
  end_date: string | null;
  totals?: HrisEmployeePayrollsOneTotals$Outbound | undefined;
  compensations?:
    | Array<HrisEmployeePayrollsOneCompensations$Outbound>
    | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneData$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneData$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneData
> = z.object({
  id: z.nullable(z.string()),
  employeeId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  processed: z.nullable(z.boolean()),
  processedDate: z.nullable(z.string()).optional(),
  checkDate: z.nullable(z.string()),
  startDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
  totals: z.lazy(() => HrisEmployeePayrollsOneTotals$outboundSchema).optional(),
  compensations: z.array(
    z.lazy(() => HrisEmployeePayrollsOneCompensations$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    companyId: "company_id",
    processedDate: "processed_date",
    checkDate: "check_date",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneData$ {
  /** @deprecated use `HrisEmployeePayrollsOneData$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsOneData$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneData$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsOneData$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneData$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneData$Outbound;
}

export function hrisEmployeePayrollsOneDataToJSON(
  hrisEmployeePayrollsOneData: HrisEmployeePayrollsOneData,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneData$outboundSchema.parse(
      hrisEmployeePayrollsOneData,
    ),
  );
}

export function hrisEmployeePayrollsOneDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneData' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneResponseBody$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisEmployeePayrollsOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisEmployeePayrollsOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisEmployeePayrollsOneData$Outbound;
};

/** @internal */
export const HrisEmployeePayrollsOneResponseBody$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisEmployeePayrollsOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneResponseBody$ {
  /** @deprecated use `HrisEmployeePayrollsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeePayrollsOneResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeePayrollsOneResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneResponseBody$Outbound;
}

export function hrisEmployeePayrollsOneResponseBodyToJSON(
  hrisEmployeePayrollsOneResponseBody: HrisEmployeePayrollsOneResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneResponseBody$outboundSchema.parse(
      hrisEmployeePayrollsOneResponseBody,
    ),
  );
}

export function hrisEmployeePayrollsOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeePayrollsOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeePayrollsOneResponse$inboundSchema: z.ZodType<
  HrisEmployeePayrollsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisEmployeePayrollsOneResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisEmployeePayrollsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisEmployeePayrollsOneResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisEmployeePayrollsOneResponse$outboundSchema: z.ZodType<
  HrisEmployeePayrollsOneResponse$Outbound,
  z.ZodTypeDef,
  HrisEmployeePayrollsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisEmployeePayrollsOneResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisEmployeePayrollsOneHrisEmployeePayrollsResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeePayrollsOneResponse$ {
  /** @deprecated use `HrisEmployeePayrollsOneResponse$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeePayrollsOneResponse$inboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneResponse$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeePayrollsOneResponse$outboundSchema;
  /** @deprecated use `HrisEmployeePayrollsOneResponse$Outbound` instead. */
  export type Outbound = HrisEmployeePayrollsOneResponse$Outbound;
}

export function hrisEmployeePayrollsOneResponseToJSON(
  hrisEmployeePayrollsOneResponse: HrisEmployeePayrollsOneResponse,
): string {
  return JSON.stringify(
    HrisEmployeePayrollsOneResponse$outboundSchema.parse(
      hrisEmployeePayrollsOneResponse,
    ),
  );
}

export function hrisEmployeePayrollsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeePayrollsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeePayrollsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeePayrollsOneResponse' from JSON`,
  );
}
