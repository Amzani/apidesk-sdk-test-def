/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotesDeleteSecurity = {
  apiKey: string;
};

export type NotesDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type NotesDeleteDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type NotesDeleteNotesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type NotesDeleteUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Note deleted
 */
export type NotesDeleteResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: NotesDeleteUnifiedId;
};

export type NotesDeleteResponse =
  | NotesDeleteResponseBody
  | NotesDeleteNotesResponseBody;

/** @internal */
export const NotesDeleteSecurity$inboundSchema: z.ZodType<
  NotesDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type NotesDeleteSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const NotesDeleteSecurity$outboundSchema: z.ZodType<
  NotesDeleteSecurity$Outbound,
  z.ZodTypeDef,
  NotesDeleteSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteSecurity$ {
  /** @deprecated use `NotesDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteSecurity$inboundSchema;
  /** @deprecated use `NotesDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteSecurity$outboundSchema;
  /** @deprecated use `NotesDeleteSecurity$Outbound` instead. */
  export type Outbound = NotesDeleteSecurity$Outbound;
}

export function notesDeleteSecurityToJSON(
  notesDeleteSecurity: NotesDeleteSecurity,
): string {
  return JSON.stringify(
    NotesDeleteSecurity$outboundSchema.parse(notesDeleteSecurity),
  );
}

export function notesDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const NotesDeleteRequest$inboundSchema: z.ZodType<
  NotesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type NotesDeleteRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const NotesDeleteRequest$outboundSchema: z.ZodType<
  NotesDeleteRequest$Outbound,
  z.ZodTypeDef,
  NotesDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteRequest$ {
  /** @deprecated use `NotesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteRequest$inboundSchema;
  /** @deprecated use `NotesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteRequest$outboundSchema;
  /** @deprecated use `NotesDeleteRequest$Outbound` instead. */
  export type Outbound = NotesDeleteRequest$Outbound;
}

export function notesDeleteRequestToJSON(
  notesDeleteRequest: NotesDeleteRequest,
): string {
  return JSON.stringify(
    NotesDeleteRequest$outboundSchema.parse(notesDeleteRequest),
  );
}

export function notesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const NotesDeleteDetail$inboundSchema: z.ZodType<
  NotesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type NotesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const NotesDeleteDetail$outboundSchema: z.ZodType<
  NotesDeleteDetail$Outbound,
  z.ZodTypeDef,
  NotesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteDetail$ {
  /** @deprecated use `NotesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteDetail$inboundSchema;
  /** @deprecated use `NotesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteDetail$outboundSchema;
  /** @deprecated use `NotesDeleteDetail$Outbound` instead. */
  export type Outbound = NotesDeleteDetail$Outbound;
}

export function notesDeleteDetailToJSON(
  notesDeleteDetail: NotesDeleteDetail,
): string {
  return JSON.stringify(
    NotesDeleteDetail$outboundSchema.parse(notesDeleteDetail),
  );
}

export function notesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const NotesDeleteNotesResponseBody$inboundSchema: z.ZodType<
  NotesDeleteNotesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type NotesDeleteNotesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const NotesDeleteNotesResponseBody$outboundSchema: z.ZodType<
  NotesDeleteNotesResponseBody$Outbound,
  z.ZodTypeDef,
  NotesDeleteNotesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteNotesResponseBody$ {
  /** @deprecated use `NotesDeleteNotesResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteNotesResponseBody$inboundSchema;
  /** @deprecated use `NotesDeleteNotesResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteNotesResponseBody$outboundSchema;
  /** @deprecated use `NotesDeleteNotesResponseBody$Outbound` instead. */
  export type Outbound = NotesDeleteNotesResponseBody$Outbound;
}

export function notesDeleteNotesResponseBodyToJSON(
  notesDeleteNotesResponseBody: NotesDeleteNotesResponseBody,
): string {
  return JSON.stringify(
    NotesDeleteNotesResponseBody$outboundSchema.parse(
      notesDeleteNotesResponseBody,
    ),
  );
}

export function notesDeleteNotesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteNotesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteNotesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteNotesResponseBody' from JSON`,
  );
}

/** @internal */
export const NotesDeleteUnifiedId$inboundSchema: z.ZodType<
  NotesDeleteUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type NotesDeleteUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const NotesDeleteUnifiedId$outboundSchema: z.ZodType<
  NotesDeleteUnifiedId$Outbound,
  z.ZodTypeDef,
  NotesDeleteUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteUnifiedId$ {
  /** @deprecated use `NotesDeleteUnifiedId$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteUnifiedId$inboundSchema;
  /** @deprecated use `NotesDeleteUnifiedId$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteUnifiedId$outboundSchema;
  /** @deprecated use `NotesDeleteUnifiedId$Outbound` instead. */
  export type Outbound = NotesDeleteUnifiedId$Outbound;
}

export function notesDeleteUnifiedIdToJSON(
  notesDeleteUnifiedId: NotesDeleteUnifiedId,
): string {
  return JSON.stringify(
    NotesDeleteUnifiedId$outboundSchema.parse(notesDeleteUnifiedId),
  );
}

export function notesDeleteUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteUnifiedId' from JSON`,
  );
}

/** @internal */
export const NotesDeleteResponseBody$inboundSchema: z.ZodType<
  NotesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => NotesDeleteUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type NotesDeleteResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: NotesDeleteUnifiedId$Outbound;
};

/** @internal */
export const NotesDeleteResponseBody$outboundSchema: z.ZodType<
  NotesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  NotesDeleteResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => NotesDeleteUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteResponseBody$ {
  /** @deprecated use `NotesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteResponseBody$inboundSchema;
  /** @deprecated use `NotesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteResponseBody$outboundSchema;
  /** @deprecated use `NotesDeleteResponseBody$Outbound` instead. */
  export type Outbound = NotesDeleteResponseBody$Outbound;
}

export function notesDeleteResponseBodyToJSON(
  notesDeleteResponseBody: NotesDeleteResponseBody,
): string {
  return JSON.stringify(
    NotesDeleteResponseBody$outboundSchema.parse(notesDeleteResponseBody),
  );
}

export function notesDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const NotesDeleteResponse$inboundSchema: z.ZodType<
  NotesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => NotesDeleteResponseBody$inboundSchema),
  z.lazy(() => NotesDeleteNotesResponseBody$inboundSchema),
]);

/** @internal */
export type NotesDeleteResponse$Outbound =
  | NotesDeleteResponseBody$Outbound
  | NotesDeleteNotesResponseBody$Outbound;

/** @internal */
export const NotesDeleteResponse$outboundSchema: z.ZodType<
  NotesDeleteResponse$Outbound,
  z.ZodTypeDef,
  NotesDeleteResponse
> = z.union([
  z.lazy(() => NotesDeleteResponseBody$outboundSchema),
  z.lazy(() => NotesDeleteNotesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotesDeleteResponse$ {
  /** @deprecated use `NotesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = NotesDeleteResponse$inboundSchema;
  /** @deprecated use `NotesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = NotesDeleteResponse$outboundSchema;
  /** @deprecated use `NotesDeleteResponse$Outbound` instead. */
  export type Outbound = NotesDeleteResponse$Outbound;
}

export function notesDeleteResponseToJSON(
  notesDeleteResponse: NotesDeleteResponse,
): string {
  return JSON.stringify(
    NotesDeleteResponse$outboundSchema.parse(notesDeleteResponse),
  );
}

export function notesDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<NotesDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotesDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotesDeleteResponse' from JSON`,
  );
}
