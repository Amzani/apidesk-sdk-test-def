/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompaniesOneSecurity = {
  apiKey: string;
};

export type CompaniesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type CompaniesOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type CompaniesOneCompaniesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const CompaniesOneCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type CompaniesOneCurrency = ClosedEnum<typeof CompaniesOneCurrency>;

/**
 * The type of bank account.
 */
export const CompaniesOneAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The type of bank account.
 */
export type CompaniesOneAccountType = ClosedEnum<
  typeof CompaniesOneAccountType
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const CompaniesOneCompaniesCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type CompaniesOneCompaniesCurrency = ClosedEnum<
  typeof CompaniesOneCompaniesCurrency
>;

export type CompaniesOneBankAccounts = {
  /**
   * The name of the bank
   */
  bankName?: string | null | undefined;
  /**
   * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name which you used in opening your bank account.
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account.
   */
  accountType?: CompaniesOneAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN).
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC).
   */
  bic?: string | null | undefined;
  /**
   * A routing number is a nine-digit code used to identify a financial institution in the United States.
   */
  routingNumber?: string | null | undefined;
  /**
   * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
   */
  bsbNumber?: string | null | undefined;
  /**
   * A branch identifier is a unique identifier for a branch of a bank or financial institution.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
   */
  bankCode?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: CompaniesOneCompaniesCurrency | null | undefined;
};

/**
 * The type of website
 */
export const CompaniesOneType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type CompaniesOneType = ClosedEnum<typeof CompaniesOneType>;

export type CompaniesOneWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: CompaniesOneType | null | undefined;
};

/**
 * The type of address.
 */
export const CompaniesOneCompaniesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type CompaniesOneCompaniesType = ClosedEnum<
  typeof CompaniesOneCompaniesType
>;

export type CompaniesOneAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: CompaniesOneCompaniesType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type CompaniesOneSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const CompaniesOneCompaniesResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type CompaniesOneCompaniesResponseType = ClosedEnum<
  typeof CompaniesOneCompaniesResponseType
>;

export type CompaniesOnePhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: CompaniesOneCompaniesResponseType | null | undefined;
};

/**
 * Email type
 */
export const CompaniesOneCompaniesResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type CompaniesOneCompaniesResponse200Type = ClosedEnum<
  typeof CompaniesOneCompaniesResponse200Type
>;

export type CompaniesOneEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: CompaniesOneCompaniesResponse200Type | null | undefined;
};

export type CompaniesOneCompanyRowType = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

export type CompaniesOneValue6 = {};

export type CompaniesOneValue4 = {};

export type CompaniesOneValue =
  | CompaniesOneValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<CompaniesOneValue6>;

export type CompaniesOneCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | CompaniesOneValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<CompaniesOneValue6>
    | null
    | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type CompaniesOneCustomMappings = {};

export type CompaniesOneExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type CompaniesOnePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<CompaniesOneExtendPaths> | undefined;
};

export type CompaniesOneData = {
  /**
   * Unique identifier for the company
   */
  id?: string | undefined;
  /**
   * Name of the company
   */
  name: string | null;
  /**
   * Number of interactions
   */
  interactionCount?: number | null | undefined;
  /**
   * Owner ID
   */
  ownerId?: string | null | undefined;
  /**
   * The Image URL of the company
   */
  image?: string | null | undefined;
  /**
   * A description of the company
   */
  description?: string | null | undefined;
  /**
   * The VAT number of the company
   */
  vatNumber?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: CompaniesOneCurrency | null | undefined;
  /**
   * The status of the company
   */
  status?: string | null | undefined;
  /**
   * The fax number of the company
   */
  fax?: string | null | undefined;
  /**
   * The annual revenue of the company
   */
  annualRevenue?: string | null | undefined;
  /**
   * Number of employees
   */
  numberOfEmployees?: string | null | undefined;
  /**
   * The industry represents the type of business the company is in.
   */
  industry?: string | null | undefined;
  /**
   * The ownership indicates the type of ownership of the company.
   */
  ownership?: string | null | undefined;
  /**
   * A sales tax number is a unique number that identifies a company for tax purposes.
   */
  salesTaxNumber?: string | null | undefined;
  /**
   * A payee number is a unique number that identifies a payee for tax purposes.
   */
  payeeNumber?: string | null | undefined;
  /**
   * An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
   */
  abnOrTfn?: string | null | undefined;
  /**
   * An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
   */
  abnBranch?: string | null | undefined;
  /**
   * The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
   */
  acn?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Parent ID
   */
  parentId?: string | null | undefined;
  bankAccounts?: Array<CompaniesOneBankAccounts> | undefined;
  websites?: Array<CompaniesOneWebsites> | undefined;
  addresses?: Array<CompaniesOneAddresses> | undefined;
  socialLinks?: Array<CompaniesOneSocialLinks> | undefined;
  phoneNumbers?: Array<CompaniesOnePhoneNumbers> | undefined;
  emails?: Array<CompaniesOneEmails> | undefined;
  rowType?: CompaniesOneCompanyRowType | undefined;
  customFields?: Array<CompaniesOneCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * Whether the company is read-only or not
   */
  readOnly?: boolean | null | undefined;
  /**
   * Last activity date
   */
  lastActivityAt?: Date | null | undefined;
  /**
   * Whether the company is deleted or not
   */
  deleted?: boolean | undefined;
  /**
   * A formal salutation for the person. For example, 'Mr', 'Mrs'
   */
  salutation?: string | null | undefined;
  /**
   * The date of birth of the person.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CompaniesOneCustomMappings | null | undefined;
  /**
   * Updated by user ID
   */
  updatedBy?: string | null | undefined;
  /**
   * Created by user ID
   */
  createdBy?: string | null | undefined;
  /**
   * Last updated date
   */
  updatedAt?: Date | null | undefined;
  /**
   * Creation date
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<CompaniesOnePassThrough> | undefined;
};

/**
 * Company
 */
export type CompaniesOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: CompaniesOneData;
};

export type CompaniesOneResponse =
  | CompaniesOneResponseBody
  | CompaniesOneCompaniesResponseBody;

/** @internal */
export const CompaniesOneSecurity$inboundSchema: z.ZodType<
  CompaniesOneSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type CompaniesOneSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const CompaniesOneSecurity$outboundSchema: z.ZodType<
  CompaniesOneSecurity$Outbound,
  z.ZodTypeDef,
  CompaniesOneSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneSecurity$ {
  /** @deprecated use `CompaniesOneSecurity$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneSecurity$inboundSchema;
  /** @deprecated use `CompaniesOneSecurity$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneSecurity$outboundSchema;
  /** @deprecated use `CompaniesOneSecurity$Outbound` instead. */
  export type Outbound = CompaniesOneSecurity$Outbound;
}

export function companiesOneSecurityToJSON(
  companiesOneSecurity: CompaniesOneSecurity,
): string {
  return JSON.stringify(
    CompaniesOneSecurity$outboundSchema.parse(companiesOneSecurity),
  );
}

export function companiesOneSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneSecurity' from JSON`,
  );
}

/** @internal */
export const CompaniesOneRequest$inboundSchema: z.ZodType<
  CompaniesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompaniesOneRequest$Outbound = {
  id: string;
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const CompaniesOneRequest$outboundSchema: z.ZodType<
  CompaniesOneRequest$Outbound,
  z.ZodTypeDef,
  CompaniesOneRequest
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneRequest$ {
  /** @deprecated use `CompaniesOneRequest$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneRequest$inboundSchema;
  /** @deprecated use `CompaniesOneRequest$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneRequest$outboundSchema;
  /** @deprecated use `CompaniesOneRequest$Outbound` instead. */
  export type Outbound = CompaniesOneRequest$Outbound;
}

export function companiesOneRequestToJSON(
  companiesOneRequest: CompaniesOneRequest,
): string {
  return JSON.stringify(
    CompaniesOneRequest$outboundSchema.parse(companiesOneRequest),
  );
}

export function companiesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneRequest' from JSON`,
  );
}

/** @internal */
export const CompaniesOneDetail$inboundSchema: z.ZodType<
  CompaniesOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type CompaniesOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const CompaniesOneDetail$outboundSchema: z.ZodType<
  CompaniesOneDetail$Outbound,
  z.ZodTypeDef,
  CompaniesOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneDetail$ {
  /** @deprecated use `CompaniesOneDetail$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneDetail$inboundSchema;
  /** @deprecated use `CompaniesOneDetail$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneDetail$outboundSchema;
  /** @deprecated use `CompaniesOneDetail$Outbound` instead. */
  export type Outbound = CompaniesOneDetail$Outbound;
}

export function companiesOneDetailToJSON(
  companiesOneDetail: CompaniesOneDetail,
): string {
  return JSON.stringify(
    CompaniesOneDetail$outboundSchema.parse(companiesOneDetail),
  );
}

export function companiesOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneDetail' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCompaniesResponseBody$inboundSchema: z.ZodType<
  CompaniesOneCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type CompaniesOneCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const CompaniesOneCompaniesResponseBody$outboundSchema: z.ZodType<
  CompaniesOneCompaniesResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesOneCompaniesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesResponseBody$ {
  /** @deprecated use `CompaniesOneCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneCompaniesResponseBody$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesOneCompaniesResponseBody$outboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponseBody$Outbound` instead. */
  export type Outbound = CompaniesOneCompaniesResponseBody$Outbound;
}

export function companiesOneCompaniesResponseBodyToJSON(
  companiesOneCompaniesResponseBody: CompaniesOneCompaniesResponseBody,
): string {
  return JSON.stringify(
    CompaniesOneCompaniesResponseBody$outboundSchema.parse(
      companiesOneCompaniesResponseBody,
    ),
  );
}

export function companiesOneCompaniesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneCompaniesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneCompaniesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneCompaniesResponseBody' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCurrency$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneCurrency
> = z.nativeEnum(CompaniesOneCurrency);

/** @internal */
export const CompaniesOneCurrency$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneCurrency
> = CompaniesOneCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCurrency$ {
  /** @deprecated use `CompaniesOneCurrency$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneCurrency$inboundSchema;
  /** @deprecated use `CompaniesOneCurrency$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneCurrency$outboundSchema;
}

/** @internal */
export const CompaniesOneAccountType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneAccountType
> = z.nativeEnum(CompaniesOneAccountType);

/** @internal */
export const CompaniesOneAccountType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneAccountType
> = CompaniesOneAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneAccountType$ {
  /** @deprecated use `CompaniesOneAccountType$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneAccountType$inboundSchema;
  /** @deprecated use `CompaniesOneAccountType$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneAccountType$outboundSchema;
}

/** @internal */
export const CompaniesOneCompaniesCurrency$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneCompaniesCurrency
> = z.nativeEnum(CompaniesOneCompaniesCurrency);

/** @internal */
export const CompaniesOneCompaniesCurrency$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneCompaniesCurrency
> = CompaniesOneCompaniesCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesCurrency$ {
  /** @deprecated use `CompaniesOneCompaniesCurrency$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneCompaniesCurrency$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesCurrency$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneCompaniesCurrency$outboundSchema;
}

/** @internal */
export const CompaniesOneBankAccounts$inboundSchema: z.ZodType<
  CompaniesOneBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(CompaniesOneAccountType$inboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesOneCompaniesCurrency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type CompaniesOneBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const CompaniesOneBankAccounts$outboundSchema: z.ZodType<
  CompaniesOneBankAccounts$Outbound,
  z.ZodTypeDef,
  CompaniesOneBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(CompaniesOneAccountType$outboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesOneCompaniesCurrency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneBankAccounts$ {
  /** @deprecated use `CompaniesOneBankAccounts$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneBankAccounts$inboundSchema;
  /** @deprecated use `CompaniesOneBankAccounts$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneBankAccounts$outboundSchema;
  /** @deprecated use `CompaniesOneBankAccounts$Outbound` instead. */
  export type Outbound = CompaniesOneBankAccounts$Outbound;
}

export function companiesOneBankAccountsToJSON(
  companiesOneBankAccounts: CompaniesOneBankAccounts,
): string {
  return JSON.stringify(
    CompaniesOneBankAccounts$outboundSchema.parse(companiesOneBankAccounts),
  );
}

export function companiesOneBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneBankAccounts' from JSON`,
  );
}

/** @internal */
export const CompaniesOneType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneType
> = z.nativeEnum(CompaniesOneType);

/** @internal */
export const CompaniesOneType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneType
> = CompaniesOneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneType$ {
  /** @deprecated use `CompaniesOneType$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneType$inboundSchema;
  /** @deprecated use `CompaniesOneType$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneType$outboundSchema;
}

/** @internal */
export const CompaniesOneWebsites$inboundSchema: z.ZodType<
  CompaniesOneWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CompaniesOneType$inboundSchema).optional(),
});

/** @internal */
export type CompaniesOneWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesOneWebsites$outboundSchema: z.ZodType<
  CompaniesOneWebsites$Outbound,
  z.ZodTypeDef,
  CompaniesOneWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(CompaniesOneType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneWebsites$ {
  /** @deprecated use `CompaniesOneWebsites$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneWebsites$inboundSchema;
  /** @deprecated use `CompaniesOneWebsites$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneWebsites$outboundSchema;
  /** @deprecated use `CompaniesOneWebsites$Outbound` instead. */
  export type Outbound = CompaniesOneWebsites$Outbound;
}

export function companiesOneWebsitesToJSON(
  companiesOneWebsites: CompaniesOneWebsites,
): string {
  return JSON.stringify(
    CompaniesOneWebsites$outboundSchema.parse(companiesOneWebsites),
  );
}

export function companiesOneWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneWebsites' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCompaniesType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneCompaniesType
> = z.nativeEnum(CompaniesOneCompaniesType);

/** @internal */
export const CompaniesOneCompaniesType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneCompaniesType
> = CompaniesOneCompaniesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesType$ {
  /** @deprecated use `CompaniesOneCompaniesType$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneCompaniesType$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesType$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneCompaniesType$outboundSchema;
}

/** @internal */
export const CompaniesOneAddresses$inboundSchema: z.ZodType<
  CompaniesOneAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesOneCompaniesType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type CompaniesOneAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const CompaniesOneAddresses$outboundSchema: z.ZodType<
  CompaniesOneAddresses$Outbound,
  z.ZodTypeDef,
  CompaniesOneAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesOneCompaniesType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneAddresses$ {
  /** @deprecated use `CompaniesOneAddresses$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneAddresses$inboundSchema;
  /** @deprecated use `CompaniesOneAddresses$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneAddresses$outboundSchema;
  /** @deprecated use `CompaniesOneAddresses$Outbound` instead. */
  export type Outbound = CompaniesOneAddresses$Outbound;
}

export function companiesOneAddressesToJSON(
  companiesOneAddresses: CompaniesOneAddresses,
): string {
  return JSON.stringify(
    CompaniesOneAddresses$outboundSchema.parse(companiesOneAddresses),
  );
}

export function companiesOneAddressesFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneAddresses' from JSON`,
  );
}

/** @internal */
export const CompaniesOneSocialLinks$inboundSchema: z.ZodType<
  CompaniesOneSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompaniesOneSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesOneSocialLinks$outboundSchema: z.ZodType<
  CompaniesOneSocialLinks$Outbound,
  z.ZodTypeDef,
  CompaniesOneSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneSocialLinks$ {
  /** @deprecated use `CompaniesOneSocialLinks$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneSocialLinks$inboundSchema;
  /** @deprecated use `CompaniesOneSocialLinks$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneSocialLinks$outboundSchema;
  /** @deprecated use `CompaniesOneSocialLinks$Outbound` instead. */
  export type Outbound = CompaniesOneSocialLinks$Outbound;
}

export function companiesOneSocialLinksToJSON(
  companiesOneSocialLinks: CompaniesOneSocialLinks,
): string {
  return JSON.stringify(
    CompaniesOneSocialLinks$outboundSchema.parse(companiesOneSocialLinks),
  );
}

export function companiesOneSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneSocialLinks' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCompaniesResponseType$inboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneCompaniesResponseType
> = z.nativeEnum(CompaniesOneCompaniesResponseType);

/** @internal */
export const CompaniesOneCompaniesResponseType$outboundSchema: z.ZodNativeEnum<
  typeof CompaniesOneCompaniesResponseType
> = CompaniesOneCompaniesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesResponseType$ {
  /** @deprecated use `CompaniesOneCompaniesResponseType$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneCompaniesResponseType$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesOneCompaniesResponseType$outboundSchema;
}

/** @internal */
export const CompaniesOnePhoneNumbers$inboundSchema: z.ZodType<
  CompaniesOnePhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesOneCompaniesResponseType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type CompaniesOnePhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesOnePhoneNumbers$outboundSchema: z.ZodType<
  CompaniesOnePhoneNumbers$Outbound,
  z.ZodTypeDef,
  CompaniesOnePhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(CompaniesOneCompaniesResponseType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOnePhoneNumbers$ {
  /** @deprecated use `CompaniesOnePhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = CompaniesOnePhoneNumbers$inboundSchema;
  /** @deprecated use `CompaniesOnePhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = CompaniesOnePhoneNumbers$outboundSchema;
  /** @deprecated use `CompaniesOnePhoneNumbers$Outbound` instead. */
  export type Outbound = CompaniesOnePhoneNumbers$Outbound;
}

export function companiesOnePhoneNumbersToJSON(
  companiesOnePhoneNumbers: CompaniesOnePhoneNumbers,
): string {
  return JSON.stringify(
    CompaniesOnePhoneNumbers$outboundSchema.parse(companiesOnePhoneNumbers),
  );
}

export function companiesOnePhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOnePhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOnePhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOnePhoneNumbers' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCompaniesResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CompaniesOneCompaniesResponse200Type> = z.nativeEnum(
    CompaniesOneCompaniesResponse200Type,
  );

/** @internal */
export const CompaniesOneCompaniesResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CompaniesOneCompaniesResponse200Type> =
    CompaniesOneCompaniesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompaniesResponse200Type$ {
  /** @deprecated use `CompaniesOneCompaniesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CompaniesOneCompaniesResponse200Type$inboundSchema;
  /** @deprecated use `CompaniesOneCompaniesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CompaniesOneCompaniesResponse200Type$outboundSchema;
}

/** @internal */
export const CompaniesOneEmails$inboundSchema: z.ZodType<
  CompaniesOneEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CompaniesOneCompaniesResponse200Type$inboundSchema)
    .optional(),
});

/** @internal */
export type CompaniesOneEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const CompaniesOneEmails$outboundSchema: z.ZodType<
  CompaniesOneEmails$Outbound,
  z.ZodTypeDef,
  CompaniesOneEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(CompaniesOneCompaniesResponse200Type$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneEmails$ {
  /** @deprecated use `CompaniesOneEmails$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneEmails$inboundSchema;
  /** @deprecated use `CompaniesOneEmails$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneEmails$outboundSchema;
  /** @deprecated use `CompaniesOneEmails$Outbound` instead. */
  export type Outbound = CompaniesOneEmails$Outbound;
}

export function companiesOneEmailsToJSON(
  companiesOneEmails: CompaniesOneEmails,
): string {
  return JSON.stringify(
    CompaniesOneEmails$outboundSchema.parse(companiesOneEmails),
  );
}

export function companiesOneEmailsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneEmails' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCompanyRowType$inboundSchema: z.ZodType<
  CompaniesOneCompanyRowType,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type CompaniesOneCompanyRowType$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const CompaniesOneCompanyRowType$outboundSchema: z.ZodType<
  CompaniesOneCompanyRowType$Outbound,
  z.ZodTypeDef,
  CompaniesOneCompanyRowType
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCompanyRowType$ {
  /** @deprecated use `CompaniesOneCompanyRowType$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneCompanyRowType$inboundSchema;
  /** @deprecated use `CompaniesOneCompanyRowType$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneCompanyRowType$outboundSchema;
  /** @deprecated use `CompaniesOneCompanyRowType$Outbound` instead. */
  export type Outbound = CompaniesOneCompanyRowType$Outbound;
}

export function companiesOneCompanyRowTypeToJSON(
  companiesOneCompanyRowType: CompaniesOneCompanyRowType,
): string {
  return JSON.stringify(
    CompaniesOneCompanyRowType$outboundSchema.parse(companiesOneCompanyRowType),
  );
}

export function companiesOneCompanyRowTypeFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneCompanyRowType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneCompanyRowType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneCompanyRowType' from JSON`,
  );
}

/** @internal */
export const CompaniesOneValue6$inboundSchema: z.ZodType<
  CompaniesOneValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CompaniesOneValue6$Outbound = {};

/** @internal */
export const CompaniesOneValue6$outboundSchema: z.ZodType<
  CompaniesOneValue6$Outbound,
  z.ZodTypeDef,
  CompaniesOneValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneValue6$ {
  /** @deprecated use `CompaniesOneValue6$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneValue6$inboundSchema;
  /** @deprecated use `CompaniesOneValue6$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneValue6$outboundSchema;
  /** @deprecated use `CompaniesOneValue6$Outbound` instead. */
  export type Outbound = CompaniesOneValue6$Outbound;
}

export function companiesOneValue6ToJSON(
  companiesOneValue6: CompaniesOneValue6,
): string {
  return JSON.stringify(
    CompaniesOneValue6$outboundSchema.parse(companiesOneValue6),
  );
}

export function companiesOneValue6FromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneValue6' from JSON`,
  );
}

/** @internal */
export const CompaniesOneValue4$inboundSchema: z.ZodType<
  CompaniesOneValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CompaniesOneValue4$Outbound = {};

/** @internal */
export const CompaniesOneValue4$outboundSchema: z.ZodType<
  CompaniesOneValue4$Outbound,
  z.ZodTypeDef,
  CompaniesOneValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneValue4$ {
  /** @deprecated use `CompaniesOneValue4$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneValue4$inboundSchema;
  /** @deprecated use `CompaniesOneValue4$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneValue4$outboundSchema;
  /** @deprecated use `CompaniesOneValue4$Outbound` instead. */
  export type Outbound = CompaniesOneValue4$Outbound;
}

export function companiesOneValue4ToJSON(
  companiesOneValue4: CompaniesOneValue4,
): string {
  return JSON.stringify(
    CompaniesOneValue4$outboundSchema.parse(companiesOneValue4),
  );
}

export function companiesOneValue4FromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneValue4' from JSON`,
  );
}

/** @internal */
export const CompaniesOneValue$inboundSchema: z.ZodType<
  CompaniesOneValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CompaniesOneValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CompaniesOneValue6$inboundSchema)),
]);

/** @internal */
export type CompaniesOneValue$Outbound =
  | CompaniesOneValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<CompaniesOneValue6$Outbound>;

/** @internal */
export const CompaniesOneValue$outboundSchema: z.ZodType<
  CompaniesOneValue$Outbound,
  z.ZodTypeDef,
  CompaniesOneValue
> = z.union([
  z.lazy(() => CompaniesOneValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => CompaniesOneValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneValue$ {
  /** @deprecated use `CompaniesOneValue$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneValue$inboundSchema;
  /** @deprecated use `CompaniesOneValue$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneValue$outboundSchema;
  /** @deprecated use `CompaniesOneValue$Outbound` instead. */
  export type Outbound = CompaniesOneValue$Outbound;
}

export function companiesOneValueToJSON(
  companiesOneValue: CompaniesOneValue,
): string {
  return JSON.stringify(
    CompaniesOneValue$outboundSchema.parse(companiesOneValue),
  );
}

export function companiesOneValueFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneValue' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCustomFields$inboundSchema: z.ZodType<
  CompaniesOneCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CompaniesOneValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CompaniesOneValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type CompaniesOneCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | CompaniesOneValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<CompaniesOneValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const CompaniesOneCustomFields$outboundSchema: z.ZodType<
  CompaniesOneCustomFields$Outbound,
  z.ZodTypeDef,
  CompaniesOneCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => CompaniesOneValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => CompaniesOneValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCustomFields$ {
  /** @deprecated use `CompaniesOneCustomFields$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneCustomFields$inboundSchema;
  /** @deprecated use `CompaniesOneCustomFields$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneCustomFields$outboundSchema;
  /** @deprecated use `CompaniesOneCustomFields$Outbound` instead. */
  export type Outbound = CompaniesOneCustomFields$Outbound;
}

export function companiesOneCustomFieldsToJSON(
  companiesOneCustomFields: CompaniesOneCustomFields,
): string {
  return JSON.stringify(
    CompaniesOneCustomFields$outboundSchema.parse(companiesOneCustomFields),
  );
}

export function companiesOneCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneCustomFields' from JSON`,
  );
}

/** @internal */
export const CompaniesOneCustomMappings$inboundSchema: z.ZodType<
  CompaniesOneCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CompaniesOneCustomMappings$Outbound = {};

/** @internal */
export const CompaniesOneCustomMappings$outboundSchema: z.ZodType<
  CompaniesOneCustomMappings$Outbound,
  z.ZodTypeDef,
  CompaniesOneCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneCustomMappings$ {
  /** @deprecated use `CompaniesOneCustomMappings$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneCustomMappings$inboundSchema;
  /** @deprecated use `CompaniesOneCustomMappings$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneCustomMappings$outboundSchema;
  /** @deprecated use `CompaniesOneCustomMappings$Outbound` instead. */
  export type Outbound = CompaniesOneCustomMappings$Outbound;
}

export function companiesOneCustomMappingsToJSON(
  companiesOneCustomMappings: CompaniesOneCustomMappings,
): string {
  return JSON.stringify(
    CompaniesOneCustomMappings$outboundSchema.parse(companiesOneCustomMappings),
  );
}

export function companiesOneCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneCustomMappings' from JSON`,
  );
}

/** @internal */
export const CompaniesOneExtendPaths$inboundSchema: z.ZodType<
  CompaniesOneExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type CompaniesOneExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const CompaniesOneExtendPaths$outboundSchema: z.ZodType<
  CompaniesOneExtendPaths$Outbound,
  z.ZodTypeDef,
  CompaniesOneExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneExtendPaths$ {
  /** @deprecated use `CompaniesOneExtendPaths$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneExtendPaths$inboundSchema;
  /** @deprecated use `CompaniesOneExtendPaths$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneExtendPaths$outboundSchema;
  /** @deprecated use `CompaniesOneExtendPaths$Outbound` instead. */
  export type Outbound = CompaniesOneExtendPaths$Outbound;
}

export function companiesOneExtendPathsToJSON(
  companiesOneExtendPaths: CompaniesOneExtendPaths,
): string {
  return JSON.stringify(
    CompaniesOneExtendPaths$outboundSchema.parse(companiesOneExtendPaths),
  );
}

export function companiesOneExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneExtendPaths' from JSON`,
  );
}

/** @internal */
export const CompaniesOnePassThrough$inboundSchema: z.ZodType<
  CompaniesOnePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => CompaniesOneExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type CompaniesOnePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<CompaniesOneExtendPaths$Outbound> | undefined;
};

/** @internal */
export const CompaniesOnePassThrough$outboundSchema: z.ZodType<
  CompaniesOnePassThrough$Outbound,
  z.ZodTypeDef,
  CompaniesOnePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => CompaniesOneExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOnePassThrough$ {
  /** @deprecated use `CompaniesOnePassThrough$inboundSchema` instead. */
  export const inboundSchema = CompaniesOnePassThrough$inboundSchema;
  /** @deprecated use `CompaniesOnePassThrough$outboundSchema` instead. */
  export const outboundSchema = CompaniesOnePassThrough$outboundSchema;
  /** @deprecated use `CompaniesOnePassThrough$Outbound` instead. */
  export type Outbound = CompaniesOnePassThrough$Outbound;
}

export function companiesOnePassThroughToJSON(
  companiesOnePassThrough: CompaniesOnePassThrough,
): string {
  return JSON.stringify(
    CompaniesOnePassThrough$outboundSchema.parse(companiesOnePassThrough),
  );
}

export function companiesOnePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOnePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOnePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOnePassThrough' from JSON`,
  );
}

/** @internal */
export const CompaniesOneData$inboundSchema: z.ZodType<
  CompaniesOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  interaction_count: z.nullable(z.number().int()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vat_number: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesOneCurrency$inboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annual_revenue: z.nullable(z.string()).optional(),
  number_of_employees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  sales_tax_number: z.nullable(z.string()).optional(),
  payee_number: z.nullable(z.string()).optional(),
  abn_or_tfn: z.nullable(z.string()).optional(),
  abn_branch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  parent_id: z.nullable(z.string()).optional(),
  bank_accounts: z.array(z.lazy(() => CompaniesOneBankAccounts$inboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => CompaniesOneWebsites$inboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CompaniesOneAddresses$inboundSchema))
    .optional(),
  social_links: z.array(z.lazy(() => CompaniesOneSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(z.lazy(() => CompaniesOnePhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => CompaniesOneEmails$inboundSchema)).optional(),
  row_type: z.lazy(() => CompaniesOneCompanyRowType$inboundSchema).optional(),
  custom_fields: z.array(z.lazy(() => CompaniesOneCustomFields$inboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  read_only: z.nullable(z.boolean()).optional(),
  last_activity_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  deleted: z.boolean().optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => CompaniesOneCustomMappings$inboundSchema),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(z.lazy(() => CompaniesOnePassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "interaction_count": "interactionCount",
    "owner_id": "ownerId",
    "vat_number": "vatNumber",
    "annual_revenue": "annualRevenue",
    "number_of_employees": "numberOfEmployees",
    "sales_tax_number": "salesTaxNumber",
    "payee_number": "payeeNumber",
    "abn_or_tfn": "abnOrTfn",
    "abn_branch": "abnBranch",
    "first_name": "firstName",
    "last_name": "lastName",
    "parent_id": "parentId",
    "bank_accounts": "bankAccounts",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "row_type": "rowType",
    "custom_fields": "customFields",
    "read_only": "readOnly",
    "last_activity_at": "lastActivityAt",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CompaniesOneData$Outbound = {
  id?: string | undefined;
  name: string | null;
  interaction_count?: number | null | undefined;
  owner_id?: string | null | undefined;
  image?: string | null | undefined;
  description?: string | null | undefined;
  vat_number?: string | null | undefined;
  currency?: string | null | undefined;
  status?: string | null | undefined;
  fax?: string | null | undefined;
  annual_revenue?: string | null | undefined;
  number_of_employees?: string | null | undefined;
  industry?: string | null | undefined;
  ownership?: string | null | undefined;
  sales_tax_number?: string | null | undefined;
  payee_number?: string | null | undefined;
  abn_or_tfn?: string | null | undefined;
  abn_branch?: string | null | undefined;
  acn?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  parent_id?: string | null | undefined;
  bank_accounts?: Array<CompaniesOneBankAccounts$Outbound> | undefined;
  websites?: Array<CompaniesOneWebsites$Outbound> | undefined;
  addresses?: Array<CompaniesOneAddresses$Outbound> | undefined;
  social_links?: Array<CompaniesOneSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<CompaniesOnePhoneNumbers$Outbound> | undefined;
  emails?: Array<CompaniesOneEmails$Outbound> | undefined;
  row_type?: CompaniesOneCompanyRowType$Outbound | undefined;
  custom_fields?: Array<CompaniesOneCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  read_only?: boolean | null | undefined;
  last_activity_at?: string | null | undefined;
  deleted?: boolean | undefined;
  salutation?: string | null | undefined;
  birthday?: string | null | undefined;
  custom_mappings?: CompaniesOneCustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<CompaniesOnePassThrough$Outbound> | undefined;
};

/** @internal */
export const CompaniesOneData$outboundSchema: z.ZodType<
  CompaniesOneData$Outbound,
  z.ZodTypeDef,
  CompaniesOneData
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()),
  interactionCount: z.nullable(z.number().int()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  image: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(CompaniesOneCurrency$outboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  annualRevenue: z.nullable(z.string()).optional(),
  numberOfEmployees: z.nullable(z.string()).optional(),
  industry: z.nullable(z.string()).optional(),
  ownership: z.nullable(z.string()).optional(),
  salesTaxNumber: z.nullable(z.string()).optional(),
  payeeNumber: z.nullable(z.string()).optional(),
  abnOrTfn: z.nullable(z.string()).optional(),
  abnBranch: z.nullable(z.string()).optional(),
  acn: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  parentId: z.nullable(z.string()).optional(),
  bankAccounts: z.array(z.lazy(() => CompaniesOneBankAccounts$outboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => CompaniesOneWebsites$outboundSchema))
    .optional(),
  addresses: z.array(z.lazy(() => CompaniesOneAddresses$outboundSchema))
    .optional(),
  socialLinks: z.array(z.lazy(() => CompaniesOneSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => CompaniesOnePhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => CompaniesOneEmails$outboundSchema)).optional(),
  rowType: z.lazy(() => CompaniesOneCompanyRowType$outboundSchema).optional(),
  customFields: z.array(z.lazy(() => CompaniesOneCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  readOnly: z.nullable(z.boolean()).optional(),
  lastActivityAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  deleted: z.boolean().optional(),
  salutation: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() => CompaniesOneCustomMappings$outboundSchema),
  ).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(z.lazy(() => CompaniesOnePassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    interactionCount: "interaction_count",
    ownerId: "owner_id",
    vatNumber: "vat_number",
    annualRevenue: "annual_revenue",
    numberOfEmployees: "number_of_employees",
    salesTaxNumber: "sales_tax_number",
    payeeNumber: "payee_number",
    abnOrTfn: "abn_or_tfn",
    abnBranch: "abn_branch",
    firstName: "first_name",
    lastName: "last_name",
    parentId: "parent_id",
    bankAccounts: "bank_accounts",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    rowType: "row_type",
    customFields: "custom_fields",
    readOnly: "read_only",
    lastActivityAt: "last_activity_at",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneData$ {
  /** @deprecated use `CompaniesOneData$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneData$inboundSchema;
  /** @deprecated use `CompaniesOneData$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneData$outboundSchema;
  /** @deprecated use `CompaniesOneData$Outbound` instead. */
  export type Outbound = CompaniesOneData$Outbound;
}

export function companiesOneDataToJSON(
  companiesOneData: CompaniesOneData,
): string {
  return JSON.stringify(
    CompaniesOneData$outboundSchema.parse(companiesOneData),
  );
}

export function companiesOneDataFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneData' from JSON`,
  );
}

/** @internal */
export const CompaniesOneResponseBody$inboundSchema: z.ZodType<
  CompaniesOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CompaniesOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type CompaniesOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: CompaniesOneData$Outbound;
};

/** @internal */
export const CompaniesOneResponseBody$outboundSchema: z.ZodType<
  CompaniesOneResponseBody$Outbound,
  z.ZodTypeDef,
  CompaniesOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => CompaniesOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneResponseBody$ {
  /** @deprecated use `CompaniesOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneResponseBody$inboundSchema;
  /** @deprecated use `CompaniesOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneResponseBody$outboundSchema;
  /** @deprecated use `CompaniesOneResponseBody$Outbound` instead. */
  export type Outbound = CompaniesOneResponseBody$Outbound;
}

export function companiesOneResponseBodyToJSON(
  companiesOneResponseBody: CompaniesOneResponseBody,
): string {
  return JSON.stringify(
    CompaniesOneResponseBody$outboundSchema.parse(companiesOneResponseBody),
  );
}

export function companiesOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneResponseBody' from JSON`,
  );
}

/** @internal */
export const CompaniesOneResponse$inboundSchema: z.ZodType<
  CompaniesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CompaniesOneResponseBody$inboundSchema),
  z.lazy(() => CompaniesOneCompaniesResponseBody$inboundSchema),
]);

/** @internal */
export type CompaniesOneResponse$Outbound =
  | CompaniesOneResponseBody$Outbound
  | CompaniesOneCompaniesResponseBody$Outbound;

/** @internal */
export const CompaniesOneResponse$outboundSchema: z.ZodType<
  CompaniesOneResponse$Outbound,
  z.ZodTypeDef,
  CompaniesOneResponse
> = z.union([
  z.lazy(() => CompaniesOneResponseBody$outboundSchema),
  z.lazy(() => CompaniesOneCompaniesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompaniesOneResponse$ {
  /** @deprecated use `CompaniesOneResponse$inboundSchema` instead. */
  export const inboundSchema = CompaniesOneResponse$inboundSchema;
  /** @deprecated use `CompaniesOneResponse$outboundSchema` instead. */
  export const outboundSchema = CompaniesOneResponse$outboundSchema;
  /** @deprecated use `CompaniesOneResponse$Outbound` instead. */
  export type Outbound = CompaniesOneResponse$Outbound;
}

export function companiesOneResponseToJSON(
  companiesOneResponse: CompaniesOneResponse,
): string {
  return JSON.stringify(
    CompaniesOneResponse$outboundSchema.parse(companiesOneResponse),
  );
}

export function companiesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompaniesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompaniesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompaniesOneResponse' from JSON`,
  );
}
