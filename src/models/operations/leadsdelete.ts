/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LeadsDeleteSecurity = {
  apiKey: string;
};

export type LeadsDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsDeleteDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type LeadsDeleteLeadsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type LeadsDeleteUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Lead deleted
 */
export type LeadsDeleteResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: LeadsDeleteUnifiedId;
};

export type LeadsDeleteResponse =
  | LeadsDeleteResponseBody
  | LeadsDeleteLeadsResponseBody;

/** @internal */
export const LeadsDeleteSecurity$inboundSchema: z.ZodType<
  LeadsDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type LeadsDeleteSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const LeadsDeleteSecurity$outboundSchema: z.ZodType<
  LeadsDeleteSecurity$Outbound,
  z.ZodTypeDef,
  LeadsDeleteSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteSecurity$ {
  /** @deprecated use `LeadsDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteSecurity$inboundSchema;
  /** @deprecated use `LeadsDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteSecurity$outboundSchema;
  /** @deprecated use `LeadsDeleteSecurity$Outbound` instead. */
  export type Outbound = LeadsDeleteSecurity$Outbound;
}

export function leadsDeleteSecurityToJSON(
  leadsDeleteSecurity: LeadsDeleteSecurity,
): string {
  return JSON.stringify(
    LeadsDeleteSecurity$outboundSchema.parse(leadsDeleteSecurity),
  );
}

export function leadsDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const LeadsDeleteRequest$inboundSchema: z.ZodType<
  LeadsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type LeadsDeleteRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const LeadsDeleteRequest$outboundSchema: z.ZodType<
  LeadsDeleteRequest$Outbound,
  z.ZodTypeDef,
  LeadsDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteRequest$ {
  /** @deprecated use `LeadsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteRequest$inboundSchema;
  /** @deprecated use `LeadsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteRequest$outboundSchema;
  /** @deprecated use `LeadsDeleteRequest$Outbound` instead. */
  export type Outbound = LeadsDeleteRequest$Outbound;
}

export function leadsDeleteRequestToJSON(
  leadsDeleteRequest: LeadsDeleteRequest,
): string {
  return JSON.stringify(
    LeadsDeleteRequest$outboundSchema.parse(leadsDeleteRequest),
  );
}

export function leadsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const LeadsDeleteDetail$inboundSchema: z.ZodType<
  LeadsDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsDeleteDetail$outboundSchema: z.ZodType<
  LeadsDeleteDetail$Outbound,
  z.ZodTypeDef,
  LeadsDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteDetail$ {
  /** @deprecated use `LeadsDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteDetail$inboundSchema;
  /** @deprecated use `LeadsDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteDetail$outboundSchema;
  /** @deprecated use `LeadsDeleteDetail$Outbound` instead. */
  export type Outbound = LeadsDeleteDetail$Outbound;
}

export function leadsDeleteDetailToJSON(
  leadsDeleteDetail: LeadsDeleteDetail,
): string {
  return JSON.stringify(
    LeadsDeleteDetail$outboundSchema.parse(leadsDeleteDetail),
  );
}

export function leadsDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteDetail' from JSON`,
  );
}

/** @internal */
export const LeadsDeleteLeadsResponseBody$inboundSchema: z.ZodType<
  LeadsDeleteLeadsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type LeadsDeleteLeadsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsDeleteLeadsResponseBody$outboundSchema: z.ZodType<
  LeadsDeleteLeadsResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsDeleteLeadsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteLeadsResponseBody$ {
  /** @deprecated use `LeadsDeleteLeadsResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteLeadsResponseBody$inboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteLeadsResponseBody$outboundSchema;
  /** @deprecated use `LeadsDeleteLeadsResponseBody$Outbound` instead. */
  export type Outbound = LeadsDeleteLeadsResponseBody$Outbound;
}

export function leadsDeleteLeadsResponseBodyToJSON(
  leadsDeleteLeadsResponseBody: LeadsDeleteLeadsResponseBody,
): string {
  return JSON.stringify(
    LeadsDeleteLeadsResponseBody$outboundSchema.parse(
      leadsDeleteLeadsResponseBody,
    ),
  );
}

export function leadsDeleteLeadsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteLeadsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteLeadsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteLeadsResponseBody' from JSON`,
  );
}

/** @internal */
export const LeadsDeleteUnifiedId$inboundSchema: z.ZodType<
  LeadsDeleteUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type LeadsDeleteUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const LeadsDeleteUnifiedId$outboundSchema: z.ZodType<
  LeadsDeleteUnifiedId$Outbound,
  z.ZodTypeDef,
  LeadsDeleteUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteUnifiedId$ {
  /** @deprecated use `LeadsDeleteUnifiedId$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteUnifiedId$inboundSchema;
  /** @deprecated use `LeadsDeleteUnifiedId$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteUnifiedId$outboundSchema;
  /** @deprecated use `LeadsDeleteUnifiedId$Outbound` instead. */
  export type Outbound = LeadsDeleteUnifiedId$Outbound;
}

export function leadsDeleteUnifiedIdToJSON(
  leadsDeleteUnifiedId: LeadsDeleteUnifiedId,
): string {
  return JSON.stringify(
    LeadsDeleteUnifiedId$outboundSchema.parse(leadsDeleteUnifiedId),
  );
}

export function leadsDeleteUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteUnifiedId' from JSON`,
  );
}

/** @internal */
export const LeadsDeleteResponseBody$inboundSchema: z.ZodType<
  LeadsDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => LeadsDeleteUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type LeadsDeleteResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: LeadsDeleteUnifiedId$Outbound;
};

/** @internal */
export const LeadsDeleteResponseBody$outboundSchema: z.ZodType<
  LeadsDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsDeleteResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => LeadsDeleteUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteResponseBody$ {
  /** @deprecated use `LeadsDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteResponseBody$inboundSchema;
  /** @deprecated use `LeadsDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteResponseBody$outboundSchema;
  /** @deprecated use `LeadsDeleteResponseBody$Outbound` instead. */
  export type Outbound = LeadsDeleteResponseBody$Outbound;
}

export function leadsDeleteResponseBodyToJSON(
  leadsDeleteResponseBody: LeadsDeleteResponseBody,
): string {
  return JSON.stringify(
    LeadsDeleteResponseBody$outboundSchema.parse(leadsDeleteResponseBody),
  );
}

export function leadsDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const LeadsDeleteResponse$inboundSchema: z.ZodType<
  LeadsDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadsDeleteResponseBody$inboundSchema),
  z.lazy(() => LeadsDeleteLeadsResponseBody$inboundSchema),
]);

/** @internal */
export type LeadsDeleteResponse$Outbound =
  | LeadsDeleteResponseBody$Outbound
  | LeadsDeleteLeadsResponseBody$Outbound;

/** @internal */
export const LeadsDeleteResponse$outboundSchema: z.ZodType<
  LeadsDeleteResponse$Outbound,
  z.ZodTypeDef,
  LeadsDeleteResponse
> = z.union([
  z.lazy(() => LeadsDeleteResponseBody$outboundSchema),
  z.lazy(() => LeadsDeleteLeadsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsDeleteResponse$ {
  /** @deprecated use `LeadsDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = LeadsDeleteResponse$inboundSchema;
  /** @deprecated use `LeadsDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = LeadsDeleteResponse$outboundSchema;
  /** @deprecated use `LeadsDeleteResponse$Outbound` instead. */
  export type Outbound = LeadsDeleteResponse$Outbound;
}

export function leadsDeleteResponseToJSON(
  leadsDeleteResponse: LeadsDeleteResponse,
): string {
  return JSON.stringify(
    LeadsDeleteResponse$outboundSchema.parse(leadsDeleteResponse),
  );
}

export function leadsDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<LeadsDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsDeleteResponse' from JSON`,
  );
}
