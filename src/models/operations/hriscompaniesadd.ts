/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisCompaniesAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export const HrisCompaniesAddStatus = {
  Active: "active",
  Inactive: "inactive",
  Trial: "trial",
  Other: "other",
} as const;
export type HrisCompaniesAddStatus = ClosedEnum<typeof HrisCompaniesAddStatus>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisCompaniesAddCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisCompaniesAddCurrency = ClosedEnum<
  typeof HrisCompaniesAddCurrency
>;

/**
 * The type of address.
 */
export const HrisCompaniesAddType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisCompaniesAddType = ClosedEnum<typeof HrisCompaniesAddType>;

export type HrisCompaniesAddAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisCompaniesAddType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const HrisCompaniesAddHrisCompaniesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type HrisCompaniesAddHrisCompaniesType = ClosedEnum<
  typeof HrisCompaniesAddHrisCompaniesType
>;

export type HrisCompaniesAddPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: HrisCompaniesAddHrisCompaniesType | null | undefined;
};

/**
 * Email type
 */
export const HrisCompaniesAddHrisCompaniesRequestType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type HrisCompaniesAddHrisCompaniesRequestType = ClosedEnum<
  typeof HrisCompaniesAddHrisCompaniesRequestType
>;

export type HrisCompaniesAddEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: HrisCompaniesAddHrisCompaniesRequestType | null | undefined;
};

/**
 * The type of website
 */
export const HrisCompaniesAddHrisCompaniesRequestRequestBodyType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type HrisCompaniesAddHrisCompaniesRequestRequestBodyType = ClosedEnum<
  typeof HrisCompaniesAddHrisCompaniesRequestRequestBodyType
>;

export type Websites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: HrisCompaniesAddHrisCompaniesRequestRequestBodyType | null | undefined;
};

export type HrisCompaniesAddExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisCompaniesAddPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisCompaniesAddExtendPaths> | undefined;
};

export type HrisCompaniesAddRequestBody = {
  legalName: string | null;
  displayName?: string | null | undefined;
  subdomain?: string | null | undefined;
  status?: HrisCompaniesAddStatus | undefined;
  /**
   * An Company Number, Company ID or Company Code, is a unique number that has been assigned to each company.
   */
  companyNumber?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisCompaniesAddCurrency | null | undefined;
  addresses?: Array<HrisCompaniesAddAddresses> | undefined;
  phoneNumbers?: Array<HrisCompaniesAddPhoneNumbers> | undefined;
  emails?: Array<HrisCompaniesAddEmails> | undefined;
  websites?: Array<Websites> | undefined;
  debtorId?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisCompaniesAddPassThrough> | undefined;
};

export type HrisCompaniesAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: HrisCompaniesAddRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisCompaniesAddDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisCompaniesAddHrisCompaniesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type HrisCompaniesAddUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Companies
 */
export type HrisCompaniesAddResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisCompaniesAddUnifiedId;
};

export type HrisCompaniesAddResponse =
  | HrisCompaniesAddResponseBody
  | HrisCompaniesAddHrisCompaniesResponseBody;

/** @internal */
export const HrisCompaniesAddGlobals$inboundSchema: z.ZodType<
  HrisCompaniesAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisCompaniesAddGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisCompaniesAddGlobals$outboundSchema: z.ZodType<
  HrisCompaniesAddGlobals$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddGlobals$ {
  /** @deprecated use `HrisCompaniesAddGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddGlobals$inboundSchema;
  /** @deprecated use `HrisCompaniesAddGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddGlobals$outboundSchema;
  /** @deprecated use `HrisCompaniesAddGlobals$Outbound` instead. */
  export type Outbound = HrisCompaniesAddGlobals$Outbound;
}

export function hrisCompaniesAddGlobalsToJSON(
  hrisCompaniesAddGlobals: HrisCompaniesAddGlobals,
): string {
  return JSON.stringify(
    HrisCompaniesAddGlobals$outboundSchema.parse(hrisCompaniesAddGlobals),
  );
}

export function hrisCompaniesAddGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddGlobals' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAddStatus
> = z.nativeEnum(HrisCompaniesAddStatus);

/** @internal */
export const HrisCompaniesAddStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAddStatus
> = HrisCompaniesAddStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddStatus$ {
  /** @deprecated use `HrisCompaniesAddStatus$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddStatus$inboundSchema;
  /** @deprecated use `HrisCompaniesAddStatus$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddStatus$outboundSchema;
}

/** @internal */
export const HrisCompaniesAddCurrency$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAddCurrency
> = z.nativeEnum(HrisCompaniesAddCurrency);

/** @internal */
export const HrisCompaniesAddCurrency$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAddCurrency
> = HrisCompaniesAddCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddCurrency$ {
  /** @deprecated use `HrisCompaniesAddCurrency$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddCurrency$inboundSchema;
  /** @deprecated use `HrisCompaniesAddCurrency$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddCurrency$outboundSchema;
}

/** @internal */
export const HrisCompaniesAddType$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAddType
> = z.nativeEnum(HrisCompaniesAddType);

/** @internal */
export const HrisCompaniesAddType$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAddType
> = HrisCompaniesAddType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddType$ {
  /** @deprecated use `HrisCompaniesAddType$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddType$inboundSchema;
  /** @deprecated use `HrisCompaniesAddType$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddType$outboundSchema;
}

/** @internal */
export const HrisCompaniesAddAddresses$inboundSchema: z.ZodType<
  HrisCompaniesAddAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesAddType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisCompaniesAddAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesAddAddresses$outboundSchema: z.ZodType<
  HrisCompaniesAddAddresses$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesAddType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddAddresses$ {
  /** @deprecated use `HrisCompaniesAddAddresses$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddAddresses$inboundSchema;
  /** @deprecated use `HrisCompaniesAddAddresses$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddAddresses$outboundSchema;
  /** @deprecated use `HrisCompaniesAddAddresses$Outbound` instead. */
  export type Outbound = HrisCompaniesAddAddresses$Outbound;
}

export function hrisCompaniesAddAddressesToJSON(
  hrisCompaniesAddAddresses: HrisCompaniesAddAddresses,
): string {
  return JSON.stringify(
    HrisCompaniesAddAddresses$outboundSchema.parse(hrisCompaniesAddAddresses),
  );
}

export function hrisCompaniesAddAddressesFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddAddresses' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesType$inboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAddHrisCompaniesType
> = z.nativeEnum(HrisCompaniesAddHrisCompaniesType);

/** @internal */
export const HrisCompaniesAddHrisCompaniesType$outboundSchema: z.ZodNativeEnum<
  typeof HrisCompaniesAddHrisCompaniesType
> = HrisCompaniesAddHrisCompaniesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesType$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesType$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddHrisCompaniesType$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesType$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesType$outboundSchema;
}

/** @internal */
export const HrisCompaniesAddPhoneNumbers$inboundSchema: z.ZodType<
  HrisCompaniesAddPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesAddHrisCompaniesType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type HrisCompaniesAddPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesAddPhoneNumbers$outboundSchema: z.ZodType<
  HrisCompaniesAddPhoneNumbers$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(HrisCompaniesAddHrisCompaniesType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddPhoneNumbers$ {
  /** @deprecated use `HrisCompaniesAddPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddPhoneNumbers$inboundSchema;
  /** @deprecated use `HrisCompaniesAddPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddPhoneNumbers$outboundSchema;
  /** @deprecated use `HrisCompaniesAddPhoneNumbers$Outbound` instead. */
  export type Outbound = HrisCompaniesAddPhoneNumbers$Outbound;
}

export function hrisCompaniesAddPhoneNumbersToJSON(
  hrisCompaniesAddPhoneNumbers: HrisCompaniesAddPhoneNumbers,
): string {
  return JSON.stringify(
    HrisCompaniesAddPhoneNumbers$outboundSchema.parse(
      hrisCompaniesAddPhoneNumbers,
    ),
  );
}

export function hrisCompaniesAddPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesRequestType$inboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesAddHrisCompaniesRequestType> = z
    .nativeEnum(HrisCompaniesAddHrisCompaniesRequestType);

/** @internal */
export const HrisCompaniesAddHrisCompaniesRequestType$outboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesAddHrisCompaniesRequestType> =
    HrisCompaniesAddHrisCompaniesRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesRequestType$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesRequestType$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAddHrisCompaniesRequestType$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesRequestType$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesRequestType$outboundSchema;
}

/** @internal */
export const HrisCompaniesAddEmails$inboundSchema: z.ZodType<
  HrisCompaniesAddEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisCompaniesAddHrisCompaniesRequestType$inboundSchema)
    .optional(),
});

/** @internal */
export type HrisCompaniesAddEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const HrisCompaniesAddEmails$outboundSchema: z.ZodType<
  HrisCompaniesAddEmails$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(HrisCompaniesAddHrisCompaniesRequestType$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddEmails$ {
  /** @deprecated use `HrisCompaniesAddEmails$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddEmails$inboundSchema;
  /** @deprecated use `HrisCompaniesAddEmails$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddEmails$outboundSchema;
  /** @deprecated use `HrisCompaniesAddEmails$Outbound` instead. */
  export type Outbound = HrisCompaniesAddEmails$Outbound;
}

export function hrisCompaniesAddEmailsToJSON(
  hrisCompaniesAddEmails: HrisCompaniesAddEmails,
): string {
  return JSON.stringify(
    HrisCompaniesAddEmails$outboundSchema.parse(hrisCompaniesAddEmails),
  );
}

export function hrisCompaniesAddEmailsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddEmails' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesAddHrisCompaniesRequestRequestBodyType> =
    z.nativeEnum(HrisCompaniesAddHrisCompaniesRequestRequestBodyType);

/** @internal */
export const HrisCompaniesAddHrisCompaniesRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof HrisCompaniesAddHrisCompaniesRequestRequestBodyType> =
    HrisCompaniesAddHrisCompaniesRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesRequestRequestBodyType$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAddHrisCompaniesRequestRequestBodyType$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const Websites$inboundSchema: z.ZodType<
  Websites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(
    HrisCompaniesAddHrisCompaniesRequestRequestBodyType$inboundSchema,
  ).optional(),
});

/** @internal */
export type Websites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const Websites$outboundSchema: z.ZodType<
  Websites$Outbound,
  z.ZodTypeDef,
  Websites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(
    HrisCompaniesAddHrisCompaniesRequestRequestBodyType$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Websites$ {
  /** @deprecated use `Websites$inboundSchema` instead. */
  export const inboundSchema = Websites$inboundSchema;
  /** @deprecated use `Websites$outboundSchema` instead. */
  export const outboundSchema = Websites$outboundSchema;
  /** @deprecated use `Websites$Outbound` instead. */
  export type Outbound = Websites$Outbound;
}

export function websitesToJSON(websites: Websites): string {
  return JSON.stringify(Websites$outboundSchema.parse(websites));
}

export function websitesFromJSON(
  jsonString: string,
): SafeParseResult<Websites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Websites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Websites' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddExtendPaths$inboundSchema: z.ZodType<
  HrisCompaniesAddExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisCompaniesAddExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisCompaniesAddExtendPaths$outboundSchema: z.ZodType<
  HrisCompaniesAddExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddExtendPaths$ {
  /** @deprecated use `HrisCompaniesAddExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddExtendPaths$inboundSchema;
  /** @deprecated use `HrisCompaniesAddExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddExtendPaths$outboundSchema;
  /** @deprecated use `HrisCompaniesAddExtendPaths$Outbound` instead. */
  export type Outbound = HrisCompaniesAddExtendPaths$Outbound;
}

export function hrisCompaniesAddExtendPathsToJSON(
  hrisCompaniesAddExtendPaths: HrisCompaniesAddExtendPaths,
): string {
  return JSON.stringify(
    HrisCompaniesAddExtendPaths$outboundSchema.parse(
      hrisCompaniesAddExtendPaths,
    ),
  );
}

export function hrisCompaniesAddExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddPassThrough$inboundSchema: z.ZodType<
  HrisCompaniesAddPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => HrisCompaniesAddExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisCompaniesAddPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisCompaniesAddExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisCompaniesAddPassThrough$outboundSchema: z.ZodType<
  HrisCompaniesAddPassThrough$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => HrisCompaniesAddExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddPassThrough$ {
  /** @deprecated use `HrisCompaniesAddPassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddPassThrough$inboundSchema;
  /** @deprecated use `HrisCompaniesAddPassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddPassThrough$outboundSchema;
  /** @deprecated use `HrisCompaniesAddPassThrough$Outbound` instead. */
  export type Outbound = HrisCompaniesAddPassThrough$Outbound;
}

export function hrisCompaniesAddPassThroughToJSON(
  hrisCompaniesAddPassThrough: HrisCompaniesAddPassThrough,
): string {
  return JSON.stringify(
    HrisCompaniesAddPassThrough$outboundSchema.parse(
      hrisCompaniesAddPassThrough,
    ),
  );
}

export function hrisCompaniesAddPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddPassThrough' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddRequestBody$inboundSchema: z.ZodType<
  HrisCompaniesAddRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  legal_name: z.nullable(z.string()),
  display_name: z.nullable(z.string()).optional(),
  subdomain: z.nullable(z.string()).optional(),
  status: HrisCompaniesAddStatus$inboundSchema.optional(),
  company_number: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisCompaniesAddCurrency$inboundSchema).optional(),
  addresses: z.array(z.lazy(() => HrisCompaniesAddAddresses$inboundSchema))
    .optional(),
  phone_numbers: z.array(
    z.lazy(() => HrisCompaniesAddPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisCompaniesAddEmails$inboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => Websites$inboundSchema)).optional(),
  debtor_id: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => HrisCompaniesAddPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "legal_name": "legalName",
    "display_name": "displayName",
    "company_number": "companyNumber",
    "phone_numbers": "phoneNumbers",
    "debtor_id": "debtorId",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisCompaniesAddRequestBody$Outbound = {
  legal_name: string | null;
  display_name?: string | null | undefined;
  subdomain?: string | null | undefined;
  status?: string | undefined;
  company_number?: string | null | undefined;
  currency?: string | null | undefined;
  addresses?: Array<HrisCompaniesAddAddresses$Outbound> | undefined;
  phone_numbers?: Array<HrisCompaniesAddPhoneNumbers$Outbound> | undefined;
  emails?: Array<HrisCompaniesAddEmails$Outbound> | undefined;
  websites?: Array<Websites$Outbound> | undefined;
  debtor_id?: string | null | undefined;
  pass_through?: Array<HrisCompaniesAddPassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisCompaniesAddRequestBody$outboundSchema: z.ZodType<
  HrisCompaniesAddRequestBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddRequestBody
> = z.object({
  legalName: z.nullable(z.string()),
  displayName: z.nullable(z.string()).optional(),
  subdomain: z.nullable(z.string()).optional(),
  status: HrisCompaniesAddStatus$outboundSchema.optional(),
  companyNumber: z.nullable(z.string()).optional(),
  currency: z.nullable(HrisCompaniesAddCurrency$outboundSchema).optional(),
  addresses: z.array(z.lazy(() => HrisCompaniesAddAddresses$outboundSchema))
    .optional(),
  phoneNumbers: z.array(
    z.lazy(() => HrisCompaniesAddPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisCompaniesAddEmails$outboundSchema))
    .optional(),
  websites: z.array(z.lazy(() => Websites$outboundSchema)).optional(),
  debtorId: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => HrisCompaniesAddPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    legalName: "legal_name",
    displayName: "display_name",
    companyNumber: "company_number",
    phoneNumbers: "phone_numbers",
    debtorId: "debtor_id",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddRequestBody$ {
  /** @deprecated use `HrisCompaniesAddRequestBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddRequestBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAddRequestBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddRequestBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAddRequestBody$Outbound` instead. */
  export type Outbound = HrisCompaniesAddRequestBody$Outbound;
}

export function hrisCompaniesAddRequestBodyToJSON(
  hrisCompaniesAddRequestBody: HrisCompaniesAddRequestBody,
): string {
  return JSON.stringify(
    HrisCompaniesAddRequestBody$outboundSchema.parse(
      hrisCompaniesAddRequestBody,
    ),
  );
}

export function hrisCompaniesAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddRequestBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddRequest$inboundSchema: z.ZodType<
  HrisCompaniesAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => HrisCompaniesAddRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type HrisCompaniesAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  RequestBody: HrisCompaniesAddRequestBody$Outbound;
};

/** @internal */
export const HrisCompaniesAddRequest$outboundSchema: z.ZodType<
  HrisCompaniesAddRequest$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => HrisCompaniesAddRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddRequest$ {
  /** @deprecated use `HrisCompaniesAddRequest$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddRequest$inboundSchema;
  /** @deprecated use `HrisCompaniesAddRequest$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddRequest$outboundSchema;
  /** @deprecated use `HrisCompaniesAddRequest$Outbound` instead. */
  export type Outbound = HrisCompaniesAddRequest$Outbound;
}

export function hrisCompaniesAddRequestToJSON(
  hrisCompaniesAddRequest: HrisCompaniesAddRequest,
): string {
  return JSON.stringify(
    HrisCompaniesAddRequest$outboundSchema.parse(hrisCompaniesAddRequest),
  );
}

export function hrisCompaniesAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddRequest' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddDetail$inboundSchema: z.ZodType<
  HrisCompaniesAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisCompaniesAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisCompaniesAddDetail$outboundSchema: z.ZodType<
  HrisCompaniesAddDetail$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddDetail$ {
  /** @deprecated use `HrisCompaniesAddDetail$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddDetail$inboundSchema;
  /** @deprecated use `HrisCompaniesAddDetail$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddDetail$outboundSchema;
  /** @deprecated use `HrisCompaniesAddDetail$Outbound` instead. */
  export type Outbound = HrisCompaniesAddDetail$Outbound;
}

export function hrisCompaniesAddDetailToJSON(
  hrisCompaniesAddDetail: HrisCompaniesAddDetail,
): string {
  return JSON.stringify(
    HrisCompaniesAddDetail$outboundSchema.parse(hrisCompaniesAddDetail),
  );
}

export function hrisCompaniesAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddDetail' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesAddHrisCompaniesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type HrisCompaniesAddHrisCompaniesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisCompaniesAddHrisCompaniesResponseBody$outboundSchema:
  z.ZodType<
    HrisCompaniesAddHrisCompaniesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisCompaniesAddHrisCompaniesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddHrisCompaniesResponseBody$ {
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisCompaniesAddHrisCompaniesResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisCompaniesAddHrisCompaniesResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAddHrisCompaniesResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesAddHrisCompaniesResponseBody$Outbound;
}

export function hrisCompaniesAddHrisCompaniesResponseBodyToJSON(
  hrisCompaniesAddHrisCompaniesResponseBody:
    HrisCompaniesAddHrisCompaniesResponseBody,
): string {
  return JSON.stringify(
    HrisCompaniesAddHrisCompaniesResponseBody$outboundSchema.parse(
      hrisCompaniesAddHrisCompaniesResponseBody,
    ),
  );
}

export function hrisCompaniesAddHrisCompaniesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisCompaniesAddHrisCompaniesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisCompaniesAddHrisCompaniesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisCompaniesAddHrisCompaniesResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddUnifiedId$inboundSchema: z.ZodType<
  HrisCompaniesAddUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type HrisCompaniesAddUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const HrisCompaniesAddUnifiedId$outboundSchema: z.ZodType<
  HrisCompaniesAddUnifiedId$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddUnifiedId$ {
  /** @deprecated use `HrisCompaniesAddUnifiedId$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddUnifiedId$inboundSchema;
  /** @deprecated use `HrisCompaniesAddUnifiedId$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddUnifiedId$outboundSchema;
  /** @deprecated use `HrisCompaniesAddUnifiedId$Outbound` instead. */
  export type Outbound = HrisCompaniesAddUnifiedId$Outbound;
}

export function hrisCompaniesAddUnifiedIdToJSON(
  hrisCompaniesAddUnifiedId: HrisCompaniesAddUnifiedId,
): string {
  return JSON.stringify(
    HrisCompaniesAddUnifiedId$outboundSchema.parse(hrisCompaniesAddUnifiedId),
  );
}

export function hrisCompaniesAddUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddUnifiedId' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddResponseBody$inboundSchema: z.ZodType<
  HrisCompaniesAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisCompaniesAddUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisCompaniesAddResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisCompaniesAddUnifiedId$Outbound;
};

/** @internal */
export const HrisCompaniesAddResponseBody$outboundSchema: z.ZodType<
  HrisCompaniesAddResponseBody$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisCompaniesAddUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddResponseBody$ {
  /** @deprecated use `HrisCompaniesAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddResponseBody$inboundSchema;
  /** @deprecated use `HrisCompaniesAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddResponseBody$outboundSchema;
  /** @deprecated use `HrisCompaniesAddResponseBody$Outbound` instead. */
  export type Outbound = HrisCompaniesAddResponseBody$Outbound;
}

export function hrisCompaniesAddResponseBodyToJSON(
  hrisCompaniesAddResponseBody: HrisCompaniesAddResponseBody,
): string {
  return JSON.stringify(
    HrisCompaniesAddResponseBody$outboundSchema.parse(
      hrisCompaniesAddResponseBody,
    ),
  );
}

export function hrisCompaniesAddResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisCompaniesAddResponse$inboundSchema: z.ZodType<
  HrisCompaniesAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisCompaniesAddResponseBody$inboundSchema),
  z.lazy(() => HrisCompaniesAddHrisCompaniesResponseBody$inboundSchema),
]);

/** @internal */
export type HrisCompaniesAddResponse$Outbound =
  | HrisCompaniesAddResponseBody$Outbound
  | HrisCompaniesAddHrisCompaniesResponseBody$Outbound;

/** @internal */
export const HrisCompaniesAddResponse$outboundSchema: z.ZodType<
  HrisCompaniesAddResponse$Outbound,
  z.ZodTypeDef,
  HrisCompaniesAddResponse
> = z.union([
  z.lazy(() => HrisCompaniesAddResponseBody$outboundSchema),
  z.lazy(() => HrisCompaniesAddHrisCompaniesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompaniesAddResponse$ {
  /** @deprecated use `HrisCompaniesAddResponse$inboundSchema` instead. */
  export const inboundSchema = HrisCompaniesAddResponse$inboundSchema;
  /** @deprecated use `HrisCompaniesAddResponse$outboundSchema` instead. */
  export const outboundSchema = HrisCompaniesAddResponse$outboundSchema;
  /** @deprecated use `HrisCompaniesAddResponse$Outbound` instead. */
  export type Outbound = HrisCompaniesAddResponse$Outbound;
}

export function hrisCompaniesAddResponseToJSON(
  hrisCompaniesAddResponse: HrisCompaniesAddResponse,
): string {
  return JSON.stringify(
    HrisCompaniesAddResponse$outboundSchema.parse(hrisCompaniesAddResponse),
  );
}

export function hrisCompaniesAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompaniesAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompaniesAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompaniesAddResponse' from JSON`,
  );
}
