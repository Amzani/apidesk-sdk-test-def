/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsersDeleteSecurity = {
  apiKey: string;
};

export type UsersDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type UsersDeleteDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type UsersDeleteUsersResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type UsersDeleteUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * User deleted
 */
export type UsersDeleteResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: UsersDeleteUnifiedId;
};

export type UsersDeleteResponse =
  | UsersDeleteResponseBody
  | UsersDeleteUsersResponseBody;

/** @internal */
export const UsersDeleteSecurity$inboundSchema: z.ZodType<
  UsersDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type UsersDeleteSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const UsersDeleteSecurity$outboundSchema: z.ZodType<
  UsersDeleteSecurity$Outbound,
  z.ZodTypeDef,
  UsersDeleteSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteSecurity$ {
  /** @deprecated use `UsersDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteSecurity$inboundSchema;
  /** @deprecated use `UsersDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteSecurity$outboundSchema;
  /** @deprecated use `UsersDeleteSecurity$Outbound` instead. */
  export type Outbound = UsersDeleteSecurity$Outbound;
}

export function usersDeleteSecurityToJSON(
  usersDeleteSecurity: UsersDeleteSecurity,
): string {
  return JSON.stringify(
    UsersDeleteSecurity$outboundSchema.parse(usersDeleteSecurity),
  );
}

export function usersDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const UsersDeleteRequest$inboundSchema: z.ZodType<
  UsersDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type UsersDeleteRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const UsersDeleteRequest$outboundSchema: z.ZodType<
  UsersDeleteRequest$Outbound,
  z.ZodTypeDef,
  UsersDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteRequest$ {
  /** @deprecated use `UsersDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteRequest$inboundSchema;
  /** @deprecated use `UsersDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteRequest$outboundSchema;
  /** @deprecated use `UsersDeleteRequest$Outbound` instead. */
  export type Outbound = UsersDeleteRequest$Outbound;
}

export function usersDeleteRequestToJSON(
  usersDeleteRequest: UsersDeleteRequest,
): string {
  return JSON.stringify(
    UsersDeleteRequest$outboundSchema.parse(usersDeleteRequest),
  );
}

export function usersDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteRequest' from JSON`,
  );
}

/** @internal */
export const UsersDeleteDetail$inboundSchema: z.ZodType<
  UsersDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type UsersDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const UsersDeleteDetail$outboundSchema: z.ZodType<
  UsersDeleteDetail$Outbound,
  z.ZodTypeDef,
  UsersDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteDetail$ {
  /** @deprecated use `UsersDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteDetail$inboundSchema;
  /** @deprecated use `UsersDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteDetail$outboundSchema;
  /** @deprecated use `UsersDeleteDetail$Outbound` instead. */
  export type Outbound = UsersDeleteDetail$Outbound;
}

export function usersDeleteDetailToJSON(
  usersDeleteDetail: UsersDeleteDetail,
): string {
  return JSON.stringify(
    UsersDeleteDetail$outboundSchema.parse(usersDeleteDetail),
  );
}

export function usersDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteDetail' from JSON`,
  );
}

/** @internal */
export const UsersDeleteUsersResponseBody$inboundSchema: z.ZodType<
  UsersDeleteUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type UsersDeleteUsersResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const UsersDeleteUsersResponseBody$outboundSchema: z.ZodType<
  UsersDeleteUsersResponseBody$Outbound,
  z.ZodTypeDef,
  UsersDeleteUsersResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteUsersResponseBody$ {
  /** @deprecated use `UsersDeleteUsersResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteUsersResponseBody$inboundSchema;
  /** @deprecated use `UsersDeleteUsersResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteUsersResponseBody$outboundSchema;
  /** @deprecated use `UsersDeleteUsersResponseBody$Outbound` instead. */
  export type Outbound = UsersDeleteUsersResponseBody$Outbound;
}

export function usersDeleteUsersResponseBodyToJSON(
  usersDeleteUsersResponseBody: UsersDeleteUsersResponseBody,
): string {
  return JSON.stringify(
    UsersDeleteUsersResponseBody$outboundSchema.parse(
      usersDeleteUsersResponseBody,
    ),
  );
}

export function usersDeleteUsersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteUsersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteUsersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteUsersResponseBody' from JSON`,
  );
}

/** @internal */
export const UsersDeleteUnifiedId$inboundSchema: z.ZodType<
  UsersDeleteUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UsersDeleteUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const UsersDeleteUnifiedId$outboundSchema: z.ZodType<
  UsersDeleteUnifiedId$Outbound,
  z.ZodTypeDef,
  UsersDeleteUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteUnifiedId$ {
  /** @deprecated use `UsersDeleteUnifiedId$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteUnifiedId$inboundSchema;
  /** @deprecated use `UsersDeleteUnifiedId$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteUnifiedId$outboundSchema;
  /** @deprecated use `UsersDeleteUnifiedId$Outbound` instead. */
  export type Outbound = UsersDeleteUnifiedId$Outbound;
}

export function usersDeleteUnifiedIdToJSON(
  usersDeleteUnifiedId: UsersDeleteUnifiedId,
): string {
  return JSON.stringify(
    UsersDeleteUnifiedId$outboundSchema.parse(usersDeleteUnifiedId),
  );
}

export function usersDeleteUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteUnifiedId' from JSON`,
  );
}

/** @internal */
export const UsersDeleteResponseBody$inboundSchema: z.ZodType<
  UsersDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UsersDeleteUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type UsersDeleteResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: UsersDeleteUnifiedId$Outbound;
};

/** @internal */
export const UsersDeleteResponseBody$outboundSchema: z.ZodType<
  UsersDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  UsersDeleteResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => UsersDeleteUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteResponseBody$ {
  /** @deprecated use `UsersDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteResponseBody$inboundSchema;
  /** @deprecated use `UsersDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteResponseBody$outboundSchema;
  /** @deprecated use `UsersDeleteResponseBody$Outbound` instead. */
  export type Outbound = UsersDeleteResponseBody$Outbound;
}

export function usersDeleteResponseBodyToJSON(
  usersDeleteResponseBody: UsersDeleteResponseBody,
): string {
  return JSON.stringify(
    UsersDeleteResponseBody$outboundSchema.parse(usersDeleteResponseBody),
  );
}

export function usersDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const UsersDeleteResponse$inboundSchema: z.ZodType<
  UsersDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UsersDeleteResponseBody$inboundSchema),
  z.lazy(() => UsersDeleteUsersResponseBody$inboundSchema),
]);

/** @internal */
export type UsersDeleteResponse$Outbound =
  | UsersDeleteResponseBody$Outbound
  | UsersDeleteUsersResponseBody$Outbound;

/** @internal */
export const UsersDeleteResponse$outboundSchema: z.ZodType<
  UsersDeleteResponse$Outbound,
  z.ZodTypeDef,
  UsersDeleteResponse
> = z.union([
  z.lazy(() => UsersDeleteResponseBody$outboundSchema),
  z.lazy(() => UsersDeleteUsersResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersDeleteResponse$ {
  /** @deprecated use `UsersDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = UsersDeleteResponse$inboundSchema;
  /** @deprecated use `UsersDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = UsersDeleteResponse$outboundSchema;
  /** @deprecated use `UsersDeleteResponse$Outbound` instead. */
  export type Outbound = UsersDeleteResponse$Outbound;
}

export function usersDeleteResponseToJSON(
  usersDeleteResponse: UsersDeleteResponse,
): string {
  return JSON.stringify(
    UsersDeleteResponse$outboundSchema.parse(usersDeleteResponse),
  );
}

export function usersDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsersDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersDeleteResponse' from JSON`,
  );
}
