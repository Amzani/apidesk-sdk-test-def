/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisTimeOffRequestsUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

/**
 * The status of the time off request.
 */
export const HrisTimeOffRequestsUpdateStatus = {
  Requested: "requested",
  Approved: "approved",
  Declined: "declined",
  Cancelled: "cancelled",
  Deleted: "deleted",
  Other: "other",
} as const;
/**
 * The status of the time off request.
 */
export type HrisTimeOffRequestsUpdateStatus = ClosedEnum<
  typeof HrisTimeOffRequestsUpdateStatus
>;

/**
 * The type of request
 */
export const HrisTimeOffRequestsUpdateRequestType = {
  Vacation: "vacation",
  Sick: "sick",
  Personal: "personal",
  JuryDuty: "jury_duty",
  Volunteer: "volunteer",
  Bereavement: "bereavement",
  Other: "other",
} as const;
/**
 * The type of request
 */
export type HrisTimeOffRequestsUpdateRequestType = ClosedEnum<
  typeof HrisTimeOffRequestsUpdateRequestType
>;

/**
 * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
 */
export const HrisTimeOffRequestsUpdateUnits = {
  Days: "days",
  Hours: "hours",
  Other: "other",
} as const;
/**
 * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
 */
export type HrisTimeOffRequestsUpdateUnits = ClosedEnum<
  typeof HrisTimeOffRequestsUpdateUnits
>;

export type HrisTimeOffRequestsUpdateNotes = {
  employee?: string | null | undefined;
  manager?: string | null | undefined;
};

export type HrisTimeOffRequestsUpdateExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisTimeOffRequestsUpdatePassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisTimeOffRequestsUpdateExtendPaths> | undefined;
};

export type HrisTimeOffRequestsUpdateRequestBody = {
  /**
   * ID of the employee
   */
  employeeId?: string | null | undefined;
  /**
   * ID of the policy
   */
  policyId?: string | null | undefined;
  /**
   * The status of the time off request.
   */
  status?: HrisTimeOffRequestsUpdateStatus | null | undefined;
  /**
   * Description of the time off request.
   */
  description?: string | null | undefined;
  /**
   * The start date of the time off request.
   */
  startDate?: string | null | undefined;
  /**
   * The end date of the time off request.
   */
  endDate?: string | null | undefined;
  /**
   * The date the request was made.
   */
  requestDate?: string | null | undefined;
  /**
   * The type of request
   */
  requestType?: HrisTimeOffRequestsUpdateRequestType | null | undefined;
  /**
   * The date the request was approved
   */
  approvalDate?: string | null | undefined;
  /**
   * The unit of time off requested. Possible values include: `hours`, `days`, or `other`.
   */
  units?: HrisTimeOffRequestsUpdateUnits | null | undefined;
  /**
   * The amount of time off requested.
   */
  amount?: number | null | undefined;
  /**
   * The day part of the time off request.
   */
  dayPart?: string | null | undefined;
  notes?: HrisTimeOffRequestsUpdateNotes | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisTimeOffRequestsUpdatePassThrough> | undefined;
  /**
   * The policy type of the time off request
   */
  policyType?: string | undefined;
};

export type HrisTimeOffRequestsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the employee you are acting upon.
   */
  employeeId: string;
  requestBody: HrisTimeOffRequestsUpdateRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisTimeOffRequestsUpdateDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type HrisTimeOffRequestsUpdateUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * TimeOffRequests
 */
export type HrisTimeOffRequestsUpdateResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisTimeOffRequestsUpdateUnifiedId;
};

export type HrisTimeOffRequestsUpdateResponse =
  | HrisTimeOffRequestsUpdateResponseBody
  | HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody;

/** @internal */
export const HrisTimeOffRequestsUpdateGlobals$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisTimeOffRequestsUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisTimeOffRequestsUpdateGlobals$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateGlobals$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateGlobals$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsUpdateGlobals$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsUpdateGlobals$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateGlobals$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateGlobals$Outbound;
}

export function hrisTimeOffRequestsUpdateGlobalsToJSON(
  hrisTimeOffRequestsUpdateGlobals: HrisTimeOffRequestsUpdateGlobals,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateGlobals$outboundSchema.parse(
      hrisTimeOffRequestsUpdateGlobals,
    ),
  );
}

export function hrisTimeOffRequestsUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsUpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisTimeOffRequestsUpdateStatus
> = z.nativeEnum(HrisTimeOffRequestsUpdateStatus);

/** @internal */
export const HrisTimeOffRequestsUpdateStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisTimeOffRequestsUpdateStatus
> = HrisTimeOffRequestsUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateStatus$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateStatus$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsUpdateStatus$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateStatus$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsUpdateStatus$outboundSchema;
}

/** @internal */
export const HrisTimeOffRequestsUpdateRequestType$inboundSchema:
  z.ZodNativeEnum<typeof HrisTimeOffRequestsUpdateRequestType> = z.nativeEnum(
    HrisTimeOffRequestsUpdateRequestType,
  );

/** @internal */
export const HrisTimeOffRequestsUpdateRequestType$outboundSchema:
  z.ZodNativeEnum<typeof HrisTimeOffRequestsUpdateRequestType> =
    HrisTimeOffRequestsUpdateRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateRequestType$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateRequestType$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateRequestType$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateRequestType$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateRequestType$outboundSchema;
}

/** @internal */
export const HrisTimeOffRequestsUpdateUnits$inboundSchema: z.ZodNativeEnum<
  typeof HrisTimeOffRequestsUpdateUnits
> = z.nativeEnum(HrisTimeOffRequestsUpdateUnits);

/** @internal */
export const HrisTimeOffRequestsUpdateUnits$outboundSchema: z.ZodNativeEnum<
  typeof HrisTimeOffRequestsUpdateUnits
> = HrisTimeOffRequestsUpdateUnits$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateUnits$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateUnits$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsUpdateUnits$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateUnits$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsUpdateUnits$outboundSchema;
}

/** @internal */
export const HrisTimeOffRequestsUpdateNotes$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateNotes,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee: z.nullable(z.string()).optional(),
  manager: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisTimeOffRequestsUpdateNotes$Outbound = {
  employee?: string | null | undefined;
  manager?: string | null | undefined;
};

/** @internal */
export const HrisTimeOffRequestsUpdateNotes$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateNotes$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateNotes
> = z.object({
  employee: z.nullable(z.string()).optional(),
  manager: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateNotes$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateNotes$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsUpdateNotes$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateNotes$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsUpdateNotes$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateNotes$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateNotes$Outbound;
}

export function hrisTimeOffRequestsUpdateNotesToJSON(
  hrisTimeOffRequestsUpdateNotes: HrisTimeOffRequestsUpdateNotes,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateNotes$outboundSchema.parse(
      hrisTimeOffRequestsUpdateNotes,
    ),
  );
}

export function hrisTimeOffRequestsUpdateNotesFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdateNotes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsUpdateNotes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateNotes' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateExtendPaths$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisTimeOffRequestsUpdateExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisTimeOffRequestsUpdateExtendPaths$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateExtendPaths$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateExtendPaths$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateExtendPaths$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateExtendPaths$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateExtendPaths$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateExtendPaths$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateExtendPaths$Outbound;
}

export function hrisTimeOffRequestsUpdateExtendPathsToJSON(
  hrisTimeOffRequestsUpdateExtendPaths: HrisTimeOffRequestsUpdateExtendPaths,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateExtendPaths$outboundSchema.parse(
      hrisTimeOffRequestsUpdateExtendPaths,
    ),
  );
}

export function hrisTimeOffRequestsUpdateExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdateExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsUpdateExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdatePassThrough$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdatePassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => HrisTimeOffRequestsUpdateExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisTimeOffRequestsUpdatePassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?:
    | Array<HrisTimeOffRequestsUpdateExtendPaths$Outbound>
    | undefined;
};

/** @internal */
export const HrisTimeOffRequestsUpdatePassThrough$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdatePassThrough$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdatePassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => HrisTimeOffRequestsUpdateExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdatePassThrough$ {
  /** @deprecated use `HrisTimeOffRequestsUpdatePassThrough$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdatePassThrough$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdatePassThrough$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdatePassThrough$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdatePassThrough$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdatePassThrough$Outbound;
}

export function hrisTimeOffRequestsUpdatePassThroughToJSON(
  hrisTimeOffRequestsUpdatePassThrough: HrisTimeOffRequestsUpdatePassThrough,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdatePassThrough$outboundSchema.parse(
      hrisTimeOffRequestsUpdatePassThrough,
    ),
  );
}

export function hrisTimeOffRequestsUpdatePassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdatePassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsUpdatePassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdatePassThrough' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateRequestBody$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.nullable(z.string()).optional(),
  policy_id: z.nullable(z.string()).optional(),
  status: z.nullable(HrisTimeOffRequestsUpdateStatus$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  start_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
  request_date: z.nullable(z.string()).optional(),
  request_type: z.nullable(HrisTimeOffRequestsUpdateRequestType$inboundSchema)
    .optional(),
  approval_date: z.nullable(z.string()).optional(),
  units: z.nullable(HrisTimeOffRequestsUpdateUnits$inboundSchema).optional(),
  amount: z.nullable(z.number()).optional(),
  day_part: z.nullable(z.string()).optional(),
  notes: z.lazy(() => HrisTimeOffRequestsUpdateNotes$inboundSchema).optional(),
  pass_through: z.array(
    z.lazy(() => HrisTimeOffRequestsUpdatePassThrough$inboundSchema),
  ).optional(),
  policy_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "policy_id": "policyId",
    "start_date": "startDate",
    "end_date": "endDate",
    "request_date": "requestDate",
    "request_type": "requestType",
    "approval_date": "approvalDate",
    "day_part": "dayPart",
    "pass_through": "passThrough",
    "policy_type": "policyType",
  });
});

/** @internal */
export type HrisTimeOffRequestsUpdateRequestBody$Outbound = {
  employee_id?: string | null | undefined;
  policy_id?: string | null | undefined;
  status?: string | null | undefined;
  description?: string | null | undefined;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  request_date?: string | null | undefined;
  request_type?: string | null | undefined;
  approval_date?: string | null | undefined;
  units?: string | null | undefined;
  amount?: number | null | undefined;
  day_part?: string | null | undefined;
  notes?: HrisTimeOffRequestsUpdateNotes$Outbound | undefined;
  pass_through?:
    | Array<HrisTimeOffRequestsUpdatePassThrough$Outbound>
    | undefined;
  policy_type?: string | undefined;
};

/** @internal */
export const HrisTimeOffRequestsUpdateRequestBody$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateRequestBody$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateRequestBody
> = z.object({
  employeeId: z.nullable(z.string()).optional(),
  policyId: z.nullable(z.string()).optional(),
  status: z.nullable(HrisTimeOffRequestsUpdateStatus$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
  requestDate: z.nullable(z.string()).optional(),
  requestType: z.nullable(HrisTimeOffRequestsUpdateRequestType$outboundSchema)
    .optional(),
  approvalDate: z.nullable(z.string()).optional(),
  units: z.nullable(HrisTimeOffRequestsUpdateUnits$outboundSchema).optional(),
  amount: z.nullable(z.number()).optional(),
  dayPart: z.nullable(z.string()).optional(),
  notes: z.lazy(() => HrisTimeOffRequestsUpdateNotes$outboundSchema).optional(),
  passThrough: z.array(
    z.lazy(() => HrisTimeOffRequestsUpdatePassThrough$outboundSchema),
  ).optional(),
  policyType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    policyId: "policy_id",
    startDate: "start_date",
    endDate: "end_date",
    requestDate: "request_date",
    requestType: "request_type",
    approvalDate: "approval_date",
    dayPart: "day_part",
    passThrough: "pass_through",
    policyType: "policy_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateRequestBody$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateRequestBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateRequestBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateRequestBody$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateRequestBody$Outbound;
}

export function hrisTimeOffRequestsUpdateRequestBodyToJSON(
  hrisTimeOffRequestsUpdateRequestBody: HrisTimeOffRequestsUpdateRequestBody,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateRequestBody$outboundSchema.parse(
      hrisTimeOffRequestsUpdateRequestBody,
    ),
  );
}

export function hrisTimeOffRequestsUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsUpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateRequest$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  employee_id: z.string(),
  RequestBody: z.lazy(() => HrisTimeOffRequestsUpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type HrisTimeOffRequestsUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  employee_id: string;
  RequestBody: HrisTimeOffRequestsUpdateRequestBody$Outbound;
};

/** @internal */
export const HrisTimeOffRequestsUpdateRequest$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateRequest$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  employeeId: z.string(),
  requestBody: z.lazy(() =>
    HrisTimeOffRequestsUpdateRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateRequest$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsUpdateRequest$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsUpdateRequest$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateRequest$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateRequest$Outbound;
}

export function hrisTimeOffRequestsUpdateRequestToJSON(
  hrisTimeOffRequestsUpdateRequest: HrisTimeOffRequestsUpdateRequest,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateRequest$outboundSchema.parse(
      hrisTimeOffRequestsUpdateRequest,
    ),
  );
}

export function hrisTimeOffRequestsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateDetail$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisTimeOffRequestsUpdateDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisTimeOffRequestsUpdateDetail$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateDetail$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateDetail$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateDetail$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsUpdateDetail$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateDetail$outboundSchema` instead. */
  export const outboundSchema = HrisTimeOffRequestsUpdateDetail$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateDetail$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateDetail$Outbound;
}

export function hrisTimeOffRequestsUpdateDetailToJSON(
  hrisTimeOffRequestsUpdateDetail: HrisTimeOffRequestsUpdateDetail,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateDetail$outboundSchema.parse(
      hrisTimeOffRequestsUpdateDetail,
    ),
  );
}

export function hrisTimeOffRequestsUpdateDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdateDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsUpdateDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateDetail' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$inboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$outboundSchema:
  z.ZodType<
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$Outbound` instead. */
  export type Outbound =
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$Outbound;
}

export function hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBodyToJSON(
  hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody:
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$outboundSchema
      .parse(hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody),
  );
}

export function hrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateUnifiedId$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type HrisTimeOffRequestsUpdateUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const HrisTimeOffRequestsUpdateUnifiedId$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateUnifiedId$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateUnifiedId$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateUnifiedId$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsUpdateUnifiedId$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateUnifiedId$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateUnifiedId$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateUnifiedId$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateUnifiedId$Outbound;
}

export function hrisTimeOffRequestsUpdateUnifiedIdToJSON(
  hrisTimeOffRequestsUpdateUnifiedId: HrisTimeOffRequestsUpdateUnifiedId,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateUnifiedId$outboundSchema.parse(
      hrisTimeOffRequestsUpdateUnifiedId,
    ),
  );
}

export function hrisTimeOffRequestsUpdateUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdateUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsUpdateUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateUnifiedId' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateResponseBody$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisTimeOffRequestsUpdateUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisTimeOffRequestsUpdateResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisTimeOffRequestsUpdateUnifiedId$Outbound;
};

/** @internal */
export const HrisTimeOffRequestsUpdateResponseBody$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateResponseBody$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisTimeOffRequestsUpdateUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateResponseBody$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisTimeOffRequestsUpdateResponseBody$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateResponseBody$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateResponseBody$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateResponseBody$Outbound;
}

export function hrisTimeOffRequestsUpdateResponseBodyToJSON(
  hrisTimeOffRequestsUpdateResponseBody: HrisTimeOffRequestsUpdateResponseBody,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateResponseBody$outboundSchema.parse(
      hrisTimeOffRequestsUpdateResponseBody,
    ),
  );
}

export function hrisTimeOffRequestsUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisTimeOffRequestsUpdateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisTimeOffRequestsUpdateResponse$inboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisTimeOffRequestsUpdateResponseBody$inboundSchema),
  z.lazy(() =>
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$inboundSchema
  ),
]);

/** @internal */
export type HrisTimeOffRequestsUpdateResponse$Outbound =
  | HrisTimeOffRequestsUpdateResponseBody$Outbound
  | HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$Outbound;

/** @internal */
export const HrisTimeOffRequestsUpdateResponse$outboundSchema: z.ZodType<
  HrisTimeOffRequestsUpdateResponse$Outbound,
  z.ZodTypeDef,
  HrisTimeOffRequestsUpdateResponse
> = z.union([
  z.lazy(() => HrisTimeOffRequestsUpdateResponseBody$outboundSchema),
  z.lazy(() =>
    HrisTimeOffRequestsUpdateHrisTimeOffRequestsResponseBody$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisTimeOffRequestsUpdateResponse$ {
  /** @deprecated use `HrisTimeOffRequestsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = HrisTimeOffRequestsUpdateResponse$inboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    HrisTimeOffRequestsUpdateResponse$outboundSchema;
  /** @deprecated use `HrisTimeOffRequestsUpdateResponse$Outbound` instead. */
  export type Outbound = HrisTimeOffRequestsUpdateResponse$Outbound;
}

export function hrisTimeOffRequestsUpdateResponseToJSON(
  hrisTimeOffRequestsUpdateResponse: HrisTimeOffRequestsUpdateResponse,
): string {
  return JSON.stringify(
    HrisTimeOffRequestsUpdateResponse$outboundSchema.parse(
      hrisTimeOffRequestsUpdateResponse,
    ),
  );
}

export function hrisTimeOffRequestsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisTimeOffRequestsUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisTimeOffRequestsUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisTimeOffRequestsUpdateResponse' from JSON`,
  );
}
