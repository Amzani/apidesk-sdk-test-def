/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisDepartmentsAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisDepartmentsAddExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisDepartmentsAddPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisDepartmentsAddExtendPaths> | undefined;
};

export type HrisDepartmentsAddRequestBody = {
  /**
   * Department name
   */
  name?: string | null | undefined;
  code?: string | null | undefined;
  description?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisDepartmentsAddPassThrough> | undefined;
};

export type HrisDepartmentsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: HrisDepartmentsAddRequestBody;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisDepartmentsAddDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisDepartmentsAddHrisDepartmentsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type HrisDepartmentsAddUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Departments
 */
export type HrisDepartmentsAddResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisDepartmentsAddUnifiedId;
};

export type HrisDepartmentsAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Departments
   */
  twoHundredAndOneApplicationJsonObject?:
    | HrisDepartmentsAddResponseBody
    | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisDepartmentsAddHrisDepartmentsResponseBody
    | undefined;
};

/** @internal */
export const HrisDepartmentsAddGlobals$inboundSchema: z.ZodType<
  HrisDepartmentsAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisDepartmentsAddGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisDepartmentsAddGlobals$outboundSchema: z.ZodType<
  HrisDepartmentsAddGlobals$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddGlobals$ {
  /** @deprecated use `HrisDepartmentsAddGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddGlobals$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddGlobals$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddGlobals$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddGlobals$Outbound;
}

export function hrisDepartmentsAddGlobalsToJSON(
  hrisDepartmentsAddGlobals: HrisDepartmentsAddGlobals,
): string {
  return JSON.stringify(
    HrisDepartmentsAddGlobals$outboundSchema.parse(hrisDepartmentsAddGlobals),
  );
}

export function hrisDepartmentsAddGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAddGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAddGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAddGlobals' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddExtendPaths$inboundSchema: z.ZodType<
  HrisDepartmentsAddExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisDepartmentsAddExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisDepartmentsAddExtendPaths$outboundSchema: z.ZodType<
  HrisDepartmentsAddExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddExtendPaths$ {
  /** @deprecated use `HrisDepartmentsAddExtendPaths$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddExtendPaths$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddExtendPaths$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddExtendPaths$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddExtendPaths$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddExtendPaths$Outbound;
}

export function hrisDepartmentsAddExtendPathsToJSON(
  hrisDepartmentsAddExtendPaths: HrisDepartmentsAddExtendPaths,
): string {
  return JSON.stringify(
    HrisDepartmentsAddExtendPaths$outboundSchema.parse(
      hrisDepartmentsAddExtendPaths,
    ),
  );
}

export function hrisDepartmentsAddExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAddExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAddExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAddExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddPassThrough$inboundSchema: z.ZodType<
  HrisDepartmentsAddPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => HrisDepartmentsAddExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisDepartmentsAddPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<HrisDepartmentsAddExtendPaths$Outbound> | undefined;
};

/** @internal */
export const HrisDepartmentsAddPassThrough$outboundSchema: z.ZodType<
  HrisDepartmentsAddPassThrough$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => HrisDepartmentsAddExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddPassThrough$ {
  /** @deprecated use `HrisDepartmentsAddPassThrough$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddPassThrough$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddPassThrough$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddPassThrough$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddPassThrough$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddPassThrough$Outbound;
}

export function hrisDepartmentsAddPassThroughToJSON(
  hrisDepartmentsAddPassThrough: HrisDepartmentsAddPassThrough,
): string {
  return JSON.stringify(
    HrisDepartmentsAddPassThrough$outboundSchema.parse(
      hrisDepartmentsAddPassThrough,
    ),
  );
}

export function hrisDepartmentsAddPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAddPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAddPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAddPassThrough' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddRequestBody$inboundSchema: z.ZodType<
  HrisDepartmentsAddRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  pass_through: z.array(
    z.lazy(() => HrisDepartmentsAddPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisDepartmentsAddRequestBody$Outbound = {
  name?: string | null | undefined;
  code?: string | null | undefined;
  description?: string | null | undefined;
  pass_through?: Array<HrisDepartmentsAddPassThrough$Outbound> | undefined;
};

/** @internal */
export const HrisDepartmentsAddRequestBody$outboundSchema: z.ZodType<
  HrisDepartmentsAddRequestBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddRequestBody
> = z.object({
  name: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  passThrough: z.array(
    z.lazy(() => HrisDepartmentsAddPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddRequestBody$ {
  /** @deprecated use `HrisDepartmentsAddRequestBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddRequestBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddRequestBody$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddRequestBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddRequestBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddRequestBody$Outbound;
}

export function hrisDepartmentsAddRequestBodyToJSON(
  hrisDepartmentsAddRequestBody: HrisDepartmentsAddRequestBody,
): string {
  return JSON.stringify(
    HrisDepartmentsAddRequestBody$outboundSchema.parse(
      hrisDepartmentsAddRequestBody,
    ),
  );
}

export function hrisDepartmentsAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAddRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAddRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAddRequestBody' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddRequest$inboundSchema: z.ZodType<
  HrisDepartmentsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  RequestBody: z.lazy(() => HrisDepartmentsAddRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type HrisDepartmentsAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  RequestBody: HrisDepartmentsAddRequestBody$Outbound;
};

/** @internal */
export const HrisDepartmentsAddRequest$outboundSchema: z.ZodType<
  HrisDepartmentsAddRequest$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  requestBody: z.lazy(() => HrisDepartmentsAddRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddRequest$ {
  /** @deprecated use `HrisDepartmentsAddRequest$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddRequest$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddRequest$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddRequest$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddRequest$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddRequest$Outbound;
}

export function hrisDepartmentsAddRequestToJSON(
  hrisDepartmentsAddRequest: HrisDepartmentsAddRequest,
): string {
  return JSON.stringify(
    HrisDepartmentsAddRequest$outboundSchema.parse(hrisDepartmentsAddRequest),
  );
}

export function hrisDepartmentsAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAddRequest' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddDetail$inboundSchema: z.ZodType<
  HrisDepartmentsAddDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisDepartmentsAddDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisDepartmentsAddDetail$outboundSchema: z.ZodType<
  HrisDepartmentsAddDetail$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddDetail$ {
  /** @deprecated use `HrisDepartmentsAddDetail$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddDetail$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddDetail$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddDetail$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddDetail$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddDetail$Outbound;
}

export function hrisDepartmentsAddDetailToJSON(
  hrisDepartmentsAddDetail: HrisDepartmentsAddDetail,
): string {
  return JSON.stringify(
    HrisDepartmentsAddDetail$outboundSchema.parse(hrisDepartmentsAddDetail),
  );
}

export function hrisDepartmentsAddDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAddDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAddDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAddDetail' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponseBody$inboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisDepartmentsAddHrisDepartmentsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisDepartmentsAddHrisDepartmentsResponseBody$outboundSchema:
  z.ZodType<
    HrisDepartmentsAddHrisDepartmentsResponseBody$Outbound,
    z.ZodTypeDef,
    HrisDepartmentsAddHrisDepartmentsResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddHrisDepartmentsResponseBody$ {
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisDepartmentsAddHrisDepartmentsResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddHrisDepartmentsResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddHrisDepartmentsResponseBody$Outbound;
}

export function hrisDepartmentsAddHrisDepartmentsResponseBodyToJSON(
  hrisDepartmentsAddHrisDepartmentsResponseBody:
    HrisDepartmentsAddHrisDepartmentsResponseBody,
): string {
  return JSON.stringify(
    HrisDepartmentsAddHrisDepartmentsResponseBody$outboundSchema.parse(
      hrisDepartmentsAddHrisDepartmentsResponseBody,
    ),
  );
}

export function hrisDepartmentsAddHrisDepartmentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisDepartmentsAddHrisDepartmentsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisDepartmentsAddHrisDepartmentsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisDepartmentsAddHrisDepartmentsResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddUnifiedId$inboundSchema: z.ZodType<
  HrisDepartmentsAddUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type HrisDepartmentsAddUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const HrisDepartmentsAddUnifiedId$outboundSchema: z.ZodType<
  HrisDepartmentsAddUnifiedId$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddUnifiedId$ {
  /** @deprecated use `HrisDepartmentsAddUnifiedId$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddUnifiedId$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddUnifiedId$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddUnifiedId$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddUnifiedId$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddUnifiedId$Outbound;
}

export function hrisDepartmentsAddUnifiedIdToJSON(
  hrisDepartmentsAddUnifiedId: HrisDepartmentsAddUnifiedId,
): string {
  return JSON.stringify(
    HrisDepartmentsAddUnifiedId$outboundSchema.parse(
      hrisDepartmentsAddUnifiedId,
    ),
  );
}

export function hrisDepartmentsAddUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAddUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAddUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAddUnifiedId' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddResponseBody$inboundSchema: z.ZodType<
  HrisDepartmentsAddResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisDepartmentsAddUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisDepartmentsAddResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisDepartmentsAddUnifiedId$Outbound;
};

/** @internal */
export const HrisDepartmentsAddResponseBody$outboundSchema: z.ZodType<
  HrisDepartmentsAddResponseBody$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisDepartmentsAddUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddResponseBody$ {
  /** @deprecated use `HrisDepartmentsAddResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddResponseBody$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddResponseBody$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddResponseBody$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddResponseBody$Outbound;
}

export function hrisDepartmentsAddResponseBodyToJSON(
  hrisDepartmentsAddResponseBody: HrisDepartmentsAddResponseBody,
): string {
  return JSON.stringify(
    HrisDepartmentsAddResponseBody$outboundSchema.parse(
      hrisDepartmentsAddResponseBody,
    ),
  );
}

export function hrisDepartmentsAddResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAddResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAddResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAddResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisDepartmentsAddResponse$inboundSchema: z.ZodType<
  HrisDepartmentsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "201_application/json_object": z.lazy(() =>
    HrisDepartmentsAddResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisDepartmentsAddHrisDepartmentsResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "201_application/json_object": "twoHundredAndOneApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisDepartmentsAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "201_application/json_object"?:
    | HrisDepartmentsAddResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisDepartmentsAddHrisDepartmentsResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisDepartmentsAddResponse$outboundSchema: z.ZodType<
  HrisDepartmentsAddResponse$Outbound,
  z.ZodTypeDef,
  HrisDepartmentsAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredAndOneApplicationJsonObject: z.lazy(() =>
    HrisDepartmentsAddResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisDepartmentsAddHrisDepartmentsResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredAndOneApplicationJsonObject: "201_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDepartmentsAddResponse$ {
  /** @deprecated use `HrisDepartmentsAddResponse$inboundSchema` instead. */
  export const inboundSchema = HrisDepartmentsAddResponse$inboundSchema;
  /** @deprecated use `HrisDepartmentsAddResponse$outboundSchema` instead. */
  export const outboundSchema = HrisDepartmentsAddResponse$outboundSchema;
  /** @deprecated use `HrisDepartmentsAddResponse$Outbound` instead. */
  export type Outbound = HrisDepartmentsAddResponse$Outbound;
}

export function hrisDepartmentsAddResponseToJSON(
  hrisDepartmentsAddResponse: HrisDepartmentsAddResponse,
): string {
  return JSON.stringify(
    HrisDepartmentsAddResponse$outboundSchema.parse(hrisDepartmentsAddResponse),
  );
}

export function hrisDepartmentsAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisDepartmentsAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDepartmentsAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDepartmentsAddResponse' from JSON`,
  );
}
