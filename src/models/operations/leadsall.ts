/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LeadsAllSecurity = {
  apiKey: string;
};

/**
 * Apply filters
 */
export type LeadsAllQueryParamFilter = {
  /**
   * Name of the lead to filter on
   */
  name?: string | undefined;
  /**
   * First name of the lead to filter on
   */
  firstName?: string | undefined;
  /**
   * Last name of the lead to filter on
   */
  lastName?: string | undefined;
  /**
   * E-mail of the lead to filter on
   */
  email?: string | undefined;
  /**
   * Phone number of the lead to filter on
   */
  phoneNumber?: string | undefined;
};

/**
 * The field on which to sort the Leads
 */
export const LeadsAllQueryParamBy = {
  CreatedAt: "created_at",
  UpdatedAt: "updated_at",
  Name: "name",
  FirstName: "first_name",
  LastName: "last_name",
  Email: "email",
} as const;
/**
 * The field on which to sort the Leads
 */
export type LeadsAllQueryParamBy = ClosedEnum<typeof LeadsAllQueryParamBy>;

/**
 * The direction in which to sort the results
 */
export const LeadsAllQueryParamDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The direction in which to sort the results
 */
export type LeadsAllQueryParamDirection = ClosedEnum<
  typeof LeadsAllQueryParamDirection
>;

/**
 * Apply sorting
 */
export type LeadsAllQueryParamSort = {
  /**
   * The field on which to sort the Leads
   */
  by?: LeadsAllQueryParamBy | undefined;
  /**
   * The direction in which to sort the results
   */
  direction?: LeadsAllQueryParamDirection | undefined;
};

export type LeadsAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Apply filters
   */
  filter?: LeadsAllQueryParamFilter | undefined;
  /**
   * Apply sorting
   */
  sort?: LeadsAllQueryParamSort | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type LeadsAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type LeadsAllLeadsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const LeadsAllCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type LeadsAllCurrency = ClosedEnum<typeof LeadsAllCurrency>;

/**
 * The type of website
 */
export const LeadsAllType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type LeadsAllType = ClosedEnum<typeof LeadsAllType>;

export type LeadsAllWebsites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: LeadsAllType | null | undefined;
};

/**
 * The type of address.
 */
export const LeadsAllLeadsType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type LeadsAllLeadsType = ClosedEnum<typeof LeadsAllLeadsType>;

export type LeadsAllAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: LeadsAllLeadsType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type LeadsAllSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const LeadsAllLeadsResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type LeadsAllLeadsResponseType = ClosedEnum<
  typeof LeadsAllLeadsResponseType
>;

export type LeadsAllPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: LeadsAllLeadsResponseType | null | undefined;
};

/**
 * Email type
 */
export const LeadsAllLeadsResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type LeadsAllLeadsResponse200Type = ClosedEnum<
  typeof LeadsAllLeadsResponse200Type
>;

export type LeadsAllEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?: LeadsAllLeadsResponse200Type | null | undefined;
};

export type LeadsAllValue6 = {};

export type LeadsAllValue4 = {};

export type LeadsAllValue =
  | LeadsAllValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadsAllValue6>;

export type LeadsAllCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | LeadsAllValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadsAllValue6>
    | null
    | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type LeadsAllCustomMappings = {};

export type LeadsAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type LeadsAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<LeadsAllExtendPaths> | undefined;
};

export type LeadsAllData = {
  /**
   * Unique identifier for the contact.
   */
  id?: string | undefined;
  /**
   * Full name of the lead.
   */
  name: string;
  /**
   * The name of the company the lead is associated with.
   */
  companyName: string | null;
  /**
   * The owner of the lead.
   */
  ownerId?: string | null | undefined;
  /**
   * The name of the owner of the lead.
   */
  ownerName?: string | null | undefined;
  /**
   * The company the lead is associated with.
   */
  companyId?: string | null | undefined;
  /**
   * The identifier of the lead.
   */
  leadId?: string | null | undefined;
  /**
   * The source of the lead.
   */
  leadSource?: string | null | undefined;
  /**
   * The first name of the lead.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the lead.
   */
  lastName?: string | null | undefined;
  /**
   * The description of the lead.
   */
  description?: string | null | undefined;
  /**
   * The prefix of the lead.
   */
  prefix?: string | null | undefined;
  /**
   * The job title of the lead.
   */
  title?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  status?: string | null | undefined;
  /**
   * The monetary amount of the lead.
   */
  monetaryAmount?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: LeadsAllCurrency | null | undefined;
  /**
   * The fax number of the lead.
   */
  fax?: string | null | undefined;
  websites?: Array<LeadsAllWebsites> | undefined;
  addresses?: Array<LeadsAllAddresses> | undefined;
  socialLinks?: Array<LeadsAllSocialLinks> | undefined;
  phoneNumbers?: Array<LeadsAllPhoneNumbers> | undefined;
  emails?: Array<LeadsAllEmails> | undefined;
  customFields?: Array<LeadsAllCustomFields> | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: LeadsAllCustomMappings | null | undefined;
  /**
   * Date updated in ISO 8601 format
   */
  updatedAt?: string | null | undefined;
  /**
   * Date created in ISO 8601 format
   */
  createdAt?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<LeadsAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type LeadsAllCursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type LeadsAllMeta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: LeadsAllCursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type LeadsAllLinks = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Leads
 */
export type LeadsAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<LeadsAllData>;
  /**
   * Response metadata
   */
  meta?: LeadsAllMeta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: LeadsAllLinks | undefined;
};

export type LeadsAllResponse = LeadsAllLeadsResponseBody | LeadsAllResponseBody;

/** @internal */
export const LeadsAllSecurity$inboundSchema: z.ZodType<
  LeadsAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type LeadsAllSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const LeadsAllSecurity$outboundSchema: z.ZodType<
  LeadsAllSecurity$Outbound,
  z.ZodTypeDef,
  LeadsAllSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllSecurity$ {
  /** @deprecated use `LeadsAllSecurity$inboundSchema` instead. */
  export const inboundSchema = LeadsAllSecurity$inboundSchema;
  /** @deprecated use `LeadsAllSecurity$outboundSchema` instead. */
  export const outboundSchema = LeadsAllSecurity$outboundSchema;
  /** @deprecated use `LeadsAllSecurity$Outbound` instead. */
  export type Outbound = LeadsAllSecurity$Outbound;
}

export function leadsAllSecurityToJSON(
  leadsAllSecurity: LeadsAllSecurity,
): string {
  return JSON.stringify(
    LeadsAllSecurity$outboundSchema.parse(leadsAllSecurity),
  );
}

export function leadsAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllSecurity' from JSON`,
  );
}

/** @internal */
export const LeadsAllQueryParamFilter$inboundSchema: z.ZodType<
  LeadsAllQueryParamFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone_number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type LeadsAllQueryParamFilter$Outbound = {
  name?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone_number?: string | undefined;
};

/** @internal */
export const LeadsAllQueryParamFilter$outboundSchema: z.ZodType<
  LeadsAllQueryParamFilter$Outbound,
  z.ZodTypeDef,
  LeadsAllQueryParamFilter
> = z.object({
  name: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phoneNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllQueryParamFilter$ {
  /** @deprecated use `LeadsAllQueryParamFilter$inboundSchema` instead. */
  export const inboundSchema = LeadsAllQueryParamFilter$inboundSchema;
  /** @deprecated use `LeadsAllQueryParamFilter$outboundSchema` instead. */
  export const outboundSchema = LeadsAllQueryParamFilter$outboundSchema;
  /** @deprecated use `LeadsAllQueryParamFilter$Outbound` instead. */
  export type Outbound = LeadsAllQueryParamFilter$Outbound;
}

export function leadsAllQueryParamFilterToJSON(
  leadsAllQueryParamFilter: LeadsAllQueryParamFilter,
): string {
  return JSON.stringify(
    LeadsAllQueryParamFilter$outboundSchema.parse(leadsAllQueryParamFilter),
  );
}

export function leadsAllQueryParamFilterFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllQueryParamFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllQueryParamFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllQueryParamFilter' from JSON`,
  );
}

/** @internal */
export const LeadsAllQueryParamBy$inboundSchema: z.ZodNativeEnum<
  typeof LeadsAllQueryParamBy
> = z.nativeEnum(LeadsAllQueryParamBy);

/** @internal */
export const LeadsAllQueryParamBy$outboundSchema: z.ZodNativeEnum<
  typeof LeadsAllQueryParamBy
> = LeadsAllQueryParamBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllQueryParamBy$ {
  /** @deprecated use `LeadsAllQueryParamBy$inboundSchema` instead. */
  export const inboundSchema = LeadsAllQueryParamBy$inboundSchema;
  /** @deprecated use `LeadsAllQueryParamBy$outboundSchema` instead. */
  export const outboundSchema = LeadsAllQueryParamBy$outboundSchema;
}

/** @internal */
export const LeadsAllQueryParamDirection$inboundSchema: z.ZodNativeEnum<
  typeof LeadsAllQueryParamDirection
> = z.nativeEnum(LeadsAllQueryParamDirection);

/** @internal */
export const LeadsAllQueryParamDirection$outboundSchema: z.ZodNativeEnum<
  typeof LeadsAllQueryParamDirection
> = LeadsAllQueryParamDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllQueryParamDirection$ {
  /** @deprecated use `LeadsAllQueryParamDirection$inboundSchema` instead. */
  export const inboundSchema = LeadsAllQueryParamDirection$inboundSchema;
  /** @deprecated use `LeadsAllQueryParamDirection$outboundSchema` instead. */
  export const outboundSchema = LeadsAllQueryParamDirection$outboundSchema;
}

/** @internal */
export const LeadsAllQueryParamSort$inboundSchema: z.ZodType<
  LeadsAllQueryParamSort,
  z.ZodTypeDef,
  unknown
> = z.object({
  by: LeadsAllQueryParamBy$inboundSchema.optional(),
  direction: LeadsAllQueryParamDirection$inboundSchema.default("asc"),
});

/** @internal */
export type LeadsAllQueryParamSort$Outbound = {
  by?: string | undefined;
  direction: string;
};

/** @internal */
export const LeadsAllQueryParamSort$outboundSchema: z.ZodType<
  LeadsAllQueryParamSort$Outbound,
  z.ZodTypeDef,
  LeadsAllQueryParamSort
> = z.object({
  by: LeadsAllQueryParamBy$outboundSchema.optional(),
  direction: LeadsAllQueryParamDirection$outboundSchema.default("asc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllQueryParamSort$ {
  /** @deprecated use `LeadsAllQueryParamSort$inboundSchema` instead. */
  export const inboundSchema = LeadsAllQueryParamSort$inboundSchema;
  /** @deprecated use `LeadsAllQueryParamSort$outboundSchema` instead. */
  export const outboundSchema = LeadsAllQueryParamSort$outboundSchema;
  /** @deprecated use `LeadsAllQueryParamSort$Outbound` instead. */
  export type Outbound = LeadsAllQueryParamSort$Outbound;
}

export function leadsAllQueryParamSortToJSON(
  leadsAllQueryParamSort: LeadsAllQueryParamSort,
): string {
  return JSON.stringify(
    LeadsAllQueryParamSort$outboundSchema.parse(leadsAllQueryParamSort),
  );
}

export function leadsAllQueryParamSortFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllQueryParamSort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllQueryParamSort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllQueryParamSort' from JSON`,
  );
}

/** @internal */
export const LeadsAllRequest$inboundSchema: z.ZodType<
  LeadsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => LeadsAllQueryParamFilter$inboundSchema).optional(),
  sort: z.lazy(() => LeadsAllQueryParamSort$inboundSchema).optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type LeadsAllRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: LeadsAllQueryParamFilter$Outbound | undefined;
  sort?: LeadsAllQueryParamSort$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const LeadsAllRequest$outboundSchema: z.ZodType<
  LeadsAllRequest$Outbound,
  z.ZodTypeDef,
  LeadsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: z.lazy(() => LeadsAllQueryParamFilter$outboundSchema).optional(),
  sort: z.lazy(() => LeadsAllQueryParamSort$outboundSchema).optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllRequest$ {
  /** @deprecated use `LeadsAllRequest$inboundSchema` instead. */
  export const inboundSchema = LeadsAllRequest$inboundSchema;
  /** @deprecated use `LeadsAllRequest$outboundSchema` instead. */
  export const outboundSchema = LeadsAllRequest$outboundSchema;
  /** @deprecated use `LeadsAllRequest$Outbound` instead. */
  export type Outbound = LeadsAllRequest$Outbound;
}

export function leadsAllRequestToJSON(
  leadsAllRequest: LeadsAllRequest,
): string {
  return JSON.stringify(LeadsAllRequest$outboundSchema.parse(leadsAllRequest));
}

export function leadsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllRequest' from JSON`,
  );
}

/** @internal */
export const LeadsAllDetail$inboundSchema: z.ZodType<
  LeadsAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type LeadsAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const LeadsAllDetail$outboundSchema: z.ZodType<
  LeadsAllDetail$Outbound,
  z.ZodTypeDef,
  LeadsAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllDetail$ {
  /** @deprecated use `LeadsAllDetail$inboundSchema` instead. */
  export const inboundSchema = LeadsAllDetail$inboundSchema;
  /** @deprecated use `LeadsAllDetail$outboundSchema` instead. */
  export const outboundSchema = LeadsAllDetail$outboundSchema;
  /** @deprecated use `LeadsAllDetail$Outbound` instead. */
  export type Outbound = LeadsAllDetail$Outbound;
}

export function leadsAllDetailToJSON(leadsAllDetail: LeadsAllDetail): string {
  return JSON.stringify(LeadsAllDetail$outboundSchema.parse(leadsAllDetail));
}

export function leadsAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllDetail' from JSON`,
  );
}

/** @internal */
export const LeadsAllLeadsResponseBody$inboundSchema: z.ZodType<
  LeadsAllLeadsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type LeadsAllLeadsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const LeadsAllLeadsResponseBody$outboundSchema: z.ZodType<
  LeadsAllLeadsResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAllLeadsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsResponseBody$ {
  /** @deprecated use `LeadsAllLeadsResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAllLeadsResponseBody$inboundSchema;
  /** @deprecated use `LeadsAllLeadsResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsAllLeadsResponseBody$outboundSchema;
  /** @deprecated use `LeadsAllLeadsResponseBody$Outbound` instead. */
  export type Outbound = LeadsAllLeadsResponseBody$Outbound;
}

export function leadsAllLeadsResponseBodyToJSON(
  leadsAllLeadsResponseBody: LeadsAllLeadsResponseBody,
): string {
  return JSON.stringify(
    LeadsAllLeadsResponseBody$outboundSchema.parse(leadsAllLeadsResponseBody),
  );
}

export function leadsAllLeadsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllLeadsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllLeadsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllLeadsResponseBody' from JSON`,
  );
}

/** @internal */
export const LeadsAllCurrency$inboundSchema: z.ZodNativeEnum<
  typeof LeadsAllCurrency
> = z.nativeEnum(LeadsAllCurrency);

/** @internal */
export const LeadsAllCurrency$outboundSchema: z.ZodNativeEnum<
  typeof LeadsAllCurrency
> = LeadsAllCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllCurrency$ {
  /** @deprecated use `LeadsAllCurrency$inboundSchema` instead. */
  export const inboundSchema = LeadsAllCurrency$inboundSchema;
  /** @deprecated use `LeadsAllCurrency$outboundSchema` instead. */
  export const outboundSchema = LeadsAllCurrency$outboundSchema;
}

/** @internal */
export const LeadsAllType$inboundSchema: z.ZodNativeEnum<typeof LeadsAllType> =
  z.nativeEnum(LeadsAllType);

/** @internal */
export const LeadsAllType$outboundSchema: z.ZodNativeEnum<typeof LeadsAllType> =
  LeadsAllType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllType$ {
  /** @deprecated use `LeadsAllType$inboundSchema` instead. */
  export const inboundSchema = LeadsAllType$inboundSchema;
  /** @deprecated use `LeadsAllType$outboundSchema` instead. */
  export const outboundSchema = LeadsAllType$outboundSchema;
}

/** @internal */
export const LeadsAllWebsites$inboundSchema: z.ZodType<
  LeadsAllWebsites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadsAllType$inboundSchema).optional(),
});

/** @internal */
export type LeadsAllWebsites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsAllWebsites$outboundSchema: z.ZodType<
  LeadsAllWebsites$Outbound,
  z.ZodTypeDef,
  LeadsAllWebsites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(LeadsAllType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllWebsites$ {
  /** @deprecated use `LeadsAllWebsites$inboundSchema` instead. */
  export const inboundSchema = LeadsAllWebsites$inboundSchema;
  /** @deprecated use `LeadsAllWebsites$outboundSchema` instead. */
  export const outboundSchema = LeadsAllWebsites$outboundSchema;
  /** @deprecated use `LeadsAllWebsites$Outbound` instead. */
  export type Outbound = LeadsAllWebsites$Outbound;
}

export function leadsAllWebsitesToJSON(
  leadsAllWebsites: LeadsAllWebsites,
): string {
  return JSON.stringify(
    LeadsAllWebsites$outboundSchema.parse(leadsAllWebsites),
  );
}

export function leadsAllWebsitesFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllWebsites, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllWebsites$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllWebsites' from JSON`,
  );
}

/** @internal */
export const LeadsAllLeadsType$inboundSchema: z.ZodNativeEnum<
  typeof LeadsAllLeadsType
> = z.nativeEnum(LeadsAllLeadsType);

/** @internal */
export const LeadsAllLeadsType$outboundSchema: z.ZodNativeEnum<
  typeof LeadsAllLeadsType
> = LeadsAllLeadsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsType$ {
  /** @deprecated use `LeadsAllLeadsType$inboundSchema` instead. */
  export const inboundSchema = LeadsAllLeadsType$inboundSchema;
  /** @deprecated use `LeadsAllLeadsType$outboundSchema` instead. */
  export const outboundSchema = LeadsAllLeadsType$outboundSchema;
}

/** @internal */
export const LeadsAllAddresses$inboundSchema: z.ZodType<
  LeadsAllAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsAllLeadsType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type LeadsAllAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const LeadsAllAddresses$outboundSchema: z.ZodType<
  LeadsAllAddresses$Outbound,
  z.ZodTypeDef,
  LeadsAllAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsAllLeadsType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllAddresses$ {
  /** @deprecated use `LeadsAllAddresses$inboundSchema` instead. */
  export const inboundSchema = LeadsAllAddresses$inboundSchema;
  /** @deprecated use `LeadsAllAddresses$outboundSchema` instead. */
  export const outboundSchema = LeadsAllAddresses$outboundSchema;
  /** @deprecated use `LeadsAllAddresses$Outbound` instead. */
  export type Outbound = LeadsAllAddresses$Outbound;
}

export function leadsAllAddressesToJSON(
  leadsAllAddresses: LeadsAllAddresses,
): string {
  return JSON.stringify(
    LeadsAllAddresses$outboundSchema.parse(leadsAllAddresses),
  );
}

export function leadsAllAddressesFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllAddresses' from JSON`,
  );
}

/** @internal */
export const LeadsAllSocialLinks$inboundSchema: z.ZodType<
  LeadsAllSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type LeadsAllSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsAllSocialLinks$outboundSchema: z.ZodType<
  LeadsAllSocialLinks$Outbound,
  z.ZodTypeDef,
  LeadsAllSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllSocialLinks$ {
  /** @deprecated use `LeadsAllSocialLinks$inboundSchema` instead. */
  export const inboundSchema = LeadsAllSocialLinks$inboundSchema;
  /** @deprecated use `LeadsAllSocialLinks$outboundSchema` instead. */
  export const outboundSchema = LeadsAllSocialLinks$outboundSchema;
  /** @deprecated use `LeadsAllSocialLinks$Outbound` instead. */
  export type Outbound = LeadsAllSocialLinks$Outbound;
}

export function leadsAllSocialLinksToJSON(
  leadsAllSocialLinks: LeadsAllSocialLinks,
): string {
  return JSON.stringify(
    LeadsAllSocialLinks$outboundSchema.parse(leadsAllSocialLinks),
  );
}

export function leadsAllSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllSocialLinks' from JSON`,
  );
}

/** @internal */
export const LeadsAllLeadsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof LeadsAllLeadsResponseType
> = z.nativeEnum(LeadsAllLeadsResponseType);

/** @internal */
export const LeadsAllLeadsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof LeadsAllLeadsResponseType
> = LeadsAllLeadsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsResponseType$ {
  /** @deprecated use `LeadsAllLeadsResponseType$inboundSchema` instead. */
  export const inboundSchema = LeadsAllLeadsResponseType$inboundSchema;
  /** @deprecated use `LeadsAllLeadsResponseType$outboundSchema` instead. */
  export const outboundSchema = LeadsAllLeadsResponseType$outboundSchema;
}

/** @internal */
export const LeadsAllPhoneNumbers$inboundSchema: z.ZodType<
  LeadsAllPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsAllLeadsResponseType$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type LeadsAllPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsAllPhoneNumbers$outboundSchema: z.ZodType<
  LeadsAllPhoneNumbers$Outbound,
  z.ZodTypeDef,
  LeadsAllPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(LeadsAllLeadsResponseType$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllPhoneNumbers$ {
  /** @deprecated use `LeadsAllPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema = LeadsAllPhoneNumbers$inboundSchema;
  /** @deprecated use `LeadsAllPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema = LeadsAllPhoneNumbers$outboundSchema;
  /** @deprecated use `LeadsAllPhoneNumbers$Outbound` instead. */
  export type Outbound = LeadsAllPhoneNumbers$Outbound;
}

export function leadsAllPhoneNumbersToJSON(
  leadsAllPhoneNumbers: LeadsAllPhoneNumbers,
): string {
  return JSON.stringify(
    LeadsAllPhoneNumbers$outboundSchema.parse(leadsAllPhoneNumbers),
  );
}

export function leadsAllPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const LeadsAllLeadsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof LeadsAllLeadsResponse200Type
> = z.nativeEnum(LeadsAllLeadsResponse200Type);

/** @internal */
export const LeadsAllLeadsResponse200Type$outboundSchema: z.ZodNativeEnum<
  typeof LeadsAllLeadsResponse200Type
> = LeadsAllLeadsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLeadsResponse200Type$ {
  /** @deprecated use `LeadsAllLeadsResponse200Type$inboundSchema` instead. */
  export const inboundSchema = LeadsAllLeadsResponse200Type$inboundSchema;
  /** @deprecated use `LeadsAllLeadsResponse200Type$outboundSchema` instead. */
  export const outboundSchema = LeadsAllLeadsResponse200Type$outboundSchema;
}

/** @internal */
export const LeadsAllEmails$inboundSchema: z.ZodType<
  LeadsAllEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadsAllLeadsResponse200Type$inboundSchema).optional(),
});

/** @internal */
export type LeadsAllEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const LeadsAllEmails$outboundSchema: z.ZodType<
  LeadsAllEmails$Outbound,
  z.ZodTypeDef,
  LeadsAllEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(LeadsAllLeadsResponse200Type$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllEmails$ {
  /** @deprecated use `LeadsAllEmails$inboundSchema` instead. */
  export const inboundSchema = LeadsAllEmails$inboundSchema;
  /** @deprecated use `LeadsAllEmails$outboundSchema` instead. */
  export const outboundSchema = LeadsAllEmails$outboundSchema;
  /** @deprecated use `LeadsAllEmails$Outbound` instead. */
  export type Outbound = LeadsAllEmails$Outbound;
}

export function leadsAllEmailsToJSON(leadsAllEmails: LeadsAllEmails): string {
  return JSON.stringify(LeadsAllEmails$outboundSchema.parse(leadsAllEmails));
}

export function leadsAllEmailsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllEmails' from JSON`,
  );
}

/** @internal */
export const LeadsAllValue6$inboundSchema: z.ZodType<
  LeadsAllValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadsAllValue6$Outbound = {};

/** @internal */
export const LeadsAllValue6$outboundSchema: z.ZodType<
  LeadsAllValue6$Outbound,
  z.ZodTypeDef,
  LeadsAllValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllValue6$ {
  /** @deprecated use `LeadsAllValue6$inboundSchema` instead. */
  export const inboundSchema = LeadsAllValue6$inboundSchema;
  /** @deprecated use `LeadsAllValue6$outboundSchema` instead. */
  export const outboundSchema = LeadsAllValue6$outboundSchema;
  /** @deprecated use `LeadsAllValue6$Outbound` instead. */
  export type Outbound = LeadsAllValue6$Outbound;
}

export function leadsAllValue6ToJSON(leadsAllValue6: LeadsAllValue6): string {
  return JSON.stringify(LeadsAllValue6$outboundSchema.parse(leadsAllValue6));
}

export function leadsAllValue6FromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllValue6' from JSON`,
  );
}

/** @internal */
export const LeadsAllValue4$inboundSchema: z.ZodType<
  LeadsAllValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadsAllValue4$Outbound = {};

/** @internal */
export const LeadsAllValue4$outboundSchema: z.ZodType<
  LeadsAllValue4$Outbound,
  z.ZodTypeDef,
  LeadsAllValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllValue4$ {
  /** @deprecated use `LeadsAllValue4$inboundSchema` instead. */
  export const inboundSchema = LeadsAllValue4$inboundSchema;
  /** @deprecated use `LeadsAllValue4$outboundSchema` instead. */
  export const outboundSchema = LeadsAllValue4$outboundSchema;
  /** @deprecated use `LeadsAllValue4$Outbound` instead. */
  export type Outbound = LeadsAllValue4$Outbound;
}

export function leadsAllValue4ToJSON(leadsAllValue4: LeadsAllValue4): string {
  return JSON.stringify(LeadsAllValue4$outboundSchema.parse(leadsAllValue4));
}

export function leadsAllValue4FromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllValue4' from JSON`,
  );
}

/** @internal */
export const LeadsAllValue$inboundSchema: z.ZodType<
  LeadsAllValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadsAllValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadsAllValue6$inboundSchema)),
]);

/** @internal */
export type LeadsAllValue$Outbound =
  | LeadsAllValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<LeadsAllValue6$Outbound>;

/** @internal */
export const LeadsAllValue$outboundSchema: z.ZodType<
  LeadsAllValue$Outbound,
  z.ZodTypeDef,
  LeadsAllValue
> = z.union([
  z.lazy(() => LeadsAllValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => LeadsAllValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllValue$ {
  /** @deprecated use `LeadsAllValue$inboundSchema` instead. */
  export const inboundSchema = LeadsAllValue$inboundSchema;
  /** @deprecated use `LeadsAllValue$outboundSchema` instead. */
  export const outboundSchema = LeadsAllValue$outboundSchema;
  /** @deprecated use `LeadsAllValue$Outbound` instead. */
  export type Outbound = LeadsAllValue$Outbound;
}

export function leadsAllValueToJSON(leadsAllValue: LeadsAllValue): string {
  return JSON.stringify(LeadsAllValue$outboundSchema.parse(leadsAllValue));
}

export function leadsAllValueFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllValue' from JSON`,
  );
}

/** @internal */
export const LeadsAllCustomFields$inboundSchema: z.ZodType<
  LeadsAllCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadsAllValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadsAllValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type LeadsAllCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | LeadsAllValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<LeadsAllValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const LeadsAllCustomFields$outboundSchema: z.ZodType<
  LeadsAllCustomFields$Outbound,
  z.ZodTypeDef,
  LeadsAllCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => LeadsAllValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => LeadsAllValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllCustomFields$ {
  /** @deprecated use `LeadsAllCustomFields$inboundSchema` instead. */
  export const inboundSchema = LeadsAllCustomFields$inboundSchema;
  /** @deprecated use `LeadsAllCustomFields$outboundSchema` instead. */
  export const outboundSchema = LeadsAllCustomFields$outboundSchema;
  /** @deprecated use `LeadsAllCustomFields$Outbound` instead. */
  export type Outbound = LeadsAllCustomFields$Outbound;
}

export function leadsAllCustomFieldsToJSON(
  leadsAllCustomFields: LeadsAllCustomFields,
): string {
  return JSON.stringify(
    LeadsAllCustomFields$outboundSchema.parse(leadsAllCustomFields),
  );
}

export function leadsAllCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllCustomFields' from JSON`,
  );
}

/** @internal */
export const LeadsAllCustomMappings$inboundSchema: z.ZodType<
  LeadsAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LeadsAllCustomMappings$Outbound = {};

/** @internal */
export const LeadsAllCustomMappings$outboundSchema: z.ZodType<
  LeadsAllCustomMappings$Outbound,
  z.ZodTypeDef,
  LeadsAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllCustomMappings$ {
  /** @deprecated use `LeadsAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema = LeadsAllCustomMappings$inboundSchema;
  /** @deprecated use `LeadsAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema = LeadsAllCustomMappings$outboundSchema;
  /** @deprecated use `LeadsAllCustomMappings$Outbound` instead. */
  export type Outbound = LeadsAllCustomMappings$Outbound;
}

export function leadsAllCustomMappingsToJSON(
  leadsAllCustomMappings: LeadsAllCustomMappings,
): string {
  return JSON.stringify(
    LeadsAllCustomMappings$outboundSchema.parse(leadsAllCustomMappings),
  );
}

export function leadsAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const LeadsAllExtendPaths$inboundSchema: z.ZodType<
  LeadsAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type LeadsAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const LeadsAllExtendPaths$outboundSchema: z.ZodType<
  LeadsAllExtendPaths$Outbound,
  z.ZodTypeDef,
  LeadsAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllExtendPaths$ {
  /** @deprecated use `LeadsAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = LeadsAllExtendPaths$inboundSchema;
  /** @deprecated use `LeadsAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = LeadsAllExtendPaths$outboundSchema;
  /** @deprecated use `LeadsAllExtendPaths$Outbound` instead. */
  export type Outbound = LeadsAllExtendPaths$Outbound;
}

export function leadsAllExtendPathsToJSON(
  leadsAllExtendPaths: LeadsAllExtendPaths,
): string {
  return JSON.stringify(
    LeadsAllExtendPaths$outboundSchema.parse(leadsAllExtendPaths),
  );
}

export function leadsAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const LeadsAllPassThrough$inboundSchema: z.ZodType<
  LeadsAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => LeadsAllExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type LeadsAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<LeadsAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const LeadsAllPassThrough$outboundSchema: z.ZodType<
  LeadsAllPassThrough$Outbound,
  z.ZodTypeDef,
  LeadsAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => LeadsAllExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllPassThrough$ {
  /** @deprecated use `LeadsAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = LeadsAllPassThrough$inboundSchema;
  /** @deprecated use `LeadsAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = LeadsAllPassThrough$outboundSchema;
  /** @deprecated use `LeadsAllPassThrough$Outbound` instead. */
  export type Outbound = LeadsAllPassThrough$Outbound;
}

export function leadsAllPassThroughToJSON(
  leadsAllPassThrough: LeadsAllPassThrough,
): string {
  return JSON.stringify(
    LeadsAllPassThrough$outboundSchema.parse(leadsAllPassThrough),
  );
}

export function leadsAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllPassThrough' from JSON`,
  );
}

/** @internal */
export const LeadsAllData$inboundSchema: z.ZodType<
  LeadsAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  company_name: z.nullable(z.string()),
  owner_id: z.nullable(z.string()).optional(),
  owner_name: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  lead_id: z.nullable(z.string()).optional(),
  lead_source: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetary_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(LeadsAllCurrency$inboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => LeadsAllWebsites$inboundSchema)).optional(),
  addresses: z.array(z.lazy(() => LeadsAllAddresses$inboundSchema)).optional(),
  social_links: z.array(z.lazy(() => LeadsAllSocialLinks$inboundSchema))
    .optional(),
  phone_numbers: z.array(z.lazy(() => LeadsAllPhoneNumbers$inboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => LeadsAllEmails$inboundSchema)).optional(),
  custom_fields: z.array(z.lazy(() => LeadsAllCustomFields$inboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => LeadsAllCustomMappings$inboundSchema),
  ).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(z.lazy(() => LeadsAllPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "owner_id": "ownerId",
    "owner_name": "ownerName",
    "company_id": "companyId",
    "lead_id": "leadId",
    "lead_source": "leadSource",
    "first_name": "firstName",
    "last_name": "lastName",
    "monetary_amount": "monetaryAmount",
    "social_links": "socialLinks",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type LeadsAllData$Outbound = {
  id?: string | undefined;
  name: string;
  company_name: string | null;
  owner_id?: string | null | undefined;
  owner_name?: string | null | undefined;
  company_id?: string | null | undefined;
  lead_id?: string | null | undefined;
  lead_source?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  description?: string | null | undefined;
  prefix?: string | null | undefined;
  title?: string | null | undefined;
  language?: string | null | undefined;
  status?: string | null | undefined;
  monetary_amount?: number | null | undefined;
  currency?: string | null | undefined;
  fax?: string | null | undefined;
  websites?: Array<LeadsAllWebsites$Outbound> | undefined;
  addresses?: Array<LeadsAllAddresses$Outbound> | undefined;
  social_links?: Array<LeadsAllSocialLinks$Outbound> | undefined;
  phone_numbers?: Array<LeadsAllPhoneNumbers$Outbound> | undefined;
  emails?: Array<LeadsAllEmails$Outbound> | undefined;
  custom_fields?: Array<LeadsAllCustomFields$Outbound> | undefined;
  tags?: Array<string> | null | undefined;
  custom_mappings?: LeadsAllCustomMappings$Outbound | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<LeadsAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const LeadsAllData$outboundSchema: z.ZodType<
  LeadsAllData$Outbound,
  z.ZodTypeDef,
  LeadsAllData
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  companyName: z.nullable(z.string()),
  ownerId: z.nullable(z.string()).optional(),
  ownerName: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  leadId: z.nullable(z.string()).optional(),
  leadSource: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  language: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  monetaryAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(LeadsAllCurrency$outboundSchema).optional(),
  fax: z.nullable(z.string()).optional(),
  websites: z.array(z.lazy(() => LeadsAllWebsites$outboundSchema)).optional(),
  addresses: z.array(z.lazy(() => LeadsAllAddresses$outboundSchema)).optional(),
  socialLinks: z.array(z.lazy(() => LeadsAllSocialLinks$outboundSchema))
    .optional(),
  phoneNumbers: z.array(z.lazy(() => LeadsAllPhoneNumbers$outboundSchema))
    .optional(),
  emails: z.array(z.lazy(() => LeadsAllEmails$outboundSchema)).optional(),
  customFields: z.array(z.lazy(() => LeadsAllCustomFields$outboundSchema))
    .optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customMappings: z.nullable(
    z.lazy(() => LeadsAllCustomMappings$outboundSchema),
  ).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(z.lazy(() => LeadsAllPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    ownerId: "owner_id",
    ownerName: "owner_name",
    companyId: "company_id",
    leadId: "lead_id",
    leadSource: "lead_source",
    firstName: "first_name",
    lastName: "last_name",
    monetaryAmount: "monetary_amount",
    socialLinks: "social_links",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllData$ {
  /** @deprecated use `LeadsAllData$inboundSchema` instead. */
  export const inboundSchema = LeadsAllData$inboundSchema;
  /** @deprecated use `LeadsAllData$outboundSchema` instead. */
  export const outboundSchema = LeadsAllData$outboundSchema;
  /** @deprecated use `LeadsAllData$Outbound` instead. */
  export type Outbound = LeadsAllData$Outbound;
}

export function leadsAllDataToJSON(leadsAllData: LeadsAllData): string {
  return JSON.stringify(LeadsAllData$outboundSchema.parse(leadsAllData));
}

export function leadsAllDataFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllData' from JSON`,
  );
}

/** @internal */
export const LeadsAllCursors$inboundSchema: z.ZodType<
  LeadsAllCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type LeadsAllCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const LeadsAllCursors$outboundSchema: z.ZodType<
  LeadsAllCursors$Outbound,
  z.ZodTypeDef,
  LeadsAllCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllCursors$ {
  /** @deprecated use `LeadsAllCursors$inboundSchema` instead. */
  export const inboundSchema = LeadsAllCursors$inboundSchema;
  /** @deprecated use `LeadsAllCursors$outboundSchema` instead. */
  export const outboundSchema = LeadsAllCursors$outboundSchema;
  /** @deprecated use `LeadsAllCursors$Outbound` instead. */
  export type Outbound = LeadsAllCursors$Outbound;
}

export function leadsAllCursorsToJSON(
  leadsAllCursors: LeadsAllCursors,
): string {
  return JSON.stringify(LeadsAllCursors$outboundSchema.parse(leadsAllCursors));
}

export function leadsAllCursorsFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllCursors' from JSON`,
  );
}

/** @internal */
export const LeadsAllMeta$inboundSchema: z.ZodType<
  LeadsAllMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => LeadsAllCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type LeadsAllMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: LeadsAllCursors$Outbound | undefined;
};

/** @internal */
export const LeadsAllMeta$outboundSchema: z.ZodType<
  LeadsAllMeta$Outbound,
  z.ZodTypeDef,
  LeadsAllMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => LeadsAllCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllMeta$ {
  /** @deprecated use `LeadsAllMeta$inboundSchema` instead. */
  export const inboundSchema = LeadsAllMeta$inboundSchema;
  /** @deprecated use `LeadsAllMeta$outboundSchema` instead. */
  export const outboundSchema = LeadsAllMeta$outboundSchema;
  /** @deprecated use `LeadsAllMeta$Outbound` instead. */
  export type Outbound = LeadsAllMeta$Outbound;
}

export function leadsAllMetaToJSON(leadsAllMeta: LeadsAllMeta): string {
  return JSON.stringify(LeadsAllMeta$outboundSchema.parse(leadsAllMeta));
}

export function leadsAllMetaFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllMeta' from JSON`,
  );
}

/** @internal */
export const LeadsAllLinks$inboundSchema: z.ZodType<
  LeadsAllLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type LeadsAllLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const LeadsAllLinks$outboundSchema: z.ZodType<
  LeadsAllLinks$Outbound,
  z.ZodTypeDef,
  LeadsAllLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllLinks$ {
  /** @deprecated use `LeadsAllLinks$inboundSchema` instead. */
  export const inboundSchema = LeadsAllLinks$inboundSchema;
  /** @deprecated use `LeadsAllLinks$outboundSchema` instead. */
  export const outboundSchema = LeadsAllLinks$outboundSchema;
  /** @deprecated use `LeadsAllLinks$Outbound` instead. */
  export type Outbound = LeadsAllLinks$Outbound;
}

export function leadsAllLinksToJSON(leadsAllLinks: LeadsAllLinks): string {
  return JSON.stringify(LeadsAllLinks$outboundSchema.parse(leadsAllLinks));
}

export function leadsAllLinksFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllLinks' from JSON`,
  );
}

/** @internal */
export const LeadsAllResponseBody$inboundSchema: z.ZodType<
  LeadsAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => LeadsAllData$inboundSchema)),
  meta: z.lazy(() => LeadsAllMeta$inboundSchema).optional(),
  links: z.lazy(() => LeadsAllLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type LeadsAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<LeadsAllData$Outbound>;
  meta?: LeadsAllMeta$Outbound | undefined;
  links?: LeadsAllLinks$Outbound | undefined;
};

/** @internal */
export const LeadsAllResponseBody$outboundSchema: z.ZodType<
  LeadsAllResponseBody$Outbound,
  z.ZodTypeDef,
  LeadsAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => LeadsAllData$outboundSchema)),
  meta: z.lazy(() => LeadsAllMeta$outboundSchema).optional(),
  links: z.lazy(() => LeadsAllLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllResponseBody$ {
  /** @deprecated use `LeadsAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = LeadsAllResponseBody$inboundSchema;
  /** @deprecated use `LeadsAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = LeadsAllResponseBody$outboundSchema;
  /** @deprecated use `LeadsAllResponseBody$Outbound` instead. */
  export type Outbound = LeadsAllResponseBody$Outbound;
}

export function leadsAllResponseBodyToJSON(
  leadsAllResponseBody: LeadsAllResponseBody,
): string {
  return JSON.stringify(
    LeadsAllResponseBody$outboundSchema.parse(leadsAllResponseBody),
  );
}

export function leadsAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllResponseBody' from JSON`,
  );
}

/** @internal */
export const LeadsAllResponse$inboundSchema: z.ZodType<
  LeadsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LeadsAllLeadsResponseBody$inboundSchema),
  z.lazy(() => LeadsAllResponseBody$inboundSchema),
]);

/** @internal */
export type LeadsAllResponse$Outbound =
  | LeadsAllLeadsResponseBody$Outbound
  | LeadsAllResponseBody$Outbound;

/** @internal */
export const LeadsAllResponse$outboundSchema: z.ZodType<
  LeadsAllResponse$Outbound,
  z.ZodTypeDef,
  LeadsAllResponse
> = z.union([
  z.lazy(() => LeadsAllLeadsResponseBody$outboundSchema),
  z.lazy(() => LeadsAllResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadsAllResponse$ {
  /** @deprecated use `LeadsAllResponse$inboundSchema` instead. */
  export const inboundSchema = LeadsAllResponse$inboundSchema;
  /** @deprecated use `LeadsAllResponse$outboundSchema` instead. */
  export const outboundSchema = LeadsAllResponse$outboundSchema;
  /** @deprecated use `LeadsAllResponse$Outbound` instead. */
  export type Outbound = LeadsAllResponse$Outbound;
}

export function leadsAllResponseToJSON(
  leadsAllResponse: LeadsAllResponse,
): string {
  return JSON.stringify(
    LeadsAllResponse$outboundSchema.parse(leadsAllResponse),
  );
}

export function leadsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<LeadsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LeadsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LeadsAllResponse' from JSON`,
  );
}
