/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisEmployeeSchedulesAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisEmployeeSchedulesAllRequest = {
  /**
   * ID of the employee you are acting upon.
   */
  employeeId: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisEmployeeSchedulesAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The gender represents the gender identity of a person.
 */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The gender represents the gender identity of a person.
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender = ClosedEnum<
  typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender
>;

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings = {};

export type HrisEmployeeSchedulesAllPerson = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The gender represents the gender identity of a person.
   */
  gender?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender
    | null
    | undefined;
  /**
   * Initials of the person
   */
  initials?: string | null | undefined;
  /**
   * Date of birth
   */
  birthday?: RFCDate | null | undefined;
  /**
   * Date of death
   */
  deceasedOn?: RFCDate | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings
    | null
    | undefined;
};

/**
 * The team the person is currently in.
 */
export type HrisEmployeeSchedulesAllTeam = {
  /**
   * The unique identifier of the team.
   */
  id?: string | null | undefined;
  /**
   * The name of the team.
   */
  name?: string | null | undefined;
};

/**
 * The reason because the employment ended.
 */
export const HrisEmployeeSchedulesAllLeavingReason = {
  Dismissed: "dismissed",
  Resigned: "resigned",
  Redundancy: "redundancy",
  Other: "other",
} as const;
/**
 * The reason because the employment ended.
 */
export type HrisEmployeeSchedulesAllLeavingReason = ClosedEnum<
  typeof HrisEmployeeSchedulesAllLeavingReason
>;

/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export const HrisEmployeeSchedulesAllEmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export type HrisEmployeeSchedulesAllEmploymentStatus = ClosedEnum<
  typeof HrisEmployeeSchedulesAllEmploymentStatus
>;

/**
 * The type of employment relationship the employee has with the organization.
 */
export const HrisEmployeeSchedulesAllEmploymentType = {
  Contractor: "contractor",
  Employee: "employee",
  Freelance: "freelance",
  Temp: "temp",
  Internship: "internship",
  Other: "other",
} as const;
/**
 * The type of employment relationship the employee has with the organization.
 */
export type HrisEmployeeSchedulesAllEmploymentType = ClosedEnum<
  typeof HrisEmployeeSchedulesAllEmploymentType
>;

/**
 * The work schedule of the employee.
 */
export const HrisEmployeeSchedulesAllEmploymentSubType = {
  FullTime: "full_time",
  PartTime: "part_time",
  Hourly: "hourly",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The work schedule of the employee.
 */
export type HrisEmployeeSchedulesAllEmploymentSubType = ClosedEnum<
  typeof HrisEmployeeSchedulesAllEmploymentSubType
>;

export type HrisEmployeeSchedulesAllEmploymentRole = {
  /**
   * The type of employment relationship the employee has with the organization.
   */
  type?: HrisEmployeeSchedulesAllEmploymentType | null | undefined;
  /**
   * The work schedule of the employee.
   */
  subType?: HrisEmployeeSchedulesAllEmploymentSubType | null | undefined;
};

/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus = {
  Active: "active",
  Inactive: "inactive",
  Terminated: "terminated",
  Other: "other",
} as const;
/**
 * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus =
  ClosedEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus
  >;

export type HrisEmployeeSchedulesAllManager = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The name of the manager, often a combination of their first and last names.
   */
  name?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * The email address of the manager.
   */
  email?: string | null | undefined;
  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  employmentStatus?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus
    | null
    | undefined;
};

/**
 * The gender represents the gender identity of a person.
 */
export const HrisEmployeeSchedulesAllGender = {
  Male: "male",
  Female: "female",
  Unisex: "unisex",
  Other: "other",
  NotSpecified: "not_specified",
} as const;
/**
 * The gender represents the gender identity of a person.
 */
export type HrisEmployeeSchedulesAllGender = ClosedEnum<
  typeof HrisEmployeeSchedulesAllGender
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeeSchedulesAllCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeeSchedulesAllCurrency = ClosedEnum<
  typeof HrisEmployeeSchedulesAllCurrency
>;

/**
 * Unit of measurement for employee compensation.
 */
export const HrisEmployeeSchedulesAllPaymentUnit = {
  Hour: "hour",
  Week: "week",
  Month: "month",
  Year: "year",
  Paycheck: "paycheck",
  Other: "other",
} as const;
/**
 * Unit of measurement for employee compensation.
 */
export type HrisEmployeeSchedulesAllPaymentUnit = ClosedEnum<
  typeof HrisEmployeeSchedulesAllPaymentUnit
>;

/**
 * Indicates the status of the job.
 */
export const HrisEmployeeSchedulesAllStatus = {
  Active: "active",
  Inactive: "inactive",
  Other: "other",
} as const;
/**
 * Indicates the status of the job.
 */
export type HrisEmployeeSchedulesAllStatus = ClosedEnum<
  typeof HrisEmployeeSchedulesAllStatus
>;

/**
 * The type of address.
 */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type =
  ClosedEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type
  >;

export type HrisEmployeeSchedulesAllLocation = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type
    | null
    | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

export type HrisEmployeeSchedulesAllJob = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * A unique identifier for an object.
   */
  employeeId?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The position and responsibilities of the person within the organization.
   */
  role?: string | null | undefined;
  /**
   * The date on which the employee starts working in their current job role.
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The date on which the employee leaves or is expected to leave their current job role.
   */
  endDate?: RFCDate | null | undefined;
  /**
   * The rate of pay for the employee in their current job role.
   */
  compensationRate?: number | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: HrisEmployeeSchedulesAllCurrency | null | undefined;
  /**
   * Unit of measurement for employee compensation.
   */
  paymentUnit?: HrisEmployeeSchedulesAllPaymentUnit | null | undefined;
  /**
   * The date on which the employee was hired by the organization
   */
  hiredAt?: RFCDate | null | undefined;
  /**
   * Indicates whether this the employee's primary job.
   */
  isPrimary?: boolean | null | undefined;
  /**
   * Indicates whether this the employee has a manager role.
   */
  isManager?: boolean | null | undefined;
  /**
   * Indicates the status of the job.
   */
  status?: HrisEmployeeSchedulesAllStatus | null | undefined;
  location?: HrisEmployeeSchedulesAllLocation | undefined;
};

/**
 * Unit of measurement for employee compensation.
 */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit = {
  Hour: "hour",
  Week: "week",
  Month: "month",
  Year: "year",
  Paycheck: "paycheck",
  Other: "other",
} as const;
/**
 * Unit of measurement for employee compensation.
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit =
  ClosedEnum<typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency = ClosedEnum<
  typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency
>;

/**
 * The FLSA status for this compensation.
 */
export const HrisEmployeeSchedulesAllFlsaStatus = {
  Exempt: "exempt",
  SalariedNonexempt: "salaried-nonexempt",
  Nonexempt: "nonexempt",
  Owner: "owner",
  Other: "other",
} as const;
/**
 * The FLSA status for this compensation.
 */
export type HrisEmployeeSchedulesAllFlsaStatus = ClosedEnum<
  typeof HrisEmployeeSchedulesAllFlsaStatus
>;

/**
 * Frequency of employee compensation.
 */
export const HrisEmployeeSchedulesAllPaymentFrequency = {
  Weekly: "weekly",
  Biweekly: "biweekly",
  Monthly: "monthly",
  ProRata: "pro-rata",
  Other: "other",
} as const;
/**
 * Frequency of employee compensation.
 */
export type HrisEmployeeSchedulesAllPaymentFrequency = ClosedEnum<
  typeof HrisEmployeeSchedulesAllPaymentFrequency
>;

export type HrisEmployeeSchedulesAllCompensation = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The ID of the job to which the compensation belongs.
   */
  jobId?: string | null | undefined;
  /**
   * The amount paid per payment unit.
   */
  rate?: number | null | undefined;
  /**
   * Unit of measurement for employee compensation.
   */
  paymentUnit?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit
    | null
    | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency
    | null
    | undefined;
  /**
   * The FLSA status for this compensation.
   */
  flsaStatus?: HrisEmployeeSchedulesAllFlsaStatus | null | undefined;
  /**
   * The date on which a change to an employee's compensation takes effect.
   */
  effectiveDate?: string | null | undefined;
  /**
   * Frequency of employee compensation.
   */
  paymentFrequency?:
    | HrisEmployeeSchedulesAllPaymentFrequency
    | null
    | undefined;
};

/**
 * The type of address.
 */
export const HrisEmployeeSchedulesAllType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Office: "office",
  Shipping: "shipping",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * The type of address.
 */
export type HrisEmployeeSchedulesAllType = ClosedEnum<
  typeof HrisEmployeeSchedulesAllType
>;

export type HrisEmployeeSchedulesAllAddresses = {
  /**
   * Unique identifier for the address.
   */
  id?: string | null | undefined;
  /**
   * The type of address.
   */
  type?: HrisEmployeeSchedulesAllType | null | undefined;
  /**
   * The address string. Some APIs don't provide structured address data.
   */
  string?: string | null | undefined;
  /**
   * The name of the address.
   */
  name?: string | null | undefined;
  /**
   * Line 1 of the address e.g. number, street, suite, apt #, etc.
   */
  line1?: string | null | undefined;
  /**
   * Line 2 of the address
   */
  line2?: string | null | undefined;
  /**
   * Line 3 of the address
   */
  line3?: string | null | undefined;
  /**
   * Line 4 of the address
   */
  line4?: string | null | undefined;
  /**
   * Street number
   */
  streetNumber?: string | null | undefined;
  /**
   * Name of city.
   */
  city?: string | null | undefined;
  /**
   * Name of state
   */
  state?: string | null | undefined;
  /**
   * Zip code or equivalent.
   */
  postalCode?: string | null | undefined;
  /**
   * country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  /**
   * Latitude of the address
   */
  latitude?: string | null | undefined;
  /**
   * Longitude of the address
   */
  longitude?: string | null | undefined;
  /**
   * Address field that holds a sublocality, such as a county
   */
  county?: string | null | undefined;
  /**
   * Name of the contact person at the address
   */
  contactName?: string | null | undefined;
  /**
   * Salutation of the contact person at the address
   */
  salutation?: string | null | undefined;
  /**
   * Phone number of the address
   */
  phoneNumber?: string | null | undefined;
  /**
   * Fax number of the address
   */
  fax?: string | null | undefined;
  /**
   * Email address of the address
   */
  email?: string | null | undefined;
  /**
   * Website of the address
   */
  website?: string | null | undefined;
  /**
   * Additional notes
   */
  notes?: string | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
};

/**
 * The type of phone number
 */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesType = {
  Primary: "primary",
  Secondary: "secondary",
  Home: "home",
  Work: "work",
  Office: "office",
  Mobile: "mobile",
  Assistant: "assistant",
  Fax: "fax",
  DirectDialIn: "direct-dial-in",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of phone number
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesType = ClosedEnum<
  typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesType
>;

export type HrisEmployeeSchedulesAllPhoneNumbers = {
  /**
   * Unique identifier of the phone number
   */
  id?: string | null | undefined;
  /**
   * The country code of the phone number, e.g. +1
   */
  countryCode?: string | null | undefined;
  /**
   * The area code of the phone number, e.g. 323
   */
  areaCode?: string | null | undefined;
  /**
   * The phone number
   */
  number: string;
  /**
   * The extension of the phone number
   */
  extension?: string | null | undefined;
  /**
   * The type of phone number
   */
  type?: HrisEmployeeSchedulesAllHrisEmployeeSchedulesType | null | undefined;
};

/**
 * Email type
 */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Billing: "billing",
  Other: "other",
} as const;
/**
 * Email type
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType =
  ClosedEnum<typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType>;

export type HrisEmployeeSchedulesAllEmails = {
  /**
   * Unique identifier for the email address
   */
  id?: string | null | undefined;
  /**
   * Email address
   */
  email: string | null;
  /**
   * Email type
   */
  type?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType
    | null
    | undefined;
};

export type HrisEmployeeSchedulesAllValue6 = {};

export type HrisEmployeeSchedulesAllValue4 = {};

export type HrisEmployeeSchedulesAllValue =
  | HrisEmployeeSchedulesAllValue4
  | string
  | number
  | boolean
  | Array<string>
  | Array<HrisEmployeeSchedulesAllValue6>;

export type HrisEmployeeSchedulesAllCustomFields = {
  /**
   * Unique identifier for the custom field.
   */
  id: string | null;
  /**
   * Name of the custom field.
   */
  name?: string | null | undefined;
  /**
   * More information about the custom field
   */
  description?: string | null | undefined;
  value?:
    | HrisEmployeeSchedulesAllValue4
    | string
    | number
    | boolean
    | Array<string>
    | Array<HrisEmployeeSchedulesAllValue6>
    | null
    | undefined;
};

export type HrisEmployeeSchedulesAllSocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

/**
 * The type of bank account.
 */
export const HrisEmployeeSchedulesAllAccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The type of bank account.
 */
export type HrisEmployeeSchedulesAllAccountType = ClosedEnum<
  typeof HrisEmployeeSchedulesAllAccountType
>;

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency =
  ClosedEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency
  >;

export type HrisEmployeeSchedulesAllBankAccounts = {
  /**
   * The name of the bank
   */
  bankName?: string | null | undefined;
  /**
   * A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
   */
  accountNumber?: string | null | undefined;
  /**
   * The name which you used in opening your bank account.
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account.
   */
  accountType?: HrisEmployeeSchedulesAllAccountType | null | undefined;
  /**
   * The International Bank Account Number (IBAN).
   */
  iban?: string | null | undefined;
  /**
   * The Bank Identifier Code (BIC).
   */
  bic?: string | null | undefined;
  /**
   * A routing number is a nine-digit code used to identify a financial institution in the United States.
   */
  routingNumber?: string | null | undefined;
  /**
   * A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
   */
  bsbNumber?: string | null | undefined;
  /**
   * A branch identifier is a unique identifier for a branch of a bank or financial institution.
   */
  branchIdentifier?: string | null | undefined;
  /**
   * A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
   */
  bankCode?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency
    | null
    | undefined;
};

export type HrisEmployeeSchedulesAllProbationPeriod = {
  /**
   * The date that the employee started their probation period at the company.
   */
  startDate?: RFCDate | null | undefined;
  /**
   * The date that the employee ended their probation period at the company.
   */
  endDate?: RFCDate | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisEmployeeSchedulesAllCustomMappings = {};

export type HrisEmployeeSchedulesAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type HrisEmployeeSchedulesAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<HrisEmployeeSchedulesAllExtendPaths> | undefined;
};

export type Employee = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The name used to display the employee, often a combination of their first and last names.
   */
  displayName?: string | null | undefined;
  /**
   * The name the employee prefers to be addressed by, which may be different from their legal name.
   */
  preferredName?: string | null | undefined;
  /**
   * The initials of the person, usually derived from their first, middle, and last names.
   */
  initials?: string | null | undefined;
  /**
   * A formal salutation for the person. For example, 'Mr', 'Mrs'
   */
  salutation?: string | null | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  /**
   * The marital status of the employee.
   */
  maritalStatus?: string | null | undefined;
  partner?: HrisEmployeeSchedulesAllPerson | undefined;
  /**
   * The division the person is currently in. Usually a collection of departments or teams or regions.
   */
  division?: string | null | undefined;
  /**
   * Unique identifier of the division this employee belongs to.
   */
  divisionId?: string | null | undefined;
  /**
   * The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  department?: string | null | undefined;
  /**
   * Unique identifier of the department ID this employee belongs to.
   */
  departmentId?: string | null | undefined;
  /**
   * Name of the department this employee belongs to.
   */
  departmentName?: string | null | undefined;
  /**
   * The team the person is currently in.
   */
  team?: HrisEmployeeSchedulesAllTeam | null | undefined;
  /**
   * The unique identifier of the company.
   */
  companyId?: string | null | undefined;
  /**
   * The name of the company.
   */
  companyName?: string | null | undefined;
  /**
   * A Start Date is the date that the employee started working at the company
   */
  employmentStartDate?: string | null | undefined;
  /**
   * An End Date is the date that the employee ended working at the company
   */
  employmentEndDate?: string | null | undefined;
  /**
   * The reason because the employment ended.
   */
  leavingReason?: HrisEmployeeSchedulesAllLeavingReason | null | undefined;
  /**
   * An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
   */
  employeeNumber?: string | null | undefined;
  /**
   * The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
   */
  employmentStatus?:
    | HrisEmployeeSchedulesAllEmploymentStatus
    | null
    | undefined;
  employmentRole?: HrisEmployeeSchedulesAllEmploymentRole | undefined;
  /**
   * The ethnicity of the employee
   */
  ethnicity?: string | null | undefined;
  manager?: HrisEmployeeSchedulesAllManager | undefined;
  /**
   * Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
   */
  directReports?: Array<string> | null | undefined;
  /**
   * A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
   */
  socialSecurityNumber?: string | null | undefined;
  /**
   * The date of birth of the person.
   */
  birthday?: RFCDate | null | undefined;
  /**
   * The date the person deceased.
   */
  deceasedOn?: RFCDate | null | undefined;
  /**
   * Country code according to ISO 3166-1 alpha-2.
   */
  countryOfBirth?: string | null | undefined;
  /**
   * A description of the object.
   */
  description?: string | null | undefined;
  /**
   * The gender represents the gender identity of a person.
   */
  gender?: HrisEmployeeSchedulesAllGender | null | undefined;
  /**
   * The preferred pronouns of the person.
   */
  pronouns?: string | null | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  preferredLanguage?: string | null | undefined;
  languages?: Array<string> | undefined;
  nationalities?: Array<string> | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
   */
  timezone?: string | null | undefined;
  /**
   * When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
   */
  source?: string | null | undefined;
  /**
   * Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
   */
  sourceId?: string | null | undefined;
  recordUrl?: string | null | undefined;
  jobs?: Array<HrisEmployeeSchedulesAllJob> | null | undefined;
  compensations?:
    | Array<HrisEmployeeSchedulesAllCompensation>
    | null
    | undefined;
  /**
   * Indicates if the employee works from a remote location.
   */
  worksRemote?: boolean | null | undefined;
  addresses?: Array<HrisEmployeeSchedulesAllAddresses> | undefined;
  phoneNumbers?: Array<HrisEmployeeSchedulesAllPhoneNumbers> | undefined;
  emails?: Array<HrisEmployeeSchedulesAllEmails> | undefined;
  customFields?: Array<HrisEmployeeSchedulesAllCustomFields> | undefined;
  socialLinks?: Array<HrisEmployeeSchedulesAllSocialLinks> | undefined;
  bankAccounts?: Array<HrisEmployeeSchedulesAllBankAccounts> | undefined;
  taxCode?: string | null | undefined;
  taxId?: string | null | undefined;
  /**
   * Indicate the employee's dietary preference.
   */
  dietaryPreference?: string | null | undefined;
  /**
   * Indicate the employee's food allergies.
   */
  foodAllergies?: Array<string> | null | undefined;
  probationPeriod?: HrisEmployeeSchedulesAllProbationPeriod | undefined;
  tags?: Array<string> | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: HrisEmployeeSchedulesAllCustomMappings | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<HrisEmployeeSchedulesAllPassThrough> | undefined;
};

export type OddWeeks = {
  hoursMonday?: number | undefined;
  hoursTuesday?: number | undefined;
  hoursWednesday?: number | undefined;
  hoursThursday?: number | undefined;
  hoursFriday?: number | undefined;
  hoursSaturday?: number | undefined;
  hoursSunday?: number | undefined;
};

export type EvenWeeks = {
  hoursMonday?: number | undefined;
  hoursTuesday?: number | undefined;
  hoursWednesday?: number | undefined;
  hoursThursday?: number | undefined;
  hoursFriday?: number | undefined;
  hoursSaturday?: number | undefined;
  hoursSunday?: number | undefined;
};

export type WorkPattern = {
  oddWeeks?: OddWeeks | undefined;
  evenWeeks?: EvenWeeks | undefined;
};

export type Schedules = {
  /**
   * A unique identifier for an object.
   */
  id: string;
  /**
   * The start date, inclusive, of the schedule period.
   */
  startDate: string;
  /**
   * The end date, inclusive, of the schedule period.
   */
  endDate: string;
  workPattern: WorkPattern;
};

export type HrisEmployeeSchedulesAllData = {
  employee?: Employee | undefined;
  schedules?: Array<Schedules> | null | undefined;
};

/**
 * EmployeeSchedules
 */
export type HrisEmployeeSchedulesAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisEmployeeSchedulesAllData;
};

export type HrisEmployeeSchedulesAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * EmployeeSchedules
   */
  twoHundredApplicationJsonObject?:
    | HrisEmployeeSchedulesAllResponseBody
    | undefined;
  /**
   * Unexpected error
   */
  defaultApplicationJsonObject?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody
    | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllGlobals$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisEmployeeSchedulesAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllGlobals$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllGlobals$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllGlobals$ {
  /** @deprecated use `HrisEmployeeSchedulesAllGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllGlobals$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllGlobals$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllGlobals$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllGlobals$Outbound;
}

export function hrisEmployeeSchedulesAllGlobalsToJSON(
  hrisEmployeeSchedulesAllGlobals: HrisEmployeeSchedulesAllGlobals,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllGlobals$outboundSchema.parse(
      hrisEmployeeSchedulesAllGlobals,
    ),
  );
}

export function hrisEmployeeSchedulesAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllGlobals' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllRequest$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllRequest$Outbound = {
  employee_id: string;
  raw: boolean;
  serviceId?: string | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllRequest$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllRequest$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllRequest
> = z.object({
  employeeId: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllRequest$ {
  /** @deprecated use `HrisEmployeeSchedulesAllRequest$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllRequest$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllRequest$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllRequest$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllRequest$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllRequest$Outbound;
}

export function hrisEmployeeSchedulesAllRequestToJSON(
  hrisEmployeeSchedulesAllRequest: HrisEmployeeSchedulesAllRequest,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllRequest$outboundSchema.parse(
      hrisEmployeeSchedulesAllRequest,
    ),
  );
}

export function hrisEmployeeSchedulesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllRequest' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllDetail$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisEmployeeSchedulesAllDetail$Outbound = string | {
  [k: string]: any;
};

/** @internal */
export const HrisEmployeeSchedulesAllDetail$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllDetail$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllDetail$ {
  /** @deprecated use `HrisEmployeeSchedulesAllDetail$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllDetail$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllDetail$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllDetail$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllDetail$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllDetail$Outbound;
}

export function hrisEmployeeSchedulesAllDetailToJSON(
  hrisEmployeeSchedulesAllDetail: HrisEmployeeSchedulesAllDetail,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllDetail$outboundSchema.parse(
      hrisEmployeeSchedulesAllDetail,
    ),
  );
}

export function hrisEmployeeSchedulesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllDetail' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$inboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status_code: z.number().optional(),
    error: z.string().optional(),
    type_name: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "status_code": "statusCode",
      "type_name": "typeName",
    });
  });

/** @internal */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$Outbound =
  {
    status_code?: number | undefined;
    error?: string | undefined;
    type_name?: string | undefined;
    message?: string | undefined;
    detail?: string | { [k: string]: any } | undefined;
    ref?: string | undefined;
  };

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$outboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$Outbound,
    z.ZodTypeDef,
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody
  > = z.object({
    statusCode: z.number().optional(),
    error: z.string().optional(),
    typeName: z.string().optional(),
    message: z.string().optional(),
    detail: z.union([z.string(), z.record(z.any())]).optional(),
    ref: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      statusCode: "status_code",
      typeName: "type_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$Outbound` instead. */
  export type Outbound =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$Outbound;
}

export function hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBodyToJSON(
  hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody:
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$outboundSchema
      .parse(hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody),
  );
}

export function hrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender> =
    z.nativeEnum(HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender);

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender> =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$inboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$Outbound =
  {};

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$outboundSchema:
  z.ZodType<
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$Outbound,
    z.ZodTypeDef,
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$Outbound` instead. */
  export type Outbound =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$Outbound;
}

export function hrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappingsToJSON(
  hrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings:
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$outboundSchema
      .parse(hrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings),
  );
}

export function hrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllPerson$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllPerson,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  gender: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender$inboundSchema,
  ).optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  deceased_on: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  custom_mappings: z.nullable(
    z.lazy(() =>
      HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$inboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_name": "middleName",
    "deceased_on": "deceasedOn",
    "custom_mappings": "customMappings",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllPerson$Outbound = {
  id?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  gender?: string | null | undefined;
  initials?: string | null | undefined;
  birthday?: string | null | undefined;
  deceased_on?: string | null | undefined;
  custom_mappings?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$Outbound
    | null
    | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllPerson$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllPerson$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllPerson
> = z.object({
  id: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  gender: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesGender$outboundSchema,
  ).optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  deceasedOn: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  customMappings: z.nullable(
    z.lazy(() =>
      HrisEmployeeSchedulesAllHrisEmployeeSchedulesCustomMappings$outboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    deceasedOn: "deceased_on",
    customMappings: "custom_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllPerson$ {
  /** @deprecated use `HrisEmployeeSchedulesAllPerson$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllPerson$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllPerson$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllPerson$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllPerson$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllPerson$Outbound;
}

export function hrisEmployeeSchedulesAllPersonToJSON(
  hrisEmployeeSchedulesAllPerson: HrisEmployeeSchedulesAllPerson,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllPerson$outboundSchema.parse(
      hrisEmployeeSchedulesAllPerson,
    ),
  );
}

export function hrisEmployeeSchedulesAllPersonFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllPerson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllPerson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllPerson' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllTeam$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisEmployeeSchedulesAllTeam$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllTeam$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllTeam$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllTeam
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllTeam$ {
  /** @deprecated use `HrisEmployeeSchedulesAllTeam$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllTeam$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllTeam$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllTeam$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllTeam$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllTeam$Outbound;
}

export function hrisEmployeeSchedulesAllTeamToJSON(
  hrisEmployeeSchedulesAllTeam: HrisEmployeeSchedulesAllTeam,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllTeam$outboundSchema.parse(
      hrisEmployeeSchedulesAllTeam,
    ),
  );
}

export function hrisEmployeeSchedulesAllTeamFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllTeam' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllLeavingReason$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllLeavingReason> = z.nativeEnum(
    HrisEmployeeSchedulesAllLeavingReason,
  );

/** @internal */
export const HrisEmployeeSchedulesAllLeavingReason$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllLeavingReason> =
    HrisEmployeeSchedulesAllLeavingReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllLeavingReason$ {
  /** @deprecated use `HrisEmployeeSchedulesAllLeavingReason$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllLeavingReason$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllLeavingReason$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllLeavingReason$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllEmploymentStatus$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllEmploymentStatus> = z
    .nativeEnum(HrisEmployeeSchedulesAllEmploymentStatus);

/** @internal */
export const HrisEmployeeSchedulesAllEmploymentStatus$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllEmploymentStatus> =
    HrisEmployeeSchedulesAllEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllEmploymentStatus$ {
  /** @deprecated use `HrisEmployeeSchedulesAllEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllEmploymentStatus$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllEmploymentStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllEmploymentType$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllEmploymentType> = z.nativeEnum(
    HrisEmployeeSchedulesAllEmploymentType,
  );

/** @internal */
export const HrisEmployeeSchedulesAllEmploymentType$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllEmploymentType> =
    HrisEmployeeSchedulesAllEmploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllEmploymentType$ {
  /** @deprecated use `HrisEmployeeSchedulesAllEmploymentType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllEmploymentType$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllEmploymentType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllEmploymentType$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllEmploymentSubType$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllEmploymentSubType> = z
    .nativeEnum(HrisEmployeeSchedulesAllEmploymentSubType);

/** @internal */
export const HrisEmployeeSchedulesAllEmploymentSubType$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllEmploymentSubType> =
    HrisEmployeeSchedulesAllEmploymentSubType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllEmploymentSubType$ {
  /** @deprecated use `HrisEmployeeSchedulesAllEmploymentSubType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllEmploymentSubType$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllEmploymentSubType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllEmploymentSubType$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllEmploymentRole$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllEmploymentRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(HrisEmployeeSchedulesAllEmploymentType$inboundSchema)
    .optional(),
  sub_type: z.nullable(HrisEmployeeSchedulesAllEmploymentSubType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "sub_type": "subType",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllEmploymentRole$Outbound = {
  type?: string | null | undefined;
  sub_type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllEmploymentRole$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllEmploymentRole$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllEmploymentRole
> = z.object({
  type: z.nullable(HrisEmployeeSchedulesAllEmploymentType$outboundSchema)
    .optional(),
  subType: z.nullable(HrisEmployeeSchedulesAllEmploymentSubType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    subType: "sub_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllEmploymentRole$ {
  /** @deprecated use `HrisEmployeeSchedulesAllEmploymentRole$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllEmploymentRole$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllEmploymentRole$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllEmploymentRole$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllEmploymentRole$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllEmploymentRole$Outbound;
}

export function hrisEmployeeSchedulesAllEmploymentRoleToJSON(
  hrisEmployeeSchedulesAllEmploymentRole:
    HrisEmployeeSchedulesAllEmploymentRole,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllEmploymentRole$outboundSchema.parse(
      hrisEmployeeSchedulesAllEmploymentRole,
    ),
  );
}

export function hrisEmployeeSchedulesAllEmploymentRoleFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllEmploymentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllEmploymentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllEmploymentRole' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus
  > = z.nativeEnum(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus,
  );

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus
  > =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllManager$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllManager,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  employment_status: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "employment_status": "employmentStatus",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllManager$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  email?: string | null | undefined;
  employment_status?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllManager$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllManager$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllManager
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  employmentStatus: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesEmploymentStatus$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    employmentStatus: "employment_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllManager$ {
  /** @deprecated use `HrisEmployeeSchedulesAllManager$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllManager$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllManager$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllManager$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllManager$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllManager$Outbound;
}

export function hrisEmployeeSchedulesAllManagerToJSON(
  hrisEmployeeSchedulesAllManager: HrisEmployeeSchedulesAllManager,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllManager$outboundSchema.parse(
      hrisEmployeeSchedulesAllManager,
    ),
  );
}

export function hrisEmployeeSchedulesAllManagerFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllManager, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllManager$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllManager' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllGender$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllGender
> = z.nativeEnum(HrisEmployeeSchedulesAllGender);

/** @internal */
export const HrisEmployeeSchedulesAllGender$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllGender
> = HrisEmployeeSchedulesAllGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllGender$ {
  /** @deprecated use `HrisEmployeeSchedulesAllGender$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllGender$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllGender$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllGender$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllCurrency$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllCurrency
> = z.nativeEnum(HrisEmployeeSchedulesAllCurrency);

/** @internal */
export const HrisEmployeeSchedulesAllCurrency$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllCurrency
> = HrisEmployeeSchedulesAllCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllCurrency$ {
  /** @deprecated use `HrisEmployeeSchedulesAllCurrency$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllCurrency$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllPaymentUnit$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllPaymentUnit
> = z.nativeEnum(HrisEmployeeSchedulesAllPaymentUnit);

/** @internal */
export const HrisEmployeeSchedulesAllPaymentUnit$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllPaymentUnit> =
    HrisEmployeeSchedulesAllPaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllPaymentUnit$ {
  /** @deprecated use `HrisEmployeeSchedulesAllPaymentUnit$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllPaymentUnit$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllPaymentUnit$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllPaymentUnit$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllStatus
> = z.nativeEnum(HrisEmployeeSchedulesAllStatus);

/** @internal */
export const HrisEmployeeSchedulesAllStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllStatus
> = HrisEmployeeSchedulesAllStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllStatus$ {
  /** @deprecated use `HrisEmployeeSchedulesAllStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllStatus$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllStatus$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type
  > = z.nativeEnum(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type,
  );

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type
  > =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllLocation$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type$inboundSchema,
  ).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllLocation$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllLocation$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllLocation$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllLocation
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponse200Type$outboundSchema,
  ).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllLocation$ {
  /** @deprecated use `HrisEmployeeSchedulesAllLocation$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllLocation$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllLocation$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllLocation$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllLocation$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllLocation$Outbound;
}

export function hrisEmployeeSchedulesAllLocationToJSON(
  hrisEmployeeSchedulesAllLocation: HrisEmployeeSchedulesAllLocation,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllLocation$outboundSchema.parse(
      hrisEmployeeSchedulesAllLocation,
    ),
  );
}

export function hrisEmployeeSchedulesAllLocationFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllLocation' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllJob$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  employee_id: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  compensation_rate: z.nullable(z.number()).optional(),
  currency: z.nullable(HrisEmployeeSchedulesAllCurrency$inboundSchema)
    .optional(),
  payment_unit: z.nullable(HrisEmployeeSchedulesAllPaymentUnit$inboundSchema)
    .optional(),
  hired_at: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  is_primary: z.nullable(z.boolean()).optional(),
  is_manager: z.nullable(z.boolean()).optional(),
  status: z.nullable(HrisEmployeeSchedulesAllStatus$inboundSchema).optional(),
  location: z.lazy(() => HrisEmployeeSchedulesAllLocation$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "start_date": "startDate",
    "end_date": "endDate",
    "compensation_rate": "compensationRate",
    "payment_unit": "paymentUnit",
    "hired_at": "hiredAt",
    "is_primary": "isPrimary",
    "is_manager": "isManager",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllJob$Outbound = {
  id?: string | null | undefined;
  employee_id?: string | null | undefined;
  title?: string | null | undefined;
  role?: string | null | undefined;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
  compensation_rate?: number | null | undefined;
  currency?: string | null | undefined;
  payment_unit?: string | null | undefined;
  hired_at?: string | null | undefined;
  is_primary?: boolean | null | undefined;
  is_manager?: boolean | null | undefined;
  status?: string | null | undefined;
  location?: HrisEmployeeSchedulesAllLocation$Outbound | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllJob$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllJob$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllJob
> = z.object({
  id: z.nullable(z.string()).optional(),
  employeeId: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  role: z.nullable(z.string()).optional(),
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  compensationRate: z.nullable(z.number()).optional(),
  currency: z.nullable(HrisEmployeeSchedulesAllCurrency$outboundSchema)
    .optional(),
  paymentUnit: z.nullable(HrisEmployeeSchedulesAllPaymentUnit$outboundSchema)
    .optional(),
  hiredAt: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  isPrimary: z.nullable(z.boolean()).optional(),
  isManager: z.nullable(z.boolean()).optional(),
  status: z.nullable(HrisEmployeeSchedulesAllStatus$outboundSchema).optional(),
  location: z.lazy(() => HrisEmployeeSchedulesAllLocation$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    startDate: "start_date",
    endDate: "end_date",
    compensationRate: "compensation_rate",
    paymentUnit: "payment_unit",
    hiredAt: "hired_at",
    isPrimary: "is_primary",
    isManager: "is_manager",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllJob$ {
  /** @deprecated use `HrisEmployeeSchedulesAllJob$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllJob$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllJob$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllJob$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllJob$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllJob$Outbound;
}

export function hrisEmployeeSchedulesAllJobToJSON(
  hrisEmployeeSchedulesAllJob: HrisEmployeeSchedulesAllJob,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllJob$outboundSchema.parse(
      hrisEmployeeSchedulesAllJob,
    ),
  );
}

export function hrisEmployeeSchedulesAllJobFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllJob' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit$inboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit
  > = z.nativeEnum(HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit);

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit$outboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit
  > = HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency$inboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency
  > = z.nativeEnum(HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency);

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency$outboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency
  > = HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllFlsaStatus$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllFlsaStatus
> = z.nativeEnum(HrisEmployeeSchedulesAllFlsaStatus);

/** @internal */
export const HrisEmployeeSchedulesAllFlsaStatus$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllFlsaStatus
> = HrisEmployeeSchedulesAllFlsaStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllFlsaStatus$ {
  /** @deprecated use `HrisEmployeeSchedulesAllFlsaStatus$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllFlsaStatus$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllFlsaStatus$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllFlsaStatus$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllPaymentFrequency$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllPaymentFrequency> = z
    .nativeEnum(HrisEmployeeSchedulesAllPaymentFrequency);

/** @internal */
export const HrisEmployeeSchedulesAllPaymentFrequency$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllPaymentFrequency> =
    HrisEmployeeSchedulesAllPaymentFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllPaymentFrequency$ {
  /** @deprecated use `HrisEmployeeSchedulesAllPaymentFrequency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllPaymentFrequency$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllPaymentFrequency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllPaymentFrequency$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllCompensation$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  job_id: z.nullable(z.string()).optional(),
  rate: z.nullable(z.number()).optional(),
  payment_unit: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit$inboundSchema,
  ).optional(),
  currency: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency$inboundSchema,
  ).optional(),
  flsa_status: z.nullable(HrisEmployeeSchedulesAllFlsaStatus$inboundSchema)
    .optional(),
  effective_date: z.nullable(z.string()).optional(),
  payment_frequency: z.nullable(
    HrisEmployeeSchedulesAllPaymentFrequency$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
    "payment_unit": "paymentUnit",
    "flsa_status": "flsaStatus",
    "effective_date": "effectiveDate",
    "payment_frequency": "paymentFrequency",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllCompensation$Outbound = {
  id?: string | null | undefined;
  job_id?: string | null | undefined;
  rate?: number | null | undefined;
  payment_unit?: string | null | undefined;
  currency?: string | null | undefined;
  flsa_status?: string | null | undefined;
  effective_date?: string | null | undefined;
  payment_frequency?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllCompensation$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllCompensation$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllCompensation
> = z.object({
  id: z.nullable(z.string()).optional(),
  jobId: z.nullable(z.string()).optional(),
  rate: z.nullable(z.number()).optional(),
  paymentUnit: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesPaymentUnit$outboundSchema,
  ).optional(),
  currency: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesCurrency$outboundSchema,
  ).optional(),
  flsaStatus: z.nullable(HrisEmployeeSchedulesAllFlsaStatus$outboundSchema)
    .optional(),
  effectiveDate: z.nullable(z.string()).optional(),
  paymentFrequency: z.nullable(
    HrisEmployeeSchedulesAllPaymentFrequency$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
    paymentUnit: "payment_unit",
    flsaStatus: "flsa_status",
    effectiveDate: "effective_date",
    paymentFrequency: "payment_frequency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllCompensation$ {
  /** @deprecated use `HrisEmployeeSchedulesAllCompensation$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllCompensation$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllCompensation$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllCompensation$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllCompensation$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllCompensation$Outbound;
}

export function hrisEmployeeSchedulesAllCompensationToJSON(
  hrisEmployeeSchedulesAllCompensation: HrisEmployeeSchedulesAllCompensation,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllCompensation$outboundSchema.parse(
      hrisEmployeeSchedulesAllCompensation,
    ),
  );
}

export function hrisEmployeeSchedulesAllCompensationFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllCompensation' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllType
> = z.nativeEnum(HrisEmployeeSchedulesAllType);

/** @internal */
export const HrisEmployeeSchedulesAllType$outboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllType
> = HrisEmployeeSchedulesAllType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllType$ {
  /** @deprecated use `HrisEmployeeSchedulesAllType$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllType$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllType$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllType$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllAddresses$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllAddresses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeeSchedulesAllType$inboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  street_number: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postal_code: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contact_name: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phone_number: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  row_version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "street_number": "streetNumber",
    "postal_code": "postalCode",
    "contact_name": "contactName",
    "phone_number": "phoneNumber",
    "row_version": "rowVersion",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllAddresses$Outbound = {
  id?: string | null | undefined;
  type?: string | null | undefined;
  string?: string | null | undefined;
  name?: string | null | undefined;
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  line3?: string | null | undefined;
  line4?: string | null | undefined;
  street_number?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  postal_code?: string | null | undefined;
  country?: string | null | undefined;
  latitude?: string | null | undefined;
  longitude?: string | null | undefined;
  county?: string | null | undefined;
  contact_name?: string | null | undefined;
  salutation?: string | null | undefined;
  phone_number?: string | null | undefined;
  fax?: string | null | undefined;
  email?: string | null | undefined;
  website?: string | null | undefined;
  notes?: string | null | undefined;
  row_version?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllAddresses$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllAddresses$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllAddresses
> = z.object({
  id: z.nullable(z.string()).optional(),
  type: z.nullable(HrisEmployeeSchedulesAllType$outboundSchema).optional(),
  string: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  line3: z.nullable(z.string()).optional(),
  line4: z.nullable(z.string()).optional(),
  streetNumber: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  latitude: z.nullable(z.string()).optional(),
  longitude: z.nullable(z.string()).optional(),
  county: z.nullable(z.string()).optional(),
  contactName: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  fax: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  notes: z.nullable(z.string()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    streetNumber: "street_number",
    postalCode: "postal_code",
    contactName: "contact_name",
    phoneNumber: "phone_number",
    rowVersion: "row_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllAddresses$ {
  /** @deprecated use `HrisEmployeeSchedulesAllAddresses$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllAddresses$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllAddresses$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllAddresses$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllAddresses$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllAddresses$Outbound;
}

export function hrisEmployeeSchedulesAllAddressesToJSON(
  hrisEmployeeSchedulesAllAddresses: HrisEmployeeSchedulesAllAddresses,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllAddresses$outboundSchema.parse(
      hrisEmployeeSchedulesAllAddresses,
    ),
  );
}

export function hrisEmployeeSchedulesAllAddressesFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllAddresses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllAddresses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllAddresses' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesType$inboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesType> = z
    .nativeEnum(HrisEmployeeSchedulesAllHrisEmployeeSchedulesType);

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesType$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesType> =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesType$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesType$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesType$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllPhoneNumbers$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllPhoneNumbers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  country_code: z.nullable(z.string()).optional(),
  area_code: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesType$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "area_code": "areaCode",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllPhoneNumbers$Outbound = {
  id?: string | null | undefined;
  country_code?: string | null | undefined;
  area_code?: string | null | undefined;
  number: string;
  extension?: string | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllPhoneNumbers$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllPhoneNumbers$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllPhoneNumbers
> = z.object({
  id: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  areaCode: z.nullable(z.string()).optional(),
  number: z.string(),
  extension: z.nullable(z.string()).optional(),
  type: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesType$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    areaCode: "area_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllPhoneNumbers$ {
  /** @deprecated use `HrisEmployeeSchedulesAllPhoneNumbers$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllPhoneNumbers$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllPhoneNumbers$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllPhoneNumbers$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllPhoneNumbers$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllPhoneNumbers$Outbound;
}

export function hrisEmployeeSchedulesAllPhoneNumbersToJSON(
  hrisEmployeeSchedulesAllPhoneNumbers: HrisEmployeeSchedulesAllPhoneNumbers,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllPhoneNumbers$outboundSchema.parse(
      hrisEmployeeSchedulesAllPhoneNumbers,
    ),
  );
}

export function hrisEmployeeSchedulesAllPhoneNumbersFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllPhoneNumbers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllPhoneNumbers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllPhoneNumbers' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType
  > = z.nativeEnum(HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType);

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType
  > = HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllEmails$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllEmails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType$inboundSchema,
  ).optional(),
});

/** @internal */
export type HrisEmployeeSchedulesAllEmails$Outbound = {
  id?: string | null | undefined;
  email: string | null;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllEmails$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllEmails$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllEmails
> = z.object({
  id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()),
  type: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseType$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllEmails$ {
  /** @deprecated use `HrisEmployeeSchedulesAllEmails$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllEmails$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllEmails$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllEmails$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllEmails$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllEmails$Outbound;
}

export function hrisEmployeeSchedulesAllEmailsToJSON(
  hrisEmployeeSchedulesAllEmails: HrisEmployeeSchedulesAllEmails,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllEmails$outboundSchema.parse(
      hrisEmployeeSchedulesAllEmails,
    ),
  );
}

export function hrisEmployeeSchedulesAllEmailsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllEmails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllEmails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllEmails' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllValue6$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllValue6,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisEmployeeSchedulesAllValue6$Outbound = {};

/** @internal */
export const HrisEmployeeSchedulesAllValue6$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllValue6$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllValue6
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllValue6$ {
  /** @deprecated use `HrisEmployeeSchedulesAllValue6$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllValue6$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllValue6$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllValue6$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllValue6$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllValue6$Outbound;
}

export function hrisEmployeeSchedulesAllValue6ToJSON(
  hrisEmployeeSchedulesAllValue6: HrisEmployeeSchedulesAllValue6,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllValue6$outboundSchema.parse(
      hrisEmployeeSchedulesAllValue6,
    ),
  );
}

export function hrisEmployeeSchedulesAllValue6FromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllValue6' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllValue4$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllValue4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisEmployeeSchedulesAllValue4$Outbound = {};

/** @internal */
export const HrisEmployeeSchedulesAllValue4$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllValue4$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllValue4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllValue4$ {
  /** @deprecated use `HrisEmployeeSchedulesAllValue4$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllValue4$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllValue4$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllValue4$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllValue4$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllValue4$Outbound;
}

export function hrisEmployeeSchedulesAllValue4ToJSON(
  hrisEmployeeSchedulesAllValue4: HrisEmployeeSchedulesAllValue4,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllValue4$outboundSchema.parse(
      hrisEmployeeSchedulesAllValue4,
    ),
  );
}

export function hrisEmployeeSchedulesAllValue4FromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllValue4' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllValue$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisEmployeeSchedulesAllValue4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => HrisEmployeeSchedulesAllValue6$inboundSchema)),
]);

/** @internal */
export type HrisEmployeeSchedulesAllValue$Outbound =
  | HrisEmployeeSchedulesAllValue4$Outbound
  | string
  | number
  | boolean
  | Array<string>
  | Array<HrisEmployeeSchedulesAllValue6$Outbound>;

/** @internal */
export const HrisEmployeeSchedulesAllValue$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllValue$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllValue
> = z.union([
  z.lazy(() => HrisEmployeeSchedulesAllValue4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.lazy(() => HrisEmployeeSchedulesAllValue6$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllValue$ {
  /** @deprecated use `HrisEmployeeSchedulesAllValue$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllValue$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllValue$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllValue$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllValue$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllValue$Outbound;
}

export function hrisEmployeeSchedulesAllValueToJSON(
  hrisEmployeeSchedulesAllValue: HrisEmployeeSchedulesAllValue,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllValue$outboundSchema.parse(
      hrisEmployeeSchedulesAllValue,
    ),
  );
}

export function hrisEmployeeSchedulesAllValueFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllValue' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllCustomFields$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllCustomFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => HrisEmployeeSchedulesAllValue4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => HrisEmployeeSchedulesAllValue6$inboundSchema)),
    ]),
  ).optional(),
});

/** @internal */
export type HrisEmployeeSchedulesAllCustomFields$Outbound = {
  id: string | null;
  name?: string | null | undefined;
  description?: string | null | undefined;
  value?:
    | HrisEmployeeSchedulesAllValue4$Outbound
    | string
    | number
    | boolean
    | Array<string>
    | Array<HrisEmployeeSchedulesAllValue6$Outbound>
    | null
    | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllCustomFields$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllCustomFields$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllCustomFields
> = z.object({
  id: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  value: z.nullable(
    z.union([
      z.lazy(() => HrisEmployeeSchedulesAllValue4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.lazy(() => HrisEmployeeSchedulesAllValue6$outboundSchema)),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllCustomFields$ {
  /** @deprecated use `HrisEmployeeSchedulesAllCustomFields$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllCustomFields$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllCustomFields$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllCustomFields$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllCustomFields$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllCustomFields$Outbound;
}

export function hrisEmployeeSchedulesAllCustomFieldsToJSON(
  hrisEmployeeSchedulesAllCustomFields: HrisEmployeeSchedulesAllCustomFields,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllCustomFields$outboundSchema.parse(
      hrisEmployeeSchedulesAllCustomFields,
    ),
  );
}

export function hrisEmployeeSchedulesAllCustomFieldsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllCustomFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllCustomFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllCustomFields' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllSocialLinks$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllSocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type HrisEmployeeSchedulesAllSocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllSocialLinks$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllSocialLinks$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllSocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllSocialLinks$ {
  /** @deprecated use `HrisEmployeeSchedulesAllSocialLinks$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllSocialLinks$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllSocialLinks$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllSocialLinks$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllSocialLinks$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllSocialLinks$Outbound;
}

export function hrisEmployeeSchedulesAllSocialLinksToJSON(
  hrisEmployeeSchedulesAllSocialLinks: HrisEmployeeSchedulesAllSocialLinks,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllSocialLinks$outboundSchema.parse(
      hrisEmployeeSchedulesAllSocialLinks,
    ),
  );
}

export function hrisEmployeeSchedulesAllSocialLinksFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllSocialLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllSocialLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllSocialLinks' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllAccountType$inboundSchema: z.ZodNativeEnum<
  typeof HrisEmployeeSchedulesAllAccountType
> = z.nativeEnum(HrisEmployeeSchedulesAllAccountType);

/** @internal */
export const HrisEmployeeSchedulesAllAccountType$outboundSchema:
  z.ZodNativeEnum<typeof HrisEmployeeSchedulesAllAccountType> =
    HrisEmployeeSchedulesAllAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllAccountType$ {
  /** @deprecated use `HrisEmployeeSchedulesAllAccountType$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllAccountType$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllAccountType$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllAccountType$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency$inboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency
  > = z.nativeEnum(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency,
  );

/** @internal */
export const HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency$outboundSchema:
  z.ZodNativeEnum<
    typeof HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency
  > =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency$ {
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency$outboundSchema;
}

/** @internal */
export const HrisEmployeeSchedulesAllBankAccounts$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllBankAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(HrisEmployeeSchedulesAllAccountType$inboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllBankAccounts$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllBankAccounts$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllBankAccounts$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllBankAccounts
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(HrisEmployeeSchedulesAllAccountType$outboundSchema)
    .optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseCurrency$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllBankAccounts$ {
  /** @deprecated use `HrisEmployeeSchedulesAllBankAccounts$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllBankAccounts$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllBankAccounts$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllBankAccounts$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllBankAccounts$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllBankAccounts$Outbound;
}

export function hrisEmployeeSchedulesAllBankAccountsToJSON(
  hrisEmployeeSchedulesAllBankAccounts: HrisEmployeeSchedulesAllBankAccounts,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllBankAccounts$outboundSchema.parse(
      hrisEmployeeSchedulesAllBankAccounts,
    ),
  );
}

export function hrisEmployeeSchedulesAllBankAccountsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllBankAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllBankAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllBankAccounts' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllProbationPeriod$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllProbationPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  end_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllProbationPeriod$Outbound = {
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllProbationPeriod$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllProbationPeriod$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllProbationPeriod
> = z.object({
  startDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  endDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllProbationPeriod$ {
  /** @deprecated use `HrisEmployeeSchedulesAllProbationPeriod$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllProbationPeriod$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllProbationPeriod$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllProbationPeriod$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllProbationPeriod$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllProbationPeriod$Outbound;
}

export function hrisEmployeeSchedulesAllProbationPeriodToJSON(
  hrisEmployeeSchedulesAllProbationPeriod:
    HrisEmployeeSchedulesAllProbationPeriod,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllProbationPeriod$outboundSchema.parse(
      hrisEmployeeSchedulesAllProbationPeriod,
    ),
  );
}

export function hrisEmployeeSchedulesAllProbationPeriodFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisEmployeeSchedulesAllProbationPeriod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllProbationPeriod$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisEmployeeSchedulesAllProbationPeriod' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllCustomMappings$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisEmployeeSchedulesAllCustomMappings$Outbound = {};

/** @internal */
export const HrisEmployeeSchedulesAllCustomMappings$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllCustomMappings$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllCustomMappings$ {
  /** @deprecated use `HrisEmployeeSchedulesAllCustomMappings$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllCustomMappings$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllCustomMappings$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllCustomMappings$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllCustomMappings$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllCustomMappings$Outbound;
}

export function hrisEmployeeSchedulesAllCustomMappingsToJSON(
  hrisEmployeeSchedulesAllCustomMappings:
    HrisEmployeeSchedulesAllCustomMappings,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllCustomMappings$outboundSchema.parse(
      hrisEmployeeSchedulesAllCustomMappings,
    ),
  );
}

export function hrisEmployeeSchedulesAllCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllExtendPaths$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type HrisEmployeeSchedulesAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllExtendPaths$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllExtendPaths$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllExtendPaths$ {
  /** @deprecated use `HrisEmployeeSchedulesAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllExtendPaths$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllExtendPaths$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllExtendPaths$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllExtendPaths$Outbound;
}

export function hrisEmployeeSchedulesAllExtendPathsToJSON(
  hrisEmployeeSchedulesAllExtendPaths: HrisEmployeeSchedulesAllExtendPaths,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllExtendPaths$outboundSchema.parse(
      hrisEmployeeSchedulesAllExtendPaths,
    ),
  );
}

export function hrisEmployeeSchedulesAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllPassThrough$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllExtendPaths$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?:
    | Array<HrisEmployeeSchedulesAllExtendPaths$Outbound>
    | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllPassThrough$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllPassThrough$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllExtendPaths$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllPassThrough$ {
  /** @deprecated use `HrisEmployeeSchedulesAllPassThrough$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllPassThrough$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllPassThrough$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllPassThrough$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllPassThrough$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllPassThrough$Outbound;
}

export function hrisEmployeeSchedulesAllPassThroughToJSON(
  hrisEmployeeSchedulesAllPassThrough: HrisEmployeeSchedulesAllPassThrough,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllPassThrough$outboundSchema.parse(
      hrisEmployeeSchedulesAllPassThrough,
    ),
  );
}

export function hrisEmployeeSchedulesAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllPassThrough' from JSON`,
  );
}

/** @internal */
export const Employee$inboundSchema: z.ZodType<
  Employee,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  display_name: z.nullable(z.string()).optional(),
  preferred_name: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  marital_status: z.nullable(z.string()).optional(),
  partner: z.lazy(() => HrisEmployeeSchedulesAllPerson$inboundSchema)
    .optional(),
  division: z.nullable(z.string()).optional(),
  division_id: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  department_id: z.nullable(z.string()).optional(),
  department_name: z.nullable(z.string()).optional(),
  team: z.nullable(z.lazy(() => HrisEmployeeSchedulesAllTeam$inboundSchema))
    .optional(),
  company_id: z.nullable(z.string()).optional(),
  company_name: z.nullable(z.string()).optional(),
  employment_start_date: z.nullable(z.string()).optional(),
  employment_end_date: z.nullable(z.string()).optional(),
  leaving_reason: z.nullable(
    HrisEmployeeSchedulesAllLeavingReason$inboundSchema,
  ).optional(),
  employee_number: z.nullable(z.string()).optional(),
  employment_status: z.nullable(
    HrisEmployeeSchedulesAllEmploymentStatus$inboundSchema,
  ).optional(),
  employment_role: z.lazy(() =>
    HrisEmployeeSchedulesAllEmploymentRole$inboundSchema
  ).optional(),
  ethnicity: z.nullable(z.string()).optional(),
  manager: z.lazy(() => HrisEmployeeSchedulesAllManager$inboundSchema)
    .optional(),
  direct_reports: z.nullable(z.array(z.string())).optional(),
  social_security_number: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  deceased_on: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  country_of_birth: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeeSchedulesAllGender$inboundSchema).optional(),
  pronouns: z.nullable(z.string()).optional(),
  preferred_language: z.nullable(z.string()).optional(),
  languages: z.array(z.string()).optional(),
  nationalities: z.array(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  source_id: z.nullable(z.string()).optional(),
  record_url: z.nullable(z.string()).optional(),
  jobs: z.nullable(
    z.array(z.lazy(() => HrisEmployeeSchedulesAllJob$inboundSchema)),
  ).optional(),
  compensations: z.nullable(
    z.array(z.lazy(() => HrisEmployeeSchedulesAllCompensation$inboundSchema)),
  ).optional(),
  works_remote: z.nullable(z.boolean()).optional(),
  addresses: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllAddresses$inboundSchema),
  ).optional(),
  phone_numbers: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllPhoneNumbers$inboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisEmployeeSchedulesAllEmails$inboundSchema))
    .optional(),
  custom_fields: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllCustomFields$inboundSchema),
  ).optional(),
  social_links: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllSocialLinks$inboundSchema),
  ).optional(),
  bank_accounts: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllBankAccounts$inboundSchema),
  ).optional(),
  tax_code: z.nullable(z.string()).optional(),
  tax_id: z.nullable(z.string()).optional(),
  dietary_preference: z.nullable(z.string()).optional(),
  food_allergies: z.nullable(z.array(z.string())).optional(),
  probation_period: z.lazy(() =>
    HrisEmployeeSchedulesAllProbationPeriod$inboundSchema
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => HrisEmployeeSchedulesAllCustomMappings$inboundSchema),
  ).optional(),
  row_version: z.nullable(z.string()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllPassThrough$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_name": "middleName",
    "display_name": "displayName",
    "preferred_name": "preferredName",
    "marital_status": "maritalStatus",
    "division_id": "divisionId",
    "department_id": "departmentId",
    "department_name": "departmentName",
    "company_id": "companyId",
    "company_name": "companyName",
    "employment_start_date": "employmentStartDate",
    "employment_end_date": "employmentEndDate",
    "leaving_reason": "leavingReason",
    "employee_number": "employeeNumber",
    "employment_status": "employmentStatus",
    "employment_role": "employmentRole",
    "direct_reports": "directReports",
    "social_security_number": "socialSecurityNumber",
    "deceased_on": "deceasedOn",
    "country_of_birth": "countryOfBirth",
    "preferred_language": "preferredLanguage",
    "photo_url": "photoUrl",
    "source_id": "sourceId",
    "record_url": "recordUrl",
    "works_remote": "worksRemote",
    "phone_numbers": "phoneNumbers",
    "custom_fields": "customFields",
    "social_links": "socialLinks",
    "bank_accounts": "bankAccounts",
    "tax_code": "taxCode",
    "tax_id": "taxId",
    "dietary_preference": "dietaryPreference",
    "food_allergies": "foodAllergies",
    "probation_period": "probationPeriod",
    "custom_mappings": "customMappings",
    "row_version": "rowVersion",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type Employee$Outbound = {
  id?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  display_name?: string | null | undefined;
  preferred_name?: string | null | undefined;
  initials?: string | null | undefined;
  salutation?: string | null | undefined;
  title?: string | null | undefined;
  marital_status?: string | null | undefined;
  partner?: HrisEmployeeSchedulesAllPerson$Outbound | undefined;
  division?: string | null | undefined;
  division_id?: string | null | undefined;
  department?: string | null | undefined;
  department_id?: string | null | undefined;
  department_name?: string | null | undefined;
  team?: HrisEmployeeSchedulesAllTeam$Outbound | null | undefined;
  company_id?: string | null | undefined;
  company_name?: string | null | undefined;
  employment_start_date?: string | null | undefined;
  employment_end_date?: string | null | undefined;
  leaving_reason?: string | null | undefined;
  employee_number?: string | null | undefined;
  employment_status?: string | null | undefined;
  employment_role?: HrisEmployeeSchedulesAllEmploymentRole$Outbound | undefined;
  ethnicity?: string | null | undefined;
  manager?: HrisEmployeeSchedulesAllManager$Outbound | undefined;
  direct_reports?: Array<string> | null | undefined;
  social_security_number?: string | null | undefined;
  birthday?: string | null | undefined;
  deceased_on?: string | null | undefined;
  country_of_birth?: string | null | undefined;
  description?: string | null | undefined;
  gender?: string | null | undefined;
  pronouns?: string | null | undefined;
  preferred_language?: string | null | undefined;
  languages?: Array<string> | undefined;
  nationalities?: Array<string> | undefined;
  photo_url?: string | null | undefined;
  timezone?: string | null | undefined;
  source?: string | null | undefined;
  source_id?: string | null | undefined;
  record_url?: string | null | undefined;
  jobs?: Array<HrisEmployeeSchedulesAllJob$Outbound> | null | undefined;
  compensations?:
    | Array<HrisEmployeeSchedulesAllCompensation$Outbound>
    | null
    | undefined;
  works_remote?: boolean | null | undefined;
  addresses?: Array<HrisEmployeeSchedulesAllAddresses$Outbound> | undefined;
  phone_numbers?:
    | Array<HrisEmployeeSchedulesAllPhoneNumbers$Outbound>
    | undefined;
  emails?: Array<HrisEmployeeSchedulesAllEmails$Outbound> | undefined;
  custom_fields?:
    | Array<HrisEmployeeSchedulesAllCustomFields$Outbound>
    | undefined;
  social_links?:
    | Array<HrisEmployeeSchedulesAllSocialLinks$Outbound>
    | undefined;
  bank_accounts?:
    | Array<HrisEmployeeSchedulesAllBankAccounts$Outbound>
    | undefined;
  tax_code?: string | null | undefined;
  tax_id?: string | null | undefined;
  dietary_preference?: string | null | undefined;
  food_allergies?: Array<string> | null | undefined;
  probation_period?:
    | HrisEmployeeSchedulesAllProbationPeriod$Outbound
    | undefined;
  tags?: Array<string> | null | undefined;
  custom_mappings?:
    | HrisEmployeeSchedulesAllCustomMappings$Outbound
    | null
    | undefined;
  row_version?: string | null | undefined;
  deleted?: boolean | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?:
    | Array<HrisEmployeeSchedulesAllPassThrough$Outbound>
    | undefined;
};

/** @internal */
export const Employee$outboundSchema: z.ZodType<
  Employee$Outbound,
  z.ZodTypeDef,
  Employee
> = z.object({
  id: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  displayName: z.nullable(z.string()).optional(),
  preferredName: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  salutation: z.nullable(z.string()).optional(),
  title: z.nullable(z.string()).optional(),
  maritalStatus: z.nullable(z.string()).optional(),
  partner: z.lazy(() => HrisEmployeeSchedulesAllPerson$outboundSchema)
    .optional(),
  division: z.nullable(z.string()).optional(),
  divisionId: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  departmentId: z.nullable(z.string()).optional(),
  departmentName: z.nullable(z.string()).optional(),
  team: z.nullable(z.lazy(() => HrisEmployeeSchedulesAllTeam$outboundSchema))
    .optional(),
  companyId: z.nullable(z.string()).optional(),
  companyName: z.nullable(z.string()).optional(),
  employmentStartDate: z.nullable(z.string()).optional(),
  employmentEndDate: z.nullable(z.string()).optional(),
  leavingReason: z.nullable(
    HrisEmployeeSchedulesAllLeavingReason$outboundSchema,
  ).optional(),
  employeeNumber: z.nullable(z.string()).optional(),
  employmentStatus: z.nullable(
    HrisEmployeeSchedulesAllEmploymentStatus$outboundSchema,
  ).optional(),
  employmentRole: z.lazy(() =>
    HrisEmployeeSchedulesAllEmploymentRole$outboundSchema
  ).optional(),
  ethnicity: z.nullable(z.string()).optional(),
  manager: z.lazy(() => HrisEmployeeSchedulesAllManager$outboundSchema)
    .optional(),
  directReports: z.nullable(z.array(z.string())).optional(),
  socialSecurityNumber: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  deceasedOn: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  countryOfBirth: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  gender: z.nullable(HrisEmployeeSchedulesAllGender$outboundSchema).optional(),
  pronouns: z.nullable(z.string()).optional(),
  preferredLanguage: z.nullable(z.string()).optional(),
  languages: z.array(z.string()).optional(),
  nationalities: z.array(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  source: z.nullable(z.string()).optional(),
  sourceId: z.nullable(z.string()).optional(),
  recordUrl: z.nullable(z.string()).optional(),
  jobs: z.nullable(
    z.array(z.lazy(() => HrisEmployeeSchedulesAllJob$outboundSchema)),
  ).optional(),
  compensations: z.nullable(
    z.array(z.lazy(() => HrisEmployeeSchedulesAllCompensation$outboundSchema)),
  ).optional(),
  worksRemote: z.nullable(z.boolean()).optional(),
  addresses: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllAddresses$outboundSchema),
  ).optional(),
  phoneNumbers: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllPhoneNumbers$outboundSchema),
  ).optional(),
  emails: z.array(z.lazy(() => HrisEmployeeSchedulesAllEmails$outboundSchema))
    .optional(),
  customFields: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllCustomFields$outboundSchema),
  ).optional(),
  socialLinks: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllSocialLinks$outboundSchema),
  ).optional(),
  bankAccounts: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllBankAccounts$outboundSchema),
  ).optional(),
  taxCode: z.nullable(z.string()).optional(),
  taxId: z.nullable(z.string()).optional(),
  dietaryPreference: z.nullable(z.string()).optional(),
  foodAllergies: z.nullable(z.array(z.string())).optional(),
  probationPeriod: z.lazy(() =>
    HrisEmployeeSchedulesAllProbationPeriod$outboundSchema
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  customMappings: z.nullable(
    z.lazy(() => HrisEmployeeSchedulesAllCustomMappings$outboundSchema),
  ).optional(),
  rowVersion: z.nullable(z.string()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(
    z.lazy(() => HrisEmployeeSchedulesAllPassThrough$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    displayName: "display_name",
    preferredName: "preferred_name",
    maritalStatus: "marital_status",
    divisionId: "division_id",
    departmentId: "department_id",
    departmentName: "department_name",
    companyId: "company_id",
    companyName: "company_name",
    employmentStartDate: "employment_start_date",
    employmentEndDate: "employment_end_date",
    leavingReason: "leaving_reason",
    employeeNumber: "employee_number",
    employmentStatus: "employment_status",
    employmentRole: "employment_role",
    directReports: "direct_reports",
    socialSecurityNumber: "social_security_number",
    deceasedOn: "deceased_on",
    countryOfBirth: "country_of_birth",
    preferredLanguage: "preferred_language",
    photoUrl: "photo_url",
    sourceId: "source_id",
    recordUrl: "record_url",
    worksRemote: "works_remote",
    phoneNumbers: "phone_numbers",
    customFields: "custom_fields",
    socialLinks: "social_links",
    bankAccounts: "bank_accounts",
    taxCode: "tax_code",
    taxId: "tax_id",
    dietaryPreference: "dietary_preference",
    foodAllergies: "food_allergies",
    probationPeriod: "probation_period",
    customMappings: "custom_mappings",
    rowVersion: "row_version",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Employee$ {
  /** @deprecated use `Employee$inboundSchema` instead. */
  export const inboundSchema = Employee$inboundSchema;
  /** @deprecated use `Employee$outboundSchema` instead. */
  export const outboundSchema = Employee$outboundSchema;
  /** @deprecated use `Employee$Outbound` instead. */
  export type Outbound = Employee$Outbound;
}

export function employeeToJSON(employee: Employee): string {
  return JSON.stringify(Employee$outboundSchema.parse(employee));
}

export function employeeFromJSON(
  jsonString: string,
): SafeParseResult<Employee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Employee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Employee' from JSON`,
  );
}

/** @internal */
export const OddWeeks$inboundSchema: z.ZodType<
  OddWeeks,
  z.ZodTypeDef,
  unknown
> = z.object({
  hours_monday: z.number().optional(),
  hours_tuesday: z.number().optional(),
  hours_wednesday: z.number().optional(),
  hours_thursday: z.number().optional(),
  hours_friday: z.number().optional(),
  hours_saturday: z.number().optional(),
  hours_sunday: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "hours_monday": "hoursMonday",
    "hours_tuesday": "hoursTuesday",
    "hours_wednesday": "hoursWednesday",
    "hours_thursday": "hoursThursday",
    "hours_friday": "hoursFriday",
    "hours_saturday": "hoursSaturday",
    "hours_sunday": "hoursSunday",
  });
});

/** @internal */
export type OddWeeks$Outbound = {
  hours_monday?: number | undefined;
  hours_tuesday?: number | undefined;
  hours_wednesday?: number | undefined;
  hours_thursday?: number | undefined;
  hours_friday?: number | undefined;
  hours_saturday?: number | undefined;
  hours_sunday?: number | undefined;
};

/** @internal */
export const OddWeeks$outboundSchema: z.ZodType<
  OddWeeks$Outbound,
  z.ZodTypeDef,
  OddWeeks
> = z.object({
  hoursMonday: z.number().optional(),
  hoursTuesday: z.number().optional(),
  hoursWednesday: z.number().optional(),
  hoursThursday: z.number().optional(),
  hoursFriday: z.number().optional(),
  hoursSaturday: z.number().optional(),
  hoursSunday: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    hoursMonday: "hours_monday",
    hoursTuesday: "hours_tuesday",
    hoursWednesday: "hours_wednesday",
    hoursThursday: "hours_thursday",
    hoursFriday: "hours_friday",
    hoursSaturday: "hours_saturday",
    hoursSunday: "hours_sunday",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OddWeeks$ {
  /** @deprecated use `OddWeeks$inboundSchema` instead. */
  export const inboundSchema = OddWeeks$inboundSchema;
  /** @deprecated use `OddWeeks$outboundSchema` instead. */
  export const outboundSchema = OddWeeks$outboundSchema;
  /** @deprecated use `OddWeeks$Outbound` instead. */
  export type Outbound = OddWeeks$Outbound;
}

export function oddWeeksToJSON(oddWeeks: OddWeeks): string {
  return JSON.stringify(OddWeeks$outboundSchema.parse(oddWeeks));
}

export function oddWeeksFromJSON(
  jsonString: string,
): SafeParseResult<OddWeeks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OddWeeks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OddWeeks' from JSON`,
  );
}

/** @internal */
export const EvenWeeks$inboundSchema: z.ZodType<
  EvenWeeks,
  z.ZodTypeDef,
  unknown
> = z.object({
  hours_monday: z.number().optional(),
  hours_tuesday: z.number().optional(),
  hours_wednesday: z.number().optional(),
  hours_thursday: z.number().optional(),
  hours_friday: z.number().optional(),
  hours_saturday: z.number().optional(),
  hours_sunday: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "hours_monday": "hoursMonday",
    "hours_tuesday": "hoursTuesday",
    "hours_wednesday": "hoursWednesday",
    "hours_thursday": "hoursThursday",
    "hours_friday": "hoursFriday",
    "hours_saturday": "hoursSaturday",
    "hours_sunday": "hoursSunday",
  });
});

/** @internal */
export type EvenWeeks$Outbound = {
  hours_monday?: number | undefined;
  hours_tuesday?: number | undefined;
  hours_wednesday?: number | undefined;
  hours_thursday?: number | undefined;
  hours_friday?: number | undefined;
  hours_saturday?: number | undefined;
  hours_sunday?: number | undefined;
};

/** @internal */
export const EvenWeeks$outboundSchema: z.ZodType<
  EvenWeeks$Outbound,
  z.ZodTypeDef,
  EvenWeeks
> = z.object({
  hoursMonday: z.number().optional(),
  hoursTuesday: z.number().optional(),
  hoursWednesday: z.number().optional(),
  hoursThursday: z.number().optional(),
  hoursFriday: z.number().optional(),
  hoursSaturday: z.number().optional(),
  hoursSunday: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    hoursMonday: "hours_monday",
    hoursTuesday: "hours_tuesday",
    hoursWednesday: "hours_wednesday",
    hoursThursday: "hours_thursday",
    hoursFriday: "hours_friday",
    hoursSaturday: "hours_saturday",
    hoursSunday: "hours_sunday",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvenWeeks$ {
  /** @deprecated use `EvenWeeks$inboundSchema` instead. */
  export const inboundSchema = EvenWeeks$inboundSchema;
  /** @deprecated use `EvenWeeks$outboundSchema` instead. */
  export const outboundSchema = EvenWeeks$outboundSchema;
  /** @deprecated use `EvenWeeks$Outbound` instead. */
  export type Outbound = EvenWeeks$Outbound;
}

export function evenWeeksToJSON(evenWeeks: EvenWeeks): string {
  return JSON.stringify(EvenWeeks$outboundSchema.parse(evenWeeks));
}

export function evenWeeksFromJSON(
  jsonString: string,
): SafeParseResult<EvenWeeks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvenWeeks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvenWeeks' from JSON`,
  );
}

/** @internal */
export const WorkPattern$inboundSchema: z.ZodType<
  WorkPattern,
  z.ZodTypeDef,
  unknown
> = z.object({
  odd_weeks: z.lazy(() => OddWeeks$inboundSchema).optional(),
  even_weeks: z.lazy(() => EvenWeeks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "odd_weeks": "oddWeeks",
    "even_weeks": "evenWeeks",
  });
});

/** @internal */
export type WorkPattern$Outbound = {
  odd_weeks?: OddWeeks$Outbound | undefined;
  even_weeks?: EvenWeeks$Outbound | undefined;
};

/** @internal */
export const WorkPattern$outboundSchema: z.ZodType<
  WorkPattern$Outbound,
  z.ZodTypeDef,
  WorkPattern
> = z.object({
  oddWeeks: z.lazy(() => OddWeeks$outboundSchema).optional(),
  evenWeeks: z.lazy(() => EvenWeeks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    oddWeeks: "odd_weeks",
    evenWeeks: "even_weeks",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkPattern$ {
  /** @deprecated use `WorkPattern$inboundSchema` instead. */
  export const inboundSchema = WorkPattern$inboundSchema;
  /** @deprecated use `WorkPattern$outboundSchema` instead. */
  export const outboundSchema = WorkPattern$outboundSchema;
  /** @deprecated use `WorkPattern$Outbound` instead. */
  export type Outbound = WorkPattern$Outbound;
}

export function workPatternToJSON(workPattern: WorkPattern): string {
  return JSON.stringify(WorkPattern$outboundSchema.parse(workPattern));
}

export function workPatternFromJSON(
  jsonString: string,
): SafeParseResult<WorkPattern, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkPattern$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkPattern' from JSON`,
  );
}

/** @internal */
export const Schedules$inboundSchema: z.ZodType<
  Schedules,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  start_date: z.string(),
  end_date: z.string(),
  work_pattern: z.lazy(() => WorkPattern$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "work_pattern": "workPattern",
  });
});

/** @internal */
export type Schedules$Outbound = {
  id: string;
  start_date: string;
  end_date: string;
  work_pattern: WorkPattern$Outbound;
};

/** @internal */
export const Schedules$outboundSchema: z.ZodType<
  Schedules$Outbound,
  z.ZodTypeDef,
  Schedules
> = z.object({
  id: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  workPattern: z.lazy(() => WorkPattern$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    workPattern: "work_pattern",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schedules$ {
  /** @deprecated use `Schedules$inboundSchema` instead. */
  export const inboundSchema = Schedules$inboundSchema;
  /** @deprecated use `Schedules$outboundSchema` instead. */
  export const outboundSchema = Schedules$outboundSchema;
  /** @deprecated use `Schedules$Outbound` instead. */
  export type Outbound = Schedules$Outbound;
}

export function schedulesToJSON(schedules: Schedules): string {
  return JSON.stringify(Schedules$outboundSchema.parse(schedules));
}

export function schedulesFromJSON(
  jsonString: string,
): SafeParseResult<Schedules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Schedules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Schedules' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllData$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee: z.lazy(() => Employee$inboundSchema).optional(),
  schedules: z.nullable(z.array(z.lazy(() => Schedules$inboundSchema)))
    .optional(),
});

/** @internal */
export type HrisEmployeeSchedulesAllData$Outbound = {
  employee?: Employee$Outbound | undefined;
  schedules?: Array<Schedules$Outbound> | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllData$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllData$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllData
> = z.object({
  employee: z.lazy(() => Employee$outboundSchema).optional(),
  schedules: z.nullable(z.array(z.lazy(() => Schedules$outboundSchema)))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllData$ {
  /** @deprecated use `HrisEmployeeSchedulesAllData$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllData$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllData$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllData$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllData$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllData$Outbound;
}

export function hrisEmployeeSchedulesAllDataToJSON(
  hrisEmployeeSchedulesAllData: HrisEmployeeSchedulesAllData,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllData$outboundSchema.parse(
      hrisEmployeeSchedulesAllData,
    ),
  );
}

export function hrisEmployeeSchedulesAllDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllData' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllResponseBody$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisEmployeeSchedulesAllData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisEmployeeSchedulesAllData$Outbound;
};

/** @internal */
export const HrisEmployeeSchedulesAllResponseBody$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllResponseBody$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisEmployeeSchedulesAllData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllResponseBody$ {
  /** @deprecated use `HrisEmployeeSchedulesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisEmployeeSchedulesAllResponseBody$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisEmployeeSchedulesAllResponseBody$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllResponseBody$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllResponseBody$Outbound;
}

export function hrisEmployeeSchedulesAllResponseBodyToJSON(
  hrisEmployeeSchedulesAllResponseBody: HrisEmployeeSchedulesAllResponseBody,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllResponseBody$outboundSchema.parse(
      hrisEmployeeSchedulesAllResponseBody,
    ),
  );
}

export function hrisEmployeeSchedulesAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HrisEmployeeSchedulesAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllResponse$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  "200_application/json_object": z.lazy(() =>
    HrisEmployeeSchedulesAllResponseBody$inboundSchema
  ).optional(),
  "default_application/json_object": z.lazy(() =>
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "200_application/json_object": "twoHundredApplicationJsonObject",
    "default_application/json_object": "defaultApplicationJsonObject",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  "200_application/json_object"?:
    | HrisEmployeeSchedulesAllResponseBody$Outbound
    | undefined;
  "default_application/json_object"?:
    | HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$Outbound
    | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllResponse$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllResponse$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  twoHundredApplicationJsonObject: z.lazy(() =>
    HrisEmployeeSchedulesAllResponseBody$outboundSchema
  ).optional(),
  defaultApplicationJsonObject: z.lazy(() =>
    HrisEmployeeSchedulesAllHrisEmployeeSchedulesResponseBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    twoHundredApplicationJsonObject: "200_application/json_object",
    defaultApplicationJsonObject: "default_application/json_object",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllResponse$ {
  /** @deprecated use `HrisEmployeeSchedulesAllResponse$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllResponse$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllResponse$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllResponse$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllResponse$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllResponse$Outbound;
}

export function hrisEmployeeSchedulesAllResponseToJSON(
  hrisEmployeeSchedulesAllResponse: HrisEmployeeSchedulesAllResponse,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllResponse$outboundSchema.parse(
      hrisEmployeeSchedulesAllResponse,
    ),
  );
}

export function hrisEmployeeSchedulesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllResponse' from JSON`,
  );
}
