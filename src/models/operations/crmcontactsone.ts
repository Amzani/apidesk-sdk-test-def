/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmContactsOneGlobals = {
  /**
   * A unique identifier for the consumer, required to specify the data source or destination for the API operation. This ID is essential for authenticating and authorizing the request within the CRM system.
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmContactsOneRequest = {
  /**
   * The unique identifier of the activity to be deleted. This parameter is required to specify which activity record should be removed from the CRM system. Ensure that the ID corresponds to an existing activity to avoid errors.
   */
  id: string;
  /**
   * An optional identifier for the specific service to be called, such as 'pipedrive'. This is only required when multiple integrations are active, allowing the API to route the request to the appropriate service.
   */
  serviceId?: string | undefined;
  /**
   * A boolean flag that determines whether to include the raw response in the output. This is primarily used for debugging purposes to gain insights into the API's response structure.
   */
  raw?: boolean | undefined;
  /**
   * Enables selective retrieval of specific fields in the API response, improving performance by reducing data load. Specify fields as a comma-separated list, and use dot notation for nested properties.
   */
  fields?: string | null | undefined;
  /**
   * The 'filter' parameter allows you to refine the results by applying specific criteria. It supports nested properties such as 'company_id' and 'owner_id' to filter activities based on company or owner identifiers.
   */
  filter?: components.ContactsFilter | undefined;
};

export type CrmContactsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Contact
   */
  getContactResponse?: components.GetContactResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmContactsOneGlobals$inboundSchema: z.ZodType<
  CrmContactsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmContactsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmContactsOneGlobals$outboundSchema: z.ZodType<
  CrmContactsOneGlobals$Outbound,
  z.ZodTypeDef,
  CrmContactsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmContactsOneGlobals$ {
  /** @deprecated use `CrmContactsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmContactsOneGlobals$inboundSchema;
  /** @deprecated use `CrmContactsOneGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmContactsOneGlobals$outboundSchema;
  /** @deprecated use `CrmContactsOneGlobals$Outbound` instead. */
  export type Outbound = CrmContactsOneGlobals$Outbound;
}

export function crmContactsOneGlobalsToJSON(
  crmContactsOneGlobals: CrmContactsOneGlobals,
): string {
  return JSON.stringify(
    CrmContactsOneGlobals$outboundSchema.parse(crmContactsOneGlobals),
  );
}

export function crmContactsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmContactsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmContactsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmContactsOneGlobals' from JSON`,
  );
}

/** @internal */
export const CrmContactsOneRequest$inboundSchema: z.ZodType<
  CrmContactsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
  filter: components.ContactsFilter$inboundSchema.optional(),
});

/** @internal */
export type CrmContactsOneRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
  filter?: components.ContactsFilter$Outbound | undefined;
};

/** @internal */
export const CrmContactsOneRequest$outboundSchema: z.ZodType<
  CrmContactsOneRequest$Outbound,
  z.ZodTypeDef,
  CrmContactsOneRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
  filter: components.ContactsFilter$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmContactsOneRequest$ {
  /** @deprecated use `CrmContactsOneRequest$inboundSchema` instead. */
  export const inboundSchema = CrmContactsOneRequest$inboundSchema;
  /** @deprecated use `CrmContactsOneRequest$outboundSchema` instead. */
  export const outboundSchema = CrmContactsOneRequest$outboundSchema;
  /** @deprecated use `CrmContactsOneRequest$Outbound` instead. */
  export type Outbound = CrmContactsOneRequest$Outbound;
}

export function crmContactsOneRequestToJSON(
  crmContactsOneRequest: CrmContactsOneRequest,
): string {
  return JSON.stringify(
    CrmContactsOneRequest$outboundSchema.parse(crmContactsOneRequest),
  );
}

export function crmContactsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmContactsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmContactsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmContactsOneRequest' from JSON`,
  );
}

/** @internal */
export const CrmContactsOneResponse$inboundSchema: z.ZodType<
  CrmContactsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetContactResponse: components.GetContactResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetContactResponse": "getContactResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmContactsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetContactResponse?: components.GetContactResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmContactsOneResponse$outboundSchema: z.ZodType<
  CrmContactsOneResponse$Outbound,
  z.ZodTypeDef,
  CrmContactsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getContactResponse: components.GetContactResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getContactResponse: "GetContactResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmContactsOneResponse$ {
  /** @deprecated use `CrmContactsOneResponse$inboundSchema` instead. */
  export const inboundSchema = CrmContactsOneResponse$inboundSchema;
  /** @deprecated use `CrmContactsOneResponse$outboundSchema` instead. */
  export const outboundSchema = CrmContactsOneResponse$outboundSchema;
  /** @deprecated use `CrmContactsOneResponse$Outbound` instead. */
  export type Outbound = CrmContactsOneResponse$Outbound;
}

export function crmContactsOneResponseToJSON(
  crmContactsOneResponse: CrmContactsOneResponse,
): string {
  return JSON.stringify(
    CrmContactsOneResponse$outboundSchema.parse(crmContactsOneResponse),
  );
}

export function crmContactsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmContactsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmContactsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmContactsOneResponse' from JSON`,
  );
}
