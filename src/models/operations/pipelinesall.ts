/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PipelinesAllSecurity = {
  apiKey: string;
};

export type PipelinesAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesAllDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type PipelinesAllPipelinesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export const PipelinesAllCurrency = {
  UnknownCurrency: "UNKNOWN_CURRENCY",
  Aed: "AED",
  Afn: "AFN",
  All: "ALL",
  Amd: "AMD",
  Ang: "ANG",
  Aoa: "AOA",
  Ars: "ARS",
  Aud: "AUD",
  Awg: "AWG",
  Azn: "AZN",
  Bam: "BAM",
  Bbd: "BBD",
  Bdt: "BDT",
  Bgn: "BGN",
  Bhd: "BHD",
  Bif: "BIF",
  Bmd: "BMD",
  Bnd: "BND",
  Bob: "BOB",
  Bov: "BOV",
  Brl: "BRL",
  Bsd: "BSD",
  Btn: "BTN",
  Bwp: "BWP",
  Byr: "BYR",
  Bzd: "BZD",
  Cad: "CAD",
  Cdf: "CDF",
  Che: "CHE",
  Chf: "CHF",
  Chw: "CHW",
  Clf: "CLF",
  Clp: "CLP",
  Cny: "CNY",
  Cop: "COP",
  Cou: "COU",
  Crc: "CRC",
  Cuc: "CUC",
  Cup: "CUP",
  Cve: "CVE",
  Czk: "CZK",
  Djf: "DJF",
  Dkk: "DKK",
  Dop: "DOP",
  Dzd: "DZD",
  Egp: "EGP",
  Ern: "ERN",
  Etb: "ETB",
  Eur: "EUR",
  Fjd: "FJD",
  Fkp: "FKP",
  Gbp: "GBP",
  Gel: "GEL",
  Ghs: "GHS",
  Gip: "GIP",
  Gmd: "GMD",
  Gnf: "GNF",
  Gtq: "GTQ",
  Gyd: "GYD",
  Hkd: "HKD",
  Hnl: "HNL",
  Hrk: "HRK",
  Htg: "HTG",
  Huf: "HUF",
  Idr: "IDR",
  Ils: "ILS",
  Inr: "INR",
  Iqd: "IQD",
  Irr: "IRR",
  Isk: "ISK",
  Jmd: "JMD",
  Jod: "JOD",
  Jpy: "JPY",
  Kes: "KES",
  Kgs: "KGS",
  Khr: "KHR",
  Kmf: "KMF",
  Kpw: "KPW",
  Krw: "KRW",
  Kwd: "KWD",
  Kyd: "KYD",
  Kzt: "KZT",
  Lak: "LAK",
  Lbp: "LBP",
  Lkr: "LKR",
  Lrd: "LRD",
  Lsl: "LSL",
  Ltl: "LTL",
  Lvl: "LVL",
  Lyd: "LYD",
  Mad: "MAD",
  Mdl: "MDL",
  Mga: "MGA",
  Mkd: "MKD",
  Mmk: "MMK",
  Mnt: "MNT",
  Mop: "MOP",
  Mro: "MRO",
  Mur: "MUR",
  Mvr: "MVR",
  Mwk: "MWK",
  Mxn: "MXN",
  Mxv: "MXV",
  Myr: "MYR",
  Mzn: "MZN",
  Nad: "NAD",
  Ngn: "NGN",
  Nio: "NIO",
  Nok: "NOK",
  Npr: "NPR",
  Nzd: "NZD",
  Omr: "OMR",
  Pab: "PAB",
  Pen: "PEN",
  Pgk: "PGK",
  Php: "PHP",
  Pkr: "PKR",
  Pln: "PLN",
  Pyg: "PYG",
  Qar: "QAR",
  Ron: "RON",
  Rsd: "RSD",
  Rub: "RUB",
  Rwf: "RWF",
  Sar: "SAR",
  Sbd: "SBD",
  Scr: "SCR",
  Sdg: "SDG",
  Sek: "SEK",
  Sgd: "SGD",
  Shp: "SHP",
  Sll: "SLL",
  Sos: "SOS",
  Srd: "SRD",
  Ssp: "SSP",
  Std: "STD",
  Svc: "SVC",
  Syp: "SYP",
  Szl: "SZL",
  Thb: "THB",
  Tjs: "TJS",
  Tmt: "TMT",
  Tnd: "TND",
  Top: "TOP",
  Trc: "TRC",
  Try: "TRY",
  Ttd: "TTD",
  Twd: "TWD",
  Tzs: "TZS",
  Uah: "UAH",
  Ugx: "UGX",
  Usd: "USD",
  Usn: "USN",
  Uss: "USS",
  Uyi: "UYI",
  Uyu: "UYU",
  Uzs: "UZS",
  Vef: "VEF",
  Vnd: "VND",
  Vuv: "VUV",
  Wst: "WST",
  Xaf: "XAF",
  Xag: "XAG",
  Xau: "XAU",
  Xba: "XBA",
  Xbb: "XBB",
  Xbc: "XBC",
  Xbd: "XBD",
  Xcd: "XCD",
  Xdr: "XDR",
  Xof: "XOF",
  Xpd: "XPD",
  Xpf: "XPF",
  Xpt: "XPT",
  Xts: "XTS",
  Xxx: "XXX",
  Yer: "YER",
  Zar: "ZAR",
  Zmk: "ZMK",
  Zmw: "ZMW",
  Btc: "BTC",
  Eth: "ETH",
} as const;
/**
 * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
 */
export type PipelinesAllCurrency = ClosedEnum<typeof PipelinesAllCurrency>;

export type PipelinesAllStages = {
  /**
   * The unique identifier of the Pipeline Stage.
   */
  id?: string | null | undefined;
  /**
   * The name of the Pipeline Stage.
   */
  name?: string | null | undefined;
  /**
   * The value of the Pipeline Stage.
   */
  value?: string | null | undefined;
  /**
   * The expected probability of winning an Opportunity in this Pipeline Stage. Valid values are [0-100].
   */
  winProbability?: number | null | undefined;
  /**
   * The order in which the Pipeline Stage is displayed in the UI.
   */
  displayOrder?: number | null | undefined;
};

export type PipelinesAllExtendPaths = {
  /**
   * JSONPath string specifying where to apply the value.
   */
  path: string;
  /**
   * The value to set at the specified path, can be any type.
   */
  value?: any | undefined;
};

export type PipelinesAllPassThrough = {
  /**
   * Identifier for the service to which this pass_through should be applied.
   */
  serviceId: string;
  /**
   * Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
   */
  operationId?: string | undefined;
  /**
   * Simple object allowing any properties for direct extension.
   */
  extendObject?: { [k: string]: any } | undefined;
  /**
   * Array of objects for structured data modifications via paths.
   */
  extendPaths?: Array<PipelinesAllExtendPaths> | undefined;
};

export type PipelinesAllData = {
  /**
   * The unique identifier of the Pipeline.
   */
  id?: string | undefined;
  /**
   * The name of the Pipeline.
   */
  name: string;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: PipelinesAllCurrency | null | undefined;
  /**
   * Whether the Pipeline is archived or not.
   */
  archived?: boolean | undefined;
  /**
   * Whether the Pipeline is active or not.
   */
  active?: boolean | undefined;
  /**
   * The order in which the Pipeline is displayed in the UI.
   */
  displayOrder?: number | null | undefined;
  /**
   * Whether the Pipeline has win probability enabled or not.
   */
  winProbabilityEnabled?: boolean | undefined;
  /**
   * The Pipeline Stages.
   */
  stages?: Array<PipelinesAllStages> | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PipelinesAllPassThrough> | undefined;
};

/**
 * Cursors to navigate to previous or next pages through the API
 */
export type PipelinesAllCursors = {
  /**
   * Cursor to navigate to the previous page of results through the API
   */
  previous?: string | null | undefined;
  /**
   * Cursor to navigate to the current page of results through the API
   */
  current?: string | null | undefined;
  /**
   * Cursor to navigate to the next page of results through the API
   */
  next?: string | null | undefined;
};

/**
 * Response metadata
 */
export type PipelinesAllMeta = {
  /**
   * Number of items returned in the data property of the response
   */
  itemsOnPage?: number | undefined;
  /**
   * Cursors to navigate to previous or next pages through the API
   */
  cursors?: PipelinesAllCursors | undefined;
};

/**
 * Links to navigate to previous or next pages through the API
 */
export type PipelinesAllLinks = {
  /**
   * Link to navigate to the previous page through the API
   */
  previous?: string | null | undefined;
  /**
   * Link to navigate to the current page through the API
   */
  current?: string | undefined;
  /**
   * Link to navigate to the previous page through the API
   */
  next?: string | null | undefined;
};

/**
 * Pipelines
 */
export type PipelinesAllResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: Array<PipelinesAllData>;
  /**
   * Response metadata
   */
  meta?: PipelinesAllMeta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: PipelinesAllLinks | undefined;
};

export type PipelinesAllResponse =
  | PipelinesAllPipelinesResponseBody
  | PipelinesAllResponseBody;

/** @internal */
export const PipelinesAllSecurity$inboundSchema: z.ZodType<
  PipelinesAllSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type PipelinesAllSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const PipelinesAllSecurity$outboundSchema: z.ZodType<
  PipelinesAllSecurity$Outbound,
  z.ZodTypeDef,
  PipelinesAllSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllSecurity$ {
  /** @deprecated use `PipelinesAllSecurity$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllSecurity$inboundSchema;
  /** @deprecated use `PipelinesAllSecurity$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllSecurity$outboundSchema;
  /** @deprecated use `PipelinesAllSecurity$Outbound` instead. */
  export type Outbound = PipelinesAllSecurity$Outbound;
}

export function pipelinesAllSecurityToJSON(
  pipelinesAllSecurity: PipelinesAllSecurity,
): string {
  return JSON.stringify(
    PipelinesAllSecurity$outboundSchema.parse(pipelinesAllSecurity),
  );
}

export function pipelinesAllSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllSecurity' from JSON`,
  );
}

/** @internal */
export const PipelinesAllRequest$inboundSchema: z.ZodType<
  PipelinesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type PipelinesAllRequest$Outbound = {
  raw: boolean;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const PipelinesAllRequest$outboundSchema: z.ZodType<
  PipelinesAllRequest$Outbound,
  z.ZodTypeDef,
  PipelinesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllRequest$ {
  /** @deprecated use `PipelinesAllRequest$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllRequest$inboundSchema;
  /** @deprecated use `PipelinesAllRequest$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllRequest$outboundSchema;
  /** @deprecated use `PipelinesAllRequest$Outbound` instead. */
  export type Outbound = PipelinesAllRequest$Outbound;
}

export function pipelinesAllRequestToJSON(
  pipelinesAllRequest: PipelinesAllRequest,
): string {
  return JSON.stringify(
    PipelinesAllRequest$outboundSchema.parse(pipelinesAllRequest),
  );
}

export function pipelinesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllRequest' from JSON`,
  );
}

/** @internal */
export const PipelinesAllDetail$inboundSchema: z.ZodType<
  PipelinesAllDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesAllDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const PipelinesAllDetail$outboundSchema: z.ZodType<
  PipelinesAllDetail$Outbound,
  z.ZodTypeDef,
  PipelinesAllDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllDetail$ {
  /** @deprecated use `PipelinesAllDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllDetail$inboundSchema;
  /** @deprecated use `PipelinesAllDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllDetail$outboundSchema;
  /** @deprecated use `PipelinesAllDetail$Outbound` instead. */
  export type Outbound = PipelinesAllDetail$Outbound;
}

export function pipelinesAllDetailToJSON(
  pipelinesAllDetail: PipelinesAllDetail,
): string {
  return JSON.stringify(
    PipelinesAllDetail$outboundSchema.parse(pipelinesAllDetail),
  );
}

export function pipelinesAllDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesAllPipelinesResponseBody$inboundSchema: z.ZodType<
  PipelinesAllPipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type PipelinesAllPipelinesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesAllPipelinesResponseBody$outboundSchema: z.ZodType<
  PipelinesAllPipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesAllPipelinesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllPipelinesResponseBody$ {
  /** @deprecated use `PipelinesAllPipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllPipelinesResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesAllPipelinesResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAllPipelinesResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAllPipelinesResponseBody$Outbound;
}

export function pipelinesAllPipelinesResponseBodyToJSON(
  pipelinesAllPipelinesResponseBody: PipelinesAllPipelinesResponseBody,
): string {
  return JSON.stringify(
    PipelinesAllPipelinesResponseBody$outboundSchema.parse(
      pipelinesAllPipelinesResponseBody,
    ),
  );
}

export function pipelinesAllPipelinesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllPipelinesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllPipelinesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllPipelinesResponseBody' from JSON`,
  );
}

/** @internal */
export const PipelinesAllCurrency$inboundSchema: z.ZodNativeEnum<
  typeof PipelinesAllCurrency
> = z.nativeEnum(PipelinesAllCurrency);

/** @internal */
export const PipelinesAllCurrency$outboundSchema: z.ZodNativeEnum<
  typeof PipelinesAllCurrency
> = PipelinesAllCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllCurrency$ {
  /** @deprecated use `PipelinesAllCurrency$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllCurrency$inboundSchema;
  /** @deprecated use `PipelinesAllCurrency$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllCurrency$outboundSchema;
}

/** @internal */
export const PipelinesAllStages$inboundSchema: z.ZodType<
  PipelinesAllStages,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  win_probability: z.nullable(z.number().int()).optional(),
  display_order: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "win_probability": "winProbability",
    "display_order": "displayOrder",
  });
});

/** @internal */
export type PipelinesAllStages$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  value?: string | null | undefined;
  win_probability?: number | null | undefined;
  display_order?: number | null | undefined;
};

/** @internal */
export const PipelinesAllStages$outboundSchema: z.ZodType<
  PipelinesAllStages$Outbound,
  z.ZodTypeDef,
  PipelinesAllStages
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  value: z.nullable(z.string()).optional(),
  winProbability: z.nullable(z.number().int()).optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    winProbability: "win_probability",
    displayOrder: "display_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllStages$ {
  /** @deprecated use `PipelinesAllStages$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllStages$inboundSchema;
  /** @deprecated use `PipelinesAllStages$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllStages$outboundSchema;
  /** @deprecated use `PipelinesAllStages$Outbound` instead. */
  export type Outbound = PipelinesAllStages$Outbound;
}

export function pipelinesAllStagesToJSON(
  pipelinesAllStages: PipelinesAllStages,
): string {
  return JSON.stringify(
    PipelinesAllStages$outboundSchema.parse(pipelinesAllStages),
  );
}

export function pipelinesAllStagesFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllStages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllStages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllStages' from JSON`,
  );
}

/** @internal */
export const PipelinesAllExtendPaths$inboundSchema: z.ZodType<
  PipelinesAllExtendPaths,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type PipelinesAllExtendPaths$Outbound = {
  path: string;
  value?: any | undefined;
};

/** @internal */
export const PipelinesAllExtendPaths$outboundSchema: z.ZodType<
  PipelinesAllExtendPaths$Outbound,
  z.ZodTypeDef,
  PipelinesAllExtendPaths
> = z.object({
  path: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllExtendPaths$ {
  /** @deprecated use `PipelinesAllExtendPaths$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllExtendPaths$inboundSchema;
  /** @deprecated use `PipelinesAllExtendPaths$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllExtendPaths$outboundSchema;
  /** @deprecated use `PipelinesAllExtendPaths$Outbound` instead. */
  export type Outbound = PipelinesAllExtendPaths$Outbound;
}

export function pipelinesAllExtendPathsToJSON(
  pipelinesAllExtendPaths: PipelinesAllExtendPaths,
): string {
  return JSON.stringify(
    PipelinesAllExtendPaths$outboundSchema.parse(pipelinesAllExtendPaths),
  );
}

export function pipelinesAllExtendPathsFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllExtendPaths, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllExtendPaths$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllExtendPaths' from JSON`,
  );
}

/** @internal */
export const PipelinesAllPassThrough$inboundSchema: z.ZodType<
  PipelinesAllPassThrough,
  z.ZodTypeDef,
  unknown
> = z.object({
  service_id: z.string(),
  operation_id: z.string().optional(),
  extend_object: z.record(z.any()).optional(),
  extend_paths: z.array(z.lazy(() => PipelinesAllExtendPaths$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "operation_id": "operationId",
    "extend_object": "extendObject",
    "extend_paths": "extendPaths",
  });
});

/** @internal */
export type PipelinesAllPassThrough$Outbound = {
  service_id: string;
  operation_id?: string | undefined;
  extend_object?: { [k: string]: any } | undefined;
  extend_paths?: Array<PipelinesAllExtendPaths$Outbound> | undefined;
};

/** @internal */
export const PipelinesAllPassThrough$outboundSchema: z.ZodType<
  PipelinesAllPassThrough$Outbound,
  z.ZodTypeDef,
  PipelinesAllPassThrough
> = z.object({
  serviceId: z.string(),
  operationId: z.string().optional(),
  extendObject: z.record(z.any()).optional(),
  extendPaths: z.array(z.lazy(() => PipelinesAllExtendPaths$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    operationId: "operation_id",
    extendObject: "extend_object",
    extendPaths: "extend_paths",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllPassThrough$ {
  /** @deprecated use `PipelinesAllPassThrough$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllPassThrough$inboundSchema;
  /** @deprecated use `PipelinesAllPassThrough$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllPassThrough$outboundSchema;
  /** @deprecated use `PipelinesAllPassThrough$Outbound` instead. */
  export type Outbound = PipelinesAllPassThrough$Outbound;
}

export function pipelinesAllPassThroughToJSON(
  pipelinesAllPassThrough: PipelinesAllPassThrough,
): string {
  return JSON.stringify(
    PipelinesAllPassThrough$outboundSchema.parse(pipelinesAllPassThrough),
  );
}

export function pipelinesAllPassThroughFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllPassThrough, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllPassThrough$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllPassThrough' from JSON`,
  );
}

/** @internal */
export const PipelinesAllData$inboundSchema: z.ZodType<
  PipelinesAllData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(PipelinesAllCurrency$inboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  display_order: z.nullable(z.number().int()).optional(),
  win_probability_enabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => PipelinesAllStages$inboundSchema)).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(z.lazy(() => PipelinesAllPassThrough$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "display_order": "displayOrder",
    "win_probability_enabled": "winProbabilityEnabled",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type PipelinesAllData$Outbound = {
  id?: string | undefined;
  name: string;
  currency?: string | null | undefined;
  archived?: boolean | undefined;
  active?: boolean | undefined;
  display_order?: number | null | undefined;
  win_probability_enabled?: boolean | undefined;
  stages?: Array<PipelinesAllStages$Outbound> | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PipelinesAllPassThrough$Outbound> | undefined;
};

/** @internal */
export const PipelinesAllData$outboundSchema: z.ZodType<
  PipelinesAllData$Outbound,
  z.ZodTypeDef,
  PipelinesAllData
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  currency: z.nullable(PipelinesAllCurrency$outboundSchema).optional(),
  archived: z.boolean().optional(),
  active: z.boolean().optional(),
  displayOrder: z.nullable(z.number().int()).optional(),
  winProbabilityEnabled: z.boolean().optional(),
  stages: z.array(z.lazy(() => PipelinesAllStages$outboundSchema)).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(z.lazy(() => PipelinesAllPassThrough$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    displayOrder: "display_order",
    winProbabilityEnabled: "win_probability_enabled",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllData$ {
  /** @deprecated use `PipelinesAllData$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllData$inboundSchema;
  /** @deprecated use `PipelinesAllData$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllData$outboundSchema;
  /** @deprecated use `PipelinesAllData$Outbound` instead. */
  export type Outbound = PipelinesAllData$Outbound;
}

export function pipelinesAllDataToJSON(
  pipelinesAllData: PipelinesAllData,
): string {
  return JSON.stringify(
    PipelinesAllData$outboundSchema.parse(pipelinesAllData),
  );
}

export function pipelinesAllDataFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllData' from JSON`,
  );
}

/** @internal */
export const PipelinesAllCursors$inboundSchema: z.ZodType<
  PipelinesAllCursors,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type PipelinesAllCursors$Outbound = {
  previous?: string | null | undefined;
  current?: string | null | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const PipelinesAllCursors$outboundSchema: z.ZodType<
  PipelinesAllCursors$Outbound,
  z.ZodTypeDef,
  PipelinesAllCursors
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.nullable(z.string()).optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllCursors$ {
  /** @deprecated use `PipelinesAllCursors$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllCursors$inboundSchema;
  /** @deprecated use `PipelinesAllCursors$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllCursors$outboundSchema;
  /** @deprecated use `PipelinesAllCursors$Outbound` instead. */
  export type Outbound = PipelinesAllCursors$Outbound;
}

export function pipelinesAllCursorsToJSON(
  pipelinesAllCursors: PipelinesAllCursors,
): string {
  return JSON.stringify(
    PipelinesAllCursors$outboundSchema.parse(pipelinesAllCursors),
  );
}

export function pipelinesAllCursorsFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllCursors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllCursors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllCursors' from JSON`,
  );
}

/** @internal */
export const PipelinesAllMeta$inboundSchema: z.ZodType<
  PipelinesAllMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  items_on_page: z.number().int().optional(),
  cursors: z.lazy(() => PipelinesAllCursors$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "items_on_page": "itemsOnPage",
  });
});

/** @internal */
export type PipelinesAllMeta$Outbound = {
  items_on_page?: number | undefined;
  cursors?: PipelinesAllCursors$Outbound | undefined;
};

/** @internal */
export const PipelinesAllMeta$outboundSchema: z.ZodType<
  PipelinesAllMeta$Outbound,
  z.ZodTypeDef,
  PipelinesAllMeta
> = z.object({
  itemsOnPage: z.number().int().optional(),
  cursors: z.lazy(() => PipelinesAllCursors$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    itemsOnPage: "items_on_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllMeta$ {
  /** @deprecated use `PipelinesAllMeta$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllMeta$inboundSchema;
  /** @deprecated use `PipelinesAllMeta$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllMeta$outboundSchema;
  /** @deprecated use `PipelinesAllMeta$Outbound` instead. */
  export type Outbound = PipelinesAllMeta$Outbound;
}

export function pipelinesAllMetaToJSON(
  pipelinesAllMeta: PipelinesAllMeta,
): string {
  return JSON.stringify(
    PipelinesAllMeta$outboundSchema.parse(pipelinesAllMeta),
  );
}

export function pipelinesAllMetaFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllMeta' from JSON`,
  );
}

/** @internal */
export const PipelinesAllLinks$inboundSchema: z.ZodType<
  PipelinesAllLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type PipelinesAllLinks$Outbound = {
  previous?: string | null | undefined;
  current?: string | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const PipelinesAllLinks$outboundSchema: z.ZodType<
  PipelinesAllLinks$Outbound,
  z.ZodTypeDef,
  PipelinesAllLinks
> = z.object({
  previous: z.nullable(z.string()).optional(),
  current: z.string().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllLinks$ {
  /** @deprecated use `PipelinesAllLinks$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllLinks$inboundSchema;
  /** @deprecated use `PipelinesAllLinks$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllLinks$outboundSchema;
  /** @deprecated use `PipelinesAllLinks$Outbound` instead. */
  export type Outbound = PipelinesAllLinks$Outbound;
}

export function pipelinesAllLinksToJSON(
  pipelinesAllLinks: PipelinesAllLinks,
): string {
  return JSON.stringify(
    PipelinesAllLinks$outboundSchema.parse(pipelinesAllLinks),
  );
}

export function pipelinesAllLinksFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllLinks' from JSON`,
  );
}

/** @internal */
export const PipelinesAllResponseBody$inboundSchema: z.ZodType<
  PipelinesAllResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => PipelinesAllData$inboundSchema)),
  meta: z.lazy(() => PipelinesAllMeta$inboundSchema).optional(),
  links: z.lazy(() => PipelinesAllLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type PipelinesAllResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: Array<PipelinesAllData$Outbound>;
  meta?: PipelinesAllMeta$Outbound | undefined;
  links?: PipelinesAllLinks$Outbound | undefined;
};

/** @internal */
export const PipelinesAllResponseBody$outboundSchema: z.ZodType<
  PipelinesAllResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesAllResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.array(z.lazy(() => PipelinesAllData$outboundSchema)),
  meta: z.lazy(() => PipelinesAllMeta$outboundSchema).optional(),
  links: z.lazy(() => PipelinesAllLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllResponseBody$ {
  /** @deprecated use `PipelinesAllResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllResponseBody$inboundSchema;
  /** @deprecated use `PipelinesAllResponseBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllResponseBody$outboundSchema;
  /** @deprecated use `PipelinesAllResponseBody$Outbound` instead. */
  export type Outbound = PipelinesAllResponseBody$Outbound;
}

export function pipelinesAllResponseBodyToJSON(
  pipelinesAllResponseBody: PipelinesAllResponseBody,
): string {
  return JSON.stringify(
    PipelinesAllResponseBody$outboundSchema.parse(pipelinesAllResponseBody),
  );
}

export function pipelinesAllResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllResponseBody' from JSON`,
  );
}

/** @internal */
export const PipelinesAllResponse$inboundSchema: z.ZodType<
  PipelinesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PipelinesAllPipelinesResponseBody$inboundSchema),
  z.lazy(() => PipelinesAllResponseBody$inboundSchema),
]);

/** @internal */
export type PipelinesAllResponse$Outbound =
  | PipelinesAllPipelinesResponseBody$Outbound
  | PipelinesAllResponseBody$Outbound;

/** @internal */
export const PipelinesAllResponse$outboundSchema: z.ZodType<
  PipelinesAllResponse$Outbound,
  z.ZodTypeDef,
  PipelinesAllResponse
> = z.union([
  z.lazy(() => PipelinesAllPipelinesResponseBody$outboundSchema),
  z.lazy(() => PipelinesAllResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesAllResponse$ {
  /** @deprecated use `PipelinesAllResponse$inboundSchema` instead. */
  export const inboundSchema = PipelinesAllResponse$inboundSchema;
  /** @deprecated use `PipelinesAllResponse$outboundSchema` instead. */
  export const outboundSchema = PipelinesAllResponse$outboundSchema;
  /** @deprecated use `PipelinesAllResponse$Outbound` instead. */
  export type Outbound = PipelinesAllResponse$Outbound;
}

export function pipelinesAllResponseToJSON(
  pipelinesAllResponse: PipelinesAllResponse,
): string {
  return JSON.stringify(
    PipelinesAllResponse$outboundSchema.parse(pipelinesAllResponse),
  );
}

export function pipelinesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesAllResponse' from JSON`,
  );
}
