/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisPayrollsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisPayrollsOneRequest = {
  /**
   * ID of the payroll you are acting upon.
   */
  payrollId: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type HrisPayrollsOneDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type HrisPayrollsOneHrisPayrollsResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

/**
 * The overview of the payroll totals.
 */
export type HrisPayrollsOneTotals = {
  /**
   * The total company debit for the payroll.
   */
  companyDebit?: number | null | undefined;
  /**
   * The total tax debit for the payroll.
   */
  taxDebit?: number | null | undefined;
  /**
   * The total check amount for the payroll.
   */
  checkAmount?: number | null | undefined;
  /**
   * The net pay amount for the payroll.
   */
  netPay?: number | null | undefined;
  /**
   * The gross pay amount for the payroll.
   */
  grossPay?: number | null | undefined;
  /**
   * The total amount of employer paid taxes for the payroll.
   */
  employerTaxes?: number | null | undefined;
  /**
   * The total amount of employee paid taxes for the payroll.
   */
  employeeTaxes?: number | null | undefined;
  /**
   * The total amount of company contributed benefits for the payroll.
   */
  employerBenefitContributions?: number | null | undefined;
  /**
   * The total amount of employee deducted benefits for the payroll.
   */
  employeeBenefitDeductions?: number | null | undefined;
};

export type HrisPayrollsOneTaxes = {
  /**
   * The name of the tax.
   */
  name?: string | null | undefined;
  /**
   * Paid by employer.
   */
  employer?: boolean | null | undefined;
  /**
   * The amount of the tax.
   */
  amount?: number | null | undefined;
};

export type HrisPayrollsOneDeductions = {
  /**
   * The name of the deduction.
   */
  name?: string | null | undefined;
  /**
   * The amount deducted.
   */
  amount?: number | null | undefined;
};

export type HrisPayrollsOneBenefits = {
  /**
   * The name of the benefit.
   */
  name?: string | null | undefined;
  /**
   * The amount deducted for benefit.
   */
  employeeDeduction?: number | null | undefined;
  /**
   * The amount of employer contribution.
   */
  employerContribution?: number | null | undefined;
};

export type HrisPayrollsOneCompensations = {
  /**
   * A unique identifier for an object.
   */
  employeeId: string | null;
  /**
   * The employee's net pay. Only available when payroll has been processed
   */
  netPay?: number | null | undefined;
  /**
   * The employee's gross pay. Only available when payroll has been processed
   */
  grossPay?: number | null | undefined;
  /**
   * An array of employer and employee taxes for the pay period.
   */
  taxes?: Array<HrisPayrollsOneTaxes> | null | undefined;
  /**
   * An array of employee deductions for the pay period.
   */
  deductions?: Array<HrisPayrollsOneDeductions> | null | undefined;
  /**
   * An array of employee benefits for the pay period.
   */
  benefits?: Array<HrisPayrollsOneBenefits> | null | undefined;
};

/**
 * When custom mappings are configured on the resource, the result is included here.
 */
export type HrisPayrollsOneCustomMappings = {};

export type HrisPayrollsOneData = {
  /**
   * A unique identifier for an object.
   */
  id: string | null;
  /**
   * The unique identifier of the company.
   */
  companyId?: string | null | undefined;
  /**
   * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated.
   */
  processed: boolean | null;
  /**
   * The date the payroll was processed.
   */
  processedDate?: string | null | undefined;
  /**
   * The date on which employees will be paid for the payroll.
   */
  checkDate: string | null;
  /**
   * The start date, inclusive, of the pay period.
   */
  startDate: string | null;
  /**
   * The end date, inclusive, of the pay period.
   */
  endDate: string | null;
  /**
   * The overview of the payroll totals.
   */
  totals?: HrisPayrollsOneTotals | undefined;
  /**
   * An array of compensations for the payroll.
   */
  compensations?: Array<HrisPayrollsOneCompensations> | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: HrisPayrollsOneCustomMappings | null | undefined;
};

/**
 * Payrolls
 */
export type HrisPayrollsOneResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: HrisPayrollsOneData;
};

export type HrisPayrollsOneResponse =
  | HrisPayrollsOneResponseBody
  | HrisPayrollsOneHrisPayrollsResponseBody;

/** @internal */
export const HrisPayrollsOneGlobals$inboundSchema: z.ZodType<
  HrisPayrollsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisPayrollsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisPayrollsOneGlobals$outboundSchema: z.ZodType<
  HrisPayrollsOneGlobals$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneGlobals$ {
  /** @deprecated use `HrisPayrollsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneGlobals$inboundSchema;
  /** @deprecated use `HrisPayrollsOneGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneGlobals$outboundSchema;
  /** @deprecated use `HrisPayrollsOneGlobals$Outbound` instead. */
  export type Outbound = HrisPayrollsOneGlobals$Outbound;
}

export function hrisPayrollsOneGlobalsToJSON(
  hrisPayrollsOneGlobals: HrisPayrollsOneGlobals,
): string {
  return JSON.stringify(
    HrisPayrollsOneGlobals$outboundSchema.parse(hrisPayrollsOneGlobals),
  );
}

export function hrisPayrollsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneGlobals' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneRequest$inboundSchema: z.ZodType<
  HrisPayrollsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  payroll_id: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payroll_id": "payrollId",
  });
});

/** @internal */
export type HrisPayrollsOneRequest$Outbound = {
  payroll_id: string;
  raw: boolean;
  serviceId?: string | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisPayrollsOneRequest$outboundSchema: z.ZodType<
  HrisPayrollsOneRequest$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneRequest
> = z.object({
  payrollId: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    payrollId: "payroll_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneRequest$ {
  /** @deprecated use `HrisPayrollsOneRequest$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneRequest$inboundSchema;
  /** @deprecated use `HrisPayrollsOneRequest$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneRequest$outboundSchema;
  /** @deprecated use `HrisPayrollsOneRequest$Outbound` instead. */
  export type Outbound = HrisPayrollsOneRequest$Outbound;
}

export function hrisPayrollsOneRequestToJSON(
  hrisPayrollsOneRequest: HrisPayrollsOneRequest,
): string {
  return JSON.stringify(
    HrisPayrollsOneRequest$outboundSchema.parse(hrisPayrollsOneRequest),
  );
}

export function hrisPayrollsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneRequest' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneDetail$inboundSchema: z.ZodType<
  HrisPayrollsOneDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type HrisPayrollsOneDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const HrisPayrollsOneDetail$outboundSchema: z.ZodType<
  HrisPayrollsOneDetail$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneDetail$ {
  /** @deprecated use `HrisPayrollsOneDetail$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneDetail$inboundSchema;
  /** @deprecated use `HrisPayrollsOneDetail$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneDetail$outboundSchema;
  /** @deprecated use `HrisPayrollsOneDetail$Outbound` instead. */
  export type Outbound = HrisPayrollsOneDetail$Outbound;
}

export function hrisPayrollsOneDetailToJSON(
  hrisPayrollsOneDetail: HrisPayrollsOneDetail,
): string {
  return JSON.stringify(
    HrisPayrollsOneDetail$outboundSchema.parse(hrisPayrollsOneDetail),
  );
}

export function hrisPayrollsOneDetailFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneDetail' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponseBody$inboundSchema: z.ZodType<
  HrisPayrollsOneHrisPayrollsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type HrisPayrollsOneHrisPayrollsResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const HrisPayrollsOneHrisPayrollsResponseBody$outboundSchema: z.ZodType<
  HrisPayrollsOneHrisPayrollsResponseBody$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneHrisPayrollsResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneHrisPayrollsResponseBody$ {
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HrisPayrollsOneHrisPayrollsResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HrisPayrollsOneHrisPayrollsResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsOneHrisPayrollsResponseBody$Outbound` instead. */
  export type Outbound = HrisPayrollsOneHrisPayrollsResponseBody$Outbound;
}

export function hrisPayrollsOneHrisPayrollsResponseBodyToJSON(
  hrisPayrollsOneHrisPayrollsResponseBody:
    HrisPayrollsOneHrisPayrollsResponseBody,
): string {
  return JSON.stringify(
    HrisPayrollsOneHrisPayrollsResponseBody$outboundSchema.parse(
      hrisPayrollsOneHrisPayrollsResponseBody,
    ),
  );
}

export function hrisPayrollsOneHrisPayrollsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HrisPayrollsOneHrisPayrollsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HrisPayrollsOneHrisPayrollsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HrisPayrollsOneHrisPayrollsResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneTotals$inboundSchema: z.ZodType<
  HrisPayrollsOneTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_debit: z.nullable(z.number()).optional(),
  tax_debit: z.nullable(z.number()).optional(),
  check_amount: z.nullable(z.number()).optional(),
  net_pay: z.nullable(z.number()).optional(),
  gross_pay: z.nullable(z.number()).optional(),
  employer_taxes: z.nullable(z.number()).optional(),
  employee_taxes: z.nullable(z.number()).optional(),
  employer_benefit_contributions: z.nullable(z.number()).optional(),
  employee_benefit_deductions: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_debit": "companyDebit",
    "tax_debit": "taxDebit",
    "check_amount": "checkAmount",
    "net_pay": "netPay",
    "gross_pay": "grossPay",
    "employer_taxes": "employerTaxes",
    "employee_taxes": "employeeTaxes",
    "employer_benefit_contributions": "employerBenefitContributions",
    "employee_benefit_deductions": "employeeBenefitDeductions",
  });
});

/** @internal */
export type HrisPayrollsOneTotals$Outbound = {
  company_debit?: number | null | undefined;
  tax_debit?: number | null | undefined;
  check_amount?: number | null | undefined;
  net_pay?: number | null | undefined;
  gross_pay?: number | null | undefined;
  employer_taxes?: number | null | undefined;
  employee_taxes?: number | null | undefined;
  employer_benefit_contributions?: number | null | undefined;
  employee_benefit_deductions?: number | null | undefined;
};

/** @internal */
export const HrisPayrollsOneTotals$outboundSchema: z.ZodType<
  HrisPayrollsOneTotals$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneTotals
> = z.object({
  companyDebit: z.nullable(z.number()).optional(),
  taxDebit: z.nullable(z.number()).optional(),
  checkAmount: z.nullable(z.number()).optional(),
  netPay: z.nullable(z.number()).optional(),
  grossPay: z.nullable(z.number()).optional(),
  employerTaxes: z.nullable(z.number()).optional(),
  employeeTaxes: z.nullable(z.number()).optional(),
  employerBenefitContributions: z.nullable(z.number()).optional(),
  employeeBenefitDeductions: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    companyDebit: "company_debit",
    taxDebit: "tax_debit",
    checkAmount: "check_amount",
    netPay: "net_pay",
    grossPay: "gross_pay",
    employerTaxes: "employer_taxes",
    employeeTaxes: "employee_taxes",
    employerBenefitContributions: "employer_benefit_contributions",
    employeeBenefitDeductions: "employee_benefit_deductions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneTotals$ {
  /** @deprecated use `HrisPayrollsOneTotals$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneTotals$inboundSchema;
  /** @deprecated use `HrisPayrollsOneTotals$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneTotals$outboundSchema;
  /** @deprecated use `HrisPayrollsOneTotals$Outbound` instead. */
  export type Outbound = HrisPayrollsOneTotals$Outbound;
}

export function hrisPayrollsOneTotalsToJSON(
  hrisPayrollsOneTotals: HrisPayrollsOneTotals,
): string {
  return JSON.stringify(
    HrisPayrollsOneTotals$outboundSchema.parse(hrisPayrollsOneTotals),
  );
}

export function hrisPayrollsOneTotalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneTotals' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneTaxes$inboundSchema: z.ZodType<
  HrisPayrollsOneTaxes,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  employer: z.nullable(z.boolean()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/** @internal */
export type HrisPayrollsOneTaxes$Outbound = {
  name?: string | null | undefined;
  employer?: boolean | null | undefined;
  amount?: number | null | undefined;
};

/** @internal */
export const HrisPayrollsOneTaxes$outboundSchema: z.ZodType<
  HrisPayrollsOneTaxes$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneTaxes
> = z.object({
  name: z.nullable(z.string()).optional(),
  employer: z.nullable(z.boolean()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneTaxes$ {
  /** @deprecated use `HrisPayrollsOneTaxes$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneTaxes$inboundSchema;
  /** @deprecated use `HrisPayrollsOneTaxes$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneTaxes$outboundSchema;
  /** @deprecated use `HrisPayrollsOneTaxes$Outbound` instead. */
  export type Outbound = HrisPayrollsOneTaxes$Outbound;
}

export function hrisPayrollsOneTaxesToJSON(
  hrisPayrollsOneTaxes: HrisPayrollsOneTaxes,
): string {
  return JSON.stringify(
    HrisPayrollsOneTaxes$outboundSchema.parse(hrisPayrollsOneTaxes),
  );
}

export function hrisPayrollsOneTaxesFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneTaxes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneTaxes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneTaxes' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneDeductions$inboundSchema: z.ZodType<
  HrisPayrollsOneDeductions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/** @internal */
export type HrisPayrollsOneDeductions$Outbound = {
  name?: string | null | undefined;
  amount?: number | null | undefined;
};

/** @internal */
export const HrisPayrollsOneDeductions$outboundSchema: z.ZodType<
  HrisPayrollsOneDeductions$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneDeductions
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneDeductions$ {
  /** @deprecated use `HrisPayrollsOneDeductions$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneDeductions$inboundSchema;
  /** @deprecated use `HrisPayrollsOneDeductions$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneDeductions$outboundSchema;
  /** @deprecated use `HrisPayrollsOneDeductions$Outbound` instead. */
  export type Outbound = HrisPayrollsOneDeductions$Outbound;
}

export function hrisPayrollsOneDeductionsToJSON(
  hrisPayrollsOneDeductions: HrisPayrollsOneDeductions,
): string {
  return JSON.stringify(
    HrisPayrollsOneDeductions$outboundSchema.parse(hrisPayrollsOneDeductions),
  );
}

export function hrisPayrollsOneDeductionsFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneDeductions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneDeductions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneDeductions' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneBenefits$inboundSchema: z.ZodType<
  HrisPayrollsOneBenefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  employee_deduction: z.nullable(z.number()).optional(),
  employer_contribution: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_deduction": "employeeDeduction",
    "employer_contribution": "employerContribution",
  });
});

/** @internal */
export type HrisPayrollsOneBenefits$Outbound = {
  name?: string | null | undefined;
  employee_deduction?: number | null | undefined;
  employer_contribution?: number | null | undefined;
};

/** @internal */
export const HrisPayrollsOneBenefits$outboundSchema: z.ZodType<
  HrisPayrollsOneBenefits$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneBenefits
> = z.object({
  name: z.nullable(z.string()).optional(),
  employeeDeduction: z.nullable(z.number()).optional(),
  employerContribution: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeDeduction: "employee_deduction",
    employerContribution: "employer_contribution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneBenefits$ {
  /** @deprecated use `HrisPayrollsOneBenefits$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneBenefits$inboundSchema;
  /** @deprecated use `HrisPayrollsOneBenefits$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneBenefits$outboundSchema;
  /** @deprecated use `HrisPayrollsOneBenefits$Outbound` instead. */
  export type Outbound = HrisPayrollsOneBenefits$Outbound;
}

export function hrisPayrollsOneBenefitsToJSON(
  hrisPayrollsOneBenefits: HrisPayrollsOneBenefits,
): string {
  return JSON.stringify(
    HrisPayrollsOneBenefits$outboundSchema.parse(hrisPayrollsOneBenefits),
  );
}

export function hrisPayrollsOneBenefitsFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneBenefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneBenefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneBenefits' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneCompensations$inboundSchema: z.ZodType<
  HrisPayrollsOneCompensations,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.nullable(z.string()),
  net_pay: z.nullable(z.number()).optional(),
  gross_pay: z.nullable(z.number()).optional(),
  taxes: z.nullable(z.array(z.lazy(() => HrisPayrollsOneTaxes$inboundSchema)))
    .optional(),
  deductions: z.nullable(
    z.array(z.lazy(() => HrisPayrollsOneDeductions$inboundSchema)),
  ).optional(),
  benefits: z.nullable(
    z.array(z.lazy(() => HrisPayrollsOneBenefits$inboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "net_pay": "netPay",
    "gross_pay": "grossPay",
  });
});

/** @internal */
export type HrisPayrollsOneCompensations$Outbound = {
  employee_id: string | null;
  net_pay?: number | null | undefined;
  gross_pay?: number | null | undefined;
  taxes?: Array<HrisPayrollsOneTaxes$Outbound> | null | undefined;
  deductions?: Array<HrisPayrollsOneDeductions$Outbound> | null | undefined;
  benefits?: Array<HrisPayrollsOneBenefits$Outbound> | null | undefined;
};

/** @internal */
export const HrisPayrollsOneCompensations$outboundSchema: z.ZodType<
  HrisPayrollsOneCompensations$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneCompensations
> = z.object({
  employeeId: z.nullable(z.string()),
  netPay: z.nullable(z.number()).optional(),
  grossPay: z.nullable(z.number()).optional(),
  taxes: z.nullable(z.array(z.lazy(() => HrisPayrollsOneTaxes$outboundSchema)))
    .optional(),
  deductions: z.nullable(
    z.array(z.lazy(() => HrisPayrollsOneDeductions$outboundSchema)),
  ).optional(),
  benefits: z.nullable(
    z.array(z.lazy(() => HrisPayrollsOneBenefits$outboundSchema)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    netPay: "net_pay",
    grossPay: "gross_pay",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneCompensations$ {
  /** @deprecated use `HrisPayrollsOneCompensations$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneCompensations$inboundSchema;
  /** @deprecated use `HrisPayrollsOneCompensations$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneCompensations$outboundSchema;
  /** @deprecated use `HrisPayrollsOneCompensations$Outbound` instead. */
  export type Outbound = HrisPayrollsOneCompensations$Outbound;
}

export function hrisPayrollsOneCompensationsToJSON(
  hrisPayrollsOneCompensations: HrisPayrollsOneCompensations,
): string {
  return JSON.stringify(
    HrisPayrollsOneCompensations$outboundSchema.parse(
      hrisPayrollsOneCompensations,
    ),
  );
}

export function hrisPayrollsOneCompensationsFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneCompensations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneCompensations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneCompensations' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneCustomMappings$inboundSchema: z.ZodType<
  HrisPayrollsOneCustomMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisPayrollsOneCustomMappings$Outbound = {};

/** @internal */
export const HrisPayrollsOneCustomMappings$outboundSchema: z.ZodType<
  HrisPayrollsOneCustomMappings$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneCustomMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneCustomMappings$ {
  /** @deprecated use `HrisPayrollsOneCustomMappings$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneCustomMappings$inboundSchema;
  /** @deprecated use `HrisPayrollsOneCustomMappings$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneCustomMappings$outboundSchema;
  /** @deprecated use `HrisPayrollsOneCustomMappings$Outbound` instead. */
  export type Outbound = HrisPayrollsOneCustomMappings$Outbound;
}

export function hrisPayrollsOneCustomMappingsToJSON(
  hrisPayrollsOneCustomMappings: HrisPayrollsOneCustomMappings,
): string {
  return JSON.stringify(
    HrisPayrollsOneCustomMappings$outboundSchema.parse(
      hrisPayrollsOneCustomMappings,
    ),
  );
}

export function hrisPayrollsOneCustomMappingsFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneCustomMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneCustomMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneCustomMappings' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneData$inboundSchema: z.ZodType<
  HrisPayrollsOneData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
  company_id: z.nullable(z.string()).optional(),
  processed: z.nullable(z.boolean()),
  processed_date: z.nullable(z.string()).optional(),
  check_date: z.nullable(z.string()),
  start_date: z.nullable(z.string()),
  end_date: z.nullable(z.string()),
  totals: z.lazy(() => HrisPayrollsOneTotals$inboundSchema).optional(),
  compensations: z.array(
    z.lazy(() => HrisPayrollsOneCompensations$inboundSchema),
  ).optional(),
  custom_mappings: z.nullable(
    z.lazy(() => HrisPayrollsOneCustomMappings$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "processed_date": "processedDate",
    "check_date": "checkDate",
    "start_date": "startDate",
    "end_date": "endDate",
    "custom_mappings": "customMappings",
  });
});

/** @internal */
export type HrisPayrollsOneData$Outbound = {
  id: string | null;
  company_id?: string | null | undefined;
  processed: boolean | null;
  processed_date?: string | null | undefined;
  check_date: string | null;
  start_date: string | null;
  end_date: string | null;
  totals?: HrisPayrollsOneTotals$Outbound | undefined;
  compensations?: Array<HrisPayrollsOneCompensations$Outbound> | undefined;
  custom_mappings?: HrisPayrollsOneCustomMappings$Outbound | null | undefined;
};

/** @internal */
export const HrisPayrollsOneData$outboundSchema: z.ZodType<
  HrisPayrollsOneData$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneData
> = z.object({
  id: z.nullable(z.string()),
  companyId: z.nullable(z.string()).optional(),
  processed: z.nullable(z.boolean()),
  processedDate: z.nullable(z.string()).optional(),
  checkDate: z.nullable(z.string()),
  startDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
  totals: z.lazy(() => HrisPayrollsOneTotals$outboundSchema).optional(),
  compensations: z.array(
    z.lazy(() => HrisPayrollsOneCompensations$outboundSchema),
  ).optional(),
  customMappings: z.nullable(
    z.lazy(() => HrisPayrollsOneCustomMappings$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    processedDate: "processed_date",
    checkDate: "check_date",
    startDate: "start_date",
    endDate: "end_date",
    customMappings: "custom_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneData$ {
  /** @deprecated use `HrisPayrollsOneData$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneData$inboundSchema;
  /** @deprecated use `HrisPayrollsOneData$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneData$outboundSchema;
  /** @deprecated use `HrisPayrollsOneData$Outbound` instead. */
  export type Outbound = HrisPayrollsOneData$Outbound;
}

export function hrisPayrollsOneDataToJSON(
  hrisPayrollsOneData: HrisPayrollsOneData,
): string {
  return JSON.stringify(
    HrisPayrollsOneData$outboundSchema.parse(hrisPayrollsOneData),
  );
}

export function hrisPayrollsOneDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneData' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneResponseBody$inboundSchema: z.ZodType<
  HrisPayrollsOneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisPayrollsOneData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type HrisPayrollsOneResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: HrisPayrollsOneData$Outbound;
};

/** @internal */
export const HrisPayrollsOneResponseBody$outboundSchema: z.ZodType<
  HrisPayrollsOneResponseBody$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => HrisPayrollsOneData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneResponseBody$ {
  /** @deprecated use `HrisPayrollsOneResponseBody$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneResponseBody$inboundSchema;
  /** @deprecated use `HrisPayrollsOneResponseBody$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneResponseBody$outboundSchema;
  /** @deprecated use `HrisPayrollsOneResponseBody$Outbound` instead. */
  export type Outbound = HrisPayrollsOneResponseBody$Outbound;
}

export function hrisPayrollsOneResponseBodyToJSON(
  hrisPayrollsOneResponseBody: HrisPayrollsOneResponseBody,
): string {
  return JSON.stringify(
    HrisPayrollsOneResponseBody$outboundSchema.parse(
      hrisPayrollsOneResponseBody,
    ),
  );
}

export function hrisPayrollsOneResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneResponseBody' from JSON`,
  );
}

/** @internal */
export const HrisPayrollsOneResponse$inboundSchema: z.ZodType<
  HrisPayrollsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisPayrollsOneResponseBody$inboundSchema),
  z.lazy(() => HrisPayrollsOneHrisPayrollsResponseBody$inboundSchema),
]);

/** @internal */
export type HrisPayrollsOneResponse$Outbound =
  | HrisPayrollsOneResponseBody$Outbound
  | HrisPayrollsOneHrisPayrollsResponseBody$Outbound;

/** @internal */
export const HrisPayrollsOneResponse$outboundSchema: z.ZodType<
  HrisPayrollsOneResponse$Outbound,
  z.ZodTypeDef,
  HrisPayrollsOneResponse
> = z.union([
  z.lazy(() => HrisPayrollsOneResponseBody$outboundSchema),
  z.lazy(() => HrisPayrollsOneHrisPayrollsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayrollsOneResponse$ {
  /** @deprecated use `HrisPayrollsOneResponse$inboundSchema` instead. */
  export const inboundSchema = HrisPayrollsOneResponse$inboundSchema;
  /** @deprecated use `HrisPayrollsOneResponse$outboundSchema` instead. */
  export const outboundSchema = HrisPayrollsOneResponse$outboundSchema;
  /** @deprecated use `HrisPayrollsOneResponse$Outbound` instead. */
  export type Outbound = HrisPayrollsOneResponse$Outbound;
}

export function hrisPayrollsOneResponseToJSON(
  hrisPayrollsOneResponse: HrisPayrollsOneResponse,
): string {
  return JSON.stringify(
    HrisPayrollsOneResponse$outboundSchema.parse(hrisPayrollsOneResponse),
  );
}

export function hrisPayrollsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayrollsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayrollsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayrollsOneResponse' from JSON`,
  );
}
