/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PipelinesDeleteSecurity = {
  apiKey: string;
};

export type PipelinesDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId: string;
  /**
   * The ID of your Unify application
   */
  appId: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

/**
 * Contains parameter or domain specific information related to the error and why it occurred.
 */
export type PipelinesDeleteDetail = string | { [k: string]: any };

/**
 * Unexpected error
 */
export type PipelinesDeletePipelinesResponseBody = {
  /**
   * HTTP status code
   */
  statusCode?: number | undefined;
  /**
   * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
   */
  error?: string | undefined;
  /**
   * The type of error returned
   */
  typeName?: string | undefined;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string | undefined;
  /**
   * Contains parameter or domain specific information related to the error and why it occurred.
   */
  detail?: string | { [k: string]: any } | undefined;
  /**
   * Link to documentation of error type
   */
  ref?: string | undefined;
};

export type PipelinesDeleteUnifiedId = {
  /**
   * The unique identifier of the resource
   */
  id: string;
};

/**
 * Pipeline deleted
 */
export type PipelinesDeleteResponseBody = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  /**
   * Apideck ID of service provider
   */
  service: string;
  /**
   * Unified API resource name
   */
  resource: string;
  /**
   * Operation performed
   */
  operation: string;
  data: PipelinesDeleteUnifiedId;
};

export type PipelinesDeleteResponse =
  | PipelinesDeleteResponseBody
  | PipelinesDeletePipelinesResponseBody;

/** @internal */
export const PipelinesDeleteSecurity$inboundSchema: z.ZodType<
  PipelinesDeleteSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type PipelinesDeleteSecurity$Outbound = {
  apiKey: string;
};

/** @internal */
export const PipelinesDeleteSecurity$outboundSchema: z.ZodType<
  PipelinesDeleteSecurity$Outbound,
  z.ZodTypeDef,
  PipelinesDeleteSecurity
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeleteSecurity$ {
  /** @deprecated use `PipelinesDeleteSecurity$inboundSchema` instead. */
  export const inboundSchema = PipelinesDeleteSecurity$inboundSchema;
  /** @deprecated use `PipelinesDeleteSecurity$outboundSchema` instead. */
  export const outboundSchema = PipelinesDeleteSecurity$outboundSchema;
  /** @deprecated use `PipelinesDeleteSecurity$Outbound` instead. */
  export type Outbound = PipelinesDeleteSecurity$Outbound;
}

export function pipelinesDeleteSecurityToJSON(
  pipelinesDeleteSecurity: PipelinesDeleteSecurity,
): string {
  return JSON.stringify(
    PipelinesDeleteSecurity$outboundSchema.parse(pipelinesDeleteSecurity),
  );
}

export function pipelinesDeleteSecurityFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesDeleteSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesDeleteSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesDeleteSecurity' from JSON`,
  );
}

/** @internal */
export const PipelinesDeleteRequest$inboundSchema: z.ZodType<
  PipelinesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type PipelinesDeleteRequest$Outbound = {
  id: string;
  consumerId: string;
  appId: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const PipelinesDeleteRequest$outboundSchema: z.ZodType<
  PipelinesDeleteRequest$Outbound,
  z.ZodTypeDef,
  PipelinesDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string(),
  appId: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeleteRequest$ {
  /** @deprecated use `PipelinesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = PipelinesDeleteRequest$inboundSchema;
  /** @deprecated use `PipelinesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = PipelinesDeleteRequest$outboundSchema;
  /** @deprecated use `PipelinesDeleteRequest$Outbound` instead. */
  export type Outbound = PipelinesDeleteRequest$Outbound;
}

export function pipelinesDeleteRequestToJSON(
  pipelinesDeleteRequest: PipelinesDeleteRequest,
): string {
  return JSON.stringify(
    PipelinesDeleteRequest$outboundSchema.parse(pipelinesDeleteRequest),
  );
}

export function pipelinesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const PipelinesDeleteDetail$inboundSchema: z.ZodType<
  PipelinesDeleteDetail,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.record(z.any())]);

/** @internal */
export type PipelinesDeleteDetail$Outbound = string | { [k: string]: any };

/** @internal */
export const PipelinesDeleteDetail$outboundSchema: z.ZodType<
  PipelinesDeleteDetail$Outbound,
  z.ZodTypeDef,
  PipelinesDeleteDetail
> = z.union([z.string(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeleteDetail$ {
  /** @deprecated use `PipelinesDeleteDetail$inboundSchema` instead. */
  export const inboundSchema = PipelinesDeleteDetail$inboundSchema;
  /** @deprecated use `PipelinesDeleteDetail$outboundSchema` instead. */
  export const outboundSchema = PipelinesDeleteDetail$outboundSchema;
  /** @deprecated use `PipelinesDeleteDetail$Outbound` instead. */
  export type Outbound = PipelinesDeleteDetail$Outbound;
}

export function pipelinesDeleteDetailToJSON(
  pipelinesDeleteDetail: PipelinesDeleteDetail,
): string {
  return JSON.stringify(
    PipelinesDeleteDetail$outboundSchema.parse(pipelinesDeleteDetail),
  );
}

export function pipelinesDeleteDetailFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesDeleteDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesDeleteDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesDeleteDetail' from JSON`,
  );
}

/** @internal */
export const PipelinesDeletePipelinesResponseBody$inboundSchema: z.ZodType<
  PipelinesDeletePipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().optional(),
  error: z.string().optional(),
  type_name: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "type_name": "typeName",
  });
});

/** @internal */
export type PipelinesDeletePipelinesResponseBody$Outbound = {
  status_code?: number | undefined;
  error?: string | undefined;
  type_name?: string | undefined;
  message?: string | undefined;
  detail?: string | { [k: string]: any } | undefined;
  ref?: string | undefined;
};

/** @internal */
export const PipelinesDeletePipelinesResponseBody$outboundSchema: z.ZodType<
  PipelinesDeletePipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesDeletePipelinesResponseBody
> = z.object({
  statusCode: z.number().optional(),
  error: z.string().optional(),
  typeName: z.string().optional(),
  message: z.string().optional(),
  detail: z.union([z.string(), z.record(z.any())]).optional(),
  ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    typeName: "type_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeletePipelinesResponseBody$ {
  /** @deprecated use `PipelinesDeletePipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PipelinesDeletePipelinesResponseBody$inboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PipelinesDeletePipelinesResponseBody$outboundSchema;
  /** @deprecated use `PipelinesDeletePipelinesResponseBody$Outbound` instead. */
  export type Outbound = PipelinesDeletePipelinesResponseBody$Outbound;
}

export function pipelinesDeletePipelinesResponseBodyToJSON(
  pipelinesDeletePipelinesResponseBody: PipelinesDeletePipelinesResponseBody,
): string {
  return JSON.stringify(
    PipelinesDeletePipelinesResponseBody$outboundSchema.parse(
      pipelinesDeletePipelinesResponseBody,
    ),
  );
}

export function pipelinesDeletePipelinesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesDeletePipelinesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipelinesDeletePipelinesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesDeletePipelinesResponseBody' from JSON`,
  );
}

/** @internal */
export const PipelinesDeleteUnifiedId$inboundSchema: z.ZodType<
  PipelinesDeleteUnifiedId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type PipelinesDeleteUnifiedId$Outbound = {
  id: string;
};

/** @internal */
export const PipelinesDeleteUnifiedId$outboundSchema: z.ZodType<
  PipelinesDeleteUnifiedId$Outbound,
  z.ZodTypeDef,
  PipelinesDeleteUnifiedId
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeleteUnifiedId$ {
  /** @deprecated use `PipelinesDeleteUnifiedId$inboundSchema` instead. */
  export const inboundSchema = PipelinesDeleteUnifiedId$inboundSchema;
  /** @deprecated use `PipelinesDeleteUnifiedId$outboundSchema` instead. */
  export const outboundSchema = PipelinesDeleteUnifiedId$outboundSchema;
  /** @deprecated use `PipelinesDeleteUnifiedId$Outbound` instead. */
  export type Outbound = PipelinesDeleteUnifiedId$Outbound;
}

export function pipelinesDeleteUnifiedIdToJSON(
  pipelinesDeleteUnifiedId: PipelinesDeleteUnifiedId,
): string {
  return JSON.stringify(
    PipelinesDeleteUnifiedId$outboundSchema.parse(pipelinesDeleteUnifiedId),
  );
}

export function pipelinesDeleteUnifiedIdFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesDeleteUnifiedId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesDeleteUnifiedId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesDeleteUnifiedId' from JSON`,
  );
}

/** @internal */
export const PipelinesDeleteResponseBody$inboundSchema: z.ZodType<
  PipelinesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelinesDeleteUnifiedId$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type PipelinesDeleteResponseBody$Outbound = {
  status_code: number;
  status: string;
  service: string;
  resource: string;
  operation: string;
  data: PipelinesDeleteUnifiedId$Outbound;
};

/** @internal */
export const PipelinesDeleteResponseBody$outboundSchema: z.ZodType<
  PipelinesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  PipelinesDeleteResponseBody
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  service: z.string(),
  resource: z.string(),
  operation: z.string(),
  data: z.lazy(() => PipelinesDeleteUnifiedId$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeleteResponseBody$ {
  /** @deprecated use `PipelinesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = PipelinesDeleteResponseBody$inboundSchema;
  /** @deprecated use `PipelinesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = PipelinesDeleteResponseBody$outboundSchema;
  /** @deprecated use `PipelinesDeleteResponseBody$Outbound` instead. */
  export type Outbound = PipelinesDeleteResponseBody$Outbound;
}

export function pipelinesDeleteResponseBodyToJSON(
  pipelinesDeleteResponseBody: PipelinesDeleteResponseBody,
): string {
  return JSON.stringify(
    PipelinesDeleteResponseBody$outboundSchema.parse(
      pipelinesDeleteResponseBody,
    ),
  );
}

export function pipelinesDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesDeleteResponseBody' from JSON`,
  );
}

/** @internal */
export const PipelinesDeleteResponse$inboundSchema: z.ZodType<
  PipelinesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PipelinesDeleteResponseBody$inboundSchema),
  z.lazy(() => PipelinesDeletePipelinesResponseBody$inboundSchema),
]);

/** @internal */
export type PipelinesDeleteResponse$Outbound =
  | PipelinesDeleteResponseBody$Outbound
  | PipelinesDeletePipelinesResponseBody$Outbound;

/** @internal */
export const PipelinesDeleteResponse$outboundSchema: z.ZodType<
  PipelinesDeleteResponse$Outbound,
  z.ZodTypeDef,
  PipelinesDeleteResponse
> = z.union([
  z.lazy(() => PipelinesDeleteResponseBody$outboundSchema),
  z.lazy(() => PipelinesDeletePipelinesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelinesDeleteResponse$ {
  /** @deprecated use `PipelinesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = PipelinesDeleteResponse$inboundSchema;
  /** @deprecated use `PipelinesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = PipelinesDeleteResponse$outboundSchema;
  /** @deprecated use `PipelinesDeleteResponse$Outbound` instead. */
  export type Outbound = PipelinesDeleteResponse$Outbound;
}

export function pipelinesDeleteResponseToJSON(
  pipelinesDeleteResponse: PipelinesDeleteResponse,
): string {
  return JSON.stringify(
    PipelinesDeleteResponse$outboundSchema.parse(pipelinesDeleteResponse),
  );
}

export function pipelinesDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<PipelinesDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelinesDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelinesDeleteResponse' from JSON`,
  );
}
