/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ApideckCore } from "../core.js";
import {
  encodeDeepObjectQuery,
  encodeFormQuery,
  encodeSimple,
  queryJoin,
} from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { resolveSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

/**
 * Retrieve a list of companies from the CRM.
 *
 * @remarks
 * The `companiesAll` operation allows API consumers to retrieve a comprehensive list of companies stored within the CRM system. This GET request to the `/crm/companies` endpoint supports various query parameters to customize the response. Key parameters include `x-apideck-consumer-id` and `x-apideck-app-id`, which are mandatory headers for authentication and application identification. Optional query parameters such as `cursor` and `limit` enable pagination, while `filter` and `sort` allow for refined data retrieval based on specific criteria. The `fields` parameter lets users specify which fields to include in the response, optimizing data handling by returning only necessary information. The operation supports debugging through the `raw` parameter and can pass additional unmapped query parameters using `pass_through`. The response will include a list of companies, with pagination details available in the `meta.cursors` property. This operation is essential for integrating CRM data into applications, providing flexibility and control over the data retrieval process.
 */
export async function companiesCompaniesAll(
  client: ApideckCore,
  security: operations.CompaniesAllSecurity,
  request: operations.CompaniesAllRequest,
  options?: RequestOptions,
): Promise<
  Result<
    operations.CompaniesAllResponse,
    | errors.CompaniesAllResponseBody
    | errors.CompaniesAllCompaniesResponseBody
    | errors.CompaniesAllCompaniesResponseResponseBody
    | errors.CompaniesAllCompaniesResponse404ResponseBody
    | errors.CompaniesAllCompaniesResponse422ResponseBody
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) => operations.CompaniesAllRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc("/crm/companies")();

  const query = queryJoin(
    encodeDeepObjectQuery({
      "filter": payload.filter,
      "pass_through": payload.pass_through,
      "sort": payload.sort,
    }),
    encodeFormQuery({
      "cursor": payload.cursor,
      "fields": payload.fields,
      "limit": payload.limit,
      "raw": payload.raw,
    }),
  );

  const headers = new Headers({
    Accept: "application/json",
    "x-apideck-app-id": encodeSimple("x-apideck-app-id", payload.appId, {
      explode: false,
      charEncoding: "none",
    }),
    "x-apideck-consumer-id": encodeSimple(
      "x-apideck-consumer-id",
      payload.consumerId,
      { explode: false, charEncoding: "none" },
    ),
    "x-apideck-service-id": encodeSimple(
      "x-apideck-service-id",
      payload.serviceId,
      { explode: false, charEncoding: "none" },
    ),
  });

  const requestSecurity = resolveSecurity(
    [
      {
        fieldName: "Authorization",
        type: "apiKey:header",
        value: security?.apiKey,
      },
    ],
  );

  const context = {
    operationID: "companiesAll",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "402", "404", "422", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.CompaniesAllResponse,
    | errors.CompaniesAllResponseBody
    | errors.CompaniesAllCompaniesResponseBody
    | errors.CompaniesAllCompaniesResponseResponseBody
    | errors.CompaniesAllCompaniesResponse404ResponseBody
    | errors.CompaniesAllCompaniesResponse422ResponseBody
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.CompaniesAllResponse$inboundSchema),
    M.jsonErr(400, errors.CompaniesAllResponseBody$inboundSchema),
    M.jsonErr(401, errors.CompaniesAllCompaniesResponseBody$inboundSchema),
    M.jsonErr(
      402,
      errors.CompaniesAllCompaniesResponseResponseBody$inboundSchema,
    ),
    M.jsonErr(
      404,
      errors.CompaniesAllCompaniesResponse404ResponseBody$inboundSchema,
    ),
    M.jsonErr(
      422,
      errors.CompaniesAllCompaniesResponse422ResponseBody$inboundSchema,
    ),
    M.fail(["4XX", "5XX"]),
    M.json("default", operations.CompaniesAllResponse$inboundSchema),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
