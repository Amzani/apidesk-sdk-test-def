/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { leadsLeadsAdd } from "../funcs/leadsLeadsAdd.js";
import { leadsLeadsAll } from "../funcs/leadsLeadsAll.js";
import { leadsLeadsDelete } from "../funcs/leadsLeadsDelete.js";
import { leadsLeadsOne } from "../funcs/leadsLeadsOne.js";
import { leadsLeadsUpdate } from "../funcs/leadsLeadsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Leads extends ClientSDK {
  /**
   * List leads
   *
   * @remarks
   * List leads
   */
  async leadsAll(
    security: operations.LeadsAllSecurity,
    request: operations.LeadsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.LeadsAllResponse> {
    return unwrapAsync(leadsLeadsAll(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create lead
   *
   * @remarks
   * Create lead
   */
  async leadsAdd(
    security: operations.LeadsAddSecurity,
    request: operations.LeadsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.LeadsAddResponse> {
    return unwrapAsync(leadsLeadsAdd(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get lead
   *
   * @remarks
   * Get lead
   */
  async leadsOne(
    security: operations.LeadsOneSecurity,
    request: operations.LeadsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.LeadsOneResponse> {
    return unwrapAsync(leadsLeadsOne(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update lead
   *
   * @remarks
   * Update lead
   */
  async leadsUpdate(
    security: operations.LeadsUpdateSecurity,
    request: operations.LeadsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.LeadsUpdateResponse> {
    return unwrapAsync(leadsLeadsUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete lead
   *
   * @remarks
   * Delete lead
   */
  async leadsDelete(
    security: operations.LeadsDeleteSecurity,
    request: operations.LeadsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.LeadsDeleteResponse> {
    return unwrapAsync(leadsLeadsDelete(
      this,
      security,
      request,
      options,
    ));
  }
}
