/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contactsContactsAdd } from "../funcs/contactsContactsAdd.js";
import { contactsContactsAll } from "../funcs/contactsContactsAll.js";
import { contactsContactsDelete } from "../funcs/contactsContactsDelete.js";
import { contactsContactsOne } from "../funcs/contactsContactsOne.js";
import { contactsContactsUpdate } from "../funcs/contactsContactsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Contacts extends ClientSDK {
  /**
   * List contacts
   *
   * @remarks
   * List contacts
   */
  async contactsAll(
    security: operations.ContactsAllSecurity,
    request: operations.ContactsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.ContactsAllResponse> {
    return unwrapAsync(contactsContactsAll(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create contact
   *
   * @remarks
   * Create contact
   */
  async contactsAdd(
    security: operations.ContactsAddSecurity,
    request: operations.ContactsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.ContactsAddResponse> {
    return unwrapAsync(contactsContactsAdd(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get contact
   *
   * @remarks
   * Get contact
   */
  async contactsOne(
    security: operations.ContactsOneSecurity,
    request: operations.ContactsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.ContactsOneResponse> {
    return unwrapAsync(contactsContactsOne(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update contact
   *
   * @remarks
   * Update contact
   */
  async contactsUpdate(
    security: operations.ContactsUpdateSecurity,
    request: operations.ContactsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.ContactsUpdateResponse> {
    return unwrapAsync(contactsContactsUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete contact
   *
   * @remarks
   * Delete contact
   */
  async contactsDelete(
    security: operations.ContactsDeleteSecurity,
    request: operations.ContactsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.ContactsDeleteResponse> {
    return unwrapAsync(contactsContactsDelete(
      this,
      security,
      request,
      options,
    ));
  }
}
