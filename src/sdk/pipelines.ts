/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { pipelinesPipelinesAdd } from "../funcs/pipelinesPipelinesAdd.js";
import { pipelinesPipelinesAll } from "../funcs/pipelinesPipelinesAll.js";
import { pipelinesPipelinesDelete } from "../funcs/pipelinesPipelinesDelete.js";
import { pipelinesPipelinesOne } from "../funcs/pipelinesPipelinesOne.js";
import { pipelinesPipelinesUpdate } from "../funcs/pipelinesPipelinesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Pipelines extends ClientSDK {
  /**
   * List pipelines
   *
   * @remarks
   * List pipelines
   */
  async pipelinesAll(
    security: operations.PipelinesAllSecurity,
    request: operations.PipelinesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.PipelinesAllResponse> {
    return unwrapAsync(pipelinesPipelinesAll(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create pipeline
   *
   * @remarks
   * Create pipeline
   */
  async pipelinesAdd(
    security: operations.PipelinesAddSecurity,
    request: operations.PipelinesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.PipelinesAddResponse> {
    return unwrapAsync(pipelinesPipelinesAdd(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get pipeline
   *
   * @remarks
   * Get pipeline
   */
  async pipelinesOne(
    security: operations.PipelinesOneSecurity,
    request: operations.PipelinesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.PipelinesOneResponse> {
    return unwrapAsync(pipelinesPipelinesOne(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update pipeline
   *
   * @remarks
   * Update pipeline
   */
  async pipelinesUpdate(
    security: operations.PipelinesUpdateSecurity,
    request: operations.PipelinesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.PipelinesUpdateResponse> {
    return unwrapAsync(pipelinesPipelinesUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete pipeline
   *
   * @remarks
   * Delete pipeline
   */
  async pipelinesDelete(
    security: operations.PipelinesDeleteSecurity,
    request: operations.PipelinesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.PipelinesDeleteResponse> {
    return unwrapAsync(pipelinesPipelinesDelete(
      this,
      security,
      request,
      options,
    ));
  }
}
