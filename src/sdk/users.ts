/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersUsersAdd } from "../funcs/usersUsersAdd.js";
import { usersUsersAll } from "../funcs/usersUsersAll.js";
import { usersUsersDelete } from "../funcs/usersUsersDelete.js";
import { usersUsersOne } from "../funcs/usersUsersOne.js";
import { usersUsersUpdate } from "../funcs/usersUsersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Users extends ClientSDK {
  /**
   * List users
   *
   * @remarks
   * List users
   */
  async usersAll(
    security: operations.UsersAllSecurity,
    request: operations.UsersAllRequest,
    options?: RequestOptions,
  ): Promise<operations.UsersAllResponse> {
    return unwrapAsync(usersUsersAll(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create user
   *
   * @remarks
   * Create user
   */
  async usersAdd(
    security: operations.UsersAddSecurity,
    request: operations.UsersAddRequest,
    options?: RequestOptions,
  ): Promise<operations.UsersAddResponse> {
    return unwrapAsync(usersUsersAdd(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get user
   *
   * @remarks
   * Get user
   */
  async usersOne(
    security: operations.UsersOneSecurity,
    request: operations.UsersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.UsersOneResponse> {
    return unwrapAsync(usersUsersOne(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * Update user
   */
  async usersUpdate(
    security: operations.UsersUpdateSecurity,
    request: operations.UsersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.UsersUpdateResponse> {
    return unwrapAsync(usersUsersUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete user
   *
   * @remarks
   * Delete user
   */
  async usersDelete(
    security: operations.UsersDeleteSecurity,
    request: operations.UsersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.UsersDeleteResponse> {
    return unwrapAsync(usersUsersDelete(
      this,
      security,
      request,
      options,
    ));
  }
}
