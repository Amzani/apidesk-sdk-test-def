/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { crmNotesCreate } from "../funcs/crmNotesCreate.js";
import { crmNotesDelete } from "../funcs/crmNotesDelete.js";
import { crmNotesGet } from "../funcs/crmNotesGet.js";
import { crmNotesList } from "../funcs/crmNotesList.js";
import { crmNotesUpdate } from "../funcs/crmNotesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Notes extends ClientSDK {
  /**
   * Retrieve all CRM notes efficiently for analysis and integration.
   *
   * @remarks
   * The 'notesAll' operation allows developers to fetch all notes from the CRM system using a GET request to the '/crm/notes' endpoint. This operation is crucial for applications that need to aggregate, analyze, or integrate CRM notes data. Key parameters include 'raw' for debugging, 'x-apideck-consumer-id' and 'x-apideck-app-id' for authentication, and 'cursor' and 'limit' for pagination control. The response is a JSON object containing the notes data, which can be tailored using the 'fields' parameter to include only specific fields. This operation supports efficient data retrieval and integration into various applications, enhancing CRM data utility.
   */
  async list(
    request: operations.CrmNotesAllRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.CrmNotesAllResponse, { cursor: string }>> {
    return unwrapResultIterator(crmNotesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a new note to the CRM system for a specified consumer.
   *
   * @remarks
   * The notesAdd operation allows developers to create and add a new note to the CRM system associated with a specific consumer. This operation is essential for maintaining detailed records and enhancing customer relationship management. To execute this operation, you must include the x-apideck-consumer-id and x-apideck-app-id headers for authentication and authorization. Optionally, the x-apideck-service-id can be specified if targeting a specific service integration. The request body should contain the note details to be added. Upon successful creation, the API returns a status code of 201, indicating the note has been successfully added, along with the ID of the newly created note. This operation supports a 'raw' query parameter for debugging purposes, which, when set to true, includes raw response data.
   */
  async create(
    request: operations.CrmNotesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmNotesAddResponse> {
    return unwrapAsync(crmNotesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a specific CRM note by its ID.
   *
   * @remarks
   * The 'notesOne' operation allows developers to retrieve a specific note from the CRM system using its unique ID. This GET request requires the 'id' parameter in the path to specify which note to fetch. Additionally, headers such as 'x-apideck-consumer-id' and 'x-apideck-app-id' are mandatory for authentication and authorization purposes. The operation can also target specific service integrations using the 'x-apideck-service-id' header if multiple integrations are active. Optional query parameters include 'raw' for obtaining raw service data and 'fields' for customizing the response fields. The response is typically a JSON object containing the note details, provided the request is successful with a 200 status code.
   */
  async get(
    request: operations.CrmNotesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmNotesOneResponse> {
    return unwrapAsync(crmNotesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an existing note in the CRM system using its unique ID.
   *
   * @remarks
   * The notesUpdate operation allows you to modify an existing note in the CRM by specifying its unique ID in the endpoint path. This PATCH request requires the 'id' parameter to identify the note to be updated. Additionally, headers such as 'x-apideck-consumer-id' and 'x-apideck-app-id' are mandatory for authentication and routing purposes. Optionally, 'x-apideck-service-id' can be included to target a specific service integration. The 'raw' query parameter can be set to true to receive the raw response data for debugging. Upon successful update, the operation returns a status code of 200, indicating the note has been updated successfully. The response typically includes the updated note details in a JSON format.
   */
  async update(
    request: operations.CrmNotesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmNotesUpdateResponse> {
    return unwrapAsync(crmNotesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a specific note from the CRM system using its unique ID.
   *
   * @remarks
   * The notesDelete operation allows you to remove a note from the CRM by specifying its unique ID in the endpoint path. This operation is crucial for maintaining data accuracy and relevance within your CRM system by enabling the deletion of outdated or incorrect notes. To execute this operation, you must provide the 'id' of the note you wish to delete, along with the 'x-apideck-consumer-id' and 'x-apideck-app-id' headers for authentication. Optionally, you can specify the 'x-apideck-service-id' if targeting a specific service integration. The operation does not require a request body and will return a status code of 200 upon successful deletion, indicating that the note has been removed from the system. This operation is essential for keeping your CRM data clean and up-to-date.
   */
  async delete(
    request: operations.CrmNotesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmNotesDeleteResponse> {
    return unwrapAsync(crmNotesDelete(
      this,
      request,
      options,
    ));
  }
}
