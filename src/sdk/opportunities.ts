/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { opportunitiesOpportunitiesAdd } from "../funcs/opportunitiesOpportunitiesAdd.js";
import { opportunitiesOpportunitiesAll } from "../funcs/opportunitiesOpportunitiesAll.js";
import { opportunitiesOpportunitiesDelete } from "../funcs/opportunitiesOpportunitiesDelete.js";
import { opportunitiesOpportunitiesOne } from "../funcs/opportunitiesOpportunitiesOne.js";
import { opportunitiesOpportunitiesUpdate } from "../funcs/opportunitiesOpportunitiesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Opportunities extends ClientSDK {
  /**
   * List opportunities
   *
   * @remarks
   * List opportunities
   */
  async opportunitiesAll(
    security: operations.OpportunitiesAllSecurity,
    request: operations.OpportunitiesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.OpportunitiesAllResponse> {
    return unwrapAsync(opportunitiesOpportunitiesAll(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create opportunity
   *
   * @remarks
   * Create opportunity
   */
  async opportunitiesAdd(
    security: operations.OpportunitiesAddSecurity,
    request: operations.OpportunitiesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.OpportunitiesAddResponse> {
    return unwrapAsync(opportunitiesOpportunitiesAdd(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get opportunity
   *
   * @remarks
   * Get opportunity
   */
  async opportunitiesOne(
    security: operations.OpportunitiesOneSecurity,
    request: operations.OpportunitiesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.OpportunitiesOneResponse> {
    return unwrapAsync(opportunitiesOpportunitiesOne(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update opportunity
   *
   * @remarks
   * Update opportunity
   */
  async opportunitiesUpdate(
    security: operations.OpportunitiesUpdateSecurity,
    request: operations.OpportunitiesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.OpportunitiesUpdateResponse> {
    return unwrapAsync(opportunitiesOpportunitiesUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete opportunity
   *
   * @remarks
   * Delete opportunity
   */
  async opportunitiesDelete(
    security: operations.OpportunitiesDeleteSecurity,
    request: operations.OpportunitiesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.OpportunitiesDeleteResponse> {
    return unwrapAsync(opportunitiesOpportunitiesDelete(
      this,
      security,
      request,
      options,
    ));
  }
}
