/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { activitiesActivitiesAdd } from "../funcs/activitiesActivitiesAdd.js";
import { activitiesActivitiesAll } from "../funcs/activitiesActivitiesAll.js";
import { activitiesActivitiesDelete } from "../funcs/activitiesActivitiesDelete.js";
import { activitiesActivitiesOne } from "../funcs/activitiesActivitiesOne.js";
import { activitiesActivitiesUpdate } from "../funcs/activitiesActivitiesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Activities extends ClientSDK {
  /**
   * List activities
   *
   * @remarks
   * List activities
   */
  async activitiesAll(
    security: operations.ActivitiesAllSecurity,
    request: operations.ActivitiesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.ActivitiesAllResponse> {
    return unwrapAsync(activitiesActivitiesAll(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Create activity
   *
   * @remarks
   * Create activity
   */
  async activitiesAdd(
    security: operations.ActivitiesAddSecurity,
    request: operations.ActivitiesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.ActivitiesAddResponse> {
    return unwrapAsync(activitiesActivitiesAdd(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get activity
   *
   * @remarks
   * Get activity
   */
  async activitiesOne(
    security: operations.ActivitiesOneSecurity,
    request: operations.ActivitiesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.ActivitiesOneResponse> {
    return unwrapAsync(activitiesActivitiesOne(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update activity
   *
   * @remarks
   * Update activity
   */
  async activitiesUpdate(
    security: operations.ActivitiesUpdateSecurity,
    request: operations.ActivitiesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.ActivitiesUpdateResponse> {
    return unwrapAsync(activitiesActivitiesUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete activity
   *
   * @remarks
   * Delete activity
   */
  async activitiesDelete(
    security: operations.ActivitiesDeleteSecurity,
    request: operations.ActivitiesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.ActivitiesDeleteResponse> {
    return unwrapAsync(activitiesActivitiesDelete(
      this,
      security,
      request,
      options,
    ));
  }
}
