/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { crmActivitiesCreate } from "../funcs/crmActivitiesCreate.js";
import { crmActivitiesDelete } from "../funcs/crmActivitiesDelete.js";
import { crmActivitiesGet } from "../funcs/crmActivitiesGet.js";
import { crmActivitiesList } from "../funcs/crmActivitiesList.js";
import { crmActivitiesUpdate } from "../funcs/crmActivitiesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Activities extends ClientSDK {
  /**
   * Retrieve all CRM activities with optional filtering and sorting.
   *
   * @remarks
   * The 'activitiesAll' operation allows developers to fetch a comprehensive list of CRM activities using the GET method at the '/crm/activities' endpoint. This operation supports various query parameters for enhanced data retrieval, including 'raw' for debugging, 'cursor' for pagination, 'limit' for controlling data volume, 'filter' and 'sort' for data customization, and 'fields' for specifying response content. Essential headers like 'x-apideck-consumer-id' and 'x-apideck-app-id' are required for authentication. The response is a JSON object containing the requested activities, facilitating efficient data management and integration within CRM systems.
   */
  async list(
    request: operations.CrmActivitiesAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.CrmActivitiesAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(crmActivitiesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a new activity to the CRM system.
   *
   * @remarks
   * The activitiesAdd operation allows developers to add a new activity to the CRM system by sending a POST request to the /crm/activities endpoint. This operation is crucial for maintaining up-to-date records of interactions and engagements within the CRM. The request must include a valid x-apideck-consumer-id and x-apideck-app-id in the headers for authentication and authorization. Optionally, the x-apideck-service-id can be specified to target a specific service integration. The 'raw' query parameter can be set to true to receive the raw data response, useful for debugging. Upon successful creation, the API returns a 201 status code along with the ID of the newly created activity, encapsulated in a JSON object.
   */
  async create(
    request: operations.CrmActivitiesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesAddResponse> {
    return unwrapAsync(crmActivitiesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a specific CRM activity by its ID.
   *
   * @remarks
   * The 'activitiesOne' operation allows developers to fetch detailed information about a specific CRM activity using its unique ID. This GET request requires the 'id' parameter in the path to identify the activity record. Additionally, headers such as 'x-apideck-consumer-id' and 'x-apideck-app-id' are mandatory for authentication and routing purposes. Optionally, the 'x-apideck-service-id' header can be used to specify a service integration if multiple are active. Query parameters like 'raw' and 'fields' enable developers to customize the response, either by receiving raw data for debugging or by selecting specific fields to optimize performance. The response is typically a JSON object containing the activity details, ensuring developers have the necessary information for further processing or display.
   */
  async get(
    request: operations.CrmActivitiesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesOneResponse> {
    return unwrapAsync(crmActivitiesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an existing CRM activity record by its ID.
   *
   * @remarks
   * The activitiesUpdate operation allows you to modify an existing activity record in the CRM by specifying its unique ID in the endpoint path. This PATCH request requires the 'id' parameter to identify the record, and headers such as 'x-apideck-consumer-id' and 'x-apideck-app-id' for authentication and authorization. Optionally, 'x-apideck-service-id' can be included to target a specific service integration. The request body should contain the fields you wish to update. If successful, the operation returns a status code of 200, indicating the activity has been updated. The response includes the updated activity details in a JSON format. This operation is essential for keeping CRM activity records current and accurate, facilitating better customer relationship management.
   */
  async update(
    request: operations.CrmActivitiesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesUpdateResponse> {
    return unwrapAsync(crmActivitiesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a specified activity record from the CRM system.
   *
   * @remarks
   * The activitiesDelete operation allows you to remove an activity record from the CRM by specifying its unique ID in the endpoint path. This operation is crucial for maintaining accurate and up-to-date records by eliminating outdated or incorrect entries. To execute this operation, you must provide the 'id' of the activity to be deleted, along with the 'x-apideck-consumer-id' and 'x-apideck-app-id' headers for authentication. Optionally, you can specify the 'x-apideck-service-id' header if targeting a specific service integration. The operation does not require a request body and will return a status code of 200 upon successful deletion, indicating that the activity has been successfully removed from the system.
   */
  async delete(
    request: operations.CrmActivitiesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesDeleteResponse> {
    return unwrapAsync(crmActivitiesDelete(
      this,
      request,
      options,
    ));
  }
}
